commit 2dfbe0feb590dfebaf1e92c4006c1ae22ee482bb
Author: houbao <houbao@codeaurora.org>
Date:   Thu Dec 6 15:17:46 2018 +0800

    Subject: [PATCH] hostapd: Add max rate information into STATUS and STA
     commands
    
    These allow external programs to get max MCS, max nss, and rate
    information of an interface or a STA.

@@ -1047,6 +1144,39 @@ int hostapd_ctrl_iface_status(struct hos
 		len += ret;
 	}
 
+	 ret = os_snprintf(buf + len, buflen - len, "max_nss=%u\n",
+			   hostapd_maxnss(hapd, sta));
+	 if (!os_snprintf_error(buflen - len, ret))
+		 len += ret;
+
+#ifdef CONFIG_IEEE80211AC
+	 if ((sta->flags & WLAN_STA_VHT) && sta->vht_capabilities) {
+		 u8 vht_maxmcs = hostapd_vhtmaxmcs(
+			 le_to_host16(sta->vht_capabilities->
+				     vht_supported_mcs_set.rx_map),
+			 le_to_host16(sta->vht_capabilities->
+				      vht_supported_mcs_set.tx_map));
+		 ret = os_snprintf(buf + len, buflen - len, "max_vhtmcs=%u\n",
+				     vht_maxmcs);
+		 if (!os_snprintf_error(buflen - len, ret))
+			  len += ret;
+	 }
+#endif /* CONFIG_IEEE80211AC */
+
+#ifdef CONFIG_IEEE80211N
+	 if ((sta->flags & (WLAN_STA_HT | WLAN_STA_VHT)) == WLAN_STA_HT &&
+	     sta->ht_capabilities) {
+		 u8 ht_maxmcs;
+
+		 ht_maxmcs = hostapd_htmaxmcs(sta->ht_capabilities->
+					      supported_mcs_set);
+		ret = os_snprintf(buf + len, buflen - len, "max_mcs=%u\n",
+				    ht_maxmcs);
+		 if (!os_snprintf_error(buflen - len, ret))
+			 len += ret;
+	 }
+#endif /* CONFIG_IEEE80211N */
+
 	return len;
 }
 
@@ -1508,6 +1638,20 @@ int hostapd_ctrl_iface_acl_show_mac(stru
 			return len;
 		i++;
 		len += ret;
+
+		 if (mode) {
+			 u16 rxmap = mode->vht_mcs_set[0] |
+				 (mode->vht_mcs_set[1] << 8);
+			 u16 txmap = mode->vht_mcs_set[4] |
+				 (mode->vht_mcs_set[5] << 8);
+
+			 ret = os_snprintf(buf + len, buflen - len,
+					   "vht_max_mcs=%u\n",
+					   hostapd_vhtmaxmcs(rxmap, txmap));
+			 if (os_snprintf_error(buflen - len, ret))
+				 return len;
+			 len += ret;
+		 }
 	}
 	return len;
 }
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -49,6 +49,11 @@
 #define WLAN_STA_PENDING_DEAUTH_CB BIT(30)
 #define WLAN_STA_NONERP BIT(31)
 
+/* Maximum number of supported rates (from both Supported Rates and Extended
+ * Supported Rates IEs). */
+#define WLAN_SUPP_RATES_MAX 32
+#define WLAN_SUPP_HT_RATES_MAX 77
+
 struct hostapd_data;
 
 struct mbo_non_pref_chan_info {
--- a/src/ap/ctrl_iface_ap.c
+++ b/src/ap/ctrl_iface_ap.c
@@ -97,6 +97,48 @@ static int hostapd_get_sta_conn_time(str
 }
 
 
+static u8 hostapd_htmaxmcs(const u8 *mcs_set)
+{
+	u8 rates[WLAN_SUPP_RATES_MAX];
+	u8 i;
+	u8 j = -1;
+
+	for (i = 0; i < WLAN_SUPP_HT_RATES_MAX; i++) {
+		if (j == WLAN_SUPP_RATES_MAX) {
+			wpa_printf(MSG_INFO,
+				   "HT extended rate set too large; using only %u rates",
+				    j);
+			break;
+		}
+		if (mcs_set[i / 8] & (1 << (i % 8)))
+			rates[++j] = i;
+	}
+	if (j > -1)
+		return rates[j];
+
+	return 0;
+}
+
+
+static u8 hostapd_vhtmaxmcs(u16 rx_vht_mcs_map, u16 tx_vht_mcs_map)
+{
+	u8 rx_max_mcs, tx_max_mcs, max_mcs;
+
+	if (rx_vht_mcs_map && tx_vht_mcs_map) {
+		/* Refer to IEEE P802.11ac/D7.0 Figure 8-401bs
+		 * for VHT MCS Map definition
+		 */
+		rx_max_mcs = rx_vht_mcs_map & 0x03;
+		tx_max_mcs = tx_vht_mcs_map & 0x03;
+		max_mcs = rx_max_mcs < tx_max_mcs ? rx_max_mcs : tx_max_mcs;
+		if (max_mcs < 0x03)
+			return 7 + max_mcs;
+	}
+
+	return 0;
+}
+
+
 static int hostapd_get_sta_info(struct hostapd_data *hapd,
 				struct sta_info *sta,
 				char *buf, size_t buflen)
@@ -488,6 +530,39 @@ static int hostapd_ctrl_iface_sta_mib(st
 	}
 #endif /* CONFIG_IEEE80211BE */
 
+	ret = os_snprintf(buf + len, buflen - len, "max_nss=%u\n",
+			hostapd_maxnss(hapd, sta));
+	if (!os_snprintf_error(buflen - len, ret))
+		len += ret;
+
+#ifdef CONFIG_IEEE80211AC
+	if ((sta->flags & WLAN_STA_VHT) && sta->vht_capabilities) {
+		u8 vht_maxmcs = hostapd_vhtmaxmcs(
+				le_to_host16(sta->vht_capabilities->
+					vht_supported_mcs_set.rx_map),
+				le_to_host16(sta->vht_capabilities->
+					vht_supported_mcs_set.tx_map));
+		ret = os_snprintf(buf + len, buflen - len, "max_vhtmcs=%u\n",
+				vht_maxmcs);
+		if (!os_snprintf_error(buflen - len, ret))
+			len += ret;
+	}
+#endif /* CONFIG_IEEE80211AC */
+
+#ifdef CONFIG_IEEE80211N
+	if ((sta->flags & (WLAN_STA_HT | WLAN_STA_VHT)) == WLAN_STA_HT &&
+			sta->ht_capabilities) {
+		u8 ht_maxmcs;
+
+		ht_maxmcs = hostapd_htmaxmcs(sta->ht_capabilities->
+				supported_mcs_set);
+		ret = os_snprintf(buf + len, buflen - len, "max_mcs=%u\n",
+				ht_maxmcs);
+		if (!os_snprintf_error(buflen - len, ret))
+			len += ret;
+	}
+#endif /* CONFIG_IEEE80211N */
+
 	return len;
 }
 
@@ -1007,6 +1082,20 @@ int hostapd_ctrl_iface_status(struct hos
 		if (os_snprintf_error(buflen - len, ret))
 			return len;
 		len += ret;
+
+		if (mode) {
+			u16 rxmap = mode->vht_mcs_set[0] |
+				(mode->vht_mcs_set[1] << 8);
+			u16 txmap = mode->vht_mcs_set[4] |
+				(mode->vht_mcs_set[5] << 8);
+
+			ret = os_snprintf(buf + len, buflen - len,
+					"vht_max_mcs=%u\n",
+					hostapd_vhtmaxmcs(rxmap, txmap));
+			if (os_snprintf_error(buflen - len, ret))
+				return len;
+			len += ret;
+		}
 	}
 
 	if (iface->conf->ieee80211n && !hapd->conf->disable_11n) {
@@ -1041,8 +1130,33 @@ int hostapd_ctrl_iface_status(struct hos
 		if (os_snprintf_error(buflen - len, ret))
 			return len;
 		len += ret;
+
+		if (mode && iface->conf->ieee80211n) {
+			ret = os_snprintf(buf + len, buflen - len,
+					"max_mcs=%u\n",
+					hostapd_htmaxmcs(mode->mcs_set));
+			if (os_snprintf_error(buflen - len, ret))
+				return len;
+			len += ret;
+		}
+	}
+
+	if (mode && mode->rates && mode->num_rates &&
+			mode->num_rates <= WLAN_SUPP_RATES_MAX) {
+		ret = os_snprintf(buf + len, buflen - len,
+				"max_rate=%u\n",
+				mode->rates[mode->num_rates - 1]);
+		if (os_snprintf_error(buflen - len, ret))
+			return len;
+		len += ret;
 	}
 
+	ret = os_snprintf(buf + len, buflen - len, "max_nss=%u\n",
+			hostapd_maxnss(hapd, NULL));
+	if (os_snprintf_error(buflen - len, ret))
+		return len;
+	len += ret;
+
 	for (j = 0; mode && j < mode->num_channels; j++) {
 		if (mode->channels[j].freq == iface->freq) {
 			ret = os_snprintf(buf + len, buflen - len,
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2888,7 +2888,7 @@ static int hostapd_ctrl_iface_color_chan
 #endif /* CONFIG_IEEE80211AX */
 
 
-static u8 hostapd_maxnss(struct hostapd_data *hapd, struct sta_info *sta)
+u8 hostapd_maxnss(struct hostapd_data *hapd, struct sta_info *sta)
 {
 	u8 *mcs_set = NULL;
 	u16 mcs_map;
--- a/src/ap/ctrl_iface_ap.h
+++ b/src/ap/ctrl_iface_ap.h
@@ -53,5 +53,5 @@ int hostapd_ctrl_iface_acl_show_mac(stru
 				    char *buf, size_t buflen);
 int hostapd_disassoc_accept_mac(struct hostapd_data *hapd);
 int hostapd_disassoc_deny_mac(struct hostapd_data *hapd);
-
+u8 hostapd_maxnss(struct hostapd_data *hapd, struct sta_info *sta);
 #endif /* CTRL_IFACE_AP_H */
