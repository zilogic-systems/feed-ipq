From d7713b5ca78966dd7ea6a3bdd35511503dc59537 Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Thu, 14 Apr 2022 12:14:03 +0530
Subject: [PATCH] mesh: add EHT support

Add mesh_eht_enabled and eht ssid config to include EHT capability
and EHT operation IEs in mesh PLINK action frames.
Update mesh_eht_enabled from EHT capability advertised for mesh mode.
Support for mesh channelization in 320MHz.

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Signed-off-by: Sathishkumar Muruganandam <murugana@qti.qualcomm.com>
---

--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4649,6 +4649,8 @@ static int hostapd_config_fill(struct ho
 	} else if (os_strcmp(buf, "wowlan_triggers") == 0) {
 		os_free(bss->wowlan_triggers);
 		bss->wowlan_triggers = os_strdup(pos);
+	} else if (os_strcmp(buf, "enable_320mhz_bw") == 0) {
+		conf->enable_320mhz_bw = atoi(pos);
 	} else if (os_strcmp(buf, "enable_160mhz_bw") == 0) {
 		 conf->enable_160mhz_bw = atoi(pos);
 	} else if (os_strcmp(buf, "disable_40mhz_scan") == 0) {
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1264,6 +1264,7 @@ struct hostapd_config {
 #define CH_SWITCH_EHT_ENABLED BIT(0)
 #define CH_SWITCH_EHT_DISABLED BIT(1)
 	unsigned int ch_switch_eht_config;
+	int enable_320mhz_bw;
 
 	enum mbssid {
 		MBSSID_DISABLED = 0,
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1413,6 +1413,11 @@ struct wpa_driver_associate_params {
 	int beacon_tx_mode;
 
 	/**
+	 * Enable 320MHz BW - set it 1 to enable mesh 320MHz 6G
+	 */
+	int enable_320mhz_bw;
+
+	/**
 	 * Enable 160MHz BW - set it 1 to enable mesh 160MHz 6G
 	 */
 	int enable_160mhz_bw;
--- a/wpa_supplicant/ap.c
+++ b/wpa_supplicant/ap.c
@@ -432,6 +432,11 @@ int wpa_supplicant_conf_ap_ht(struct wpa
 			    ssid->he)
 				conf->ieee80211ax = 1;
 
+			if (mode->eht_capab[wpas_mode_to_ieee80211_mode(
+					    ssid->mode)].eht_supported &&
+			    ssid->eht)
+				conf->ieee80211be = 1;
+
 			if (mode->vht_capab && ssid->vht) {
 				conf->ieee80211ac = 1;
 				conf->vht_capab |= mode->vht_capab;
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -2856,6 +2856,7 @@ static const struct parse_data ssid_fiel
 	{ INT_RANGE(disable_40mhz_scan, 0, 1)},
 	{ INT_RANGE(beacon_tx_mode, 1, 2)},
 	{ INT_RANGE(enable_160mhz_bw, 0, 1)},
+	{ INT_RANGE(enable_320mhz_bw, 0, 1)},
 	{ INT_RANGE(disable_eht, 0, 1)},
 	{ INT_RANGE(enable_4addr_mode, 0, 1)},
 	{ INT_RANGE(max_idle, 0, 65535)},
--- a/wpa_supplicant/config_ssid.h
+++ b/wpa_supplicant/config_ssid.h
@@ -1280,6 +1280,11 @@ struct wpa_ssid {
 	int enable_160mhz_bw;
 
 	/**
+	 * Enable 320MHz BW - set it 1 to enable mesh 320MHz 6G
+	 */
+	int enable_320mhz_bw;
+
+	/**
 	 * disable_eht - Disable EHT (IEEE 802.11be) for this network
 	 *
 	 * By default, use it if it is available, but this can be configured
--- a/wpa_supplicant/mesh.c
+++ b/wpa_supplicant/mesh.c
@@ -466,6 +466,9 @@ static int wpa_supplicant_mesh_init(stru
 		case 160:
 			conf->op_class = 134;
 			break;
+		case 320:
+			conf->op_class = 137;
+			break;
 		default:
 			conf->op_class = 131;
 			break;
@@ -683,6 +686,9 @@ int wpa_supplicant_join_mesh(struct wpa_
 		case 160:
 			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_160MHZ;
 			break;
+		case 320:
+			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_320MHZ;
+			break;
 		default:
 			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_USE_HT;
 			break;
--- a/wpa_supplicant/mesh_mpm.c
+++ b/wpa_supplicant/mesh_mpm.c
@@ -795,6 +795,11 @@ static struct sta_info * mesh_mpm_add_pe
 			   elems->eht_capabilities_len);
 #endif /*CONFIG_IEEE80211BE */
 
+#ifdef CONFIG_IEEE80211BE
+	copy_sta_eht_capab(data, sta, IEEE80211_MODE_MESH, elems->he_capabilities,
+			   elems->he_capabilities_len, elems->eht_capabilities, elems->eht_capabilities_len);
+#endif /* CONFIG_IEEE80211BE */
+
 	if (hostapd_get_aid(data, sta) < 0) {
 		wpa_msg(wpa_s, MSG_ERROR, "No AIDs available");
 		ap_free_sta(data, sta);
