From d46c2950367f8a9bb7c5e0e473e071d325e9f565 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Wed, 28 Aug 2024 16:22:51 +0530
Subject: [PATCH] hostapd: Disable 6GHz FILS and UBPR for multi-band AP

WFA test plan 2.0 has specification below:
3.3.2.1 Out of Box requirements:

FILS Discovery and Unsolicited Probe Response frames disabled
in the 6 GHz band if the AP simultaneously operates
on multiple bands in its out of box configuration.

Also Channel access latency in 6GHz gets impacted by 20-33%
when there is FILS/UBPR in-band discovery frames.

Extra transmissions (FILS, UBPRs) are polluting the spectrum
and increasing the potential to cause interference to the
incumbent systems operating in the 6GHz band.

Keeping these in-band advertisement frames disabled helps
to optimize this latency. So, the aim to is to keep
FILS/UBPR disabled without impacting discoverability.

Having OOB advertisement in lower band helps to avoid any
impact in AP discoverability even if FILS/UBPR is
disabled in 6GHz. So, keep those disabled if OOB is
ongoing.

Re-enable in-band discovery with FILS/20 TU PRBR frames
if OOB gets disabled.

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 src/ap/ap_config.h           | 10 +++++
 src/ap/beacon.c              | 32 ++++++++++++++-
 src/ap/hostapd.c             | 77 +++++++++++++++++++++++++++++++++++-
 src/ap/ieee802_11.c          | 12 ++----
 src/ap/ieee802_11.h          |  9 +++++
 src/drivers/driver_nl80211.c | 22 +++++++----
 6 files changed, 143 insertions(+), 19 deletions(-)

--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1004,6 +1004,16 @@ struct hostapd_bss_config {
 	bool mld_indicate_disabled;
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_IEEE80211BE */
+	enum {
+		FILS_UBPR_USER_DISABLED,
+		FILS_UBPR_FORCE_DISABLED,
+		FILS_UBPR_ENABLED
+	} fils_state, ubpr_state;
+
+	/* Flag to decide whether or not to force disable FILS/UBPR for
+	 * 6GHz AP based on colocation.
+	 */
+	bool force_disable_in_band_discovery;
 };
 
 /**
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -1792,18 +1792,31 @@ static u8 * hostapd_probe_resp_offloads(
 
 
 #ifdef CONFIG_IEEE80211AX
-/* Unsolicited broadcast Probe Response transmission, 6 GHz only */
+/* Unsolicited broadcast Probe Response(UBPR) transmission, 6 GHz only */
 u8 * hostapd_unsol_bcast_probe_resp(struct hostapd_data *hapd,
 				    struct unsol_bcast_probe_resp *ubpr)
 {
 	struct probe_resp_params probe_params;
 
+	/* Do not enable UBPR in 6GHz AP if colocated with lower band APs */
+	hapd->conf->ubpr_state = FILS_UBPR_USER_DISABLED;
+
 	if (!is_6ghz_op_class(hapd->iconf->op_class))
 		return NULL;
 
+	if (hapd->conf->unsol_bcast_probe_resp_interval &&
+	    hapd->conf->force_disable_in_band_discovery &&
+	    (get_colocation_mode(hapd) == COLOCATED_6GHZ)) {
+		hapd->conf->ubpr_state = FILS_UBPR_FORCE_DISABLED;
+		return NULL;
+	}
+
 	ubpr->unsol_bcast_probe_resp_interval =
 		hapd->conf->unsol_bcast_probe_resp_interval;
 
+	if (ubpr->unsol_bcast_probe_resp_interval)
+		hapd->conf->ubpr_state = FILS_UBPR_ENABLED;
+
 	os_memset(&probe_params, 0, sizeof(probe_params));
 	probe_params.req = NULL;
 	probe_params.is_p2p = false;
@@ -2221,6 +2234,18 @@ static u8 * hostapd_gen_fils_discovery(s
 static u8 * hostapd_fils_discovery(struct hostapd_data *hapd,
 				   struct wpa_driver_ap_params *params)
 {
+	/* Do not enable Fils discovery for 6GHz AP if its colocated
+	 * with lower band APs.
+	 */
+
+	if (is_6ghz_op_class(hapd->iconf->op_class) &&
+	    hapd->conf->force_disable_in_band_discovery &&
+	    get_colocation_mode(hapd) == COLOCATED_6GHZ &&
+	    hapd->conf->fils_discovery_max_int) {
+		hapd->conf->fils_state = FILS_UBPR_FORCE_DISABLED;
+		return NULL;
+	}
+
 	params->fd_max_int = hapd->conf->fils_discovery_max_int;
 	if (is_6ghz_op_class(hapd->iconf->op_class) &&
 	    params->fd_max_int > FD_MAX_INTERVAL_6GHZ)
@@ -2230,9 +2255,12 @@ static u8 * hostapd_fils_discovery(struc
 	if (params->fd_min_int > params->fd_max_int)
 		params->fd_min_int = params->fd_max_int;
 
-	if (params->fd_max_int)
+	if (params->fd_max_int) {
+		hapd->conf->fils_state = FILS_UBPR_ENABLED;
 		return hostapd_gen_fils_discovery(hapd,
 						  &params->fd_frame_tmpl_len);
+	}
+	hapd->conf->fils_state = FILS_UBPR_USER_DISABLED;
 
 	return NULL;
 }
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -73,6 +73,8 @@ static void hostapd_switch_color_timeout
 						 void *user_ctx);
 #endif /* CONFIG_IEEE80211AX */
 
+static void hostapd_interface_update_fils_ubpr(struct hostapd_iface *iface,
+					       bool iface_enabled);
 
 int hostapd_for_each_interface(struct hapd_interfaces *interfaces,
 			       int (*cb)(struct hostapd_iface *iface,
@@ -2001,6 +2003,7 @@ static int hostapd_no_ir_channel_list_up
 		}
 
 		hostapd_set_state(iface, HAPD_IFACE_NO_IR);
+		hostapd_interface_update_fils_ubpr(iface, false);
 		iface->is_no_ir = true;
 		hostapd_drv_stop_ap(iface->bss[0]);
 		hostapd_no_ir_cleanup(iface->bss[0]);
@@ -3035,6 +3038,8 @@ void hostapd_interface_deinit(struct hos
 		hostapd_bss_deinit(iface->bss[j]);
 	}
 
+	hostapd_interface_update_fils_ubpr(iface, false);
+
 #ifdef NEED_AP_MLME
 	hostapd_stop_setup_timers(iface);
 	eloop_cancel_timeout(ap_ht2040_timeout, iface, NULL);
@@ -3698,6 +3703,7 @@ int hostapd_disable_iface(struct hostapd
 	wpa_printf(MSG_DEBUG, "Interface %s disabled",
 		   hapd_iface->bss[0]->conf->iface);
 	hostapd_set_state(hapd_iface, HAPD_IFACE_DISABLED);
+	hostapd_interface_update_fils_ubpr(hapd_iface, false);
 	hostapd_refresh_all_iface_beacons(hapd_iface);
 	return 0;
 }
@@ -4790,6 +4796,8 @@ int hostapd_fill_cca_settings(struct hos
 	settings->counter_offset_beacon = hapd->cca_c_off_beacon;
 	settings->counter_offset_presp = hapd->cca_c_off_proberesp;
 
+	hostapd_interface_update_fils_ubpr(iface, true);
+
 	return 0;
 }
 
@@ -4963,8 +4971,74 @@ void hostapd_ocv_check_csa_sa_query(void
 #endif /* CONFIG_OCV */
 
 
-#ifdef CONFIG_IEEE80211BE
+/**
+ * hostapd_interface_update_fils_ubpr - Update 6GHz In-band discovery
+ * frames (FILS/UBPR) based on lower band interface state change.
+ * @iface_enabled: Whether lower band AP is enabled or disabled
+ *
+ * This function iterates through interfaces list and updates all 6GHz
+ * APs In-band discovery frames (enable/disable) based on state of lower
+ * band interfaces.
+ * Lower band interfaces going down: Enable FILS/UBPR for all 6GHz APs if config
+ * has it enabled.
+ * Lower band interfaces coming up: Disable FILS/UBPR for all 6GHz APs if not done
+ * already.
+ */
+static void
+hostapd_interface_update_fils_ubpr(struct hostapd_iface *iface, bool iface_enabled)
+{
+	int i, j;
+
+	if (!iface || (iface->interfaces == NULL))
+		return;
+
+#ifdef CONFIG_MESH
+	if (iface->mconf != NULL)
+		return;
+#endif
+
+	if (is_6ghz_op_class(iface->conf->op_class))
+		return;
+
+	for (i = 0; i < iface->interfaces->count; i++) {
+		struct hostapd_iface *iface_6g = iface->interfaces->iface[i];
+		if (iface == iface_6g || !iface_6g || !iface_6g->conf)
+			continue;
 
+		if (!is_6ghz_op_class(iface_6g->conf->op_class))
+			continue;
+
+		for (j = 0; j < iface_6g->num_bss; j++) {
+			if (!iface_6g->bss[j] || !iface_6g->bss[j]->started)
+				continue;
+
+			/* fils/ubpr force disabling is not preferred for this BSS */
+			if (!iface_6g->bss[j]->conf->force_disable_in_band_discovery)
+				continue;
+
+			/* Lower band interface coming up but fils/ubpr is already disabled */
+			if (iface_enabled &&
+			    (iface_6g->bss[j]->conf->fils_state != FILS_UBPR_ENABLED &&
+			    iface_6g->bss[j]->conf->ubpr_state != FILS_UBPR_ENABLED)) {
+				continue;
+			}
+			/* Lower band interface going down but fils/ubpr is not force disabled */
+			if (!iface_enabled &&
+			    (iface_6g->bss[j]->conf->fils_state != FILS_UBPR_FORCE_DISABLED &&
+			    iface_6g->bss[j]->conf->ubpr_state != FILS_UBPR_FORCE_DISABLED)) {
+				continue;
+			}
+			wpa_printf(MSG_DEBUG, "%s Interface getting %s, check and set 6GHz Interface(%s)"
+				   "In-band discovery frames", iface->bss[0]->conf->iface,
+				   iface_enabled ? "enabled" : "disabled", iface_6g->bss[j]->conf->iface);
+			ieee802_11_set_beacon(iface_6g->bss[j]);
+		}
+	}
+	return;
+}
+
+
+#ifdef CONFIG_IEEE80211BE
 struct hostapd_data * hostapd_mld_get_link_bss(struct hostapd_data *hapd,
 					       u8 link_id)
 {
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7759,14 +7759,7 @@ repeat_rnr_len:
 }
 
 
-enum colocation_mode {
-	NO_COLOCATED_6GHZ,
-	STANDALONE_6GHZ,
-	COLOCATED_6GHZ,
-	COLOCATED_LOWER_BAND,
-};
-
-static enum colocation_mode get_colocation_mode(struct hostapd_data *hapd)
+enum colocation_mode get_colocation_mode(struct hostapd_data *hapd)
 {
 	u8 i;
 	bool is_6ghz = is_6ghz_op_class(hapd->iconf->op_class);
@@ -7785,6 +7778,9 @@ static enum colocation_mode get_colocati
 		if (iface == hapd->iface || !iface || !iface->conf)
 			continue;
 
+		if (iface->state == HAPD_IFACE_DISABLED)
+			continue;
+
 		is_colocated_6ghz = is_6ghz_op_class(iface->conf->op_class);
 		if (!is_6ghz && is_colocated_6ghz)
 			return COLOCATED_LOWER_BAND;
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -26,6 +26,15 @@ struct sae_pt;
 struct sae_password_entry;
 struct mld_info;
 
+enum colocation_mode {
+	NO_COLOCATED_6GHZ,
+	STANDALONE_6GHZ,
+	COLOCATED_6GHZ,
+	COLOCATED_LOWER_BAND,
+};
+
+enum colocation_mode get_colocation_mode(struct hostapd_data *hapd);
+
 int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 		    struct hostapd_frame_info *fi);
 void ieee802_11_mgmt_cb(struct hostapd_data *hapd, const u8 *buf, size_t len,
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4814,10 +4814,13 @@ static int nl80211_fils_discovery(struct
 	struct nlattr *attr;
 
 	if (!bss->drv->fils_discovery) {
-		wpa_printf(MSG_ERROR,
-			   "nl80211: Driver does not support FILS Discovery frame transmission for %s",
-			   bss->ifname);
-		return -1;
+		if (params->fd_max_int) {
+			wpa_printf(MSG_ERROR,
+				   "nl80211: Driver does not support FILS Discovery frame transmission for %s",
+				   bss->ifname);
+			return -1;
+		}
+		return 0;
 	}
 
 	attr = nla_nest_start(msg, NL80211_ATTR_FILS_DISCOVERY);
@@ -4846,10 +4849,13 @@ static int nl80211_unsol_bcast_probe_res
 	struct nlattr *attr;
 
 	if (!bss->drv->unsol_bcast_probe_resp) {
-		wpa_printf(MSG_ERROR,
-			   "nl80211: Driver does not support unsolicited broadcast Probe Response frame transmission for %s",
-			   bss->ifname);
-		return -1;
+		if (ubpr->unsol_bcast_probe_resp_interval) {
+			wpa_printf(MSG_ERROR,
+				   "nl80211: Driver does not support unsolicited broadcast Probe Response frame transmission for %s",
+				   bss->ifname);
+			return -1;
+		}
+		return 0;
 	}
 
 	wpa_printf(MSG_DEBUG,
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4794,6 +4794,8 @@ static int hostapd_config_fill(struct ho
 	} else if (os_strcmp(buf, "fils_discovery_max_interval") == 0) {
 		bss->fils_discovery_max_int = atoi(pos);
 #endif /* CONFIG_FILS */
+	} else if (os_strcmp(buf, "force_disable_in_band_discovery") == 0) {
+		bss->force_disable_in_band_discovery = atoi(pos);
 	} else if (os_strcmp(buf, "multicast_to_unicast") == 0) {
 		bss->multicast_to_unicast = atoi(pos);
 	} else if (os_strcmp(buf, "bridge_multicast_to_unicast") == 0) {
--- a/hostapd/hostapd.conf
+++ b/hostapd/hostapd.conf
@@ -2256,6 +2256,17 @@ own_ip_addr=127.0.0.1
 #fils_discovery_min_interval=20
 #fils_discovery_max_interval=0
 
+# FILS discovery and unsolicited broadcast probe response frames are
+# in-band discovery frames for 6GHz APs.
+# For a 6GHz AP colocated with lower band APs (2.4/5GHz) above in-band
+# discovery frames can be optionally disabled since lower bands
+# will carry the information about the 6GHz BSS in co-location RNR. Setting
+# "force_disable_in_band_discovery" to 1 will allow hostapd to dynamically
+# enable/disable 6GHz in band disocvery frame based on lower band AP's states.
+# default: 1
+
+#force_disable_in_band_discovery=0
+
 # Transition Disable indication
 # The AP can notify authenticated stations to disable transition mode in their
 # network profiles when the network has completed transition steps, i.e., once
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -177,6 +177,7 @@ void hostapd_config_defaults_bss(struct
 	bss->pasn_comeback_after = 10;
 	bss->pasn_noauth = 1;
 #endif /* CONFIG_PASN */
+	bss->force_disable_in_band_discovery = 1;
 }
 
 
