From 7b04bc608937e68db9e538b42221abd7f333377a Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Fri, 14 Apr 2023 06:38:15 +0530
Subject: [PATCH] wpa_supplicant: mesh: Fix channel switch and puncturing
 bitmap

When mesh init happens, op class was defaulted to HT op class and never
reinitiated to maximum bandwidth it can support or operating bandwidth.

Channel switch event callback from wpa_supplicant is not passed
with puncturing bitmap. Fix it by adding appropriate parameters to
function call.

Due to this, when wpa_cli is used for channel switch, when filling
beacons to send during CSA, eht operational IE is never added with
puncturing bitmap.

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>

--- a/wpa_supplicant/ap.c
+++ b/wpa_supplicant/ap.c
@@ -200,7 +200,6 @@ wpa_supplicant_find_hw_mode(struct wpa_s
 }
 
 
-#ifdef CONFIG_P2P
 
 static int get_max_oper_chwidth_6ghz(int chwidth)
 {
@@ -214,6 +213,8 @@ static int get_max_oper_chwidth_6ghz(int
 	case CONF_OPER_CHWIDTH_80P80MHZ:
 	case CONF_OPER_CHWIDTH_160MHZ:
 		return 160;
+	case CONF_OPER_CHWIDTH_320MHZ:
+		return 320;
 	default:
 		return 0;
 	}
@@ -225,6 +226,16 @@ static void wpas_conf_ap_he_6ghz(struct
 				 struct wpa_ssid *ssid,
 				 struct hostapd_config *conf)
 {
+	if (!ssid->p2p_group && get_max_oper_chwidth_6ghz(ssid->max_oper_chwidth) >= 80) {
+		if (ssid->max_oper_chwidth)
+			hostapd_set_oper_chwidth(conf, ssid->max_oper_chwidth);
+		if (hostapd_get_oper_chwidth(conf))
+			ieee80211_freq_to_channel_ext(ssid->frequency, 0,
+					hostapd_get_oper_chwidth(conf),
+					&conf->op_class,
+					&conf->channel);
+	}
+#ifdef CONFIG_P2P
 	bool is_chanwidth_40_80, is_chanwidth_160;
 	int he_chanwidth;
 
@@ -260,10 +271,9 @@ static void wpas_conf_ap_he_6ghz(struct
 	if ((is_chanwidth_40_80 || is_chanwidth_160) && ssid->p2p_group &&
 	    get_max_oper_chwidth_6ghz(ssid->max_oper_chwidth) >= 80)
 		wpas_conf_ap_vht(wpa_s, ssid, conf, mode);
+#endif
 }
 
-#endif /* CONFIG_P2P */
-
 
 int wpa_supplicant_conf_ap_ht(struct wpa_supplicant *wpa_s,
 			      struct wpa_ssid *ssid,
@@ -349,9 +359,7 @@ int wpa_supplicant_conf_ap_ht(struct wpa
 			    ssid->he)
 				conf->ieee80211ax = 1;
 
-#ifdef CONFIG_P2P
 			wpas_conf_ap_he_6ghz(wpa_s, mode, ssid, conf);
-#endif /* CONFIG_P2P */
 		} else if (!no_ht && mode && mode->ht_capab) {
 			wpa_printf(MSG_DEBUG,
 				   "Enable HT support (p2p_group=%d 11a=%d ht40_hw_capab=%d ssid->ht40=%d)",
--- a/wpa_supplicant/mesh.c
+++ b/wpa_supplicant/mesh.c
@@ -704,28 +704,28 @@ int wpa_supplicant_join_mesh(struct wpa_
 	if (wpa_s->mesh_vht_enabled) {
 		ssid->vht = 1;
 		ssid->vht_center_freq1 = params->freq.center_freq1;
-		switch (params->freq.bandwidth) {
-		case 80:
-			if (params->freq.center_freq2) {
-				ssid->max_oper_chwidth =
-					CONF_OPER_CHWIDTH_80P80MHZ;
-				ssid->vht_center_freq2 =
-					params->freq.center_freq2;
-			} else {
-				ssid->max_oper_chwidth =
-					CONF_OPER_CHWIDTH_80MHZ;
-			}
-			break;
-		case 160:
-			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_160MHZ;
-			break;
-		case 320:
-			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_320MHZ;
-			break;
-		default:
-			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_USE_HT;
-			break;
+	}
+	switch (params->freq.bandwidth) {
+	case 80:
+		if (params->freq.center_freq2) {
+			ssid->max_oper_chwidth =
+				CONF_OPER_CHWIDTH_80P80MHZ;
+			ssid->vht_center_freq2 =
+				params->freq.center_freq2;
+		} else {
+			ssid->max_oper_chwidth =
+				CONF_OPER_CHWIDTH_80MHZ;
 		}
+		break;
+	case 160:
+		ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_160MHZ;
+		break;
+	case 320:
+		ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_320MHZ;
+		break;
+	default:
+		ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_USE_HT;
+		break;
 	}
 	if (wpa_s->mesh_he_enabled)
 		ssid->he = 1;
