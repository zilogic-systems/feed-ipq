From 889047335722d6cabaea8a56fa0445ddc2048d11 Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Thu, 12 Oct 2023 23:25:59 +0530
Subject: [PATCH] hostapd: MLO MBSSID Support

For an ML AP single interface can have multiple links and any
of links can be a TX link for other ML/NON-ML APs in same
radio those forming an MBSSID group.
Hence if Tx interface of a non-tx AP is an ML AP,
then link id of the corresponding transmitting link inside
that TX ML AP has to be notified while starting non-tx vdev,
so that the kernel can map tx vdev and tx link for this non-tx AP.

Add additional attribute and send tx link id along tx ifindex
in non-transmitting AP START CMD.

For beacon Add ML IE for Non-tx profie inside MBSSID non-tx bss
profile sub element if it is an MLD.

For Probe response Solicited MLD APs MLE should be added in the frame body
of the multi-link probe response, add the same.

Add MLD information in RNR partial profile TBTTs as well as ML Partner
reporting TBTTs if reported AP is an MLD AP with right mld id.

Currently bssid given in config file is used as mld address and
link address/bssid is randomized, this breaks MBSSID addressing
pattern.
Fix link address usage in MLD bring up to use bssid
given in config as such and use first link bssid as ML Address for
that MLD.

While building ML IE for beacon and probe, length of 256 is allocated
statically but for EMA length of MBSSID IE determines the periodicity
and hence considering a static length for non transmitting profile's ML IE
affects the whole EMA logic.
Fix this by calculating the exact length of ML IE that is to be added for
a BSS.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 hostapd/main.c               |   7 +-
 src/ap/beacon.c              |   8 +++
 src/ap/hostapd.c             |  12 ++--
 src/ap/ieee802_11.c          | 128 +++++++++++++++++++++++++----------
 src/ap/ieee802_11.h          |   2 +
 src/ap/ieee802_11_eht.c      |  82 +++++++++++++++++++---
 src/drivers/driver.h         |   7 ++
 src/drivers/driver_nl80211.c |  35 +++-------
 8 files changed, 201 insertions(+), 80 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -603,6 +603,10 @@ ieee802_11_build_ap_params_mbssid(struct
 	}
 
 	tx_bss = hostapd_mbssid_get_tx_bss(hapd);
+	if (tx_bss->conf->mld_ap)
+		params->mbssid_tx_iface_linkid = tx_bss->mld_link_id;
+	else
+		params->mbssid_tx_iface_linkid = -1;
 	len = hostapd_eid_mbssid_len(tx_bss, WLAN_FC_STYPE_BEACON, &elem_count,
 				     NULL, 0, &rnr_len);
 	if (!len || (iface->conf->mbssid == ENHANCED_MBSSID_ENABLED &&
@@ -792,6 +796,8 @@ static size_t hostapd_probe_resp_elems_l
 			buflen += (6 + 2 + 4 +
 				   sizeof(struct ieee80211_240mhz_vendor_oper));
 	}
+
+	/* TODO: hanlde ML probe len */
 #endif /* CONFIG_IEEE80211BE */
 
 	buflen += hostapd_eid_mbssid_len(hapd, WLAN_FC_STYPE_PROBE_RESP, NULL,
@@ -953,6 +959,8 @@ static u8 * hostapd_probe_resp_fill_elem
 		pos = hostapd_eid_eht_operation(hapd, pos, IEEE80211_MODE_AP);
 		pos = hostapd_eid_vendor_240mhz(hapd, pos, IEEE80211_MODE_AP);
 	}
+
+	/*TODO: ML probe IE ? */
 #endif /* CONFIG_IEEE80211BE */
 
 #ifdef CONFIG_IEEE80211AC
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -1346,6 +1346,8 @@ static int hostapd_start_beacon(struct h
 				       WLAN_REASON_PREV_AUTH_NOT_VALID);
 	}
 
+	if (hapd->wpa_auth && wpa_init_keys(hapd->wpa_auth) < 0)
+		return -1;
 	if (hapd->driver && hapd->driver->set_operstate)
 		hapd->driver->set_operstate(hapd->drv_priv, 1);
 
@@ -1464,6 +1466,7 @@ int hostapd_setup_bss(struct hostapd_dat
 			/* Allocate the configured BSSID. */
 			os_memcpy(hapd->own_addr, conf->bssid, ETH_ALEN);
 
+
 			if (hostapd_mac_comp(hapd->own_addr,
 					     hapd->iface->bss[0]->own_addr) ==
 			    0) {
@@ -1773,9 +1776,6 @@ setup_mld:
 	if (start_beacon && hostapd_start_beacon(hapd, flush_old_stations) < 0)
 		return -1;
 
-	if (hapd->wpa_auth && wpa_init_keys(hapd->wpa_auth) < 0)
-		return -1;
-
 	return 0;
 }
 
@@ -5194,10 +5194,7 @@ u8 hostapd_get_mld_id(struct hostapd_dat
 	if (!hapd->conf->mld_ap)
 		return 255;
 
-	/* MLD ID 0 represents self */
-	return 0;
-
-	/* TODO: MLD ID for Multiple BSS cases */
+	return hostapd_mbssid_get_bss_index(hapd);
 }
 
 
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7649,6 +7649,37 @@ static size_t hostapd_eid_nr_db_len(stru
 	return total_len;
 }
 
+bool hostapd_mbssid_mld_match(struct hostapd_data *tx_hapd,
+			      struct hostapd_data *ml_hapd, u8 *match_idx)
+{
+	int bss_idx = 0;
+	struct hostapd_data *bss;
+
+	if (!ml_hapd->conf->mld_ap)
+		return false;
+
+	if (!tx_hapd->iconf->mbssid || tx_hapd->iface->num_bss <= 1) {
+		if (hostapd_is_ml_partner(tx_hapd, ml_hapd)) {
+			if (match_idx)
+				*match_idx = 0;
+			return true;
+		} else
+			return false;
+	}
+
+	for (bss_idx = 0; bss_idx < tx_hapd->iface->num_bss; bss_idx++) {
+		bss = tx_hapd->iface->bss[bss_idx];
+		if (!bss)
+			continue;
+
+		if (hostapd_is_ml_partner(bss, ml_hapd)) {
+			if (match_idx)
+				*match_idx = bss_idx;
+			return true;
+		}
+	}
+	return false;
+}
 
 struct mbssid_ie_profiles {
 	u8 start;
@@ -7658,9 +7689,9 @@ struct mbssid_ie_profiles {
 static bool hostapd_skip_rnr(size_t i, struct mbssid_ie_profiles *skip_profiles,
 			     bool ap_mld, u8 tbtt_info_len, bool mld_update,
 			     struct hostapd_data *reporting_hapd,
-			     struct hostapd_data *bss)
+			     struct hostapd_data *bss, u8 *match_idx)
 {
-	if (skip_profiles &&
+	if (!mld_update && skip_profiles &&
 	    i >= skip_profiles->start && i < skip_profiles->end)
 		return true;
 
@@ -7682,7 +7713,16 @@ static bool hostapd_skip_rnr(size_t i, s
 
 	/* If building for ML RNR and they are not ML partners, don't include.
 	 */
-	if (mld_update && !hostapd_is_ml_partner(reporting_hapd, bss))
+	if (mld_update && !hostapd_mbssid_mld_match(reporting_hapd, bss,
+						     match_idx))
+		return true;
+
+	/* When MLD params are added to beacon RNR and in case of EMA beacons
+	 * we report only affiliated APs belonging to the reported non Tx profiles
+	 * And TX profile will reported in every EMA beacon.
+	 */
+	if (mld_update && skip_profiles && *match_idx &&
+	    ((*match_idx < skip_profiles->start) || (*match_idx >= skip_profiles->end)))
 		return true;
 #endif /* CONFIG_IEEE80211BE */
 
@@ -7722,6 +7762,7 @@ repeat_rnr_len:
 		for (i = start; i < hapd->iface->num_bss; i++) {
 			struct hostapd_data *bss = hapd->iface->bss[i];
 			bool ap_mld = false;
+			u8 match_idx = 255;
 
 			if (!bss || !bss->conf || !bss->started)
 				continue;
@@ -7736,7 +7777,7 @@ repeat_rnr_len:
 
 			if (hostapd_skip_rnr(i, skip_profiles, ap_mld,
 					     tbtt_info_len, mld_update,
-					     reporting_hapd, bss))
+					     reporting_hapd, bss, &match_idx))
 				continue;
 
 			if (len + tbtt_info_len > 255 ||
@@ -7847,6 +7888,7 @@ static size_t hostapd_eid_rnr_colocation
 
 
 static size_t hostapd_eid_rnr_mlo_len(struct hostapd_data *hapd, u32 type,
+				      struct mbssid_ie_profiles *skip_profiles,
 				      size_t *current_len)
 {
 	size_t len = 0;
@@ -7854,7 +7896,7 @@ static size_t hostapd_eid_rnr_mlo_len(st
 	struct hostapd_iface *iface;
 	size_t i;
 
-	if (!hapd->iface || !hapd->iface->interfaces || !hapd->conf->mld_ap)
+	if (!hapd->iface || !hapd->iface->interfaces)
 		return 0;
 
 	/* TODO: Allow for FILS/Action as well */
@@ -7869,7 +7911,7 @@ static size_t hostapd_eid_rnr_mlo_len(st
 			continue;
 
 		len += hostapd_eid_rnr_iface_len(iface->bss[0], hapd,
-						 current_len, NULL, true);
+						 current_len, skip_profiles, true);
 	}
 #endif /* CONFIG_IEEE80211BE */
 
@@ -7913,7 +7955,7 @@ size_t hostapd_eid_rnr_len(struct hostap
 	if (include_mld_params &&
 	    (type != WLAN_FC_STYPE_BEACON ||
 	     hapd->iconf->mbssid != ENHANCED_MBSSID_ENABLED))
-		total_len += hostapd_eid_rnr_mlo_len(hapd, type, &current_len);
+		total_len += hostapd_eid_rnr_mlo_len(hapd, type, NULL, &current_len);
 
 	return total_len;
 }
@@ -7984,6 +8026,7 @@ static bool hostapd_eid_rnr_bss(struct h
 	struct hostapd_iface *iface = hapd->iface;
 	struct hostapd_data *bss = iface->bss[i];
 	u8 bss_param = 0;
+	u8 match_idx = 255;
 	bool ap_mld = false;
 	u8 *eid = *pos;
 
@@ -7996,7 +8039,7 @@ static bool hostapd_eid_rnr_bss(struct h
 		return false;
 
 	if (hostapd_skip_rnr(i, skip_profiles, ap_mld, tbtt_info_len,
-			     mld_update, reporting_hapd, bss))
+			     mld_update, reporting_hapd, bss, &match_idx))
 	    return false;
 
 	if (*len + RNR_TBTT_INFO_LEN > 255 ||
@@ -8045,16 +8088,15 @@ static bool hostapd_eid_rnr_bss(struct h
 		 *  a) MLD ID advertised shall be 255.
 		 *  b) Link ID advertised shall be 15.
 		 *  c) BPCC advertised shall be 255 */
-		is_partner = hostapd_is_ml_partner(bss, reporting_hapd);
 		/* MLD ID */
-		*eid++ = is_partner ? hostapd_get_mld_id(bss) : 0xFF;
+		*eid++ = match_idx;
 		/* Link ID (Bit 3 to Bit 0)
 		 * BPCC (Bit 4 to Bit 7) */
-		*eid++ = is_partner ?
+		*eid++ = match_idx < 255 ?
 			bss->mld_link_id | ((param_ch & 0xF) << 4) :
 			(MAX_NUM_MLD_LINKS | 0xF0);
 		/* BPCC (Bit 3 to Bit 0) */
-		*eid = is_partner ? ((param_ch & 0xF0) >> 4) : 0x0F;
+		*eid = match_idx < 255 ? ((param_ch & 0xF0) >> 4) : 0x0F;
 #ifdef CONFIG_TESTING_OPTIONS
 		if (bss->conf->mld_indicate_disabled)
 			*eid |= RNR_TBTT_INFO_MLD_PARAM2_LINK_DISABLED;
@@ -8175,13 +8217,14 @@ u8 * hostapd_eid_rnr_colocation(struct h
 
 
 u8 * hostapd_eid_rnr_mlo(struct hostapd_data *hapd, u32 type,
-			 u8 *eid, size_t *current_len)
+			 u8 *eid, struct mbssid_ie_profiles *skip_profiles,
+			 size_t *current_len)
 {
 #ifdef CONFIG_IEEE80211BE
 	struct hostapd_iface *iface;
 	size_t i;
 
-	if (!hapd->iface || !hapd->iface->interfaces || !hapd->conf->mld_ap)
+	if (!hapd->iface || !hapd->iface->interfaces)
 		return eid;
 
 	/* TODO: Allow for FILS/Action as well */
@@ -8196,7 +8239,7 @@ u8 * hostapd_eid_rnr_mlo(struct hostapd_
 			continue;
 
 		eid = hostapd_eid_rnr_iface(iface->bss[0], hapd, eid,
-					    current_len, NULL, true);
+					    current_len, skip_profiles, true);
 	}
 #endif /* CONFIG_IEEE80211BE */
 
@@ -8240,7 +8283,7 @@ u8 * hostapd_eid_rnr(struct hostapd_data
 	if (include_mld_params &&
 	    (type != WLAN_FC_STYPE_BEACON ||
 	     hapd->iconf->mbssid != ENHANCED_MBSSID_ENABLED))
-		eid = hostapd_eid_rnr_mlo(hapd, type, eid, &current_len);
+		eid = hostapd_eid_rnr_mlo(hapd, type, eid, NULL, &current_len);
 
 	if (eid == eid_start + 2)
 		return eid_start;
@@ -8352,6 +8395,11 @@ static size_t hostapd_eid_mbssid_elem_le
 			nontx_profile_len += xrate_len;
 		else if (tx_xrate_len)
 			ie_count++;
+
+		/* For ML Probe resp, solicited hapd's MLE will be in the frame body */
+		if (bss->conf->mld_ap && (bss != hapd || frame_type != WLAN_FC_STYPE_PROBE_RESP))
+			nontx_profile_len += hostapd_eid_eht_ml_beacon_len(bss, NULL, true);
+
 		if (ie_count)
 			nontx_profile_len += 4 + ie_count;
 
@@ -8373,11 +8421,6 @@ size_t hostapd_eid_mbssid_len(struct hos
 			      size_t known_bss_len, size_t *rnr_len)
 {
 	size_t len = 0, bss_index = 1;
-	bool ap_mld = false;
-
-#ifdef CONFIG_IEEE80211BE
-	ap_mld = hapd->conf->mld_ap;
-#endif /* CONFIG_IEEE80211BE */
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_type != WLAN_FC_STYPE_BEACON &&
@@ -8410,7 +8453,10 @@ size_t hostapd_eid_mbssid_len(struct hos
 
 			*rnr_len += hostapd_eid_rnr_iface_len(
 				hapd, hostapd_mbssid_get_tx_bss(hapd),
-				&rnr_cur_len, &skip_profiles, ap_mld);
+				&rnr_cur_len, &skip_profiles, false);
+			*rnr_len += hostapd_eid_rnr_mlo_len(
+				hostapd_mbssid_get_tx_bss(hapd), frame_type,
+				&skip_profiles, &rnr_cur_len);
 		}
 	}
 
@@ -8519,6 +8565,11 @@ static u8 * hostapd_eid_mbssid_elem(stru
 			non_inherit_ie[ie_count++] = WLAN_EID_EXT_SUPP_RATES;
 		if (!rsnx && hostapd_wpa_ie(tx_bss, WLAN_EID_RSNX))
 			non_inherit_ie[ie_count++] = WLAN_EID_RSNX;
+
+		/* For ML Probe resp, solicited hapd's MLE will be in the frame body */
+		if (bss->conf->mld_ap && (bss != hapd || frame_type != WLAN_FC_STYPE_PROBE_RESP))
+			eid = hostapd_eid_eht_ml_beacon(bss, NULL, eid, true);
+
 		if (ie_count) {
 			*eid++ = WLAN_EID_EXTENSION;
 			*eid++ = 2 + ie_count + 1;
@@ -8554,11 +8605,7 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 {
 	size_t bss_index = 1, cur_len = 0;
 	u8 elem_index = 0, *rnr_start_eid = rnr_eid;
-	bool add_rnr, ap_mld = false;
-
-#ifdef CONFIG_IEEE80211BE
-	ap_mld = hapd->conf->mld_ap;
-#endif /* CONFIG_IEEE80211BE */
+	bool add_rnr;
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_stype != WLAN_FC_STYPE_BEACON &&
@@ -8603,7 +8650,11 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 			cur_len = 0;
 			rnr_eid = hostapd_eid_rnr_iface(
 				hapd, hostapd_mbssid_get_tx_bss(hapd),
-				rnr_eid, &cur_len, &skip_profiles, ap_mld);
+				rnr_eid, &cur_len, &skip_profiles, false);
+			rnr_eid = hostapd_eid_rnr_mlo(
+				hostapd_mbssid_get_tx_bss(hapd), frame_stype,
+				rnr_eid, &skip_profiles, &cur_len);
+
 		}
 	}
 
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1850,6 +1850,13 @@ struct wpa_driver_ap_params {
 	const char *mbssid_tx_iface;
 
 	/**
+	 * mbssid_tx_iface_linkid linkid which is Transmitting interface
+	 * for this non-tx link if mbssid_tx_iface is an MLD
+	 */
+
+	int mbssid_tx_iface_linkid;
+
+	/**
 	 * mbssid_index - The index of this BSS in the MBSSID set
 	 */
 	unsigned int mbssid_index;
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -736,7 +736,11 @@ static struct nl_msg *
 nl80211_ifindex_msg(struct wpa_driver_nl80211_data *drv, int ifindex,
 		    int flags, uint8_t cmd)
 {
-	return nl80211_ifindex_msg_build(drv, nlmsg_alloc(), ifindex, flags,
+	/* WAR: Increasing max buffer size since nla_reserve() in libnl-tiny
+	 * needs twice the current consumed length to be available for any attribute to be
+	 * added. Fix it properly and remove this.
+	 */
+	return nl80211_ifindex_msg_build(drv, nlmsg_alloc_size(getpagesize() * 2), ifindex, flags,
 					 cmd);
 }
 
@@ -4905,6 +4909,9 @@ static int nl80211_mbssid(struct nl_msg
 		    nla_put_u32(msg, NL80211_MBSSID_CONFIG_ATTR_TX_IFINDEX,
 				ifidx))
 			return -1;
+		if (params->mbssid_tx_iface_linkid >= 0)
+			nla_put_u8(msg, NL80211_MBSSID_CONFIG_ATTR_TX_LINK_ID,
+				   params->mbssid_tx_iface_linkid);
 	}
 
 	if (params->ema && nla_put_flag(msg, NL80211_MBSSID_CONFIG_ATTR_EMA))
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -110,6 +110,9 @@ u8 * hostapd_eid_eht_ml_assoc(struct hos
 size_t hostapd_eid_eht_ml_beacon_len(struct hostapd_data *hapd,
 				     struct mld_info *info,
 				     bool include_mld_id);
+size_t hostapd_eid_eht_basic_ml_common_len(struct hostapd_data *hapd,
+				    struct sta_info *info,
+				    bool include_mld_id);
 struct wpabuf * hostapd_ml_auth_resp(struct hostapd_data *hapd);
 const u8 * hostapd_process_ml_auth(struct hostapd_data *hapd,
 				   const struct ieee80211_mgmt *mgmt,
