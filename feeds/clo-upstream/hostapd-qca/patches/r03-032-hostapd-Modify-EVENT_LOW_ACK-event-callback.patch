From 6cc8e24fc8e8cca92a782c0c8d32058867fd4f1a Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Wed, 29 Nov 2023 22:26:55 +0530
Subject: [PATCH] hostapd: Modify EVENT_LOW_ACK event callback

nl80211 event callback sends driver_data struct to
hostapd event handler but for MLD stations, we might
need to loop all the partner bss to find the link
to which the station is connected to. For this, we
need i802_bss struct context to be passed instead
driver_data context.

Modify this by sending the required struct context
to the event callback.

Also, to support sending disassoc to the station
overriding the hostapd configured value for certain
driver related handlings, make change to add the reason
based on the number of packets is set to '0xFFFF' when
EVENT_LOW_ACK is sent from driver.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 src/ap/drv_callbacks.c             | 23 ++++++++++++++++++-----
 src/ap/hostapd.h                   |  3 ++-
 src/drivers/driver_nl80211_event.c |  7 ++++---
 wpa_supplicant/events.c            |  3 ++-
 4 files changed, 26 insertions(+), 10 deletions(-)

--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1099,9 +1099,12 @@ legacy:
 }
 
 
-void hostapd_event_sta_low_ack(struct hostapd_data *hapd, const u8 *addr)
+void hostapd_event_sta_low_ack(struct hostapd_data *hapd, const u8 *addr,
+			       u32 num_packets)
 {
 	struct sta_info *sta = ap_get_sta(hapd, addr);
+	u32 reason = WLAN_REASON_DISASSOC_LOW_ACK;
+
 #ifdef CONFIG_IEEE80211BE
 	struct hostapd_data *orig_hapd = hapd;
 
@@ -1117,9 +1120,13 @@ void hostapd_event_sta_low_ack(struct ho
 	}
 #endif /* CONFIG_IEEE80211BE */
 
-	if (!sta || !hapd->conf->disassoc_low_ack || sta->agreed_to_steer)
+	if (!sta || (!hapd->conf->disassoc_low_ack && num_packets != 0xFFFF) ||
+	    sta->agreed_to_steer)
 		return;
 
+	if (num_packets == 0xFFFF)
+		reason = WLAN_REASON_UNSPECIFIED;
+
 	hostapd_logger(hapd, addr, HOSTAPD_MODULE_IEEE80211,
 		       HOSTAPD_LEVEL_INFO,
 		       "disconnected due to excessive missing ACKs");
@@ -2761,7 +2768,8 @@ void hostapd_wpa_event(void *ctx, enum w
 	case EVENT_STATION_LOW_ACK:
 		if (!data)
 			break;
-		hostapd_event_sta_low_ack(hapd, data->low_ack.addr);
+		hostapd_event_sta_low_ack(hapd, data->low_ack.addr,
+					  data->low_ack.num_packets);
 		break;
 	case EVENT_AUTH:
 		hostapd_notif_auth(hapd, &data->auth);
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -857,7 +857,8 @@ int hostapd_notif_assoc(struct hostapd_d
 			const u8 *req_ie, size_t req_ielen, const u8 *resp_ie,
 			size_t resp_ielen, const u8 *link_addr, int reassoc);
 void hostapd_notif_disassoc(struct hostapd_data *hapd, const u8 *addr);
-void hostapd_event_sta_low_ack(struct hostapd_data *hapd, const u8 *addr);
+void hostapd_event_sta_low_ack(struct hostapd_data *hapd, const u8 *addr,
+			       const u32 num_packets);
 void hostapd_event_connect_failed_reason(struct hostapd_data *hapd,
 					 const u8 *addr, int reason_code);
 int hostapd_probe_req_rx(struct hostapd_data *hapd, const u8 *sa, const u8 *da,
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -6893,7 +6893,8 @@ void supplicant_event(void *ctx, enum wp
 #ifdef CONFIG_AP
 		if (wpa_s->ap_iface && data)
 			hostapd_event_sta_low_ack(wpa_s->ap_iface->bss[0],
-						  data->low_ack.addr);
+						  data->low_ack.addr,
+						  data->low_ack.num_packets);
 #endif /* CONFIG_AP */
 #ifdef CONFIG_TDLS
 		if (data)
