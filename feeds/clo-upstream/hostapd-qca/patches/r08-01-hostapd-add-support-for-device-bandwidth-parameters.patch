From 843ca079462dd394c10d3fced5df85f20cfd5dab Mon Sep 17 00:00:00 2001
From: Shivani Tambatkar <quic_stambatk@quicinc.com>
Date: Mon, 4 Dec 2023 12:13:40 -0800
Subject: [PATCH 1/7] hostapd: add support for device bandwidth parameters

Add new parameters to structures hostapd_config and hostapd_freq_params
to store device bandwidth. Also modify hostapd_set_freq_params() to
include these parameters.

Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 src/ap/ap_config.h              |  2 ++
 src/ap/ap_drv_ops.c             | 12 ++++++++----
 src/ap/ap_drv_ops.h             |  6 ++++--
 src/ap/beacon.c                 |  4 +++-
 src/ap/dfs.c                    | 17 ++++++++++++-----
 src/ap/hostapd.c                | 12 ++++++++++--
 src/common/hw_features_common.c |  5 ++++-
 src/common/hw_features_common.h |  3 ++-
 src/drivers/driver.h            | 12 ++++++++++++
 wpa_supplicant/mesh.c           | 12 ++++++++----
 wpa_supplicant/wpa_supplicant.c |  2 +-
 11 files changed, 66 insertions(+), 21 deletions(-)

--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1291,6 +1291,8 @@ struct hostapd_config {
 
 	int use_ru_puncture_dfs;
 	int ccfs;
+	int bandwidth_device;
+	int center_freq_device;
 };
 
 
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -711,7 +711,8 @@ int hostapd_set_freq(struct hostapd_data
 		     int ht_enabled, int vht_enabled,
 		     int he_enabled, bool eht_enabled,
 		     int sec_channel_offset, int oper_chwidth,
-		     int center_segment0, int center_segment1)
+		     int center_segment0, int center_segment1,
+		     int bandwidth_device, int center_freq_device)
 {
 	struct hostapd_freq_params data;
 	struct hostapd_hw_modes *cmode = hapd->iface->current_mode;
@@ -727,7 +728,8 @@ int hostapd_set_freq(struct hostapd_data
 				    cmode ?
 				    &cmode->eht_capab[IEEE80211_MODE_AP] :
 				    NULL, hostapd_get_punct_bitmap(hapd),
-				    hapd->iconf->he_6ghz_reg_pwr_type))
+				    hapd->iconf->he_6ghz_reg_pwr_type,
+				    bandwidth_device, center_freq_device))
 		return -1;
 
 	if (hapd->driver == NULL)
@@ -1061,7 +1063,8 @@ int hostapd_start_dfs_cac(struct hostapd
 			  int he_enabled, bool eht_enabled,
 			  int sec_channel_offset, int oper_chwidth,
 			  int center_segment0, int center_segment1,
-			  bool radar_background)
+			  bool radar_background,
+			  int bandwidth_device, int center_freq_device)
 {
 	struct hostapd_data *hapd = iface->bss[0];
 	struct hostapd_freq_params data;
@@ -1088,7 +1091,8 @@ int hostapd_start_dfs_cac(struct hostapd
 				    &cmode->eht_capab[IEEE80211_MODE_AP],
 				    hostapd_get_punct_bitmap(hapd) |
 				    iface->radar_bit_pattern,
-				    hapd->iconf->he_6ghz_reg_pwr_type)) {
+				    hapd->iconf->he_6ghz_reg_pwr_type,
+				    bandwidth_device, center_freq_device)) {
 		wpa_printf(MSG_ERROR, "Can't set freq params");
 		return -1;
 	}
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -80,7 +80,8 @@ int hostapd_set_freq(struct hostapd_data
 		     int freq, int channel, int edmg, u8 edmg_channel,
 		     int ht_enabled, int vht_enabled, int he_enabled,
 		     bool eht_enabled, int sec_channel_offset, int oper_chwidth,
-		     int center_segment0, int center_segment1);
+		     int center_segment0, int center_segment1,
+		     int bandwidth_device, int center_freq_device);
 int hostapd_set_rts(struct hostapd_data *hapd, int rts);
 int hostapd_set_frag(struct hostapd_data *hapd, int frag);
 int hostapd_sta_set_flags(struct hostapd_data *hapd, u8 *addr,
@@ -145,7 +146,8 @@ int hostapd_start_dfs_cac(struct hostapd
 			  int he_enabled, bool eht_enabled,
 			  int sec_channel_offset, int oper_chwidth,
 			  int center_segment0, int center_segment1,
-			  bool radar_background);
+			  bool radar_background,
+			  int bandwidth_device, int center_freq_device);
 int hostapd_drv_do_acs(struct hostapd_data *hapd);
 int hostapd_drv_update_dh_ie(struct hostapd_data *hapd, const u8 *peer,
 			     u16 reason_code, const u8 *ie, size_t ielen);
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -2944,7 +2944,9 @@ static int __ieee802_11_set_beacon(struc
 				    &cmode->he_capab[IEEE80211_MODE_AP],
 				    &cmode->eht_capab[IEEE80211_MODE_AP],
 				    hostapd_get_punct_bitmap(hapd),
-				    iconf->he_6ghz_reg_pwr_type) == 0) {
+				    iconf->he_6ghz_reg_pwr_type,
+				    iconf->bandwidth_device,
+				    iconf->center_freq_device) == 0) {
 		freq.link_id = -1;
 #ifdef CONFIG_IEEE80211BE
 		if (hapd->conf->mld_ap)
--- a/src/ap/dfs.c
+++ b/src/ap/dfs.c
@@ -1048,7 +1048,8 @@ int hostapd_handle_dfs(struct hostapd_if
 		hostapd_get_oper_chwidth(iface->conf),
 		hostapd_get_oper_centr_freq_seg0_idx(iface->conf),
 		hostapd_get_oper_centr_freq_seg1_idx(iface->conf),
-		dfs_use_radar_background(iface));
+		dfs_use_radar_background(iface),
+		iface->conf->bandwidth_device, iface->conf->center_freq_device);
 
 	if (res) {
 		wpa_printf(MSG_ERROR, "DFS start_dfs_cac() failed, %d", res);
@@ -1155,7 +1156,9 @@ static int hostapd_dfs_request_channel_s
 				      &cmode->eht_capab[ieee80211_mode],
 				      hostapd_get_punct_bitmap(iface->bss[0]) |
 				      iface->radar_bit_pattern,
-				      iface->conf->he_6ghz_reg_pwr_type);
+				      iface->conf->he_6ghz_reg_pwr_type,
+				      iface->conf->bandwidth_device,
+				      iface->conf->center_freq_device);
 
 	if (err) {
 		wpa_printf(MSG_ERROR,
@@ -1231,7 +1234,7 @@ static void hostapd_dfs_update_backgroun
 				  iface->conf->ieee80211be,
 				  sec, hostapd_get_oper_chwidth(iface->conf),
 				  oper_centr_freq_seg0_idx,
-				  oper_centr_freq_seg1_idx, true)) {
+				  oper_centr_freq_seg1_idx, true, 0, 0)) {
 		wpa_printf(MSG_ERROR, "DFS failed to start CAC offchannel");
 		iface->radar_background.channel = -1;
 		return;
@@ -1313,7 +1316,9 @@ static int hostapd_dfs_testmode_set_beac
 				      &iface->current_mode->he_capab[IEEE80211_MODE_AP],
 				      &iface->current_mode->eht_capab[IEEE80211_MODE_AP],
 				      hostapd_get_punct_bitmap(iface->bss[0]),
-				      iface->conf->he_6ghz_reg_pwr_type);
+				      iface->conf->he_6ghz_reg_pwr_type,
+				      iface->conf->bandwidth_device,
+				      iface->conf->center_freq_device);
 
 	if (err) {
 		wpa_printf(MSG_ERROR, "DFS failed to calculate CSA freq params");
@@ -1802,7 +1807,9 @@ int hostapd_dfs_radar_detected(struct ho
 						     hostapd_get_oper_chwidth(iface->conf),
 						     hostapd_get_oper_centr_freq_seg0_idx(iface->conf),
 						     hostapd_get_oper_centr_freq_seg1_idx(iface->conf),
-						     dfs_use_radar_background(iface));
+						     dfs_use_radar_background(iface),
+						     iface->conf->bandwidth_device,
+						     iface->conf->center_freq_device);
 		}
 
 		return hostapd_dfs_request_channel_switch(
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -354,6 +354,8 @@ int hostapd_reload_config(struct hostapd
 			hapd->iconf,
 			hostapd_get_oper_centr_freq_seg1_idx(oldconf));
 		hapd->conf = newconf->bss[j];
+		hapd->iconf->bandwidth_device = oldconf->bandwidth_device;
+		hapd->iconf->center_freq_device = oldconf->center_freq_device;
 		hostapd_reload_bss(hapd);
 	}
 
@@ -2640,7 +2642,9 @@ static int hostapd_setup_interface_compl
 				     hostapd_get_oper_centr_freq_seg0_idx(
 					     hapd->iconf),
 				     hostapd_get_oper_centr_freq_seg1_idx(
-					     hapd->iconf))) {
+					     hapd->iconf),
+				     hapd->iconf->bandwidth_device,
+				     hapd->iconf->center_freq_device)) {
 			wpa_printf(MSG_ERROR, "Could not set channel for "
 				   "kernel driver");
 			goto fail;
@@ -4420,7 +4424,9 @@ static int hostapd_change_config_freq(st
 				    mode ? &mode->eht_capab[IEEE80211_MODE_AP] :
 				    NULL,
 				    hostapd_get_punct_bitmap(hapd),
-				    hapd->iconf->he_6ghz_reg_pwr_type))
+				    hapd->iconf->he_6ghz_reg_pwr_type,
+				    conf->bandwidth_device,
+				    conf->center_freq_device))
 		return -1;
 
 	switch (params->bandwidth) {
@@ -4840,6 +4846,11 @@ hostapd_switch_channel_fallback(struct h
 	iface->conf->ieee80211ac = freq_params->vht_enabled;
 	iface->conf->ieee80211ax = freq_params->he_enabled;
 	iface->conf->ieee80211be = freq_params->eht_enabled;
+	iface->conf->bandwidth_device = freq_params->bandwidth_device;
+	iface->conf->bandwidth_device = freq_params->bandwidth_device;
+	iface->conf->center_freq_device = freq_params->center_freq_device;
+	iface->conf->bandwidth_device = freq_params->bandwidth_device;
+
 
 	/*
 	 * Resetting operating class to avoid referring previous values
--- a/src/ap/ubus.c
+++ b/src/ap/ubus.c
@@ -770,7 +770,9 @@ hostapd_switch_chan(struct ubus_context
 				mode ? &mode->eht_capab[IEEE80211_MODE_AP] :
 				NULL,
 				hostapd_get_punct_bitmap(hapd),
-				hapd->iconf->he_6ghz_reg_pwr_type);
+				hapd->iconf->he_6ghz_reg_pwr_type,
+				iconf->bandwidth_device,
+				iconf->center_freq_device);
 
 	for (i = 0; i < hapd->iface->num_bss; i++) {
 		struct hostapd_data *bss = hapd->iface->bss[i];
--- a/src/ap/ucode.c
+++ b/src/ap/ucode.c
@@ -605,7 +605,9 @@ out:
 				 conf->secondary_channel,
 				 hostapd_get_oper_chwidth(conf),
 				 hostapd_get_oper_centr_freq_seg0_idx(conf),
-				 hostapd_get_oper_centr_freq_seg1_idx(conf));
+				 hostapd_get_oper_centr_freq_seg1_idx(conf),
+				 conf->bandwidth_device,
+				 conf->center_freq_device);
 
 		ieee802_11_set_beacon(hapd);
 	}
--- a/src/common/hw_features_common.c
+++ b/src/common/hw_features_common.c
@@ -489,7 +489,8 @@ int hostapd_set_freq_params(struct hosta
 			    struct he_capabilities *he_cap,
 			    struct eht_capabilities *eht_cap,
 			    u16 punct_bitmap,
-			    u8 reg_6g_pwr_mode)
+			    u8 reg_6g_pwr_mode,
+			    int bandwidth_device, int center_freq_device)
 {
 	enum oper_chan_width oper_chwidth_legacy;
 	u8 seg0_legacy, seg1_legacy;
@@ -509,6 +510,8 @@ int hostapd_set_freq_params(struct hosta
 	data->sec_channel_offset = sec_channel_offset;
 	data->center_freq1 = freq + sec_channel_offset * 10;
 	data->center_freq2 = 0;
+	data->bandwidth_device = bandwidth_device;
+	data->center_freq_device = center_freq_device;
 	if (oper_chwidth == CONF_OPER_CHWIDTH_80MHZ)
 		data->bandwidth = 80;
 	else if (oper_chwidth == CONF_OPER_CHWIDTH_160MHZ ||
--- a/src/common/hw_features_common.h
+++ b/src/common/hw_features_common.h
@@ -49,7 +49,8 @@ int hostapd_set_freq_params(struct hosta
 			    struct he_capabilities *he_caps,
 			    struct eht_capabilities *eht_cap,
 			    u16 punct_bitmap,
-			    u8 reg_6g_pwr_mode);
+			    u8 reg_6g_pwr_mode,
+			    int bandwidth_device, int center_freq_device);
 void set_disable_ht40(struct ieee80211_ht_capabilities *htcaps,
 		      int disabled);
 int ieee80211ac_cap_check(u32 hw, u32 conf);
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -930,6 +930,18 @@ struct hostapd_freq_params {
 	 * link_id: If >=0 indicates the link of the AP MLD to configure
 	 */
 	int link_id;
+
+	/**
+	 * bandwidth_device - Device bandwidth in MHz, minimum 40 MHz.
+	 * The member 'bandwidth' corresponds to the operating bandwidth.
+	 */
+	int bandwidth_device;
+
+	/**
+	 * freq_device - Device center frequency in MHz, must coincide with
+	 * one edge of the operating bandwidth.
+	 */
+	int center_freq_device;
 };
 
 /**
@@ -6916,6 +6928,8 @@ union wpa_event_data {
 		int cf2;
 		int link_id;
 		u16 punct_bitmap;
+		u32 ch_width_device;
+		u32 cf_device;
 	} ch_switch;
 
 	/**
--- a/wpa_supplicant/mesh.c
+++ b/wpa_supplicant/mesh.c
@@ -233,7 +233,9 @@ static int wpas_mesh_update_freq_params(
 		    hostapd_get_oper_centr_freq_seg1_idx(ifmsh->conf),
 		    ifmsh->conf->vht_capab,
 		    he_capab, NULL, 0,
-		    ifmsh->conf->he_6ghz_reg_pwr_type)) {
+		    ifmsh->conf->he_6ghz_reg_pwr_type,
+		    ifmsh->conf->bandwidth_device,
+		    ifmsh->conf->center_freq_device)) {
 		wpa_printf(MSG_ERROR, "Error updating mesh frequency params");
 		wpa_supplicant_mesh_deinit(wpa_s, true);
 		return -1;
@@ -519,8 +521,11 @@ static int wpa_supplicant_mesh_init(stru
 	}
 
 #ifdef CONFIG_IEEE80211BE
-	if (ssid->eht)
+	if (ssid->eht) {
 		conf->punct_bitmap = ssid->punct_bitmap;
+		conf->bandwidth_device = freq->bandwidth_device;
+		conf->center_freq_device = freq->center_freq_device;
+	}
 #endif
 	bss->iconf = conf;
 	ifmsh->conf = conf;
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -3356,7 +3356,9 @@ skip_to_6ghz:
 				    chwidth, seg0, seg1, vht_caps,
 				    &mode->he_capab[ieee80211_mode],
 				    &mode->eht_capab[ieee80211_mode], 0,
-				    freq->he_6ghz_reg_pwr_type) != 0)
+				    freq->he_6ghz_reg_pwr_type,
+				    freq->bandwidth_device,
+				    freq->center_freq_device) != 0)
 		return;
 
 	memcpy(freq, &vht_freq, sizeof(vht_freq));
