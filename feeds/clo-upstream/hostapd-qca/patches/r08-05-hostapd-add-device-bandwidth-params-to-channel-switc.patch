From 21e1f3bbbff3b7398e274df29bc06dd782525664 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Thu, 30 Nov 2023 16:16:21 -0800
Subject: [PATCH 5/7] hostapd: add device bandwidth params to channel switch
 events

Add device parameters (bandwidth and center frequency) to channel
switch events.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 src/ap/drv_callbacks.c             | 34 ++++++++++++++++++++++++++----
 src/ap/hostapd.h                   |  1 +
 src/drivers/driver.h               |  4 ++++
 src/drivers/driver_nl80211_event.c | 10 +++++++++
 wpa_supplicant/ap.c                |  7 ++++--
 wpa_supplicant/ap.h                |  3 ++-
 wpa_supplicant/events.c            |  2 ++
 7 files changed, 54 insertions(+), 7 deletions(-)

--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1207,7 +1207,7 @@ void hostapd_event_sta_opmode_changed(st
 
 void hostapd_event_ch_switch(struct hostapd_data *hapd, int freq, int ht,
 			     int offset, int width, int cf1, int cf2,
-			     u16 punct_bitmap, int finished)
+			     u16 punct_bitmap, int width_device, int cf_device, int finished)
 {
 #ifdef NEED_AP_MLME
 	int channel, chwidth, is_dfs0, is_dfs;
@@ -1216,14 +1216,14 @@ void hostapd_event_ch_switch(struct host
 
 	hostapd_logger(hapd, NULL, HOSTAPD_MODULE_IEEE80211,
 		       HOSTAPD_LEVEL_INFO,
-		       "driver %s channel switch: iface->freq=%d, freq=%d, ht=%d, vht_ch=0x%x, he_ch=0x%x, eht_ch=0x%x, offset=%d, width=%d (%s), cf1=%d, cf2=%d, puncturing_bitmap=0x%x",
+		       "driver %s channel switch: iface->freq=%d, freq=%d, ht=%d, vht_ch=0x%x, he_ch=0x%x, eht_ch=0x%x, offset=%d, width=%d (%s), cf1=%d, cf2=%d, puncturing_bitmap=0x%x width_device=%d, cf_device=%d ",
 		       finished ? "had" : "starting",
 		       hapd->iface->freq,
 		       freq, ht, hapd->iconf->ch_switch_vht_config,
 		       hapd->iconf->ch_switch_he_config,
 		       hapd->iconf->ch_switch_eht_config, offset,
 		       width, channel_width_to_string(width), cf1, cf2,
-		       punct_bitmap);
+		       punct_bitmap, width_device, cf_device);
 
 	if (!hapd->iface->current_mode) {
 		hostapd_logger(hapd, NULL, HOSTAPD_MODULE_IEEE80211,
@@ -1358,6 +1358,27 @@ void hostapd_event_ch_switch(struct host
 #ifdef CONFIG_IEEE80211BE
 	hapd->iconf->punct_bitmap = punct_bitmap;
 #endif /* CONFIG_IEEE80211BE */
+
+	hapd->iconf->center_freq_device = cf_device;
+	switch (width_device) {
+		case CHAN_WIDTH_40:
+			hapd->iconf->bandwidth_device = 40;
+			break;
+		case CHAN_WIDTH_80:
+			hapd->iconf->bandwidth_device = 80;
+			break;
+		case CHAN_WIDTH_160:
+			hapd->iconf->bandwidth_device = 160;
+			break;
+		case CHAN_WIDTH_320:
+			hapd->iconf->bandwidth_device = 320;
+			break;
+		default:
+			hapd->iconf->bandwidth_device = 0;
+			hapd->iconf->center_freq_device = 0;
+			break;
+	}
+
 	if (hapd->iconf->ieee80211ac) {
 		hapd->iconf->vht_capab &= ~VHT_CAP_SUPP_CHAN_WIDTH_MASK;
 		if (chwidth == CONF_OPER_CHWIDTH_160MHZ)
@@ -1372,11 +1393,11 @@ void hostapd_event_ch_switch(struct host
 				  hapd->iface->num_hw_features);
 
 	wpa_msg(hapd->msg_ctx, MSG_INFO,
-		"%sfreq=%d ht_enabled=%d ch_offset=%d ch_width=%s cf1=%d cf2=%d is_dfs0=%d dfs=%d puncturing_bitmap=0x%04x",
+		"%sfreq=%d ht_enabled=%d ch_offset=%d ch_width=%s cf1=%d cf2=%d is_dfs0=%d dfs=%d puncturing_bitmap=0x%04x width_device=%d, cf_device=%d",
 		finished ? WPA_EVENT_CHANNEL_SWITCH :
 		WPA_EVENT_CHANNEL_SWITCH_STARTED,
 		freq, ht, offset, channel_width_to_string(width),
-		cf1, cf2, is_dfs0, is_dfs, punct_bitmap);
+		cf1, cf2, is_dfs0, is_dfs, punct_bitmap, width_device, cf_device);
 	if (!finished)
 		return;
 
@@ -2806,6 +2827,8 @@ void hostapd_wpa_event(void *ctx, enum w
 					data->ch_switch.cf1,
 					data->ch_switch.cf2,
 					data->ch_switch.punct_bitmap,
+					data->ch_switch.ch_width_device,
+					data->ch_switch.cf_device,
 					event == EVENT_CH_SWITCH);
 		break;
 	case EVENT_CONNECT_FAILED_REASON:
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -1200,6 +1200,8 @@ static void mlme_event_ch_switch(struct
 				 struct nlattr *cf2,
 				 struct nlattr *punct_bitmap,
 				 struct nlattr *count,
+				 struct nlattr *bw_device,
+				 struct nlattr *cf_device,
 				 int finished)
 {
 	struct i802_bss *bss;
@@ -1291,6 +1293,10 @@ static void mlme_event_ch_switch(struct
 					data.ch_switch.ch_width);
 		}
 	}
+	if (bw_device)
+		data.ch_switch.ch_width_device = convert2width(nla_get_u32(bw_device));
+	if (cf_device)
+		data.ch_switch.cf_device = nla_get_u32(cf_device);
 
 	if (link && is_sta_interface(drv->nlmode)) {
 		u8 link_id = data.ch_switch.link_id;
@@ -4331,6 +4337,8 @@ static void do_process_drv_event(struct
 				     tb[NL80211_ATTR_CENTER_FREQ2],
 				     tb[NL80211_ATTR_PUNCT_BITMAP],
 				     tb[NL80211_ATTR_CH_SWITCH_COUNT],
+				     tb[NL80211_ATTR_CHANNEL_WIDTH_DEVICE],
+				     tb[NL80211_ATTR_CENTER_FREQ_DEVICE],
 				     0);
 		break;
 	case NL80211_CMD_CH_SWITCH_NOTIFY:
@@ -4344,6 +4352,8 @@ static void do_process_drv_event(struct
 				     tb[NL80211_ATTR_CENTER_FREQ2],
 				     tb[NL80211_ATTR_PUNCT_BITMAP],
 				     NULL,
+				     tb[NL80211_ATTR_CHANNEL_WIDTH_DEVICE],
+				     tb[NL80211_ATTR_CENTER_FREQ_DEVICE],
 				     1);
 		break;
 	case NL80211_CMD_DISCONNECT:
--- a/wpa_supplicant/ap.c
+++ b/wpa_supplicant/ap.c
@@ -1926,7 +1926,8 @@ int ap_ctrl_iface_chanswitch(struct wpa_
 
 void wpas_ap_ch_switch(struct wpa_supplicant *wpa_s, int freq, int ht,
 		       int offset, int width, int cf1, int cf2,
-		       u16 punct_bitmap, int finished)
+		       u16 punct_bitmap,
+		       int width_device, int cf_device, int finished)
 {
 	struct hostapd_iface *iface = wpa_s->ap_iface;
 
@@ -1939,7 +1940,7 @@ void wpas_ap_ch_switch(struct wpa_suppli
 		wpa_s->current_ssid->frequency = freq;
 	hostapd_event_ch_switch(iface->bss[0], freq, ht,
 				offset, width, cf1, cf2, punct_bitmap,
-				finished);
+				width_device, cf_device, finished);
 }
 
 
--- a/wpa_supplicant/ap.h
+++ b/wpa_supplicant/ap.h
@@ -74,7 +74,8 @@ int ap_switch_channel(struct wpa_supplic
 int ap_ctrl_iface_chanswitch(struct wpa_supplicant *wpa_s, const char *txtaddr);
 void wpas_ap_ch_switch(struct wpa_supplicant *wpa_s, int freq, int ht,
 		       int offset, int width, int cf1, int cf2,
-		       u16 punct_bitmap, int finished);
+		       u16 punct_bitmap,
+		       int width_device, int cf_device, int finished);
 struct wpabuf * wpas_ap_wps_nfc_config_token(struct wpa_supplicant *wpa_s,
 					     int ndef);
 #ifdef CONFIG_AP
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -6530,6 +6530,8 @@ void supplicant_event(void *ctx, enum wp
 					  data->ch_switch.cf1,
 					  data->ch_switch.cf2,
 					  data->ch_switch.punct_bitmap,
+					  data->ch_switch.ch_width_device,
+					  data->ch_switch.cf_device,
 					  1);
 		}
 #endif /* CONFIG_AP */
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -911,7 +911,8 @@ int hostapd_probe_req_rx(struct hostapd_
 			 int ssi_signal);
 void hostapd_event_ch_switch(struct hostapd_data *hapd, int freq, int ht,
 			     int offset, int width, int cf1, int cf2,
-			     u16 punct_bitmap, int finished);
+			     u16 punct_bitmap, int width_device, int cf_device,
+			     int finished);
 struct survey_results;
 void hostapd_event_get_survey(struct hostapd_iface *iface,
 			      struct survey_results *survey_results);
