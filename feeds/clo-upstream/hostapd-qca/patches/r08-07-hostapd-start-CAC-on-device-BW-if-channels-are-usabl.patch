From 46a69aa0186520a78868cba3edc88f886fab1816 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Tue, 28 Nov 2023 10:17:32 -0800
Subject: [PATCH 7/7] hostapd: start CAC on device BW if channels are usable

Start channel availability check on the device bandwidth if all the
sub-channels are in HOSTAPD_CHAN_DFS_AVAILABLE with at least one
channel in HOSTAPD_CHAN_DFS_USABLE state. If this CAC succeeds,
userspace can use channel switch operation to expand the operating
bandwidth to be equal to the current device bandwidth.
This CAC does not expire even if channel switch is not performed because
the radar detection is anyway active in the complete device bandwidth.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
---
 src/ap/dfs.c | 103 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 103 insertions(+)

--- a/src/ap/dfs.c
+++ b/src/ap/dfs.c
@@ -22,6 +22,7 @@
 #include "beacon.h"
 #include "eloop.h"
 #include "ieee802_11.h"
+#include "hw_features.h"
 
 #define IEEE80211_DFS_MIN_CAC_TIME_MS  60000
 
@@ -1896,31 +1897,132 @@ int hostapd_dfs_radar_detected(struct ho
 			oper_centr_freq_seg0_idx, oper_centr_freq_seg1_idx);
 	}
 
-	if (!radar_bitmap && iface->conf->disable_csa_dfs &&
-	    (iface->drv_flags2 & WPA_DRIVER_DEVICE_PARAMS_SUPPORTED)) {
-		/* Frequency Hoping RADAR detected while operating, switch the channel. */
-		return hostapd_dfs_start_channel_switch(iface);
-	}
-
 	/* Switch channel with random channel selection for invalid puncturing pattern */
 	iface->radar_bit_pattern = 0;
 	iface->conf->punct_bitmap = 0;
 
-	if (hostapd_dfs_background_start_channel_switch(iface, freq) && radar_bitmap_oper) {
-		if (!iface->conf->disable_csa_dfs) {
-			/* Radar detected while operating, switch the channel. */
+	if (hostapd_dfs_background_start_channel_switch(iface, freq)) {
+		if (!radar_bitmap) {
+			/* Frequency hopping radar detected while operating, switch the channel.*/
 			return hostapd_dfs_start_channel_switch(iface);
-		} else if (!eloop_is_timeout_registered(hostapd_dfs_radar_handling_timeout,
-			   iface, NULL)) {
+		}
+
+		if (radar_bitmap_oper) {
+			if (!iface->conf->disable_csa_dfs) {
+				/* Radar detected while operating, switch the channel. */
+				return hostapd_dfs_start_channel_switch(iface);
+			} else if (!eloop_is_timeout_registered(hostapd_dfs_radar_handling_timeout,
+				   iface, NULL)) {
 			eloop_register_timeout(0, HAPD_DFS_RADAR_CH_SWITCH_WAIT_DUR,
 					       hostapd_dfs_radar_handling_timeout,
 					       iface, NULL);
+			}
 		}
 	}
-
 	return 0;
 }
 
+void hostapd_start_device_cac_background(struct hostapd_iface *iface)
+{
+	int width, start_chan, start_chan_idx = -1, n_chans = 1, i;
+	struct hostapd_channel_data *chan;
+	struct hostapd_hw_modes *mode;
+	bool res = false;
+	u8 seg0;
+
+	if (!iface->conf->ieee80211be ||
+	    !(iface->drv_flags2 & WPA_DRIVER_FLAGS2_RADAR_BACKGROUND) ||
+	    iface->radar_background.cac_started)
+		return;
+
+	width = hostapd_get_oper_chwidth(iface->conf);
+	seg0 = hostapd_get_oper_centr_freq_seg0_idx(iface->conf);
+	if (!hostapd_is_device_params_present(width, seg0,
+					      iface->conf->bandwidth_device,
+					      iface->conf->center_freq_device))
+		return;
+
+	start_chan = seg0;
+
+	switch (width) {
+	case CONF_OPER_CHWIDTH_USE_HT:
+		if (iface->conf->secondary_channel) {
+			start_chan = seg0 - 2;
+			n_chans = 2;
+		}
+		break;
+	case CONF_OPER_CHWIDTH_80MHZ:
+		start_chan = seg0 - 6;
+		n_chans = 4;
+		break;
+	case CONF_OPER_CHWIDTH_160MHZ:
+		start_chan = seg0 - 14;
+		n_chans = 8;
+		break;
+	case CONF_OPER_CHWIDTH_320MHZ:
+		start_chan = seg0 - 30;
+		n_chans = 16;
+		break;
+	default:
+		return;
+	}
+
+	if (iface->conf->center_freq_device <
+	    ieee80211_chan_to_freq(NULL, iface->conf->op_class, seg0))
+		start_chan = start_chan - (4 * n_chans);
+	else
+		start_chan = start_chan + (4 * n_chans);
+
+	mode = iface->current_mode;
+	for (i = 0; i < mode->num_channels; i++) {
+		chan = &mode->channels[i];
+		if (chan->chan == start_chan) {
+			start_chan_idx = i;
+			break;
+		}
+	}
+
+	if (start_chan_idx == -1)
+		return;
+
+	for (i = 0; i < n_chans; i++) {
+		chan = &mode->channels[start_chan_idx + i];
+ 
+		if (!(chan->flag & HOSTAPD_CHAN_RADAR))
+			continue;
+ 
+		if ((chan->flag & HOSTAPD_CHAN_DFS_MASK) == HOSTAPD_CHAN_DFS_AVAILABLE)
+			continue;
+		else if ((chan->flag & HOSTAPD_CHAN_DFS_MASK) == HOSTAPD_CHAN_DFS_USABLE)
+			res = true;
+		else
+			return;
+	}
+
+	if (res == false)
+		return;
+
+	hostapd_start_dfs_cac(iface, iface->conf->hw_mode, iface->freq,
+			      iface->conf->channel, iface->conf->ieee80211n,
+			      iface->conf->ieee80211ac, iface->conf->ieee80211ax,
+			      iface->conf->ieee80211be,
+			      iface->conf->secondary_channel,
+			      hostapd_get_oper_chwidth(iface->conf),
+			      hostapd_get_oper_centr_freq_seg0_idx(iface->conf),
+			      hostapd_get_oper_centr_freq_seg1_idx(iface->conf),
+			      true,
+			      iface->conf->bandwidth_device,
+			      iface->conf->center_freq_device);
+
+	iface->radar_background.channel = iface->conf->channel;
+	iface->radar_background.secondary_channel =
+		iface->conf->secondary_channel;
+	iface->radar_background.freq = iface->freq;
+	iface->radar_background.centr_freq_seg0_idx =
+		hostapd_get_oper_centr_freq_seg0_idx(iface->conf);
+	iface->radar_background.centr_freq_seg1_idx =
+		hostapd_get_oper_centr_freq_seg1_idx(iface->conf);
+}
 
 int hostapd_dfs_nop_finished(struct hostapd_iface *iface, int freq,
 			     int ht_enabled, int chan_offset, int chan_width,
@@ -1953,9 +2055,11 @@ int hostapd_dfs_nop_finished(struct host
 		/* Handle cases where all channels were initially unavailable */
 		hostapd_handle_dfs(iface);
 	} else if (dfs_use_radar_background(iface) &&
-		   iface->radar_background.channel == -1) {
+			iface->radar_background.channel == -1) {
 		/* Reset radar background chain if disabled */
 		hostapd_dfs_update_background_chain(iface);
+	} else {
+		hostapd_start_device_cac_background(iface);
 	}
 
 	return 0;
--- a/src/ap/dfs.h
+++ b/src/ap/dfs.h
@@ -50,4 +50,5 @@ int hostapd_handle_dfs_offload(struct ho
 int hostapd_is_dfs_overlap(struct hostapd_iface *iface, enum chan_width width,
 			   int center_freq);
 void hostapd_dfs_radar_handling_timeout(void *eloop_data, void *user_data);
+void hostapd_start_device_cac_background(struct hostapd_iface *iface);
 #endif /* DFS_H */
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1405,6 +1405,7 @@ void hostapd_event_ch_switch(struct host
 	    freq == hapd->cs_freq_params.freq) {
 		hostapd_cleanup_cs_params(hapd);
 		ieee802_11_set_beacon(hapd);
+		hostapd_start_device_cac_background(hapd->iface);
 
 		wpa_msg(hapd->msg_ctx, MSG_INFO, AP_CSA_FINISHED
 			"freq=%d dfs=%d", freq, is_dfs);
