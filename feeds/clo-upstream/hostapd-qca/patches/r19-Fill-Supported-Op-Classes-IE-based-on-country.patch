From 6db05684c27e27166ba6a38ad27f513de19978db Mon Sep 17 00:00:00 2001
From: Naveen S <quic_naves@quicinc.com>
Date: Wed, 14 Feb 2024 10:34:26 +0530
Subject: [PATCH] wpa-supplicant: Fill supported op classes IE based on the
 country

Currently the tag:supported operating classes IE is set the same for
all countries from global supported operating classes in the
association frames. This is not expected and it must be set based on
the country configured.

Hence, the supported operating classes IE is now set depending on the
country configured, so that association request frame doesn't contain
the global supported operating class which may not be supported in the
country.

Signed-off-by: Naveen S <quic_naves@quicinc.com>
---
 src/common/ieee802_11_common.c | 210 +++++++++++++++++----------------
 src/common/ieee802_11_common.h |  41 ++++++-
 wpa_supplicant/op_classes.c    | 145 +++++++++++++++++++----
 3 files changed, 265 insertions(+), 131 deletions(-)

--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -251,6 +251,101 @@ static int ieee802_11_parse_vendor_speci
 	return 0;
 }
 
+struct country_op_class us_op_class[] = {
+	{ 1, 115 },
+	{ 2, 118 },
+	{ 3, 124 },
+	{ 4, 121 },
+	{ 5, 125 },
+	{ 6, 103 },
+	{ 7, 103 },
+	{ 8, 102 },
+	{ 9, 102 },
+	{ 10, 101},
+	{ 11, 101},
+	{ 12, 81 },
+	{ 13, 94 },
+	{ 14, 95 },
+	{ 15, 96 },
+	{ 22, 116 },
+	{ 23, 119 },
+	{ 24, 122 },
+	{ 25, 126 },
+	{ 26, 126 },
+	{ 27, 117 },
+	{ 28, 120 },
+	{ 29, 123 },
+	{ 30, 127 },
+	{ 31, 127 },
+	{ 32, 83 },
+	{ 33, 84 },
+	{ 34, 180 },
+	{ 128, 128},
+	{ 129, 129},
+	{ 130, 130},
+};
+
+struct country_op_class eu_op_class[] = {
+	{ 1, 115 },
+	{ 2, 118 },
+	{ 3, 121 },
+	{ 4, 81 },
+	{ 5, 116 },
+	{ 6, 119 },
+	{ 7, 122 },
+	{ 8, 117 },
+	{ 9, 120 },
+	{ 10, 123 },
+	{ 11, 83 },
+	{ 12, 84 },
+	{ 17, 125 },
+	{ 18, 180 },
+	{ 128, 128 },
+	{ 129, 129 },
+	{ 130, 130 },
+};
+
+struct country_op_class jp_op_class[] = {
+	{ 1, 115 },
+	{ 30, 81 },
+	{ 31, 82 },
+	{ 32, 118 },
+	{ 33, 118 },
+	{ 34, 121 },
+	{ 35, 121 },
+	{ 36, 116 },
+	{ 37, 119 },
+	{ 38, 119 },
+	{ 39, 122 },
+	{ 40, 122 },
+	{ 41, 117 },
+	{ 42, 120 },
+	{ 43, 120 },
+	{ 44, 123 },
+	{ 45, 123 },
+	{ 56, 83 },
+	{ 57, 84 },
+	{ 58, 121 },
+	{ 59, 180 },
+	{ 128, 128 },
+	{ 129, 129 },
+	{ 130, 130 },
+};
+
+struct country_op_class cn_op_class[] = {
+	{ 1, 115 },
+	{ 2, 118 },
+	{ 3, 125 },
+	{ 4, 116 },
+	{ 5, 119 },
+	{ 6, 126 },
+	{ 7, 81 },
+	{ 8, 83 },
+	{ 9, 84 },
+	{ 128, 128 },
+	{ 129, 129 },
+	{ 130, 130 },
+};
 
 static int ieee802_11_parse_mle(const u8 *pos, size_t elen, size_t **total_len,
 				struct ieee802_11_elems *elems,
@@ -1717,28 +1812,7 @@ int ieee80211_chaninfo_to_channel(unsign
 	return 0;
 }
 
-
-static const char *const us_op_class_cc[] = {
-	"US", "CA", NULL
-};
-
-static const char *const eu_op_class_cc[] = {
-	"AL", "AM", "AT", "AZ", "BA", "BE", "BG", "BY", "CH", "CY", "CZ", "DE",
-	"DK", "EE", "EL", "ES", "FI", "FR", "GE", "HR", "HU", "IE", "IS", "IT",
-	"LI", "LT", "LU", "LV", "MD", "ME", "MK", "MT", "NL", "NO", "PL", "PT",
-	"RO", "RS", "RU", "SE", "SI", "SK", "TR", "UA", "UK", NULL
-};
-
-static const char *const jp_op_class_cc[] = {
-	"JP", NULL
-};
-
-static const char *const cn_op_class_cc[] = {
-	"CN", NULL
-};
-
-
-static int country_match(const char *const cc[], const char *const country)
+int country_match(const char *const cc[], const char *const country)
 {
 	int i;
 
@@ -2800,82 +2874,6 @@ size_t add_multi_ap_ie(u8 *buf, size_t l
 	return pos - buf;
 }
 
-
-static const struct country_op_class us_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 124 },
-	{ 4, 121 },
-	{ 5, 125 },
-	{ 12, 81 },
-	{ 22, 116 },
-	{ 23, 119 },
-	{ 24, 122 },
-	{ 25, 126 },
-	{ 26, 126 },
-	{ 27, 117 },
-	{ 28, 120 },
-	{ 29, 123 },
-	{ 30, 127 },
-	{ 31, 127 },
-	{ 32, 83 },
-	{ 33, 84 },
-	{ 34, 180 },
-};
-
-static const struct country_op_class eu_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 121 },
-	{ 4, 81 },
-	{ 5, 116 },
-	{ 6, 119 },
-	{ 7, 122 },
-	{ 8, 117 },
-	{ 9, 120 },
-	{ 10, 123 },
-	{ 11, 83 },
-	{ 12, 84 },
-	{ 17, 125 },
-	{ 18, 180 },
-};
-
-static const struct country_op_class jp_op_class[] = {
-	{ 1, 115 },
-	{ 30, 81 },
-	{ 31, 82 },
-	{ 32, 118 },
-	{ 33, 118 },
-	{ 34, 121 },
-	{ 35, 121 },
-	{ 36, 116 },
-	{ 37, 119 },
-	{ 38, 119 },
-	{ 39, 122 },
-	{ 40, 122 },
-	{ 41, 117 },
-	{ 42, 120 },
-	{ 43, 120 },
-	{ 44, 123 },
-	{ 45, 123 },
-	{ 56, 83 },
-	{ 57, 84 },
-	{ 58, 121 },
-	{ 59, 180 },
-};
-
-static const struct country_op_class cn_op_class[] = {
-	{ 1, 115 },
-	{ 2, 118 },
-	{ 3, 125 },
-	{ 4, 116 },
-	{ 5, 119 },
-	{ 6, 126 },
-	{ 7, 81 },
-	{ 8, 83 },
-	{ 9, 84 },
-};
-
 static u8
 global_op_class_from_country_array(u8 op_class, size_t array_size,
 				   const struct country_op_class *country_array)
@@ -2899,16 +2897,16 @@ u8 country_to_global_op_class(const char
 
 	if (country_match(us_op_class_cc, country)) {
 		country_array = us_op_class;
-		size = ARRAY_SIZE(us_op_class);
+		size = get_country_op_class_size(us_op_class);
 	} else if (country_match(eu_op_class_cc, country)) {
 		country_array = eu_op_class;
-		size = ARRAY_SIZE(eu_op_class);
+		size = get_country_op_class_size(eu_op_class);
 	} else if (country_match(jp_op_class_cc, country)) {
 		country_array = jp_op_class;
-		size = ARRAY_SIZE(jp_op_class);
+		size = get_country_op_class_size(jp_op_class);
 	} else if (country_match(cn_op_class_cc, country)) {
 		country_array = cn_op_class;
-		size = ARRAY_SIZE(cn_op_class);
+		size = get_country_op_class_size(cn_op_class);
 	} else {
 		/*
 		 * Countries that do not match any of the above countries use
@@ -3560,3 +3558,11 @@ const u8 * get_basic_mle_mld_addr(const
 
 	return &buf[mld_addr_pos];
 }
+
+size_t get_country_op_class_size(struct country_op_class *op_class)
+{
+	if (op_class)
+		return ARRAY_SIZE(op_class);
+
+	return 0;
+}
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -206,6 +206,41 @@ struct ieee802_11_elems {
 
 typedef enum { ParseOK = 0, ParseUnknown = 1, ParseFailed = -1 } ParseRes;
 
+struct country_op_class {
+	u8 country_op_class;
+	u8 global_op_class;
+};
+
+static const char *const us_op_class_cc[] = {
+	"US", "CA", NULL
+};
+
+static const char *const eu_op_class_cc[] = {
+	"AL", "AM", "AT", "AZ", "BA", "BE", "BG", "BY", "CH", "CY",
+	"CZ", "DE", "DK", "EE", "EL", "ES", "FI", "FR", "GE", "HR",
+	"HU", "IE", "IS", "IT", "LI", "LT", "LU", "LV", "MD", "ME",
+	"MK", "MT", "NL", "NO", "PL", "PT", "RO", "RS", "RU", "SE",
+	"SI", "SK", "TR", "UA", "UK", NULL
+};
+
+static const char *const jp_op_class_cc[] = {
+	"JP", NULL
+};
+
+static const char *const cn_op_class_cc[] = {
+	"CN", NULL
+};
+
+extern struct country_op_class us_op_class[];
+
+extern struct country_op_class eu_op_class[];
+
+extern struct country_op_class jp_op_class[];
+
+extern struct country_op_class cn_op_class[];
+
+size_t get_country_op_class_size(struct country_op_class *op_class);
+
 ParseRes ieee802_11_parse_elems(const u8 *start, size_t len,
 				struct ieee802_11_elems *elems,
 				int show_errors);
@@ -247,6 +282,7 @@ int hostapd_config_tx_queue(struct hosta
 			    const char *name, const char *val);
 enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, u8 *channel);
 int ieee80211_chan_to_freq(const char *country, u8 op_class, u8 chan);
+int country_match(const char *const cc[], const char *const country);
 enum hostapd_hw_mode
 ieee80211_freq_to_channel_ext(unsigned int freq, int sec_channel,
 			      enum oper_chan_width chanwidth,
@@ -294,11 +330,6 @@ u16 check_multi_ap_ie(const u8 *multi_ap
 size_t add_multi_ap_ie(u8 *buf, size_t len,
 		       const struct multi_ap_params *multi_ap);
 
-struct country_op_class {
-	u8 country_op_class;
-	u8 global_op_class;
-};
-
 u8 country_to_global_op_class(const char *country, u8 op_class);
 
 const struct oper_class_map * get_oper_class(const char *country, u8 op_class);
--- a/wpa_supplicant/op_classes.c
+++ b/wpa_supplicant/op_classes.c
@@ -269,14 +269,15 @@ enum chan_allowed verify_channel(struct
 {
 	unsigned int flag = 0;
 	enum chan_allowed res, res2;
+	bool is6ghz = ((op_class >= 131) && (op_class <= 136));
 
 	res2 = res = allow_channel(mode, op_class, channel, &flag);
 	if (bw == BW40MINUS || (bw == BW40 && (((channel - 1) / 4) % 2))) {
-		if (!(flag & HOSTAPD_CHAN_HT40MINUS))
+		if (!(flag & HOSTAPD_CHAN_HT40MINUS) && !is6ghz)
 			return NOT_ALLOWED;
 		res2 = allow_channel(mode, op_class, channel - 4, NULL);
 	} else if (bw == BW40PLUS) {
-		if (!(flag & HOSTAPD_CHAN_HT40PLUS))
+		if (!(flag & HOSTAPD_CHAN_HT40PLUS) && !is6ghz)
 			return NOT_ALLOWED;
 		res2 = allow_channel(mode, op_class, channel + 4, NULL);
 	} else if (is_6ghz_op_class(op_class) && bw == BW40) {
@@ -352,7 +353,7 @@ static int wpas_op_class_supported(struc
 				break; /* end of list */
 			if (is_6ghz_freq(f))
 				freq6 = true;
-			else if (f > 4000 && f < 6000)
+			else if (f > 4000 && f < 5935)
 				freq5 = 1;
 			else if (f > 2400 && f < 2500)
 				freq2 = 1;
@@ -366,9 +367,11 @@ static int wpas_op_class_supported(struc
 
 	if (is_6ghz_op_class(op_class->op_class) && !freq6)
 		return 0;
-	if (op_class->op_class >= 115 && op_class->op_class <= 130 && !freq5)
+	if (op_class->op_class >= 115 &&
+	    op_class->op_class <= 130 && !freq5)
 		return 0;
-	if (op_class->op_class >= 81 && op_class->op_class <= 84 && !freq2)
+	if (op_class->op_class >= 81 &&
+	    op_class->op_class <= 84 && !freq2)
 		return 0;
 
 #ifdef CONFIG_HT_OVERRIDES
@@ -404,10 +407,25 @@ static int wpas_op_class_supported(struc
 	}
 #endif /* CONFIG_VHT_OVERRIDES */
 
-	if (op_class->op_class == 128) {
-		u8 channels[] = { 42, 58, 106, 122, 138, 155, 171 };
+	if (op_class->op_class == 128 || op_class->op_class == 133) {
+		const u8 center_channels_5ghz[] = { 42, 58, 106, 122,
+						    138, 155, 171 };
+		const u8 center_channels_6ghz[] = { 7, 23, 39, 55, 71,
+						    87, 103, 119, 135,
+						    151, 167, 183,
+						    199, 215 };
+		const u8 *channels;
+		u8 num_channels;
+
+		if (is_6ghz_op_class(op_class->op_class)) {
+			channels = center_channels_6ghz;
+			num_channels =  ARRAY_SIZE(center_channels_6ghz);
+		} else {
+			channels = center_channels_5ghz;
+			num_channels =  ARRAY_SIZE(center_channels_5ghz);
+		}
 
-		for (i = 0; i < ARRAY_SIZE(channels); i++) {
+		for (i = 0; i < num_channels; i++) {
 			if (verify_channel(mode, op_class->op_class,
 					   channels[i], op_class->bw) !=
 			    NOT_ALLOWED)
@@ -417,14 +435,31 @@ static int wpas_op_class_supported(struc
 		return 0;
 	}
 
-	if (op_class->op_class == 129) {
-		/* Check if either 160 MHz channels is allowed */
-		return verify_channel(mode, op_class->op_class, 50,
-				      op_class->bw) != NOT_ALLOWED ||
-			verify_channel(mode, op_class->op_class, 114,
-				       op_class->bw) != NOT_ALLOWED ||
-			verify_channel(mode, op_class->op_class, 163,
-				       op_class->bw) != NOT_ALLOWED;
+	if (op_class->op_class == 129 || op_class->op_class == 134) {
+		const u8 center_channels_5ghz[] = { 50, 114, 163 };
+		const u8 center_channels_6ghz[] = { 15, 47, 79, 111,
+						    143, 175, 207 };
+		const u8 *channels;
+		u8 num_channels;
+
+		if (is_6ghz_op_class(op_class->op_class)) {
+			channels = center_channels_6ghz;
+			num_channels =  ARRAY_SIZE(center_channels_6ghz);
+		} else {
+			channels = center_channels_5ghz;
+			num_channels =  ARRAY_SIZE(center_channels_5ghz);
+		}
+
+		/* Check if  160 MHz channels is allowed */
+		for (i = 0; i < num_channels; i++) {
+			if (verify_channel(mode, op_class->op_class,
+					   channels[i], op_class->bw) !=
+			    NOT_ALLOWED) {
+				return 1;
+			}
+		}
+
+		return 0;
 	}
 
 	if (op_class->op_class == 130) {
@@ -504,9 +539,19 @@ static int wpas_op_class_supported(struc
 		return 0;
 	}
 
-	found = 0;
 	for (chan = op_class->min_chan; chan <= op_class->max_chan;
 	     chan += op_class->inc) {
+		/* In case of 5G, the 40+ and 40- channels are listed
+		 * in the opclass table  as primary channels, however,
+		 * in case of 6G, the center of 40+ or 40- channels
+		 * are listed in the opclass table.
+		 */
+		if (is_6ghz_op_class(op_class->op_class)) {
+			if (op_class->bw == BW40PLUS)
+				chan = chan - 2;
+			else if (op_class->bw == BW40MINUS)
+				chan = chan + 2;
+		}
 		if (verify_channel(mode, op_class->op_class, chan,
 				   op_class->bw) != NOT_ALLOWED) {
 			found = 1;
@@ -542,8 +587,13 @@ size_t wpas_supp_op_class_ie(struct wpa_
 	struct wpabuf *buf;
 	u8 op, current, chan;
 	u8 *ie_len;
+	char country[2];
+	struct country_op_class *country_array = NULL;
 	size_t res;
 	bool op128 = false, op130 = false, op133 = false, op135 = false;
+	const u8 *country_ie;
+	size_t size = 0;
+	const struct oper_class_map *g_op_idx = NULL;
 
 	/*
 	 * Determine the current operating class correct mode based on
@@ -568,35 +618,76 @@ size_t wpas_supp_op_class_ie(struct wpa_
 	wpabuf_put_u8(buf, WLAN_EID_SUPPORTED_OPERATING_CLASSES);
 	/* Will set the length later, putting a placeholder */
 	ie_len = wpabuf_put(buf, 1);
-	wpabuf_put_u8(buf, current);
 
-	for (op = 0; global_op_class[op].op_class; op++) {
-		bool supp;
-		u8 op_class = global_op_class[op].op_class;
-
-		supp = wpas_op_class_supported(wpa_s, ssid,
-					       &global_op_class[op]);
-		if (!supp)
-			continue;
-		switch (op_class) {
-		case 128:
-			op128 = true;
-			break;
-		case 130:
-			op130 = true;
-			break;
-		case 133:
-			op133 = true;
-			break;
-		case 135:
-			op135 = true;
-			break;
+	country_ie = wpa_bss_get_ie(bss, WLAN_EID_COUNTRY);
+	if (country_ie) {
+		memcpy(country, country_ie + 2, 2);
+
+		if (country_match(us_op_class_cc, country)) {
+			country_array = us_op_class;
+			size = get_country_op_class_size(us_op_class);
+		} else if (country_match(eu_op_class_cc, country)) {
+			country_array = eu_op_class;
+			size = get_country_op_class_size(eu_op_class);
+		} else if (country_match(jp_op_class_cc, country)) {
+			country_array = jp_op_class;
+			size = get_country_op_class_size(jp_op_class);
+		} else if (country_match(cn_op_class_cc, country)) {
+			country_array = cn_op_class;
+			size = get_country_op_class_size(cn_op_class);
 		}
-		if (is_80plus_op_class(op_class))
-			continue;
+	} else {
+		wpabuf_put_u8(buf, current);
+	}
 
-		/* Add a 1-octet operating class to the Operating Class field */
-		wpabuf_put_u8(buf, global_op_class[op].op_class);
+       /*
+        * For 6G channels use global operating class table.
+        * For non-6G use country specific operating class table.
+        * For countries not in the list of countries, use global
+        * operating class table.
+        */
+#define SIXG_FIRST_CFREQ 5935
+	if (country_array && bss->freq < SIXG_FIRST_CFREQ) {
+		for (op = 0; op < size; op++) {
+			g_op_idx = get_oper_class(country,
+					country_array[op].country_op_class);
+			if (g_op_idx &&
+					wpas_op_class_supported(wpa_s, ssid,
+						g_op_idx)) {
+				wpabuf_put_u8(buf,
+						country_array[op].global_op_class);
+			}
+		}
+	} else {
+
+		for (op = 0; global_op_class[op].op_class; op++) {
+			bool supp;
+			u8 op_class = global_op_class[op].op_class;
+
+			supp = wpas_op_class_supported(wpa_s, ssid,
+					&global_op_class[op]);
+			if (!supp)
+				continue;
+			switch (op_class) {
+				case 128:
+					op128 = true;
+					break;
+				case 130:
+					op130 = true;
+					break;
+				case 133:
+					op133 = true;
+					break;
+				case 135:
+					op135 = true;
+					break;
+			}
+			if (is_80plus_op_class(op_class))
+				continue;
+
+			/* Add a 1-octet operating class to the Operating Class field */
+			wpabuf_put_u8(buf, global_op_class[op].op_class);
+		}
 	}
 
 	/* Add the 2-octet operating classes (i.e., 80+80 MHz cases), if any */
