From 8e2581ec2d75214406f0699fbe8912633ecb163c Mon Sep 17 00:00:00 2001
From: Arulanbu Balusamy <quic_abalusam@quicinc.com>
Date: Mon, 12 Feb 2024 16:21:26 +0530
Subject: [PATCH] hostapd: fix AP radios on ACS config not getting added to
 bridge

Due to Single WiPHY architecture change, scan on different radios in non-MLO
case happen sequentially while scan results for different radios coming at
different instances later than respective scan triggers.

This intersects with the existing workaround of scan retry (treated as failure)
to set STATION mode for allowing scan which also requires interface to be
removed from bridge first since STA mode can't be added to bridge.

Current code removes the affected radios on ACS scan from bridge but doesn't
handle the case of restoring AP interfaces added back to bridge properly.

Fix the ap_scan_as_station update whenever scan trigger is successful to check
during NL80211_CMD_NEW_SCAN_RESULTS processing. Currently it is updated only
when scan trigger is failed and passed on retry, this case doesn't hit for MLO
case where we keep retrying before trying above WAR.

Also update nl80211_restore_ap_mode without strict check on previous mode to be
STATION since we set back AP mode in most cases before we receive
NL80211_CMD_NEW_SCAN_RESULTS later for processing.

Signed-off-by: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
---
 src/drivers/driver_nl80211.c      |  9 +++++----
 src/drivers/driver_nl80211_scan.c | 13 +++++++++++--
 2 files changed, 16 insertions(+), 6 deletions(-)

--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -7821,10 +7821,11 @@ done:
 void nl80211_restore_ap_mode(struct i802_bss *bss)
 {
 	struct wpa_driver_nl80211_data *drv = bss->drv;
-	int was_ap = is_ap_interface(drv->nlmode);
 
-	wpa_driver_nl80211_set_mode(bss, drv->ap_scan_as_station);
-	if (!was_ap && is_ap_interface(drv->ap_scan_as_station) &&
+	/* Set back AP mode if not currently in AP mode */
+	if (drv->nlmode != drv->ap_scan_as_station)
+		wpa_driver_nl80211_set_mode(bss, drv->ap_scan_as_station);
+	if (is_ap_interface(drv->ap_scan_as_station) &&
 	    bss->brname[0] &&
 	    (bss->added_if_into_bridge || bss->already_in_bridge)) {
 		wpa_printf(MSG_DEBUG,
--- a/src/drivers/driver_nl80211_scan.c
+++ b/src/drivers/driver_nl80211_scan.c
@@ -362,7 +362,8 @@ int wpa_driver_nl80211_scan(struct i802_
 	int ret = -1, timeout;
 	struct nl_msg *msg = NULL;
 
-	wpa_dbg(bss->ctx, MSG_DEBUG, "nl80211: scan request");
+	wpa_dbg(drv->ctx, MSG_DEBUG, "nl80211: scan request for %s, iftype %s",
+			bss->ifname, nl80211_iftype_str(drv->nlmode));
 	drv->scan_for_auth = 0;
 
 	if (TEST_FAIL())
@@ -466,6 +467,12 @@ int wpa_driver_nl80211_scan(struct i802_
 			ret = 0;
 		} else
 			goto fail;
+	} else if (drv->ap_scan_as_station == NL80211_IFTYPE_UNSPECIFIED &&
+			drv->hostapd) {
+		/* Restore AP mode when processing scan results */
+		wpa_printf(MSG_DEBUG, "nl80211: scan triggered, restore AP mode for %s\n",
+				bss->ifname);
+		drv->ap_scan_as_station = drv->nlmode;
 	}
 
 	drv->scan_state = SCAN_REQUESTED;
