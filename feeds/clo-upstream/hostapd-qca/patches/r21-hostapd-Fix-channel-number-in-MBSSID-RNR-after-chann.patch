From 9d38b50839974e125d5a7d929291c3aa8f6f2519 Mon Sep 17 00:00:00 2001
From: Mohan Kumar G <quic_mkumarg@quicinc.com>
Date: Tue, 27 Feb 2024 10:53:28 +0530
Subject: [PATCH] hostapd: Fix channel number in MBSSID RNR after channel
 switch.

Currently, when channel switch happens in MBSSID case, the
non-transmitting partial profile RNR element of the first few
beacons in the new channel has old channel number.

This is because after channel switch, the new MBSSID and RNR
elements are not updated immediately. During channel switch, the new
MBSSID and RNR elements are not passed to the driver together with
other beacon data. So beaconing first starts with old MBSSID and RNR
data. After channel switch completes and beacon is set again, these
elements are passed to the driver. This delay causes the first few
beacons to contain old RNR and MBSSID elements.

Fix this issue by passing the new MBSSID and RNR elements during
the channel switch itself.

Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
---
 src/ap/beacon.c              |  46 ++++++-------
 src/ap/hostapd.c             |  70 +++++++++++++++++++-
 src/drivers/driver.h         | 122 +++++++++++++++++------------------
 src/drivers/driver_nl80211.c |  20 +++---
 4 files changed, 162 insertions(+), 96 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -607,9 +607,9 @@ ieee802_11_build_ap_params_mbssid(struct
 
 	tx_bss = hostapd_mbssid_get_tx_bss(hapd);
 	if (tx_bss->conf->mld_ap)
-		params->mbssid_tx_iface_linkid = tx_bss->mld_link_id;
+		params->mbssid.mbssid_tx_iface_linkid = tx_bss->mld_link_id;
 	else
-		params->mbssid_tx_iface_linkid = -1;
+		params->mbssid.mbssid_tx_iface_linkid = -1;
 	len = hostapd_eid_mbssid_len(tx_bss, WLAN_FC_STYPE_BEACON, &elem_count,
 				     NULL, 0, &rnr_len);
 	if (!len || (iface->conf->mbssid == ENHANCED_MBSSID_ENABLED &&
@@ -638,18 +638,18 @@ ieee802_11_build_ap_params_mbssid(struct
 				 elem_count, elem_offset, NULL, 0, rnr_elem,
 				 &rnr_elem_count, rnr_elem_offset, rnr_len);
 
-	params->mbssid_tx_iface = tx_bss->conf->iface;
-	params->mbssid_index = hostapd_mbssid_get_bss_index(hapd);
-	params->mbssid_elem = elem;
-	params->mbssid_elem_len = end - elem;
-	params->mbssid_elem_count = elem_count;
-	params->mbssid_elem_offset = elem_offset;
-	params->rnr_elem = rnr_elem;
-	params->rnr_elem_len = rnr_len;
-	params->rnr_elem_count = rnr_elem_count;
-	params->rnr_elem_offset = rnr_elem_offset;
+	params->mbssid.mbssid_tx_iface = tx_bss->conf->iface;
+	params->mbssid.mbssid_index = hostapd_mbssid_get_bss_index(hapd);
+	params->mbssid.mbssid_elem = elem;
+	params->mbssid.mbssid_elem_len = end - elem;
+	params->mbssid.mbssid_elem_count = elem_count;
+	params->mbssid.mbssid_elem_offset = elem_offset;
+	params->mbssid.rnr_elem = rnr_elem;
+	params->mbssid.rnr_elem_len = rnr_len;
+	params->mbssid.rnr_elem_count = rnr_elem_count;
+	params->mbssid.rnr_elem_offset = rnr_elem_offset;
 	if (iface->conf->mbssid == ENHANCED_MBSSID_ENABLED)
-		params->ema = true;
+		params->mbssid.ema = true;
 
 	return 0;
 
@@ -2513,7 +2513,7 @@ int ieee802_11_build_ap_params(struct ho
 		}
 		complete = hapd->iconf->mbssid == MBSSID_ENABLED ||
 			(hapd->iconf->mbssid == ENHANCED_MBSSID_ENABLED &&
-			 params->mbssid_elem_count == 1);
+			 params->mbssid.mbssid_elem_count == 1);
 	}
 
 	tailpos = hostapd_eid_ext_capab(hapd, tailpos, complete);
@@ -2569,7 +2569,7 @@ int ieee802_11_build_ap_params(struct ho
 
 	tailpos = hostapd_get_rsnxe(hapd, tailpos, tailend - tailpos);
 	tailpos = hostapd_eid_mbssid_config(hapd, tailpos,
-					    params->mbssid_elem_count);
+					    params->mbssid.mbssid_elem_count);
 
 #ifdef CONFIG_IEEE80211AX
 	if (hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) {
@@ -2849,14 +2849,14 @@ void ieee802_11_free_ap_params(struct wp
 	params->head = NULL;
 	os_free(params->proberesp);
 	params->proberesp = NULL;
-	os_free(params->mbssid_elem);
-	params->mbssid_elem = NULL;
-	os_free(params->mbssid_elem_offset);
-	params->mbssid_elem_offset = NULL;
-	os_free(params->rnr_elem);
-	params->rnr_elem = NULL;
-	os_free(params->rnr_elem_offset);
-	params->rnr_elem_offset = NULL;
+	os_free(params->mbssid.mbssid_elem);
+	params->mbssid.mbssid_elem = NULL;
+	os_free(params->mbssid.mbssid_elem_offset);
+	params->mbssid.mbssid_elem_offset = NULL;
+	os_free(params->mbssid.rnr_elem);
+	params->mbssid.rnr_elem = NULL;
+	os_free(params->mbssid.rnr_elem_offset);
+	params->mbssid.rnr_elem_offset = NULL;
 #ifdef CONFIG_FILS
 	os_free(params->fd_frame_tmpl);
 	params->fd_frame_tmpl = NULL;
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4309,6 +4309,14 @@ void free_beacon_data(struct beacon_data
 	beacon->proberesp_ies = NULL;
 	os_free(beacon->assocresp_ies);
 	beacon->assocresp_ies = NULL;
+	os_free(beacon->mbssid.mbssid_elem);
+	beacon->mbssid.mbssid_elem = NULL;
+	os_free(beacon->mbssid.mbssid_elem_offset);
+	beacon->mbssid.mbssid_elem_offset = NULL;
+	os_free(beacon->mbssid.rnr_elem);
+	beacon->mbssid.rnr_elem = NULL;
+	os_free(beacon->mbssid.rnr_elem_offset);
+	beacon->mbssid.rnr_elem_offset = NULL;
 }
 
 
@@ -4316,8 +4324,11 @@ static int hostapd_build_beacon_data(str
 				     struct beacon_data *beacon)
 {
 	struct wpabuf *beacon_extra, *proberesp_extra, *assocresp_extra;
+	u8 *mbssid_start_eid, *rnr_start_eid;
 	struct wpa_driver_ap_params params;
-	int ret;
+	struct hostapd_data *tx_bss;
+	long size = 0;
+	int ret, i;
 
 	os_memset(beacon, 0, sizeof(*beacon));
 	ret = ieee802_11_build_ap_params(hapd, &params);
@@ -4383,6 +4394,72 @@ static int hostapd_build_beacon_data(str
 	beacon->elemid_added = params.elemid_added;
 	beacon->elemid_modified = params.elemid_modified;
 
+	/* MBSSID elem */
+	if (!params.mbssid.mbssid_elem_len) {
+		ret = 0;
+		goto free_beacon;
+	}
+
+	beacon->mbssid.mbssid_tx_iface_linkid = params.mbssid.mbssid_tx_iface_linkid;
+	tx_bss = hostapd_mbssid_get_tx_bss(hapd);
+	beacon->mbssid.mbssid_tx_iface = tx_bss->conf->iface;
+	beacon->mbssid.mbssid_index = params.mbssid.mbssid_index;
+
+	beacon->mbssid.mbssid_elem_len = params.mbssid.mbssid_elem_len;
+	beacon->mbssid.mbssid_elem_count = params.mbssid.mbssid_elem_count;
+	if (params.mbssid.mbssid_elem) {
+		beacon->mbssid.mbssid_elem = os_memdup(params.mbssid.mbssid_elem,
+						       params.mbssid.mbssid_elem_len);
+		if (!beacon->mbssid.mbssid_elem)
+			goto free_beacon;
+	}
+	beacon->mbssid.ema = params.mbssid.ema;
+
+	if (params.mbssid.mbssid_elem_offset) {
+		beacon->mbssid.mbssid_elem_offset = os_calloc(beacon->mbssid.mbssid_elem_count,
+							      sizeof(u8 *));
+		if (!beacon->mbssid.mbssid_elem_offset)
+			goto free_beacon;
+
+		mbssid_start_eid = beacon->mbssid.mbssid_elem;
+		beacon->mbssid.mbssid_elem_offset[0] = mbssid_start_eid;
+		for (i = 0; i < beacon->mbssid.mbssid_elem_count - 1; i++) {
+			size = params.mbssid.mbssid_elem_offset[i + 1] -
+			       params.mbssid.mbssid_elem_offset[i];
+			mbssid_start_eid = mbssid_start_eid + size;
+			beacon->mbssid.mbssid_elem_offset[i + 1] = mbssid_start_eid;
+		}
+	}
+	/* RNR elem */
+	if (!params.mbssid.rnr_elem_len) {
+		ret = 0;
+		goto free_beacon;
+	}
+
+	if (params.mbssid.rnr_elem) {
+		beacon->mbssid.rnr_elem = os_memdup(params.mbssid.rnr_elem,
+						    params.mbssid.rnr_elem_len);
+		if (!beacon->mbssid.rnr_elem)
+			goto free_beacon;
+	}
+
+	beacon->mbssid.rnr_elem_len = params.mbssid.rnr_elem_len;
+	beacon->mbssid.rnr_elem_count = params.mbssid.rnr_elem_count;
+	if (params.mbssid.rnr_elem_offset) {
+		beacon->mbssid.rnr_elem_offset = os_calloc(beacon->mbssid.rnr_elem_count + 1,
+							   sizeof(u8 *));
+		if (!beacon->mbssid.rnr_elem_offset)
+			goto free_beacon;
+
+		rnr_start_eid = beacon->mbssid.rnr_elem;
+		beacon->mbssid.rnr_elem_offset[0] = rnr_start_eid;
+		for (i = 0; i < beacon->mbssid.rnr_elem_count - 1; i++) {
+			size = params.mbssid.rnr_elem_offset[i + 1] - params.mbssid.rnr_elem_offset[i];
+			rnr_start_eid = rnr_start_eid + size;
+			beacon->mbssid.rnr_elem_offset[i + 1] = rnr_start_eid;
+		}
+	}
+
 	ret = 0;
 free_beacon:
 	/* if the function fails, the caller should not free beacon data */
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1519,6 +1519,61 @@ struct unsol_bcast_probe_resp {
 	size_t unsol_bcast_probe_resp_tmpl_len;
 };
 
+struct mbssid_data {
+	/**
+	 * mbssid_tx_iface - Transmitting interface of the MBSSID set
+	 */
+	const char *mbssid_tx_iface;
+	/**
+	 * mbssid_tx_iface_linkid linkid which is Transmitting interface
+	 * for this non-tx link if mbssid_tx_iface is an MLD
+	 */
+	int mbssid_tx_iface_linkid;
+	/**
+	 * mbssid_index - The index of this BSS in the MBSSID set
+	 */
+	unsigned int mbssid_index;
+	/**
+	 * mbssid_elem - Buffer containing all MBSSID elements
+	 */
+	u8 *mbssid_elem;
+	/**
+	 * mbssid_elem_len - Total length of all MBSSID elements
+	 */
+	size_t mbssid_elem_len;
+	/**
+	 * mbssid_elem_count - The number of MBSSID elements
+	 */
+	u8 mbssid_elem_count;
+	/**
+	 * mbssid_elem_offset - Offsets to elements in mbssid_elem.
+	 * Kernel will use these offsets to generate multiple BSSID beacons.
+	 */
+	u8 **mbssid_elem_offset;
+	/**
+	 * ema - Enhanced MBSSID advertisements support.
+	 */
+	bool ema;
+	/**
+	 * rnr_elem - This buffer contains all of reduced neighbor report (RNR)
+	 * elements
+	 */
+	u8 *rnr_elem;
+	/**
+	 * rnr_elem_len - Length of rnr_elem buffer
+	 */
+	size_t rnr_elem_len;
+	/**
+	 * rnr_elem_count - Number of RNR elements
+	 */
+	unsigned int rnr_elem_count;
+	/**
+	 * rnr_elem_offset - The offsets to the elements in rnr_elem.
+	 * The driver will use these to include RNR elements in EMA beacons.
+	 */
+	u8 **rnr_elem_offset;
+};
+
 struct wpa_driver_ap_params {
 	/**
 	 * head - Beacon head from IEEE 802.11 header to IEs before TIM IE
@@ -1867,49 +1922,7 @@ struct wpa_driver_ap_params {
 	 * FILS Discovery frame template length
 	 */
 	size_t fd_frame_tmpl_len;
-
-	/**
-	 * mbssid_tx_iface - Transmitting interface of the MBSSID set
-	 */
-	const char *mbssid_tx_iface;
-
-	/**
-	 * mbssid_tx_iface_linkid linkid which is Transmitting interface
-	 * for this non-tx link if mbssid_tx_iface is an MLD
-	 */
-
-	int mbssid_tx_iface_linkid;
-
-	/**
-	 * mbssid_index - The index of this BSS in the MBSSID set
-	 */
-	unsigned int mbssid_index;
-
-	/**
-	 * mbssid_elem - Buffer containing all MBSSID elements
-	 */
-	u8 *mbssid_elem;
-
-	/**
-	 * mbssid_elem_len - Total length of all MBSSID elements
-	 */
-	size_t mbssid_elem_len;
-
-	/**
-	 * mbssid_elem_count - The number of MBSSID elements
-	 */
-	u8 mbssid_elem_count;
-
-	/**
-	 * mbssid_elem_offset - Offsets to elements in mbssid_elem.
-	 * Kernel will use these offsets to generate multiple BSSID beacons.
-	 */
-	u8 **mbssid_elem_offset;
-
-	/**
-	 * ema - Enhanced MBSSID advertisements support.
-	 */
-	bool ema;
+	struct mbssid_data mbssid;
 
 	/**
 	 * Beacon Tx mode - To configure STAGGERED or BURST mode
@@ -1926,27 +1939,6 @@ struct wpa_driver_ap_params {
 	 */
 	u16 punct_bitmap;
 
-	/**
-	 * rnr_elem - This buffer contains all of reduced neighbor report (RNR)
-	 * elements
-	 */
-	u8 *rnr_elem;
-
-	/**
-	 * rnr_elem_len - Length of rnr_elem buffer
-	 */
-	size_t rnr_elem_len;
-
-	/**
-	 * rnr_elem_count - Number of RNR elements
-	 */
-	unsigned int rnr_elem_count;
-
-	/**
-	 * rnr_elem_offset - The offsets to the elements in rnr_elem.
-	 * The driver will use these to include RNR elements in EMA beacons.
-	 */
-	u8 **rnr_elem_offset;
 
 	/* Unsolicited broadcast Probe Response data */
 	struct unsol_bcast_probe_resp ubpr;
@@ -2885,6 +2877,8 @@ struct beacon_data {
 	/* critical_update_flag - critical update flag*/
 	bool elemid_added;
 	bool elemid_modified;
+
+	struct mbssid_data mbssid;
 };
 
 /**
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4901,7 +4901,7 @@ static int nl80211_unsol_bcast_probe_res
 
 
 static int nl80211_mbssid(struct nl_msg *msg,
-			 struct wpa_driver_ap_params *params)
+			 struct mbssid_data *params)
 {
 	struct nlattr *config, *elems;
 	int ifidx;
@@ -5551,8 +5551,9 @@ static int wpa_driver_nl80211_set_ap(voi
 	    nl80211_unsol_bcast_probe_resp(bss, msg, &params->ubpr) < 0)
 		goto fail;
 
-	if (nl80211_mbssid(msg, params) < 0)
+	if (nl80211_mbssid(msg, &params->mbssid) < 0)
 		goto fail;
+
 #endif /* CONFIG_IEEE80211AX */
 
 #ifdef CONFIG_SAE
@@ -11663,8 +11664,7 @@ static int wpa_driver_nl80211_status(voi
 	return pos - buf;
 }
 
-
-static int set_beacon_data(struct nl_msg *msg, struct beacon_data *settings)
+static int set_beacon_data(struct nl_msg *msg, struct beacon_data *settings, bool skip_mbssid)
 {
 	if ((settings->head &&
 	     nla_put(msg, NL80211_ATTR_BEACON_HEAD,
@@ -11686,6 +11686,9 @@ static int set_beacon_data(struct nl_msg
 		     settings->probe_resp_len, settings->probe_resp)))
 		return -ENOBUFS;
 
+	if (!skip_mbssid && (nl80211_mbssid(msg, &settings->mbssid) < 0))
+		return -ENOBUFS;
+
 	return 0;
 }
 
@@ -11790,7 +11793,7 @@ static int nl80211_switch_channel(void *
 		goto error;
 
 	/* beacon_after params */
-	ret = set_beacon_data(msg, &settings->beacon_after);
+	ret = set_beacon_data(msg, &settings->beacon_after, false);
 	if (ret)
 		goto error;
 
@@ -11803,7 +11806,7 @@ static int nl80211_switch_channel(void *
 	if (!beacon_csa)
 		goto fail;
 
-	ret = set_beacon_data(msg, &settings->beacon_csa);
+	ret = set_beacon_data(msg, &settings->beacon_csa, true);
 	if (ret)
 		goto error;
 
@@ -11893,7 +11896,7 @@ static int nl80211_switch_color(void *pr
 		goto error;
 
 	/* beacon_after params */
-	ret = set_beacon_data(msg, &settings->beacon_after);
+	ret = set_beacon_data(msg, &settings->beacon_after, false);
 	if (ret)
 		goto error;
 
@@ -11904,7 +11907,7 @@ static int nl80211_switch_color(void *pr
 		goto error;
 	}
 
-	ret = set_beacon_data(msg, &settings->beacon_cca);
+	ret = set_beacon_data(msg, &settings->beacon_cca, true);
 	if (ret)
 		goto error;
 
