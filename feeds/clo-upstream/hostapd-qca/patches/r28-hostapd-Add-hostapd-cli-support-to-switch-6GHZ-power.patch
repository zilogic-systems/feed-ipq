From 8b81fd938d048dac61648aadb27b72817c75dbd4 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Tue, 28 May 2024 11:50:50 +0530
Subject: [PATCH] hostapd: Add hostapd cli support to switch 6 GHz power mode

Add support to switch 6 GHz power mode. Add a new vendor NL
command to accomplish the same. This is also generates beacon
template to be used after power mode switch.

Command:
hostapd_cli -i wlanX set_6ghz_power_mode <0/1/2>
0 - LPI
1 - SP
2 - VLP

Also add support to indicate the change in power mode to hostapd.

Patch dependency: n00-001-hostapd-add-support-for-6GHz-operation.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 hostapd/ctrl_iface.c               | 44 ++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c              | 27 ++++++++++++++++++
 src/ap/ap_drv_ops.h                | 11 ++++++++
 src/ap/drv_callbacks.c             | 32 ++++++++++++++++++++++
 src/ap/hostapd.c                   |  2 ++
 src/ap/hostapd.h                   | 11 ++++++++
 src/common/qca-vendor.h            | 19 +++++++++++++
 src/drivers/driver.h               | 29 ++++++++++++++++++++
 src/drivers/driver_common.c        |  1 +
 src/drivers/driver_nl80211.c       | 42 ++++++++++++++++++++++++++++
 src/drivers/driver_nl80211_event.c | 34 +++++++++++++++++++++++
 11 files changed, 252 insertions(+)

--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2753,6 +2753,62 @@ static int hostapd_ctrl_check_freq_param
 #endif /* NEED_AP_MLME */
 
 
+static int hostapd_ctrl_iface_set_pwr_mode(struct hostapd_iface *iface,
+					   char *pos)
+{
+#ifdef NEED_AP_MLME
+	struct he_6ghz_pwr_mode_settings settings;
+	int ret, he_6ghz_pwr_mode, err = 0;
+	unsigned int i, num_err = 0;
+	char *end;
+
+	if (iface->power_mode_6ghz_before_change > -1) {
+		wpa_printf(MSG_ERROR, "Power mode change in progress");
+		return -1;
+	}
+
+	os_memset(&settings, 0, sizeof(settings));
+	he_6ghz_pwr_mode = strtol(pos, &end, 10);
+	if (pos == end || he_6ghz_pwr_mode < 0 || he_6ghz_pwr_mode > 2) {
+		wpa_printf(MSG_ERROR, "Invalid power mode provided");
+		return -1;
+	}
+
+	if (!is_6ghz_freq(iface->freq)) {
+		wpa_printf(MSG_ERROR, "set_pwr_mode is only for 6 GHz");
+		return -1;
+	}
+
+	if (he_6ghz_pwr_mode == HE_REG_INFO_6GHZ_AP_TYPE_SP &&
+	    !iface->is_afc_power_event_received) {
+		wpa_printf(MSG_ERROR, "Standard Power mode cant be set without AFC");
+		return -1;
+	}
+
+	settings.pwr_mode = he_6ghz_pwr_mode;
+	iface->power_mode_6ghz_before_change = he_6ghz_pwr_mode;
+	wpa_printf(MSG_DEBUG, "Setting user selected 6 GHz power mode: %d\n",
+		   he_6ghz_pwr_mode);
+
+	for (i = 0; i < iface->num_bss; i++) {
+		err = hostapd_drv_set_6ghz_pwr_mode(iface->bss[i], &settings);
+		if (err) {
+			ret = err;
+			num_err++;
+		}
+	}
+
+	if (iface->num_bss != num_err)
+		return 0;
+
+	iface->power_mode_6ghz_before_change = -1;
+
+	return ret;
+#else /* NEED_AP_MLME */
+	return -1;
+#endif /* NEED_AP_MLME */
+}
+
 static int hostapd_ctrl_iface_chan_switch(struct hostapd_iface *iface,
 					  char *pos)
 {
@@ -4980,6 +5036,9 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "COLOR_CHANGE ", 13) == 0) {
 		if (hostapd_ctrl_iface_color_change(hapd->iface, buf + 13))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "SET_6GHZ_PWR_MODE ", 18) == 0) {
+		if (hostapd_ctrl_iface_set_pwr_mode(hapd->iface, buf + 18))
+			reply_len = -1;
 #endif /* CONFIG_IEEE80211AX */
 	} else if (os_strncmp(buf, "NOTIFY_CW_CHANGE ", 17) == 0) {
 		if (hostapd_ctrl_iface_notify_cw_change(hapd, buf + 17))
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1181,6 +1181,31 @@ static int hostapd_cli_cmd_color_change(
 #endif /* CONFIG_IEEE80211AX */
 
 
+static int hostapd_cli_cmd_set_pwr_mode(struct wpa_ctrl *ctrl,
+					int argc, char *argv[])
+{
+	char cmd[256];
+	int res;
+	int ret;
+
+	if (argc < 1) {
+		printf("Invalid power mode command: no argument given\n"
+		       "usage: <pwr_mode-0/1/2>\n"
+		       "0 - LPI; 1 - SP; 2 - VLP\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "SET_6GHZ_PWR_MODE %s",
+			  argv[0]);
+	if (os_snprintf_error(sizeof(cmd), res)) {
+		printf("Too long SET_PWR_MODE command\n");
+		return -1;
+	}
+
+	ret = wpa_ctrl_command(ctrl, cmd);
+	return ret;
+}
+
 static int hostapd_cli_cmd_chan_switch(struct wpa_ctrl *ctrl,
 				       int argc, char *argv[])
 {
@@ -1769,6 +1794,8 @@ static const struct hostapd_cli_cmd host
 	  "<addr> = send QoS Map Configure frame" },
 	{ "notify_cw_change", hostapd_cli_cmd_notify_cw_change, NULL,
 	  "<channel_width> = 0 - 20 MHz, 1 - 40 MHz, 2 - 80 MHz, 3 - 160 MHz" },
+	{ "set_6ghz_power_mode", hostapd_cli_cmd_set_pwr_mode, NULL,
+	  "<pwr_mode> = 0 - LPI, 1 - SP, 2 - VLP\n"},
 	{ "chan_switch", hostapd_cli_cmd_chan_switch, NULL,
 	  "<cs_count> <freq> [sec_channel_offset=] [center_freq1=]\n"
 	  "  [center_freq2=] [bandwidth=] [bandwidth_device=] \n"
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -334,6 +334,17 @@ static inline int hostapd_drv_switch_cha
 	return hapd->driver->switch_channel(hapd->drv_priv, settings);
 }
 
+static inline int
+hostapd_drv_set_6ghz_pwr_mode(struct hostapd_data *hapd,
+			      struct he_6ghz_pwr_mode_settings *settings)
+{
+	if (hapd->driver == NULL || hapd->drv_priv == NULL ||
+	    hapd->driver->set_6ghz_pwr_mode == NULL)
+		return -1;
+
+	return hapd->driver->set_6ghz_pwr_mode(hapd->drv_priv, settings);
+}
+
 #ifdef CONFIG_IEEE80211AX
 static inline int hostapd_drv_switch_color(struct hostapd_data *hapd,
 					   struct cca_settings *settings)
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2390,6 +2390,39 @@ static void hostapd_event_update_muedca_
 			   "Failed to update beacons with MU-EDCA parameters");
 }
 
+static void hostapd_event_6ghz_power_mode(struct hostapd_data *hapd,
+					  u8 he_6ghz_power_mode)
+{
+	struct hostapd_config *conf = hapd->iconf;
+	struct hostapd_iface *iface = hapd->iface;
+	int ret;
+
+	if (he_6ghz_power_mode != iface->power_mode_6ghz_before_change) {
+		wpa_printf(MSG_ERROR, "Invalid power mode sent by the target");
+		return;
+	}
+
+	conf->he_6ghz_reg_pwr_type = he_6ghz_power_mode;
+	hostapd_get_hw_features(iface);
+	ret = hostapd_select_hw_mode(iface);
+	if (ret) {
+		wpa_printf(MSG_ERROR, "Could not change 6GHZ power mode(%d)",
+			   ret);
+		hostapd_disable_iface(iface);
+	}
+
+	if (hostapd_set_current_hw_info(iface, iface->freq)) {
+		wpa_printf(MSG_ERROR, "Failed to get operating hw mac id");
+		hostapd_disable_iface(iface);
+	}
+
+	if (ieee802_11_update_beacons(hapd->iface))
+		wpa_printf(MSG_DEBUG,
+			   "Failed to update beacons with new pwr_mode");
+
+	iface->power_mode_6ghz_before_change = -1;
+}
+
 #ifdef CONFIG_OWE
 static int hostapd_notif_update_dh_ie(struct hostapd_data *hapd,
 				      const u8 *peer, const u8 *ie,
@@ -2973,6 +3006,10 @@ void hostapd_wpa_event(void *ctx, enum w
 			   hapd->conf->iface);
 		hostapd_event_color_change(hapd, true);
 		break;
+	case EVENT_6GHZ_POWER_MODE_NOTIFY:
+		hostapd_event_6ghz_power_mode(hapd,
+					      data->ap_6ghz_pwr_mode_event.pwr_mode);
+		break;
 #endif /* CONFIG_IEEE80211AX */
 #ifdef CONFIG_IEEE80211BE
 	case EVENT_MLD_INTERFACE_FREED:
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -2243,6 +2243,7 @@ static int setup_interface2(struct hosta
 {
 	iface->wait_channel_update = 0;
 	iface->is_no_ir = false;
+	iface->power_mode_6ghz_before_change = -1;
 
 	if (hostapd_get_hw_features(iface)) {
 		/* Not all drivers support this yet, so continue without hw
@@ -3048,6 +3049,7 @@ void hostapd_interface_deinit(struct hos
 
 	eloop_cancel_timeout(channel_list_update_timeout, iface, NULL);
 	iface->wait_channel_update = 0;
+	iface->power_mode_6ghz_before_change = -1;
 	iface->is_no_ir = false;
 
 #ifdef CONFIG_FST
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -766,6 +766,17 @@ struct hostapd_iface {
 	/* lowest observed noise floor in dBm */
 	s8 lowest_nf;
 
+	/*
+	 * User configured 6 GHz power mode
+	 *
+	 * No power mode change - -1
+	 * Low power Indoor AP  -  0
+	 * Standard power AP    -  1
+	 * Very low power AP    -  2
+	 *
+	 */
+	int power_mode_6ghz_before_change;
+
 	/* channel utilization calculation */
 	u64 last_channel_time;
 	u64 last_channel_time_busy;
--- a/src/common/qca-vendor.h
+++ b/src/common/qca-vendor.h
@@ -1302,6 +1302,9 @@ enum qca_radiotap_vendor_ids {
  *
  *	The attributes used with this command are defined in
  *	enum qca_wlan_vendor_attr_chan_usage_req.
+ *
+ * @QCA_NL80211_VENDOR_SUBCMD_SET_6GHZ_POWER_MODE: This vendor command is used
+ *     to configure the 6 GHz power mode to the driver
  */
 enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_UNSPEC = 0,
@@ -1538,6 +1541,8 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_CONNECT_EXT = 250,
 	QCA_NL80211_VENDOR_SUBCMD_SET_P2P_MODE = 251,
 	QCA_NL80211_VENDOR_SUBCMD_CHAN_USAGE_REQ = 252,
+	QCA_NL80211_VENDOR_SUBCMD_SET_6GHZ_POWER_MODE = 253,
+	QCA_NL80211_VENDOR_SUBCMD_POWER_MODE_CHANGE_COMPLETED = 254,
 };
 
 /* Compatibility defines for previously used subcmd names.
@@ -18391,4 +18396,18 @@ enum qca_wlan_vendor_attr_chan_usage_req
 	QCA_WLAN_VENDOR_ATTR_CHAN_USAGE_REQ_AFTER_LAST - 1,
 };
 
+/*
+ * enum qca_wlan_vendor_6ghz_power_mode - Used by the vendor command
+ * QCA_NL80211_VENDOR_SUBCMD_SET_6GHZ_POWER_MODE command to configure the
+ * 6 GHz power mode.
+ */
+enum qca_wlan_vendor_6ghz_power_mode {
+	QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE = 1,
+
+	/* Keep last */
+	QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE_MAX =
+	QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE_AFTER_LAST - 1,
+};
 #endif /* QCA_VENDOR_H */
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2916,6 +2916,14 @@ struct csa_settings {
 };
 
 /**
+ * struct he_6ghz_pwr_mode_settings - Settings for the 6 GHz power mode
+ * @pwr_mode: 6 GHz power mode
+ */
+struct he_6ghz_pwr_mode_settings {
+	u8 pwr_mode;
+};
+
+/**
  * struct cca_settings - Settings for color switch command
  * @cca_count: Count in Beacon frames (TBTT) to perform the switch
  * @cca_color: The new color that we are switching to
@@ -4702,6 +4710,15 @@ struct wpa_driver_ops {
 	int (*switch_channel)(void *priv, struct csa_settings *settings);
 
 	/**
+	 * set_6ghz_pwr_mode - Set the 6 GHz power mode
+	 * @priv: Private driver interface data
+	 * @@settings: Settings for 6GHz power mode
+	 * Returns: 0 on success, -1 on failure
+	 */
+	int (*set_6ghz_pwr_mode)(void *priv,
+				 struct he_6ghz_pwr_mode_settings *settings);
+
+	/**
 	 * switch_color - Announce color switch and migrate the BSS to the
 	 * given color
 	 * @priv: Private driver interface data
@@ -6171,6 +6188,11 @@ enum wpa_event_type {
 	 * probe/assoc response.
 	 */
 	EVENT_RX_CRITICAL_UPDATE,
+
+	/**
+	 * EVENT_6GHZ_POWER_MODE_NOTIFY - Notify the AP power mode change
+	 */
+	EVENT_6GHZ_POWER_MODE_NOTIFY,
 };
 
 
@@ -7164,6 +7186,13 @@ union wpa_event_data {
 	} awgn_event;
 
 	/**
+	 * ap_6ghz_pwr_mode_event - Data for EVENT_6GHZ_POWER_MODE_NOTIFY
+	 */
+	struct ap_6ghz_pwr_mode_event {
+		u8 pwr_mode;
+	} ap_6ghz_pwr_mode_event;
+
+	/**
 	 * struct port_authorized - Data for EVENT_PORT_AUTHORIZED
 	 * @td_bitmap: For STA mode, transition disable bitmap, if received in
 	 *	EAPOL-Key msg 3/4
--- a/src/drivers/driver_common.c
+++ b/src/drivers/driver_common.c
@@ -104,6 +104,7 @@ const char * event_to_string(enum wpa_ev
 	E2S(LINK_RECONFIG);
 	E2S(MLD_INTERFACE_FREED);
 	E2S(RX_CRITICAL_UPDATE);
+	E2S(6GHZ_POWER_MODE_NOTIFY);
 	}
 
 	return "UNKNOWN";
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -11854,6 +11854,47 @@ error:
 	return ret;
 }
 
+static int nl80211_set_6ghz_pwr_mode(void *priv,
+				     struct he_6ghz_pwr_mode_settings *settings)
+{
+	struct nl_msg *msg;
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nlattr *params;
+	int ret = -ENOBUFS;
+
+	wpa_printf(MSG_DEBUG, "nl80211: 6 GHz power mode change req (pwr_mode=%d)",
+		   settings->pwr_mode);
+
+	if (drv->nlmode != NL80211_IFTYPE_AP)
+		return -EOPNOTSUPP;
+
+	if (!(msg = nl80211_drv_msg(drv, 0, NL80211_CMD_VENDOR)) ||
+	    nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA) ||
+	    nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+			QCA_NL80211_VENDOR_SUBCMD_SET_6GHZ_POWER_MODE)) {
+		goto error;
+	}
+
+	params = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!params)
+		goto error;
+	nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE,
+		   settings->pwr_mode);
+	nla_nest_end(msg, params);
+
+	ret = send_and_recv(drv->global, bss->nl_connect, msg, NULL, NULL, NULL, NULL, NULL);
+	if (ret) {
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: set 6 GHz power mode failed err=%d (%s)",
+			   ret, strerror(-ret));
+	}
+	return ret;
+error:
+	nlmsg_free(msg);
+	wpa_printf(MSG_DEBUG, "nl80211: Could not set 6 GHz power mode");
+	return ret;
+}
 
 #ifdef CONFIG_IEEE80211AX
 static int nl80211_switch_color(void *priv, struct cca_settings *settings)
@@ -15129,6 +15170,7 @@ const struct wpa_driver_ops wpa_driver_n
 	.get_survey = wpa_driver_nl80211_get_survey,
 	.status = wpa_driver_nl80211_status,
 	.switch_channel = nl80211_switch_channel,
+	.set_6ghz_pwr_mode = nl80211_set_6ghz_pwr_mode,
 #ifdef CONFIG_IEEE80211AX
 	.switch_color = nl80211_switch_color,
 #endif /* CONFIG_IEEE80211AX */
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -3479,9 +3479,40 @@ static void qca_nl80211_pasn_auth(struct
 }
 
 #endif /* CONFIG_PASN */
-
 #endif /* CONFIG_DRIVER_NL80211_QCA */
 
+static void
+qca_nl80211_6ghz_pwr_mode_change_completed(struct wpa_driver_nl80211_data *drv,
+					   u8 *data, size_t len)
+{
+	union wpa_event_data event;
+	u8 ap_6ghz_pwr_mode;
+	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE_MAX + 1];
+
+	if (nla_parse(tb, QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE_MAX,
+		      (struct nlattr *)data, len, NULL) ||
+	    !tb[QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE]) {
+		return;
+	}
+
+	ap_6ghz_pwr_mode = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_6GHZ_REG_POWER_MODE]);
+
+	if (ap_6ghz_pwr_mode < NL80211_REG_AP_LPI ||
+	    ap_6ghz_pwr_mode > NL80211_REG_AP_VLP) {
+		wpa_printf(MSG_ERROR, "Invalid power mode update received %u\n",
+			   ap_6ghz_pwr_mode);
+		return;
+	}
+
+	os_memset(&event, 0, sizeof(event));
+	event.ap_6ghz_pwr_mode_event.pwr_mode = ap_6ghz_pwr_mode;
+
+	wpa_printf(MSG_INFO, "nl80211: 6GHZ power mode changed %d",
+		   event.ap_6ghz_pwr_mode_event.pwr_mode);
+
+	wpa_supplicant_event(drv->ctx, EVENT_6GHZ_POWER_MODE_NOTIFY, &event);
+}
+
 
 static void nl80211_vendor_event_qca(struct wpa_driver_nl80211_data *drv,
 				     u32 subcmd, u8 *data, size_t len)
@@ -3528,6 +3559,9 @@ static void nl80211_vendor_event_qca(str
 		qca_nl80211_link_reconfig_event(drv, data, len);
 		break;
 #endif /* CONFIG_DRIVER_NL80211_QCA */
+	case QCA_NL80211_VENDOR_SUBCMD_POWER_MODE_CHANGE_COMPLETED:
+		qca_nl80211_6ghz_pwr_mode_change_completed(drv, data, len);
+		break;
 	default:
 		wpa_printf(MSG_DEBUG,
 			   "nl80211: Ignore unsupported QCA vendor event %u",
