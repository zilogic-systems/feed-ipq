From 3da934e6ca914a35130eafcbd19d252e8d666914 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Wed, 5 Jun 2024 06:32:13 +0530
Subject: [PATCH] hostapd: Add power mode to channel switch command

Add 6 Ghz power mode to channel switch command, to change the
channel and power mode in a single command atomically.

Patch dependency: n00-001-hostapd-add-support-for-6GHz-operation.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 hostapd/ctrl_iface.c         |  8 ++++++++
 src/ap/ctrl_iface_ap.c       | 15 +++++++++++++++
 src/ap/drv_callbacks.c       | 23 +++++++++++++++++++++++
 src/ap/hostapd.c             |  6 +++++-
 src/ap/interference.c        |  1 +
 src/drivers/driver.h         |  2 ++
 src/drivers/driver_nl80211.c | 11 +++++++++--
 7 files changed, 63 insertions(+), 3 deletions(-)

--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2831,6 +2831,11 @@ static int hostapd_ctrl_iface_chan_switc
 	if (iface->num_bss && iface->bss[0]->conf->mld_ap)
 		settings.link_id = iface->bss[0]->mld_link_id;
 #endif /* CONFIG_IEEE80211BE */
+	if (settings.power_mode == HE_REG_INFO_6GHZ_AP_TYPE_SP &&
+	    !iface->is_afc_power_event_received) {
+		wpa_printf(MSG_ERROR, "Standard Power mode cant be set without AFC");
+		return -1;
+	}
 
 	if (iface->num_hw_features > 1 &&
 	    !hostapd_ctrl_is_freq_in_cmode(iface->current_mode,
@@ -2849,11 +2854,22 @@ static int hostapd_ctrl_iface_chan_switc
 		return ret;
 	}
 
+	if (iface->power_mode_6ghz_before_change > -1) {
+		wpa_printf(MSG_ERROR, "Power mode change in progress");
+		return -1;
+	}
+
+	if (settings.power_mode > -1)
+		iface->power_mode_6ghz_before_change = settings.power_mode;
+
 	ret = hostapd_check_validity_device_params(&settings.freq_params);
 	if (ret) {
 		wpa_printf(MSG_ERROR, "chanswitch: invalid device parameters provided %d %d",
 			   settings.freq_params.bandwidth_device,
 			   settings.freq_params.center_freq_device);
+		if (iface->power_mode_6ghz_before_change != -1)
+			iface->power_mode_6ghz_before_change = -1;
+
 		return ret;
 	}
 
@@ -2897,6 +2913,9 @@ static int hostapd_ctrl_iface_chan_switc
 				   settings.freq_params.freq,
 				   settings.freq_params.sec_channel_offset,
 				   settings.freq_params.bandwidth);
+			if (iface->power_mode_6ghz_before_change != -1)
+				iface->power_mode_6ghz_before_change = -1;
+
 			return -1;
 		}
 
@@ -2919,6 +2938,9 @@ static int hostapd_ctrl_iface_chan_switc
 		/* Perform CAC and switch channel */
 		iface->is_ch_switch_dfs = true;
 		hostapd_switch_channel_fallback(iface, &settings.freq_params);
+		if (iface->power_mode_6ghz_before_change != -1)
+			iface->power_mode_6ghz_before_change = -1;
+
 		return 0;
 	}
 
@@ -2942,6 +2964,9 @@ static int hostapd_ctrl_iface_chan_switc
 
 		err = hostapd_switch_channel(iface->bss[i], &settings);
 		if (err) {
+			if (iface->power_mode_6ghz_before_change != -1)
+				iface->power_mode_6ghz_before_change = -1;
+
 			ret = err;
 			num_err++;
 		}
--- a/src/ap/ctrl_iface_ap.c
+++ b/src/ap/ctrl_iface_ap.c
@@ -1355,6 +1355,7 @@ int hostapd_parse_csa_settings(const cha
 
 	os_memset(settings, 0, sizeof(*settings));
 	settings->cs_count = strtol(pos, &end, 10);
+	settings->power_mode = -1;
 	if (pos == end) {
 		wpa_printf(MSG_ERROR, "chanswitch: invalid cs_count provided");
 		return -1;
@@ -1391,6 +1392,20 @@ int hostapd_parse_csa_settings(const cha
 	SET_CSA_SETTING_EXT(punct_bitmap);
 	SET_CSA_SETTING(bandwidth_device);
 	SET_CSA_SETTING(center_freq_device);
+	SET_CSA_SETTING_EXT(power_mode);
+	if (!is_6ghz_freq(settings->freq_params.freq) &&
+	    (settings->power_mode != -1)) {
+		wpa_printf(MSG_ERROR,
+			"chanswitch: power mode is not supported for non- 6 GHz frequency");
+		return -1;
+	}
+
+	if (settings->power_mode < -1 ||
+	    settings->power_mode > HE_REG_INFO_6GHZ_AP_TYPE_VLP) {
+		wpa_printf(MSG_ERROR, "chanswitch: invalid 6 GHz power_mode provided");
+		return -1;
+	}
+
 	settings->freq_params.punct_bitmap = settings->punct_bitmap;
 	settings->freq_params.ht_enabled = !!os_strstr(pos, " ht");
 	settings->freq_params.vht_enabled = !!os_strstr(pos, " vht");
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1204,6 +1204,30 @@ void hostapd_event_sta_opmode_changed(st
 	}
 }
 
+static int hostapd_switch_power_mode(struct hostapd_data *hapd)
+{
+	struct he_6ghz_pwr_mode_settings settings;
+	unsigned int i, num_err =  0;
+	int ret, err = 0;
+
+	settings.pwr_mode =
+		hapd->iface->power_mode_6ghz_before_change;
+	hapd->iface->power_mode_6ghz_before_change = -1;
+	for (i = 0; i < hapd->iface->num_bss; i++) {
+		err = hostapd_drv_set_6ghz_pwr_mode(hapd->iface->bss[i], &settings);
+		if (err) {
+			ret = err;
+			num_err++;
+		}
+	}
+
+	if (hapd->iface->num_bss != num_err)
+		return 0;
+
+	hapd->iface->power_mode_6ghz_before_change = -1;
+
+	return ret;
+}
 
 void hostapd_event_ch_switch(struct hostapd_data *hapd, int freq, int ht,
 			     int offset, int width, int cf1, int cf2,
@@ -1403,6 +1427,14 @@ void hostapd_event_ch_switch(struct host
 
 	if (hapd->csa_in_progress &&
 	    freq == hapd->cs_freq_params.freq) {
+		if (hapd->iface->power_mode_6ghz_before_change > -1) {
+			if (hapd->iface->power_mode_6ghz_before_change !=
+			    hapd->iconf->he_6ghz_reg_pwr_type) {
+				if (hostapd_switch_power_mode(hapd))
+					wpa_printf(MSG_ERROR, "Power mode change failed");
+			}
+		}
+
 		hostapd_cleanup_cs_params(hapd);
 		hapd->disable_cu = 1;
 		ieee802_11_set_beacon(hapd);
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4594,7 +4594,7 @@ static int hostapd_fill_csa_settings(str
 #ifdef CONFIG_IEEE80211BE
 	u16 old_punct_bitmap;
 #endif /* CONFIG_IEEE80211BE */
-	u8 chan, bandwidth;
+	u8 chan, bandwidth, old_reg_6ghz_power_mode;
 	u8 oper_centr_freq0_idx = 0;
 	u8 oper_centr_freq1_idx = 0;
 	int sec_channel_offset = settings->freq_params.sec_channel_offset;
@@ -4668,6 +4668,8 @@ static int hostapd_fill_csa_settings(str
 	if (ret)
 		return ret;
 
+	old_reg_6ghz_power_mode = iface->conf->he_6ghz_reg_pwr_type;
+	iface->conf->he_6ghz_reg_pwr_type = settings->power_mode;
 #ifdef CONFIG_IEEE80211BE
 	old_punct_bitmap = iface->conf->punct_bitmap;
 	iface->conf->punct_bitmap = settings->punct_bitmap;
@@ -4728,6 +4730,7 @@ static int hostapd_fill_csa_settings(str
 	 hapd->iface->conf->he_mu_edca.he_qos_info &= 0xfff0;
 	 hapd->parameter_set_count = 0;
 
+	iface->conf->he_6ghz_reg_pwr_type = old_reg_6ghz_power_mode;
 	ret = hostapd_build_beacon_data(hapd, &settings->beacon_csa);
 	if (ret) {
 		free_beacon_data(&settings->beacon_after);
@@ -4763,6 +4766,7 @@ void hostapd_cleanup_cs_params(struct ho
 	hapd->csa_in_progress = 0;
 	hapd->cs_c_off_ecsa_beacon = 0;
 	hapd->cs_c_off_ecsa_proberesp = 0;
+	hapd->iface->power_mode_6ghz_before_change = -1;
 }
 
 
--- a/src/ap/interference.c
+++ b/src/ap/interference.c
@@ -499,6 +499,7 @@ int hostapd_intf_awgn_detected(struct ho
 	settings.freq_params.vht_enabled = iface->conf->ieee80211ac;
 	settings.freq_params.he_enabled = iface->conf->ieee80211ax;
 	settings.freq_params.eht_enabled= iface->conf->ieee80211be;
+	settings.power_mode = -1;
 
 	for (i = 0; i < iface->num_bss; i++) {
 		/* Save CHAN_SWITCH VHT and HE config */
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2899,6 +2899,7 @@ struct beacon_data {
  * @counter_offset_beacon: Offset to the count field in beacon's tail
  * @counter_offset_presp: Offset to the count field in probe resp.
  * @punct_bitmap - Preamble puncturing bitmap
+ * @power_mode: 6 GHz Power mode
  * @link_id: Link ID to determine the link for MLD; -1 for non-MLD
  * @ubpr: Unsolicited broadcast Probe Response frame data
  */
@@ -2921,6 +2922,7 @@ struct csa_settings {
 
 	/* critical_update_flag - critical update flag*/
 	bool beacon_after_cu;
+	int power_mode;
 };
 
 /**
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -11798,6 +11798,12 @@ static int nl80211_switch_channel(void *
 	     nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, settings->link_id)))
 		goto error;
 
+	if (is_6ghz_freq(settings->freq_params.freq) && settings->power_mode > -1) {
+		if (nla_put_u8(msg, NL80211_ATTR_6G_REG_POWER_MODE,
+			       settings->power_mode))
+			goto error;
+	}
+
 	/* beacon_after params */
 	ret = set_beacon_data(msg, &settings->beacon_after, false);
 	if (ret)
