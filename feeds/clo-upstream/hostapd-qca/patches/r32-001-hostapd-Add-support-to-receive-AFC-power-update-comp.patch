From 61afb7d7f1f160d9853e0fb5ac2351715b4a4c25 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Mon, 10 Jun 2024 22:35:45 +0530
Subject: [PATCH] hostapd: Add support to receive AFC power update complete
 event

Add support to receive the AFC payload from the target, through
QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE and store it
in the iface. Set is_afc_power_event_received to true once the payload
is copied to the iface.

Patch dependency: n00-001-hostapd-add-support-for-6GHz-operation.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 src/ap/drv_callbacks.c             |  89 +++++++
 src/ap/hostapd.c                   |  44 +++-
 src/ap/hostapd.h                   |   4 +
 src/common/ieee802_11_defs.h       |  29 +++
 src/drivers/driver.h               |  41 ++++
 src/drivers/driver_nl80211_capa.c  |   1 +
 src/drivers/driver_nl80211_event.c | 364 +++++++++++++++++++++++++++++
 7 files changed, 571 insertions(+), 1 deletion(-)

--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2446,6 +2446,91 @@ static void hostapd_event_6ghz_power_mod
 	iface->power_mode_6ghz_before_change = -1;
 }
 
+static int hostapd_allocate_afc_rsp_info(struct hostapd_iface *iface,
+					 struct afc_sp_reg_info *afc_rsp_info)
+{
+	struct afc_sp_reg_info *afc_response = NULL;
+	struct afc_freq_obj *afc_freq_info = NULL;
+	struct afc_chan_obj *afc_chan_info = NULL;
+	struct chan_eirp_obj *chan_eirp_info = NULL;
+	u8 i;
+
+	afc_response = os_malloc(sizeof(*afc_response));
+	if (!afc_response) {
+		wpa_printf(MSG_DEBUG, "afc_response allocation failed");
+		return -ENOMEM;
+	}
+
+	os_memcpy(afc_response, afc_rsp_info, sizeof(*afc_response));
+	iface->afc_rsp_info = afc_response;
+	afc_freq_info = os_malloc(afc_rsp_info->num_freq_objs *
+				  sizeof(*afc_freq_info));
+	if (!afc_freq_info) {
+		wpa_printf(MSG_DEBUG, "afc_freq_info allocation failed");
+		os_free(afc_response);
+		iface->afc_rsp_info = NULL;
+		return -ENOMEM;
+	}
+
+	os_memcpy(afc_freq_info, afc_rsp_info->afc_freq_info,
+		  (afc_rsp_info->num_freq_objs *
+		   sizeof(*afc_freq_info)));
+	iface->afc_rsp_info->afc_freq_info = afc_freq_info;
+	afc_chan_info = os_malloc(afc_rsp_info->num_chan_objs *
+				  sizeof(*afc_chan_info));
+	if (!afc_chan_info) {
+		wpa_printf(MSG_DEBUG, "afc_chan_info allocation failed");
+		os_free(afc_freq_info);
+		iface->afc_rsp_info->afc_freq_info = NULL;
+		os_free(afc_response);
+		iface->afc_rsp_info = NULL;
+		return -ENOMEM;
+	}
+
+	for (i = 0; i < afc_response->num_chan_objs; i++) {
+		afc_chan_info[i].global_opclass =
+				afc_rsp_info->afc_chan_info[i].global_opclass;
+		afc_chan_info[i].num_chans =
+				afc_rsp_info->afc_chan_info[i].num_chans;
+		chan_eirp_info =  os_malloc(afc_chan_info[i].num_chans *
+					    sizeof(*chan_eirp_info));
+		if (!chan_eirp_info) {
+			wpa_printf(MSG_DEBUG, "chan_eirp_info allocation failed");
+			os_free(afc_chan_info);
+			afc_chan_info = NULL;
+			os_free(afc_freq_info);
+			iface->afc_rsp_info->afc_freq_info = NULL;
+			os_free(afc_response);
+			iface->afc_rsp_info = NULL;
+			return -ENOMEM;
+		}
+
+		os_memcpy(chan_eirp_info,
+			  afc_rsp_info->afc_chan_info[i].chan_eirp_info,
+			  afc_chan_info[i].num_chans * sizeof(*chan_eirp_info));
+		afc_chan_info[i].chan_eirp_info = chan_eirp_info;
+	}
+
+	iface->afc_rsp_info->afc_chan_info = afc_chan_info;
+
+	return 0;
+}
+
+static void hostapd_event_afc_update_complete(
+		struct hostapd_data *hapd,
+		struct afc_sp_reg_info *afc_rsp_info)
+{
+	struct hostapd_iface *iface = hapd->iface;
+
+	hostapd_free_afc_data(iface);
+	if (hostapd_allocate_afc_rsp_info(iface, afc_rsp_info)) {
+		wpa_printf(MSG_DEBUG, "AFC response memory  allocation failed");
+		return;
+	}
+
+	iface->is_afc_power_event_received = true;
+}
+
 #ifdef CONFIG_OWE
 static int hostapd_notif_update_dh_ie(struct hostapd_data *hapd,
 				      const u8 *peer, const u8 *ie,
@@ -3049,6 +3134,10 @@ void hostapd_wpa_event(void *ctx, enum w
 		if (link_hapd)
 			hostapd_event_update_cu_param(link_hapd, &data->cu_event);
 		break;
+	case EVENT_AFC_POWER_UPDATE_COMPLETE_NOTIFY:
+		hostapd_event_afc_update_complete(hapd,
+						  &data->afc_rsp_info);
+		break;
 	default:
 		wpa_printf(MSG_DEBUG, "Unknown event %d", event);
 		break;
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -2238,9 +2238,10 @@ static void hostapd_set_6ghz_sec_chan(st
 	}
 }
 
-
 static int setup_interface2(struct hostapd_iface *iface)
 {
+	iface->afc_rsp_info = NULL;
+	iface->is_afc_power_event_received = false;
 	iface->wait_channel_update = 0;
 	iface->is_no_ir = false;
 	iface->power_mode_6ghz_before_change = -1;
@@ -3035,7 +3036,44 @@ void hostapd_bss_deinit(struct hostapd_d
 	hostapd_bss_link_deinit(hapd);
 	hostapd_cleanup(hapd);
 }
+/**
+ * hostapd_free_chan_obj() - Free the AFC chan object and chan eirp object
+ * information
+ * @afc_chan_info: Pointer to afc_chan_info
+ *
+ * Return: void
+ */
+static void hostapd_free_chan_obj(struct afc_chan_obj *afc_chan_info)
+{
+	if (afc_chan_info->chan_eirp_info)
+		os_free(afc_chan_info->chan_eirp_info);
+}
+
+void hostapd_free_afc_data(struct hostapd_iface *iface)
+{
+	u8 i;
+	struct afc_sp_reg_info *afc_rsp;
+
+	if (!iface->afc_rsp_info)
+		return;
+
+	afc_rsp = iface->afc_rsp_info;
+
+	if (afc_rsp->afc_freq_info)
+		os_free(afc_rsp->afc_freq_info);
+
+	if (!afc_rsp->afc_chan_info)
+		return;
 
+	for (i = 0; i < afc_rsp->num_chan_objs; i++)
+		hostapd_free_chan_obj(&afc_rsp->afc_chan_info[i]);
+
+	if (afc_rsp->afc_chan_info)
+		os_free(afc_rsp->afc_chan_info);
+
+	os_free(afc_rsp);
+	iface->afc_rsp_info = NULL;
+}
 
 void hostapd_interface_deinit(struct hostapd_iface *iface)
 {
@@ -3051,6 +3089,8 @@ void hostapd_interface_deinit(struct hos
 	iface->wait_channel_update = 0;
 	iface->power_mode_6ghz_before_change = -1;
 	iface->is_no_ir = false;
+	hostapd_free_afc_data(iface);
+	iface->is_afc_power_event_received = false;
 
 #ifdef CONFIG_FST
 	if (iface->fst) {
@@ -3137,6 +3177,8 @@ struct hostapd_iface * hostapd_alloc_ifa
 
 	dl_list_init(&hapd_iface->sta_seen);
 
+	hapd_iface->is_afc_power_event_received = false;
+
 	return hapd_iface;
 }
 
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -834,6 +834,9 @@ struct hostapd_iface {
 	bool is_no_ir;
 
 	bool is_ch_switch_dfs; /* Channel switch from ACS to DFS */
+	/* 6 GHz AFC information */
+	struct afc_sp_reg_info *afc_rsp_info;
+	bool is_afc_power_event_received;
 
 	struct hostapd_multi_hw_info *multi_hw_info;
 	unsigned int num_multi_hws;
@@ -898,6 +901,7 @@ int hostapd_check_max_sta(struct hostapd
 void hostapd_switch_color(struct hostapd_data *hapd, u64 bitmap);
 void hostapd_cleanup_cca_params(struct hostapd_data *hapd);
 
+void hostapd_free_afc_data(struct hostapd_iface *iface);
 /* utils.c */
 int hostapd_register_probereq_cb(struct hostapd_data *hapd,
 				 int (*cb)(void *ctx, const u8 *sa,
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -2592,6 +2592,35 @@ static inline bool he_reg_is_sp(enum he_
 		type == HE_REG_INFO_6GHZ_AP_TYPE_INDOOR_SP;
 }
 
+struct afc_freq_obj {
+	u32 low_freq;
+	u32 high_freq;
+	s16 max_psd;
+};
+
+struct chan_eirp_obj {
+	u8 cfi;
+	s16 eirp_power;
+};
+
+struct afc_chan_obj {
+	u8 global_opclass;
+	u8 num_chans;
+	struct chan_eirp_obj *chan_eirp_info;
+};
+
+struct afc_sp_reg_info {
+	u32 resp_id;
+	u8 target_status_code;
+	s32 serv_resp_code;
+	u32 avail_exp_time_d;
+	u32 avail_exp_time_t;
+	u8 num_freq_objs;
+	u8 num_chan_objs;
+	struct afc_freq_obj *afc_freq_info;
+	struct afc_chan_obj *afc_chan_info;
+};
+
 #define IEEE80211_HE_6GHZ_OPER_CTRL_REG_INFO     0x38
 #define IEEE80211_HE_6GHZ_OPER_CTRL_REG_INFO_LSB    3
 
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -75,6 +75,29 @@ enum hostapd_chan_width_attr {
 #define HOSTAPD_DFS_REGION_ETSI	2
 #define HOSTAPD_DFS_REGION_JP	3
 
+/*
+ * Opclass, channel and EIRP information attribute length
+ * Refer kernel doc explanation for attribute
+ * QCA_WLAN_VENDOR_ATTR_AFC_RESP_OPCLASS_CHAN_EIRP_INFO to understand the
+ * minimum length calculation.
+ */
+#define AFC_RESP_OPCLASS_CHAN_EIRP_INFO_MIN_LEN            \
+	NLA_ALIGN((NLA_HDRLEN + sizeof(uint8_t)) +         \
+		  ((3 * NLA_HDRLEN) + sizeof(uint8_t) +    \
+		   sizeof(uint32_t)))
+
+/*
+ * Frequency/PSD information attribute length
+ * Refer kernel doc explanation for attribute
+ * QCA_WLAN_VENDOR_ATTR_AFC_RESP_FREQ_PSD_INFO to understand the minimum length
+ * calculation.
+ */
+#define AFC_RESP_FREQ_PSD_INFO_INFO_MIN_LEN                \
+	NLA_ALIGN((3 * NLA_HDRLEN) +                       \
+		  (2 * sizeof(uint16_t)) +                 \
+		  sizeof(uint32_t))
+
+
 /**
  * enum reg_change_initiator - Regulatory change initiator
  */
@@ -198,7 +221,18 @@ struct hostapd_channel_data {
 	 */
 	const struct ieee80211_240mhz_vendor_oper *eht_240mhz_capab;
 	size_t eht_240mhz_len;
+
+	/**
+	 * This array is used to store the psd value of each power mode
+	 * supported in 6G band.
+	 */
 	s8 psd_values[NL80211_REG_NUM_POWER_MODES];
+
+	/**
+	 * This array is used to store the regulatory max EIRP value of each
+	 * power mode supported in 6GHz band.
+	 */
+	s8 eirp_values[NL80211_REG_NUM_POWER_MODES];
 };
 
 #define HE_MAC_CAPAB_0		0
@@ -6205,6 +6239,11 @@ enum wpa_event_type {
 	 * EVENT_6GHZ_POWER_MODE_NOTIFY - Notify the AP power mode change
 	 */
 	EVENT_6GHZ_POWER_MODE_NOTIFY,
+
+	/**
+	 * EVENT_AFC_POWER_UPDATE_COMPLETE_NOTIFY - Notify AFC data is processed
+	 */
+	EVENT_AFC_POWER_UPDATE_COMPLETE_NOTIFY,
 };
 
 
@@ -7230,6 +7269,8 @@ union wpa_event_data {
 		struct t2lm_mapping t2lmap[MAX_NUM_MLD_LINKS];
 	} t2l_map_info;
 
+	struct afc_sp_reg_info afc_rsp_info;
+
 	/**
 	 * Data for critical_update
 	 */
--- a/src/drivers/driver_nl80211_capa.c
+++ b/src/drivers/driver_nl80211_capa.c
@@ -2372,6 +2372,7 @@ static void nl80211_reg_rule_max_eirp(u3
 			    (u32) chan->freq + 10 <= end) {
 				chan->max_tx_power = max_eirp;
 				chan->psd_values[pwr_mode] = psd;
+				chan->eirp_values[pwr_mode] = max_eirp;
 			}
 		}
 	}
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -3514,6 +3514,368 @@ qca_nl80211_6ghz_pwr_mode_change_complet
 }
 
 
+static void compute_num_freq_obj(struct nlattr **attr, u8 *num_freq_obj)
+{
+	u8 nl_len;
+	int rem;
+	struct nlattr *nl;
+	struct nlattr *freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_MAX + 1];
+
+	/* Calculate the total number of Frequency range objects received in the
+	 * AFC response
+	 */
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST]) {
+		nla_for_each_nested(nl,
+				    attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST],
+				    rem) {
+			if (nla_parse(freq_info,
+				      QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_MAX,
+				      nla_data(nl),
+				      nla_len(nl), NULL)) {
+				wpa_printf(MSG_INFO,
+					   "Invalid freq_range_info attribute");
+				return;
+			}
+
+			nl_len = nla_len(nl);
+
+			if (nl_len < AFC_RESP_FREQ_PSD_INFO_INFO_MIN_LEN) {
+				wpa_printf(MSG_INFO,
+					   "Insufficient len %d for Freq PSD",
+					   nl_len);
+				return;
+			}
+			wpa_printf(MSG_DEBUG,
+				   "start_freq = %d low_freq = %d max_psd = %d",
+				   nla_get_u16(freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_START]),
+				   nla_get_u16(freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_END]),
+				   nla_get_u32(freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_PSD]));
+
+			(*num_freq_obj)++;
+		}
+	}
+}
+
+static void compute_num_chan_obj(struct nlattr **attr,
+				 u8 *num_opclass_obj, u8 *opclass_chan_list,
+				 u8 *total_channels)
+{
+	u8 nl_len, num_channels = 0, i = 0;
+	int rem, iter;
+	struct nlattr *nl, *nl_attr;
+	struct nlattr *opclass_info[QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_MAX + 1];
+
+	/* Calculate the total number of opclass objects and corresponding number
+	 * of channels in each opclass object received in the AFC response
+	 */
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST]) {
+		nla_for_each_nested(nl, attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST],
+				    rem) {
+			num_channels = 0;
+			nl_len = nla_len(nl);
+
+			if (nl_len < AFC_RESP_OPCLASS_CHAN_EIRP_INFO_MIN_LEN) {
+				wpa_printf(MSG_INFO,
+					   "Insufficient len %d for Opclass/Chan EIRP info",
+					   nl_len);
+				return;
+			}
+
+			if (nla_parse(opclass_info,
+				      QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_MAX,
+				      nla_data(nl),
+				      nla_len(nl),
+				      NULL)) {
+				wpa_printf(MSG_INFO,
+					   "Invalid opclass_info attribute");
+				return;
+			}
+
+			nla_for_each_nested(nl_attr,
+				opclass_info[QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST],
+					iter) {
+				num_channels++;
+			}
+
+			opclass_chan_list[i] = num_channels;
+			i++;
+			(*num_opclass_obj)++;
+			*total_channels += num_channels;
+		}
+	}
+}
+
+static int copy_afc_freq_objs(struct nlattr *nl,
+			      struct afc_freq_obj *afc_freq_info,
+			      u8 *count)
+{
+	struct nlattr *freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_MAX + 1];
+	u16 start_freq = 0, end_freq = 0;
+
+	if (nla_parse(freq_info, QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_MAX,
+		      nla_data(nl), nla_len(nl), NULL)) {
+		wpa_printf(MSG_INFO,
+				"Invalid freq_range_info attribute");
+		return -EINVAL;
+	}
+
+	if (freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_START]) {
+		start_freq =
+		nla_get_u16(freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_START]);
+	}
+
+	if (freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_END]) {
+		end_freq =
+		nla_get_u16(freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_END]);
+	}
+
+	afc_freq_info[*count].low_freq = start_freq;
+	afc_freq_info[*count].high_freq = end_freq;
+
+	if (freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_PSD]) {
+		afc_freq_info[*count].max_psd =
+			nla_get_u32(freq_info[QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_PSD]);
+	}
+
+	wpa_printf(MSG_DEBUG,
+		   "i = %d start_freq = %d low_freq = %d max_psd = %d",
+		   *count, afc_freq_info[*count].low_freq,
+		   afc_freq_info[*count].high_freq,
+		   afc_freq_info[*count].max_psd);
+	(*count)++;
+
+	return 0;
+}
+
+static int copy_afc_chan_eirp_obj(struct nlattr *nl,
+				  struct chan_eirp_obj *afc_chan_eirp_info,
+				  u8 *count)
+{
+	struct nlattr *chan_info[QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_MAX + 1];
+
+	if (nla_parse(chan_info, QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_MAX,
+		      nla_data(nl), nla_len(nl), NULL)) {
+		wpa_printf(MSG_INFO, "Invalid afc_eirp_info attribute");
+		return -EINVAL;
+	}
+
+	if (chan_info[QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM]) {
+		afc_chan_eirp_info[*count].cfi =
+			nla_get_u8(chan_info[QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM]);
+	}
+
+	if (chan_info[QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP]) {
+		afc_chan_eirp_info[*count].eirp_power =
+			nla_get_u32(chan_info[QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP]);
+	}
+
+	wpa_printf(MSG_DEBUG, "count = %d chan_num = %d eirp = %d",
+		   *count, afc_chan_eirp_info[*count].cfi,
+		   afc_chan_eirp_info[*count].eirp_power);
+	(*count)++;
+
+	return 0;
+}
+
+static int copy_afc_chan_obj(struct nlattr *nl,
+			     struct afc_chan_obj *afc_chan_info,
+			     u8 *opclass_chan_list,
+			     u8 *count)
+{
+	struct nlattr *opclass_info[QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_MAX + 1];
+	struct chan_eirp_obj *afc_chan_eirp_info;
+	u8 j;
+	int iter;
+
+	if (nla_parse(opclass_info,
+				QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_MAX,
+				nla_data(nl),
+				nla_len(nl),
+				NULL)) {
+		os_free(afc_chan_info);
+		wpa_printf(MSG_INFO, "Invalid afc_chan_info attribute");
+		return -EINVAL;
+	}
+
+	if (opclass_info[QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS]) {
+		afc_chan_info[*count].global_opclass =
+			nla_get_u8(opclass_info[QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS]);
+	}
+
+	wpa_printf(MSG_DEBUG, "count = %d global_opclass = %d num_chans = %d",
+		   *count, afc_chan_info[*count].global_opclass, opclass_chan_list[*count]);
+	j = 0;
+	afc_chan_eirp_info = os_malloc(opclass_chan_list[*count] *
+				       sizeof(*afc_chan_eirp_info));
+	if (!afc_chan_eirp_info) {
+		wpa_printf(MSG_DEBUG, "afc_chan_eirp_info allocation failed");
+		return -ENOMEM;
+	}
+
+	nla_for_each_nested(nl,
+			    opclass_info[QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST],
+			    iter) {
+		if (copy_afc_chan_eirp_obj(nl, afc_chan_eirp_info, &j)) {
+			wpa_printf(MSG_DEBUG, "afc_chan_eirp_info copy failed");
+			os_free(afc_chan_eirp_info);
+			return -EINVAL;
+		}
+	}
+
+	afc_chan_info[*count].chan_eirp_info = afc_chan_eirp_info;
+	afc_chan_info[*count].num_chans = j;
+	(*count)++;
+
+	return 0;
+}
+
+#define NUM_6GHZ_OPCLASS 7
+static int
+qca_nl80211_afc_power_update_completed(struct wpa_driver_nl80211_data *drv,
+				       u8 *data, size_t len)
+{
+	union wpa_event_data event;
+	struct afc_sp_reg_info *afc_rsp;
+	struct afc_chan_obj *afc_chan_info = NULL;
+	struct afc_freq_obj *afc_freq_info = NULL;
+	struct nlattr *nl, *attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_MAX + 1];
+	u8 total_channels = 0, num_channels = 0, num_frange_obj = 0;
+	u8 opclass_chan_list[NUM_6GHZ_OPCLASS];
+	u8 event_type, num_opclass_obj = 0, i;
+	int rem;
+
+	if (!(data && len)) {
+		wpa_printf(MSG_ERROR, "Invalid data length data ptr: %pK ",
+			   data);
+		return -EINVAL;
+	}
+
+	os_memset(&event, 0, sizeof(event));
+	afc_rsp = &event.afc_rsp_info;
+
+	if (!afc_rsp) {
+		wpa_printf(MSG_ERROR,
+			   "Error allocating buffer for AFC response");
+		return -EINVAL;
+	}
+
+	if (nla_parse(attr, QCA_WLAN_VENDOR_ATTR_AFC_EVENT_MAX,
+		      (struct nlattr *)data, len, NULL)) {
+		wpa_printf(MSG_ERROR,
+			   "invalid set AFC config policy attribute\n");
+		return -EINVAL;
+	}
+
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE]) {
+		event_type =
+			nla_get_u32(attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE]);
+		if (event_type !=
+			QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE) {
+			wpa_printf(MSG_ERROR, "Invalid AFC event type %d\n",
+				   event_type);
+			return -EINVAL;
+		}
+	}
+
+	compute_num_freq_obj(attr, &num_frange_obj);
+	compute_num_chan_obj(attr, &num_opclass_obj, opclass_chan_list,
+			     &total_channels);
+
+	if (!num_frange_obj) {
+		wpa_printf(MSG_ERROR, "Number of freq objects is zero");
+		return -EINVAL;
+	}
+
+	if (!num_opclass_obj) {
+		wpa_printf(MSG_ERROR, "Number of chan objects is zero");
+		return -EINVAL;
+	}
+
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_REQ_ID]) {
+		afc_rsp->resp_id =
+			nla_get_u32(attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_REQ_ID]);
+	}
+
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_DATE]) {
+		afc_rsp->avail_exp_time_d =
+		nla_get_u32(attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_DATE]);
+	}
+
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_TIME]) {
+		afc_rsp->avail_exp_time_t =
+			nla_get_u32(attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_TIME]);
+	}
+
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_SERVER_RESP_CODE]) {
+		afc_rsp->serv_resp_code =
+			nla_get_u32(attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_SERVER_RESP_CODE]);
+	}
+
+	wpa_printf(MSG_DEBUG, "event.afc_rsp_info.resp_id = %u",
+		   event.afc_rsp_info.resp_id);
+	/* Update the number of frequency range objects and opclass objects
+	 * to the AFC response structure.
+	 */
+	afc_rsp->num_freq_objs = num_frange_obj;
+	afc_rsp->num_chan_objs = num_opclass_obj;
+
+	i = 0;
+	afc_freq_info = os_malloc(num_frange_obj *
+				  sizeof(*afc_freq_info));
+	if (!afc_freq_info) {
+		wpa_printf(MSG_DEBUG, "afc_freq_info allocation failed");
+		return -ENOMEM;
+	}
+
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST]) {
+		nla_for_each_nested(nl,
+				    attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST],
+				    rem) {
+			if (i >= num_frange_obj || copy_afc_freq_objs(nl, afc_freq_info, &i)) {
+				wpa_printf(MSG_DEBUG, "afc_freq_info copy failed");
+				os_free(afc_freq_info);
+				return -EINVAL;
+			}
+		}
+
+		afc_rsp->afc_freq_info = afc_freq_info;
+	}
+
+	/* Start parsing and updating the opclass list and corresponding channel
+	 * and EIRP power information.
+	 */
+	i = 0;
+	afc_chan_info = os_malloc(num_opclass_obj * sizeof(*afc_chan_info));
+	if (!afc_chan_info) {
+		wpa_printf(MSG_DEBUG, "afc_chan_info allocation failed");
+		os_free(afc_freq_info);
+		return -ENOMEM;
+	}
+
+	if (attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST]) {
+		nla_for_each_nested(nl,
+				    attr[QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST],
+				    rem) {
+			if (copy_afc_chan_obj(nl, afc_chan_info,
+					      opclass_chan_list, &i)) {
+				wpa_printf(MSG_DEBUG, "afc_chan_info copy failed");
+				os_free(afc_freq_info);
+				os_free(afc_chan_info);
+				return -EINVAL;
+			}
+		}
+
+		afc_rsp->afc_chan_info = afc_chan_info;
+	}
+
+	wpa_supplicant_event(drv->ctx, EVENT_AFC_POWER_UPDATE_COMPLETE_NOTIFY,
+			     &event);
+	os_free(afc_freq_info);
+	os_free(afc_chan_info);
+
+	return 0;
+}
+
 static void nl80211_vendor_event_qca(struct wpa_driver_nl80211_data *drv,
 				     u32 subcmd, u8 *data, size_t len)
 {
@@ -3562,6 +3924,9 @@ static void nl80211_vendor_event_qca(str
 	case QCA_NL80211_VENDOR_SUBCMD_POWER_MODE_CHANGE_COMPLETED:
 		qca_nl80211_6ghz_pwr_mode_change_completed(drv, data, len);
 		break;
+	case QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT:
+		qca_nl80211_afc_power_update_completed(drv, data, len);
+		break;
 	default:
 		wpa_printf(MSG_DEBUG,
 			   "nl80211: Ignore unsupported QCA vendor event %u",
