From 0ebf1b3d97c138a9cbb85da643b5de1d5db86ef4 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Mon, 10 Jun 2024 22:37:48 +0530
Subject: [PATCH] hostapd: Add AFC power compliant TPE for Standard power AP

Advertise the Transmit Power Envelope(TPE) IE with AFC payload compliant
power for Standard Power AP.

If the AP type is SP, then advertise an additional EIRP TPE followed
by a PSD TPE, to advertise the Out of bound emission (OOBE) compliant
power to the AP's clients.

Patch dependency: n00-001-hostapd-add-support-for-6GHz-operation.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 src/ap/beacon.c                |  21 ++
 src/ap/ieee802_11.c            | 506 ++++++++++++++++++++++++++++++++-
 src/ap/ieee802_11.h            |   2 +
 src/common/ieee802_11_common.c |  86 ++++++
 src/common/ieee802_11_common.h |   2 +
 src/common/ieee802_11_defs.h   |  21 ++
 6 files changed, 629 insertions(+), 9 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -708,7 +708,8 @@ static size_t he_elem_len(struct hostapd
 		 * client EIRP */
 		if (hapd->iconf->reg_def_cli_eirp != -1 &&
 		    he_reg_is_sp(hapd->iconf->he_6ghz_reg_pwr_type))
-			len += 4;
+			len += 3 + MAX_TPE_EIRP_NUM_POWER_SUPPORTED +
+			       1 + MAX_EIRP_TPE_POWER_EXT_COUNT;
 	}
 #endif /* CONFIG_IEEE80211AX */
 
@@ -2175,6 +2176,11 @@ static u8 * hostapd_gen_fils_discovery(s
                 if (hapd->iconf->he_6ghz_reg_pwr_type == HE_REG_INFO_6GHZ_AP_TYPE_INDOOR)
                         total_len += 3 + MAX_PSD_TPE_POWER_COUNT +
                                      1 + MAX_PSD_TPE_EXT_POWER_COUNT;
+		if (hapd->iconf->he_6ghz_reg_pwr_type == HE_REG_INFO_6GHZ_AP_TYPE_SP) {
+			total_len += 3 + MAX_TPE_EIRP_NUM_POWER_SUPPORTED +
+				     1 + MAX_EIRP_TPE_POWER_EXT_COUNT;
+		}
+
         }
 #endif /* CONFIG_IEEE80211AX */
 
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7603,6 +7603,14 @@ void ieee802_11_rx_from_unknown(struct h
 #define REG_APL1_PSD_MAX_TXPOWER_DEFAULT_SUBORDINATE_CLIENT_LPI         2      /* dBm/MHz */
 #define REG_APL1_PSD_MAX_TXPOWER_DEFAULT_SUBORDINATE_CLIENT_VLP         1      /* dBm/MHz */
 
+#define CONV_20MHZ_EIRP_TO_PSD_IN_DBM      13
+#define SP_AP_AND_CLIENT_POWER_DIFF_IN_SCALE 600
+#define TPE_NUM_POWER_SUPP_IN_11BE         5
+#define TPE_NUM_EIRP_POWER_EXT_SUPPORTED   1
+#define MAX_NUM_20_MHZ_IN_CURR_BW	   16
+#define EIRP_PWR_SCALE                     100
+#define PSD_SCALE                          100
+
 #ifndef REG_DOM_SUPPORT_TX_POWER
 static u8 hostapd_get_6g_tx_power(struct hostapd_data *hapd, u8 ap_type, u8 tx_pwr_cat)
 {
@@ -7690,7 +7698,7 @@ static u8 *hostapd_add_tpe_info(u8 *eid,
 					   tx_pwr_ext_count);
 				return eid;
 			}
-			*eid++ = *tx_pwr_ext_array;
+			*eid++ = tx_pwr_ext_array[0];
 			*length += tx_pwr_ext_count;
 		}
 	} else if (tx_pwr_intrpn == LOCAL_EIRP_PSD || tx_pwr_intrpn == REGULATORY_CLIENT_EIRP_PSD) {
@@ -7712,6 +7720,45 @@ static u8 *hostapd_add_tpe_info(u8 *eid,
 	return eid;
 }
 
+static bool
+hostapd_is_freq_present_in_freq_obj(struct afc_freq_obj *afc_freq_info,
+				    u16 chan_freq)
+{
+	return (chan_freq >= afc_freq_info->low_freq &&
+		chan_freq < afc_freq_info->high_freq);
+}
+
+static s8 hostapd_get_afc_psd(struct hostapd_iface *iface, u8 ap_pwr_type,
+			      u16 chan_freq)
+{
+	u8 num_freq_objs, i;
+	struct afc_freq_obj *afc_freq_info;
+	s8 afc_psd = 0;
+
+	if (!iface->is_afc_power_event_received ||
+	     iface->conf->he_6ghz_reg_pwr_type != HE_REG_INFO_6GHZ_AP_TYPE_SP)
+		return 0;
+
+	if (!iface->afc_rsp_info)
+		return 0;
+
+	num_freq_objs = iface->afc_rsp_info->num_freq_objs;
+
+	if (!iface->afc_rsp_info->afc_freq_info)
+		return 0;
+
+	afc_freq_info = iface->afc_rsp_info->afc_freq_info;
+	for (i = 0; i < num_freq_objs; i++) {
+		if (hostapd_is_freq_present_in_freq_obj(&afc_freq_info[i],
+							chan_freq)) {
+			afc_psd = afc_freq_info[i].max_psd / PSD_SCALE;
+			break;
+		}
+	}
+
+	return afc_psd;
+}
+
 static int get_chan_list(struct hostapd_data *hapd, int *non_11be_start_idx,
 			 int *chan_start_idx, int *non_11be_chan_count,
 			 int *total_chan_count, struct ieee_chan_data chan_data)
@@ -7820,18 +7867,520 @@ static u8 num_psd_values_to_psd_count(in
 	}
 }
 
+static int set_ieee_order_chan_list(struct hostapd_hw_modes *mode,
+				       struct ieee_chan_data *chan_data)
+{
+	int ieee_6g_chan[60] = {2,
+				1, 5, 9, 13, 17, 21, 25, 29,
+				33, 37, 41, 45, 49, 53, 57, 61,
+				65, 69, 73, 77, 81, 85, 89, 93,
+				97, 101, 105, 109, 113, 117, 121, 125,
+				129, 133, 137, 141, 145, 149, 153, 157,
+				161, 165, 169, 173, 177, 181, 185, 189,
+				193, 197, 201, 205, 209, 213, 217, 221,
+				225, 229, 233};
+	struct hostapd_channel_data *channels =  NULL, tmp_chan;
+	int i, j;
+	int chan_data_size = mode->num_channels * sizeof(struct hostapd_channel_data);
+
+	if (mode->num_channels == 0) {
+		wpa_printf(MSG_ERROR, "Invalid num channels or chan data");
+		return -1;
+	}
+
+	channels = os_malloc(chan_data_size);
+	if (channels ==  NULL) {
+		wpa_printf(MSG_ERROR, "Failed to alloc memory");
+		return -1;
+	}
+
+	os_memcpy(channels, mode->channels, chan_data_size);
+
+	for (i = 0; i < mode->num_channels && i < 60; i++) {
+		if (ieee_6g_chan[i] != channels[i].chan) {
+			for (j = 0; j < mode->num_channels; j++) {
+				if (ieee_6g_chan[i] == channels[j].chan) {
+					os_memcpy(&tmp_chan, &channels[j],
+						  sizeof(struct hostapd_channel_data));
+					os_memcpy(&channels[j], &channels[i],
+						  sizeof(struct hostapd_channel_data));
+					os_memcpy(&channels[i], &tmp_chan,
+						  sizeof(struct hostapd_channel_data));
+				}
+			}
+		}
+	}
+	chan_data->channels = channels;
+	chan_data->num_channels = mode->num_channels;
+
+	return 0;
+}
+
+static void free_ieee_ordered_chan_list(struct ieee_chan_data *chan_data)
+{
+	os_free(chan_data->channels);
+}
+
+static void hapd_psd_2_eirp(s8 psd, u16 ch_bw, s8 *eirp)
+{
+	s16 ten_log10_bw;
+	u8 i;
+	u8 num_bws;
+
+	/* EIRP = PSD + (10 * log10(CH_BW)) */
+	num_bws = ARRAY_SIZE(bw_to_10log10_map);
+	for (i = 0; i < num_bws; i++) {
+		if (ch_bw == bw_to_10log10_map[i].bw) {
+			ten_log10_bw = bw_to_10log10_map[i].ten_l_ten;
+			*eirp = psd + ten_log10_bw;
+			return;
+		}
+	}
+}
+
+/**
+ * reg_get_eirp_from_psd_and_reg_max_eirp() - Get the EIRP by the computing the
+ * minimum(max regulatory EIRP, EIRP computed from regulatory PSD)
+ * @mas_chan_list: Pointer to master_chan_list
+ * @freq: Frequency in mhz
+ * @bw: Bandwidth in mhz
+ * @reg_eirp_pwr: Pointer to reg_eirp_pwr
+ *
+ * Return: Void
+ */
+static void
+reg_get_eirp_from_psd_and_reg_max_eirp(s8 psd, u16 bw, s8 *reg_eirp_pwr)
+{
+	s8 eirp_from_psd = 0;
+
+	hapd_psd_2_eirp(psd, bw, &eirp_from_psd);
+	*reg_eirp_pwr = MIN(*reg_eirp_pwr, eirp_from_psd);
+}
+
+static s8 hostapd_get_reg_max_eirp(struct hostapd_iface *iface,
+				   u16 bw, u8 client_type,
+				   bool is_twice_pwr)
+{
+	struct hostapd_hw_modes *mode = iface->current_mode;
+	int non_11be_chan_count = 0, total_chan_count = 0;
+	int non_11be_start_idx = 0, chan_start_idx = 0;
+	struct hostapd_data *hapd = iface->bss[0];
+	s8 psd, reg_eirp_pwr = 0;
+	struct ieee_chan_data chan_data;
+
+	if (set_ieee_order_chan_list(mode, &chan_data)) {
+		wpa_printf(MSG_ERROR, "Unable to get chan_data");
+		return 0;
+	}
+
+	if (get_chan_list(hapd, &non_11be_start_idx, &chan_start_idx,
+			  &non_11be_chan_count, &total_chan_count, chan_data)) {
+		wpa_printf(MSG_ERROR, "Unable to get chan list");
+		goto free;
+	}
+
+	psd = chan_data.channels[non_11be_start_idx].psd_values[client_type];
+	reg_eirp_pwr =
+		chan_data.channels[non_11be_start_idx].eirp_values[client_type];
+	reg_get_eirp_from_psd_and_reg_max_eirp(psd, bw, &reg_eirp_pwr);
+
+free:
+	free_ieee_ordered_chan_list(&chan_data);
+
+	if (is_twice_pwr)
+		return reg_eirp_pwr * 2;
+
+	return reg_eirp_pwr;
+}
+
+/**
+ * hostapd_find_eirp_in_afc_eirp_obj() - Get eirp power from the AFC eirp object
+ * based on the channel center frequency and operating class.
+ * @eirp_obj: Pointer to eirp_obj
+ * @freq: Frequency in MHz
+ * @cen320: 320 MHz band center frequency
+ * @op_class: Operating class
+ *
+ * Return: EIRP power
+ */
+static s16 hostapd_find_eirp_in_afc_eirp_obj(struct chan_eirp_obj *eirp_obj,
+					     u16 freq,
+					     u8 cen320,
+					     u8 op_class)
+{
+	u8 k, subchannels[MAX_NUM_20_MHZ_IN_CURR_BW], nchans;
+
+	if (is_320_opclass(op_class)) {
+		u16 cfi_freq = ieee80211_chan_to_freq(NULL, op_class,
+						      eirp_obj->cfi);
+		u16 input_cfi_freq = ieee80211_chan_to_freq(NULL, op_class,
+							    cen320);
+
+		if (cfi_freq == input_cfi_freq)
+			return eirp_obj->eirp_power;
+
+		return 0;
+	}
+
+	nchans = get_subchannels_for_opclass(eirp_obj->cfi, op_class,
+					     subchannels);
+
+	for (k = 0; k < nchans; k++)
+		if (ieee80211_chan_to_freq(NULL, op_class, subchannels[k]) ==
+					   freq)
+			return eirp_obj->eirp_power;
+
+	return 0;
+}
+
+/**
+ * hostapd_find_eirp_in_afc_chan_obj() - Get eirp power from the AFC channel
+ * object based on the channel center frequency and operating class
+ * @chan_obj: Pointer to chan_obj
+ * @freq: Frequency in MHz
+ * @cen320: 320 MHz band center frequency index
+ * @op_class: Operating class
+ *
+ * Return: EIRP power
+ */
+static s16 hostapd_find_eirp_in_afc_chan_obj(struct afc_chan_obj *chan_obj,
+					     u16 freq,
+					     u8 cen320,
+					     u8 op_class)
+{
+	u8 j;
+
+	if (chan_obj->global_opclass != op_class)
+		return 0;
+
+	for (j = 0; j < chan_obj->num_chans; j++) {
+		s16 afc_eirp;
+		struct chan_eirp_obj *eirp_obj = &chan_obj->chan_eirp_info[j];
+
+		afc_eirp = hostapd_find_eirp_in_afc_eirp_obj(eirp_obj,
+							     freq, cen320,
+							     op_class);
+
+		if (afc_eirp)
+			return afc_eirp;
+	}
+
+	return 0;
+}
+
+/**
+ * hostapd_get_sp_eirp() - For the given power mode, using the bandwidth,
+ * find the  corresponding EIRP values from the afc info. The minimum of found
+ * EIRP and regulatory max EIRP is returned
+ * @iface: pointer to iface
+ * @freq: Frequency in MHz
+ * @cen320: 320 MHz band center frequency index
+ * @bw: Bandwidth in MHz
+ * @client_type: Client power type
+ *
+ * Return: EIRP
+ */
+static s8 hostapd_get_sp_eirp(struct hostapd_iface *iface,
+			      u16 freq,
+			      u8 cen320,
+			      u16 bw,
+			      u8 client_type)
+{
+	s16 afc_eirp_pwr = 0, min_eirp_pwr = 0, reg_sp_eirp_pwr = 0;
+	u8 i, op_class = 0, chan_num = 0;
+	struct afc_sp_reg_info *afc_info;
+
+	reg_sp_eirp_pwr = hostapd_get_reg_max_eirp(iface, bw, client_type, false);
+	if (!reg_sp_eirp_pwr) {
+		wpa_printf(MSG_ERROR, "Unable to get regulatory EIRP for SP");
+		return 0;
+	}
+
+	afc_info = iface->afc_rsp_info;
+	if (!afc_info) {
+		wpa_printf(MSG_ERROR, "afc info is NULL");
+		return 0;
+	}
+
+	switch (bw) {
+	case 20:
+		if (freq == 5935)
+			op_class = 136;
+		else
+			op_class = 131;
+		break;
+	case 40:
+		op_class = 132;
+		break;
+	case 80:
+		op_class = 133;
+		break;
+	case 160:
+		op_class = 134;
+		break;
+#ifdef CONFIG_IEEE80211BE
+	case 320:
+		op_class = 137;
+		break;
+#endif
+	default:
+		wpa_printf(MSG_ERROR, "Invalid channel width");
+		return 0;
+	}
+
+	for (i = 0; i < afc_info->num_chan_objs; i++) {
+		struct afc_chan_obj *chan_obj = &afc_info->afc_chan_info[i];
+
+		afc_eirp_pwr = hostapd_find_eirp_in_afc_chan_obj(chan_obj,
+								 freq,
+								 cen320,
+								 op_class);
+		if (afc_eirp_pwr)
+			break;
+	}
+
+	if (afc_eirp_pwr) {
+		reg_sp_eirp_pwr *= EIRP_PWR_SCALE;
+		min_eirp_pwr = MIN(afc_eirp_pwr - SP_AP_AND_CLIENT_POWER_DIFF_IN_SCALE,
+				   reg_sp_eirp_pwr);
+		return (min_eirp_pwr * 2) / EIRP_PWR_SCALE;
+	}
+
+	return 0;
+}
+
+/**
+ * hostapd_get_eirp_pwr() - Get eirp power based on the client power mode
+ * @iface: Pointer to iface
+ * @freq: Frequency in MHz
+ * @cen320: Band center frequency index
+ * @bw: Bandwidth in MHz
+ * @client_type: Client power type
+ *
+ * Return: EIRP power
+ */
+static s8 hostapd_get_eirp_pwr(struct hostapd_iface *iface,
+			       u16 freq, u8 cen320, u16 bw,
+			       u8 client_type)
+{
+	if (iface->conf->he_6ghz_reg_pwr_type == HE_REG_INFO_6GHZ_AP_TYPE_SP)
+		return hostapd_get_sp_eirp(iface, freq, cen320, bw,
+					   client_type);
+
+	return hostapd_get_reg_max_eirp(iface, bw, client_type, true);
+}
+
+static enum chan_width
+hostapd_get_chan_width_from_oper_chan_width(struct hostapd_config *iconf)
+{
+	enum chan_width ch_width = CHAN_WIDTH_UNKNOWN;
+
+	switch (hostapd_get_oper_chwidth(iconf)) {
+	case CONF_OPER_CHWIDTH_USE_HT:
+		if (iconf->secondary_channel == 0)
+			ch_width = CHAN_WIDTH_20;
+		else
+			ch_width = CHAN_WIDTH_40;
+		break;
+	case CONF_OPER_CHWIDTH_80MHZ:
+		ch_width = CHAN_WIDTH_80;
+		break;
+	case CONF_OPER_CHWIDTH_80P80MHZ:
+	case CONF_OPER_CHWIDTH_160MHZ:
+		ch_width = CHAN_WIDTH_160;
+		break;
+	case CONF_OPER_CHWIDTH_320MHZ:
+		ch_width = CHAN_WIDTH_320;
+		break;
+	default:
+		return CHAN_WIDTH_20;
+	}
+
+	return ch_width;
+}
+
+static void hostapd_get_eirp_arr_for_6ghz(struct hostapd_iface *iface,
+					  u16 freq,
+					  u8 cen320,
+					  enum chan_width chanwidth,
+					  u8 client_type,
+					  u8 *max_eirp_arr)
+{
+	u16 bw, max_bw = channel_width_to_int(chanwidth);
+	u8 i;
+
+	for (i = 0, bw = 20; bw <= max_bw; i++, bw *= 2)
+		max_eirp_arr[i] = hostapd_get_eirp_pwr(iface, freq, cen320, bw,
+						       client_type);
+}
+
+static u8 hostapd_get_num_pwr_levels(struct hostapd_config *iconf)
+{
+	u8 num_eirp_pwr_levels;
+
+	switch (hostapd_get_oper_chwidth(iconf)) {
+	case CONF_OPER_CHWIDTH_USE_HT:
+		if (iconf->secondary_channel == 0)
+			num_eirp_pwr_levels = 1;
+		else
+			num_eirp_pwr_levels = 2;
+
+		break;
+	case CONF_OPER_CHWIDTH_80MHZ:
+		num_eirp_pwr_levels = 3;
+		break;
+	case CONF_OPER_CHWIDTH_80P80MHZ:
+	case CONF_OPER_CHWIDTH_160MHZ:
+		num_eirp_pwr_levels = 4;
+		break;
+#ifdef CONFIG_IEEE80211BE
+	case CONF_OPER_CHWIDTH_320MHZ:
+		num_eirp_pwr_levels = 5;
+		break;
+#endif
+	default:
+		return 1;
+	}
+
+	return num_eirp_pwr_levels;
+}
+
+static int hostapd_assign_tx_pwr_count(struct hostapd_config *iconf,
+				       u8 *tx_pwr_count)
+{
+	switch (hostapd_get_oper_chwidth(iconf)) {
+	case CONF_OPER_CHWIDTH_USE_HT:
+		if (iconf->secondary_channel == 0) {
+			/* Max Transmit Power count = 0 (20 MHz) */
+			*tx_pwr_count = 0;
+		} else {
+			/* Max Transmit Power count = 1 (20, 40 MHz) */
+			*tx_pwr_count = 1;
+		}
+		break;
+	case CONF_OPER_CHWIDTH_80MHZ:
+		/* Max Transmit Power count = 2 (20, 40, and 80 MHz) */
+		*tx_pwr_count = 2;
+		break;
+	case CONF_OPER_CHWIDTH_80P80MHZ:
+	case CONF_OPER_CHWIDTH_160MHZ:
+#ifdef CONFIG_IEEE80211BE
+	case CONF_OPER_CHWIDTH_320MHZ:
+#endif
+		/* Max Transmit Power count = 3 (20, 40, 80, 160/80+80 MHz) */
+		*tx_pwr_count = 3;
+		break;
+	default:
+		*tx_pwr_count = 0;
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+#ifdef CONFIG_IEEE80211BE
+static void hostapd_fill_eirp_for_ext_tpe(struct hostapd_config *iconf,
+					  u8 *tx_pwr_ext_array,
+					  u8 *tx_pwr_array,
+					  u8 *tx_pwr_ext_count,
+					  u8 num_pwr_levels)
+{
+	if  (hostapd_get_oper_chwidth(iconf) == CONF_OPER_CHWIDTH_320MHZ)
+		*tx_pwr_ext_count = 1;
+
+	if (*tx_pwr_ext_count)
+		tx_pwr_ext_array[0] = tx_pwr_array[num_pwr_levels - 1];
+}
+#else
+static void hostapd_fill_eirp_for_ext_tpe(struct hostapd_config *iconf,
+					  u8 *tx_pwr_ext_array,
+					  u8 *tx_pwr_array,
+					  u8 *tx_pwr_ext_count,
+					  u8 num_pwr_levels)
+{
+}
+#endif
+
+static u8 *hostapd_add_eirp_tpe(struct hostapd_data *hapd, u8 client_type,
+				u8 *eid, u8 tx_pwr_cat,
+				enum max_tx_pwr_interpretation tx_pwr_intrpn)
+{
+	struct hostapd_iface *iface = hapd->iface;
+	struct hostapd_config *iconf = iface->conf;
+	int start_idx = 0, n_chans = 0, n_chans_ext = 0;
+	u8 tx_pwr_ext_array[TPE_NUM_EIRP_POWER_EXT_SUPPORTED] = {0};
+	u8 cen320, tx_pwr_count = 0, tx_pwr_ext_count = 0, num_pwr_levels = 0;
+	enum chan_width ch_width;
+	u8 tx_pwr_array[TPE_NUM_POWER_SUPP_IN_11BE] = {0};
+	u16 freq;
+
+#ifdef REG_DOM_SUPPORT_TX_POWER
+	if (hostapd_assign_tx_pwr_count(iconf, &tx_pwr_count)) {
+		wpa_printf(MSG_DEBUG, "Error in fetching tx_pwr_count");
+		return eid;
+	}
+
+	ch_width =
+		hostapd_get_chan_width_from_oper_chan_width(iconf);
+	num_pwr_levels = hostapd_get_num_pwr_levels(iconf);
+	freq = ieee80211_chan_to_freq(NULL, iconf->op_class, iconf->channel);
+	cen320 = hostapd_get_oper_centr_freq_seg0_idx(iconf);
+	hostapd_get_eirp_arr_for_6ghz(iface,
+				      freq,
+				      cen320,
+				      ch_width,
+				      client_type,
+				      tx_pwr_array);
+	hostapd_fill_eirp_for_ext_tpe(iconf, tx_pwr_ext_array, tx_pwr_array,
+				      &tx_pwr_ext_count, num_pwr_levels);
+#else
+	tx_pwr_array[0] = (hostapd_get_6g_tx_power(hapd,
+						   iconf->he_6ghz_reg_pwr_type,
+						   REG_DEFAULT_CLIENT) * 2);
+#endif /* REG_DOM_SUPPORT_TX_POWER */
+
+	return hostapd_add_tpe_info(eid, tx_pwr_intrpn, tx_pwr_count,
+				    tx_pwr_array, tx_pwr_ext_count,
+				    tx_pwr_ext_array, tx_pwr_cat);
+}
+
+static s8 get_psd_for_chan_idx(struct hostapd_iface *iface,
+			       int non_11be_start_idx,
+			       struct ieee_chan_data chan_data,
+			       u8 client_mode)
+{
+	u8 ap_pwr_type = iface->conf->he_6ghz_reg_pwr_type;
+	s8 reg_psd, chan_psd;
+	s8 eirp_for_20mhz;
+	u16 chan_freq;
+	u8 cen320;
+
+	reg_psd = chan_data.channels[non_11be_start_idx].psd_values[client_mode];
+	if (ap_pwr_type != HE_REG_INFO_6GHZ_AP_TYPE_SP)
+		return reg_psd;
+
+	cen320 = hostapd_get_oper_centr_freq_seg0_idx(iface->conf);
+	chan_freq = chan_data.channels[non_11be_start_idx].freq;
+	eirp_for_20mhz = hostapd_get_eirp_pwr(iface, chan_freq, cen320, 20,
+					      client_mode);
+	chan_psd = (eirp_for_20mhz - (CONV_20MHZ_EIRP_TO_PSD_IN_DBM * 2)) / 2;
+
+	return chan_psd;
+}
+
 static int get_psd_values(struct hostapd_data *hapd, int non_11be_start_idx,
 			  int chan_start_idx, int non_11be_chan_count,
 			  int total_chan_count, u8 *tx_pwr_count,
 			  s8 *tx_pwr_array, u8 *tx_pwr_ext_count,
-			  s8 *tx_pwr_ext_array, int pwr_mode, struct ieee_chan_data chan_data)
+			  s8 *tx_pwr_ext_array, u8 client_mode, struct ieee_chan_data chan_data)
 {
 	struct hostapd_iface *iface = hapd->iface;
 	struct hostapd_hw_modes *mode = iface->current_mode;
 	u16 punct_bitmap = iface->conf->punct_bitmap;
 	u16 non_be_chan_index_map = 0;
 	int is_different_psd = 0, non11be_chan_pos = non_11be_start_idx - chan_start_idx;
-	s8 psd_pwr;
+	u8 ap_pwr_type = iface->conf->he_6ghz_reg_pwr_type;
+	s8 start_chan_psd = 0, chan_psd = 0;
 	int i = 0, j = 0;
 
 	if (!tx_pwr_array || ((total_chan_count - non_11be_chan_count) && !tx_pwr_ext_array))
@@ -7843,7 +8392,8 @@ static int get_psd_values(struct hostapd
 		return -1;
 	}
 
-	psd_pwr = chan_data.channels[non_11be_start_idx].psd_values[pwr_mode];
+	start_chan_psd = get_psd_for_chan_idx(iface, non_11be_start_idx, chan_data, client_mode);
+
 	for (i = non_11be_start_idx; i < non_11be_start_idx + non_11be_chan_count;
 	     i++, non11be_chan_pos++) {
 		if (i >= chan_data.num_channels) {
@@ -7851,9 +8401,10 @@ static int get_psd_values(struct hostapd
 			return -1;
 		}
 		non_be_chan_index_map |= BIT(non11be_chan_pos);
-		*tx_pwr_array = chan_data.channels[i].psd_values[pwr_mode] * 2;
+		chan_psd = get_psd_for_chan_idx(iface, i, chan_data, client_mode);
+		*tx_pwr_array = chan_psd * 2;
 		tx_pwr_array++;
-		if (!is_different_psd && (psd_pwr != chan_data.channels[i].psd_values[pwr_mode]))
+		if (!is_different_psd && (start_chan_psd != chan_psd))
 			is_different_psd = 1;
 	}
 
@@ -7885,7 +8436,8 @@ static int get_psd_values(struct hostapd
 			 */
 			*tx_pwr_ext_array = RNR_20_MHZ_PSD_MAX_TXPOWER;
 		} else {
-			*tx_pwr_ext_array = chan_data.channels[i].psd_values[pwr_mode] * 2;
+			chan_psd = get_psd_for_chan_idx(iface, i, chan_data, client_mode);
+			*tx_pwr_ext_array = chan_psd * 2;;
 		}
 		tx_pwr_ext_array++;
 		*tx_pwr_ext_count += 1;
@@ -7894,62 +8446,9 @@ static int get_psd_values(struct hostapd
 	return 0;
 }
 
-static int set_ieee_order_chan_list(struct hostapd_hw_modes *mode,
-				       struct ieee_chan_data *chan_data)
-{
-	int ieee_6g_chan[60] = {2,
-				1, 5, 9, 13, 17, 21, 25, 29,
-				33, 37, 41, 45, 49, 53, 57, 61,
-				65, 69, 73, 77, 81, 85, 89, 93,
-				97, 101, 105, 109, 113, 117, 121, 125,
-				129, 133, 137, 141, 145, 149, 153, 157,
-				161, 165, 169, 173, 177, 181, 185, 189,
-				193, 197, 201, 205, 209, 213, 217, 221,
-				225, 229, 233};
-	struct hostapd_channel_data *channels =  NULL, tmp_chan;
-	int i, j;
-	int chan_data_size = mode->num_channels * sizeof(struct hostapd_channel_data);
-
-	if (mode->num_channels == 0) {
-		wpa_printf(MSG_ERROR, "Invalid num channels or chan data");
-		return -1;
-	}
-
-	channels = os_malloc(chan_data_size);
-	if (channels ==  NULL) {
-		wpa_printf(MSG_ERROR, "Failed to alloc memory");
-		return -1;
-	}
-
-	os_memcpy(channels, mode->channels, chan_data_size);
-
-	for (i = 0; i < mode->num_channels && i < 60; i++) {
-		if (ieee_6g_chan[i] != channels[i].chan) {
-			for (j = 0; j < mode->num_channels; j++) {
-				if (ieee_6g_chan[i] == channels[j].chan) {
-					os_memcpy(&tmp_chan, &channels[j],
-						  sizeof(struct hostapd_channel_data));
-					os_memcpy(&channels[j], &channels[i],
-						  sizeof(struct hostapd_channel_data));
-					os_memcpy(&channels[i], &tmp_chan,
-						  sizeof(struct hostapd_channel_data));
-				}
-			}
-		}
-	}
-	chan_data->channels = channels;
-	chan_data->num_channels = mode->num_channels;
-
-	return 0;
-}
-
-static void free_ieee_ordered_chan_list(struct ieee_chan_data *chan_data)
-{
-	os_free(chan_data->channels);
-}
-
-static u8 *hostapd_add_psd_tpe(struct hostapd_data *hapd, u8 pwr_mode, u8 *eid,
-			       u8 tx_pwr_cat, enum max_tx_pwr_interpretation tx_pwr_intrpn)
+static u8 *hostapd_add_psd_tpe(struct hostapd_data *hapd, u8 client_mode,
+			       u8 *eid, u8 tx_pwr_cat,
+			       enum max_tx_pwr_interpretation tx_pwr_intrpn)
 {
 	s8 tx_pwr_ext_array[MAX_PSD_TPE_EXT_POWER_COUNT] = {0};
 	int non_11be_chan_count = 0, total_chan_count = 0;
@@ -7971,7 +8470,7 @@ static u8 *hostapd_add_psd_tpe(struct ho
 	if (get_psd_values(hapd, non_11be_start_idx, chan_start_idx,
 			   non_11be_chan_count, total_chan_count, &tx_pwr_count,
 			   tx_pwr_array, &tx_pwr_ext_count, tx_pwr_ext_array,
-			   pwr_mode, chan_data)) {
+			   client_mode, chan_data)) {
 		wpa_printf(MSG_ERROR, "failed to get the PSD values");
 		goto free;
 	}
@@ -8030,10 +8529,10 @@ u8 *hostapd_eid_txpower_envelope(struct
 						  REGULATORY_CLIENT_EIRP_PSD);
 		}
 
-		if (iconf->reg_def_cli_eirp != -1 &&
-		    he_reg_is_sp(iconf->he_6ghz_reg_pwr_type))
-			eid = hostapd_add_psd_tpe(hapd, pwr_mode,
-				eid, REG_DEFAULT_CLIENT, REGULATORY_CLIENT_EIRP);
+		if (he_reg_is_sp(iconf->he_6ghz_reg_pwr_type))
+			eid = hostapd_add_eirp_tpe(hapd, pwr_mode, eid,
+						   REG_DEFAULT_CLIENT,
+						   REGULATORY_CLIENT_EIRP);
 
 		return eid;
 	}
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -3014,6 +3014,92 @@ bool is_6ghz_freq(int freq)
 	return true;
 }
 
+/**
+ * fill_subchan_centers() - Fill the subchannels for the given cfi.
+ * @nchans: Number of sub-channels
+ * @cfi: Center frequency index
+ * @subchannels: Array of subchannels to be filled
+ *
+ * eg: subchannels[0] = cfi - 6 : The second left hand channel is
+ *     4 MHz to the left of the previous channel.
+ *     subchannels[1] = cfi - 2 : The first left hand channel is 2 MHz
+ *     to the left of the CFI.
+ *     subchannels[2] = cfi + 2 : The first right hand channel is 2 MHz
+ *     to the right of the center (or CFI) as the distance between
+ *     two IEEE channels is 4 MHz.
+ *     subchannels[3] = cfi + 6 : The second right hand channel is 4 MHz to the
+ *     right the of previous channel
+ *
+ * Return: void
+ */
+static void
+fill_subchan_centers(u8 nchans, u8 cfi, u8 *subchannels)
+{
+#define HALF_IEEE_CH_SEP  2
+#define IEEE_20MHZ_CH_SEP 4
+	u8 last_idx = nchans - 1;
+	u8 offset = HALF_IEEE_CH_SEP;
+	u8 i;
+
+	if (nchans == 1) {
+		subchannels[0] = cfi;
+		return;
+	}
+
+	for (i = nchans / 2; i < nchans; i++) {
+		subchannels[i] = cfi + offset;
+		subchannels[last_idx - i] = cfi - offset;
+		offset += IEEE_20MHZ_CH_SEP;
+	}
+}
+
+struct opclass_nchans_pair {
+	u8 opclass;
+	u8 nchans;
+};
+
+static const struct opclass_nchans_pair opclass_nchans_map[] = {
+	{131, 1},
+	{136, 1},
+	{132, 2},
+	{133, 4},
+	{134, 8},
+#ifdef CONFIG_IEEE80211BE
+	{137, 16},
+#endif
+};
+
+static u8 get_nsubchanels_for_opclass(u8 opclass)
+{
+	u8 i, n_opclasses = ARRAY_SIZE(opclass_nchans_map);
+
+	for (i = 0; i < n_opclasses; i++)
+		if (opclass == opclass_nchans_map[i].opclass)
+			return opclass_nchans_map[i].nchans;
+
+	return 0;
+}
+
+u8 get_subchannels_for_opclass(u8 cfi,
+			       u8 opclass,
+			       u8 *subchannels)
+{
+	u8 nchans;
+
+	nchans = get_nsubchanels_for_opclass(opclass);
+	fill_subchan_centers(nchans, cfi, subchannels);
+
+	return nchans;
+}
+
+bool is_320_opclass(u8 op_class)
+{
+#ifdef CONFIG_IEEE80211BE
+	return (op_class == 137);
+#else
+	return false;
+#endif
+}
 
 bool is_6ghz_op_class(u8 op_class)
 {
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -340,6 +340,8 @@ bool is_6ghz_freq(int freq);
 bool is_6ghz_op_class(u8 op_class);
 bool is_6ghz_psc_frequency(int freq);
 int get_6ghz_sec_channel(int channel);
+bool is_320_opclass(u8 op_class);
+u8 get_subchannels_for_opclass(u8 cfi, u8 opclass, u8 *subchannels);
 
 bool is_same_band(int freq1, int freq2);
 #define IS_2P4GHZ(n) (n >= 2412 && n <= 2484)
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -2194,6 +2194,27 @@ enum reg_6g_client_type {
 #define MAX_PSD_TPE_EXT_POWER_COUNT		15
 #define MAX_TPE_EIRP_NUM_POWER_SUPPORTED	4
 
+/**
+ * struct bw_10log10_pair - The bandwidth and 10*log10(bandwidth) pair.
+ * ten_l_len = trunc(10*log10(bw)).  'trunc' is truncation function.
+ * @bw: The input bandwidth
+ * @ten_l_ten: Integer value of 10 times the Logarithm (to the base-10) of the
+ * input bandwidth(@bw).
+ */
+struct bw_10log10_pair {
+	u16 bw;
+	s16 ten_l_ten;
+};
+
+/* The array of bandwidth to trunc(10log10(bandwidth)) mapping */
+static const struct bw_10log10_pair bw_to_10log10_map[] = {
+	{ 20, 13}, /* 10* 1.30102 = 13.0102 */
+	{ 40, 16}, /* 10* 1.60205 = 16.0205 */
+	{ 80, 19}, /* 10* 1.90308 = 19.0308 */
+	{160, 22}, /* 10* 2.20411 = 22.0411 */
+	{320, 25}, /* 10* 2.50514 = 25.0514 */
+};
+
 #define RRM_CAPABILITIES_IE_LEN 5
 
 /* IEEE Std 802.11-2020, 9.6.6.4 - Link Measurement Request frame format */
