From 00346385f75cd9a51f6a1ddeefd3e524d0908504 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Tue, 13 Aug 2024 14:39:32 +0530
Subject: [PATCH] hostapd: wpa_auth reconfig state machine for assoc link_id

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 src/ap/drv_callbacks.c | 25 +++++++++++++++++++++++++
 src/ap/wpa_auth.c      | 16 ++++++++++++++++
 src/ap/wpa_auth.h      |  3 +++
 3 files changed, 44 insertions(+)

--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2691,6 +2691,28 @@ static void hostapd_iface_disable(struct
 
 
 #ifdef CONFIG_IEEE80211BE
+static int hostapd_sm_link_reconfigure(struct hostapd_data *hapd,
+				       struct sta_info *sta,
+				       void *ctx)
+{
+	struct hostapd_data *phapd = (struct hostapd_data *)ctx;
+
+	if (!sta || !sta->mld_info.mld_sta)
+		/* No action needed for legacy station */
+		return 0;
+
+	if (sta->mld_assoc_link_id == hapd->mld_link_id) {
+		set_for_each_partner_link_sta(hapd, sta, phapd->wpa_auth,
+					      wpa_auth_reconfig_wpa_auth_sm);
+
+		set_link_id_for_each_partner_link_sta(hapd, sta, phapd->mld_link_id);
+		sta->mld_assoc_link_id = phapd->mld_link_id;
+	}
+
+	return 0;
+}
+
+
 static void hostapd_update_link_removal_field(struct hostapd_data *hapd,
 					      struct link_removal_event *ev,
 					      enum wpa_event_type event)
@@ -2769,6 +2791,8 @@ static void hostapd_update_link_removal_
 			/* reconfigure GTK rekey primary auth */
 			wpa_auth_reconfig_primary_auth(hapd->wpa_auth, phapd->wpa_auth);
 
+			ap_for_each_sta(hapd, hostapd_sm_link_reconfigure, phapd);
+
 			hostapd_remove_bss(iface, i, true);
 
 			/* Refresh partner beacons */
--- a/src/ap/wpa_auth.c
+++ b/src/ap/wpa_auth.c
@@ -7544,3 +7544,19 @@ void wpa_auth_reconfig_primary_auth(stru
 			       wpa_rekey_gtk, wpa_pauth, NULL);
 #endif /* CONFIG_IEEE80211BE */
 }
+
+
+int wpa_auth_reconfig_wpa_auth_sm(struct hostapd_data *rhapd,
+				  struct sta_info *lsta,
+				  void *data)
+{
+#ifdef CONFIG_IEEE80211BE
+	struct wpa_authenticator *wpa_auth = (struct wpa_authenticator *)data;
+
+	if (lsta->wpa_sm) {
+		lsta->wpa_sm->wpa_auth = wpa_auth;
+		wpa_group_update_gtk(wpa_auth, wpa_auth->group);
+	}
+#endif /* CONFIG_IEEE80211BE */
+	return 0;
+}
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -686,6 +686,9 @@ void wpa_release_link_auth_ref(struct wp
 			       int release_link_id);
 void wpa_auth_reconfig_primary_auth(struct wpa_authenticator *wpa_auth,
 				    struct wpa_authenticator *wpa_pauth);
+int wpa_auth_reconfig_wpa_auth_sm(struct hostapd_data *rhapd,
+				  struct sta_info *lsta,
+				  void *data);
 #define for_each_sm_auth(sm, link_id) \
 	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++)	\
 		if (sm->mld_links[link_id].valid &&			\
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -922,6 +922,55 @@ struct sta_info * ap_sta_add(struct host
 }
 
 
+void set_link_id_for_each_partner_link_sta(struct hostapd_data *hapd,
+					   struct sta_info *psta,
+					   int link_id)
+{
+	struct sta_info *lsta;
+	struct hostapd_data *lhapd;
+
+	if (!psta->mld_info.mld_sta)
+		return;
+
+	for_each_mld_link(lhapd, hapd) {
+		if (lhapd == hapd)
+			continue;
+
+		lsta = ap_get_sta(lhapd, psta->addr);
+		if (lsta)
+			lsta->mld_assoc_link_id = link_id;
+	}
+}
+
+
+int set_for_each_partner_link_sta(struct hostapd_data *hapd,
+				  struct sta_info *psta,
+				  void *data,
+				  int (*cb)(struct hostapd_data *hapd,
+					    struct sta_info *sta,
+					    void *data))
+{
+	struct sta_info *lsta;
+	struct hostapd_data *lhapd;
+	int ret = 0;
+
+	if (!psta->mld_info.mld_sta)
+		return 0;
+
+	for_each_mld_link(lhapd, hapd) {
+		if (lhapd == hapd)
+			continue;
+
+		lsta = ap_get_sta(lhapd, psta->addr);
+		if (lsta)
+			ret = cb(lhapd, lsta, data);
+		if (ret)
+			return ret;
+	}
+	return ret;
+}
+
+
 static int ap_sta_remove(struct hostapd_data *hapd, struct sta_info *sta)
 {
 	ieee802_1x_notify_port_enabled(sta->eapol_sm, 0);
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -361,7 +361,30 @@ struct sta_info {
 /* Number of seconds to keep STA entry after it has been deauthenticated. */
 #define AP_MAX_INACTIVITY_AFTER_DEAUTH (1 * 5)
 
+#define DEFINE_PARTNER_STA_FUNC_CB(obj_name) \
+static inline int set_partner_sta_cb_##obj_name(struct hostapd_data *hapd, \
+						struct sta_info *sta, \
+						void *data) \
+{ \
+	sta->obj_name = data; \
+	return 0; \
+}
+
+#define SET_EACH_PARTNER_STA_OBJ(hapd, sta, objname, data) \
+set_for_each_partner_link_sta(hapd, sta, data, set_partner_sta_cb_##objname)
+
+DEFINE_PARTNER_STA_FUNC_CB(wpa_sm)
+int set_for_each_partner_link_sta(struct hostapd_data *hapd,
+				  struct sta_info *psta,
+				  void *data,
+				  int (*cb)(struct hostapd_data *hapd,
+					    struct sta_info *sta,
+					    void *data));
+
 void ap_sta_remove_link_sta(struct hostapd_data *hapd, struct sta_info *sta);
+void set_link_id_for_each_partner_link_sta(struct hostapd_data *hapd,
+					   struct sta_info *psta,
+					   int link_id);
 
 int ap_for_each_sta(struct hostapd_data *hapd,
 		    int (*cb)(struct hostapd_data *hapd, struct sta_info *sta,
