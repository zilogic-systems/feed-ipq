From 618674a703e0be380ea898f291b57911f8265e4d Mon Sep 17 00:00:00 2001
From: Amith A <quic_amitajit@quicinc.com>
Date: Fri, 19 Jul 2024 11:46:01 +0530
Subject: [PATCH] hostapd: Fix MCS NSS map in beacon for BW less than of equal
 to 80MHz

When an AP is operating in a bandwidth less than or equal to 80 MHz, it
still advertises support for 320MHz in 6 GHz in the EHT PHY Cap IE. When
a client device identifies this support, it expects the MCS & NSS map to
include maps of 320MHz and 160MHz in the EHT Cap IE. As the AP is
operating in a bandwidth less than or equal to 80MHz, it never includes
the MCS & NSS map of 160MHz. This results in an association failure at
the client.

To fix this issue, enable the 320MHz support in the EHT PHY Cap IE only
if the operating bandwidth is 320MHz.

Signed-off-by: Amith A <quic_amitajit@quicinc.com>
---
 src/ap/ieee802_11_eht.c | 23 ++++++++++++++---------
 1 file changed, 14 insertions(+), 9 deletions(-)

--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -46,7 +46,7 @@ static u16 ieee80211_eht_ppet_size(u16 p
 
 static u8 ieee80211_eht_mcs_set_size(enum hostapd_hw_mode mode, u8 opclass,
 				     int he_oper_chwidth, const u8 *he_phy_cap,
-				     const u8 *eht_phy_cap)
+				     const u8 *eht_phy_cap, u8 eht_oper_chwidth)
 {
 	u8 sz = EHT_PHYCAP_MCS_NSS_LEN_20MHZ_PLUS;
 	bool band24, band5, band6;
@@ -98,7 +98,7 @@ static u8 ieee80211_eht_mcs_set_size(enu
 	      HE_PHYCAP_CHANNEL_WIDTH_SET_80PLUS80MHZ_IN_5G)))
 	    sz += EHT_PHYCAP_MCS_NSS_LEN_20MHZ_PLUS;
 
-	if (band6 &&
+	if (band6 && eht_oper_chwidth == CONF_OPER_CHWIDTH_320MHZ &&
 	    (eht_phy_cap[EHT_PHYCAP_320MHZ_IN_6GHZ_SUPPORT_IDX] &
 	     EHT_PHYCAP_320MHZ_IN_6GHZ_SUPPORT_MASK)) {
 		sz += EHT_PHYCAP_MCS_NSS_LEN_20MHZ_PLUS;
@@ -126,7 +126,8 @@ size_t hostapd_eid_eht_capab_len(struct
 	len += ieee80211_eht_mcs_set_size(mode->mode, hapd->iconf->op_class,
 					  hapd->iconf->he_oper_chwidth,
 					  mode->he_capab[opmode].phy_cap,
-					  eht_cap->phy_cap);
+					  eht_cap->phy_cap,
+					  hapd->iconf->eht_oper_chwidth);
 	len += ieee80211_eht_ppet_size(WPA_GET_LE16(&eht_cap->ppet[0]),
 				       eht_cap->phy_cap);
 
@@ -160,7 +161,8 @@ u8 * hostapd_eid_eht_capab(struct hostap
 	cap->mac_cap = host_to_le16(eht_cap->mac_cap);
 	os_memcpy(cap->phy_cap, eht_cap->phy_cap, EHT_PHY_CAPAB_LEN);
 
-	if (!is_6ghz_op_class(hapd->iconf->op_class))
+	if (!is_6ghz_op_class(hapd->iconf->op_class) ||
+	    (hapd->iconf->eht_oper_chwidth != CONF_OPER_CHWIDTH_320MHZ))
 		cap->phy_cap[EHT_PHYCAP_320MHZ_IN_6GHZ_SUPPORT_IDX] &=
 			~EHT_PHYCAP_320MHZ_IN_6GHZ_SUPPORT_MASK;
 	if (!hapd->iface->conf->eht_phy_capab.su_beamformer)
@@ -193,7 +195,8 @@ u8 * hostapd_eid_eht_capab(struct hostap
 						 hapd->iconf->op_class,
 						 hapd->iconf->he_oper_chwidth,
 						 mode->he_capab[opmode].phy_cap,
-						 eht_cap->phy_cap);
+						 eht_cap->phy_cap,
+						 hapd->iconf->eht_oper_chwidth);
 	if (mcs_nss_len) {
 		os_memcpy(pos, eht_cap->mcs, mcs_nss_len);
 		pos += mcs_nss_len;
@@ -447,7 +450,8 @@ static bool check_valid_eht_mcs(struct h
 	if (ieee80211_eht_mcs_set_size(mode->mode, hapd->iconf->op_class,
 				       hapd->iconf->he_oper_chwidth,
 				       mode->he_capab[opmode].phy_cap,
-				       mode->eht_capab[opmode].phy_cap) ==
+				       mode->eht_capab[opmode].phy_cap,
+				       hapd->iconf->eht_oper_chwidth) ==
 	    EHT_PHYCAP_MCS_NSS_LEN_20MHZ_ONLY)
 		return check_valid_eht_mcs_nss(
 			hapd, ap_mcs, sta_mcs, 1,
@@ -472,7 +476,8 @@ static bool check_valid_eht_mcs(struct h
 
 static bool ieee80211_invalid_eht_cap_size(enum hostapd_hw_mode mode,
 					   u8 opclass, const u8 *he_cap,
-					   const u8 *eht_cap, size_t len)
+					   const u8 *eht_cap, size_t len,
+					   u8 eht_oper_chwidth)
 {
 	const struct ieee80211_he_capabilities *he_capab;
 	struct ieee80211_eht_capabilities *cap;
@@ -488,7 +493,7 @@ static bool ieee80211_invalid_eht_cap_si
 		return true;
 
 	cap_len += ieee80211_eht_mcs_set_size(mode, opclass, -1, he_phy_cap,
-					      cap->phy_cap);
+					      cap->phy_cap, eht_oper_chwidth);
 	if (len < cap_len)
 		return true;
 
@@ -513,7 +518,8 @@ u16 copy_sta_eht_capab(struct hostapd_da
 	    !eht_capab ||
 	    ieee80211_invalid_eht_cap_size(mode, hapd->iconf->op_class,
 					   he_capab, eht_capab,
-					   eht_capab_len) ||
+					   eht_capab_len,
+					   hapd->iconf->eht_oper_chwidth) ||
 	    !check_valid_eht_mcs(hapd, eht_capab, opmode)) {
 		sta->flags &= ~WLAN_STA_EHT;
 		os_free(sta->eht_capab);
