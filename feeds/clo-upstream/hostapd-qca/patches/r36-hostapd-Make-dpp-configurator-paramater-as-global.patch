From bbda2b2f3a2759420f46c80f05f47ce22e3707f0 Mon Sep 17 00:00:00 2001
From: Arunpandi Kannan <quic_arunpand@quicinc.com>
Date: Mon, 2 Sep 2024 09:19:58 +0530
Subject: [PATCH] hostapd: Make dpp configurator parameter as global config

In multi-BSS configuration, if any DPP presence announcement received from
STA, any BSS can respond to it. But as of now DPP configs are
interface specific. Due to that if any interface which does not have DPP
configs responds first, the DPP process will fail, since it don't have
the configs.

Make DPP configurator parameters as global configs so it can be visible
to all the interfaces in hostapd. The bootstrap params are currently
as part for dpp global structure. So the configs also should be part of
dpp global structure.

Patch-dependency: None
Tag: DPP

Signed-off-by: Arunpandi Kannan <quic_arunpand@quicinc.com>
---
 hostapd/ctrl_iface.c              |  5 +++--
 src/ap/dpp_hostapd.c              | 14 +++++++------
 src/ap/hostapd.h                  |  1 -
 src/common/dpp.c                  | 33 +++++++++++++++++++++++++++++++
 src/common/dpp.h                  |  4 +++-
 src/common/dpp_i.h                |  1 +
 wpa_supplicant/ctrl_iface.c       |  5 +++--
 wpa_supplicant/dpp_supplicant.c   | 10 ++++------
 wpa_supplicant/wpa_supplicant_i.h |  1 -
 9 files changed, 55 insertions(+), 19 deletions(-)

--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -1288,8 +1288,9 @@ static int hostapd_ctrl_iface_set(struct
 #endif /* CONFIG_MBO */
 #ifdef CONFIG_DPP
 	} else if (os_strcasecmp(cmd, "dpp_configurator_params") == 0) {
-		os_free(hapd->dpp_configurator_params);
-		hapd->dpp_configurator_params = os_strdup(value);
+		ret = dpp_global_configurations_remove(hapd->iface->interfaces->dpp);
+		if (!ret)
+			ret = dpp_global_configurations_add(hapd->iface->interfaces->dpp, value);
 #ifdef CONFIG_DPP2
 		dpp_controller_set_params(hapd->iface->interfaces->dpp, value);
 #endif /* CONFIG_DPP2 */
--- a/src/ap/dpp_hostapd.c
+++ b/src/ap/dpp_hostapd.c
@@ -1133,7 +1133,8 @@ static void hostapd_dpp_rx_auth_req(stru
 	}
 	hostapd_dpp_set_testing_options(hapd, hapd->dpp_auth);
 	if (dpp_set_configurator(hapd->dpp_auth,
-				 hapd->dpp_configurator_params) < 0) {
+				 dpp_get_global_configuration(
+					hapd->iface->interfaces->dpp)) < 0) {
 		dpp_auth_deinit(hapd->dpp_auth);
 		hapd->dpp_auth = NULL;
 		return;
@@ -1737,7 +1738,8 @@ hostapd_dpp_rx_presence_announcement(str
 		return;
 	hostapd_dpp_set_testing_options(hapd, auth);
 	if (dpp_set_configurator(auth,
-				 hapd->dpp_configurator_params) < 0) {
+				 dpp_get_global_configuration(
+					hapd->iface->interfaces->dpp)) < 0) {
 		dpp_auth_deinit(auth);
 		return;
 	}
@@ -1835,7 +1837,9 @@ hostapd_dpp_rx_reconfig_announcement(str
 	if (!auth)
 		return;
 	hostapd_dpp_set_testing_options(hapd, auth);
-	if (dpp_set_configurator(auth, hapd->dpp_configurator_params) < 0) {
+	if (dpp_set_configurator(auth,
+				 dpp_get_global_configuration(
+					hapd->iface->interfaces->dpp)) < 0) {
 		dpp_auth_deinit(auth);
 		return;
 	}
@@ -3554,8 +3558,6 @@ void hostapd_dpp_deinit(struct hostapd_d
 	hapd->dpp_auth = NULL;
 	hostapd_dpp_pkex_remove(hapd, "*");
 	hapd->dpp_pkex = NULL;
-	os_free(hapd->dpp_configurator_params);
-	hapd->dpp_configurator_params = NULL;
 	os_free(hapd->dpp_pkex_auth_cmd);
 	hapd->dpp_pkex_auth_cmd = NULL;
 }
@@ -3597,7 +3599,7 @@ int hostapd_dpp_controller_start(struct
 
 		config.qr_mutual = os_strstr(cmd, " qr=mutual") != NULL;
 	}
-	config.configurator_params = hapd->dpp_configurator_params;
+	config.configurator_params = dpp_get_global_configuration(hapd->iface->interfaces->dpp);
 	return dpp_controller_start(hapd->iface->interfaces->dpp, &config);
 }
 
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -504,7 +504,6 @@ struct hostapd_data {
 	char *dpp_pkex_identifier;
 	enum dpp_pkex_ver dpp_pkex_ver;
 	char *dpp_pkex_auth_cmd;
-	char *dpp_configurator_params;
 	struct os_reltime dpp_last_init;
 	struct os_reltime dpp_init_iter_start;
 	unsigned int dpp_init_max_tries;
--- a/src/common/dpp.c
+++ b/src/common/dpp.c
@@ -4591,6 +4591,38 @@ dpp_bootstrap_get_id(struct dpp_global *
 }
 
 
+int dpp_global_configurations_remove(struct dpp_global *dpp)
+{
+	if (!dpp)
+		return -1;
+
+	os_free(dpp->dpp_configurator_params);
+	dpp->dpp_configurator_params = NULL;
+
+	return 0;
+}
+
+
+int dpp_global_configurations_add(struct dpp_global *dpp, const char *value)
+{
+	if (!dpp)
+		return -1;
+
+	dpp->dpp_configurator_params = os_strdup(value);
+
+	return 0;
+}
+
+
+const char *dpp_get_global_configuration(struct dpp_global *dpp)
+{
+	if (!dpp)
+		return NULL;
+
+	return dpp->dpp_configurator_params;
+}
+
+
 int dpp_bootstrap_remove(struct dpp_global *dpp, const char *id)
 {
 	unsigned int id_val;
@@ -5108,6 +5140,7 @@ void dpp_global_clear(struct dpp_global
 	dpp_tcp_init_flush(dpp);
 	dpp_relay_flush_controllers(dpp);
 	dpp_controller_stop(dpp);
+	dpp_global_configurations_remove(dpp);
 #endif /* CONFIG_DPP2 */
 }
 
--- a/src/common/dpp.h
+++ b/src/common/dpp.h
@@ -829,7 +829,9 @@ struct dpp_global * dpp_global_init(stru
 void dpp_global_clear(struct dpp_global *dpp);
 void dpp_global_deinit(struct dpp_global *dpp);
 void dpp_notify_auth_success(struct dpp_authentication *auth, int initiator);
-
+int dpp_global_configurations_remove(struct dpp_global *dpp);
+int dpp_global_configurations_add(struct dpp_global *dpp, const char *value);
+const char *dpp_get_global_configuration(struct dpp_global *dpp);
 /* dpp_reconfig.c */
 
 struct wpabuf * dpp_build_reconfig_announcement(const u8 *csign_key,
--- a/src/common/dpp_i.h
+++ b/src/common/dpp_i.h
@@ -17,6 +17,7 @@ struct dpp_global {
 	void *msg_ctx;
 	struct dl_list bootstrap; /* struct dpp_bootstrap_info */
 	struct dl_list configurator; /* struct dpp_configurator */
+	char *dpp_configurator_params;
 #ifdef CONFIG_DPP2
 	struct dl_list controllers; /* struct dpp_relay_controller */
 	struct dpp_relay_controller *tmp_controller;
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -675,8 +675,9 @@ static int wpa_supplicant_ctrl_iface_set
 		wpa_s->no_keep_alive = !!atoi(value);
 #ifdef CONFIG_DPP
 	} else if (os_strcasecmp(cmd, "dpp_configurator_params") == 0) {
-		os_free(wpa_s->dpp_configurator_params);
-		wpa_s->dpp_configurator_params = os_strdup(value);
+		ret = dpp_global_configurations_remove(wpa_s->dpp);
+		if (!ret)
+			ret = dpp_global_configurations_add(wpa_s->dpp, value);
 #ifdef CONFIG_DPP2
 		dpp_controller_set_params(wpa_s->dpp, value);
 #endif /* CONFIG_DPP2 */
--- a/wpa_supplicant/dpp_supplicant.c
+++ b/wpa_supplicant/dpp_supplicant.c
@@ -1301,7 +1301,7 @@ static void wpas_dpp_rx_auth_req(struct
 	}
 	wpas_dpp_set_testing_options(wpa_s, wpa_s->dpp_auth);
 	if (dpp_set_configurator(wpa_s->dpp_auth,
-				 wpa_s->dpp_configurator_params) < 0) {
+				 dpp_get_global_configuration(wpa_s->dpp)) < 0) {
 		dpp_auth_deinit(wpa_s->dpp_auth);
 		wpa_s->dpp_auth = NULL;
 		return;
@@ -2470,7 +2470,7 @@ wpas_dpp_rx_presence_announcement(struct
 	if (!auth)
 		return;
 	wpas_dpp_set_testing_options(wpa_s, auth);
-	if (dpp_set_configurator(auth, wpa_s->dpp_configurator_params) < 0) {
+	if (dpp_set_configurator(auth, dpp_get_global_configuration(wpa_s->dpp)) < 0) {
 		dpp_auth_deinit(auth);
 		return;
 	}
@@ -2571,7 +2571,7 @@ wpas_dpp_rx_reconfig_announcement(struct
 	if (!auth)
 		return;
 	wpas_dpp_set_testing_options(wpa_s, auth);
-	if (dpp_set_configurator(auth, wpa_s->dpp_configurator_params) < 0) {
+	if (dpp_set_configurator(auth, dpp_get_global_configuration(wpa_s->dpp)) < 0) {
 		dpp_auth_deinit(auth);
 		return;
 	}
@@ -4905,8 +4905,6 @@ void wpas_dpp_deinit(struct wpa_supplica
 	wpas_dpp_stop(wpa_s);
 	wpas_dpp_pkex_remove(wpa_s, "*");
 	os_memset(wpa_s->dpp_intro_bssid, 0, ETH_ALEN);
-	os_free(wpa_s->dpp_configurator_params);
-	wpa_s->dpp_configurator_params = NULL;
 	dpp_global_clear(wpa_s->dpp);
 }
 
@@ -5029,7 +5027,7 @@ int wpas_dpp_controller_start(struct wpa
 
 		config.qr_mutual = os_strstr(cmd, " qr=mutual") != NULL;
 	}
-	config.configurator_params = wpa_s->dpp_configurator_params;
+	config.configurator_params = dpp_get_global_configuration(wpa_s->dpp);
 	return dpp_controller_start(wpa_s->dpp, &config);
 }
 
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -1503,7 +1503,6 @@ struct wpa_supplicant {
 	char *dpp_pkex_identifier;
 	enum dpp_pkex_ver dpp_pkex_ver;
 	char *dpp_pkex_auth_cmd;
-	char *dpp_configurator_params;
 	struct os_reltime dpp_last_init;
 	struct os_reltime dpp_init_iter_start;
 	unsigned int dpp_init_max_tries;
