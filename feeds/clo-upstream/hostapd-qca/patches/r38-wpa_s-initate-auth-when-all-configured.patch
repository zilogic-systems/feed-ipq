From 9518716f3f3414c66c60589fb60adfa1d77c9c73 Mon Sep 17 00:00:00 2001
From: Pavithra Ganesan <quic_pavigane@quicinc.com>
Date: Wed, 11 Sep 2024 09:49:57 +0530
Subject: [PATCH] wpa_supplicant: initate auth when all configured links of ml bss are found

While establishing ML connection, if BSS entry of partner BSS
is not found in scan result, supplicant proceeds to authenticate with links
which are available is current scan result.

Instead attempt to retry scan and find all configured links in mld so that
supplicant will be able associate on all configured links.
Currently the retry limit is set to 5 scans.

Also added a check to verify if partner link BSS'es freq is part for configured
freq list before considering the link for association.

Signed-off-by: Pavithra Ganesan <quic_pavigane@quicinc.com>
---
 tests/test-bss.c        |  2 +-
 wpa_supplicant/bss.c    | 35 +++++++++++++++++++++++++++++++++--
 wpa_supplicant/bss.h    |  3 ++-
 wpa_supplicant/events.c |  4 ++--
 wpa_supplicant/sme.c    | 39 ++++++++++++++++++++++++---------------
 5 files changed, 62 insertions(+), 21 deletions(-)

--- a/tests/test-bss.c
+++ b/tests/test-bss.c
@@ -60,7 +60,7 @@ void test_parse_basic_ml(struct wpa_supp
 	}
 
 	ret = wpa_bss_parse_basic_ml_element(wpa_s, &bss.bss, ap_mld_addr,
-					     &missing_links, NULL, &ap_mld_id);
+					     &missing_links, NULL, &ap_mld_id, NULL);
 
 	ASSERT_CMP_INT(ret, ==, 0);
 	ASSERT_CMP_INT(bss.bss.valid_links, ==, 1);
--- a/wpa_supplicant/bss.c
+++ b/wpa_supplicant/bss.c
@@ -1604,6 +1604,22 @@ int wpa_bss_ext_capab(const struct wpa_b
 }
 
 
+s8 wpa_get_hw_idx_by_freq(struct wpa_supplicant *wpa_s, int partner_freq)
+{
+	struct hostapd_multi_hw_info *hw_info;
+	int i;
+
+	for (i = 0; i < wpa_s->num_multi_hws; i++) {
+		hw_info = &wpa_s->multi_hw_info[i];
+		if (partner_freq >= hw_info->start_freq &&
+		    partner_freq <= hw_info->end_freq)
+			return i;
+	}
+
+	return -1;
+}
+
+
 static void
 wpa_bss_parse_ml_rnr_ap_info(struct wpa_supplicant *wpa_s,
 			     struct wpa_bss *bss, u8 mbssid_idx,
@@ -1615,6 +1631,8 @@ wpa_bss_parse_ml_rnr_ap_info(struct wpa_
 	const u8 *mld_params;
 	u8 count, mld_params_offset;
 	u8 i, type, link_id;
+	s8 hw_idx;
+	u16 associated_hw_bmap = 0;
 
 	count = RNR_TBTT_INFO_COUNT_VAL(ap_info->tbtt_info_hdr) + 1;
 	type = ap_info->tbtt_info_hdr & RNR_TBTT_INFO_HDR_TYPE_MSK;
@@ -1632,6 +1650,9 @@ wpa_bss_parse_ml_rnr_ap_info(struct wpa_
 	end = pos + len;
 	pos += sizeof(*ap_info);
 
+	hw_idx = wpa_get_hw_idx_by_freq(wpa_s, bss->freq);
+	associated_hw_bmap |= BIT(hw_idx);
+
 	for (i = 0; i < count; i++) {
 		u8 bss_params;
 
@@ -1645,6 +1666,25 @@ wpa_bss_parse_ml_rnr_ap_info(struct wpa_
 		if (link_id >= MAX_NUM_MLD_LINKS)
 			return;
 
+		int partner_freq = ieee80211_chan_to_freq(NULL, ap_info->op_class, ap_info->channel);
+		int curr_freq = 0;
+		if (partner_freq && wpa_s->conf->freq_list && wpa_s->conf->freq_list[0]) {
+			int i = 0;
+			curr_freq = wpa_s->conf->freq_list[i];
+			while (curr_freq) {
+				i++;
+				if (curr_freq == partner_freq) {
+					wpa_printf(MSG_DEBUG, "ML Partner freq %d is part of our scan list", partner_freq);
+					break;
+				}
+				curr_freq = wpa_s->conf->freq_list[i];
+			}
+		}
+		if (wpa_s->conf->freq_list && wpa_s->conf->freq_list[0] && !curr_freq) {
+			wpa_printf(MSG_DEBUG, "ML Partner freq %d is not part of our scan list ignore this link", partner_freq);
+			goto cont;
+		}
+
 		if (*mld_params != mbssid_idx) {
 			wpa_printf(MSG_DEBUG,
 				   "MLD: Reported link not part of MLD");
@@ -1662,6 +1702,15 @@ wpa_bss_parse_ml_rnr_ap_info(struct wpa_
 			wpa_printf(MSG_DEBUG, "MLD: mld ID=%u, link ID=%u",
 				   *mld_params, link_id);
 
+			hw_idx = wpa_get_hw_idx_by_freq(wpa_s, partner_freq);
+			if (hw_idx >= 0) {
+				if (!(associated_hw_bmap & BIT(hw_idx))) {
+					associated_hw_bmap |= BIT(hw_idx);
+				} else {
+					wpa_printf(MSG_DEBUG, "ML Partner freq %d is already part of this hw_idx: %d", partner_freq, hw_idx);
+					goto cont;
+				}
+			}
 			if (!neigh_bss) {
 				*missing |= BIT(link_id);
 			} else if ((!ssid ||
@@ -1681,7 +1730,7 @@ wpa_bss_parse_ml_rnr_ap_info(struct wpa_
 					RNR_TBTT_INFO_MLD_PARAM2_LINK_DISABLED;
 			}
 		}
-
+cont:
 		pos += ap_info->tbtt_info_len;
 	}
 }
@@ -1709,7 +1758,8 @@ int wpa_bss_parse_basic_ml_element(struc
 				   u8 *ap_mld_addr,
 				   u16 *missing_links,
 				   struct wpa_ssid *ssid,
-				   u8 *ap_mld_id)
+				   u8 *ap_mld_id,
+				   struct wpa_driver_auth_params *params)
 {
 	struct ieee802_11_elems elems;
 	struct wpabuf *mlbuf;
@@ -1736,6 +1786,9 @@ int wpa_bss_parse_basic_ml_element(struc
 	int ret = -1;
 	struct mld_link *l;
 
+	if (params)
+		params->mld = false;
+
 	if (ieee802_11_parse_elems(ies_pos, ies_len, &elems, 1) ==
 	    ParseFailed) {
 		wpa_dbg(wpa_s, MSG_DEBUG, "MLD: Failed to parse elements");
@@ -1825,6 +1878,8 @@ int wpa_bss_parse_basic_ml_element(struc
 	os_memcpy(l->bssid, bss->bssid, ETH_ALEN);
 	l->freq = bss->freq;
 
+	if (params)
+		params->mld = true;
 
 	/*
 	 * The AP MLD ID in the RNR corresponds to the MBSSID index, see
@@ -1882,6 +1937,12 @@ int wpa_bss_parse_basic_ml_element(struc
 			   i, MAC2STR(bss->mld_links[i].bssid));
 	}
 
+	if(missing && wpa_s->ml_neigh_retries <= 5) {
+		wpa_printf(MSG_DEBUG,
+		   "MLD: Neighbor not found in scan, current neigh scan retry count %u", wpa_s->ml_neigh_retries);
+		goto out;
+	}
+
 	if (missing_links)
 		*missing_links = missing;
 
--- a/wpa_supplicant/bss.h
+++ b/wpa_supplicant/bss.h
@@ -225,7 +225,8 @@ int wpa_bss_parse_basic_ml_element(struc
 				   u8 *ap_mld_addr,
 				   u16 *missing_links,
 				   struct wpa_ssid *ssid,
-				   u8 *ap_mld_id);
+				   u8 *ap_mld_id,
+				   struct wpa_driver_auth_params *params);
 u16 wpa_bss_parse_reconf_ml_element(struct wpa_supplicant *wpa_s,
 				    struct wpa_bss *bss);
 u32 wpa_bss_compare_res(const struct wpa_bss *old,
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -1180,7 +1180,7 @@ static bool wpas_valid_ml_bss(struct wpa
 {
 	u16 removed_links;
 
-	if (wpa_bss_parse_basic_ml_element(wpa_s, bss, NULL, NULL, NULL, NULL))
+	if (wpa_bss_parse_basic_ml_element(wpa_s, bss, NULL, NULL, NULL, NULL, NULL))
 		return true;
 
 	if (!bss->valid_links)
@@ -1916,7 +1916,7 @@ static int wpa_supplicant_connect_ml_mis
 
 	if (wpa_bss_parse_basic_ml_element(wpa_s, selected, NULL,
 					   &missing_links, ssid,
-					   &ap_mld_id) ||
+					   &ap_mld_id, NULL) ||
 	    !missing_links)
 		return 0;
 
--- a/wpa_supplicant/sme.c
+++ b/wpa_supplicant/sme.c
@@ -582,25 +582,35 @@ static void sme_send_authentication(stru
 
 	os_memset(&params, 0, sizeof(params));
 
-	if ((wpa_s->drv_flags2 & WPA_DRIVER_FLAGS2_MLO) &&
-	    !wpa_bss_parse_basic_ml_element(wpa_s, bss, wpa_s->ap_mld_addr,
-					    NULL, ssid, NULL) &&
-	    bss->valid_links) {
-		wpa_printf(MSG_DEBUG, "MLD: In authentication");
-		wpas_sme_set_mlo_links(wpa_s, bss, ssid);
+	ret = wpa_bss_parse_basic_ml_element(wpa_s, bss, wpa_s->ap_mld_addr,NULL, ssid, NULL, &params);
+
+	if (params.mld) {
+		if ((wpa_s->drv_flags2 & WPA_DRIVER_FLAGS2_MLO) &&
+		    !ret && bss->valid_links) {
+			wpa_printf(MSG_DEBUG, "MLD: In authentication");
+			wpas_sme_set_mlo_links(wpa_s, bss, ssid);
 
 #ifdef CONFIG_TESTING_OPTIONS
-		bss = wpas_ml_connect_pref(wpa_s, bss, ssid);
+			bss = wpas_ml_connect_pref(wpa_s, bss, ssid);
 
-		if (wpa_s->conf->mld_force_single_link) {
-			wpa_printf(MSG_DEBUG, "MLD: Force single link");
-			wpa_s->valid_links = BIT(wpa_s->mlo_assoc_link_id);
-		}
+			if (wpa_s->conf->mld_force_single_link) {
+				wpa_printf(MSG_DEBUG, "MLD: Force single link");
+				wpa_s->valid_links = BIT(wpa_s->mlo_assoc_link_id);
+			}
 #endif /* CONFIG_TESTING_OPTIONS */
-		params.mld = true;
-		params.mld_link_id = wpa_s->mlo_assoc_link_id;
-		params.ap_mld_addr = wpa_s->ap_mld_addr;
-		wpas_ml_handle_removed_links(wpa_s, bss);
+			params.mld = true;
+			params.mld_link_id = wpa_s->mlo_assoc_link_id;
+			params.ap_mld_addr = wpa_s->ap_mld_addr;
+			wpas_ml_handle_removed_links(wpa_s, bss);
+		} else {
+			wpas_connect_work_done(wpa_s);
+			/* Tear down auth process and start scan again */
+			wpa_supplicant_cancel_scan(wpa_s);
+			wpa_supplicant_cancel_sched_scan(wpa_s);
+			wpa_s->ml_neigh_retries++;
+			wpa_supplicant_req_scan(wpa_s, 0, 0);
+			return;
+		}
 	}
 
 	skip_auth = wpa_s->conf->reassoc_same_bss_optim &&
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -1255,4 +1255,15 @@ static inline int wpa_drv_set_6gclient_t
 	return wpa_s->driver->set_6gclient_type(wpa_s->drv_priv,
 						he_6ghz_reg_client_type);
 }
+
+static inline struct
+hostapd_multi_hw_info *wpa_get_multi_hw_info(struct wpa_supplicant *wpa_s,
+					     unsigned int *num_multi_hws) {
+	if (!wpa_s->driver->get_multi_hw_info)
+		return NULL;
+
+	return wpa_s->driver->get_multi_hw_info(wpa_s->drv_priv,
+						num_multi_hws);
+}
+
 #endif /* DRIVER_I_H */
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -65,6 +65,7 @@
 #include "wpas_kay.h"
 #include "mesh.h"
 #include "dpp_supplicant.h"
+#include "ap/hw_features.h"
 #include "nan_usd.h"
 #ifdef CONFIG_MESH
 #include "ap/ap_config.h"
@@ -7365,8 +7366,10 @@ static int wpa_supplicant_init_iface(str
 				     const struct wpa_interface *iface)
 {
 	struct wpa_driver_capa capa;
+	struct hostapd_multi_hw_info *multi_hw_info;
 	int capa_res;
 	u8 dfs_domain;
+	unsigned int num_multi_hws = 0;
 
 	wpa_printf(MSG_DEBUG, "Initializing interface '%s' conf '%s' driver "
 		   "'%s' ctrl_interface '%s' bridge '%s'", iface->ifname,
@@ -7539,6 +7542,23 @@ static int wpa_supplicant_init_iface(str
 		wpa_s->support_6ghz = wpas_is_6ghz_supported(wpa_s, false);
 	}
 
+	multi_hw_info = wpa_get_multi_hw_info(wpa_s, &num_multi_hws);
+	if (multi_hw_info != NULL) {
+		wpa_s->multi_hw_info = multi_hw_info;
+		wpa_s->num_multi_hws = num_multi_hws;
+	}
+
+	wpa_printf(MSG_DEBUG, "Multiple underlying hardwares info:");
+
+	for (int i = 0; i < num_multi_hws; i++) {
+		struct hostapd_multi_hw_info *hw_info = &multi_hw_info[i];
+
+		wpa_printf(MSG_DEBUG,
+			   "  %d. hw_idx=%u, frequency range: %d-%d MHz",
+			   i + 1, hw_info->hw_idx, hw_info->start_freq,
+			   hw_info->end_freq);
+	}
+
 	capa_res = wpa_drv_get_capa(wpa_s, &capa);
 	if (capa_res == 0) {
 		wpa_s->drv_capa_known = 1;
@@ -7845,6 +7865,9 @@ static void wpa_supplicant_deinit_iface(
 		wpa_s->conf = NULL;
 	}
 
+	hostapd_free_multi_hw_info(wpa_s->multi_hw_info);
+	wpa_s->multi_hw_info = NULL;
+	wpa_s->num_multi_hws = 0;
 	os_free(wpa_s->ssids_from_scan_req);
 	os_free(wpa_s->last_scan_freqs);
 
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -1632,6 +1632,8 @@ struct wpa_supplicant {
 	/* Minimum bandwidth the driver supports RU puncturing */
 	u8 ru_punct_supp_bw;
 	unsigned int ml_neigh_retries;
+	struct hostapd_multi_hw_info *multi_hw_info;
+	u8 num_multi_hws;
 };
 
 
