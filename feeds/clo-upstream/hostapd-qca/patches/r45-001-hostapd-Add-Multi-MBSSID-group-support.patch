From 87da70ff47d2474d805b4958b62729d5678ab696 Mon Sep 17 00:00:00 2001
From: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Date: Thu, 12 Sep 2024 11:35:21 +0530
Subject: [PATCH 1/4] hostapd: Add Multi MBSSID group support

On Multi MBSSID mode, create multiple mbssid groups with
each group having its own TX BSS. Assign first BSS of each
MBSSID group as Transmit BSS and include only non-Transmit
BSSes of that group on MBSSID element

When creating BSS, check MBSSID group size and add BSS to the
existing MBSSID group or new group based on the space
availability on the group. Similarly, when deleting BSS remove
the BSS from that group.

Modify the existing APIs to get Tx BSS, BSS index and Max Bssid
indicator value for the group instead of radio interface when
Multi Mbssid group feature is enabled.

Patch-dependency: r13-hostapd-add-ML-probing-support-for-MBSSID.patch
Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
---
 src/ap/ap_config.h             |   2 +
 src/ap/beacon.c                |   4 +
 src/ap/hostapd.c               | 244 ++++++++++++++++++++++++++++++---
 src/ap/hostapd.h               |   8 ++
 src/ap/ieee802_11.c            |  82 ++++++-----
 src/common/ieee802_11_common.h |  30 ++++
 6 files changed, 314 insertions(+), 56 deletions(-)

--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1288,6 +1288,7 @@ struct hostapd_config {
 		MBSSID_DISABLED = 0,
 		MBSSID_ENABLED = 1,
 		ENHANCED_MBSSID_ENABLED = 2,
+		MULTI_MBSSID_GROUP_ENABLED = 3,
 	} mbssid;
 
 	/* Whether to enable TWT responder in HT and VHT modes */
@@ -1297,6 +1298,7 @@ struct hostapd_config {
 	int ccfs;
 	int bandwidth_device;
 	int center_freq_device;
+	u8 group_size;
 };
 
 
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -612,6 +612,10 @@ ieee802_11_build_ap_params_mbssid(struct hostapd_data *hapd,
 		params->mbssid.mbssid_tx_iface_linkid = -1;
 	len = hostapd_eid_mbssid_len(tx_bss, WLAN_FC_STYPE_BEACON, &elem_count,
 				     NULL, 0, &rnr_len);
+
+	if (iface->conf->mbssid == MULTI_MBSSID_GROUP_ENABLED && !elem_count)
+		return 0;
+
 	if (!len || (iface->conf->mbssid == ENHANCED_MBSSID_ENABLED &&
 		     elem_count > iface->ema_max_periodicity))
 		goto fail;
@@ -2516,6 +2520,7 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 				return -1;
 			}
 			complete = hapd->iconf->mbssid == MBSSID_ENABLED ||
+				   hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED ||
 				   (hapd->iconf->mbssid == ENHANCED_MBSSID_ENABLED &&
 				    params->mbssid.mbssid_elem_count == 1);
 		}
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -97,9 +97,12 @@ int hostapd_for_each_interface(struct ha
 
 struct hostapd_data * hostapd_mbssid_get_tx_bss(struct hostapd_data *hapd)
 {
-	if (hapd->iconf->mbssid)
-		return hapd->iface->bss[0];
-
+	if (hapd->iconf->mbssid) {
+		if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED)
+			return hapd->mbssid_group->txbss;
+		else
+			return hapd->iface->bss[0];
+	}
 	return hapd;
 }
 
@@ -107,16 +110,78 @@ struct hostapd_data * hostapd_mbssid_get
 unsigned int hostapd_mbssid_get_bss_index(struct hostapd_data *hapd)
 {
 	if (hapd->iconf->mbssid) {
-		unsigned int i;
-
-		for (i = 1; i < hapd->iface->num_bss; i++)
-			if (hapd->iface->bss[i] == hapd)
-				return i;
+		struct hostapd_data *bss;
+		struct hostapd_multi_mbssid_group *group = hapd->mbssid_group;
+		unsigned int i = 0;
+
+		if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+			dl_list_for_each(bss, &group->bss_list,
+					 struct hostapd_data, mbssid_bss) {
+				if (bss == hapd)
+					return i;
+				i++;
+			}
+		} else {
+			for (i; i < hapd->iface->num_bss; i++) {
+				if (hapd->iface->bss[i] == hapd)
+					return i;
+			}
+		}
 	}
-
 	return 0;
 }
 
+struct hostapd_data *
+hostapd_get_multi_group_bss(struct hostapd_multi_mbssid_group *group,
+		int bss_idx)
+{
+	struct hostapd_iface *iface = NULL;
+
+	if (group->txbss)
+		iface = group->txbss->iface;
+	if (!iface)
+		return NULL;
+
+	if (iface->conf->mbssid) {
+		struct hostapd_data *bss;
+		size_t i = 0;
+
+		if (iface->conf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+			dl_list_for_each(bss, &group->bss_list,
+					struct hostapd_data, mbssid_bss) {
+				if (i == bss_idx)
+					return bss;
+				i++;
+			}
+		}
+	}
+	return NULL;
+}
+
+u8 hostapd_max_bssid_indicator(struct hostapd_data *hapd)
+{
+	size_t num_bss_nontx;
+	u8 max_bssid_ind = 0;
+
+	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1)
+		return 0;
+
+	if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+		num_bss_nontx = hapd->iconf->group_size - 1;
+	} else {
+#ifdef CONFIG_IEEE80211BE
+		if (hapd->iconf->ml_reconf_enabled)
+			num_bss_nontx = ML_RECONF_MAX_MBSSID_PROFILES - 1;
+		else
+#endif
+			num_bss_nontx = hapd->iface->num_bss - 1;
+	}
+	while (num_bss_nontx > 0) {
+		max_bssid_ind++;
+		num_bss_nontx >>= 1;
+	}
+	return max_bssid_ind;
+}
 
 void hostapd_reconfig_encryption(struct hostapd_data *hapd)
 {
@@ -558,16 +623,36 @@ int hostapd_link_remove(struct hostapd_d
 	     */
 	    if (iface->conf->mbssid != MBSSID_DISABLED &&
 		hapd == hostapd_mbssid_get_tx_bss(hapd)) {
-		    for (i = 1; i < hapd->iface->num_bss; i++) {
-			    struct hostapd_data *bss = hapd->iface->bss[i];
-
-			    bss->eht_mld_link_removal_inprogress = true;
-			    bss->eht_mld_link_removal_count = count;
-			    if (hostapd_send_ml_reconfig_link_removal(bss, count)) {
-				    wpa_printf(MSG_DEBUG,
-					       "Failed to send link removal non-tx BSS");
-				    return -EINVAL;
-			   }
+		    if (iface->conf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+			    size_t i = 0;
+			    struct hostapd_data *bss;
+			    struct hostapd_multi_mbssid_group *group = hapd->mbssid_group;
+
+			    dl_list_for_each(bss, &group->bss_list,
+					     struct hostapd_data, mbssid_bss) {
+				    if (bss != hapd) {
+					    bss->eht_mld_link_removal_inprogress = true;
+					    bss->eht_mld_link_removal_count = count;
+					    if (hostapd_send_ml_reconfig_link_removal(bss, count)) {
+						    wpa_printf(MSG_DEBUG,
+							       "Failed to send link removal non-tx BSS");
+						    return -EINVAL;
+					    }
+				    }
+				    i++;
+			    }
+		    } else {
+			    for (i = 1; i < hapd->iface->num_bss; i++) {
+				    struct hostapd_data *bss = hapd->iface->bss[i];
+
+				    bss->eht_mld_link_removal_inprogress = true;
+				    bss->eht_mld_link_removal_count = count;
+				    if (hostapd_send_ml_reconfig_link_removal(bss, count)) {
+					    wpa_printf(MSG_DEBUG,
+						       "Failed to send link removal non-tx BSS");
+					    return -EINVAL;
+				    }
+			    }
 		    }
 	    }
 
@@ -3259,10 +3344,45 @@ static void hostapd_mld_ref_dec(struct h
 
 #endif /* CONFIG_IEEE80211BE */
 
+static void hostapd_multi_mbssid_remove_bss(struct hostapd_data *hapd)
+{
+	struct hostapd_iface *iface = hapd->iface;
+	struct hostapd_data *next_txbss;
+	struct hostapd_multi_mbssid_group *group = hapd->mbssid_group;
+	size_t i, j;
+
+	if (!hapd || !group)
+		return;
+
+	if (hapd->iconf->mbssid != MULTI_MBSSID_GROUP_ENABLED)
+		return;
+
+	dl_list_del(&hapd->mbssid_bss);
+	group->num_bss--;
+	hapd->mbssid_group = NULL;
+
+	wpa_printf(MSG_DEBUG, "BSS[%s] removed from MBSSID group %d",
+		   hapd->conf->iface, group->group_id);
+	if (group->txbss != hapd)
+		return;
+
+	/* If len is 0, all BSSes are removed */
+	if (!dl_list_len(&group->bss_list)) {
+		group->txbss = NULL;
+	} else {
+		next_txbss = dl_list_entry(group->bss_list.next, struct hostapd_data,
+					   mbssid_bss);
+		group->txbss = next_txbss;
+		wpa_printf(MSG_DEBUG, "Set BSS[%s] as TX bss on group %d",
+			   group->txbss->conf->iface, group->group_id);
+	}
+}
+
 
 void hostapd_interface_free(struct hostapd_iface *iface)
 {
-	size_t j;
+	size_t j, num_groups;
+	struct hostapd_multi_mbssid_group *group;
 	wpa_printf(MSG_DEBUG, "%s(%p)", __func__, iface);
 	for (j = 0; j < iface->num_bss; j++) {
 		if (!iface->bss)
@@ -3273,8 +3393,25 @@ void hostapd_interface_free(struct hosta
 #endif /* CONFIG_IEEE80211BE */
 		wpa_printf(MSG_DEBUG, "%s: free hapd %p",
 			   __func__, iface->bss[j]);
+		hostapd_multi_mbssid_remove_bss(iface->bss[j]);
 		os_free(iface->bss[j]);
 	}
+	num_groups = iface->multi_mbssid.num_mbssid_groups;
+	for (j = 0; j < iface->multi_mbssid.num_mbssid_groups; j++) {
+		group = iface->multi_mbssid.group[j];
+		if (!group)
+			continue;
+		wpa_printf(MSG_DEBUG, "free MBSSID group id %ld", j);
+		os_free(group);
+		iface->multi_mbssid.group[j] = NULL;
+		num_groups--;
+	}
+	if (!num_groups) {
+		iface->multi_mbssid.num_mbssid_groups = 0;
+		os_free(iface->multi_mbssid.group);
+		iface->multi_mbssid.group = NULL;
+	}
+
 	hostapd_cleanup_iface(iface);
 }
 
@@ -3377,6 +3514,66 @@ fail:
 }
 
 
+void hostapd_multi_mbssid_setup_bss(struct hostapd_data *hapd)
+{
+	struct hostapd_iface *iface = hapd->iface;
+	struct hostapd_multi_mbssid_group *group = NULL, **all_group;
+	size_t i, j;
+
+	if (!hapd)
+		return;
+
+	if (hapd->iconf->mbssid != MULTI_MBSSID_GROUP_ENABLED)
+		return;
+
+	for (i = 0; i < iface->multi_mbssid.num_mbssid_groups; i++) {
+		group = iface->multi_mbssid.group[i];
+		if (group->num_bss == iface->conf->group_size)
+			continue;
+		dl_list_add_tail(&group->bss_list, &hapd->mbssid_bss);
+		group->num_bss++;
+		hapd->mbssid_group = group;
+
+		wpa_printf(MSG_DEBUG, "Bss[%s] added to MBSSID group %d",
+			   hapd->conf->iface, hapd->mbssid_group->group_id);
+		return;
+	}
+
+	group = os_zalloc(sizeof(struct hostapd_multi_mbssid_group));
+	if (!group)
+		goto fail;
+	dl_list_init(&group->bss_list);
+	group->txbss = hapd;
+	group->group_id = iface->multi_mbssid.num_mbssid_groups;
+
+	dl_list_add_tail(&group->bss_list, &hapd->mbssid_bss);
+	group->num_bss++;
+	hapd->mbssid_group = group;
+
+	wpa_printf(MSG_DEBUG, "Fist bss[%s] added to MBSSID group %d",
+		   hapd->conf->iface, hapd->mbssid_group->group_id);
+
+	all_group = os_realloc_array(iface->multi_mbssid.group,
+				     iface->multi_mbssid.num_mbssid_groups + 1,
+				     sizeof(struct hostapd_multi_mbssid_group *));
+	if (!all_group)
+		goto fail;
+
+	iface->multi_mbssid.group = all_group;
+	iface->multi_mbssid.group[iface->multi_mbssid.num_mbssid_groups] = group;
+	iface->multi_mbssid.num_mbssid_groups++;
+
+	return;
+fail:
+	if (!group)
+		return;
+
+	wpa_printf(MSG_ERROR, "Failed to add Bss[%s] to MBSSID group %d",
+		   hapd->conf->iface, group->group_id);
+	os_free(group);
+	hapd->mbssid_group = NULL;
+}
+
 static void hostapd_cleanup_unused_mlds(struct hapd_interfaces *interfaces)
 {
 #ifdef CONFIG_IEEE80211BE
@@ -3506,6 +3703,7 @@ struct hostapd_iface * hostapd_init(stru
 		 */
 		hapd->mbssid_idx = i;
 		hostapd_bss_setup_multi_link(hapd, interfaces);
+		hostapd_multi_mbssid_setup_bss(hapd);
 	}
 
 	hapd_iface->is_ch_switch_dfs = false;
@@ -3661,6 +3859,7 @@ hostapd_interface_init_bss(struct hapd_i
 		iface->bss[iface->num_bss] = hapd;
 		hapd->msg_ctx = hapd;
 		hostapd_bss_setup_multi_link(hapd, interfaces);
+		hostapd_multi_mbssid_setup_bss(hapd);
 
 
 		bss_idx = iface->num_bss++;
@@ -4070,6 +4269,7 @@ static int hostapd_data_alloc(struct hos
 		}
 		hapd->msg_ctx = hapd;
 		hostapd_bss_setup_multi_link(hapd, hapd_iface->interfaces);
+		hostapd_multi_mbssid_setup_bss(hapd);
 	}
 
 	hapd_iface->conf = conf;
@@ -4155,6 +4355,7 @@ int hostapd_add_iface(struct hapd_interf
 #ifdef CONFIG_IEEE80211BE
 				hostapd_mld_ref_dec(hapd->mld);
 #endif /* CONFIG_IEEE80211BE */
+				hostapd_multi_mbssid_remove_bss(hapd);
 				os_free(hapd);
 				return -1;
 			}
@@ -4249,6 +4450,7 @@ fail:
 #ifdef CONFIG_IEEE80211BE
 				hostapd_mld_ref_dec(hapd->mld);
 #endif /* CONFIG_IEEE80211BE */
+				hostapd_multi_mbssid_remove_bss(hapd);
 				os_free(hapd);
 				hapd_iface->bss[i] = NULL;
 			}
@@ -4295,7 +4497,7 @@ int hostapd_remove_bss(struct hostapd_if
 				hostapd_if_link_remove(hapd, WPA_IF_AP_BSS,
 						       hapd->conf->iface,
 						       hapd->mld_link_id);
-
+		hostapd_multi_mbssid_remove_bss(hapd);
 		os_free(hapd);
 
 		iface->num_bss--;
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -575,6 +575,8 @@ struct hostapd_data {
 	bool disable_cu;
 	struct hostapd_wmm_ac_params prev_wmm[4];
 	size_t mbssid_idx;
+	struct hostapd_multi_mbssid_group *mbssid_group;
+	struct dl_list mbssid_bss;
 };
 
 
@@ -842,6 +844,8 @@ struct hostapd_iface {
 	struct hostapd_multi_hw_info *multi_hw_info;
 	unsigned int num_multi_hws;
 	struct hostapd_multi_hw_info *current_hw_info;
+	/* Multi MBSSID group information */
+	struct hostapd_multi_mbssid multi_mbssid;
 };
 
 /* hostapd.c */
@@ -1003,4 +1007,8 @@ void hostapd_refresh_all_iface_beacons(s
 int hostapd_hard_switch_channel(struct hostapd_iface *iface,
 				struct csa_settings settings);
 
+struct hostapd_data *
+hostapd_get_multi_group_bss(struct hostapd_multi_mbssid_group *group,
+			    int bss_idx);
+u8 hostapd_max_bssid_indicator(struct hostapd_data *hapd);
 #endif /* HOSTAPD_H */
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -3462,29 +3462,6 @@ void hostap_ft_ds_ml_sta_timeout(void *e
 }
 
 
-static u8 hostapd_max_bssid_indicator(struct hostapd_data *hapd)
-{
-	size_t num_bss_nontx;
-	u8 max_bssid_ind = 0;
-
-	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1)
-		return 0;
-
-#ifdef CONFIG_IEEE80211BE
-	if (hapd->iconf->ml_reconf_enabled)
-		num_bss_nontx = ML_RECONF_MAX_MBSSID_PROFILES - 1;
-	else
-#endif
-		num_bss_nontx = hapd->iface->num_bss - 1;
-
-	while (num_bss_nontx > 0) {
-		max_bssid_ind++;
-		num_bss_nontx >>= 1;
-	}
-	return max_bssid_ind;
-}
-
-
 static u32 hostapd_get_aid_word(struct hostapd_data *hapd,
 				struct sta_info *sta, int i)
 {
@@ -8837,6 +8814,7 @@ bool hostapd_mbssid_mld_match(struct hos
 {
 	int bss_idx = 0;
 	struct hostapd_data *bss;
+	size_t num_bss;
 
 	if (!ml_hapd->conf->mld_ap)
 		return false;
@@ -8850,8 +8828,18 @@ bool hostapd_mbssid_mld_match(struct hos
 			return false;
 	}
 
-	for (bss_idx = 0; bss_idx < tx_hapd->iface->num_bss; bss_idx++) {
-		bss = tx_hapd->iface->bss[bss_idx];
+	if (tx_hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED)
+		num_bss = tx_hapd->mbssid_group->num_bss;
+	else
+		num_bss = tx_hapd->iface->num_bss;
+
+	for (bss_idx = 0; bss_idx < num_bss; bss_idx++) {
+		if (tx_hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED)
+			bss = hostapd_get_multi_group_bss(tx_hapd->mbssid_group,
+							  bss_idx);
+		else
+			bss = tx_hapd->iface->bss[bss_idx];
+
 		if (!bss)
 			continue;
 
@@ -9524,7 +9512,7 @@ static size_t hostapd_mbssid_ext_capa(st
 static size_t hostapd_eid_mbssid_elem_len(struct hostapd_data *hapd,
 					  u32 frame_type, size_t *bss_index,
 					  const u8 *known_bss,
-					  size_t known_bss_len)
+					  size_t known_bss_len, size_t num_bss)
 {
 	struct hostapd_data *tx_bss = hostapd_mbssid_get_tx_bss(hapd);
 	size_t len, i, tx_xrate_len;
@@ -9542,12 +9530,17 @@ static size_t hostapd_eid_mbssid_elem_le
 	len = 1;
 	hostapd_eid_ext_supp_rates(tx_bss, NULL, &tx_xrate_len);
 
-	for (i = *bss_index; i < hapd->iface->num_bss; i++) {
-		struct hostapd_data *bss = hapd->iface->bss[i];
+	for (i = *bss_index; i < num_bss; i++) {
+		struct hostapd_data *bss;
 		const u8 *auth, *rsn = NULL, *rsnx = NULL;
 		size_t nontx_profile_len, auth_len, xrate_len;
 		u8 ie_count = 0;
 
+		if (tx_bss->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED)
+			bss = hostapd_get_multi_group_bss(tx_bss->mbssid_group, i);
+		else
+			bss = tx_bss->iface->bss[i];
+
 		if (!bss || !bss->conf || !bss->started ||
 		    mbssid_known_bss(i, known_bss, known_bss_len))
 			continue;
@@ -9629,6 +9622,9 @@ size_t hostapd_eid_mbssid_len(struct hos
 			      size_t known_bss_len, size_t *rnr_len)
 {
 	size_t len = 0, bss_index = 1;
+	size_t num_bss;
+
+	hapd = hostapd_mbssid_get_tx_bss(hapd);
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_type != WLAN_FC_STYPE_BEACON &&
@@ -9644,12 +9640,17 @@ size_t hostapd_eid_mbssid_len(struct hos
 		*elem_count = 0;
 	}
 
-	while (bss_index < hapd->iface->num_bss) {
+	if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED)
+		num_bss = hapd->mbssid_group->num_bss;
+	else
+		num_bss = hapd->iface->num_bss;
+
+	while (bss_index < num_bss) {
 		size_t rnr_count = bss_index;
 
 		len += hostapd_eid_mbssid_elem_len(hapd, frame_type,
 						   &bss_index, known_bss,
-						   known_bss_len);
+						   known_bss_len, num_bss);
 
 		if (frame_type == WLAN_FC_STYPE_BEACON)
 			*elem_count += 1;
@@ -9703,7 +9704,7 @@ static u8 * hostapd_eid_mbssid_elem(stru
 				    u32 frame_type, u8 max_bssid_indicator,
 				    size_t *bss_index, u8 elem_count,
 				    const u8 *known_bss, size_t known_bss_len,
-				    u32 *elemid_modified_bmap)
+				    u32 *elemid_modified_bmap, size_t num_bss)
 {
 	struct hostapd_data *tx_bss = hostapd_mbssid_get_tx_bss(hapd);
 	size_t i, tx_xrate_len;
@@ -9715,8 +9716,8 @@ static u8 * hostapd_eid_mbssid_elem(stru
 	eid_len_offset = eid++;
 	max_bssid_indicator_offset = eid++;
 
-	for (i = *bss_index; i < hapd->iface->num_bss; i++) {
-		struct hostapd_data *bss = hapd->iface->bss[i];
+	for (i = *bss_index; i < num_bss; i++) {
+		struct hostapd_data *bss;
 		struct hostapd_bss_config *conf;
 		u8 *eid_len_pos, *nontx_bss_start = eid;
 		const u8 *auth, *rsn = NULL, *rsnx = NULL;
@@ -9725,6 +9726,11 @@ static u8 * hostapd_eid_mbssid_elem(stru
 		u16 capab_info;
 		u8 modified_flag = 0;
 
+		if (tx_bss->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED)
+			bss = hostapd_get_multi_group_bss(tx_bss->mbssid_group, i);
+		else
+			bss = tx_bss->iface->bss[i];
+
 		if (!bss || !bss->conf || !bss->started ||
 		    mbssid_known_bss(i, known_bss, known_bss_len))
 			continue;
@@ -9860,6 +9866,7 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 	size_t bss_index = 1, cur_len = 0;
 	u8 elem_index = 0, *rnr_start_eid = rnr_eid;
 	bool add_rnr;
+	size_t num_bss;
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_stype != WLAN_FC_STYPE_BEACON &&
@@ -9876,7 +9883,12 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 		frame_stype == WLAN_FC_STYPE_BEACON &&
 		rnr_eid && rnr_count && rnr_offset && rnr_len;
 
-	while (bss_index < hapd->iface->num_bss) {
+	if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED)
+		num_bss = hapd->mbssid_group->num_bss;
+	else
+		num_bss = hapd->iface->num_bss;
+
+	while (bss_index < num_bss) {
 		unsigned int rnr_start_count = bss_index;
 
 		if (frame_stype == WLAN_FC_STYPE_BEACON) {
@@ -9893,7 +9905,7 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 					      hostapd_max_bssid_indicator(hapd),
 					      &bss_index, elem_count,
 					      known_bss, known_bss_len,
-					      elemid_modified_bmap);
+					      elemid_modified_bmap, num_bss);
 
 		if (add_rnr) {
 			struct mbssid_ie_profiles skip_profiles = {
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -11,6 +11,7 @@
 
 #include "defs.h"
 #include "ieee802_11_defs.h"
+#include "utils/list.h"
 
 struct element {
 	u8 id;
@@ -418,4 +419,33 @@ struct wpabuf * ieee802_11_defrag(const
 const u8 * get_ml_ie(const u8 *ies, size_t len, u8 type);
 const u8 * get_basic_mle_mld_addr(const u8 *buf, size_t len);
 
+/**
+ * struct hostapd_multi_mbssid_group: hostapd per group MBSSID info
+ */
+struct hostapd_multi_mbssid_group {
+	/* Group id for the group */
+	u8 group_id;
+	/* Active bss added in the group */
+	size_t num_bss;
+	struct hostapd_data *txbss;
+	/* List of bss in the group */
+	struct dl_list bss_list;
+};
+
+/**
+ * struct hostapd_multi_mbssid: hostapd Multi group MBSSID info
+ */
+struct hostapd_multi_mbssid {
+	/* Maximum number of groups supported for MBSSID advertisement */
+	u8  mbssid_max_ngroups;
+	/* Maximum supported beacon size */
+	unsigned int max_beacon_size;
+	/* Maximum number of bss allowed in each group */
+	u8  group_size;
+	/* Active mbssid groups present */
+	size_t num_mbssid_groups;
+	/* hostapd Per group MBSSID info */
+	struct hostapd_multi_mbssid_group **group;
+};
+
 #endif /* IEEE802_11_COMMON_H */
