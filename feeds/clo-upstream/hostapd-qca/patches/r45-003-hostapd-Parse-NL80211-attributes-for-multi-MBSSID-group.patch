From 9c50150c0b9f00424eda91afa0f065a56b0dd547 Mon Sep 17 00:00:00 2001
From: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Date: Tue, 10 Sep 2024 14:35:55 +0530
Subject: [PATCH 3/4] hostapd: Parse NL80211 attributes for multi MBSSID group
 mode

Parse NL80211 attributes for multi MBSSID group support in AP mode.

- NL80211_MBSSID_CONFIG_ATTR_MAX_MBSSID_GROUPS Used to advertise
the maximum mbssid groups supported by the driver.
- NL80211_MBSSID_CONFIG_ATTR_MAX_BEACON_SIZE: Used to advertise
the maximum beacon size supported by the driver.

When generating beacon, check if beacon data size doesn't exceed
maximum beacon size capability advertised by the driver and
check if number of created groups doesn't exceed maximum number
of allowed groups advertised by the driver.

Patch-dependency:
r21-hostapd-Fix-channel-number-in-MBSSID-RNR-after-chann.patch

Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
---
 hostapd/main.c                    |  5 +++++
 src/ap/beacon.c                   | 32 ++++++++++++++++++++++++++++---
 src/ap/hostapd.c                  | 25 ++++++++++++++++++++++++
 src/drivers/driver.h              |  5 +++++
 src/drivers/driver_nl80211.c      |  8 ++++++--
 src/drivers/driver_nl80211_capa.c | 12 ++++++++++--
 src/drivers/nl80211_copy.h        | 12 ++++++++++++
 7 files changed, 92 insertions(+), 7 deletions(-)

--- a/hostapd/main.c
+++ b/hostapd/main.c
@@ -325,6 +325,11 @@ setup_mld:
 
 		iface->mbssid_max_interfaces = capa.mbssid_max_interfaces;
 		iface->ema_max_periodicity = capa.ema_max_periodicity;
+		iface->multi_mbssid.mbssid_max_ngroups = capa.mbssid_max_ngroups;
+		iface->multi_mbssid.max_beacon_size = capa.max_beacon_size;
+		wpa_printf(MSG_DEBUG,
+			   "max_ngroups:%d max beacon size:%d\n",
+			   capa.mbssid_max_ngroups, capa.max_beacon_size);
 	}
 
 #ifdef CONFIG_IEEE80211BE
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -2914,7 +2914,32 @@ static int __ieee802_11_set_beacon(struc
 
 	if (hostapd_build_ap_extra_ies(hapd, &beacon, &proberesp, &assocresp) <
 	    0)
-		goto fail;
+		goto fail1;
+
+	if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+		size_t bcn_len;
+
+		bcn_len = params.head_len + params.tail_len + wpabuf_len(beacon) +
+			  params.mbssid.mbssid_elem_len;
+		if (bcn_len > hapd->iface->multi_mbssid.max_beacon_size) {
+			if (params.mbssid.mbssid_elem_count > 1) {
+				wpa_printf(MSG_ERROR,
+					   "Reduce MBSSID group size (%d) to accommodate within beacon size limit of %u bytes. Current beacon length is %zu",
+					   hapd->iconf->group_size,
+					   iface->multi_mbssid.max_beacon_size,
+					   bcn_len);
+			}
+			goto fail2;
+		}
+		if (hapd->iface->multi_mbssid.num_mbssid_groups >
+		    hapd->iface->multi_mbssid.mbssid_max_ngroups) {
+			wpa_printf(MSG_ERROR,
+				   "Created Multi MBSSID groups(%zu) exceeded max allowed groups(%d)\n",
+				   hapd->iface->multi_mbssid.num_mbssid_groups,
+				   hapd->iface->multi_mbssid.mbssid_max_ngroups);
+			goto fail2;
+		}
+	}
 
 	params.beacon_ies = beacon;
 	params.proberesp_ies = proberesp;
@@ -3003,12 +3028,13 @@ static int __ieee802_11_set_beacon(struc
 #endif /* CONFIG_DRIVER_NL80211_QCA */
 
 	res = hostapd_drv_set_ap(hapd, &params);
-	hostapd_free_ap_extra_ies(hapd, beacon, proberesp, assocresp);
 	if (res)
 		wpa_printf(MSG_ERROR, "Failed to set beacon parameters");
 	else
 		ret = 0;
-fail:
+fail2:
+	hostapd_free_ap_extra_ies(hapd, beacon, proberesp, assocresp);
+fail1:
 	ieee802_11_free_ap_params(&params);
 	return ret;
 }
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4895,6 +4895,31 @@ static int hostapd_build_beacon_data(str
 		}
 	}
 
+	if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+		size_t bcn_len;
+
+		bcn_len = params.head_len + params.tail_len + wpabuf_len(beacon_extra) +
+			  params.mbssid.mbssid_elem_len;
+		if (bcn_len > hapd->iface->multi_mbssid.max_beacon_size) {
+			if (params.mbssid.mbssid_elem_count > 1) {
+				wpa_printf(MSG_ERROR,
+					   "Reduce MBSSID group size (%d) to accommodate within beacon size limit of %u bytes. Current beacon length is %zu",
+					   hapd->iconf->group_size,
+					   hapd->iface->multi_mbssid.max_beacon_size,
+					   bcn_len);
+			}
+			goto free_beacon;
+		}
+		if (hapd->iface->multi_mbssid.num_mbssid_groups >
+		    hapd->iface->multi_mbssid.mbssid_max_ngroups) {
+			wpa_printf(MSG_ERROR,
+				   "Created Multi MBSSID groups(%zu) exceeded max allowed groups(%d)\n",
+				   hapd->iface->multi_mbssid.num_mbssid_groups,
+				   hapd->iface->multi_mbssid.mbssid_max_ngroups);
+			goto free_beacon;
+		}
+	}
+
 	ret = 0;
 free_beacon:
 	/* if the function fails, the caller should not free beacon data */
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2642,6 +2642,11 @@ struct wpa_driver_capa {
 
 	/* Minimum bandwidth the driver supports RU Puncturing */
 	u8 ru_punct_supp_bw;
+
+	/* Maximum number of Muli-MBSSID groups supported by driver */
+	u8  mbssid_max_ngroups;
+	/* Maximum supported beacon size */
+	unsigned int max_beacon_size;
 };
 
 
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -11681,7 +11681,9 @@ static int wpa_driver_nl80211_status(voi
 				  "capa.max_sched_scan_plan_interval=%u\n"
 				  "capa.max_sched_scan_plan_iterations=%u\n"
 				  "capa.mbssid_max_interfaces=%u\n"
-				  "capa.ema_max_periodicity=%u\n",
+				  "capa.ema_max_periodicity=%u\n"
+				  "capa.mbssid_max_ngroups=%u\n"
+				  "capa.max_beacon_size=%u\n",
 				  drv->capa.key_mgmt,
 				  drv->capa.enc,
 				  drv->capa.auth,
@@ -11706,7 +11708,9 @@ static int wpa_driver_nl80211_status(voi
 				  drv->capa.max_sched_scan_plan_interval,
 				  drv->capa.max_sched_scan_plan_iterations,
 				  drv->capa.mbssid_max_interfaces,
-				  drv->capa.ema_max_periodicity);
+				  drv->capa.ema_max_periodicity,
+				  drv->capa.mbssid_max_ngroups,
+				  drv->capa.max_beacon_size);
 		if (os_snprintf_error(end - pos, res))
 			return pos - buf;
 		pos += res;
--- a/src/drivers/driver_nl80211_capa.c
+++ b/src/drivers/driver_nl80211_capa.c
@@ -943,9 +943,17 @@ static void wiphy_info_mbssid(struct wpa
 		cap->ema_max_periodicity =
 			nla_get_u8(config[NL80211_MBSSID_CONFIG_ATTR_MAX_EMA_PROFILE_PERIODICITY]);
 
+	if (config[NL80211_MBSSID_CONFIG_ATTR_MAX_MBSSID_GROUPS])
+		cap->mbssid_max_ngroups =
+			nla_get_u8(config[NL80211_MBSSID_CONFIG_ATTR_MAX_MBSSID_GROUPS]);
+
+	if (config[NL80211_MBSSID_CONFIG_ATTR_MAX_BEACON_SIZE])
+		cap->max_beacon_size =
+			nla_get_u16(config[NL80211_MBSSID_CONFIG_ATTR_MAX_BEACON_SIZE]);
 	wpa_printf(MSG_DEBUG,
-		   "mbssid: max interfaces %u, max profile periodicity %u",
-		   cap->mbssid_max_interfaces, cap->ema_max_periodicity);
+		   "mbssid: max interfaces %u max profile periodicity %u max ngroups %u max beacon size %u\n",
+		   cap->mbssid_max_interfaces, cap->ema_max_periodicity,
+		   cap->mbssid_max_ngroups, cap->max_beacon_size);
 }
 
 
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -8227,6 +8227,16 @@ enum nl80211_sar_specs_attrs {
  * 	is an MLD. The link id must be valid in the wdev of given Transmitting interface
  * 	index.
  *
+ * @NL80211_MBSSID_CONFIG_ATTR_MAX_MBSSID_GROUPS: Used to advertise
+ *     the maximum mbssid groups (u8) supported by the driver.
+ *     Driver should indicate this to the userspace
+ *     by setting wiphy->mbssid_max_ngroups to a non-zero value.
+ *
+ * @NL80211_MBSSID_CONFIG_ATTR_MAX_BEACON_SIZE: Used to advertise
+ *     the maximum beacon size (u16) supported by the driver.
+ *     Driver should indicate this to the userspace
+ *     by setting wiphy->max_beacon_size to a non-zero value.
+ *
  * @__NL80211_MBSSID_CONFIG_ATTR_LAST: Internal
  * @NL80211_MBSSID_CONFIG_ATTR_MAX: highest attribute
  */
@@ -8239,6 +8249,8 @@ enum nl80211_mbssid_config_attributes {
 	NL80211_MBSSID_CONFIG_ATTR_TX_IFINDEX,
 	NL80211_MBSSID_CONFIG_ATTR_EMA,
 	NL80211_MBSSID_CONFIG_ATTR_TX_LINK_ID,
+	NL80211_MBSSID_CONFIG_ATTR_MAX_MBSSID_GROUPS,
+	NL80211_MBSSID_CONFIG_ATTR_MAX_BEACON_SIZE,
 
 	/* keep last */
 	__NL80211_MBSSID_CONFIG_ATTR_LAST,
