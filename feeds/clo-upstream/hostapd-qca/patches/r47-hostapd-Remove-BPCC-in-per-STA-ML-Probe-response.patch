From 67e1e986c8da5884ad0adbdde60da7387ad6f7e2 Mon Sep 17 00:00:00 2001
From: Mohan Kumar G <quic_mkumarg@quicinc.com>
Date: Fri, 4 Oct 2024 09:52:29 +0530
Subject: [PATCH] hostapd: Remove BPCC in per STA ML Probe response

Currently in ML Probe response, the per-STA Profile STA control
has BPCC present set to true by default for all frames.

As per IEEE P802.11be/D7.0 section 9.4.2.322.2.4, AP sets this field
to 1 in (Re)Association Response frame and sets to 0 in other frames.

Fix this issue by setting the BPCC present flag in STA control
and adding BPCC element in STA Info only for ML Association or
Reassociation response frames.

Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
Signed-off-by: Yuvarani V <quic_yuvarani@quicinc.com>
---
 src/ap/beacon.c         |  7 ++++---
 src/ap/ieee802_11.c     |  8 +++++---
 src/ap/ieee802_11.h     |  8 ++++----
 src/ap/ieee802_11_eht.c | 39 ++++++++++++++++++++++++++-------------
 src/ap/wpa_auth_glue.c  |  4 ++--
 5 files changed, 41 insertions(+), 25 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -798,7 +798,8 @@ static size_t hostapd_probe_resp_elems_l
 
 		if (ml_elem_ap->conf->mld_ap) {
 			buflen += hostapd_eid_eht_ml_beacon_len(
-				ml_elem_ap, params->mld_info, !!params->mld_ap);
+				ml_elem_ap, params->mld_info, !!params->mld_ap,
+				WLAN_FC_STYPE_PROBE_RESP);
 
 			/* For Max Channel Switch Time element during channel
 			 * switch */
@@ -970,7 +971,7 @@ static u8 * hostapd_probe_resp_fill_elem
 		if (ml_elem_ap->conf->mld_ap) {
 			pos = hostapd_eid_eht_ml_beacon(
 				ml_elem_ap, params->mld_info,
-				pos, !!params->mld_ap);
+				pos, !!params->mld_ap, WLAN_FC_STYPE_PROBE_RESP);
 
 			if (hapd->eht_mld_link_removal_inprogress)
 				pos = hostapd_eid_eht_reconf_ml(ml_elem_ap, pos);
@@ -2624,7 +2625,7 @@ int ieee802_11_build_ap_params(struct ho
 		if (hapd->conf->mld_ap) {
 			startpos = tailpos;
 			tailpos = hostapd_eid_eht_ml_beacon(hapd, NULL,
-							    tailpos, false);
+							    tailpos, false, WLAN_FC_STYPE_BEACON);
 			hostapd_eid_update_cu_info(hapd, &elemid_modified, startpos,
 						   tailpos-startpos, ELEMID_CU_PARAM_EXT_ML);
 		}
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -5293,7 +5293,8 @@ rsnxe_done:
 #ifdef CONFIG_IEEE80211BE
 	if (hapd->iconf->ieee80211be && !hapd->conf->disable_11be) {
 		if (hapd->conf->mld_ap)
-			p = hostapd_eid_eht_ml_assoc(hapd, sta, p);
+			p = hostapd_eid_eht_ml_assoc(hapd, sta, p,
+						     WLAN_FC_STYPE_ASSOC_RESP);
 		p = hostapd_eid_eht_capab(hapd, p, IEEE80211_MODE_AP);
 		p = hostapd_eid_eht_operation(hapd, p, IEEE80211_MODE_AP);
 		p = hostapd_eid_vendor_240mhz(hapd, p, IEEE80211_MODE_AP);
@@ -9595,7 +9596,8 @@ static size_t hostapd_eid_mbssid_elem_le
 
 		/* For ML Probe resp, solicited hapd's MLE will be in the frame body */
 		if (bss->conf->mld_ap && (bss != hapd || frame_type != WLAN_FC_STYPE_PROBE_RESP)) {
-			nontx_profile_len += hostapd_eid_eht_ml_beacon_len(bss, NULL, true);
+			nontx_profile_len += hostapd_eid_eht_ml_beacon_len(bss, NULL, true,
+									   frame_type);
 			if (bss->eht_mld_link_removal_inprogress)
 				nontx_profile_len += hostapd_eid_eht_ml_reconfig_len(bss);
 		}
@@ -9818,7 +9820,7 @@ static u8 * hostapd_eid_mbssid_elem(stru
 
 		/* For ML Probe resp, solicited hapd's MLE will be in the frame body */
 		if (bss->conf->mld_ap && (bss != hapd || frame_type != WLAN_FC_STYPE_PROBE_RESP)) {
-			eid = hostapd_eid_eht_ml_beacon(bss, NULL, eid, true);
+			eid = hostapd_eid_eht_ml_beacon(bss, NULL, eid, true, frame_type);
 			if (bss->eht_mld_link_removal_inprogress)
 				eid = hostapd_eid_eht_reconf_ml(bss, eid);
 		}
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -104,15 +104,15 @@ void hostapd_get_eht_capab(struct hostap
 			   size_t len);
 u8 * hostapd_eid_eht_ml_beacon(struct hostapd_data *hapd,
 			       struct mld_info *mld_info,
-			       u8 *eid, bool include_mld_id);
+			       u8 *eid, bool include_mld_id, u32 type);
 u8 * hostapd_eid_eht_ml_assoc(struct hostapd_data *hapd, struct sta_info *info,
-			      u8 *eid);
+			      u8 *eid, u32 type);
 size_t hostapd_eid_eht_ml_beacon_len(struct hostapd_data *hapd,
 				     struct mld_info *info,
-				     bool include_mld_id);
+				     bool include_mld_id, u32 type);
 size_t hostapd_eid_eht_basic_ml_common_len(struct hostapd_data *hapd,
 				    struct sta_info *info,
-				    bool include_mld_id);
+				    bool include_mld_id, u32 type);
 struct wpabuf * hostapd_ml_auth_resp(struct hostapd_data *hapd);
 const u8 * hostapd_process_ml_auth(struct hostapd_data *hapd,
 				   const struct ieee80211_mgmt *mgmt,
--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -562,7 +562,7 @@ void hostapd_get_eht_capab(struct hostap
 
 static u8 * hostapd_eid_eht_basic_ml_common(struct hostapd_data *hapd,
 					    u8 *eid, struct mld_info *mld_info,
-					    bool include_mld_id)
+					    bool include_mld_id, u32 type)
 {
 	struct wpabuf *buf;
 	u16 control;
@@ -678,11 +678,16 @@ static u8 * hostapd_eid_eht_basic_ml_com
 		/*
 		 * control (2) + station info length (1) + MAC address (6) +
 		 * beacon interval (2) + TSF offset (8) + DTIM info (2) + BSS
-		 * parameters change counter (1) + station profile length.
+		 * parameters change counter (0 or 1) + station profile length.
 		 */
-#define EHT_ML_STA_INFO_LEN 22
-		size_t total_len = EHT_ML_STA_INFO_LEN +
-			link->resp_sta_profile_len;
+#define EHT_ML_STA_INFO_LEN 21
+		size_t eht_ml_sta_info_len = EHT_ML_STA_INFO_LEN;
+
+		/* BSS parameters change count (1) for (Re)Assoc response */
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			eht_ml_sta_info_len += 1;
+
+		size_t total_len = eht_ml_sta_info_len + link->resp_sta_profile_len;
 
 		/* Skip the local one */
 		if (link_id == hapd->mld_link_id || !link->valid)
@@ -709,14 +714,18 @@ static u8 * hostapd_eid_eht_basic_ml_com
 			EHT_PER_STA_CTRL_COMPLETE_PROFILE_MSK |
 			EHT_PER_STA_CTRL_TSF_OFFSET_PRESENT_MSK |
 			EHT_PER_STA_CTRL_BEACON_INTERVAL_PRESENT_MSK |
-			EHT_PER_STA_CTRL_DTIM_INFO_PRESENT_MSK |
-			EHT_PER_STA_CTRL_BSS_PARAM_CNT_PRESENT_MSK;
+			EHT_PER_STA_CTRL_DTIM_INFO_PRESENT_MSK;
+
+		/* Set BSS Parameters Change Count present mask for (Re)Assoc response */
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			control |= EHT_PER_STA_CTRL_BSS_PARAM_CNT_PRESENT_MSK;
+
 		wpabuf_put_le16(buf, control);
 
 		/* STA Info */
 
 		/* STA Info Length */
-		wpabuf_put_u8(buf, EHT_ML_STA_INFO_LEN - 2);
+		wpabuf_put_u8(buf, eht_ml_sta_info_len - 2);
 		wpabuf_put_data(buf, link->local_addr, ETH_ALEN);
 		wpabuf_put_le16(buf, link_bss->iconf->beacon_int);
 
@@ -732,7 +741,8 @@ static u8 * hostapd_eid_eht_basic_ml_com
 		wpabuf_put_u8(buf, link_bss->conf->dtim_period);
 
 		/* BSS Parameters Change Count */
-		wpabuf_put_u8(buf, link_bss->rx_cu_param.bpcc);
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			wpabuf_put_u8(buf, link_bss->rx_cu_param.bpcc);
 
 		if (!link->resp_sta_profile)
 			continue;
@@ -745,7 +755,7 @@ static u8 * hostapd_eid_eht_basic_ml_com
 			ptr = link->resp_sta_profile;
 			len = link->resp_sta_profile_len;
 
-			slice_len = 255 - EHT_ML_STA_INFO_LEN;
+			slice_len = 255 - eht_ml_sta_info_len;
 
 			wpabuf_put_data(buf, ptr, slice_len);
 			len -= slice_len;
@@ -810,7 +820,7 @@ out:
 
 
 static size_t hostapd_eid_eht_ml_len(struct mld_info *info,
-				     bool include_mld_id)
+				     bool include_mld_id, u32 type)
 {
 	size_t len = 0;
 	size_t eht_ml_len = 2 + EHT_ML_COMMON_INFO_LEN;
@@ -830,6 +840,10 @@ static size_t hostapd_eid_eht_ml_len(str
 
 		sta_len += link->resp_sta_profile_len;
 
+		/* Add BSS Parameters Change Count in per STA for (Re)Assoc resp */
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			sta_len += 1;
+
 		/* Element data and (fragmentation) headers */
 		eht_ml_len += sta_len;
 		eht_ml_len += 2 + sta_len / 255 * 2;
@@ -852,9 +866,9 @@ static size_t hostapd_eid_eht_ml_len(str
 
 u8 * hostapd_eid_eht_ml_beacon(struct hostapd_data *hapd,
 			       struct mld_info *info,
-			       u8 *eid, bool include_mld_id)
+			       u8 *eid, bool include_mld_id, u32 type)
 {
-	eid = hostapd_eid_eht_basic_ml_common(hapd, eid, info, include_mld_id);
+	eid = hostapd_eid_eht_basic_ml_common(hapd, eid, info, include_mld_id, type);
 	if (hapd->iface->drv_flags2 & WPA_DRIVER_FLAG2_MLD_LINK_REMOVAL_OFFLOAD)
 		return eid;
 	else
@@ -864,13 +878,13 @@ u8 * hostapd_eid_eht_ml_beacon(struct ho
 
 
 u8 * hostapd_eid_eht_ml_assoc(struct hostapd_data *hapd, struct sta_info *info,
-			      u8 *eid)
+			      u8 *eid, u32 type)
 {
 	if (!ap_sta_is_mld(hapd, info))
 		return eid;
 
 	eid = hostapd_eid_eht_basic_ml_common(hapd, eid, &info->mld_info,
-					      false);
+					      false, type);
 	ap_sta_free_sta_profile(&info->mld_info);
 	return eid;
 }
@@ -878,9 +892,9 @@ u8 * hostapd_eid_eht_ml_assoc(struct hos
 
 size_t hostapd_eid_eht_ml_beacon_len(struct hostapd_data *hapd,
 				     struct mld_info *info,
-				     bool include_mld_id)
+				     bool include_mld_id, u32 type)
 {
-	return hostapd_eid_eht_ml_len(info, include_mld_id);
+	return hostapd_eid_eht_ml_len(info, include_mld_id, type);
 }
 
 
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -1677,7 +1677,7 @@ static u8 *hostapd_wpa_ft_add_bmle(void
 {
 	struct hostapd_data *hapd = ctx;
 
-	return hostapd_eid_eht_ml_beacon(hapd, NULL, bmle_ie, true);
+	return hostapd_eid_eht_ml_beacon(hapd, NULL, bmle_ie, true, WLAN_FC_STYPE_AUTH);
 }
 
 
@@ -1685,7 +1685,7 @@ static size_t hostapd_wpa_ft_add_bmle_le
 {
 	struct hostapd_data *hapd = ctx;
 
-	return hostapd_eid_eht_ml_beacon_len(hapd, NULL, true);
+	return hostapd_eid_eht_ml_beacon_len(hapd, NULL, true, WLAN_FC_STYPE_AUTH);
 }
 
 
