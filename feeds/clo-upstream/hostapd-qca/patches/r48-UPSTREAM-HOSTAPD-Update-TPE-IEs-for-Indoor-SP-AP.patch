From 32c4189bcb48e2acd93a288f7f25a7b457043b1d Mon Sep 17 00:00:00 2001
From: Amith A <quic_amitajit@quicinc.com>
Date: Tue, 22 Oct 2024 20:40:49 +0530
Subject: [PATCH] UPSTREAM:HOSTAPD: Update TPE IEs for Indoor SP AP

As per IEEE P802.11-REVme/D6.0, June 2024, for an indoor SP AP, aka
composite AP, the TPEs to be included are as follows
TPE1:	Max Tx Pwr Category = Default,
	Max Tx Pwr Interpretation = Regulatory Client EIRP PSD
TPE2:	Max Tx Pwr Category = Default,
	Max Tx Pwr Interpretation = Regulatory Client EIRP
TPE3:	Max Tx Pwr Category = Subordinate,
	Max Tx Pwr Interpretation = Regulatory Client EIRP PSD
TPE4:	Max Tx Pwr Category = Default,
	Max Tx Pwr Interpretation = Additional Regulatory Client EIRP PSD
TPE5:	Max Tx Pwr Category = Default,
	Max Tx Pwr Interpretation = Additional Regulatory Client EIRP

Tag: 6G_REGULATORY
Patch-dependency: r47-QSDK-HOSTAPD-Update-RegInfo-control-field-in-HE_OP-I.patch

Signed-off-by: Amith A <quic_amitajit@quicinc.com>
---
 src/ap/ieee802_11.c          | 141 ++++++++++++++++++++++++++---------
 src/common/ieee802_11_defs.h |   2 +
 2 files changed, 109 insertions(+), 34 deletions(-)

--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7616,7 +7616,8 @@ static u8 hostapd_get_6g_tx_power(struct
 			return REG_FCC_PSD_MAX_TXPOWER_FOR_DEFAULT_CLIENT_LPI;
 		else if (ap_type == HE_REG_INFO_6GHZ_AP_TYPE_INDOOR)
 			return REG_FCC_PSD_MAX_TXPOWER_FOR_SUBORDINATE_CLIENT_LPI;
-		else if (ap_type == HE_REG_INFO_6GHZ_AP_TYPE_SP)
+		else if (ap_type == HE_REG_INFO_6GHZ_AP_TYPE_SP ||
+			 ap_type == HE_REG_INFO_6GHZ_AP_TYPE_INDOOR_SP)
 			return REG_FCC_PSD_MAX_TXPOWER_SP;
 
 	} else if (memcmp(country, "GB", 2) == 0) {
@@ -7654,9 +7655,13 @@ static u8 *hostapd_add_tpe_info(u8 *eid,
 	if (!tx_pwr_array || (tx_pwr_ext_count && !tx_pwr_ext_array))
 		return eid;
 
-	if (tx_pwr_intrpn == LOCAL_EIRP_PSD || tx_pwr_intrpn == REGULATORY_CLIENT_EIRP_PSD) {
+	if (tx_pwr_intrpn == LOCAL_EIRP_PSD ||
+	    tx_pwr_intrpn == REGULATORY_CLIENT_EIRP_PSD ||
+	    tx_pwr_intrpn == REGULATORY_CLIENT_ADDITIONAL_EIRP_PSD) {
 		total_tx_pwr_count = tx_pwr_count ? 1 << (tx_pwr_count - 1) : 1;
-	} else if (tx_pwr_intrpn == LOCAL_EIRP || tx_pwr_intrpn == REGULATORY_CLIENT_EIRP) {
+	} else if (tx_pwr_intrpn == LOCAL_EIRP ||
+		   tx_pwr_intrpn == REGULATORY_CLIENT_EIRP ||
+		   tx_pwr_intrpn == REGULATORY_CLIENT_ADDITIONAL_EIRP) {
 		total_tx_pwr_count = tx_pwr_count + 1;
 	} else {
 		wpa_printf(MSG_ERROR, "Invalid tx power interpretation:%d", tx_pwr_intrpn);
@@ -7680,7 +7685,9 @@ static u8 *hostapd_add_tpe_info(u8 *eid,
 		*eid++ = tx_pwr_array[i];
 
 #ifdef CONFIG_IEEE80211BE
-	if (tx_pwr_intrpn == LOCAL_EIRP || tx_pwr_intrpn == REGULATORY_CLIENT_EIRP) {
+	if (tx_pwr_intrpn == LOCAL_EIRP ||
+	    tx_pwr_intrpn == REGULATORY_CLIENT_EIRP ||
+	    tx_pwr_intrpn == REGULATORY_CLIENT_ADDITIONAL_EIRP) {
 		if (tx_pwr_ext_count) {
 			if (tx_pwr_ext_count > MAX_EIRP_TPE_POWER_EXT_COUNT) {
 				wpa_printf(MSG_WARNING, "Invalid EIRP tx power extension count:%d",
@@ -7690,7 +7697,9 @@ static u8 *hostapd_add_tpe_info(u8 *eid,
 			*eid++ = tx_pwr_ext_array[0];
 			*length += tx_pwr_ext_count;
 		}
-	} else if (tx_pwr_intrpn == LOCAL_EIRP_PSD || tx_pwr_intrpn == REGULATORY_CLIENT_EIRP_PSD) {
+	} else if (tx_pwr_intrpn == LOCAL_EIRP_PSD ||
+		   tx_pwr_intrpn == REGULATORY_CLIENT_EIRP_PSD ||
+		   tx_pwr_intrpn == REGULATORY_CLIENT_ADDITIONAL_EIRP_PSD) {
 		if (tx_pwr_ext_count) {
 			if (tx_pwr_ext_count > MAX_PSD_TPE_EXT_POWER_COUNT) {
 				wpa_printf(MSG_WARNING, "Invalid PSD tx power extension count:%d",
@@ -8188,12 +8197,21 @@ hostapd_get_chan_width_from_oper_chan_wi
 	return ch_width;
 }
 
+static inline bool
+hostapd_is_additional_tpe(enum max_tx_pwr_interpretation tx_pwr_intrpn)
+{
+	return (tx_pwr_intrpn == REGULATORY_CLIENT_ADDITIONAL_EIRP_PSD ||
+		tx_pwr_intrpn == REGULATORY_CLIENT_ADDITIONAL_EIRP);
+}
+
 static void hostapd_get_eirp_arr_for_6ghz(struct hostapd_iface *iface,
 					  u16 freq,
 					  u8 cen320,
 					  enum chan_width chanwidth,
 					  u8 client_type,
-					  u8 *max_eirp_arr)
+					  u8 *max_eirp_arr,
+					  u8 pwr_mode,
+					  enum max_tx_pwr_interpretation tx_pwr_intrpn)
 {
 	u16 bw, max_bw = channel_width_to_int(chanwidth);
 	u8 i;
@@ -8201,6 +8219,22 @@ static void hostapd_get_eirp_arr_for_6gh
 	for (i = 0, bw = 20; bw <= max_bw; i++, bw *= 2)
 		max_eirp_arr[i] = hostapd_get_eirp_pwr(iface, freq, cen320, bw,
 						       client_type);
+
+	if (pwr_mode == HE_REG_INFO_6GHZ_AP_TYPE_INDOOR_SP &&
+	    !hostapd_is_additional_tpe(tx_pwr_intrpn)) {
+		u8 max_eirp_arr_lpi[TPE_NUM_POWER_SUPP_IN_11BE] = {0};
+
+		if (client_type == NL80211_REG_REGULAR_CLIENT_SP)
+			client_type = NL80211_REG_REGULAR_CLIENT_LPI;
+		else
+			client_type = NL80211_REG_SUBORDINATE_CLIENT_LPI;
+		for (i = 0, bw = 20; bw <= max_bw; i++, bw *= 2) {
+			max_eirp_arr_lpi[i] = hostapd_get_reg_max_eirp(iface, bw,
+								       client_type,
+								       true);
+			max_eirp_arr[i] = MAX(max_eirp_arr[i], max_eirp_arr_lpi[i]);
+		}
+	}
 }
 
 static u8 hostapd_get_num_pwr_levels(struct hostapd_config *iconf)
@@ -8292,7 +8326,8 @@ static void hostapd_fill_eirp_for_ext_tp
 
 static u8 *hostapd_add_eirp_tpe(struct hostapd_data *hapd, u8 client_type,
 				u8 *eid, u8 tx_pwr_cat,
-				enum max_tx_pwr_interpretation tx_pwr_intrpn)
+				enum max_tx_pwr_interpretation tx_pwr_intrpn,
+				u8 pwr_mode)
 {
 	struct hostapd_iface *iface = hapd->iface;
 	struct hostapd_config *iconf = iface->conf;
@@ -8319,7 +8354,9 @@ static u8 *hostapd_add_eirp_tpe(struct h
 				      cen320,
 				      ch_width,
 				      client_type,
-				      tx_pwr_array);
+				      tx_pwr_array,
+				      pwr_mode,
+				      tx_pwr_intrpn);
 	hostapd_fill_eirp_for_ext_tpe(iconf, tx_pwr_ext_array, tx_pwr_array,
 				      &tx_pwr_ext_count, num_pwr_levels);
 #else
@@ -8333,11 +8370,14 @@ static u8 *hostapd_add_eirp_tpe(struct h
 				    tx_pwr_ext_array, tx_pwr_cat);
 }
 
-static s8 get_psd_for_chan_idx(struct hostapd_iface *iface,
+static s8 get_psd_for_chan_idx(struct hostapd_data *hapd,
 			       int non_11be_start_idx,
 			       struct ieee_chan_data chan_data,
-			       u8 client_mode)
+			       u8 client_mode,
+			       u8 pwr_mode,
+			       enum max_tx_pwr_interpretation tx_pwr_intrpn)
 {
+	struct hostapd_iface *iface = hapd->iface;
 	u8 ap_pwr_type = iface->conf->he_6ghz_reg_pwr_type;
 	s8 reg_psd, chan_psd;
 	s8 eirp_for_20mhz;
@@ -8354,6 +8394,17 @@ static s8 get_psd_for_chan_idx(struct ho
 					      client_mode);
 	chan_psd = (eirp_for_20mhz - (CONV_20MHZ_EIRP_TO_PSD_IN_DBM * 2)) / 2;
 
+	if (pwr_mode == HE_REG_INFO_6GHZ_AP_TYPE_INDOOR_SP &&
+	    !hostapd_is_additional_tpe(tx_pwr_intrpn)) {
+		if (client_mode == NL80211_REG_REGULAR_CLIENT_SP)
+			client_mode = NL80211_REG_REGULAR_CLIENT_LPI;
+		else
+			client_mode = NL80211_REG_SUBORDINATE_CLIENT_LPI;
+
+		reg_psd = chan_data.channels[non_11be_start_idx].psd_values[client_mode];
+		chan_psd = MAX(chan_psd, reg_psd);
+	}
+
 	return chan_psd;
 }
 
@@ -8361,7 +8412,8 @@ static int get_psd_values(struct hostapd
 			  int chan_start_idx, int non_11be_chan_count,
 			  int total_chan_count, u8 *tx_pwr_count,
 			  s8 *tx_pwr_array, u8 *tx_pwr_ext_count,
-			  s8 *tx_pwr_ext_array, u8 client_mode, struct ieee_chan_data chan_data)
+			  s8 *tx_pwr_ext_array, u8 client_mode, struct ieee_chan_data chan_data,
+			  u8 pwr_mode, enum max_tx_pwr_interpretation tx_pwr_intrpn)
 {
 	struct hostapd_iface *iface = hapd->iface;
 	struct hostapd_hw_modes *mode = iface->current_mode;
@@ -8381,7 +8433,8 @@ static int get_psd_values(struct hostapd
 		return -1;
 	}
 
-	start_chan_psd = get_psd_for_chan_idx(iface, non_11be_start_idx, chan_data, client_mode);
+	start_chan_psd = get_psd_for_chan_idx(hapd, non_11be_start_idx, chan_data,
+					      client_mode, pwr_mode, tx_pwr_intrpn);
 
 	for (i = non_11be_start_idx; i < non_11be_start_idx + non_11be_chan_count;
 	     i++, non11be_chan_pos++) {
@@ -8390,7 +8443,8 @@ static int get_psd_values(struct hostapd
 			return -1;
 		}
 		non_be_chan_index_map |= BIT(non11be_chan_pos);
-		chan_psd = get_psd_for_chan_idx(iface, i, chan_data, client_mode);
+		chan_psd = get_psd_for_chan_idx(hapd, i, chan_data, client_mode,
+						pwr_mode, tx_pwr_intrpn);
 		*tx_pwr_array = chan_psd * 2;
 		tx_pwr_array++;
 		if (!is_different_psd && (start_chan_psd != chan_psd))
@@ -8415,7 +8469,8 @@ static int get_psd_values(struct hostapd
 			 */
 			*tx_pwr_ext_array = RNR_20_MHZ_PSD_MAX_TXPOWER;
 		} else {
-			chan_psd = get_psd_for_chan_idx(iface, i, chan_data, client_mode);
+			chan_psd = get_psd_for_chan_idx(hapd, i, chan_data, client_mode,
+							pwr_mode, tx_pwr_intrpn);
 			*tx_pwr_ext_array = chan_psd * 2;;
 		}
 		tx_pwr_ext_array++;
@@ -8440,7 +8495,8 @@ static int get_psd_values(struct hostapd
 
 static u8 *hostapd_add_psd_tpe(struct hostapd_data *hapd, u8 client_mode,
 			       u8 *eid, u8 tx_pwr_cat,
-			       enum max_tx_pwr_interpretation tx_pwr_intrpn)
+			       enum max_tx_pwr_interpretation tx_pwr_intrpn,
+			       u8 pwr_mode)
 {
 	s8 tx_pwr_ext_array[MAX_PSD_TPE_EXT_POWER_COUNT] = {0};
 	int non_11be_chan_count = 0, total_chan_count = 0;
@@ -8462,7 +8518,7 @@ static u8 *hostapd_add_psd_tpe(struct ho
 	if (get_psd_values(hapd, non_11be_start_idx, chan_start_idx,
 			   non_11be_chan_count, total_chan_count, &tx_pwr_count,
 			   tx_pwr_array, &tx_pwr_ext_count, tx_pwr_ext_array,
-			   client_mode, chan_data)) {
+			   client_mode, chan_data, pwr_mode, tx_pwr_intrpn)) {
 		wpa_printf(MSG_ERROR, "failed to get the PSD values");
 		goto free;
 	}
@@ -8481,6 +8537,89 @@ free:
 	return eid;
 }
 
+/**
+ * hostapd_add_6g_tpe() - For the given power mode, add the required TPE IEs
+ * @hapd: hostapd BSS data structure
+ * @eid: Pointer to position at which TPE IE is to be added
+ * @pwr_mode: Current power mode of the AP
+ *
+ * Return: void
+ *
+ * For an AP, operating in LPI or VLP power mode, the TPEs to be advertised
+ * in the beacon are
+ * TPE1: Max Tx Pwr Category = Default,
+ *	 Max Tx Pwr Interpretation = Regulatory Client EIRP PSD
+ * TPE2: Max Tx Pwr Category = Subordinate,
+ *	 Max Tx Pwr Interpretation = Regulatory Client EIRP PSD
+ * For an AP, operating in SP power mode, the TPEs to be advertised in the
+ * beacon are
+ * TPE1: Max Tx Pwr Category = Default,
+ *	 Max Tx Pwr Interpretation = Regulatory Client EIRP PSD
+ * TPE2: Max Tx Pwr Category = Default,
+ *	 Max Tx Pwr Interpretation = Regulatory Client EIRP
+ * For a composite AP, the TPEs to be advertised in the beacon are
+ * TPE1: Max Tx Pwr Category = Default,
+ *	 Max Tx Pwr Interpretation =
+ *		Regulatory Client EIRP PSD i.e. max(LPI client power, SP client power)
+ * TPE2: Max Tx Pwr Category = Default,
+ *	 Max Tx Pwr Interpretation =
+ *		Regulatory Client EIRP i.e. max(LPI client power, SP client power)
+ * TPE3: Max Tx Pwr Category = Subordinate,
+ *	 Max Tx Pwr Interpretation =
+ *		Regulatory Client EIRP PSD i.e. max(LPI client power, SP client power)
+ * TPE4: Max Tx Pwr Category = Default,
+ *	 Max Tx Pwr Interpretation =
+ *		Additional Regulatory Client EIRP PSD i.e. min(AFC - 6, Reg SP client power)
+ * TPE5: Max Tx Pwr Category = Default,
+ *	 Max Tx Pwr Interpretation =
+ *		Additional Regulatory Client EIRP i.e. SP client power
+ *
+ */
+static void hostapd_add_6g_tpe(struct hostapd_data *hapd, u8 **eid, u8 pwr_mode)
+{
+	if (pwr_mode == HE_REG_INFO_6GHZ_AP_TYPE_SP && hapd->iconf->enable_6ghz_composite_ap)
+		pwr_mode = HE_REG_INFO_6GHZ_AP_TYPE_INDOOR_SP;
+
+	switch(pwr_mode) {
+	case HE_REG_INFO_6GHZ_AP_TYPE_INDOOR:
+	case HE_REG_INFO_6GHZ_AP_TYPE_VLP:
+		*eid = hostapd_add_psd_tpe(hapd, NL80211_REG_REGULAR_CLIENT_LPI,
+					   *eid, REG_DEFAULT_CLIENT,
+					   REGULATORY_CLIENT_EIRP_PSD, pwr_mode);
+		*eid = hostapd_add_psd_tpe(hapd, NL80211_REG_SUBORDINATE_CLIENT_LPI,
+					   *eid, REG_SUBORDINATE_CLIENT,
+					   REGULATORY_CLIENT_EIRP_PSD, pwr_mode);
+		break;
+	case HE_REG_INFO_6GHZ_AP_TYPE_SP:
+		*eid = hostapd_add_psd_tpe(hapd, NL80211_REG_REGULAR_CLIENT_SP,
+					   *eid, REG_DEFAULT_CLIENT,
+					   REGULATORY_CLIENT_EIRP_PSD, pwr_mode);
+		*eid = hostapd_add_eirp_tpe(hapd, NL80211_REG_REGULAR_CLIENT_SP,
+					    *eid, REG_DEFAULT_CLIENT,
+					    REGULATORY_CLIENT_EIRP, pwr_mode);
+		break;
+	case HE_REG_INFO_6GHZ_AP_TYPE_INDOOR_SP:
+		*eid = hostapd_add_psd_tpe(hapd, NL80211_REG_REGULAR_CLIENT_SP,
+					   *eid, REG_DEFAULT_CLIENT,
+					   REGULATORY_CLIENT_EIRP_PSD, pwr_mode);
+		*eid = hostapd_add_eirp_tpe(hapd, NL80211_REG_REGULAR_CLIENT_SP,
+					    *eid, REG_DEFAULT_CLIENT,
+					    REGULATORY_CLIENT_EIRP, pwr_mode);
+		*eid = hostapd_add_psd_tpe(hapd, NL80211_REG_SUBORDINATE_CLIENT_SP,
+					   *eid, REG_SUBORDINATE_CLIENT,
+					   REGULATORY_CLIENT_EIRP_PSD, pwr_mode);
+		*eid = hostapd_add_psd_tpe(hapd, NL80211_REG_REGULAR_CLIENT_SP,
+					   *eid, REG_DEFAULT_CLIENT,
+					   REGULATORY_CLIENT_ADDITIONAL_EIRP_PSD,
+					   pwr_mode);
+		*eid = hostapd_add_eirp_tpe(hapd, NL80211_REG_REGULAR_CLIENT_SP,
+					    *eid, REG_DEFAULT_CLIENT,
+					    REGULATORY_CLIENT_ADDITIONAL_EIRP,
+					    pwr_mode);
+		break;
+	}
+}
+
 u8 *hostapd_eid_txpower_envelope(struct hostapd_data *hapd, u8 *eid)
 {
 	s8 eirp_tx_pwr_array[MAX_TPE_EIRP_NUM_POWER_SUPPORTED];
@@ -8499,33 +8638,8 @@ u8 *hostapd_eid_txpower_envelope(struct
 		return eid;
 
 #ifdef CONFIG_IEEE80211AX
-	/* IEEE Std 802.11ax-2021, Annex E.2.7 (6 GHz band in the United
-	 * States): An AP that is an Indoor Access Point per regulatory rules
-	 * shall send at least two Transmit Power Envelope elements in Beacon
-	 * and Probe Response frames as follows:
-	 *  - Maximum Transmit Power Category subfield = Default;
-	 *	Unit interpretation = Regulatory client EIRP PSD
-	 *  - Maximum Transmit Power Category subfield = Subordinate Device;
-	 *	Unit interpretation = Regulatory client EIRP PSD
-	 */
 	if (is_6ghz_op_class(iconf->op_class)) {
-		pwr_mode = NL80211_REG_REGULAR_CLIENT_LPI + iconf->he_6ghz_reg_pwr_type;
-		eid = hostapd_add_psd_tpe(hapd, pwr_mode, eid, REG_DEFAULT_CLIENT,
-					  REGULATORY_CLIENT_EIRP_PSD);
-
-		/* Indoor Access Point must include an additional TPE for
-		 * subordinate devices */
-		if (he_reg_is_indoor(iconf->he_6ghz_reg_pwr_type)) {
-			pwr_mode = NL80211_REG_SUBORDINATE_CLIENT_LPI;
-			eid = hostapd_add_psd_tpe(hapd, pwr_mode, eid, REG_SUBORDINATE_CLIENT,
-						  REGULATORY_CLIENT_EIRP_PSD);
-		}
-
-		if (he_reg_is_sp(iconf->he_6ghz_reg_pwr_type))
-			eid = hostapd_add_eirp_tpe(hapd, pwr_mode, eid,
-						   REG_DEFAULT_CLIENT,
-						   REGULATORY_CLIENT_EIRP);
-
+		hostapd_add_6g_tpe(hapd, &eid, iconf->he_6ghz_reg_pwr_type);
 		return eid;
 	}
 #endif /* CONFIG_IEEE80211AX */
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -2177,6 +2177,8 @@ enum max_tx_pwr_interpretation {
 	LOCAL_EIRP_PSD = 1,
 	REGULATORY_CLIENT_EIRP = 2,
 	REGULATORY_CLIENT_EIRP_PSD = 3,
+	REGULATORY_CLIENT_ADDITIONAL_EIRP = 4,
+	REGULATORY_CLIENT_ADDITIONAL_EIRP_PSD = 5,
 };
 
 /*
