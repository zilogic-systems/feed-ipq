From 326bda2a9b6ba9bcd345667ca3e63f961dea44bf Mon Sep 17 00:00:00 2001
From: Karthik <quic_karm@quicinc.com>
Date: Wed, 16 Oct 2024 11:23:53 +0530
Subject: [PATCH] UPSTREAM: HOSTAPD: add ML probing support for MBSSID

For beacon Add ML IE for Non-tx profie inside MBSSID non-tx bss
profile sub element if it is an MLD.

For Probe repsonse Solicited MLD APs MLE should be added in the frame body
of the multi-link probe response, whose location is outside of the Multiple
BSSID element carried in the frame. The AP MLD ID Present subfield
of the Presence Bitmap subfield of the Basic Multi-Link element shall be
set to 1. The AP MLD ID subfield of the Common Info field of the
Basic Multi-Link element shall be present, and shall be set to the same
value as the BSSID Index subfield of the Multiple-BSSID Index element
carried in the Nontransmitted BSSID Profile subelement of the
Multiple BSSID element.

Parse MLD ID from ML probe request and redirect the frame to the NON-TX
BSS corresponding to MLD ID

Fixes: 563982bae969 ("hostapd: handle ML Probe request for Non-Transmitting BSS")

Patch-depdendency: r28-hostapd-handle-ML-Probe-request-for-Non-Transmitting.patch

Patch-work:

Feature: ML Probe

Change-Id: I518298ab36475f730743f5962489f602e4f3105b
Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Signed-off-by: Karthik <quic_karm@quicinc.com>
---
 src/ap/beacon.c     | 84 +++++++++++++++++++++++++++++----------------
 src/ap/ieee802_11.c | 12 ++++---
 2 files changed, 61 insertions(+), 35 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -760,6 +760,7 @@ static size_t hostapd_probe_resp_elems_l
 					   struct probe_resp_params *params)
 {
 	size_t buflen = 0;
+	struct hostapd_data *hapd_probed = params->mld_ap? params->mld_ap : hapd;
 
 #ifdef CONFIG_WPS
 	if (hapd->wps_probe_resp_ie)
@@ -788,26 +789,38 @@ static size_t hostapd_probe_resp_elems_l
 
 #ifdef CONFIG_IEEE80211BE
 	if (hapd->iconf->ieee80211be && !hapd->conf->disable_11be) {
-		struct hostapd_data *ml_elem_ap =
-			params->mld_ap ? params->mld_ap : hapd;
 
 		buflen += hostapd_eid_eht_capab_len(hapd, IEEE80211_MODE_AP);
 		buflen += 3 + sizeof(struct ieee80211_eht_operation);
 		if (hapd->iconf->punct_bitmap)
 			buflen += EHT_OPER_DISABLED_SUBCHAN_BITMAP_SIZE;
 
-		if (ml_elem_ap->conf->mld_ap) {
+		if (params->mld_ap && params->mld_ap->conf->mld_ap) {
 			buflen += hostapd_eid_eht_ml_beacon_len(
-				ml_elem_ap, params->mld_info, !!params->mld_ap,
+				params->mld_ap, params->mld_info, true,
+				WLAN_FC_STYPE_PROBE_RESP);
+			buflen += hostapd_eid_eht_ml_beacon_len(
+				hapd, NULL, false,
 				WLAN_FC_STYPE_PROBE_RESP);
 
 			/* For Max Channel Switch Time element during channel
 			 * switch */
 			buflen += 6;
 
-			if (hapd->eht_mld_link_removal_inprogress)
-				buflen += hostapd_eid_eht_ml_reconfig_len(ml_elem_ap);
+		} else if (hapd->conf->mld_ap) {
+			buflen += hostapd_eid_eht_ml_beacon_len(
+				hapd, params->mld_info, false,
+				WLAN_FC_STYPE_PROBE_RESP);
+			/* For Max Channel Switch Time element
+			 * during channel switch
+			 */
+			buflen += 6;
 		}
+
+		/* ML reconfigure feature */
+		if (hapd->eht_mld_link_removal_inprogress)
+			buflen += hostapd_eid_eht_ml_reconfig_len(hapd);
+
 		/* QCN Vendor IE for 240MHz */
 		if (is_5ghz_freq(hapd->iface->freq))
 			buflen += (6 + 2 + 4 +
@@ -817,7 +830,7 @@ static size_t hostapd_probe_resp_elems_l
 	/* TODO: hanlde ML probe len */
 #endif /* CONFIG_IEEE80211BE */
 
-	buflen += hostapd_eid_mbssid_len(hapd, WLAN_FC_STYPE_PROBE_RESP, NULL,
+	buflen += hostapd_eid_mbssid_len(hapd_probed, WLAN_FC_STYPE_PROBE_RESP, NULL,
 					 params->known_bss,
 					 params->known_bss_len, NULL);
 	buflen += hostapd_eid_rnr_len(hapd, WLAN_FC_STYPE_PROBE_RESP, true);
@@ -839,6 +852,7 @@ static u8 * hostapd_probe_resp_fill_elem
 {
 	u8 *csa_pos;
 	u8 *epos;
+	struct hostapd_data *hapd_probed = params->mld_ap ? params->mld_ap : hapd;
 
 	epos = pos + len;
 
@@ -875,7 +889,7 @@ static u8 * hostapd_probe_resp_fill_elem
 
 	pos = hostapd_get_rsne(hapd, pos, epos - pos);
 	pos = hostapd_eid_bss_load(hapd, pos, epos - pos);
-	pos = hostapd_eid_mbssid(hapd, pos, epos, WLAN_FC_STYPE_PROBE_RESP, 0,
+	pos = hostapd_eid_mbssid(hapd_probed, pos, epos, WLAN_FC_STYPE_PROBE_RESP, 0,
 				 NULL, params->known_bss, params->known_bss_len,
 				 NULL, NULL, NULL, 0, NULL);
 	pos = hostapd_eid_rm_enabled_capab(hapd, pos, epos - pos);
@@ -965,17 +979,23 @@ static u8 * hostapd_probe_resp_fill_elem
 
 #ifdef CONFIG_IEEE80211BE
 	if (hapd->iconf->ieee80211be && !hapd->conf->disable_11be) {
-		struct hostapd_data *ml_elem_ap =
-			params->mld_ap ? params->mld_ap : hapd;
-
-		if (ml_elem_ap->conf->mld_ap) {
+		if (params->mld_ap && params->mld_ap->conf->mld_ap) {
 			pos = hostapd_eid_eht_ml_beacon(
-				ml_elem_ap, params->mld_info,
-				pos, !!params->mld_ap, WLAN_FC_STYPE_PROBE_RESP);
+				params->mld_ap, params->mld_info,
+				pos, true, WLAN_FC_STYPE_PROBE_RESP);
 
-			if (hapd->eht_mld_link_removal_inprogress)
-				pos = hostapd_eid_eht_reconf_ml(ml_elem_ap, pos);
-		}
+			if (hapd->conf->mld_ap)
+				pos = hostapd_eid_eht_ml_beacon(
+					hapd, NULL,
+					pos, false, WLAN_FC_STYPE_PROBE_RESP);
+		} else if (hapd->conf->mld_ap)
+			pos = hostapd_eid_eht_ml_beacon(hapd,
+				params->mld_info, pos, false,
+				WLAN_FC_STYPE_PROBE_RESP);
+
+		/* ML reconfigure feature */
+		if (hapd->eht_mld_link_removal_inprogress)
+			pos = hostapd_eid_eht_reconf_ml(hapd, pos);
 
 		pos = hostapd_eid_eht_capab(hapd, pos, IEEE80211_MODE_AP);
 		pos = hostapd_eid_eht_operation(hapd, pos, IEEE80211_MODE_AP);
@@ -1056,8 +1076,8 @@ static void hostapd_gen_probe_resp(struc
 {
 	u8 *pos;
 	size_t buflen;
-	struct hostapd_data *hapd_probed = hapd;
 
+	struct hostapd_data *hapd_probed = params->mld_ap? params->mld_ap : hapd;
 	hapd = hostapd_mbssid_get_tx_bss(hapd);
 
 #define MAX_PROBERESP_LEN 768
@@ -1120,19 +1140,23 @@ static void hostapd_fill_probe_resp_ml_p
 		   "MLD: Got ML probe request with AP MLD ID %d for links %04x",
 		   mld_id, links);
 
+	if ((hapd == hostapd_mbssid_get_tx_bss(hapd)) && mld_id > 0) {
+		hapd = hostapd_get_mbssid_bss_by_idx(hapd, mld_id);
+		if (hapd)
+			params->mld_ap = hapd;
+		else {
+			wpa_printf(MSG_INFO,
+				   "Ignore Probe Request from " MACSTR
+				   " since No Matched Non-tx vap found for BSSID Index %d",
+				   MAC2STR(mgmt->sa), mld_id);
+			goto fail;
+		}
+	}
+
 	for_each_mld_link(link, hapd) {
 		struct mld_link_info *link_info;
 		u8 mld_link_id = link->mld_link_id;
 
-		/*
-		 * Set mld_ap iff the ML probe request explicitly
-		 * requested a specific MLD ID. In that case, the targeted
-		 * AP may have been a nontransmitted BSSID on the same
-		 * interface.
-		 */
-		if (mld_id != -1 && link->iface == hapd->iface)
-			params->mld_ap = link;
-
 		/* Never duplicate main Probe Response frame body */
 		if (link == hapd)
 			continue;
@@ -1150,7 +1174,7 @@ static void hostapd_fill_probe_resp_ml_p
 			   mld_link_id, link_info->resp_sta_profile_len);
 	}
 
-	if (mld_id != -1 && !params->mld_ap) {
+	if (mld_id > 0 && !params->mld_ap) {
 		wpa_printf(MSG_DEBUG,
 			   "MLD: No nontransmitted BSSID for MLD ID %d",
 			   mld_id);
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -9625,14 +9625,15 @@ static size_t hostapd_eid_mbssid_elem_le
 }
 
 
-size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd, u32 frame_type,
+size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd_probed, u32 frame_type,
 			      u8 *elem_count, const u8 *known_bss,
 			      size_t known_bss_len, size_t *rnr_len)
 {
 	size_t len = 0, bss_index = 1;
 	size_t num_bss;
+	struct hostapd_data *hapd;
 
-	hapd = hostapd_mbssid_get_tx_bss(hapd);
+	hapd = hostapd_mbssid_get_tx_bss(hapd_probed);
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_type != WLAN_FC_STYPE_BEACON &&
@@ -9656,7 +9657,7 @@ size_t hostapd_eid_mbssid_len(struct hos
 	while (bss_index < num_bss) {
 		size_t rnr_count = bss_index;
 
-		len += hostapd_eid_mbssid_elem_len(hapd, frame_type,
+		len += hostapd_eid_mbssid_elem_len(hapd_probed, frame_type,
 						   &bss_index, known_bss,
 						   known_bss_len, num_bss);
 
@@ -9864,7 +9865,7 @@ static u8 * hostapd_eid_mbssid_elem(stru
 }
 
 
-u8 * hostapd_eid_mbssid(struct hostapd_data *hapd, u8 *eid, u8 *end,
+u8 * hostapd_eid_mbssid(struct hostapd_data *hapd_probed, u8 *eid, u8 *end,
 			unsigned int frame_stype, u8 elem_count,
 			u8 **elem_offset,
 			const u8 *known_bss, size_t known_bss_len, u8 *rnr_eid,
@@ -9875,6 +9876,7 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 	u8 elem_index = 0, *rnr_start_eid = rnr_eid;
 	bool add_rnr;
 	size_t num_bss;
+	struct hostapd_data *hapd = hostapd_mbssid_get_tx_bss(hapd_probed);
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_stype != WLAN_FC_STYPE_BEACON &&
@@ -9909,7 +9911,7 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 			elem_offset[elem_index] = eid;
 			elem_index = elem_index + 1;
 		}
-		eid = hostapd_eid_mbssid_elem(hapd, eid, end, frame_stype,
+		eid = hostapd_eid_mbssid_elem(hapd_probed, eid, end, frame_stype,
 					      hostapd_max_bssid_indicator(hapd),
 					      &bss_index, elem_count,
 					      known_bss, known_bss_len,
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -183,6 +183,31 @@ u8 hostapd_max_bssid_indicator(struct ho
 	return max_bssid_ind;
 }
 
+size_t hostapd_get_mbssid_max_num_bss(struct hostapd_data *hapd)
+{
+	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1)
+		return 1;
+
+	if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+		return hapd->mbssid_group->num_bss;
+	} else {
+		return hapd->iface->num_bss;
+	}
+}
+
+struct hostapd_data *
+hostapd_get_mbssid_bss_by_idx(struct hostapd_data *hapd, size_t idx)
+{
+	if (idx >= hostapd_get_mbssid_max_num_bss(hapd))
+		return NULL;
+
+	if (hapd->iconf->mbssid == MULTI_MBSSID_GROUP_ENABLED) {
+		return hostapd_get_multi_group_bss(hapd->mbssid_group, idx);
+	} else {
+		return hapd->iface->bss[idx];
+	}
+}
+
 void hostapd_reconfig_encryption(struct hostapd_data *hapd)
 {
 	if (hapd->wpa_auth)
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -959,6 +959,9 @@ void fst_hostapd_fill_iface_obj(struct h
 int hostapd_set_acl(struct hostapd_data *hapd);
 struct hostapd_data * hostapd_mbssid_get_tx_bss(struct hostapd_data *hapd);
 unsigned int hostapd_mbssid_get_bss_index(struct hostapd_data *hapd);
+size_t hostapd_get_mbssid_max_num_bss(struct hostapd_data *hapd);
+struct hostapd_data *
+hostapd_get_mbssid_bss_by_idx(struct hostapd_data *hapd, size_t idx);
 struct hostapd_data * hostapd_mld_get_link_bss(struct hostapd_data *hapd,
 					       u8 link_id);
 int hostapd_link_remove(struct hostapd_data *hapd, u32 count);
