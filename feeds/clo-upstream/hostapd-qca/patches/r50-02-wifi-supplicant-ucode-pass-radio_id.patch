From 5ffdb338616c89201a92ba272cbdf350ba7915c0 Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Tue, 22 Oct 2024 22:34:17 +0530
Subject: [PATCH] QSDK: CP: wifi: supplicant: ucode: pass radio_id

Pass radio id reference for state and event callbacks so that the
corresponding radio would be invoked for hostapd notify in ucode.

Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
Co-developed-by: Nagarajan Maran <quic_nmaran@quicinc.com>
Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 src/utils/ucode.c      |  3 +++
 wpa_supplicant/ucode.c | 32 ++++++++++++++++++++++++++++++--
 wpa_supplicant/ucode.h |  1 +
 3 files changed, 34 insertions(+), 2 deletions(-)

--- a/src/utils/ucode.c
+++ b/src/utils/ucode.c
@@ -195,6 +195,9 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm
 	center_idx = (center_idx - channel) * 5 + freq_val;
 	ucv_object_add(ret, "center_freq1", ucv_int64_new(center_idx));
 
+	wpa_printf(MSG_INFO, "[debug] %s: op_c: %d, ch:%d, hw_mode:%d, mode:%s, sec_ch:%d\n freq:%d, center_seg0:%d \n",
+		__func__, op_class, channel, hw_mode, modestr, sec_channel, freq_val, center_idx);
+
 out:
 	return ret;
 }
--- a/wpa_supplicant/ucode.c
+++ b/wpa_supplicant/ucode.c
@@ -13,6 +13,25 @@ static uc_resource_type_t *global_type,
 static uc_value_t *global, *iface_registry;
 static uc_vm_t *vm;
 
+void wpas_ucode_update_radio_id(const char *ifname, int id) {
+	struct wpa_supplicant *wpa_s = NULL;
+	for (wpa_s = wpa_global->ifaces; wpa_s; wpa_s = wpa_s->next)
+		if (!strcmp(wpa_s->ifname, ifname))
+			break;
+
+	if (!wpa_s) {
+		wpa_printf(MSG_ERROR, "%s: wpa_s data not found", __func__);
+		return;
+	}
+
+	if (id == -1)
+		wpa_s->ucode.radio_bitmap = 0;
+	else
+		wpa_s->ucode.radio_bitmap |= BIT(id);
+	wpa_printf(MSG_INFO, "%s: updated radio_id %d for %s", __func__,
+		   wpa_s->ucode.radio_bitmap, wpa_s->ifname);
+}
+
 static uc_value_t *
 wpas_ucode_iface_get_uval(struct wpa_supplicant *wpa_s)
 {
@@ -27,6 +46,15 @@ wpas_ucode_iface_get_uval(struct wpa_sup
 	return val;
 }
 
+static bool
+is_ml_interface_already_created(const char *ifname) {
+	struct wpa_supplicant *wpa_s;
+	for (wpa_s = wpa_global->ifaces; wpa_s; wpa_s = wpa_s->next)
+		if (!strcmp(wpa_s->ifname, ifname))
+			return true;
+	return false;
+}
+
 static void
 wpas_ucode_update_interfaces(void)
 {
@@ -77,6 +105,8 @@ void wpas_ucode_update_state(struct wpa_
 	const char *state;
 	uc_value_t *val;
 
+	wpa_printf(MSG_INFO, "%s: radio_bitmap:%d", __func__,wpa_s->ucode.radio_bitmap);
+
 	val = wpa_ucode_registry_get(iface_registry, wpa_s->ucode.idx);
 	if (!val)
 		return;
@@ -86,9 +116,10 @@ void wpas_ucode_update_state(struct wpa_
 
 	state = wpa_supplicant_state_txt(wpa_s->wpa_state);
 	uc_value_push(ucv_get(ucv_string_new(wpa_s->ifname)));
+	uc_value_push(ucv_get(ucv_int64_new(wpa_s->ucode.radio_bitmap)));
 	uc_value_push(ucv_get(val));
 	uc_value_push(ucv_get(ucv_string_new(state)));
-	ucv_put(wpa_ucode_call(3));
+	ucv_put(wpa_ucode_call(4));
 	ucv_gc(vm);
 }
 
@@ -96,6 +127,7 @@ void wpas_ucode_event(struct wpa_supplic
 {
 	const char *state;
 	uc_value_t *val;
+	s8 hw_idx;
 
 	if (event != EVENT_CH_SWITCH_STARTED)
 		return;
@@ -108,6 +140,13 @@ void wpas_ucode_event(struct wpa_supplic
 		return;
 
 	uc_value_push(ucv_get(ucv_string_new(wpa_s->ifname)));
+	hw_idx = wpa_get_hw_idx_by_freq(wpa_s, data->ch_switch.freq);
+	if (hw_idx == -1)
+		hw_idx = 0;
+
+	wpa_printf(MSG_INFO, "%s: updated hw_id as %d", __func__,hw_idx);
+	uc_value_push(ucv_get(ucv_int64_new(hw_idx)));
+
 	uc_value_push(ucv_get(val));
 	uc_value_push(ucv_get(ucv_string_new(event_to_string(event))));
 	val = ucv_object_new(vm);
@@ -121,7 +160,7 @@ void wpas_ucode_event(struct wpa_supplic
 		ucv_object_add(val, "center_freq2", ucv_int64_new(data->ch_switch.cf2));
 	}
 
-	ucv_put(wpa_ucode_call(4));
+	ucv_put(wpa_ucode_call(5));
 	ucv_gc(vm);
 }
 
@@ -141,12 +180,23 @@ uc_wpas_add_iface(uc_vm_t *vm, size_t na
 	uc_value_t *bridge = ucv_object_get(info, "bridge", NULL);
 	uc_value_t *config = ucv_object_get(info, "config", NULL);
 	uc_value_t *ctrl = ucv_object_get(info, "ctrl", NULL);
+	uc_value_t *mld    = ucv_object_get(info, "mld", NULL);
+	uc_value_t *radio_id = uc_fn_arg(1);
 	struct wpa_interface iface;
+	int id;
 	int ret = -1;
+	const char *mld_name;
 
 	if (ucv_type(info) != UC_OBJECT)
 		goto out;
 
+	if (ucv_type(radio_id) != UC_INTEGER) {
+		wpa_printf(MSG_ERROR, "%s: failed to fetch radio_id", __func__);
+		goto out;
+	}
+
+        id = ucv_int64_get(radio_id);
+
 	iface = (struct wpa_interface){
 		.driver = "nl80211",
 		.ifname = ucv_string_get(ifname),
@@ -174,9 +224,22 @@ uc_wpas_add_iface(uc_vm_t *vm, size_t na
 	if (!iface.ifname || !iface.confname)
 		goto out;
 
+	if (mld) {
+		mld_name = ucv_string_get(mld);
+		wpa_printf(MSG_INFO, "%s: mld is %s", __func__, mld_name);
+		if (is_ml_interface_already_created(iface.ifname)) {
+			wpa_printf(MSG_INFO, "going to update interface");
+			ret = 0;
+			goto update;
+		}
+	}
+
 	ret = wpa_supplicant_add_iface(wpa_global, &iface, 0) ? 0 : -1;
 	wpas_ucode_update_interfaces();
 
+update:
+	wpas_ucode_update_radio_id(iface.ifname, id);
+
 out:
 	return ucv_int64_new(ret);
 }
@@ -212,6 +275,9 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t
 	struct wpa_supplicant *wpa_s = uc_fn_thisval("wpas.iface");
 	struct wpa_bss *bss;
 	uc_value_t *ret, *val;
+	uc_value_t *radio_id = uc_fn_arg(0);
+	int freq, hw_idx, i;
+	struct wpa_mlo_signal_info mlo_si = {0};
 
 	if (!wpa_s)
 		return NULL;
@@ -221,6 +287,31 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t
 	val = ucv_string_new(wpa_supplicant_state_txt(wpa_s->wpa_state));
 	ucv_object_add(ret, "state", ucv_get(val));
 
+	hw_idx = ucv_int64_get(radio_id);
+
+	if (wpa_s->wpa_state == WPA_COMPLETED && wpa_s->valid_links) {
+		wpa_printf(MSG_INFO, "%s: wpa_s->valid_links=%d and hw_idx %d", __func__, wpa_s->valid_links, hw_idx);
+		for_each_link(wpa_s->valid_links, i) {
+			freq = wpa_s->links[i].freq;
+			wpa_printf(MSG_INFO, "%s: freq: %d for link_id %d", __func__, freq, i);
+			if ( hw_idx == wpa_get_hw_idx_by_freq(wpa_s, freq )) {
+				ucv_object_add(ret, "frequency", ucv_int64_new(freq));
+				if (wpa_drv_mlo_signal_poll(wpa_s, &mlo_si) == 0) {
+					if (mlo_si.links[i].chanwidth != CHAN_WIDTH_UNKNOWN) {
+						ucv_object_add(ret, "chan_width", ucv_int64_new(mlo_si.links[i].chanwidth));
+						ucv_object_add(ret, "center_freq1", ucv_int64_new(mlo_si.links[i].center_frq1));
+						ucv_object_add(ret, "center_freq2", ucv_int64_new(mlo_si.links[i].center_frq2));
+						wpa_printf(MSG_INFO, "%s: status frequency filled %d width %d cf1 %d cf2 %d for radio_id %d", __func__, freq,
+						mlo_si.links[i].chanwidth, mlo_si.links[i].center_frq1, mlo_si.links[i].center_frq2, hw_idx);
+					}
+				} else {
+						wpa_printf(MSG_ERROR, "%s: error getting signal poll");
+				}
+			}
+		}
+		goto out;
+	}
+
 	bss = wpa_s->current_bss;
 	if (bss) {
 		int sec_chan = 0;
@@ -251,7 +342,7 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t
 		ucv_object_add(ret, "frequency", ucv_int64_new(ifmsh->freq));
 	}
 #endif
-
+out:
 	return ret;
 }
 
--- a/wpa_supplicant/ucode.h
+++ b/wpa_supplicant/ucode.h
@@ -10,6 +10,7 @@ struct wpa_supplicant;
 struct wpas_ucode_bss {
 #ifdef UCODE_SUPPORT
 	unsigned int idx;
+	int radio_bitmap;
 #endif
 };
 
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -518,13 +518,8 @@ static inline int wpa_drv_signal_monitor
 int wpa_drv_signal_poll(struct wpa_supplicant *wpa_s,
 			struct wpa_signal_info *si);
 
-static inline int wpa_drv_mlo_signal_poll(struct wpa_supplicant *wpa_s,
-					  struct wpa_mlo_signal_info *mlo_si)
-{
-	if (wpa_s->driver->mlo_signal_poll)
-		return wpa_s->driver->mlo_signal_poll(wpa_s->drv_priv, mlo_si);
-	return -1;
-}
+int wpa_drv_mlo_signal_poll(struct wpa_supplicant *wpa_s,
+			    struct wpa_mlo_signal_info *mlo_si);
 
 static inline int wpa_drv_channel_info(struct wpa_supplicant *wpa_s,
 				       struct wpa_channel_info *ci)
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -9632,6 +9632,13 @@ int wpas_disable_mac_addr_randomization(
 	return 0;
 }
 
+int wpa_drv_mlo_signal_poll(struct wpa_supplicant *wpa_s,
+			    struct wpa_mlo_signal_info *mlo_si)
+{
+	if (wpa_s->driver->mlo_signal_poll)
+		return wpa_s->driver->mlo_signal_poll(wpa_s->drv_priv, mlo_si);
+	return -1;
+}
 
 int wpa_drv_signal_poll(struct wpa_supplicant *wpa_s,
 			struct wpa_signal_info *si)
--- a/wpa_supplicant/bss.h
+++ b/wpa_supplicant/bss.h
@@ -244,5 +244,6 @@ const u8 * wpa_bss_get_rsnxe(struct wpa_
 			     bool mlo);
 const u8 * wpa_bss_get_ie_pos(const struct wpa_bss *bss, u8 ie, u8 idx);
 u8 wpa_bss_get_mbssid_idx(const struct wpa_bss *bss);
+s8 wpa_get_hw_idx_by_freq(struct wpa_supplicant *wpa_s, int partner_freq);
 
 #endif /* BSS_H */
