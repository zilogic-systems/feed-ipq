From 4654eed7bbd833211d534da818c210c8b228ccba Mon Sep 17 00:00:00 2001
From: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
Date: Sat, 16 Nov 2024 01:43:46 +0530
Subject: [PATCH] QSDK:CP:hostapd: add missing WDS repeater 6G bring-up, CSA
 implementation

Signed-off-by: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
---
 src/utils/ucode.c      | 95 ++++++++++++++++++++++++++++++++++--------
 wpa_supplicant/ucode.c | 18 +++++---
 2 files changed, 90 insertions(+), 23 deletions(-)

--- a/src/utils/ucode.c
+++ b/src/utils/ucode.c
@@ -110,10 +110,13 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm
 	uc_value_t *freq = uc_fn_arg(0);
 	uc_value_t *sec = uc_fn_arg(1);
 	int width = ucv_uint64_get(uc_fn_arg(2));
+	uc_value_t *chan_width = uc_fn_arg(3);
+	int cf1 = ucv_uint64_get(uc_fn_arg(4));
+	int cf2 = ucv_uint64_get(uc_fn_arg(5));
 	int freq_val, center_idx, center_ofs;
 	enum oper_chan_width chanwidth;
 	enum hostapd_hw_mode hw_mode;
-	u8 op_class, channel, tmp_channel;
+	u8 op_class, channel, tmp_channel, seg0_idx = 0, seg1_idx = 0;
 	const char *modestr;
 	int sec_channel = 0;
 	uc_value_t *ret;
@@ -135,19 +138,47 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm
 		return NULL;
 
 	switch (width) {
-	case 0:
-		chanwidth = CONF_OPER_CHWIDTH_USE_HT;
-		break;
-	case 1:
-		chanwidth = CONF_OPER_CHWIDTH_80MHZ;
-		break;
-	case 2:
-		chanwidth = CONF_OPER_CHWIDTH_160MHZ;
-		break;
-	default:
-		return NULL;
-	}
+       case 0:
+               chanwidth = CONF_OPER_CHWIDTH_USE_HT;
+               break;
+       case 1:
+               chanwidth = CONF_OPER_CHWIDTH_80MHZ;
+               break;
+       case 2:
+               chanwidth = CONF_OPER_CHWIDTH_160MHZ;
+               break;
+       case 9:
+               chanwidth = CONF_OPER_CHWIDTH_320MHZ;
+               break;
+       default:
+               return NULL;
+       }
+
+	if (ucv_type(chan_width) != UC_INTEGER)
+		goto skip_chan_width;
+
+	switch (ucv_int64_get(chan_width)) {
+        case CHAN_WIDTH_80:
+                chanwidth = CONF_OPER_CHWIDTH_80MHZ;
+                break;
+        case CHAN_WIDTH_80P80:
+                chanwidth = CONF_OPER_CHWIDTH_80P80MHZ;
+                break;
+        case CHAN_WIDTH_160:
+                chanwidth = CONF_OPER_CHWIDTH_160MHZ;
+                break;
+        case CHAN_WIDTH_320:
+                chanwidth = CONF_OPER_CHWIDTH_320MHZ;
+                break;
+        case CHAN_WIDTH_20_NOHT:
+        case CHAN_WIDTH_20:
+        case CHAN_WIDTH_40:
+        default:
+                chanwidth = CONF_OPER_CHWIDTH_USE_HT;
+                break;
+        }
 
+skip_chan_width:
 	hw_mode = ieee80211_freq_to_channel_ext(freq_val, sec_channel,
 						chanwidth, &op_class, &channel);
 	switch (hw_mode) {
@@ -174,8 +205,9 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm
 	ucv_object_add(ret, "hw_mode_str", ucv_get(ucv_string_new(modestr)));
 	ucv_object_add(ret, "sec_channel", ucv_int64_new(sec_channel));
 	ucv_object_add(ret, "frequency", ucv_int64_new(freq_val));
+	ucv_object_add(ret, "oper_chwidth", ucv_int64_new(chanwidth));
 
-	if (!sec_channel)
+	if (!sec_channel && freq_val < 5900)
 		return ret;
 
 	if (freq_val >= 5900)
@@ -188,6 +220,10 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm
 	tmp_channel &= ~((8 << width) - 1);
 	center_idx = tmp_channel + center_ofs + (4 << width) - 1;
 
+	// Handle EHT240 in 5G
+	if (freq_val >= 5500 && freq_val <= 5730 && chanwidth == 9)
+		center_idx=130;
+
 	if (freq_val < 3000)
 		ucv_object_add(ret, "center_seg0_idx", ucv_int64_new(0));
 	else
@@ -195,8 +231,37 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm
 	center_idx = (center_idx - channel) * 5 + freq_val;
 	ucv_object_add(ret, "center_freq1", ucv_int64_new(center_idx));
 
-	wpa_printf(MSG_INFO, "[debug] %s: op_c: %d, ch:%d, hw_mode:%d, mode:%s, sec_ch:%d\n freq:%d, center_seg0:%d \n",
-		__func__, op_class, channel, hw_mode, modestr, sec_channel, freq_val, center_idx);
+	if (!cf1 && !cf2)
+		return ret;
+
+	switch (hw_mode) {
+        case HOSTAPD_MODE_IEEE80211A:
+                if (cf1 == 5935)
+                        seg0_idx = (cf1 - 5925) / 5;
+                else if (cf1 > 5950)
+                        seg0_idx = (cf1 - 5950) / 5;
+                else if (cf1 > 5000)
+                        seg0_idx = (cf1 - 5000) / 5;
+
+                if (cf2 == 5935)
+                        seg1_idx = (cf2 - 5925) / 5;
+                else if (cf2 > 5950)
+                        seg1_idx = (cf2 - 5950) / 5;
+                else if (cf2 > 5000)
+                        seg1_idx = (cf2 - 5000) / 5;
+                break;
+        default:
+		if (cf1)
+			ieee80211_freq_to_chan(cf1, &seg0_idx);
+		if (cf2)
+			ieee80211_freq_to_chan(cf2, &seg1_idx);
+                break;
+        }
+
+	ucv_object_add(ret, "center_freq1", ucv_int64_new(cf1));
+	ucv_object_add(ret, "center_freq2", ucv_int64_new(cf2));
+	ucv_object_add(ret, "center_seg0_idx", ucv_int64_new(seg0_idx));
+	ucv_object_add(ret, "center_seg1_idx", ucv_int64_new(seg1_idx));
 
 out:
 	return ret;
--- a/wpa_supplicant/ucode.c
+++ b/wpa_supplicant/ucode.c
@@ -153,6 +153,7 @@ void wpas_ucode_event(struct wpa_supplic
 	if (event == EVENT_CH_SWITCH_STARTED) {
 		ucv_object_add(val, "csa_count", ucv_int64_new(data->ch_switch.count));
 		ucv_object_add(val, "frequency", ucv_int64_new(data->ch_switch.freq));
+		ucv_object_add(val, "chan_width", ucv_int64_new(data->ch_switch.ch_width));
 		ucv_object_add(val, "sec_chan_offset", ucv_int64_new(data->ch_switch.ch_offset));
 		ucv_object_add(val, "center_freq1", ucv_int64_new(data->ch_switch.cf1));
 		ucv_object_add(val, "center_freq2", ucv_int64_new(data->ch_switch.cf2));
@@ -275,6 +276,7 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t
 	uc_value_t *ret, *val;
 	uc_value_t *radio_id = uc_fn_arg(0);
 	int freq, hw_idx, i;
+	struct wpa_signal_info si = {0};
 	struct wpa_mlo_signal_info mlo_si = {0};
 
 	if (!wpa_s)
@@ -288,10 +290,8 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t
 	hw_idx = ucv_int64_get(radio_id);
 
 	if (wpa_s->wpa_state == WPA_COMPLETED && wpa_s->valid_links) {
-		wpa_printf(MSG_INFO, "%s: wpa_s->valid_links=%d and hw_idx %d", __func__, wpa_s->valid_links, hw_idx);
 		for_each_link(wpa_s->valid_links, i) {
 			freq = wpa_s->links[i].freq;
-			wpa_printf(MSG_INFO, "%s: freq: %d for link_id %d", __func__, freq, i);
 			if ( hw_idx == wpa_get_hw_idx_by_freq(wpa_s, freq )) {
 				ucv_object_add(ret, "frequency", ucv_int64_new(freq));
 				if (wpa_drv_mlo_signal_poll(wpa_s, &mlo_si) == 0) {
@@ -299,11 +299,7 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t
 						ucv_object_add(ret, "chan_width", ucv_int64_new(mlo_si.links[i].chanwidth));
 						ucv_object_add(ret, "center_freq1", ucv_int64_new(mlo_si.links[i].center_frq1));
 						ucv_object_add(ret, "center_freq2", ucv_int64_new(mlo_si.links[i].center_frq2));
-						wpa_printf(MSG_INFO, "%s: status frequency filled %d width %d cf1 %d cf2 %d for radio_id %d", __func__, freq,
-						mlo_si.links[i].chanwidth, mlo_si.links[i].center_frq1, mlo_si.links[i].center_frq2, hw_idx);
 					}
-				} else {
-						wpa_printf(MSG_ERROR, "%s: error getting signal poll");
 				}
 			}
 		}
@@ -330,6 +326,17 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t
 
 		ucv_object_add(ret, "sec_chan_offset", ucv_int64_new(sec_chan));
 		ucv_object_add(ret, "frequency", ucv_int64_new(bss->freq));
+		if (wpa_s->wpa_state == WPA_COMPLETED &&
+		    wpa_drv_signal_poll(wpa_s, &si) == 0) {
+			if (si.chanwidth != CHAN_WIDTH_UNKNOWN) {
+				ucv_object_add(ret, "chan_width",
+					       ucv_int64_new(si.chanwidth));
+				ucv_object_add(ret, "center_freq1",
+					       ucv_int64_new(si.center_frq1));
+				ucv_object_add(ret, "center_freq2",
+					       ucv_int64_new(si.center_frq2));
+			}
+		}
 	}
 
 #ifdef CONFIG_MESH
