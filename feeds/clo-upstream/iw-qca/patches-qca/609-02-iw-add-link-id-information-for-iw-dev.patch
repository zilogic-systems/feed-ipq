From acf2137f1b10a7ab8613258e420c74770c72f6cd Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Fri, 18 Nov 2022 17:52:41 +0530
Subject: [PATCH] iw: add link information for iw dev

print link address, channel, and tx power information for each link.

for MLO iw dev will display
phy#3
        Interface wlan0
                ifindex 34
                wdev 0x30000000a
                addr 00:03:7f:12:dc:dc
                ssid OpenWrt
                type AP
                link 0:
                  addr 00:03:7f:12:dc:dc
                  channel 11 (2462 MHz), width: 20 MHz, center1: 2462 MHz
                  txpower 28.00 dBm
                link 1:
                  addr 00:03:7f:12:dd:dd
                  channel 36 (5180 MHz), width: 80 MHz, center1: 5210 MHz
                  txpower 28.00 dBm

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 interface.c | 103 ++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 75 insertions(+), 28 deletions(-)

--- a/interface.c
+++ b/interface.c
@@ -369,34 +369,32 @@ char *channel_width_name(enum nl80211_ch
 	}
 }
 
-static void print_channel(struct nlattr **tb)
+static void print_channel_txpower(struct nlattr *tb_msg[], const char *space)
 {
-	uint32_t freq = nla_get_u32(tb[NL80211_ATTR_WIPHY_FREQ]);
-
-	printf("channel %d (%d MHz)",
-	       ieee80211_frequency_to_channel(freq), freq);
-
-	if (tb[NL80211_ATTR_CHANNEL_WIDTH]) {
-		printf(", width: %s",
-			channel_width_name(nla_get_u32(tb[NL80211_ATTR_CHANNEL_WIDTH])));
-		if (tb[NL80211_ATTR_CENTER_FREQ1])
-			printf(", center1: %d MHz",
-				nla_get_u32(tb[NL80211_ATTR_CENTER_FREQ1]));
-		if (tb[NL80211_ATTR_CENTER_FREQ2])
-			printf(", center2: %d MHz",
-				nla_get_u32(tb[NL80211_ATTR_CENTER_FREQ2]));
-
-		if (tb[NL80211_ATTR_PUNCT_BITMAP]) {
-			uint32_t punct = nla_get_u32(tb[NL80211_ATTR_PUNCT_BITMAP]);
-
-			if (punct)
-				printf(", punctured: 0x%x", punct);
+	if (tb_msg[NL80211_ATTR_WIPHY_FREQ]) {
+		uint32_t freq = nla_get_u32(tb_msg[NL80211_ATTR_WIPHY_FREQ]);
+		printf("\t\t%schannel %d (%d MHz)", space,
+			ieee80211_frequency_to_channel(freq), freq);
+		if (tb_msg[NL80211_ATTR_CHANNEL_WIDTH]) {
+			printf(", width: %s",
+				channel_width_name(nla_get_u32(tb_msg[NL80211_ATTR_CHANNEL_WIDTH])));
+			if (tb_msg[NL80211_ATTR_CENTER_FREQ1])
+				printf(", center1: %d MHz",
+					nla_get_u32(tb_msg[NL80211_ATTR_CENTER_FREQ1]));
+			if (tb_msg[NL80211_ATTR_CENTER_FREQ2])
+				printf(", center2: %d MHz",
+					nla_get_u32(tb_msg[NL80211_ATTR_CENTER_FREQ2]));
+		} else if (tb_msg[NL80211_ATTR_WIPHY_CHANNEL_TYPE]) {
+			enum nl80211_channel_type channel_type;
+			channel_type = nla_get_u32(tb_msg[NL80211_ATTR_WIPHY_CHANNEL_TYPE]);
+			printf(" %s", channel_type_name(channel_type));
 		}
-	} else if (tb[NL80211_ATTR_WIPHY_CHANNEL_TYPE]) {
-		enum nl80211_channel_type channel_type;
-
-		channel_type = nla_get_u32(tb[NL80211_ATTR_WIPHY_CHANNEL_TYPE]);
-		printf(" %s", channel_type_name(channel_type));
+		printf("\n");
+	}
+	if (tb_msg[NL80211_ATTR_WIPHY_TX_POWER_LEVEL]) {
+		int32_t txp = nla_get_u32(tb_msg[NL80211_ATTR_WIPHY_TX_POWER_LEVEL]);
+		printf("\t\t%stxpower %d.%.2d dBm\n", space,
+		       txp / 100, txp % 100);
 	}
 }
 
@@ -404,6 +402,7 @@ static int print_iface_handler(struct nl
 {
 	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
 	struct nlattr *tb_msg[NL80211_ATTR_MAX + 1];
+	struct nlattr *attrs, *link[NL80211_ATTR_MAX + 1];
 	unsigned int *wiphy = arg;
 	const char *indent = "";
 
@@ -442,18 +441,6 @@ static int print_iface_handler(struct nl
 		printf("%s\ttype %s\n", indent, iftype_name(nla_get_u32(tb_msg[NL80211_ATTR_IFTYPE])));
 	if (!wiphy && tb_msg[NL80211_ATTR_WIPHY])
 		printf("%s\twiphy %d\n", indent, nla_get_u32(tb_msg[NL80211_ATTR_WIPHY]));
-	if (tb_msg[NL80211_ATTR_WIPHY_FREQ]) {
-		printf("%s\t", indent);
-		print_channel(tb_msg);
-		printf("\n");
-	}
-
-	if (tb_msg[NL80211_ATTR_WIPHY_TX_POWER_LEVEL]) {
-		int32_t txp = nla_get_u32(tb_msg[NL80211_ATTR_WIPHY_TX_POWER_LEVEL]);
-
-		printf("%s\ttxpower %d.%.2d dBm\n",
-		       indent, txp / 100, txp % 100);
-	}
 
 	if (tb_msg[NL80211_ATTR_TXQ_STATS]) {
 		char buf[150];
@@ -468,30 +455,22 @@ static int print_iface_handler(struct nl
 	}
 
 	if (tb_msg[NL80211_ATTR_MLO_LINKS]) {
-		struct nlattr *link;
-		int n;
-
-		printf("%s\tMLD with links:\n", indent);
-
-		nla_for_each_nested(link, tb_msg[NL80211_ATTR_MLO_LINKS], n) {
-			struct nlattr *tb[NL80211_ATTR_MAX + 1];
-
-			nla_parse_nested(tb, NL80211_ATTR_MAX, link, NULL);
-			printf("%s\t - link", indent);
-			if (tb[NL80211_ATTR_MLO_LINK_ID])
-				printf(" ID %2d", nla_get_u32(tb[NL80211_ATTR_MLO_LINK_ID]));
-			if (tb[NL80211_ATTR_MAC]) {
-				char buf[20];
-
-				mac_addr_n2a(buf, nla_data(tb[NL80211_ATTR_MAC]));
-				printf(" link addr %s", buf);
-			}
-			if (tb[NL80211_ATTR_WIPHY_FREQ]) {
-				printf("\n%s\t   ", indent);
-				print_channel(tb);
+		int ret = 0;
+		nla_for_each_nested(attrs, tb_msg[NL80211_ATTR_MLO_LINKS], ret) {
+			nla_parse_nested(link, NL80211_ATTR_MAX, attrs, NULL);
+			if (link[NL80211_ATTR_MLO_LINK_ID]) {
+				printf("%s\tlink %d:\n", indent,
+					nla_get_u8(link[NL80211_ATTR_MLO_LINK_ID]));
+				if (link[NL80211_ATTR_MAC]) {
+					char link_addr[20];
+					mac_addr_n2a(link_addr, nla_data(link[NL80211_ATTR_MAC]));
+					printf("%s\t  addr %s\n", indent, link_addr);
+				}
+				print_channel_txpower(link, "  ");
 			}
-			printf("\n");
 		}
+	} else {
+		print_channel_txpower(tb_msg, "");
 	}
 
 	return NL_SKIP;
