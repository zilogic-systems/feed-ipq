From 98e3c7c11e335d9f63bdf7377ba2ebfa6cc251b0 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Mon, 20 Mar 2023 14:00:30 +0530
Subject: [PATCH] iw: add support to add/del multi chan support for monitor

The below command helps to add multiple channels to monitor interface
iw dev mon0 add channel 11
iw dev mon0 add channel 36
iw dev mon0 add channel 49 6G

Similarly channel can be deleted from the monitor interface
iw dev mon0 del channel 36

The same is done for set freq command and added add freq and del freq

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 iw.h      |   1 +
 nl80211.h |  16 +++++++++
 phy.c     | 104 ++++++++++++++++++++++++++++++++++++++++++++++++++++--
 3 files changed, 119 insertions(+), 2 deletions(-)

--- a/iw.h
+++ b/iw.h
@@ -360,6 +360,7 @@ DECLARE_SECTION(reg);
 DECLARE_SECTION(roc);
 DECLARE_SECTION(scan);
 DECLARE_SECTION(set);
+DECLARE_SECTION(add);
 DECLARE_SECTION(station);
 DECLARE_SECTION(survey);
 DECLARE_SECTION(switch);
--- a/phy.c
+++ b/phy.c
@@ -15,6 +15,8 @@
 #include "nl80211.h"
 #include "iw.h"
 
+SECTION(add);
+
 struct channels_ctx {
 	int last_band;
 	bool width_40;
@@ -234,6 +236,59 @@ COMMAND(set, freq_khz,
 	"<control freq> [1|2|4|8|16] [<center1_freq> [<center2_freq>]]",
 	NL80211_CMD_SET_WIPHY, 0, CIB_NETDEV, handle_freq_khz, NULL);
 
+static int handle_add_freq(struct nl80211_state *state, struct nl_msg *msg,
+		       int argc, char **argv,
+		       enum id_input id)
+{
+	struct chandef chandef;
+	int res;
+
+	res = parse_freqchan(&chandef, false, argc, argv, NULL, false);
+	if (res)
+		return res;
+
+	NLA_PUT_U32(msg, NL80211_ATTR_ADD_MULTI_CHAN, true);
+
+	return put_chandef(msg, &chandef);
+ nla_put_failure:
+	return -ENOBUFS;
+}
+
+COMMAND(add, freq,
+	"<freq> [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz|160MHz|320MHz]\n"
+	"<control freq> [5|10|20|40|80|80+80|160|320] [<center1_freq> [<center2_freq>]]",
+	NL80211_CMD_SET_WIPHY, 0, CIB_PHY, handle_add_freq,
+	"Set frequency/channel the hardware is using, including HT\n"
+	"configuration.");
+COMMAND(add, freq,
+	"<freq> [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz|160MHz|320MHz]\n"
+	"<control freq> [5|10|20|40|80|80+80|160|320] [<center1_freq> [<center2_freq>]]",
+	NL80211_CMD_SET_WIPHY, 0, CIB_NETDEV, handle_add_freq, NULL);
+
+static int handle_del_freq(struct nl80211_state *state, struct nl_msg *msg,
+		       int argc, char **argv,
+		       enum id_input id)
+{
+	struct chandef chandef;
+	int res;
+
+	res = parse_freqchan(&chandef, false, argc, argv, NULL, false);
+	if (res)
+		return res;
+
+	NLA_PUT_U32(msg, NL80211_ATTR_DEL_MULTI_CHAN, true);
+
+	return put_chandef(msg, &chandef);
+ nla_put_failure:
+	return -ENOBUFS;
+}
+
+COMMAND(del, freq, "<freq>\n",
+	NL80211_CMD_SET_WIPHY, 0, CIB_PHY, handle_del_freq,
+	"del frequency/channel the hardware is using\n");
+COMMAND(del, freq, "<freq>\n",
+	NL80211_CMD_SET_WIPHY, 0, CIB_NETDEV, handle_del_freq, NULL);
+
 static int handle_chan(struct nl80211_state *state, struct nl_msg *msg,
 		       int argc, char **argv,
 		       enum id_input id)
@@ -252,6 +307,52 @@ COMMAND(set, channel, "<channel> [6G] [N
 COMMAND(set, channel, "<channel> [6G] [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz|160MHz|320MHz] [6G] [ru-puncturing-bitmap <bitmap>]",
 	NL80211_CMD_SET_WIPHY, 0, CIB_NETDEV, handle_chan, NULL);
 
+static int handle_add_chan(struct nl80211_state *state, struct nl_msg *msg,
+		       int argc, char **argv,
+		       enum id_input id)
+{
+	struct chandef chandef;
+	int res;
+
+	res = parse_freqchan(&chandef, true, argc, argv, NULL, false);
+	if (res)
+		return res;
+
+	NLA_PUT_U32(msg, NL80211_ATTR_ADD_MULTI_CHAN, true);
+
+	return put_chandef(msg, &chandef);
+
+ nla_put_failure:
+	return -ENOBUFS;
+}
+COMMAND(add, channel, "<channel> [6G] [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz|160MHz|320MHz]",
+	NL80211_CMD_SET_WIPHY, 0, CIB_PHY, handle_add_chan, NULL);
+COMMAND(add, channel, "<channel> [6G] [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz|160MHz|320MHz] [6G]",
+	NL80211_CMD_SET_WIPHY, 0, CIB_NETDEV, handle_add_chan, NULL);
+
+static int handle_del_chan(struct nl80211_state *state, struct nl_msg *msg,
+		       int argc, char **argv,
+		       enum id_input id)
+{
+	struct chandef chandef;
+	int res;
+
+	res = parse_freqchan(&chandef, true, argc, argv, NULL, false);
+	if (res)
+		return res;
+
+	NLA_PUT_U32(msg, NL80211_ATTR_DEL_MULTI_CHAN, true);
+
+	return put_chandef(msg, &chandef);
+
+ nla_put_failure:
+	return -ENOBUFS;
+}
+COMMAND(del, channel, "<channel> [6G]",
+	NL80211_CMD_SET_WIPHY, 0, CIB_PHY, handle_del_chan, NULL);
+COMMAND(del, channel, "<channel> [6G]",
+	NL80211_CMD_SET_WIPHY, 0, CIB_NETDEV, handle_del_chan, NULL);
+
 
 struct cac_event {
 	int ret;
