From 3e2a1cb57a40fd6b6b350f17fc17f181b8a8dcc0 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Mon, 29 Apr 2024 06:09:58 -0700
Subject: [PATCH] iw: Add support for configuring the interface offload type

Add support to configure interface offload type and direct the traffic
the traffic through different offload features (SFE, PPE_VP, DS)

Use the below command to configure the interface offload type
iw dev wlan0 set_intf_offload type passive (sfe)
iw dev wlan0 set_intf_offload type active (ppe_vp)
iw dev wlan0 set_intf_offload type ds (ds)

Patch-depdendency: none

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 set_interface_offload.c | 88 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 88 insertions(+)
 create mode 100644 set_interface_offload.c

--- /dev/null
+++ b/set_interface_offload.c
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2024, Qualcomm Innovation Center, Inc. All rights reserved.
+
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <errno.h>
+#include <string.h>
+#include <stdio.h>
+#include <math.h>
+
+#include <netlink/genl/genl.h>
+#include <netlink/genl/family.h>
+#include <netlink/genl/ctrl.h>
+#include <netlink/msg.h>
+#include <netlink/attr.h>
+
+#include <arpa/inet.h>
+
+#include "nl80211.h"
+#include "iw.h"
+
+#define OUI_QCA 0x001374
+
+#define QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION 74
+#define QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE 120
+
+enum offloadtype {
+	SFE_NO_RFS_OFFLOAD,
+	SFE_RFS_OFFLOAD,
+	PPEVP_OFFLOAD,
+	PPEDS_OFFLOAD,
+	MAX_OFFLOAD_SCHEME
+};
+
+SECTION(set_intf_offload);
+
+static int handle_set_intf_offload(struct nl80211_state *state,
+				   struct nl_msg *msg,
+				   int argc, char **argv,
+				   enum id_input id)
+{
+	int offload_type = SFE_NO_RFS_OFFLOAD;
+	struct nlattr *attr;
+
+	if (!argv[0])
+		goto err;
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+		    QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION);
+
+	if (strcmp("passive", argv[0]) == 0) {
+		offload_type = SFE_RFS_OFFLOAD;
+	} else if (strcmp("active", argv[0]) == 0) {
+		offload_type = PPEVP_OFFLOAD;
+	} else if (strcmp("ds", argv[0]) == 0) {
+		offload_type = PPEDS_OFFLOAD;
+	} else if (strcmp("none", argv[0]) == 0) {
+		offload_type = SFE_NO_RFS_OFFLOAD;
+	}
+
+	attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!attr)
+		return -ENOBUFS;
+
+	nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE, offload_type);
+	nla_nest_end(msg, attr);
+
+	return 0;
+
+err:
+	printf("Usage: iw dev wlanX set_intf_offload type [passive|active|ds|none]\n");
+	return -EINVAL;
+}
+
+COMMAND(set_intf_offload, type, "[type passive|active|ds|none]", NL80211_CMD_VENDOR,
+	0, CIB_NETDEV, handle_set_intf_offload, ".");
