From 122d45d0072add563ef321a30d4c36b5110682cd Mon Sep 17 00:00:00 2001
From: Bhagavathi Perumal S <quic_bperumal@quicinc.com>
Date: Thu, 11 Jul 2024 09:31:54 +0530
Subject: [PATCH] QSDK: iw: Add support for get the interface offload type

This adds support to get datapath interface offload type.
This is useful for user\tester to know the interface offload type.

Patch dependency: 621-QSDK-iw-Add-support-for-configuring-the-interface-offload.patch

Signed-off-by: Bhagavathi Perumal S <quic_bperumal@quicinc.com>
---
 iw.h                    |  1 +
 set_interface_offload.c | 66 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 67 insertions(+)

diff --git a/iw.h b/iw.h
index a2f761c..95a73c0 100644
--- a/iw.h
+++ b/iw.h
@@ -81,6 +81,7 @@ enum qca_nl80211_vendor_subcmds {
  */
 enum qca_wlan_vendor_attr_config {
 	QCA_WLAN_VENDOR_ATTR_CONFIG_GTX = 57,
+	QCA_WLAN_VENDOR_ATTR_CONFIG_INTF_OFFLOAD_TYPE = 120,
 
 	/* keep last */
 	QCA_WLAN_VENDOR_ATTR_CONFIG_AFTER_LAST,
diff --git a/set_interface_offload.c b/set_interface_offload.c
index adf71e8..3ff1ffa 100644
--- a/set_interface_offload.c
+++ b/set_interface_offload.c
@@ -33,6 +33,8 @@
 #define OUI_QCA 0x001374
 
 #define QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION 74
+#define QCA_NL80211_VENDOR_SUBCMD_GET_WIFI_CONFIGURATION 75
+
 #define QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE 120
 
 enum offloadtype {
@@ -44,6 +46,7 @@ enum offloadtype {
 };
 
 SECTION(set_intf_offload);
+SECTION(get_intf_offload);
 
 static int handle_set_intf_offload(struct nl80211_state *state,
 				   struct nl_msg *msg,
@@ -86,3 +89,66 @@ err:
 
 COMMAND(set_intf_offload, type, "[type passive|active|ds|none]", NL80211_CMD_VENDOR,
 	0, CIB_NETDEV, handle_set_intf_offload, ".");
+
+static int print_intf_offload_type(struct nl_msg *msg, void *arg)
+{
+	struct nlattr *tb_msg[NL80211_ATTR_MAX + 1];
+	int ppe_vp_type = 0;
+	char *type = NULL;
+	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
+	struct nlattr *attrs[QCA_WLAN_VENDOR_ATTR_CONFIG_MAX + 1];
+	static struct nla_policy ath12k_wifi_config_policy[QCA_WLAN_VENDOR_ATTR_CONFIG_MAX + 1] = {
+		[QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE] = {.type = NLA_U8},
+	};
+
+	nla_parse(tb_msg, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
+		  genlmsg_attrlen(gnlh, 0), NULL);
+
+	if (tb_msg[NL80211_ATTR_VENDOR_DATA])
+		nla_parse_nested(attrs, QCA_WLAN_VENDOR_ATTR_CONFIG_MAX,
+				 tb_msg[NL80211_ATTR_VENDOR_DATA], ath12k_wifi_config_policy);
+	else
+		return NL_STOP;
+
+	if (attrs[QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE])
+		ppe_vp_type = nla_get_u8(attrs[QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE]);
+
+	switch (ppe_vp_type) {
+	case SFE_RFS_OFFLOAD:
+		type = "passive";
+		break;
+	case PPEVP_OFFLOAD:
+		type = "active";
+		break;
+	case PPEDS_OFFLOAD:
+		type = "ds";
+		break;
+	case SFE_NO_RFS_OFFLOAD:
+		type = "none";
+		break;
+	default:
+		type = "invalid";
+		break;
+	}
+
+	printf("%s\n",type);
+
+	return NL_SKIP;
+}
+
+static int handle_get_intf_offload(struct nl80211_state *state,
+				   struct nl_msg *msg,
+				   int argc, char **argv,
+				   enum id_input id)
+{
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+		    QCA_NL80211_VENDOR_SUBCMD_GET_WIFI_CONFIGURATION);
+
+	register_handler(print_intf_offload_type, NULL);
+	return NL_OK;
+}
+
+
+COMMAND(get_intf_offload, type, "", NL80211_CMD_VENDOR,
+	0, CIB_NETDEV, handle_get_intf_offload, ".");
-- 
2.34.1

