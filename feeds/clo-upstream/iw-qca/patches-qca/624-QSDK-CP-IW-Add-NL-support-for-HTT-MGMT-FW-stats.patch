From a602f89337b2e8799f62e8f5dbdf0e1952e7d3ad Mon Sep 17 00:00:00 2001
From: Adwait Nayak <quic_adwaitn@quicinc.com>
Date: Wed, 30 Oct 2024 03:24:27 +0530
Subject: [PATCH] QSDK:CP: iw: Add NL support for HTT/ MGMT/ FW stats

As per the existing design, debugfs infra is used to
get htt stats. htt_stats_type can be configured with
any value ranging from 1 to 62 in order to fetch the
specific stats.
(ex: echo [value] > /sys/kernel/debug/ath12k/<hwX>/
mac0/htt_stats_type)

The stats gets updated into htt_stats file; created
in the same directory.

Similar process is followed for mgmt and fw stats
(pdev/ vdev/ beacon stats).

For AI fault detection feature, there is a requirement
to fetch particular stats using an application (APP).
Below challenges are faced from APP side with the
usage of existing debugfs infra:
-> The configuration and data collection of every stats
doesn't reside in the same directory. So APP has to do
multiple file operations from various paths.

-> Not every RDP follows same chip orientation. And,
using debugfs infra it is bit difficult to understand
the mapping of chip id and hw.

Ex: Below data does not specify the folders for 2.4G/
5G/ 6G radio.
root@OpenWrt:/# ls /sys/kernel/debug/ath12k/
ipq5332 hw1.0_c000000.wifi/  qcn6432 hw1.0_2/
qcn6432 hw1.0_1/

So it is bit complicated for the APP to understand the
collected stats belongs to which chip_id/ radio.

Hence, the request was to enable NL support and
iw commmand to dump the HTT/ MGMT/ FW stats on
screen.

This change takes care of the above requirement.

iw command introduced:
1) For htt stats:
MLO: iw dev wlanX get wifistats -l <link_id> <value>
Non_MLO:iw phy <phyname> get wifistats <value>

Ex:
root@OpenWrt:/# iw dev wlan0 get wifistats -l 0 6
HTT_TX_TQM_CMN_STATS_TLV:
mac_id = 0
max_cmdq_id = 0
list_mpdu_cnt_hist_intvl = 30
add_msdu = 0
q_empty = 0
q_not_empty = 0
drop_notification = 0
desc_threshold = 0
hwsch_tqm_invalid_status = 0
missed_tqm_gen_mpdus = 0
total_msduq_timestamp_updates = 0
total_msduq_timestamp_updates_by_get_mpdu_head_info_cmd = 0
total_msduq_timestamp_updates_by_empty_to_nonempty_status = 0
total_get_mpdu_head_info_cmds_by_sched_algo_la_query = 0
total_get_mpdu_head_info_cmds_by_tac = 0
total_gen_mpdu_cmds_by_sched_algo_la_query = 0
active_tqm_tids = 0
inactive_tqm_tids = 0
tqm_active_msduq_flows = 0
.....

2) For FW stats:
MLO: iw dev wlanX get fwstats -l <link_id> <pdev/vdev/beacon>
Non_MLO:iw phy <phyname> get fwstats <pdev/vdev/beacon>
Ex:
root@OpenWrt:/# iw dev wlan0 get fwstats -l 0 pdev
             ath12k PDEV stats
             =================

           Channel noise floor        -99
              Channel TX power         54
                TX frame count    2665360
                RX frame count   52493404
                RX clear count   58985908
                   Cycle count   80560889
               PHY error count         20
                soc drop count          0

          ath12k PDEV TX stats
          ====================

            HTT cookies queued        157
             HTT cookies disp.        157
                   MSDU queued        837
                   MPDU queued        837
                 MSDUs dropped          0
                  Local enqued        680
                   Local freed        679
                     HW queued       1164
                  PPDUs reaped       1163
                 Num underruns          0

3) For Mgmt stats:
MLO: iw dev wlanX get mgmtstats -l <link_id> <dump>
Non_MLO:iw phy <phyname> get mgmtstats <dump>
Ex:
root@OpenWrt:/# iw dev wlan0 get mgmtstats -l 0 dump
MGMT frame stats for vdev 0 :
TX stats :
 Total TX Management = 154
Total TX Management fail count = 0
TX Offchan Management count= 0
TX Offchan Fail count= 0
  Success frames:
       assoc_req: 0
       assoc_resp: 1
       reassoc_req: 0
       reassoc_resp: 0

Signed-off-by: Adwait Nayak <quic_adwaitn@quicinc.com>
---
 sawf_stats.h |  14 +++
 telemetry.c  | 269 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 283 insertions(+)

diff --git a/sawf_stats.h b/sawf_stats.h
index 99bd644..5d7d03c 100644
--- a/sawf_stats.h
+++ b/sawf_stats.h
@@ -38,6 +38,17 @@
  *
  * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID: Defines serviceid for sawf stats.
  *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MLD_LINK: Defines MLD link in case of mlo
+ * enabled configuration.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_HTT_STATS_TYPE: Defines htt stats types
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FW_STATS_TYPE: Defines FW stats types
+ * such as pdev/ vdev / beacon stats
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MULTI_STATS_DATA: Defines buffer data for
+ * HTT stats/ MGMT stats / various FW stats
+ *
  * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX: Defines maximum attribute counts to be
  * used in QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command request.
  */
@@ -51,6 +62,9 @@ enum qca_wlan_vendor_attr_telemetric {
 	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC,
 	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID,
 	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MLD_LINK,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_HTT_STATS_TYPE,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FW_STATS_TYPE,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MULTI_STATS_DATA,
 
 	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AFTER_LAST,
 	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX =
diff --git a/telemetry.c b/telemetry.c
index d7b5fe9..78e1b62 100644
--- a/telemetry.c
+++ b/telemetry.c
@@ -29,6 +29,7 @@
 
 #include "nl80211.h"
 #include "iw.h"
+#include "sawf_stats.h"
 
 #define OUI_QCA 0x001374
 #define MAX_OPTIONAL_STRINGS 15
@@ -45,6 +46,17 @@
 #define TELEMETRY_SLA_THERSHOLD_CONFIG_NUM_OF_PARAMS     8
 #define TELEMETRY_SLA_DETECTION_CONFIG_NUM_OF_PARAMS     8
 
+#define HTT_STATS          0x10000000
+#define MGMT_STATS         0x20000000
+#define FW_STATS           0x40000000
+#define RESET_WIFISTATS    0x80000000
+
+enum fw_stats_type {
+	PDEV_STATS   = 1,
+	VDEV_STATS   = 2,
+	BEACON_STATS = 3,
+};
+
 struct telemetry_sdwf_generic_param {
 	uint32_t moving_avg_pkt;
 	uint32_t moving_avg_win;
@@ -329,3 +341,260 @@ err:
 }
 COMMAND(telemetry, sla_clear_stats, "<peer_mac>", NL80211_CMD_VENDOR, 0, CIB_NETDEV,
 	handle_telemetry_sla_clear_stats, ".");
+
+SECTION(wifistats);
+
+#define MAX_WIFISTATS_DATA_SIZE 32768
+
+static int print_wifistats(struct nl_msg *msg, void *arg)
+{
+	struct nlattr *tb_msg[NL80211_ATTR_MAX + 1];
+	char *stats_buf = NULL;
+	int len;
+	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
+	struct nlattr *attrs[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX + 1];
+	static struct nla_policy
+		ath12k_telemetric_req_policy[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX + 1] = {
+		[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MULTI_STATS_DATA] = {.type = NLA_BINARY,
+			.maxlen = MAX_WIFISTATS_DATA_SIZE},
+	};
+
+	nla_parse(tb_msg, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
+		  genlmsg_attrlen(gnlh, 0), NULL);
+
+	if (tb_msg[NL80211_ATTR_VENDOR_DATA])
+		nla_parse(attrs, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX,
+			  nla_data(tb_msg[NL80211_ATTR_VENDOR_DATA]),
+			  nla_len(tb_msg[NL80211_ATTR_VENDOR_DATA]),
+			  ath12k_telemetric_req_policy);
+	else
+		return NL_STOP;
+
+	if (attrs[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MULTI_STATS_DATA]) {
+		stats_buf =
+			(char *) nla_data(attrs[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MULTI_STATS_DATA]);
+		len = nla_len(attrs[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MULTI_STATS_DATA]);
+	}
+
+	printf("%s\n", stats_buf);
+
+	return NL_SKIP;
+}
+
+static int handle_get_wifistats(struct nl80211_state *state,
+				struct nl_msg *msg,
+				int argc, char **argv,
+				enum id_input id)
+{
+	int stats_type;
+	uint8_t link_id = 0xF, index = 0;
+	struct nlattr *attr;
+	unsigned long stats = 0;
+	char *endptr;
+
+	if (!argv[0])
+		goto err;
+
+	if (!argc) {
+		goto err;
+	} else if (argc == 3) {
+		if (!strcmp(argv[0], "-l")) {
+			link_id = strtol(argv[1], &endptr, 10);
+
+			if (*endptr)
+				return 1;
+			if (link_id <= MAX_MLD_LINK)
+				index = 2;
+		} else {
+			printf("Invalid parameter: %s\n", argv[0]);
+			goto err;
+		}
+	}
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+		    QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_GETSTATS);
+
+	stats = HTT_STATS;
+	attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!attr)
+		return -ENOBUFS;
+
+	nla_put_u64(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG, stats);
+	if (strcmp("reset", argv[index]) == 0) {
+		stats = RESET_WIFISTATS;
+	} else {
+		char *end;
+
+		if (!*argv[index])
+			return 1;
+
+		stats_type = strtoul(argv[index], &end, 10);
+
+		if (*end != '\0')
+			return 1;
+	}
+
+	nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_HTT_STATS_TYPE, stats_type);
+	if (link_id != 0xF) {
+		nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MLD_LINK,
+			   link_id);
+	}
+
+	nla_nest_end(msg, attr);
+
+	register_handler(print_wifistats, NULL);
+	return 0;
+
+err:
+	printf("Usage: iw dev wlanX get wifistats -l <link_id> [value]\n");
+	return -EINVAL;
+}
+
+COMMAND(get, wifistats, "<wifistats value>",
+	NL80211_CMD_VENDOR, 0, CIB_PHY, handle_get_wifistats,
+	"get wifistats value");
+COMMAND(get, wifistats, "[-l] <link_id> <wifistats value>",
+	NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_get_wifistats,
+	"get wifistats value.");
+
+SECTION(mgmtstats);
+
+static int handle_get_mgmtstats(struct nl80211_state *state,
+				struct nl_msg *msg,
+				int argc, char **argv,
+				enum id_input id)
+{
+	uint8_t link_id = 0xF, index = 0;
+	struct nlattr *attr;
+	unsigned long stats = 0;
+	char *endptr;
+
+	if (!argv[0])
+		goto err;
+
+	if (!argc) {
+		goto err;
+	} else if (argc == 3) {
+		if (!strcmp(argv[0], "-l")) {
+			link_id = strtol(argv[1], &endptr, 10);
+
+			if (*endptr)
+				return 1;
+			if (link_id <= MAX_MLD_LINK)
+				index = 2;
+		} else {
+			printf("Invalid parameter: %s\n", argv[0]);
+			goto err;
+		}
+	}
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+		    QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_GETSTATS);
+
+	attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!attr)
+		return -ENOBUFS;
+
+	if (strcmp("dump", argv[index]) == 0)
+		stats = MGMT_STATS;
+	else
+		goto err;
+
+	nla_put_u64(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG, stats);
+
+	if (link_id != 0xF) {
+		nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MLD_LINK,
+			   link_id);
+	}
+
+	nla_nest_end(msg, attr);
+
+	register_handler(print_wifistats, NULL);
+	return 0;
+
+err:
+	printf("Usage: iw dev wlanX get mgmtstats -l <link_id> [dump]\n");
+	return -EINVAL;
+}
+
+COMMAND(get, mgmtstats, "<mgmtstats dump>",
+	NL80211_CMD_VENDOR, 0, CIB_PHY, handle_get_mgmtstats,
+	"get mgmtstats value");
+COMMAND(get, mgmtstats, "[-l] <link_id> <mgmtstats dump>",
+	NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_get_mgmtstats,
+	"get mgmtstats value.");
+
+SECTION(fwstats);
+
+static int handle_get_fwstats(struct nl80211_state *state,
+			      struct nl_msg *msg,
+			      int argc, char **argv,
+			      enum id_input id)
+{
+	int fw_stats_type = 0;
+	uint8_t link_id = 0xF, index = 0;
+	struct nlattr *attr;
+	unsigned long stats = 0;
+	char *endptr;
+
+	if (!argv[0])
+		goto err;
+
+	if (!argc) {
+		goto err;
+	} else if (argc == 3) {
+		if (!strcmp(argv[0], "-l")) {
+			link_id = strtol(argv[1], &endptr, 10);
+
+			if (*endptr)
+				return 1;
+			if (link_id <= MAX_MLD_LINK)
+				index = 2;
+		} else {
+			printf("Invalid parameter: %s\n", argv[0]);
+			goto err;
+		}
+	}
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+		    QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_GETSTATS);
+
+	stats = FW_STATS;
+	attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!attr)
+		return -ENOBUFS;
+
+	nla_put_u64(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG, stats);
+
+	if (strcmp("pdev", argv[index]) == 0)
+		fw_stats_type = PDEV_STATS;
+	else if (strcmp("vdev", argv[index]) == 0)
+		fw_stats_type = VDEV_STATS;
+	else if (strcmp("beacon", argv[index]) == 0)
+		fw_stats_type = BEACON_STATS;
+
+	nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FW_STATS_TYPE, fw_stats_type);
+	if (link_id != 0xF) {
+		nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MLD_LINK,
+			   link_id);
+	}
+
+	nla_nest_end(msg, attr);
+
+	register_handler(print_wifistats, NULL);
+	return 0;
+
+err:
+	printf("Usage: iw dev wlanX get fwstats -l <link_id> [pdev|vdev|beacon]\n");
+	return -EINVAL;
+}
+
+COMMAND(get, fwstats, "<fwstats pdev|vdev|beacon>",
+	NL80211_CMD_VENDOR, 0, CIB_PHY, handle_get_fwstats,
+	"get fwstats value");
+COMMAND(get, fwstats, "[-l] <link_id> <fwstats pdev|vdev|beacon>",
+	NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_get_fwstats,
+	"get fwstats value.");
-- 
2.34.1

