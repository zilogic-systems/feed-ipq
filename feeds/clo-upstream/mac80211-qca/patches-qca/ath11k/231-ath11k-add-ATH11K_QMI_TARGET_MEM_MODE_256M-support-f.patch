From 4409eb05f67feef95d1c241aa9c7cded4942226e Mon Sep 17 00:00:00 2001
From: P Praneesh <ppranees@codeaurora.org>
Date: Fri, 18 Dec 2020 12:15:35 +0530
Subject: [PATCH] ath11k: add ATH11K_QMI_TARGET_MEM_MODE_256M support for
 qcn9074

Added ATH11K_QMI_TARGET_MEM_MODE_256M in ath11k_target_mem_mode
and enabling ATH11K_QMI_TARGET_MEM_MODE_256M as a default
target memory mode for qcn9074 in hw_params. Also disabled
cold boot calibration if target memory mode is ATH11K_QMI_TARGET_MEM_MODE_256M.

Co-developed-by: Seevalamuthu Mariappan <seevalam@codeaurora.org>
Signed-off-by: Seevalamuthu Mariappan <seevalam@codeaurora.org>
Signed-off-by: P Praneesh <ppranees@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/core.c | 25 +++++++++++++++++++++++++
 drivers/net/wireless/ath/ath11k/hw.h   |  3 ++-
 drivers/net/wireless/ath/ath11k/qmi.c  |  6 +++++-
 drivers/net/wireless/ath/ath11k/qmi.h  |  1 +
 4 files changed, 33 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -125,6 +125,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = true,
 		.ce_fwlog_enable = false,
+		.fwmem_mode_change = false,
 		.supports_rssi_stats = false,
 		.fw_wmi_diag_event = false,
 		.current_cc_support = false,
@@ -208,6 +209,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = true,
 		.ce_fwlog_enable = false,
+		.fwmem_mode_change = false,
 		.supports_rssi_stats = false,
 		.fw_wmi_diag_event = false,
 		.current_cc_support = false,
@@ -290,6 +292,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = false,
 		.ce_fwlog_enable = false,
+		.fwmem_mode_change = false,
 		.supports_rssi_stats = true,
 		.fw_wmi_diag_event = true,
 		.current_cc_support = true,
@@ -375,6 +378,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_dynamic_smps_6ghz = true,
 		.alloc_cacheable_memory = true,
 		.ce_fwlog_enable = true,
+		.fwmem_mode_change = true,
 		.supports_rssi_stats = false,
 		.fw_wmi_diag_event = false,
 		.current_cc_support = false,
@@ -457,6 +461,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = false,
 		.ce_fwlog_enable = false,
+		.fwmem_mode_change = false,
 		.supports_rssi_stats = true,
 		.fw_wmi_diag_event = true,
 		.current_cc_support = true,
@@ -540,6 +545,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = false,
 		.ce_fwlog_enable = false,
+		.fwmem_mode_change = false,
 		.supports_rssi_stats = true,
 		.fw_wmi_diag_event = true,
 		.current_cc_support = true,
@@ -624,6 +630,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = false,
 		.ce_fwlog_enable = false,
+		.fwmem_mode_change = false,
 		.supports_rssi_stats = true,
 		.fw_wmi_diag_event = false,
 		.current_cc_support = true,
@@ -729,6 +736,21 @@ static struct ath11k_hw_params ath11k_hw
 	},
 };
 
+static const struct ath11k_num_vdevs_peers ath11k_vdevs_peers[] = {
+	{
+		.num_vdevs = (16 + 1),
+		.num_peers = 512,
+	},
+	{
+		.num_vdevs = (8 + 1),
+		.num_peers = 128,
+	},
+	{
+		.num_vdevs = 8,
+		.num_peers = 128,
+	},
+};
+
 static inline struct ath11k_pdev *ath11k_core_get_single_pdev(struct ath11k_base *ab)
 {
 	WARN_ON(!ab->hw_params.single_pdev_only);
@@ -1424,6 +1446,8 @@ static int ath11k_core_soc_create(struct
 		ath11k_info(ab, "Booting in factory test mode\n");
 	}
 
+	ab->num_vdevs_peers = &ath11k_vdevs_peers;
+
 	ret = ath11k_qmi_init_service(ab);
 	if (ret) {
 		ath11k_err(ab, "failed to initialize qmi :%d\n", ret);
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -244,6 +244,7 @@ struct ath11k_hw_params {
 	bool smp2p_wow_exit;
 	bool support_fw_mac_sequence;
 	bool ce_fwlog_enable;
+	bool fwmem_mode_change;
 };
 
 struct ath11k_hw_ops {
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -32,6 +32,10 @@ module_param_named(cold_boot_cal, ath11k
 MODULE_PARM_DESC(cold_boot_cal,
 		 "Decrease the channel switch time but increase the driver load time (Default: true)");
 
+unsigned int fwmem_mode = ATH11K_QMI_TARGET_MEM_MODE_256M;
+module_param_named(fwmem_mode, fwmem_mode, uint, 0644);
+MODULE_PARM_DESC(fwmem_mode, "Firmware mem mode (applicable only for qcn9074)");
+
 static struct qmi_elem_info qmi_wlanfw_qdss_trace_config_download_req_msg_v01_ei[] = {
 	{
 		.data_type	= QMI_OPT_FLAG,
@@ -4806,6 +4811,17 @@ int ath11k_qmi_init_service(struct ath11
 	ab->qmi.ab = ab;
 
 	ab->qmi.target_mem_mode = ab->hw_params.fw_mem_mode;
+
+	if (ab->hw_params.fwmem_mode_change) {
+		ab->qmi.target_mem_mode = fwmem_mode;
+		if (ab->qmi.target_mem_mode == ATH11K_QMI_TARGET_MEM_MODE_256M &&
+		    ath11k_ftm_mode)
+			ab->enable_cold_boot_cal = 1;
+		else if(ab->qmi.target_mem_mode == ATH11K_QMI_TARGET_MEM_MODE_256M)
+			ab->enable_cold_boot_cal = 0;
+	}
+	ath11k_dbg(ab, ATH11K_DBG_QMI, "qmi target mem mode %d\n", ab->qmi.target_mem_mode);
+
 	ret = qmi_handle_init(&ab->qmi.handle, ATH11K_QMI_RESP_LEN_MAX,
 			      &ath11k_qmi_ops, ath11k_qmi_msg_handlers);
 	if (ret < 0) {
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -71,6 +71,12 @@
 struct ath11k_base;
 extern unsigned int ath11k_host_ddr_addr;
 
+enum ath11k_target_mem_mode {
+ 	ATH11K_QMI_TARGET_MEM_MODE_DEFAULT = 0,
+ 	ATH11K_QMI_TARGET_MEM_MODE_512M,
+	ATH11K_QMI_TARGET_MEM_MODE_256M,
+};
+
 enum ath11k_qmi_file_type {
 	ATH11K_QMI_FILE_TYPE_BDF_GOLDEN,
 	ATH11K_QMI_FILE_TYPE_CALDATA = 2,
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -945,6 +945,11 @@ struct ath11k_msi_config {
 	u16 hw_rev;
 };
 
+struct ath11k_num_vdevs_peers {
+	u32 num_vdevs;
+	u32 num_peers;
+};
+
 /* Master structure to hold the hw data which may be used in core module */
 struct ath11k_base {
 	enum ath11k_hw_rev hw_rev;
@@ -1105,6 +1110,7 @@ struct ath11k_base {
 	atomic_t num_max_allowed;
 	u32 max_ast_index;
 	u32 num_ast_entries;
+	struct ath11k_num_vdevs_peers *num_vdevs_peers;
 
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -2204,6 +2204,9 @@ static ssize_t ath11k_dump_mgmt_stats(st
 				      size_t count, loff_t *ppos)
 {
 	struct ath11k *ar = file->private_data;
+#ifndef CPTCFG_ATH11K_MEM_PROFILE_512M
+	struct ath11k_base *ab = ar->ab;
+#endif
 	struct ath11k_vif *arvif = NULL;
 	struct ath11k_mgmt_frame_stats *mgmt_stats;
 	int len = 0, ret, i;
--- a/drivers/net/wireless/ath/ath11k/coredump.c
+++ b/drivers/net/wireless/ath/ath11k/coredump.c
@@ -164,7 +164,7 @@ void ath11k_coredump_download_rddm(struc
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
 		if (ab->qmi.target_mem[i].type == HOST_DDR_REGION_TYPE ||
-		    ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE ||
+		    (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE && ab->enable_cold_boot_cal && ab->hw_params.cold_boot_calib) ||
 			ab->qmi.target_mem[i].type == M3_DUMP_REGION_TYPE)
 			rem_seg_cnt++;
 	}
@@ -228,7 +228,7 @@ void ath11k_coredump_download_rddm(struc
 	}
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
-		if (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE) {
+		if (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE && ab->enable_cold_boot_cal && ab->hw_params.cold_boot_calib) {
 			seg_info->len = ab->qmi.target_mem[i].size;
 			seg_info->addr = ab->qmi.target_mem[i].paddr;
 			seg_info->vaddr = ab->qmi.target_mem[i].vaddr;
