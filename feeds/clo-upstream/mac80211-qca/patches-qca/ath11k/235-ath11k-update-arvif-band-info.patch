From: Karthikeyan Periyasamy <periyasa@codeaurora.org>
Subject: [PATCH] ath11k: Add debug logs for the CR2849877 and CR2854245

Signed-off-by: Karthikeyan Periyasamy <periyasa@codeaurora.org>
---
--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -2718,6 +2718,7 @@ static void ath11k_dp_rx_h_ppdu(struct a
 	u8 channel_num;
 	u32 center_freq, meta_data;
 	struct ieee80211_channel *channel;
+	int no_chan_info = -1;
 
 	rx_status->freq = 0;
 	rx_status->rate_idx = 0;
@@ -2735,20 +2736,39 @@ static void ath11k_dp_rx_h_ppdu(struct a
 	    center_freq <= ATH11K_MAX_6G_FREQ) {
 		rx_status->band = NL80211_BAND_6GHZ;
 		rx_status->freq = center_freq;
+		no_chan_info = 1;
 	} else if (channel_num >= 1 && channel_num <= 14) {
 		rx_status->band = NL80211_BAND_2GHZ;
+		no_chan_info = 1;
 	} else if (channel_num >= 36 && channel_num <= 177) {
 		rx_status->band = NL80211_BAND_5GHZ;
 	} else {
+		no_chan_info = 1;
+	}
+
+	if (unlikely(no_chan_info == -1)) {
+        ath11k_warn(ar->ab, "[Test] not in range channel_num %d center_freq %d\n", channel_num, center_freq);
+        ath11k_warn(ar->ab, "[Test] wiphy-bandinfo %p\n", ar->hw->wiphy->bands[rx_status->band]);
+        ath11k_warn(ar->ab, "[Test] msdu is first msdu %d\n", ath11k_dp_rx_h_msdu_end_first_msdu(ar->ab, rx_desc));
+        ath11k_warn(ar->ab, "[Test] msdu is last msdu %d\n", ath11k_dp_rx_h_msdu_end_first_msdu(ar->ab, rx_desc));
+        ath11k_warn(ar->ab, "[Test] msdu len %d\n", ath11k_dp_rx_h_msdu_start_msdu_len(ar->ab, rx_desc));
+    }
+	if (!ar->hw->wiphy->bands[rx_status->band]) {
+		ath11k_warn(ar->ab, "[Test] band info NULL for band %d\n", rx_status->band);
 		spin_lock_bh(&ar->data_lock);
 		channel = ar->rx_channel;
 		if (channel) {
+			ath11k_warn(ar->ab, "[Test] band %d center_freq %d from rx_channel\n", channel->band, channel->center_freq);
 			rx_status->band = channel->band;
 			channel_num =
 				ieee80211_frequency_to_channel(channel->center_freq);
+			if (rx_status->band == NL80211_BAND_6GHZ) {
+				ath11k_warn(ar->ab, "[Test] filling centre_freq=%d for 6Ghz\n", channel->center_freq);
+				rx_status->freq = channel->center_freq;
+			}
 		}
 		spin_unlock_bh(&ar->data_lock);
-		ath11k_dbg_dump(ar->ab, ATH11K_DBG_DATA, NULL, "rx_desc: ",
+		ath11k_dbg_dump(ar->ab, ATH11K_DBG_DATA, NULL, "[Test] rx_desc: ",
 				rx_desc, sizeof(struct hal_rx_desc));
 	}
 
@@ -3593,6 +3613,12 @@ static int ath11k_dp_rx_reap_mon_status_
 						&cookie, &rbm);
 		if (paddr) {
 			buf_id = FIELD_GET(DP_RXDMA_BUF_COOKIE_BUF_ID, cookie);
+			ar->cookie_pdev_id = FIELD_GET(DP_RXDMA_BUF_COOKIE_PDEV_ID, cookie);
+
+			if (mac_id != ar->cookie_pdev_id) {
+				ath11k_warn(ab, "invalid local mac_id %d pdev_id %d\n",
+					    mac_id, ar->cookie_pdev_id);
+			}
 
 			spin_lock_bh(&rx_ring->idr_lock);
 			skb = idr_find(&rx_ring->bufs_idr, buf_id);
@@ -5786,6 +5812,11 @@ void ath11k_dp_rx_mon_dest_process(struc
 	spin_unlock_bh(&pmon->mon_lock);
 
 	if (rx_bufs_used) {
+		if (ar->cookie_pdev_id != dp->mac_id || mac_id != dp->mac_id) {
+			ath11k_warn(ar->ab, "invalid mac_id for rxbuf replenish pdev id %d mac id %d dp mac id %d\n",
+				    ar->cookie_pdev_id, mac_id, dp->mac_id);
+		}
+
 		rx_mon_stats->dest_ppdu_done++;
 		hal_params = ar->ab->hw_params.hal_params;
 
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -4154,7 +4154,8 @@ static int ath11k_mac_op_hw_scan(struct
 
 	ret = ath11k_start_scan(ar, arg);
 	if (ret) {
-		ath11k_warn(ar->ab, "failed to start hw scan: %d\n", ret);
+		ath11k_warn(ar->ab, "failed to start hw scan: %d scan_state %d pdev_idx %d\n",
+			    ret, ar->scan.state, ar->pdev_idx);
 		spin_lock_bh(&ar->data_lock);
 		ar->scan.state = ATH11K_SCAN_IDLE;
 		spin_unlock_bh(&ar->data_lock);
@@ -7641,7 +7642,7 @@ static void ath11k_mac_op_remove_chanctx
 	struct ath11k *ar = hw->priv;
 	struct ath11k_base *ab = ar->ab;
 
-	ath11k_dbg(ab, ATH11K_DBG_MAC,
+	ath11k_dbg(ab, ATH11K_DBG_TEST,
 		   "chanctx remove freq %u width %d ptr %p\n",
 		   ctx->def.chan->center_freq, ctx->def.width, ctx);
 
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -863,6 +863,7 @@ struct ath11k {
 	bool ps_state_enable;
 	bool ps_timekeeper_enable;
 	bool ce_latency_stats_enable;
+	int cookie_pdev_id;
 };
 
 struct ath11k_band_cap {
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -25,7 +25,7 @@ module_param_named(nss_offload, nss_offl
 MODULE_PARM_DESC(nss_offload, "Enable NSS Offload support");
 #endif
 
-unsigned int ath11k_debug_mask;
+unsigned int ath11k_debug_mask = ATH11K_DBG_TEST;
 EXPORT_SYMBOL(ath11k_debug_mask);
 module_param_named(debug_mask, ath11k_debug_mask, uint, 0644);
 MODULE_PARM_DESC(debug_mask, "Debugging mask");
--- a/drivers/net/wireless/ath/ath11k/debug.h
+++ b/drivers/net/wireless/ath/ath11k/debug.h
@@ -27,6 +27,7 @@ enum ath11k_debug_mask {
 	ATH11K_DBG_DP_TX	= 0x00002000,
 	ATH11K_DBG_DP_RX	= 0x00004000,
 	ATH11K_DBG_CE		= 0x00008000,
+	ATH11K_DBG_TEST         = 0x00080000,
 };
 
 static inline const char *ath11k_dbg_str(enum ath11k_debug_mask mask)
