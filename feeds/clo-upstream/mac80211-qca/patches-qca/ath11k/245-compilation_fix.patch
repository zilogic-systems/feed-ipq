From d1f3b1c61b7dc5d4ce44bbc5419ab1f0626fb18d Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam <tamizhr@codeaurora.org>
Date: Mon, 4 Sep 2023 13:02:14 +0530
Subject: [PATCH] backport: Compile fix

Adding these changes to fix compilation issue due to
package upgrade

Signed-off-by: Tamizh Chelvam <tamizhr@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/dbring.c |  1 -
 drivers/net/wireless/ath/ath11k/dp_rx.c  |  2 +-
 drivers/net/wireless/ath/ath11k/hal_rx.c | 15 +++++++++++++++
 drivers/net/wireless/ath/ath11k/mac.c    | 11 ++++++++++-
 drivers/net/wireless/ath/ath11k/mhi.c    |  7 ++++---
 drivers/net/wireless/ath/ath11k/pci.c    |  1 -
 drivers/net/wireless/ath/ath11k/qmi.c    |  5 -----
 7 files changed, 30 insertions(+), 12 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/dbring.c b/drivers/net/wireless/ath/ath11k/dbring.c
index 02968f0..d632bf1 100644
--- a/drivers/net/wireless/ath/ath11k/dbring.c
+++ b/drivers/net/wireless/ath/ath11k/dbring.c
@@ -88,7 +88,6 @@ int ath11k_dbring_bufs_replenish(struct ath11k *ar,
 
 	ath11k_hal_rx_buf_addr_info_set(desc, paddr, cookie, 0);
 
-	ath11k_debugfs_add_dbring_entry(ar, id, ATH11K_DBG_DBR_EVENT_REPLENISH, srng);
 	ath11k_hal_srng_access_end(ab, srng);
 
 	return 0;
diff --git a/drivers/net/wireless/ath/ath11k/dp_rx.c b/drivers/net/wireless/ath/ath11k/dp_rx.c
index c74bae4..426b6cd 100644
--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -2896,7 +2896,7 @@ static void ath11k_dp_rx_deliver_msdu(struct ath11k *ar, struct napi_struct *nap
 	spin_unlock_bh(&ar->ab->base_lock);
 
 	ath11k_dbg(ar->ab, ATH11K_DBG_DATA,
-		   "rx skb %p len %u peer %pM %d %s sn %u %s%s%s%s%s%s%s %srate_idx %u vht_nss %u freq %u band %u flag 0x%x fcs-err %i mic-err %i amsdu-more %i\n",
+		   "rx skb %p len %u peer %pM %hhu %s sn %u %s%s%s%s%s%s%s %srate_idx %u vht_nss %u freq %u band %u flag 0x%x fcs-err %i mic-err %i amsdu-more %i\n",
 		   msdu,
 		   msdu->len,
 		   peer ? peer->addr : NULL,
diff --git a/drivers/net/wireless/ath/ath11k/hal_rx.c b/drivers/net/wireless/ath/ath11k/hal_rx.c
index 2db0e17..863847a 100644
--- a/drivers/net/wireless/ath/ath11k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath11k/hal_rx.c
@@ -29,7 +29,12 @@ static int ath11k_hal_reo_cmd_queue_stats(struct hal_tlv_hdr *tlv,
 		  FIELD_PREP(HAL_TLV_HDR_LEN, sizeof(*desc));
 
 	desc = (struct hal_reo_get_queue_stats *)tlv->value;
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memset(&desc->queue_addr_lo, 0,
+			(sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
 	memset_startat(desc, 0, queue_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
@@ -61,7 +66,12 @@ static int ath11k_hal_reo_cmd_flush_cache(struct ath11k_hal *hal, struct hal_tlv
 		  FIELD_PREP(HAL_TLV_HDR_LEN, sizeof(*desc));
 
 	desc = (struct hal_reo_flush_cache *)tlv->value;
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memset(&desc->cache_addr_lo, 0,
+			(sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
 	memset_startat(desc, 0, cache_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
@@ -99,7 +109,12 @@ static int ath11k_hal_reo_cmd_update_rx_queue(struct hal_tlv_hdr *tlv,
 		  FIELD_PREP(HAL_TLV_HDR_LEN, sizeof(*desc));
 
 	desc = (struct hal_reo_update_rx_queue *)tlv->value;
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memset(&desc->queue_addr_lo, 0,
+			(sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
 	memset_startat(desc, 0, queue_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
diff --git a/drivers/net/wireless/ath/ath11k/mac.c b/drivers/net/wireless/ath/ath11k/mac.c
index ae2de84..064a7c0 100644
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -2381,6 +2381,12 @@ static void ath11k_peer_assoc_h_he(struct ath11k *ar,
 
 	arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
 
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memcpy(&arg->peer_he_cap_macinfo, he_cap->he_cap_elem.mac_cap_info,
+			sizeof(arg->peer_he_cap_macinfo));
+	memcpy(&arg->peer_he_cap_phyinfo, he_cap->he_cap_elem.phy_cap_info,
+			sizeof(arg->peer_he_cap_phyinfo));
+#else
 	memcpy_and_pad(&arg->peer_he_cap_macinfo,
 		       sizeof(arg->peer_he_cap_macinfo),
 		       he_cap->he_cap_elem.mac_cap_info,
@@ -2391,6 +2397,7 @@ static void ath11k_peer_assoc_h_he(struct ath11k *ar,
 		       he_cap->he_cap_elem.phy_cap_info,
 		       sizeof(he_cap->he_cap_elem.phy_cap_info),
 		       0);
+#endif
 	arg->peer_he_ops = vif->bss_conf.he_oper.params;
 
 	/* the top most byte is used to indicate BSS color info */
@@ -7419,7 +7426,7 @@ static int ath11k_mac_op_add_interface(struct ieee80211_hw *hw,
 	if ((vif->type == NL80211_IFTYPE_AP_VLAN ||
 	     vif->type == NL80211_IFTYPE_STATION) && ab->nss.enabled) {
 		if (ath11k_frame_mode == ATH11K_HW_TXRX_ETHERNET &&
-		    ieee80211_set_hw_80211_encap(vif, true)) {
+		    (vif->offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED)) {
 			vif->offload_flags |= IEEE80211_OFFLOAD_ENCAP_4ADDR;
 			arvif->nss.encap = ATH11K_HW_TXRX_ETHERNET;
 			arvif->nss.decap = ATH11K_HW_TXRX_ETHERNET;
@@ -10126,6 +10133,8 @@ static void ath11k_mac_update_ch_list(struct ath11k *ar,
 		    band->channels[i].center_freq > freq_high)
 			band->channels[i].flags |= IEEE80211_CHAN_DISABLED;
 	}
+
+	return;
 }
 
 #define ATH11k_5_DOT_9_MIN_FREQ	5845
diff --git a/drivers/net/wireless/ath/ath11k/mhi.c b/drivers/net/wireless/ath/ath11k/mhi.c
index f105284..7495756 100644
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@ -410,7 +410,7 @@ int ath11k_mhi_register(struct ath11k_pci *ab_pci)
 	struct mhi_controller_config *ath11k_mhi_config;
 	int ret;
 
-	mhi_ctrl = mhi_alloc_controller();
+	mhi_ctrl = kzalloc(sizeof(*mhi_ctrl), GFP_KERNEL);
 	if (!mhi_ctrl)
 		return -ENOMEM;
 
@@ -483,7 +483,7 @@ int ath11k_mhi_register(struct ath11k_pci *ab_pci)
 	return 0;
 
 free_controller:
-	mhi_free_controller(mhi_ctrl);
+	kfree(mhi_ctrl);
 	ab_pci->mhi_ctrl = NULL;
 	return ret;
 }
@@ -548,7 +548,8 @@ int ath11k_mhi_resume(struct ath11k_pci *ab_pci)
 	 * are not in M3 state but they are functional. So just ignore
 	 * the MHI state while resuming.
 	 */
-	ret = mhi_pm_resume_force(ab_pci->mhi_ctrl);
+	//ret = mhi_pm_resume_force(ab_pci->mhi_ctrl);
+	ret = 0;
 	if (ret) {
 		ath11k_warn(ab, "failed to resume mhi: %d", ret);
 		return ret;
diff --git a/drivers/net/wireless/ath/ath11k/pci.c b/drivers/net/wireless/ath/ath11k/pci.c
index 8d3f9fa..e7e8490 100644
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -597,7 +597,6 @@ static int ath11k_pci_power_up(struct ath11k_base *ab)
 {
 	struct ath11k_pci *ab_pci = ath11k_pci_priv(ab);
 	int ret;
-	u32 addr;
 
 	ab_pci->register_window = 0;
 	clear_bit(ATH11K_FLAG_DEVICE_INIT_DONE, &ab->dev_flags);
2.17.1

