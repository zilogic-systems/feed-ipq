From d890c6d602307c9297df12c7d0287f9ffd26208b Mon Sep 17 00:00:00 2001
From: Sriram R <srirrama@codeaurora.org>
Date: Wed, 12 May 2021 19:21:09 +0530
Subject: [PATCH] ath11k: poll reo status ring for IPQ5018

Currently reo status interrupts are not received
due to wrong mapping of the reo status interrupt
line in IPQ5018.

Hence, until the mapping is resolved in HW, use
polling to reap the reo status ring. Rather than
a period timer to reap the ring, the timer is
triggered only on sending a reo command with
status request.

Without proper reaping of the ring, backpressure
and ring full issues are seen in multi client test
setups which leads to flooding the console with
error messages reporting failure to send reo cmds.

Can be reverted once HW solution is available.

Signed-off-by: Sriram R <srirrama@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/core.c  |  8 ++++-
 drivers/net/wireless/ath/ath11k/dp.c    | 59 +++++++++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath11k/dp.h    |  8 +++++
 drivers/net/wireless/ath/ath11k/dp_tx.c |  4 +++
 drivers/net/wireless/ath/ath11k/hw.c    | 31 +++++++++++++++++
 drivers/net/wireless/ath/ath11k/hw.h    |  2 ++
 6 files changed, 111 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -154,6 +154,7 @@ static struct ath11k_hw_params ath11k_hw
 		.smp2p_wow_exit = false,
 		/* In addition to TCL ring use TCL_CMD ring also for tx */
 		.max_tx_ring = DP_TCL_NUM_RING_MAX + 1,
+		.reo_status_poll = false,
 	},
 	{
 		.hw_rev = ATH11K_HW_IPQ6018_HW10,
@@ -242,6 +243,7 @@ static struct ath11k_hw_params ath11k_hw
 		.support_fw_mac_sequence = false,
 		/* In addition to TCL ring use TCL_CMD ring also for tx */
 		.max_tx_ring = DP_TCL_NUM_RING_MAX + 1,
+		.reo_status_poll = false,
 	},
 	{
 		.name = "qca6390 hw2.0",
@@ -329,6 +331,7 @@ static struct ath11k_hw_params ath11k_hw
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
 		.support_fw_mac_sequence = true,
+		.reo_status_poll = false,
 	},
 	{
 		.name = "qcn9074 hw1.0",
@@ -423,6 +426,7 @@ static struct ath11k_hw_params ath11k_hw
 				       CFR_DATA_MAX_LEN_QCN9074,
 		/* In addition to TCL ring use TCL_CMD ring also for tx */
 		.max_tx_ring = DP_TCL_NUM_RING_MAX + 1,
+		.reo_status_poll = false,
 	},
 	{
 		.name = "wcn6855 hw2.0",
@@ -679,6 +683,7 @@ static struct ath11k_hw_params ath11k_hw
 		.support_fw_mac_sequence = true,
 		.ce_window = 2,
 		.dp_window = 1,
+		.reo_status_poll = false,
 	},
 	{
 		.hw_rev = ATH11K_HW_IPQ5018_HW10,
@@ -768,6 +773,7 @@ static struct ath11k_hw_params ath11k_hw
 		.cfr_stream_buf_size = 8500,
 		/* In addition to TCL ring use TCL_CMD ring also for tx */
 		.max_tx_ring = DP_TCL_NUM_RING_MAX,
+		.reo_status_poll = false,
 	},
 	{
 		.hw_rev = ATH11K_HW_QCN6122,
@@ -840,6 +846,7 @@ static struct ath11k_hw_params ath11k_hw
 		.qdss_offset = ATH11K_QMI_QCN6122_QDSS_OFFSET,
 		.caldb_offset = ATH11K_QMI_QCN6122_CALDB_OFFSET,
 		.max_tx_ring = DP_TCL_NUM_RING_MAX,
+		.reo_status_poll = false,
  	},
 };
 
--- a/drivers/net/wireless/ath/ath11k/dp.c
+++ b/drivers/net/wireless/ath/ath11k/dp.c
@@ -372,12 +372,66 @@ void ath11k_dp_stop_shadow_timers(struct
 	ath11k_dp_shadow_stop_timer(ab, &ab->dp.reo_cmd_timer);
 }
 
+static void ath11k_dp_handle_reo_status_timer(struct timer_list *timer)
+{
+	struct ath11k_dp *dp = from_timer(dp, timer, reo_status_timer);
+	struct ath11k_base *ab = dp->ab;
+
+	spin_lock_bh(&dp->reo_cmd_lock);
+	dp->reo_status_timer_running = false;
+	spin_unlock_bh(&dp->reo_cmd_lock);
+
+	ath11k_dp_process_reo_status(ab);
+}
+
+void ath11k_dp_start_reo_status_timer(struct ath11k_base *ab)
+{
+	struct ath11k_dp *dp = &ab->dp;
+
+	if (!ab->hw_params.reo_status_poll)
+		return;
+
+	spin_lock_bh(&dp->reo_cmd_lock);
+	if (dp->reo_status_timer_running) {
+		spin_unlock_bh(&dp->reo_cmd_lock);
+		return;
+	}
+	dp->reo_status_timer_running = true;
+	spin_unlock_bh(&dp->reo_cmd_lock);
+
+	mod_timer(&dp->reo_status_timer, jiffies +
+		  msecs_to_jiffies(ATH11K_REO_STATUS_POLL_TIMEOUT_MS));
+}
+
+static void ath11k_dp_stop_reo_status_timer(struct ath11k_base *ab)
+{
+	struct ath11k_dp *dp = &ab->dp;
+
+	if (!ab->hw_params.reo_status_poll)
+		return;
+
+	del_timer_sync(&dp->reo_status_timer);
+	dp->reo_status_timer_running = false;
+}
+
+static void ath11k_dp_init_reo_status_timer(struct ath11k_base *ab)
+{
+	struct ath11k_dp *dp = &ab->dp;
+
+	if (!ab->hw_params.reo_status_poll)
+		return;
+
+	timer_setup(&dp->reo_status_timer,
+		    ath11k_dp_handle_reo_status_timer, 0);
+}
+
 static void ath11k_dp_srng_common_cleanup(struct ath11k_base *ab)
 {
 	struct ath11k_dp *dp = &ab->dp;
 	int i;
 
 	ath11k_dp_stop_shadow_timers(ab);
+	ath11k_dp_stop_reo_status_timer(ab);
 	ath11k_dp_srng_cleanup(ab, &dp->wbm_desc_rel_ring);
 	ath11k_dp_srng_cleanup(ab, &dp->tcl_cmd_ring);
 	ath11k_dp_srng_cleanup(ab, &dp->tcl_status_ring);
@@ -399,6 +453,8 @@ static int ath11k_dp_srng_common_setup(s
 	int i, ret;
 	u8 tcl_num, wbm_num;
 
+	ath11k_dp_init_reo_status_timer(ab);
+
 	ret = ath11k_dp_srng_setup(ab, &dp->wbm_desc_rel_ring,
 				   HAL_SW2WBM_RELEASE, 0, 0,
 				   DP_WBM_RELEASE_RING_SIZE);
--- a/drivers/net/wireless/ath/ath11k/dp.h
+++ b/drivers/net/wireless/ath/ath11k/dp.h
@@ -44,6 +44,8 @@ struct dp_rx_tid {
 #define DP_MON_PURGE_TIMEOUT_MS     100
 #define DP_MON_SERVICE_BUDGET       128
 
+#define ATH11K_REO_STATUS_POLL_TIMEOUT_MS 10
+
 struct dp_reo_cache_flush_elem {
 	struct list_head list;
 	struct dp_rx_tid data;
@@ -289,6 +291,10 @@ struct ath11k_dp {
 	spinlock_t reo_cmd_lock;
 	struct ath11k_hp_update_timer reo_cmd_timer;
 	struct ath11k_hp_update_timer tx_ring_timer[DP_TCL_NUM_RING_MAX];
+
+	/* reo status timer and flags */
+	struct timer_list reo_status_timer;
+	bool reo_status_timer_running;
 };
 
 /* HTT definitions */
@@ -1882,5 +1888,6 @@ void ath11k_dp_shadow_init_timer(struct
 				 struct ath11k_hp_update_timer *update_timer,
 				 u32 interval, u32 ring_id);
 void ath11k_dp_stop_shadow_timers(struct ath11k_base *ab);
+void ath11k_dp_start_reo_status_timer(struct ath11k_base *ab);
 
 #endif
--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
@@ -939,6 +939,10 @@ int ath11k_dp_tx_send_reo_cmd(struct ath
 	if (cmd_num == 0)
 		return -EINVAL;
 
+	/* Trigger reo status polling if required */
+	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
+		ath11k_dp_start_reo_status_timer(ab);
+
 	if (!cb)
 		return 0;
 
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -273,6 +273,7 @@ struct ath11k_hw_params {
 	u32 cfr_dma_hdr_size;
 	u32 cfr_num_stream_bufs;
 	u32 cfr_stream_buf_size;
+	bool reo_status_poll;
 };
 
 struct ath11k_hw_ops {
