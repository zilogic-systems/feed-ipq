From d105e8cb943b33304adc54593e5fe10f8e7f48dd Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Wed, 20 Oct 2021 16:26:57 +0530
Subject: [PATCH] ath11k: add support to select all 6G regulatory rules

Currently, ath11k was only updating one type of 6G
regulatory rule based on wmi_vdev_type. However, during
AP + STA concurrency, it can not maintain two different
rules in one single reg rule space. Hence, this change is to
update and store all possible 6G reg rules in the regulatory
domain.

Subsequent patch will use one of this reg rules as per
its configured power mode and can update its rules accordingly.
Even during concurrency, two rules can be fetched and updated.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/reg.c | 121 +++++++++++++++++++++++-----------
 drivers/net/wireless/ath/ath11k/reg.h |   1 -
 drivers/net/wireless/ath/ath11k/wmi.c |   2 +-
 3 files changed, 84 insertions(+), 40 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/reg.c
+++ b/drivers/net/wireless/ath/ath11k/reg.c
@@ -409,25 +409,71 @@ static void ath11k_copy_reg_rule(struct
 		ath11k_reg_rule->end_freq = reg_rule->end_freq;
 }
 
+static struct cur_reg_rule
+*ath11k_get_active_6g_reg_rule(struct cur_regulatory_info *reg_info,
+			       u32 *max_bw_6g, int *max_elements)
+{
+	struct cur_reg_rule *reg_rule = NULL;
+	u8 i = 0, j = 0;
+
+	for (i = 0; i < WMI_REG_CURRENT_MAX_AP_TYPE; i++) {
+		if (reg_info->num_6g_reg_rules_ap[i]) {
+			*max_elements = reg_info->num_6g_reg_rules_ap[i];
+			reg_rule = reg_info->reg_rules_6g_ap_ptr[i];
+			*max_bw_6g = reg_info->max_bw_6g_ap[i];
+			reg_info->num_6g_reg_rules_ap[i] = 0;
+			return reg_rule;
+		}
+	}
+
+	for (i = 0; i < WMI_REG_MAX_CLIENT_TYPE; i++) {
+		for (j = 0; j < WMI_REG_CURRENT_MAX_AP_TYPE; j++) {
+			if (reg_info->num_6g_reg_rules_client[j][i]) {
+				*max_elements = reg_info->num_6g_reg_rules_client
+									   [j][i];
+				reg_rule = reg_info->reg_rules_6g_client_ptr
+								      [j][i];
+				*max_bw_6g = reg_info->max_bw_6g_client[j][i];
+				reg_info->num_6g_reg_rules_client[j][i] = 0;
+				return reg_rule;
+			}
+		}
+	}
+
+	return reg_rule;
+}
+
 struct ieee80211_regdomain *
 ath11k_reg_build_regd(struct ath11k_base *ab,
 		      struct cur_regulatory_info *reg_info)
 {
 	struct ieee80211_regdomain *new_regd = NULL;
 	struct cur_reg_rule *reg_rule;
-	u8 i = 0, j = 0, k = 0;
+	u8 i = 0, j = 0, k = 0, max_elements = 0;
 	u8 num_rules;
 	u16 max_bw;
-	u32 flags;
+	u32 flags, reg_6g_number = 0, max_bw_6g = 0;
 	char alpha2[3];
+	bool reg_6g_itr_set = false;
 
 	num_rules = reg_info->num_5ghz_reg_rules + reg_info->num_2ghz_reg_rules;
 
-	/* FIXME: Currently taking reg rules for 6 GHz only from Indoor AP mode list.
-	 * This can be updated after complete 6 GHz regulatory support is added.
+	/* FIXME: Currently updating all 9 possible regulatory rules for 6G.
+	 * For space optimization, logic can be enhanced to store reg rules
+	 * dynamically from power, AP and STA mode combination.
 	 */
-	if (reg_info->is_ext_reg_event)
-		num_rules += reg_info->num_6ghz_rules_ap[WMI_REG_INDOOR_AP];
+
+	if (reg_info->is_ext_reg_event) {
+		/* All 6G APs - (LP, SP, VLP) */
+		for (i = 0; i < WMI_REG_CURRENT_MAX_AP_TYPE; i++)
+			reg_6g_number += reg_info->num_6ghz_rules_ap[i];
+		/* All 6G STAs - (LP_DEF, LP_SUB, SP_DEF, SP_SUB, VLP_DEF, VLP_SUB) */
+		for (i = 0; i < WMI_REG_MAX_CLIENT_TYPE; i++) {
+			for (j = 0; j < WMI_REG_CURRENT_MAX_AP_TYPE; j++)
+				reg_6g_number += reg_info->num_6ghz_rules_client[j][i];
+		}
+	}
+	num_rules += reg_6g_number;
 
 	if (!num_rules)
 		return new_regd;
@@ -454,7 +500,7 @@ ath11k_reg_build_regd(struct ath11k_base
 	/* Update reg_rules[] below. Firmware is expected to
 	 * send these rules in order(2 GHz rules first and then 5 GHz)
 	 */
-	for (; i < num_rules; i++) {
+	for (i = 0, j = 0; i < num_rules; i++) {
 		if (reg_info->num_2ghz_reg_rules &&
 		    (i < reg_info->num_2ghz_reg_rules)) {
 			reg_rule = reg_info->reg_rules_2ghz_ptr + i;
@@ -481,18 +527,40 @@ ath11k_reg_build_regd(struct ath11k_base
 
 			else if (reg_rule->start_freq >= ATH11K_MIN_6G_FREQ)
 				ath11k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+		} else if (reg_info->is_ext_reg_event && reg_6g_number) {
+			if (!reg_6g_itr_set) {
+				reg_rule_6g = ath11k_get_active_6g_reg_rule(reg_info,
+							  &max_bw_6g, &max_elements);
+
+				if (!reg_rule_6g) {
+					ath11k_warn(ab,
+						"\nFetching a valid reg_rule_6g_ptr failed."
+						"This shouldn't happen normally. Be carefull with"
+						"the regulatory domain settings\n");
+					break;
+				}
+				reg_6g_itr_set = true;
+			}
+			if (reg_6g_itr_set && k < max_elements) {
+				reg_rule = reg_rule_6g + k++;
+				max_bw = min_t(u16, reg_rule->max_bw, max_bw_6g);
+				flags = NL80211_RRF_AUTO_BW;
+
+				if (reg_rule->psd_flag)
+					flags |= NL80211_RRF_PSD;
+
+				ath11k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+			}
+
+			if (reg_6g_itr_set && k >= max_elements) {
+				reg_6g_itr_set = false;
+				reg_rule_6g = NULL;
+				max_bw_6g = 0;
+				max_elements = 0;
+				k = 0;
+			}
+			reg_6g_number--;
 
-		} else if (reg_info->is_ext_reg_event &&
-			   reg_info->num_6ghz_rules_ap[WMI_REG_INDOOR_AP] &&
-			   (k < reg_info->num_6ghz_rules_ap[WMI_REG_INDOOR_AP])) {
-			reg_rule = reg_info->reg_rules_6ghz_ap_ptr[WMI_REG_INDOOR_AP] +
-				   k++;
-			max_bw = min_t(u16, reg_rule->max_bw,
-				       reg_info->max_bw_6ghz_ap[WMI_REG_INDOOR_AP]);
-			flags = NL80211_RRF_AUTO_BW;
-			if (reg_rule->psd_flag)
-				flags |= NL80211_RRF_PSD;
-			ath11k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
 		} else {
 			break;
 		}
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -6211,6 +6211,27 @@ ath11k_invalid_5ghz_reg_ext_rules_from_w
 	return num_invalid_5ghz_rules;
 }
 
+static u8
+ath11k_invalid_5g_reg_ext_rules_from_wmi(u32 num_reg_rules,
+					 struct wmi_regulatory_ext_rule_struct *wmi_reg_rule)
+{
+	u8 num_invalid_5g_rules = 0;
+	u32 count, start_freq, end_freq;
+
+	for (count = 0; count < num_reg_rules; count++) {
+		start_freq = FIELD_GET(REG_RULE_START_FREQ,
+				       wmi_reg_rule[count].freq_info);
+		end_freq = FIELD_GET(REG_RULE_END_FREQ,
+				     wmi_reg_rule[count].freq_info);
+
+		if (start_freq >= ATH11K_MIN_6G_FREQ &&
+		    end_freq <= ATH11K_MAX_6G_FREQ)
+			num_invalid_5g_rules++;
+	}
+
+	return num_invalid_5g_rules;
+}
+
 static int ath11k_pull_reg_chan_list_ext_update_ev(struct ath11k_base *ab,
 						   struct sk_buff *skb,
 						   struct cur_regulatory_info *reg_info)
@@ -8090,7 +8111,6 @@ static int ath11k_reg_handle_chan_list(s
 	struct ieee80211_regdomain *regd;
 	struct ath11k *ar;
 	int pdev_idx;
-	enum wmi_vdev_type vdev_type;
 
 	ath11k_dbg(ab, ATH11K_DBG_WMI, "event reg chan list id %d", id);
 
@@ -8136,14 +8156,7 @@ static int ath11k_reg_handle_chan_list(s
 		    (char *)reg_info->alpha2, 2))
 		goto retfail;
 
-	ar = ab->pdevs[pdev_idx].ar;
-	vdev_type = ath11k_mac_get_ar_vdev_type(ar);
-
-	ath11k_dbg(ab, ATH11K_DBG_WMI,
-		   "wmi handle chan list power type %d vdev type %d intersect %d\n",
-		   power_type, vdev_type, intersect);
-
-	regd = ath11k_reg_build_regd(ab, reg_info, intersect, vdev_type, power_type);
+	regd = ath11k_reg_build_regd(ab, reg_info, intersect, power_type);
 
 	if (!regd) {
 		ath11k_warn(ab, "failed to build regd from reg_info\n");
--- a/drivers/net/wireless/ath/ath11k/reg.h
+++ b/drivers/net/wireless/ath/ath11k/reg.h
@@ -30,7 +30,8 @@ void ath11k_reg_free(struct ath11k_base
 void ath11k_regd_update_work(struct work_struct *work);
 struct ieee80211_regdomain *
 ath11k_reg_build_regd(struct ath11k_base *ab,
-		      struct cur_regulatory_info *reg_info);
+		      struct cur_regulatory_info *reg_info, bool intersect,
+		      enum ieee80211_ap_reg_power power_type);
 int ath11k_regd_update(struct ath11k *ar);
 int ath11k_reg_update_chan_list(struct ath11k *ar, bool wait);
 #endif
