From a72ca46c5afd2a4146f0fd95ba1306a8c47028c7 Mon Sep 17 00:00:00 2001
From: John Crispin <john@phrozen.org>
Date: Fri, 21 Jan 2022 10:14:48 -0800
Subject: [PATCH 09/14] ath11k: EMA beacon support

Add new function ath11k_mac_setup_bcn_tmpl_ema() which invokes the new
API provided by MAC80211 to retrieve EMA beacons. For non EMA APs,
ath11k_mac_setup_bcn_tmpl_legacy() is added which maintains the current
functionality.

Signed-off-by: John Crispin <john@phrozen.org>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/mac.c | 110 +++++++++++++++++++++-----
 drivers/net/wireless/ath/ath11k/wmi.c |   4 +-
 drivers/net/wireless/ath/ath11k/wmi.h |  12 ++-
 3 files changed, 106 insertions(+), 20 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -1616,6 +1616,26 @@ static bool ath11k_mac_set_nontx_vif_par
 	return false;
 }
 
+static int __ath11k_mac_setup_bcn_tmpl(struct ath11k_vif *arvif,
+				       struct sk_buff *bcn,
+				       struct ieee80211_mutable_offsets offs,
+				       int ema_idx, int ema_cnt)
+{
+	struct ath11k *ar = arvif->ar;
+	u32 ema_param = 0;
+
+	if (ema_cnt) {
+		ema_param = (ema_cnt << WMI_BEACON_EMA_PARAM_PERIODICITY_SHIFT);
+		ema_param |= (ema_idx << WMI_BEACON_EMA_PARAM_TMPL_IDX_SHIFT);
+		ema_param |= ((!ema_idx ? 1 : 0) <<
+			      WMI_BEACON_EMA_PARAM_FIRST_TMPL_SHIFT);
+		ema_param |= ((ema_idx + 1 == ema_cnt ? 1 : 0) <<
+			      WMI_BEACON_EMA_PARAM_LAST_TMPL_SHIFT);
+	}
+
+	return ath11k_wmi_bcn_tmpl(ar, arvif->vdev_id, &offs, bcn, ema_param);
+}
+
 static void ath11k_mac_set_vif_params(struct ath11k_vif *arvif,
 				      struct sk_buff *bcn)
 {
@@ -1639,7 +1659,7 @@ static void ath11k_mac_set_vif_params(st
 		vht_cap = (void *)(vht_cap_ie + 2);
 		arvif->vht_cap = vht_cap->vht_cap_info;
 	}
-	ar->cfr_phymode = ath11k_cfr_chan_to_phymode(arvif);
+	arvif->ar->cfr_phymode = ath11k_cfr_chan_to_phymode(arvif);
 
 	if (cfg80211_find_vendor_ie(WLAN_OUI_MICROSOFT,
 				    WLAN_OUI_TYPE_MICROSOFT_WPA,
@@ -1662,10 +1682,11 @@ static int ath11k_mac_setup_bcn_tmpl_ema
 	struct ath11k_vif *tx_arvif;
 	struct ieee80211_ema_beacons *beacons;
 	int ret = 0;
-	bool nontx_vif_params_set = false;
-	u32 params = 0;
 	u8 i = 0;
 
+	if (!arvif->vif->mbssid_tx_vif)
+		return -1;
+
 	tx_arvif = ath11k_vif_to_arvif(arvif->vif->mbssid_tx_vif);
 
 	beacons = ieee80211_beacon_get_template_ema_list(tx_arvif->ar->hw,
@@ -1682,19 +1703,9 @@ static int ath11k_mac_setup_bcn_tmpl_ema
 		arvif->wpaie_present = tx_arvif->wpaie_present;
 
 	for (i = 0; i < beacons->cnt; i++) {
-		if (tx_arvif != arvif && !nontx_vif_params_set)
-			nontx_vif_params_set =
-				ath11k_mac_set_nontx_vif_params(tx_arvif, arvif,
-								beacons->bcn[i].skb);
-
-		params = beacons->cnt;
-		params |= (i << WMI_EMA_TMPL_IDX_SHIFT);
-		params |= ((!i ? 1 : 0) << WMI_EMA_FIRST_TMPL_SHIFT);
-		params |= ((i + 1 == beacons->cnt ? 1 : 0) << WMI_EMA_LAST_TMPL_SHIFT);
-
-		ret = ath11k_wmi_bcn_tmpl(tx_arvif->ar, tx_arvif->vdev_id,
-					  &beacons->bcn[i].offs,
-					  beacons->bcn[i].skb, params);
+		ret = __ath11k_mac_setup_bcn_tmpl(tx_arvif, beacons->bcn[i].skb,
+						  beacons->bcn[i].offs,
+						  i, beacons->cnt);
 		if (ret) {
 			ath11k_warn(tx_arvif->ar->ab,
 				    "failed to set ema beacon template id %i error %d\n",
@@ -1705,8 +1716,6 @@ static int ath11k_mac_setup_bcn_tmpl_ema
 
 	ieee80211_beacon_free_ema_list(beacons);
 
-	if (tx_arvif != arvif && !nontx_vif_params_set)
-		return -EINVAL; /* Profile not found in the beacons */
 
 	return ret;
 }
@@ -1743,7 +1752,7 @@ static int ath11k_mac_setup_bcn_tmpl_mbs
 	else if (!ath11k_mac_set_nontx_vif_params(tx_arvif, arvif, bcn))
 		return -EINVAL;
 
-	ret = ath11k_wmi_bcn_tmpl(ar, arvif->vdev_id, &offs, bcn, 0);
+	ret = __ath11k_mac_setup_bcn_tmpl(tx_arvif, bcn, offs, 0, 0);
 	kfree_skb(bcn);
 
 	if (ret)
--- a/drivers/net/wireless/ath/ath11k/wmi.h
+++ b/drivers/net/wireless/ath/ath11k/wmi.h
@@ -3901,6 +3901,11 @@ struct wmi_ftm_event_msg {
 #define WMI_EMA_FIRST_TMPL_SHIFT          16
 #define WMI_EMA_LAST_TMPL_SHIFT           24
 
+#define WMI_BEACON_EMA_PARAM_PERIODICITY_SHIFT         0
+#define WMI_BEACON_EMA_PARAM_TMPL_IDX_SHIFT            8
+#define WMI_BEACON_EMA_PARAM_FIRST_TMPL_SHIFT          16
+#define WMI_BEACON_EMA_PARAM_LAST_TMPL_SHIFT           24
+
 struct wmi_bcn_tmpl_cmd {
 	u32 tlv_header;
 	u32 vdev_id;
