From 8754f0c37f9f9d535279aebbb28e2c245b6eb889 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Mon, 24 Jan 2022 10:53:22 -0800
Subject: [PATCH 10/14] ath11k: configure WPA and RSNE parameters for
 nontransmitting interface

Set vht_cap, rsnie_present and wpaie_present fields for the
non-transmitting interfaces when MBSSID is enabled.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/mac.c | 92 ++++++++++++++++++++++++++-
 1 file changed, 91 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -1615,6 +1615,80 @@ static bool ath11k_mac_set_nontx_vif_par
 	return false;
 }
 
+static bool ath11k_mac_setup_bcn_tmpl_nontx_vif_params(struct ath11k_vif *tx_arvif,
+						       struct ath11k_vif *arvif,
+						       struct sk_buff *bcn)
+{
+	struct ieee80211_mgmt *mgmt;
+	const u8 *ies, *profile, *next_profile;
+	int ies_len;
+
+	if (arvif == tx_arvif)
+		return true;
+
+	arvif->rsnie_present = tx_arvif->rsnie_present;
+
+	ies = bcn->data + ieee80211_get_hdrlen_from_skb(bcn);
+	ies += sizeof(mgmt->u.beacon);
+	ies_len = skb_tail_pointer(bcn) - ies;
+
+	ies = cfg80211_find_ie(WLAN_EID_MULTIPLE_BSSID, ies, ies_len);
+
+	while (ies) {
+		u8 mbssid_len;
+
+		ies_len -= (2 + ies[1]);
+		mbssid_len = ies[1] - 1;
+		profile = &ies[3];
+
+		while (mbssid_len) {
+			u8 profile_len, nie_len, *nie;
+
+			profile_len = profile[1];
+			next_profile = profile + (2 + profile_len);
+			mbssid_len -= (2 + profile_len);
+
+			profile += 2;
+			profile_len -= (2 + profile[1]);
+			profile += (2 + profile[1]); /* nontx capabilities */
+			profile_len -= (2 + profile[1]);
+			profile += (2 + profile[1]); /* SSID */
+			if (profile[2] == arvif->vif->bss_conf.bssid_index) {
+				profile_len -= 5;
+				profile = profile + 5;
+
+				if (cfg80211_find_ie(WLAN_EID_RSN, profile,
+						     profile_len))
+					arvif->rsnie_present = true;
+				else if (tx_arvif->rsnie_present) {
+					nie = cfg80211_find_ext_ie(WLAN_EID_EXT_NON_INHERITANCE,
+								   profile,
+								   profile_len);
+					if (nie) {
+						int i;
+
+						nie_len = nie[1];
+						nie += 2;
+						for (i = 0; i < nie_len; i++) {
+							if (nie[i] ==
+								WLAN_EID_RSN) {
+								arvif->rsnie_present = false;
+								break;
+							}
+						}
+					}
+				}
+				return true;
+			}
+			profile = next_profile;
+		}
+		ies = cfg80211_find_ie(WLAN_EID_MULTIPLE_BSSID, profile,
+				       ies_len);
+	}
+
+	return false;
+}
+
 static int __ath11k_mac_setup_bcn_tmpl(struct ath11k_vif *arvif,
 				       struct sk_buff *bcn,
 				       struct ieee80211_mutable_offsets offs,
@@ -1696,12 +1770,20 @@ static int ath11k_mac_setup_bcn_tmpl_ema
 		return -EPERM;
 	}
 
-	if (tx_arvif == arvif)
+	if (tx_arvif == arvif) {
 		ath11k_mac_set_vif_params(tx_arvif, beacons->bcn[0].skb);
-	else
+	found_vdev = true;
+	} else {
+		arvif->vht_cap = tx_arvif->vht_cap;
 		arvif->wpaie_present = tx_arvif->wpaie_present;
 
 	for (i = 0; i < beacons->cnt; i++) {
+		if (found_vdev == false)
+			found_vdev =
+				ath11k_mac_setup_bcn_tmpl_nontx_vif_params(tx_arvif,
+									   arvif,
+									   beacons->bcn[i].skb);
+
 		ret = __ath11k_mac_setup_bcn_tmpl(tx_arvif, beacons->bcn[i].skb,
 						  beacons->bcn[i].offs,
 						  i, beacons->cnt);
@@ -1748,9 +1830,10 @@ static int ath11k_mac_setup_bcn_tmpl_mbs
 
 	if (tx_arvif == arvif)
 		ath11k_mac_set_vif_params(tx_arvif, bcn);
-	else if (!ath11k_mac_set_nontx_vif_params(tx_arvif, arvif, bcn))
-		return -EINVAL;
-
+	else
+		(void) ath11k_mac_setup_bcn_tmpl_nontx_vif_params(tx_arvif,
+								  arvif,
+								  bcn);
 	ret = __ath11k_mac_setup_bcn_tmpl(tx_arvif, bcn, offs, 0, 0);
 	kfree_skb(bcn);
 
@@ -1808,6 +1891,7 @@ static void ath11k_control_beaconing(str
 	struct ath11k *ar = arvif->ar;
 	struct ath11k_vif *tx_arvif = NULL;
 	int ret = 0;
+	bool found_vdev = false;
 
 	if (arvif->vif->mbssid_tx_vif)
 		tx_arvif = (void *)arvif->vif->mbssid_tx_vif->drv_priv;
