From 280215228b96d7a6a4000a5f65bd015d7c21ffac Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Fri, 14 Oct 2022 20:28:38 +0530
Subject: [PATCH] ath11k: Encoding regdb.bin in board-2.bin

Add support to encode regdb.bin in board-2.bin along with the bdf files.

Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c | 96 ++++++++++++--------------
 drivers/net/wireless/ath/ath11k/core.h |  6 +-
 drivers/net/wireless/ath/ath11k/hw.h   |  2 +
 drivers/net/wireless/ath/ath11k/qmi.c  | 56 ++++++++++-----
 drivers/net/wireless/ath/ath11k/qmi.h  |  3 +
 5 files changed, 96 insertions(+), 67 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -148,7 +148,7 @@ static struct ath11k_hw_params ath11k_hw
 		.num_peers = 512,
 		.supports_suspend = false,
 		.hal_desc_sz = sizeof(struct hal_rx_desc_ipq8074),
-		.supports_regdb = false,
+		.supports_regdb = true,
 		.fix_l1ss = true,
 		.credit_flow = false,
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
@@ -240,7 +240,7 @@ static struct ath11k_hw_params ath11k_hw
 		.num_peers = 512,
 		.supports_suspend = false,
 		.hal_desc_sz = sizeof(struct hal_rx_desc_ipq8074),
-		.supports_regdb = false,
+		.supports_regdb = true,
 		.fix_l1ss = true,
 		.credit_flow = false,
 		.max_tx_ring = DP_TCL_NUM_RING_MAX,
@@ -421,7 +421,7 @@ static struct ath11k_hw_params ath11k_hw
 		.num_peers = 128,
 		.supports_suspend = false,
 		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn9074),
-		.supports_regdb = false,
+		.supports_regdb = true,
 		.fix_l1ss = true,
 		.credit_flow = false,
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
@@ -781,7 +781,7 @@ static struct ath11k_hw_params ath11k_hw
 		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
-		.supports_regdb = false,
+		.supports_regdb = true,
 		.idle_ps = false,
 		.supports_suspend = false,
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
@@ -868,6 +868,7 @@ static struct ath11k_hw_params ath11k_hw
 		.idle_ps = false,
 		.supports_suspend = false,
 		.host_ce_config = ath11k_host_ce_config_qcn9074,
+		.supports_regdb = true,
 		.ce_count = 6,
 		.target_ce_config = ath11k_target_ce_config_wlan_ipq5018,
 		.target_ce_count = 9,
@@ -934,6 +935,7 @@ static struct ath11k_hw_params ath11k_hw
 		.regs = &ipq8074_regs,
 		.qmi_service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_IPQ8074,
 		.host_ce_config = ath11k_host_ce_config_ipq9574,
+		.supports_regdb = true,
 		.ce_count = 10,
 		.target_ce_config = ath11k_target_ce_config_wlan_ipq9574,
 		.target_ce_count = 10,
@@ -1313,14 +1315,13 @@ enum ath11k_bdf_name_type {
 	ATH11K_BDF_NAME_CHIP_ID,
 };
 
-static int __ath11k_core_create_board_name(struct ath11k_base *ab, char *name,
-					   size_t name_len, bool with_variant,
-					   enum ath11k_bdf_name_type name_type)
+static int ath11k_core_create_board_name(struct ath11k_base *ab, char *name,
+										 char *defaultname, size_t name_len)
 {
 	/* strlen(',variant=') + strlen(ab->qmi.target.bdf_ext) */
 	char variant[9 + ATH11K_QMI_BDF_EXT_STR_LENGTH] = { 0 };
 
-	if (with_variant && ab->qmi.target.bdf_ext[0] != '\0')
+	if (ab->qmi.target.bdf_ext[0] != '\0')
 		scnprintf(variant, sizeof(variant), ",variant=%s",
 			  ab->qmi.target.bdf_ext);
 
@@ -1357,6 +1358,12 @@ static int __ath11k_core_create_board_na
 			  ath11k_bus_str(ab->hif.bus),
 			  ab->qmi.target.chip_id,
 			  ab->qmi.target.board_id, variant);
+
+		scnprintf(defaultname, name_len,
+			  "bus=%s,qmi-chip-id=%d,qmi-board-id=%d%s",
+			  ath11k_bus_str(ab->hif.bus),
+			  ab->qmi.target.chip_id,
+			  ATH11K_DEFAULT_ID, variant);
 		break;
 	}
 
@@ -1365,34 +1372,6 @@ static int __ath11k_core_create_board_na
 	return 0;
 }
 
-static int ath11k_core_create_board_name(struct ath11k_base *ab, char *name,
-					 size_t name_len)
-{
-	return __ath11k_core_create_board_name(ab, name, name_len, true,
-					       ATH11K_BDF_NAME_FULL);
-}
-
-static int ath11k_core_create_fallback_board_name(struct ath11k_base *ab, char *name,
-						  size_t name_len)
-{
-	return __ath11k_core_create_board_name(ab, name, name_len, false,
-					       ATH11K_BDF_NAME_FULL);
-}
-
-static int ath11k_core_create_bus_type_board_name(struct ath11k_base *ab, char *name,
-						  size_t name_len)
-{
-	return __ath11k_core_create_board_name(ab, name, name_len, false,
-					       ATH11K_BDF_NAME_BUS_NAME);
-}
-
-static int ath11k_core_create_chip_id_board_name(struct ath11k_base *ab, char *name,
-						 size_t name_len)
-{
-	return __ath11k_core_create_board_name(ab, name, name_len, false,
-					       ATH11K_BDF_NAME_CHIP_ID);
-}
-
 const struct firmware *ath11k_core_firmware_request(struct ath11k_base *ab,
 						    const char *file)
 {
@@ -1594,6 +1573,7 @@ static int ath11k_core_fetch_board_data_
 			/* either found or error, so stop searching */
 			goto out;
 		}
+
 next:
 		/* jump over the padding */
 		ie_len = ALIGN(ie_len, 4);
@@ -1634,21 +1614,18 @@ int ath11k_core_fetch_board_data_api_1(s
 	return 0;
 }
 
-#define BOARD_NAME_SIZE 200
 int ath11k_core_fetch_bdf(struct ath11k_base *ab, struct ath11k_board_data *bd)
 {
 	char *boardname = NULL, *fallback_boardname = NULL, *chip_id_boardname = NULL;
-	char *filename, filepath[100];
 	int ret = 0;
 
-	filename = ATH11K_BOARD_API2_FILE;
 	boardname = kzalloc(BOARD_NAME_SIZE, GFP_KERNEL);
 	if (!boardname) {
 		ret = -ENOMEM;
 		goto exit;
 	}
-
-	ret = ath11k_core_create_board_name(ab, boardname, BOARD_NAME_SIZE);
+	ret = ath11k_core_create_board_name(ab, boardname, fallback_boardname,
+										BOARD_NAME_SIZE);
 	if (ret) {
 		ath11k_err(ab, "failed to create board name: %d", ret);
 		goto exit;
@@ -1668,13 +1645,6 @@ int ath11k_core_fetch_bdf(struct ath11k_
 		goto exit;
 	}
 
-	ret = ath11k_core_create_fallback_board_name(ab, fallback_boardname,
-						     BOARD_NAME_SIZE);
-	if (ret) {
-		ath11k_err(ab, "failed to create fallback board name: %d", ret);
-		goto exit;
-	}
-
 	ret = ath11k_core_fetch_board_data_api_n(ab, bd, fallback_boardname,
 						 ATH11K_BD_IE_BOARD,
 						 ATH11K_BD_IE_BOARD_NAME,
@@ -1706,21 +1676,20 @@ int ath11k_core_fetch_bdf(struct ath11k_
 	ab->bd_api = 1;
 	ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_DEFAULT_BOARD_FILE);
 	if (ret) {
-		ath11k_core_create_firmware_path(ab, filename,
-						 filepath, sizeof(filepath));
-		ath11k_err(ab, "failed to fetch board data for %s from %s\n",
-			   boardname, filepath);
-		if (memcmp(boardname, fallback_boardname, strlen(boardname)))
-			ath11k_err(ab, "failed to fetch board data for %s from %s\n",
-				   fallback_boardname, filepath);
-
 		ath11k_err(ab, "failed to fetch board data for %s from %s\n",
 			   chip_id_boardname, filepath);
 
 		ath11k_err(ab, "failed to fetch board.bin from %s\n",
 			   ab->hw_params.fw.dir);
+	} else {
+		ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_BOARD_API2_FILE);
+		if (ret)
+			ath11k_err(ab, "failed to fetch board-2.bin from %s\n",
+					   ab->hw_params.fw.dir);
+		return ret;
 	}
 
+
 exit:
 	kfree(boardname);
 	kfree(fallback_boardname);
@@ -1734,48 +1703,44 @@ exit:
 
 int ath11k_core_fetch_regdb(struct ath11k_base *ab, struct ath11k_board_data *bd)
 {
-	char boardname[BOARD_NAME_SIZE], default_boardname[BOARD_NAME_SIZE];
+	char regdbname[REGDB_NAME_SIZE], fallback_regdbname[REGDB_NAME_SIZE];
 	int ret;
 
-	ret = ath11k_core_create_board_name(ab, boardname, BOARD_NAME_SIZE);
+	ret = ath11k_core_create_board_name(ab, regdbname, fallback_regdbname,
+		       			    REGDB_NAME_SIZE);
 	if (ret) {
 		ath11k_dbg(ab, ATH11K_DBG_BOOT,
 			   "failed to create board name for regdb: %d", ret);
-		goto exit;
+		return ret;
 	}
 
-	ret = ath11k_core_fetch_board_data_api_n(ab, bd, boardname,
+	ab->bd_api = 2;
+	ret = ath11k_core_fetch_board_data_api_n(ab, bd, regdbname,
 						 ATH11K_BD_IE_REGDB,
 						 ATH11K_BD_IE_REGDB_NAME,
 						 ATH11K_BD_IE_REGDB_DATA);
 	if (!ret)
-		goto exit;
-
-	ret = ath11k_core_create_bus_type_board_name(ab, default_boardname,
-						     BOARD_NAME_SIZE);
-	if (ret) {
-		ath11k_dbg(ab, ATH11K_DBG_BOOT,
-			   "failed to create default board name for regdb: %d", ret);
-		goto exit;
-	}
+		goto success;
 
-	ret = ath11k_core_fetch_board_data_api_n(ab, bd, default_boardname,
+	ret = ath11k_core_fetch_board_data_api_n(ab, bd, fallback_regdbname,
 						 ATH11K_BD_IE_REGDB,
 						 ATH11K_BD_IE_REGDB_NAME,
 						 ATH11K_BD_IE_REGDB_DATA);
 	if (!ret)
-		goto exit;
+		goto success;
+
+	ab->bd_api = 1;
 
 	ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_REGDB_FILE_NAME);
-	if (ret)
+	if (ret) {
 		ath11k_dbg(ab, ATH11K_DBG_BOOT, "failed to fetch %s from %s\n",
 			   ATH11K_REGDB_FILE_NAME, ab->hw_params.fw.dir);
+		return ret;
+	}
 
-exit:
-	if (!ret)
-		ath11k_dbg(ab, ATH11K_DBG_BOOT, "fetched regdb\n");
-
-	return ret;
+success:
+	ath11k_dbg(ab, ATH11K_DBG_BOOT, "using board api %d\n", ab->bd_api);
+	return 0;
 }
 
 static void ath11k_core_stop(struct ath11k_base *ab)
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -1094,6 +1094,9 @@ struct ath11k_pdev {
 	u8 mac_addr[ETH_ALEN];
 };
 
+#define BOARD_NAME_SIZE 100
+#define REGDB_NAME_SIZE 100
+
 struct ath11k_board_data {
 	const struct firmware *fw;
 	const void *data;
@@ -1598,7 +1601,8 @@ void ath11k_core_free(struct ath11k_base
 int ath11k_core_fetch_bdf(struct ath11k_base *ath11k,
 			  struct ath11k_board_data *bd);
 int ath11k_config_qdss(struct ath11k_base *ab);
-int ath11k_core_fetch_regdb(struct ath11k_base *ab, struct ath11k_board_data *bd);
+int ath11k_core_fetch_regdb(struct ath11k_base *ab,
+                            struct ath11k_board_data *bd);
 int ath11k_core_fetch_board_data_api_1(struct ath11k_base *ab,
 				       struct ath11k_board_data *bd,
 				       const char *name);
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -107,6 +107,8 @@ struct ath11k_cfr_peer_tx_param;
 #define ATH11K_AMSS_FILE		"amss.bin"
 #define ATH11K_M3_FILE			"m3.bin"
 #define ATH11K_REGDB_FILE_NAME		"regdb.bin"
+#define ATH11K_REGDB_BINARY		"regdb"
+#define ATH11K_DEFAULT_ID		255
 #define NODE_ID_BASE                   	0x27
 
 #define ATH11K_CE_OFFSET(ab)	(ab->mem_ce - ab->mem)
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -1414,6 +1414,24 @@ static const struct qmi_elem_info qmi_wl
 					   eeprom_read_timeout),
 	},
 	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x24,
+		.offset         = offsetof(struct qmi_wlanfw_cap_resp_msg_v01,
+					   regdb_support_valid),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_1_BYTE,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x24,
+		.offset         = offsetof(struct qmi_wlanfw_cap_resp_msg_v01,
+					   regdb_support),
+	},
+	{
 		.data_type	= QMI_EOTI,
 		.array_type	= NO_ARRAY,
 		.tlv_type	= QMI_COMMON_TLV_TYPE,
@@ -3219,6 +3237,11 @@ static int ath11k_qmi_request_target_cap
 		ath11k_dbg(ab, ATH11K_DBG_QMI, "cal data supported from eeprom\n");
 	}
 
+	if (resp.regdb_support_valid) {
+		ab->qmi.target.regdb = resp.regdb_support;
+		ath11k_dbg(ab, ATH11K_DBG_QMI, "qmi regdb download is supported\n");
+	}
+
 	fw_build_id = ab->qmi.target.fw_build_id;
 	fw_build_id_mask_len = strlen(FW_BUILD_ID_MASK);
 	if (!strncmp(fw_build_id, FW_BUILD_ID_MASK, fw_build_id_mask_len))
@@ -3262,7 +3285,7 @@ static int ath11k_qmi_load_file_target_m
 
 	memset(&resp, 0, sizeof(resp));
 
-	if (ab->hw_params.fixed_bdf_addr) {
+	if (ab->hw_params.fixed_bdf_addr && !ab->qmi.target.regdb) {
 		bdf_addr = ioremap(ab->hw_params.bdf_addr, ab->hw_params.fw.board_size);
 		if (!bdf_addr) {
 			ath11k_warn(ab, "qmi ioremap error for bdf_addr\n");
@@ -3291,7 +3314,7 @@ static int ath11k_qmi_load_file_target_m
 			req->end = 1;
 		}
 
-		if (ab->hw_params.fixed_bdf_addr ||
+		if ((ab->hw_params.fixed_bdf_addr && !ab->qmi.target.regdb) ||
 		    type == ATH11K_QMI_FILE_TYPE_EEPROM) {
 			req->data_valid = 0;
 			req->end = 1;
@@ -3300,7 +3323,7 @@ static int ath11k_qmi_load_file_target_m
 			memcpy(req->data, temp, req->data_len);
 		}
 
-		if (ab->hw_params.fixed_bdf_addr) {
+		if (ab->hw_params.fixed_bdf_addr && !ab->qmi.target.regdb) {
 			if (type == ATH11K_QMI_FILE_TYPE_CALDATA)
 				bdf_addr += ab->hw_params.fw.cal_offset;
 
@@ -3339,7 +3362,7 @@ static int ath11k_qmi_load_file_target_m
 			goto err_iounmap;
 		}
 
-		if (ab->hw_params.fixed_bdf_addr ||
+		if ((ab->hw_params.fixed_bdf_addr && !ab->qmi.target.regdb) ||
 		    type == ATH11K_QMI_FILE_TYPE_EEPROM) {
 			remaining = 0;
 		} else {
@@ -3352,7 +3375,7 @@ static int ath11k_qmi_load_file_target_m
 	}
 
 err_iounmap:
-	if (ab->hw_params.fixed_bdf_addr)
+	if (ab->hw_params.fixed_bdf_addr && !ab->qmi.target.regdb)
 		iounmap(bdf_addr);
 
 err_free_req:
@@ -3398,22 +3421,23 @@ static int ath11k_qmi_load_bdf_qmi(struc
 
 	if (regdb) {
 		ret = ath11k_core_fetch_regdb(ab, &bd);
+		if (ret) {
+			ath11k_warn(ab, "qmi failed to fetch regdb file: %d\n", ret);
+			goto out;
+		}
+		bdf_type = ATH11K_QMI_BDF_TYPE_REGDB;
 	} else {
 		ret = ath11k_core_fetch_bdf(ab, &bd);
-		if (ret)
+		if (ret) {
 			ath11k_warn(ab, "qmi failed to fetch board file: %d\n", ret);
+			goto out;
+		}
+		if (bd.len >= SELFMAG && memcmp(bd.data, ELFMAG, SELFMAG) == 0)
+			bdf_type = ATH11K_QMI_BDF_TYPE_ELF;
+		else
+			bdf_type = ATH11K_QMI_BDF_TYPE_BIN;
 	}
 
-	if (ret)
-		goto out;
-
-	if (regdb)
-		bdf_type = ATH11K_QMI_BDF_TYPE_REGDB;
-	else if (bd.len >= SELFMAG && memcmp(bd.data, ELFMAG, SELFMAG) == 0)
-		bdf_type = ATH11K_QMI_BDF_TYPE_ELF;
-	else
-		bdf_type = ATH11K_QMI_BDF_TYPE_BIN;
-
 	ath11k_dbg(ab, ATH11K_DBG_QMI, "bdf_type %d\n", bdf_type);
 
 	fw_size = min_t(u32, ab->hw_params.fw.board_size, bd.len);
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -181,6 +181,7 @@ struct target_info {
 	u32 soc_id;
 	u32 fw_version;
 	u32 eeprom_caldata;
+	u8 regdb;
 	char fw_build_timestamp[ATH11K_QMI_WLANFW_MAX_TIMESTAMP_LEN_V01 + 1];
 	char fw_build_id[ATH11K_QMI_WLANFW_MAX_BUILD_ID_LEN_V01 + 1];
 	char bdf_ext[ATH11K_QMI_BDF_EXT_STR_LENGTH];
@@ -582,6 +583,8 @@ struct qmi_wlanfw_cap_resp_msg_v01 {
 	u32 otp_version;
 	u8 eeprom_read_timeout_valid;
 	u32 eeprom_read_timeout;
+	u8 regdb_support_valid;
+	u8 regdb_support;
 };
 
 struct qmi_wlanfw_cap_req_msg_v01 {
