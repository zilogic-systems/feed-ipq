From c451697a64426e33b6002e35572e7d369afb82f2 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Date: Wed, 26 Jul 2023 08:49:14 +0530
Subject: [PATCH] ath11k: power save support during interface down

When all interface down target expects WMI_PDEV_SUSPEND command
to enable power save in the hardware.

Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c | 71 ++++++++++++++++++--------
 drivers/net/wireless/ath/ath11k/core.h |  3 ++
 drivers/net/wireless/ath/ath11k/mac.c  | 32 ++++++++++--
 drivers/net/wireless/ath/ath11k/qmi.c  |  3 +-
 4 files changed, 83 insertions(+), 26 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -1579,9 +1579,30 @@ success:
 	return 0;
 }
 
+int ath11k_wait_for_suspend(struct ath11k *ar, u32 suspend_opt)
+{
+	int ret;
+	unsigned long time_left;
+
+	ret = ath11k_wmi_pdev_suspend(ar, suspend_opt, ar->pdev->pdev_id);
+	if (ret) {
+		ath11k_warn(ar->ab, "failed to suspend target (%d)\n", ret);
+		return ret;
+	}
+
+	time_left = wait_for_completion_timeout(&ar->ab->htc_suspend, ATH11K_PM_TIMEOUT);
+
+	if (!time_left) {
+		ath11k_warn(ar->ab, "suspend time out - target pause event never came\n");
+		return -ETIMEDOUT;
+	}
+
+	return ret;
+}
+
 static void ath11k_core_stop(struct ath11k_base *ab)
 {
-	if (!test_bit(ATH11K_FLAG_CRASH_FLUSH, &ab->dev_flags))
+	if (!test_bit(ATH11K_FLAG_CRASH_FLUSH, &ab->dev_flags) && !ab->pm_suspend)
 		ath11k_qmi_firmware_stop(ab);
 
 	ath11k_hif_stop(ab);
@@ -1651,16 +1672,18 @@ static int ath11k_core_pdev_create(struc
 		goto err_pdev_debug;
 	}
 
-	ret = ath11k_nss_setup(ab);
-	if (ret) {
-		ath11k_err(ab, "failed to setup nss driver interface%d", ret);
-		goto err_dp_pdev_free;
-	}
+	if (!ab->pm_suspend) {
+		ret = ath11k_nss_setup(ab);
+		if (ret) {
+			ath11k_err(ab, "failed to setup nss driver interface%d", ret);
+			goto err_dp_pdev_free;
+		}
 
-	ret = ath11k_mac_register(ab);
-	if (ret) {
-		ath11k_err(ab, "failed register the radio with mac80211: %d\n", ret);
-		goto err_nss_tear;
+		ret = ath11k_mac_register(ab);
+		if (ret) {
+			ath11k_err(ab, "failed register the radio with mac80211: %d\n", ret);
+			goto err_nss_tear;
+		}
 	}
 
 	ret = ath11k_thermal_register(ab);
@@ -1768,11 +1791,13 @@ static int ath11k_core_start(struct ath1
 		goto err_hif_stop;
 	}
 
-	ret = ath11k_mac_allocate(ab);
-	if (ret) {
-		ath11k_err(ab, "failed to create new hw device with mac80211 :%d\n",
-			   ret);
-		goto err_hif_stop;
+	if (!ab->pm_suspend) {
+		ret = ath11k_mac_allocate(ab);
+		if (ret) {
+			ath11k_err(ab, "failed to create new hw device with mac80211 :%d\n",
+				   ret);
+			goto err_hif_stop;
+		}
 	}
 
 	ath11k_dp_pdev_pre_alloc(ab);
@@ -2166,7 +2191,7 @@ static void ath11k_core_pre_reconfigure_
 		pdev = &ab->pdevs[i];
 		ar = pdev->ar;
 		if (!ar || ar->state == ATH11K_STATE_OFF ||
-		    ar->state == ATH11K_STATE_FTM)
+		    ar->state == ATH11K_STATE_FTM || ab->pm_suspend)
 			continue;
 
 		list_for_each_entry(arvif, &ar->arvifs, list)
@@ -2224,7 +2249,8 @@ static void ath11k_core_post_reconfigure
 		case ATH11K_STATE_ON:
 			ar->state = ATH11K_STATE_RESTARTING;
 			ath11k_core_halt(ar);
-			ieee80211_restart_hw(ar->hw);
+			if (!ab->pm_suspend)
+				ieee80211_restart_hw(ar->hw);
 			break;
 		case ATH11K_STATE_OFF:
 			ath11k_warn(ab,
@@ -2268,6 +2294,9 @@ static void ath11k_core_restart(struct w
 
 	if (!ab->is_reset)
 		ath11k_core_post_reconfigure_recovery(ab);
+
+	if (ab->pm_suspend)
+		complete(&ab->pm_restart);
 }
 
 static void ath11k_core_reset(struct work_struct *work)
@@ -2421,7 +2450,9 @@ void ath11k_core_deinit(struct ath11k_ba
 
 	mutex_unlock(&ab->core_lock);
 
-	ath11k_hif_power_down(ab);
+	if (!ab->pm_suspend)
+		ath11k_hif_power_down(ab);
+
 	ath11k_mac_destroy(ab);
 	ath11k_core_soc_destroy(ab);
 
@@ -2473,6 +2504,7 @@ struct ath11k_base *ath11k_core_alloc(st
 	init_completion(&ab->reset_complete);
 	init_completion(&ab->reconfigure_complete);
 	init_completion(&ab->recovery_start);
+	init_completion(&ab->pm_restart);
 
 	INIT_LIST_HEAD(&ab->peers);
 	INIT_LIST_HEAD(&ab->neighbor_peers);
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -1410,6 +1410,8 @@ struct ath11k_base {
 	struct mutex base_ast_lock;
 	struct work_struct wmi_ast_work;
 	struct list_head wmi_ast_list;
+	struct completion pm_restart;
+	bool pm_suspend;
 
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
@@ -1643,6 +1645,7 @@ int ath11k_coredump_mhi_update_bhie_tabl
 					  phys_addr_t pa, size_t size);
 const struct firmware *ath11k_core_firmware_request(struct ath11k_base *ab,
 						    const char *filename);
+int ath11k_wait_for_suspend(struct ath11k *ar, u32 suspend_opt);
 void ath11k_core_wait_dump_collect(struct ath11k_base *ab);
 
 static inline const char *ath11k_scan_state_str(enum ath11k_scan_state state)
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -7784,6 +7784,22 @@ static int ath11k_mac_op_start(struct ie
 
 	switch (ar->state) {
 	case ATH11K_STATE_OFF:
+		if (ab->pm_suspend) {
+			mutex_unlock(&ar->conf_mutex);
+			ath11k_hif_power_up(ab);
+
+			if (!wait_for_completion_timeout(&ab->pm_restart,
+							 ATH11K_PM_RESTART_TIMEOUT)) {
+				ath11k_warn(ar->ab,
+					    "Timeout in receiving for pm restart\n");
+				ar->state = ATH11K_STATE_OFF;
+				return -ETIMEDOUT;
+			}
+
+			mutex_lock(&ar->conf_mutex);
+			ab->pm_suspend = false;
+		}
+
 		ar->state = ATH11K_STATE_ON;
 		break;
 	case ATH11K_STATE_RESTARTING:
@@ -7959,8 +7975,18 @@ static void ath11k_mac_op_stop(struct ie
 			   ret);
 
 	clear_bit(ATH11K_CAC_RUNNING, &ar->dev_flags);
-	ar->state = ATH11K_STATE_OFF;
-	ar->ap_ps_state = ATH11K_AP_PS_STATE_OFF;
+	if (ar->state != ATH11K_STATE_OFF) {
+		ath11k_wait_for_suspend(ar, WMI_PDEV_SUSPEND_AND_DISABLE_INTR);
+
+		if (!test_bit(ATH11K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags))
+			ath11k_qmi_firmware_stop(ar->ab);
+
+		ath11k_hif_power_down(ar->ab);
+		ath11k_qmi_free_resource(ar->ab);
+		ar->ab->pm_suspend = true;
+		ar->state = ATH11K_STATE_OFF;
+		ar->ap_ps_state = ATH11K_AP_PS_STATE_OFF;
+	}
 	mutex_unlock(&ar->conf_mutex);
 
 	cancel_delayed_work_sync(&ar->scan.timeout);
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -4838,7 +4838,8 @@ static void ath11k_qmi_driver_event_work
 		case ATH11K_QMI_EVENT_FW_READY:
 			clear_bit(ATH11K_FLAG_QMI_FAIL, &ab->dev_flags);
 			if (test_bit(ATH11K_FLAG_REGISTERED, &ab->dev_flags)) {
-				ath11k_hal_dump_srng_stats(ab);
+				if (!ab->pm_suspend)
+					ath11k_hal_dump_srng_stats(ab);
 				queue_work(ab->workqueue, &ab->restart_work);
 				break;
 			}
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -979,7 +979,8 @@ static void ath11k_pci_shutdown(struct p
 	struct ath11k_pci *ab_pci = ath11k_pci_priv(ab);
 
 	ath11k_pci_set_irq_affinity_hint(ab_pci, NULL);
-	ath11k_pci_power_down(ab);
+	if (!ab->pm_suspend)
+		ath11k_pci_power_down(ab);
 }
 
 static __maybe_unused int ath11k_pci_pm_suspend(struct device *dev)
--- a/drivers/net/wireless/ath/ath11k/mac.h
+++ b/drivers/net/wireless/ath/ath11k/mac.h
@@ -126,6 +126,9 @@ struct ath11k_generic_iter {
 #define ATH11K_OBSS_PD_SRG_EN				BIT(30)
 #define ATH11K_OBSS_PD_NON_SRG_EN			BIT(31)
 
+#define ATH11K_PM_TIMEOUT	(3 * HZ)
+#define ATH11K_PM_RESTART_TIMEOUT	(10 * HZ)
+
 extern const struct htt_rx_ring_tlv_filter ath11k_mac_mon_status_filter_default;
 
 #define ATH11K_SCAN_11D_INTERVAL		600000
