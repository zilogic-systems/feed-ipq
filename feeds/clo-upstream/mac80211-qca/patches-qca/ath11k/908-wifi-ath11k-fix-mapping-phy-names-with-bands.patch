From a81ed10a5429c0121b778e892f9dfadb178bda63 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Tue, 9 Jan 2024 14:52:18 +0530
Subject: [PATCH] wifi: ath11k: fix mapping phy names with bands

mac80211 is assigning wiphy idx based on the radio probing,
during the simultaneous wiphy idx is assigned randomly for
each radios without maintaining the order.
Due to this phy mapping with bands is getting changed randomly
on reboot and cause problems.

Use ieee80211_alloc_hw_nm() to allocate hw object for fixed phy
mapping with bands. Specify the phy name based on the
bands(2 GHz/5 GHz/6 GHz).

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c | 12 ++++++------
 drivers/net/wireless/ath/ath11k/core.h |  5 +++++
 drivers/net/wireless/ath/ath11k/mac.c  |  2 +-
 drivers/net/wireless/ath/ath11k/wmi.c  |  6 ++++++
 4 files changed, 18 insertions(+), 7 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/core.c b/drivers/net/wireless/ath/ath11k/core.c
index 0de38e4..e353ebf 100644
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -1873,6 +1873,12 @@ static int ath11k_core_start(struct ath11k_base *ab)
 		goto err_hif_stop;
 	}
 
+	ret = ath11k_wmi_cmd_init(ab);
+	if (ret) {
+		ath11k_err(ab, "failed to send wmi init cmd: %d\n", ret);
+		goto err_hif_stop;
+	}
+
 	if (!ab->pm_suspend) {
 		ret = ath11k_mac_allocate(ab);
 		if (ret) {
@@ -1890,12 +1896,6 @@ static int ath11k_core_start(struct ath11k_base *ab)
 		goto err_mac_destroy;
 	}
 
-	ret = ath11k_wmi_cmd_init(ab);
-	if (ret) {
-		ath11k_err(ab, "failed to send wmi init cmd: %d\n", ret);
-		goto err_reo_cleanup;
-	}
-
 	ret = ath11k_wmi_wait_for_unified_ready(ab);
 	if (ret) {
 		ath11k_err(ab, "failed to receive wmi unified ready event: %d\n",
diff --git a/drivers/net/wireless/ath/ath11k/core.h b/drivers/net/wireless/ath/ath11k/core.h
index 48e0b30..5988911 100644
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -761,6 +761,10 @@ struct ath11k_sta {
 #define ATH11K_NUM_CHANS 102
 #define ATH11K_MAX_5G_CHAN 177
 
+#define ATH11K_PHY_2GHZ "phy00"
+#define ATH11K_PHY_5GHZ "phy01"
+#define ATH11K_PHY_6GHZ "phy03"
+
 enum ath11k_state {
 	ATH11K_STATE_OFF,
 	ATH11K_STATE_ON,
@@ -1118,6 +1122,7 @@ struct ath11k_pdev {
 	u32 pdev_id;
 	struct ath11k_pdev_cap cap;
 	u8 mac_addr[ETH_ALEN];
+	const char *phy_name;
 };
 
 #define BOARD_NAME_SIZE 100
diff --git a/drivers/net/wireless/ath/ath11k/mac.c b/drivers/net/wireless/ath/ath11k/mac.c
index 4c7390c..e04b854 100644
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -13358,7 +13358,7 @@ int ath11k_mac_allocate(struct ath11k_base *ab)
 		}
 
 		pdev = &ab->pdevs[i];
-		hw = ieee80211_alloc_hw(sizeof(struct ath11k), ops);
+		hw = ieee80211_alloc_hw_nm(sizeof(struct ath11k), ops, pdev->phy_name);
 		if (!hw) {
 			ath11k_warn(ab, "failed to allocate mac80211 hw device\n");
 			ret = -ENOMEM;
diff --git a/drivers/net/wireless/ath/ath11k/wmi.c b/drivers/net/wireless/ath/ath11k/wmi.c
index 78f9fe3..c4587b1 100644
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -4980,10 +4980,16 @@ ath11k_fill_band_to_mac_param(struct ath11k_base  *soc,
 		case WMI_HOST_WLAN_2G_CAP:
 			band_to_mac[i].start_freq = hal_reg_cap->low_2ghz_chan;
 			band_to_mac[i].end_freq = hal_reg_cap->high_2ghz_chan;
+			pdev->phy_name = ATH11K_PHY_2GHZ;
 			break;
 		case WMI_HOST_WLAN_5G_CAP:
 			band_to_mac[i].start_freq = hal_reg_cap->low_5ghz_chan;
 			band_to_mac[i].end_freq = hal_reg_cap->high_5ghz_chan;
+			if (hal_reg_cap->low_5ghz_chan >= ATH11K_MIN_6G_FREQ &&
+			    hal_reg_cap->high_5ghz_chan <= ATH11K_MAX_6G_FREQ)
+				pdev->phy_name = ATH11K_PHY_6GHZ;
+			else
+				pdev->phy_name = ATH11K_PHY_5GHZ;
 			break;
 		default:
 			break;
-- 
2.17.1

