From 9c32d79d7688c43f2d011847c2408034de5fef5a Mon Sep 17 00:00:00 2001
From: Narendhar Reddy <quic_nare@quicinc.com>
Date: Mon, 15 Apr 2024 16:02:39 +0530
Subject: [PATCH] compilation fix for backports 6.6 ath11k

Signed-off-by: Narendhar Reddy <quic_nare@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c     | 90 +++++-----------------
 drivers/net/wireless/ath/ath11k/coredump.c |  4 +-
 drivers/net/wireless/ath/ath11k/mac.c      | 12 +--
 drivers/net/wireless/ath/ath11k/qmi.c      | 30 +-------
 4 files changed, 28 insertions(+), 108 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -886,7 +886,7 @@ static struct ath11k_hw_params ath11k_hw
 		.rx_mac_buf_ring = false,
 		.vdev_start_delay = false,
 		.htt_peer_map_v2 = true,
-		.cold_boot_calib = true,
+		.coldboot_cal_mm = true,
 		.fix_l1ss = true,
 		.alloc_cacheable_memory = true,
 		.m3_fw_support = false,
@@ -973,7 +973,8 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_monitor = true,
 		.supports_shadow_regs = false,
 		.idle_ps = false,
-		.cold_boot_calib = true,
+		.coldboot_cal_mm = true,
+		.cbcal_restart_fw = true,
 		.supports_suspend = false,
 		.hal_desc_sz = sizeof(struct hal_rx_desc_ipq8074),
 		.reo_dest_ring_map_shift = HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
@@ -1335,30 +1336,15 @@ static int ath11k_core_create_board_name
 
 	switch (ab->id.bdf_search) {
 	case ATH11K_BDF_SEARCH_BUS_AND_BOARD:
-		switch (name_type) {
-		case ATH11K_BDF_NAME_FULL:
-			scnprintf(name, name_len,
-				  "bus=%s,vendor=%04x,device=%04x,subsystem-vendor=%04x,subsystem-device=%04x,qmi-chip-id=%d,qmi-board-id=%d%s",
-				  ath11k_bus_str(ab->hif.bus),
-				  ab->id.vendor, ab->id.device,
-				  ab->id.subsystem_vendor,
-				  ab->id.subsystem_device,
-				  ab->qmi.target.chip_id,
-				  ab->qmi.target.board_id,
-				  variant);
-			break;
-		case ATH11K_BDF_NAME_BUS_NAME:
-			scnprintf(name, name_len,
-				  "bus=%s",
-				  ath11k_bus_str(ab->hif.bus));
-			break;
-		case ATH11K_BDF_NAME_CHIP_ID:
-			scnprintf(name, name_len,
-				  "bus=%s,qmi-chip-id=%d",
-				  ath11k_bus_str(ab->hif.bus),
-				  ab->qmi.target.chip_id);
-			break;
-		}
+		scnprintf(name, name_len,
+				"bus=%s,vendor=%04x,device=%04x,subsystem-vendor=%04x,subsystem-device=%04x,qmi-chip-id=%d,qmi-board-id=%d%s",
+				ath11k_bus_str(ab->hif.bus),
+				ab->id.vendor, ab->id.device,
+				ab->id.subsystem_vendor,
+				ab->id.subsystem_device,
+				ab->qmi.target.chip_id,
+				ab->qmi.target.board_id,
+				variant);
 		break;
 	default:
 		scnprintf(name, name_len,
@@ -1624,19 +1610,16 @@ int ath11k_core_fetch_board_data_api_1(s
 
 int ath11k_core_fetch_bdf(struct ath11k_base *ab, struct ath11k_board_data *bd)
 {
-	char *boardname = NULL, *fallback_boardname = NULL, *chip_id_boardname = NULL;
+	char *boardname = NULL, *fallback_boardname = NULL;
 	int ret = 0;
 
 	boardname = kzalloc(BOARD_NAME_SIZE, GFP_KERNEL);
-	if (!boardname) {
-		ret = -ENOMEM;
-		goto exit;
-	}
+	fallback_boardname = kzalloc(BOARD_NAME_SIZE, GFP_KERNEL);
 	ret = ath11k_core_create_board_name(ab, boardname, fallback_boardname,
 										BOARD_NAME_SIZE);
 	if (ret) {
 		ath11k_err(ab, "failed to create board name: %d", ret);
-		goto exit;
+		return ret;
 	}
 
 	ab->bd_api = 2;
@@ -1645,48 +1628,18 @@ int ath11k_core_fetch_bdf(struct ath11k_
 						 ATH11K_BD_IE_BOARD_NAME,
 						 ATH11K_BD_IE_BOARD_DATA);
 	if (!ret)
-		goto exit;
+		goto success;
 
-	fallback_boardname = kzalloc(BOARD_NAME_SIZE, GFP_KERNEL);
-	if (!fallback_boardname) {
-		ret = -ENOMEM;
-		goto exit;
-	}
 
 	ret = ath11k_core_fetch_board_data_api_n(ab, bd, fallback_boardname,
 						 ATH11K_BD_IE_BOARD,
 						 ATH11K_BD_IE_BOARD_NAME,
 						 ATH11K_BD_IE_BOARD_DATA);
 	if (!ret)
-		goto exit;
-
-	chip_id_boardname = kzalloc(BOARD_NAME_SIZE, GFP_KERNEL);
-	if (!chip_id_boardname) {
-		ret = -ENOMEM;
-		goto exit;
-	}
-
-	ret = ath11k_core_create_chip_id_board_name(ab, chip_id_boardname,
-						    BOARD_NAME_SIZE);
-	if (ret) {
-		ath11k_err(ab, "failed to create chip id board name: %d", ret);
-		goto exit;
-	}
-
-	ret = ath11k_core_fetch_board_data_api_n(ab, bd, chip_id_boardname,
-						 ATH11K_BD_IE_BOARD,
-						 ATH11K_BD_IE_BOARD_NAME,
-						 ATH11K_BD_IE_BOARD_DATA);
-
-	if (!ret)
-		goto exit;
-
+		goto success;
 	ab->bd_api = 1;
 	ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_DEFAULT_BOARD_FILE);
 	if (ret) {
-		ath11k_err(ab, "failed to fetch board data for %s from %s\n",
-			   chip_id_boardname, filepath);
-
 		ath11k_err(ab, "failed to fetch board.bin from %s\n",
 			   ab->hw_params.fw.dir);
 	} else {
@@ -1698,15 +1651,11 @@ int ath11k_core_fetch_bdf(struct ath11k_
 	}
 
 
-exit:
+success:
 	kfree(boardname);
 	kfree(fallback_boardname);
-	kfree(chip_id_boardname);
-
-	if (!ret)
-		ath11k_dbg(ab, ATH11K_DBG_BOOT, "using board api %d\n", ab->bd_api);
-
-	return ret;
+	ath11k_dbg(ab, ATH11K_DBG_BOOT, "using board api %d\n", ab->bd_api);
+	return 0;
 }
 
 int ath11k_core_fetch_regdb(struct ath11k_base *ab, struct ath11k_board_data *bd)
--- a/drivers/net/wireless/ath/ath11k/coredump.c
+++ b/drivers/net/wireless/ath/ath11k/coredump.c
@@ -185,7 +185,7 @@ void ath11k_coredump_download_rddm(struc
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
 		if (ab->qmi.target_mem[i].type == HOST_DDR_REGION_TYPE ||
-		    (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE && ab->enable_cold_boot_cal && ab->hw_params.cold_boot_calib) ||
+		    (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE && ab->enable_cold_boot_cal && ab->hw_params.coldboot_cal_mm) ||
 			ab->qmi.target_mem[i].type == M3_DUMP_REGION_TYPE ||
 			ab->qmi.target_mem[i].type == PAGEABLE_MEM_TYPE)
 			rem_seg_cnt++;
@@ -253,7 +253,7 @@ void ath11k_coredump_download_rddm(struc
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
 		if ((ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE &&
-		     ab->enable_cold_boot_cal && ab->hw_params.cold_boot_calib)) {
+		     ab->enable_cold_boot_cal && ab->hw_params.coldboot_cal_mm)) {
 			seg_info->len = ab->qmi.target_mem[i].size;
 			seg_info->addr = ab->qmi.target_mem[i].paddr;
 			seg_info->vaddr = ab->qmi.target_mem[i].vaddr;
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -1840,9 +1840,8 @@ static void ath11k_control_beaconing(str
 
 	ether_addr_copy(arvif->bssid, info->bssid);
 
-	if (arvif->vif->mbssid_tx_vif)
-		tx_arvif = ath11k_vif_to_arvif(arvif->vif->mbssid_tx_vif);
-
+	if (arvif->vif->bss_conf.mbssid_tx_vif)
+		tx_arvif = (void *)arvif->vif->bss_conf.mbssid_tx_vif->drv_priv;
 	params.vdev_id = arvif->vdev_id;
 	params.aid = arvif->aid;
 	params.bssid = arvif->bssid;
@@ -3386,7 +3385,7 @@ static void ath11k_bss_disassoc(struct i
 				struct ieee80211_vif *vif)
 {
 	struct ath11k *ar = hw->priv;
-	struct ath11k_vif *arvif = ath11k_vif_to_arvif(vif);
+	struct ath11k_vif *arvif = (void *)vif->drv_priv, *tx_arvif;
 	int ret;
 
 	lockdep_assert_held(&ar->conf_mutex);
@@ -9153,7 +9152,7 @@ ath11k_mac_vdev_start_restart(struct ath
 	    cfg80211_chandef_dfs_usable(ar->hw->wiphy, chandef)) {
 		set_bit(ATH11K_CAC_RUNNING, &ar->dev_flags);
 		dfs_cac_time = cfg80211_chandef_dfs_cac_time(ar->hw->wiphy,
-							     chandef);
+							     chandef,false,false);
 		ath11k_dbg(ab, ATH11K_DBG_MAC,
 			   "cac started dfs_cac_time %u center_freq %d center_freq1 %d for vdev %d\n",
 			   dfs_cac_time, arg.channel.freq, chandef->center_freq1,
@@ -12362,7 +12361,7 @@ ath11k_mac_op_config_mesh_offload_path(s
 				       struct ieee80211_mesh_path_offld *path)
 {
 	struct ath11k *ar = hw->priv;
-	struct ath11k_vif *arvif = (void *)vif->drv_priv, *tx_arvif;
+	struct ath11k_vif *arvif = (void *)vif->drv_priv;
 	int ret;
 
 	if (arvif->ar->ab->nss.debug_mode) {
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -2845,7 +2845,7 @@ static int ath11k_qmi_alloc_target_mem_c
 
 
 		if (chunk->type == CALDB_MEM_REGION_TYPE && (!ab->enable_cold_boot_cal
-							|| !ab->hw_params.cold_boot_calib)) {
+							|| !ab->hw_params.coldboot_cal_mm)) {
 			ath11k_info(ab, "Skipping caldb allocation chunk->size %u chunk->paddr %pad\n",
 						chunk->size, &chunk->paddr);
 			chunk->paddr = 0;
@@ -3910,31 +3910,6 @@ int ath11k_qmi_fwreset_from_cold_boot(st
 	if (timeout <= 0) {
 		ath11k_warn(ab, "Coldboot Calibration timed out\n");
 		return -ETIMEDOUT;
-	}
-
-	/* reset the firmware */
-	ath11k_hif_power_down(ab);
-	ath11k_hif_power_up(ab);
-	ath11k_dbg(ab, ATH11K_DBG_QMI, "exit wait for cold boot done\n");
-	return 0;
-}
-EXPORT_SYMBOL(ath11k_qmi_fwreset_from_cold_boot);
-
-int ath11k_qmi_fwreset_from_cold_boot(struct ath11k_base *ab)
-{
-	int timeout;
-
-	if (ab->enable_cold_boot_cal == 0 ||
- 	    ab->hw_params.cold_boot_calib == 0)
-		return 0;
-
-	ath11k_dbg(ab, ATH11K_DBG_QMI, "wait for cold boot done\n");
-
-	timeout = wait_event_timeout(ab->qmi.cold_boot_waitq, (ab->qmi.cal_done  == 1),
-				     ATH11K_COLD_BOOT_FW_RESET_DELAY);
-	if (timeout <= 0) {
-		ath11k_warn(ab, "Coldboot Calibration timed out\n");
-		return -ETIMEDOUT;
 	}
 
 	/* reset the firmware */
