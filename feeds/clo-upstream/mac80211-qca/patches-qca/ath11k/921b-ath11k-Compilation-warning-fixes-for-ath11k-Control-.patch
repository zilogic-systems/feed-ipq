From 0cb2ba85dad2fa29b570eef789e9681857396dd7 Mon Sep 17 00:00:00 2001
From: Kaviarasu Sanjeevi <quic_kaviaras@quicinc.com>
Date: Tue, 17 Sep 2024 12:06:00 +0530
Subject: [PATCH] ath11k: Compilation warning fixes for ath11k Control path files

cfr.c             - Removed typecast for void pointer
debug_smart_ant.c - Removed const from ath11k_read_sa_enable_ops and ath11k_read_sa_rx_ant
                    Modified datatype of ath11k_mac_op_update_vif_offload from int to void to align with Ath12k and upstream
debugfs.c         - Added const for ath11k_debug_write_fw_recovery and ath11k_debug_write_enable_memory_stats
                    Updated ath11k_warn API with ar->ab
                    Modified the survey_mode data type to u32 from u8
                    Removed const from wmi_ctrl_path_pdev_stat, wmi_ctrl_path_cal_stat,
                     wmi_ctrl_path_btcoex_stat and ath11k_read_wmi_ctrl_path_stats
debugfs_sta.c     - Removed const from ath11k_dbg_sta_dump_driver_tx_pkts_flow
                    Updated ath11k_warn API with ar->ab
mac.c             - Modified the function param to pointer from array of pointer for ath11k_peer_assoc_h_ht_masked
                     ath11k_peer_assoc_h_vht_masked and ath11k_peer_assoc_h_he_masked
                  - Modified the ath11k_mac_op_nss_bss_info_changed function param type to u64 from u32
                  - Added typecast for mgmt->u.action and drv_priv
                  - Updated the argument for ath11k_mac_vdev_start to ctx from ctr->def
smart_ant_api.c   - Added proper address assignment for arg_arr in ath11k_smart_ant_alg_sta_connect

Signed-off-by: Kaviaras Sanjeevi <quic_kaviaras@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/cfr.c         |  2 +-
 drivers/net/wireless/ath/ath11k/debug_smart_ant.c |  4 +--
 drivers/net/wireless/ath/ath11k/debugfs.c     | 30 +++++++++----------
 drivers/net/wireless/ath/ath11k/debugfs_sta.c |  4 +--
 drivers/net/wireless/ath/ath11k/mac.c         | 15 +++++-----
 drivers/net/wireless/ath/ath11k/smart_ant_api.c   |  2 +-
 6 files changed, 18 insertions(+), 29 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/cfr.c
+++ b/drivers/net/wireless/ath/ath11k/cfr.c
@@ -229,8 +229,7 @@ static int ath11k_cfr_correlate_and_rela
 
 static u8 freeze_reason_to_capture_type(void *freeze_tlv)
 {
-	struct macrx_freeze_capture_channel *freeze =
-		(struct macrx_freeze_capture_channel_v3 *)freeze_tlv;
+	struct macrx_freeze_capture_channel *freeze = freeze_tlv;
 	u8 capture_reason = FIELD_GET(MACRX_FREEZE_CC_INFO0_CAPTURE_REASON,
 				      freeze->info0);
 
--- a/drivers/net/wireless/ath/ath11k/debug_smart_ant.c
+++ b/drivers/net/wireless/ath/ath11k/debug_smart_ant.c
@@ -22,7 +22,7 @@
 #include "smart_ant.h"
 
 static ssize_t ath11k_read_sa_enable_ops(struct file *file,
-					 const char __user *ubuf,
+					 char __user *ubuf,
 					 size_t count, loff_t *ppos)
 {
 	struct ath11k *ar = file->private_data;
@@ -225,7 +225,7 @@ static ssize_t ath11k_write_sa_rx_ant(st
 }
 
 static ssize_t ath11k_read_sa_rx_ant(struct file *file,
-				     const char __user *ubuf,
+				     char __user *ubuf,
 				     size_t count, loff_t *ppos)
 {
 	char buf[4];
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -1691,7 +1691,7 @@ static const struct file_operations fops
 };
 
 static ssize_t ath11k_debug_write_fw_recovery(struct file *file,
-                                              char __user *user_buf,
+                                              const char __user *user_buf,
                                               size_t count, loff_t *ppos)
 {
        struct ath11k_base *ab = file->private_data;
@@ -1773,7 +1773,7 @@ ath11k_debug_read_enable_memory_stats(st
 
 static ssize_t
 ath11k_debug_write_enable_memory_stats(struct file *file,
-				       char __user *ubuf,
+				       const char __user *ubuf,
 				       size_t count, loff_t *ppos)
 {
 	struct ath11k_base *ab = file->private_data;
@@ -4174,7 +4174,7 @@ static ssize_t ath11k_write_ani_enable(s
 	ret = ath11k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_ANI_ENABLE,
 					enable, ar->pdev->pdev_id);
 	if (ret) {
-		ath11k_warn(ar, "ani_enable failed from debugfs: %d\n", ret);
+		ath11k_warn(ar->ab, "ani_enable failed from debugfs: %d\n", ret);
 		goto exit;
 	}
 	ar->ani_enabled = enable;
@@ -4230,7 +4230,7 @@ static ssize_t ath11k_write_ani_poll_per
 	ret = ath11k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_ANI_POLL_PERIOD,
 			ani_poll_period, ar->pdev->pdev_id);
 	if (ret) {
-		ath11k_warn(ar, "ani poll period write failed in debugfs: %d\n", ret);
+		ath11k_warn(ar->ab, "ani poll period write failed in debugfs: %d\n", ret);
 		goto exit;
 	}
 	ar->ab->ani_poll_period = ani_poll_period;
@@ -4286,7 +4286,7 @@ static ssize_t ath11k_write_ani_listen_p
 	ret = ath11k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_ANI_LISTEN_PERIOD,
 					ani_listen_period, ar->pdev->pdev_id);
 	if (ret) {
-		ath11k_warn(ar, "ani listen period write failed in debugfs: %d\n", ret);
+		ath11k_warn(ar->ab, "ani listen period write failed in debugfs: %d\n", ret);
 		goto exit;
 	}
 	ar->ab->ani_listen_period = ani_listen_period;
@@ -4317,7 +4317,7 @@ static int ath11k_debug_get_ani_level(st
 	ret = ath11k_wmi_pdev_get_ani_level(ar, WMI_PDEV_GET_ANI_OFDM_CONFIG_CMDID,
 					    ar->pdev->pdev_id);
 	if (ret) {
-		ath11k_warn(ar, "failed to request ofdm ani level: %d\n", ret);
+		ath11k_warn(ar->ab, "failed to request ofdm ani level: %d\n", ret);
 		return ret;
 	}
 	time_left = wait_for_completion_timeout(&ar->ab->ani_ofdm_event, 1 * HZ);
@@ -4329,7 +4329,7 @@ static int ath11k_debug_get_ani_level(st
 		ret = ath11k_wmi_pdev_get_ani_level(ar, WMI_PDEV_GET_ANI_CCK_CONFIG_CMDID,
 						    ar->pdev->pdev_id);
 		if (ret) {
-			ath11k_warn(ar, "failed to request cck ani level: %d\n", ret);
+			ath11k_warn(ar->ab, "failed to request cck ani level: %d\n", ret);
 			return ret;
 		}
 		time_left = wait_for_completion_timeout(&ar->ab->ani_cck_event, 1 * HZ);
@@ -4358,7 +4358,7 @@ static ssize_t ath11k_read_ani_level(str
 	} else {
 		ret = ath11k_debug_get_ani_level(ar);
 		if (ret) {
-			ath11k_warn(ar, "failed to request ani level: %d\n", ret);
+			ath11k_warn(ar->ab, "failed to request ani level: %d\n", ret);
 			goto unlock;
 		}
 		len += scnprintf(buf, sizeof(buf), "ofdm level %d cck level %d\n",
@@ -4423,7 +4423,7 @@ static ssize_t ath11k_write_ani_level(st
 
 	ret = ath11k_wmi_pdev_set_param(ar, ofdm_param, ofdm_level, ar->pdev->pdev_id);
 	if (ret) {
-		ath11k_warn(ar, "failed to set ANI ofdm level :%d\n", ret);
+		ath11k_warn(ar->ab, "failed to set ANI ofdm level :%d\n", ret);
 		goto exit;
 	}
 
@@ -4431,7 +4431,7 @@ static ssize_t ath11k_write_ani_level(st
 		ret = ath11k_wmi_pdev_set_param(ar, cck_param, cck_level,
 						ar->pdev->pdev_id);
 		if (ret) {
-			ath11k_warn(ar, "failed to set ANI cck level :%d\n", ret);
+			ath11k_warn(ar->ab, "failed to set ANI cck level :%d\n", ret);
 			goto exit;
 		}
 	}
@@ -4583,7 +4583,7 @@ static ssize_t ath11k_bss_survey_mode_wr
 					    size_t count, loff_t *ppos)
 {
 	struct ath11k *ar = file->private_data;
-	u8 survey_mode;
+	u32 survey_mode;
 
 	if (kstrtouint_from_user(user_buf, count, 0, &survey_mode))
 		return -EINVAL;
@@ -5036,7 +5036,7 @@ static ssize_t ath11k_write_wmi_ctrl_pat
 	return ret ? ret : count;
 }
 
-int wmi_ctrl_path_pdev_stat(struct ath11k_vif *arvif, const char __user *ubuf,
+int wmi_ctrl_path_pdev_stat(struct ath11k_vif *arvif, char __user *ubuf,
 			    size_t count, loff_t *ppos)
 {
 	const int size = 2048;
@@ -5110,7 +5110,7 @@ int wmi_ctrl_path_pdev_stat(struct ath11
 	return ret_val;
 }
 
-int wmi_ctrl_path_cal_stat(struct ath11k_vif *arvif, const char __user *ubuf,
+int wmi_ctrl_path_cal_stat(struct ath11k_vif *arvif, char __user *ubuf,
 			   size_t count, loff_t *ppos)
 {
 	const int size = 4096;
@@ -5179,7 +5179,7 @@ int wmi_ctrl_path_cal_stat(struct ath11k
 	return ret_val;
 }
 
-int wmi_ctrl_path_btcoex_stat(struct ath11k_vif *arvif, const char __user *ubuf,
+int wmi_ctrl_path_btcoex_stat(struct ath11k_vif *arvif, char __user *ubuf,
 			      size_t count, loff_t *ppos)
 {
 	struct wmi_ctrl_path_stats_list *stats;
@@ -5242,7 +5242,7 @@ int wmi_ctrl_path_btcoex_stat(struct ath
 }
 
 static ssize_t ath11k_read_wmi_ctrl_path_stats(struct file *file,
-		const char __user *ubuf,
+		char __user *ubuf,
 		size_t count, loff_t *ppos)
 {
 	struct ath11k_vif *arvif = file->private_data;
--- a/drivers/net/wireless/ath/ath11k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs_sta.c
@@ -1302,7 +1302,7 @@ static const struct file_operations fops
 
 static ssize_t
 ath11k_dbg_sta_dump_driver_tx_pkts_flow(struct file *file,
-					const char __user *user_buf,
+					char __user *user_buf,
 					size_t count, loff_t *ppos)
 {
 	struct ieee80211_sta *sta = file->private_data;
@@ -1530,7 +1530,7 @@ static ssize_t ath11k_dbg_sta_write_cfr_
 	ret = ath11k_wmi_peer_set_cfr_capture_conf(ar, arsta->arvif->vdev_id,
 						   sta->addr, &arg);
 	if (ret) {
-		ath11k_warn(ar, "failed to send cfr capture info: vdev_id %u peer %pM\n",
+		ath11k_warn(ar->ab, "failed to send cfr capture info: vdev_id %u peer %pM\n",
 			    arsta->arvif->vdev_id, sta->addr);
 		goto out;
 	}
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -2062,7 +2062,7 @@ static void ath11k_peer_assoc_h_rates(st
 }
 
 static bool
-ath11k_peer_assoc_h_ht_masked(const u8 *ht_mcs_mask[])
+ath11k_peer_assoc_h_ht_masked(const u8 *ht_mcs_mask)
 {
 	int nss;
 
@@ -2074,7 +2074,7 @@ ath11k_peer_assoc_h_ht_masked(const u8 *
 }
 
 static bool
-ath11k_peer_assoc_h_vht_masked(const u16 *vht_mcs_mask[])
+ath11k_peer_assoc_h_vht_masked(const u16 *vht_mcs_mask)
 {
 	int nss;
 
@@ -2469,7 +2469,7 @@ static u16 ath11k_peer_assoc_h_he_limit(
 }
 
 static bool
-ath11k_peer_assoc_h_he_masked(const u16 *he_mcs_mask[])
+ath11k_peer_assoc_h_he_masked(const u16 *he_mcs_mask)
 {
 	int nss;
 
@@ -3678,7 +3678,7 @@ static int ath11k_mac_config_obss_pd(str
 
 static void ath11k_mac_op_nss_bss_info_changed(struct ieee80211_hw *hw,
 					   struct ieee80211_vif *vif,
-					   u32 changed)
+					   u64 changed)
 {
 	struct ath11k *ar = hw->priv;
 	struct ath11k_vif *arvif = ath11k_vif_to_arvif(vif);
@@ -7415,7 +7415,7 @@ static int ath11k_mac_mgmt_action_frame_
 		return -EOPNOTSUPP;
 
 	mgmt = (struct ieee80211_mgmt *)hdr;
-	buf = &mgmt->u.action;
+	buf = (u8 *)&mgmt->u.action;
 
 	/* FCTL_PROTECTED frame might have extra space added for HDR_LEN. Offset that
 	 * many bytes if it is there
@@ -7753,7 +7753,8 @@ skip_regular_xmit:
 		ret = ath11k_nss_tx(arvif, skb);
 	else if (info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
 		ret = ath11k_dp_tx_simple(ar, arvif, skb,
-					  (control->sta) ? control->sta->drv_priv : NULL);
+					  (control->sta) ? (struct ath11k_sta *)
+					   control->sta->drv_priv : NULL);
 	else
 		ret = ath11k_dp_tx(ar, arvif, arsta, skb);
 
@@ -8171,7 +8172,7 @@ static int ath11k_mac_setup_vdev_create_
 	return 0;
 }
 
-static int ath11k_mac_op_update_vif_offload(struct ieee80211_hw *hw,
+static void ath11k_mac_op_update_vif_offload(struct ieee80211_hw *hw,
 					     struct ieee80211_vif *vif)
 {
 	struct ath11k *ar = hw->priv;
@@ -8181,7 +8182,7 @@ static int ath11k_mac_op_update_vif_offl
 	int ret;
 
 	if (ab->nss.enabled && vif->type == NL80211_IFTYPE_AP_VLAN)
-		return 0;
+		return;
 
 	param_id = WMI_VDEV_PARAM_TX_ENCAP_TYPE;
 	if (ath11k_frame_mode != ATH11K_HW_TXRX_ETHERNET ||
@@ -8220,8 +8221,6 @@ static int ath11k_mac_op_update_vif_offl
 			    arvif->vdev_id, ret);
 		vif->offload_flags &= ~IEEE80211_OFFLOAD_DECAP_ENABLED;
 	}
-
-	return ret;
 }
 
 static bool ath11k_mac_vif_ap_active_any(struct ath11k_base *ab)
@@ -8553,8 +8552,7 @@ static int ath11k_mac_op_add_interface(s
 		goto err_vdev_del;
 	}
 
-	if (ath11k_mac_op_update_vif_offload(hw, vif))
-		goto err_vdev_del;
+	ath11k_mac_op_update_vif_offload(hw, vif);
 
 	if (vif->offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED)
 		param_value = ATH11K_HW_TXRX_ETHERNET;
@@ -9397,7 +9395,7 @@ ath11k_mac_update_vif_chan(struct ath11k
 		 * If vdev is down then it expect vdev_stop->vdev_start.
 		 */
 		if (arvif->is_up) {
-			ret = ath11k_mac_vdev_restart(arvif, &vifs[i].new_ctx->def,
+			ret = ath11k_mac_vdev_restart(arvif, vifs[i].new_ctx,
 						      vifs[i].new_ctx->radar_enabled);
 			if (ret) {
 				ath11k_warn(ab, "failed to restart vdev %d: %d\n",
@@ -9412,7 +9410,7 @@ ath11k_mac_update_vif_chan(struct ath11k
 				continue;
 			}
 
-			ret = ath11k_mac_vdev_start(arvif, &vifs[i].new_ctx->def,
+			ret = ath11k_mac_vdev_start(arvif, vifs[i].new_ctx,
 						    vifs[i].new_ctx->radar_enabled);
 			if (ret)
 				ath11k_warn(ab, "failed to start vdev %d: %d\n",
@@ -9578,7 +9576,7 @@ static int ath11k_start_vdev_delay(struc
 	if (WARN_ON(arvif->is_started))
 		return -EBUSY;
 
-	ret = ath11k_mac_vdev_start(arvif, &arvif->chanctx.def,
+	ret = ath11k_mac_vdev_start(arvif, &arvif->chanctx,
 				    arvif->chanctx.radar_enabled);
 	if (ret) {
 		ath11k_warn(ab, "failed to start vdev %i addr %pM on freq %d: %d\n",
@@ -10197,7 +10195,7 @@ ath11k_mac_op_assign_vif_chanctx(struct
 		goto out;
 	}
 
-	ret = ath11k_mac_vdev_start(arvif, &ctx->def, ctx->radar_enabled);
+	ret = ath11k_mac_vdev_start(arvif, ctx, ctx->radar_enabled);
 	if (ret) {
 		ath11k_warn(ab, "failed to start vdev %i addr %pM on freq %d: %d\n",
 			    arvif->vdev_id, vif->addr,
--- a/drivers/net/wireless/ath/ath11k/smart_ant_api.c
+++ b/drivers/net/wireless/ath/ath11k/smart_ant_api.c
@@ -125,6 +125,7 @@ int ath11k_smart_ant_alg_sta_connect(str
 	struct ath11k_smart_ant_sta *smart_ant_sta;
 	int ret;
 	u8 mac_addr[ETH_ALEN];
+	u32 arg = ATH11K_SMART_ANT_TX_FEEDBACK_CONFIG_DEFAULT;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -137,7 +138,7 @@ int ath11k_smart_ant_alg_sta_connect(str
 	params.cmd_id = 1;
 	params.arg_count = 1;
 	params.vdev_id = arsta->arvif->vdev_id;
-	params.arg_arr = ATH11K_SMART_ANT_TX_FEEDBACK_CONFIG_DEFAULT;
+	params.arg_arr = &arg;
 	ether_addr_copy(mac_addr, sta->addr);
 
 	ret = ath11k_wmi_peer_set_smart_ant_node_config(ar, mac_addr, &params);
