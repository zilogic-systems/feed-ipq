From bf080e718279fa6138eaa39fea54fdd64fe7c54e Mon Sep 17 00:00:00 2001
From: Kaviarasu Sanjeevi <quic_kaviaras@quicinc.com>
Date: Tue, 17 Sep 2024 18:48:31 +0530
Subject: [PATCH] ath11k: Compilation warning fixes for ath11k Datapath files

dp_tx.c   -  Added typecast for ptr with u32* in ath11k_smart_ant_proc_tx_feedback function call
             Added changes to assign status.rates from arsta->last_txrate using status_rate
             Added typecast for ptr with struct htt_ppdu_stats_cmpltn_flush * in 
             ath11k_dp_ppdu_stats_flush_tlv_parse function call

dp_rx.c   -  Added typecast for status_desc with struct htt_tx_wbm_completion *
             MModifed desc type to struct hal_wbm_release_ring *

pktlog.c  - Modified pktlog_pgfault type to vm_fault_t and retrived vma from vma struct

Signed-off-by: Kaviarasu Sanjeevi <quic_kaviaras@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/dp_rx.c | 22 ++++++++++++++++++----
 drivers/net/wireless/ath/ath11k/dp_tx.c |  7 ++++---
 drivers/net/wireless/ath/ath11k/pktlog.c|  3 ++-
 3 files changed, 24 insertions(+), 8 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -1517,7 +1517,7 @@ static int ath11k_htt_tlv_ppdu_stats_par
 		memcpy((void *)&user_stats->cmpltn_cmn, ptr,
 		       sizeof(struct htt_ppdu_stats_usr_cmpltn_cmn));
 		user_stats->tlv_flags |= BIT(tag);
-		ath11k_smart_ant_proc_tx_feedback(ab, ptr, peer_id);
+		ath11k_smart_ant_proc_tx_feedback(ab, (u32 *)ptr, peer_id);
 		break;
 	case HTT_PPDU_STATS_TAG_USR_COMPLTN_ACK_BA_STATUS:
 		if (len <
@@ -1590,6 +1590,8 @@ static void ath11k_dp_ppdu_stats_flush_t
 	struct ath11k_sta *arsta;
 	struct ath11k_peer *peer = NULL;
 	struct ieee80211_tx_status status;
+	struct ieee80211_rate_status status_rate = { 0 };
+	struct rate_info rate;
 
 	if (!ab->nss.mesh_nss_offload_enabled)
 		return;
@@ -1613,7 +1615,12 @@ static void ath11k_dp_ppdu_stats_flush_t
 	memset(&status, 0, sizeof(status));
 
 	status.sta = sta;
-	status.rates = &arsta->last_txrate;
+
+	rate = arsta->last_txrate;
+	status_rate.rate_idx = rate;
+	status_rate.try_count = 1;
+	status.rates = &status_rate;
+
 	status.mpdu_fail = FIELD_GET(HTT_PPDU_STATS_CMPLTN_FLUSH_INFO_NUM_MPDU,
 				     msg->info);
 	ar = arsta->arvif->ar;
@@ -1635,7 +1642,7 @@ static int ath11k_htt_tlv_ppdu_soc_stats
 				    len, tag);
 			return -EINVAL;
 		}
-		ath11k_dp_ppdu_stats_flush_tlv_parse(ab, ptr);
+		ath11k_dp_ppdu_stats_flush_tlv_parse(ab, (struct htt_ppdu_stats_cmpltn_flush *)ptr);
 		break;
 	default:
 		break;
@@ -1940,6 +1947,8 @@ ath11k_dp_rx_ppdu_stats_update_tx_comp_s
 	struct ath11k_peer *peer = NULL;
 	struct htt_ppdu_user_stats* usr_stats = NULL;
 	struct ieee80211_tx_status status;
+	struct ieee80211_rate_status status_rate = { 0 };
+	struct rate_info rate;
 	u32 peer_id = 0;
 	int i;
 
@@ -1978,7 +1987,12 @@ ath11k_dp_rx_ppdu_stats_update_tx_comp_s
 		memset(&status, 0, sizeof(status));
 
 		status.sta = sta;
-		status.rates = &arsta->last_txrate;
+
+		rate = arsta->last_txrate;
+		status_rate.rate_idx = rate;
+		status_rate.try_count = 1;
+		status.rates = &status_rate;
+
 		status.mpdu_succ = usr_stats->cmpltn_cmn.mpdu_success;
 
 		ieee80211s_update_metric_ppdu(ar->hw, &status);
--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
@@ -1003,7 +1003,7 @@ static inline bool ath11k_dp_tx_completi
 
 	if (FIELD_GET(HAL_WBM_RELEASE_INFO0_REL_SRC_MODULE, desc->info0) ==
 	    HAL_WBM_REL_SRC_MODULE_FW) {
-		status_desc = ((u8 *)desc) + HTT_TX_WBM_COMP_STATUS_OFFSET;
+		status_desc = (struct htt_tx_wbm_completion *)(((u8 *)desc) + HTT_TX_WBM_COMP_STATUS_OFFSET);
 
 		/* Dont consider HTT_TX_COMP_STATUS_MEC_NOTIFY */
 		if (FIELD_GET(HTT_TX_WBM_COMP_INFO0_STATUS, status_desc->info0) ==
@@ -1074,7 +1074,7 @@ void ath11k_dp_tx_completion_handler(str
 	struct dp_tx_ring *tx_ring = &dp->tx_ring[ring_id];
 	int valid_entries;
 	enum hal_wbm_rel_src_module buf_rel_source;
-	u32 *desc;
+	struct hal_wbm_release_ring *desc;
 	u32 msdu_id, desc_id;
 	u8 mac_id, tid;
 	struct hal_wbm_release_ring *tx_status;
@@ -1092,7 +1092,8 @@ void ath11k_dp_tx_completion_handler(str
 
 	ath11k_hal_srng_dst_invalidate_entry(ab, status_ring, valid_entries);
 
-	while ((desc = ath11k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
+	while ((desc = (struct hal_wbm_release_ring *)
+				ath11k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
 		if (!ath11k_dp_tx_completion_valid(desc))
 			continue;
 
--- a/drivers/net/wireless/ath/ath11k/pktlog.c
+++ b/drivers/net/wireless/ath/ath11k/pktlog.c
@@ -155,13 +155,14 @@ static char *ath_pktlog_getbuf(struct at
 	return log_ptr;
 }
 
-static int  pktlog_pgfault(struct vm_area_struct *vma, struct vm_fault *vmf)
+static vm_fault_t pktlog_pgfault(struct vm_fault *vmf)
 {
 #if LINUX_VERSION_IS_LESS(5,4,0)
 	unsigned long address = (unsigned long)vmf->virtual_address;
 #elif LINUX_VERSION_IS_GEQ(5,4,0)
 	unsigned long address = vmf->address;
 #endif
+	struct vm_area_struct *vma = vmf->vma;
 
 	if (address == 0UL)
 		return VM_FAULT_NOPAGE;
