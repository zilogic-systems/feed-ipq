From 6ebcaf90e0627f451fba83c82ad3412e34f4a842 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Thu, 31 Aug 2023 18:06:56 +0530
Subject: [PATCH 3/8] Revert "wifi: ath12k: remove cold_boot_cal module
 parameter"

This reverts commit 1f0b8e2e190765733f552b10cbceb26d29c9eb39.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  1 +
 drivers/net/wireless/ath/ath12k/core.h |  5 ++
 drivers/net/wireless/ath/ath12k/hw.c   |  2 +
 drivers/net/wireless/ath/ath12k/hw.h   |  1 +
 drivers/net/wireless/ath/ath12k/qmi.c  | 77 ++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath12k/qmi.h  |  9 +++
 6 files changed, 90 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -938,6 +938,7 @@ struct ath12k_base *ath12k_core_alloc(st
 	INIT_LIST_HEAD(&ab->peers);
 	init_waitqueue_head(&ab->peer_mapping_wq);
 	init_waitqueue_head(&ab->wmi_ab.tx_credits_wq);
+	init_waitqueue_head(&ab->qmi.cold_boot_waitq);
 	INIT_WORK(&ab->restart_work, ath12k_core_restart);
 	INIT_WORK(&ab->reset_work, ath12k_core_reset);
 	timer_setup(&ab->rx_replenish_retry, ath12k_ce_rx_replenish_retry, 0);
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -114,8 +114,13 @@ enum ath12k_firmware_mode {
 
 	/* factory tests etc */
 	ATH12K_FIRMWARE_MODE_FTM,
+
+	/* Cold boot calibration */
+	ATH12K_FIRMWARE_MODE_COLD_BOOT = 7,
 };
 
+extern bool ath12k_cold_boot_cal;
+
 #define ATH12K_IRQ_NUM_MAX 57
 #define ATH12K_EXT_IRQ_NUM_MAX	16
 
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -890,6 +890,7 @@ static const struct ath12k_hw_params ath
 		.supports_monitor = false,
 
 		.idle_ps = false,
+		.cold_boot_calib = false,
 		.download_calib = true,
 		.supports_suspend = false,
 		.tcl_ring_retry = true,
@@ -1002,6 +1003,7 @@ static const struct ath12k_hw_params ath
 		.supports_monitor = false,
 
 		.idle_ps = false,
+		.cold_boot_calib = false,
 		.download_calib = true,
 		.supports_suspend = false,
 		.tcl_ring_retry = true,
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -168,6 +168,7 @@ struct ath12k_hw_params {
 	bool supports_monitor:1;
 
 	bool idle_ps:1;
+	bool cold_boot_calib:1;
 	bool download_calib:1;
 	bool supports_suspend:1;
 	bool tcl_ring_retry:1;
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -17,6 +17,11 @@
 #define PLATFORM_CAP_PCIE_GLOBAL_RESET	0x08
 #define ATH12K_QMI_MAX_CHUNK_SIZE	2097152
 
+bool ath12k_cold_boot_cal = 1;
+module_param_named(cold_boot_cal, ath12k_cold_boot_cal, bool, 0644);
+MODULE_PARM_DESC(cold_boot_cal,
+		 "Decrease the channel switch time but increase the driver load time (Default: true)");
+
 static struct qmi_elem_info wlfw_host_mlo_chip_info_s_v01_ei[] = {
 	{
 		.data_type      = QMI_UNSIGNED_1_BYTE,
@@ -1893,6 +1898,13 @@ static struct qmi_elem_info qmi_wlanfw_f
 	},
 };
 
+static struct qmi_elem_info qmi_wlanfw_cold_boot_cal_done_ind_msg_v01_ei[] = {
+	{
+		.data_type = QMI_EOTI,
+		.array_type = NO_ARRAY,
+	},
+};
+
 static void ath12k_host_cap_parse_mlo(struct qmi_wlanfw_host_cap_req_msg_v01 *req)
 {
 	req->mlo_capable_valid = 1;
@@ -2758,6 +2770,32 @@ int ath12k_qmi_firmware_start(struct ath
 	return 0;
 }
 
+static int ath12k_qmi_process_coldboot_calibration(struct ath12k_base *ab)
+{
+	int timeout;
+	int ret;
+
+	ret = ath12k_qmi_wlanfw_mode_send(ab, ATH12K_FIRMWARE_MODE_COLD_BOOT);
+	if (ret < 0) {
+		ath12k_warn(ab, "qmi failed to send wlan fw mode:%d\n", ret);
+		return ret;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "Coldboot calibration wait started\n");
+
+	timeout = wait_event_timeout(ab->qmi.cold_boot_waitq,
+				     (ab->qmi.cal_done  == 1),
+				     ATH12K_COLD_BOOT_FW_RESET_DELAY);
+	if (timeout <= 0) {
+		ath12k_warn(ab, "Coldboot Calibration failed - wait ended\n");
+		return 0;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "Coldboot calibration done\n");
+
+	return 0;
+}
+
 static int
 ath12k_qmi_driver_event_post(struct ath12k_qmi *qmi,
 			     enum ath12k_qmi_event_type type,
@@ -2913,6 +2951,20 @@ static void ath12k_qmi_msg_fw_ready_cb(s
 	ath12k_qmi_driver_event_post(qmi, ATH12K_QMI_EVENT_FW_READY, NULL);
 }
 
+static void ath12k_qmi_msg_cold_boot_cal_done_cb(struct qmi_handle *qmi_hdl,
+						 struct sockaddr_qrtr *sq,
+						 struct qmi_txn *txn,
+						 const void *decoded)
+{
+	struct ath12k_qmi *qmi = container_of(qmi_hdl,
+					      struct ath12k_qmi, handle);
+	struct ath12k_base *ab = qmi->ab;
+
+	ab->qmi.cal_done = 1;
+	wake_up(&ab->qmi.cold_boot_waitq);
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "qmi cold boot calibration done\n");
+}
+
 static const struct qmi_msg_handler ath12k_qmi_msg_handlers[] = {
 	{
 		.type = QMI_INDICATION,
@@ -2935,6 +2987,14 @@ static const struct qmi_msg_handler ath1
 		.decoded_size = sizeof(struct qmi_wlanfw_fw_ready_ind_msg_v01),
 		.fn = ath12k_qmi_msg_fw_ready_cb,
 	},
+	{
+		.type = QMI_INDICATION,
+		.msg_id = QMI_WLFW_COLD_BOOT_CAL_DONE_IND_V01,
+		.ei = qmi_wlanfw_cold_boot_cal_done_ind_msg_v01_ei,
+		.decoded_size =
+			sizeof(struct qmi_wlanfw_fw_cold_cal_done_ind_msg_v01),
+		.fn = ath12k_qmi_msg_cold_boot_cal_done_cb,
+	},
 };
 
 static int ath12k_qmi_ops_new_server(struct qmi_handle *qmi_hdl,
@@ -3023,13 +3083,20 @@ static void ath12k_qmi_driver_event_work
 				break;
 			}
 
-			clear_bit(ATH12K_FLAG_CRASH_FLUSH,
-				  &ab->dev_flags);
-			clear_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
-			ath12k_core_qmi_firmware_ready(ab);
-			set_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags);
+			if (ath12k_cold_boot_cal && ab->qmi.cal_done == 0 &&
+			    ab->hw_params->cold_boot_calib) {
+				ath12k_qmi_process_coldboot_calibration(ab);
+			} else {
+				clear_bit(ATH12K_FLAG_CRASH_FLUSH,
+					  &ab->dev_flags);
+				clear_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
+				ath12k_core_qmi_firmware_ready(ab);
+				set_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags);
+			}
 
 			break;
+		case ATH12K_QMI_EVENT_COLD_BOOT_CAL_DONE:
+			break;
 		default:
 			ath12k_warn(ab, "invalid event type: %d", event->type);
 			break;
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -33,11 +33,13 @@
 
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
 #define QMI_WLFW_FW_MEM_READY_IND_V01		0x0037
+#define QMI_WLFW_COLD_BOOT_CAL_DONE_IND_V01	0x0021
 #define QMI_WLFW_FW_READY_IND_V01		0x0038
 
 #define QMI_WLANFW_MAX_DATA_SIZE_V01		6144
 #define ATH12K_FIRMWARE_MODE_OFF		4
 #define ATH12K_QMI_TARGET_MEM_MODE_DEFAULT	0
+#define ATH12K_COLD_BOOT_FW_RESET_DELAY		(40 * HZ)
 
 #define ATH12K_BOARD_ID_DEFAULT	0xFF
 
@@ -63,6 +65,8 @@ enum ath12k_qmi_event_type {
 	ATH12K_QMI_EVENT_REQUEST_MEM,
 	ATH12K_QMI_EVENT_FW_MEM_READY,
 	ATH12K_QMI_EVENT_FW_READY,
+	ATH12K_QMI_EVENT_COLD_BOOT_CAL_START,
+	ATH12K_QMI_EVENT_COLD_BOOT_CAL_DONE,
 	ATH12K_QMI_EVENT_REGISTER_DRIVER,
 	ATH12K_QMI_EVENT_UNREGISTER_DRIVER,
 	ATH12K_QMI_EVENT_RECOVERY,
@@ -144,6 +148,7 @@ struct ath12k_qmi {
 	struct target_info target;
 	struct m3_mem_region m3_mem;
 	unsigned int service_ins_id;
+	wait_queue_head_t cold_boot_waitq;
 	struct dev_mem_info dev_mem[ATH12K_QMI_WLFW_MAX_DEV_MEM_NUM_V01];
 };
 
@@ -352,6 +357,10 @@ struct qmi_wlanfw_fw_ready_ind_msg_v01 {
 	char placeholder;
 };
 
+struct qmi_wlanfw_fw_cold_cal_done_ind_msg_v01 {
+	char placeholder;
+};
+
 #define QMI_WLANFW_CAP_REQ_MSG_V01_MAX_LEN	0
 #define QMI_WLANFW_CAP_RESP_MSG_V01_MAX_LEN	207
 #define QMI_WLANFW_CAP_REQ_V01			0x0024
