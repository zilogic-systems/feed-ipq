From 69aedff0d3dc416ee1c715911bf7560ba20485c2 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Mon, 4 Sep 2023 12:42:11 +0530
Subject: [PATCH] Revert "wifi: ath12k: wmi: remove struct wmi_channel_arg"

This reverts commit dce53b336beac92779478a470b0c2743a0c0d9ab.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 45 ++++++++++++++-------------
 drivers/net/wireless/ath/ath12k/wmi.c | 36 ++++++++++-----------
 drivers/net/wireless/ath/ath12k/wmi.h |  8 +++--
 3 files changed, 48 insertions(+), 41 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -829,22 +829,24 @@ static int ath12k_mac_monitor_vdev_start
 
 	channel = chandef->chan;
 	arg.vdev_id = vdev_id;
-	arg.freq = channel->center_freq;
-	arg.band_center_freq1 = chandef->center_freq1;
-	arg.band_center_freq2 = chandef->center_freq2;
-	arg.mode = ath12k_phymodes[chandef->chan->band][chandef->width];
-	arg.chan_radar = !!(channel->flags & IEEE80211_CHAN_RADAR);
-
-	arg.min_power = 0;
-	arg.max_power = channel->max_power;
-	arg.max_reg_power = channel->max_reg_power;
-	arg.max_antenna_gain = channel->max_antenna_gain;
+	arg.channel.freq = channel->center_freq;
+	arg.channel.band_center_freq1 = chandef->center_freq1;
+	arg.channel.band_center_freq2 = chandef->center_freq2;
+	arg.channel.mode = ath12k_phymodes[chandef->chan->band][chandef->width];
+	arg.channel.chan_radar =
+			!!(channel->flags & IEEE80211_CHAN_RADAR);
+
+	arg.channel.min_power = 0;
+	arg.channel.max_power = channel->max_power;
+	arg.channel.max_reg_power = channel->max_reg_power;
+	arg.channel.max_antenna_gain = channel->max_antenna_gain;
+
 
 	arg.pref_tx_streams = ar->num_tx_chains;
 	arg.pref_rx_streams = ar->num_rx_chains;
 	arg.punct_bitmap = 0xFFFFFFFF;
 
-	arg.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
+	arg.channel.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
 
 	reinit_completion(&ar->vdev_setup_done);
 	reinit_completion(&ar->vdev_delete_done);
@@ -5809,15 +5811,16 @@ ath12k_mac_vdev_start_restart(struct ath
 	arg.bcn_intval = arvif->beacon_interval;
 	arg.punct_bitmap = ~arvif->punct_bitmap;
 
-	arg.freq = chandef->chan->center_freq;
-	arg.band_center_freq1 = chandef->center_freq1;
-	arg.band_center_freq2 = chandef->center_freq2;
-	arg.mode = ath12k_phymodes[chandef->chan->band][chandef->width];
-
-	arg.min_power = 0;
-	arg.max_power = chandef->chan->max_power * 2;
-	arg.max_reg_power = chandef->chan->max_reg_power * 2;
-	arg.max_antenna_gain = chandef->chan->max_antenna_gain * 2;
+	arg.channel.freq = chandef->chan->center_freq;
+	arg.channel.band_center_freq1 = chandef->center_freq1;
+	arg.channel.band_center_freq2 = chandef->center_freq2;
+	arg.channel.mode =
+		ath12k_phymodes[chandef->chan->band][chandef->width];
+
+	arg.channel.min_power = 0;
+	arg.channel.max_power = chandef->chan->max_power * 2;
+	arg.channel.max_reg_power = chandef->chan->max_reg_power * 2;
+	arg.channel.max_antenna_gain = chandef->chan->max_antenna_gain * 2;
 
 	arg.pref_tx_streams = ar->num_tx_chains;
 	arg.pref_rx_streams = ar->num_rx_chains;
@@ -5828,9 +5831,10 @@ ath12k_mac_vdev_start_restart(struct ath
 		arg.hidden_ssid = arvif->u.ap.hidden_ssid;
 
 		/* For now allow DFS for AP mode */
-		arg.chan_radar = !!(chandef->chan->flags & IEEE80211_CHAN_RADAR);
+		arg.channel.chan_radar =
+			!!(chandef->chan->flags & IEEE80211_CHAN_RADAR);
 
-		arg.passive = arg.chan_radar;
+		arg.channel.passive = arg.channel.chan_radar;
 
 		spin_lock_bh(&ab->base_lock);
 		arg.regdomain = ar->ab->dfs_region;
@@ -5847,7 +5851,7 @@ ath12k_mac_vdev_start_restart(struct ath
 		}
 	}
 
-	arg.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
+	arg.channel.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
 
 	ath12k_dbg(ab, ATH12K_DBG_MAC,
 		   "mac vdev %d start center_freq %d phymode %s punct_bitmap 0x%x\n",
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -955,39 +955,39 @@ static void ath12k_wmi_put_wmi_channel(s
 {
 	memset(chan, 0, sizeof(*chan));
 
-	chan->mhz = cpu_to_le32(arg->freq);
-	chan->band_center_freq1 = cpu_to_le32(arg->band_center_freq1);
-	if (arg->mode == MODE_11AC_VHT80_80)
-		chan->band_center_freq2 = cpu_to_le32(arg->band_center_freq2);
+	chan->mhz = arg->channel.freq;
+	chan->band_center_freq1 = arg->channel.band_center_freq1;
+	if (arg->channel.mode == MODE_11AC_VHT80_80)
+		chan->band_center_freq2 = arg->channel.band_center_freq2;
 	else
 		chan->band_center_freq2 = 0;
 
-	chan->info |= le32_encode_bits(arg->mode, WMI_CHAN_INFO_MODE);
-	if (arg->passive)
+	chan->info |= u32_encode_bits(arg->channel.mode, WMI_CHAN_INFO_MODE);
+	if (arg->channel.passive)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_PASSIVE);
-	if (arg->allow_ibss)
+	if (arg->channel.allow_ibss)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_ADHOC_ALLOWED);
-	if (arg->allow_ht)
+	if (arg->channel.allow_ht)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_ALLOW_HT);
-	if (arg->allow_vht)
+	if (arg->channel.allow_vht)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_ALLOW_VHT);
-	if (arg->allow_he)
+	if (arg->channel.allow_he)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_ALLOW_HE);
-	if (arg->ht40plus)
+	if (arg->channel.ht40plus)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_HT40_PLUS);
-	if (arg->chan_radar)
+	if (arg->channel.chan_radar)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_DFS);
-	if (arg->freq2_radar)
+	if (arg->channel.freq2_radar)
 		chan->info |= cpu_to_le32(WMI_CHAN_INFO_DFS_FREQ2);
 
-	chan->reg_info_1 = le32_encode_bits(arg->max_power,
+	chan->reg_info_1 = u32_encode_bits(arg->channel.max_power,
 					    WMI_CHAN_REG_INFO1_MAX_PWR) |
-		le32_encode_bits(arg->max_reg_power,
+		le32_encode_bits(arg->channel.max_reg_power,
 				 WMI_CHAN_REG_INFO1_MAX_REG_PWR);
 
-	chan->reg_info_2 = le32_encode_bits(arg->max_antenna_gain,
+	chan->reg_info_2 = le32_encode_bits(arg->channel.max_antenna_gain,
 					    WMI_CHAN_REG_INFO2_ANT_MAX) |
-		le32_encode_bits(arg->max_power, WMI_CHAN_REG_INFO2_MAX_TX_PWR);
+		le32_encode_bits(arg->channel.max_power, WMI_CHAN_REG_INFO2_MAX_TX_PWR);
 }
 
 int ath12k_wmi_vdev_start(struct ath12k *ar, struct wmi_vdev_start_req_arg *arg,
@@ -1058,7 +1058,7 @@ int ath12k_wmi_vdev_start(struct ath12k
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "vdev %s id 0x%x freq 0x%x mode 0x%x\n",
 		   restart ? "restart" : "start", arg->vdev_id,
-		   arg->freq, arg->mode);
+		   arg->channel.freq, arg->channel.mode);
 
 	if (restart)
 		ret = ath12k_wmi_cmd_send(wmi, skb,
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2847,8 +2847,7 @@ enum wmi_phy_mode {
 	MODE_MAX = 33,
 };
 
-struct wmi_vdev_start_req_arg {
-	u32 vdev_id;
+struct wmi_channel_arg {
 	u32 freq;
 	u32 band_center_freq1;
 	u32 band_center_freq2;
@@ -2865,6 +2864,11 @@ struct wmi_vdev_start_req_arg {
 	u32 max_reg_power;
 	u32 max_antenna_gain;
 	enum wmi_phy_mode mode;
+};
+
+struct wmi_vdev_start_req_arg {
+	u32 vdev_id;
+	struct wmi_channel_arg channel;
 	u32 bcn_intval;
 	u32 dtim_period;
 	u8 *ssid;
