From b9576d4afe5285db55d90247fe158f4123898b8a Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 26 Jan 2022 18:14:23 -0800
Subject: [PATCH] ath12k: add extended NSS bandwidth support for 160MHz

When we bringup 160MHz in lesser NSS (NSS in 160MHz is lesser than max
NSS support), rx and tx MCS map for 160MHz under HE capabilities are not
updating properly. FW indicates NSS ratio through nss_ratio_enabled and
nss_ratio_info fields in svc ready. But if FW advertises EXT NSS BW
support in VHT caps as 1(1x2) and when nss_ratio_info indicates 1:1,
reset the EXT NSS BW Support in VHT caps to 0 which indicates 1x1.

Using the default VHT caps advertised by FW caused the STA to use
NSS 1:2 ratio.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 39 ++++++++++++++++++++-------
 1 file changed, 30 insertions(+), 9 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1979,8 +1979,10 @@ static void ath12k_peer_assoc_h_he(struc
 
 	if (arg->peer_phymode == MODE_11AX_HE160 ||
 	    arg->peer_phymode == MODE_11AX_HE80_80) {
-		tx_nss = ath12k_get_nss_160mhz(ar, max_nss);
+		tx_nss = ath12k_get_nss_160mhz(ar, ar->num_tx_chains);
 		rx_nss = min(arg->peer_nss, tx_nss);
+
+		arg->peer_nss = min(sta->deflink.rx_nss, ar->num_rx_chains);
 		arg->peer_bw_rxnss_override = ATH12K_BW_NSS_MAP_ENABLE;
 
 		if (!rx_nss) {
@@ -4737,6 +4739,12 @@ ath12k_create_vht_cap(struct ath12k *ar,
 	vht_cap.vht_mcs.rx_mcs_map = cpu_to_le16(rxmcs_map);
 	vht_cap.vht_mcs.tx_mcs_map = cpu_to_le16(txmcs_map);
 
+	/* Check if the HW supports 1:1 NSS ratio and reset
+	 * EXT NSS BW Support field to 0 to indicate 1:1 ratio
+	 */
+	if (ar->pdev->cap.nss_ratio_info == WMI_NSS_RATIO_1_NSS)
+		vht_cap.cap &= ~IEEE80211_VHT_CAP_EXT_NSS_BW_MASK;
+
 	return vht_cap;
 }
 
@@ -4918,11 +4926,12 @@ static void ath12k_mac_set_hemcsmap(stru
                                    struct ath12k_pdev_cap *cap,
                                    struct ieee80211_sta_he_cap *he_cap)
 {
-	u16 txmcs_map, rxmcs_map;
-	u32 i;
+	u16 txmcs_map = 0, rxmcs_map = 0;
+	u16 txmcs_map_160 = 0, rxmcs_map_160 = 0;
+	u32 i = 0;
+	u8 maxtxnss_160 = ath12k_get_nss_160mhz(ar, ar->num_tx_chains);
+	u8 maxrxnss_160 = ath12k_get_nss_160mhz(ar, ar->num_rx_chains);
 
-	rxmcs_map = 0;
-	txmcs_map = 0;
 	for (i = 0; i < 8; i++) {
 	       if (i < ar->num_tx_chains &&
 		   (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
@@ -4935,6 +4944,19 @@ static void ath12k_mac_set_hemcsmap(stru
 		       rxmcs_map |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
 	       else
 		       rxmcs_map |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+
+		if (i < maxtxnss_160 &&
+		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
+			txmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
+		else
+			txmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+
+		if (i < maxrxnss_160 &&
+		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
+			rxmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
+		else
+			rxmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+
 	}
 
 	he_cap->he_mcs_nss_supp.rx_mcs_80 =
@@ -4942,13 +4964,13 @@ static void ath12k_mac_set_hemcsmap(stru
 	he_cap->he_mcs_nss_supp.tx_mcs_80 =
 	       cpu_to_le16(txmcs_map & 0xffff);
 	he_cap->he_mcs_nss_supp.rx_mcs_160 =
-	       cpu_to_le16(rxmcs_map & 0xffff);
+	       cpu_to_le16(rxmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_160 =
-	       cpu_to_le16(txmcs_map & 0xffff);
+	       cpu_to_le16(txmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.rx_mcs_80p80 =
-	       cpu_to_le16(rxmcs_map & 0xffff);
+	       cpu_to_le16(rxmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_80p80 =
-	       cpu_to_le16(txmcs_map & 0xffff);
+	       cpu_to_le16(txmcs_map_160 & 0xffff);
 }
 
 static void ath12k_mac_copy_he_cap(struct ath12k_band_cap *band_cap,
