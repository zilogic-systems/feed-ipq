From 1006a8583e2b3d89d62a05609399931d8e947c39 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Wed, 25 Aug 2021 11:26:45 -0700
Subject: [PATCH] ath12k: add WMI support for EHT peer

Add new WMI tag and pass the EHT parameters for peer association
to target.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c |  8 +++-
 drivers/net/wireless/ath/ath12k/wmi.c | 53 +++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath12k/wmi.h | 20 ++++++++++
 3 files changed, 77 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1885,7 +1885,7 @@ static void ath12k_wmi_copy_peer_flags(s
 		if (arg->bw_160)
 			cmd->peer_flags |= cpu_to_le32(WMI_PEER_160MHZ);
 		if (arg->bw_320)
-			cmd->peer_flags |= cpu_to_le32(WMI_PEER_EXT_320MHZ);
+			cmd->peer_flags_ext |= cpu_to_le32(WMI_PEER_EXT_320MHZ);
 
 		/* Typically if STBC is enabled for VHT it should be enabled
 		 * for HT as well
@@ -2102,28 +2102,6 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 		ptr += sizeof(*he_mcs);
 	}
 
-	/* Loop through the EHT rate set */
-	len = arg->peer_eht_mcs_count * sizeof(*eht_mcs);
-	tlv = ptr;
-	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT, len);
-	ptr += TLV_HDR_SIZE;
-
-	for (i = 0; i < arg->peer_eht_mcs_count; i++) {
-		eht_mcs = ptr;
-		eht_mcs->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_HE_RATE_SET,
-							     sizeof(*eht_mcs));
-
-		eht_mcs->rx_mcs_set = cpu_to_le32(arg->peer_eht_rx_mcs_set[i]);
-		eht_mcs->tx_mcs_set = cpu_to_le32(arg->peer_eht_tx_mcs_set[i]);
-		ptr += sizeof(*eht_mcs);
-	}
-
-	/* ML partner links tag with 0 length */
-	len = 0;
-	tlv = ptr;
-	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT, len);
-	ptr += TLV_HDR_SIZE;
-
 	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
 		   "wmi peer assoc vdev id %d assoc id %d peer mac %pM peer_flags %x rate_caps %x peer_caps %x listen_intval %d ht_caps %x max_mpdu %d nss %d phymode %d peer_mpdu_density %d vht_caps %x he cap_info %x he ops %x he cap_info_ext %x he phy %x %x %x peer_bw_rxnss_override %x peer_flags_ext %x eht mac_cap %x %x eht phy_cap %x %x %x\n",
 		   cmd->vdev_id, cmd->peer_associd, arg->peer_mac,
@@ -2140,6 +2118,32 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 		   cmd->peer_eht_cap_phy[0], cmd->peer_eht_cap_phy[1],
 		   cmd->peer_eht_cap_phy[2]);
 
+	/* WAR fill MLO Header TAG with 0 length */
+	len = 0;
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
+	/* Loop through the EHT rate set.
+	 */
+	len = arg->peer_eht_mcs_count * sizeof(*eht_mcs);
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
+	for (i = 0; i < arg->peer_eht_mcs_count; i++) {
+		eht_mcs = ptr;
+		eht_mcs->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+						 WMI_TAG_EHT_RATE_SET) |
+				      FIELD_PREP(WMI_TLV_LEN,
+						 sizeof(*eht_mcs) - TLV_HDR_SIZE);
+		eht_mcs->rx_mcs_set = arg->peer_eht_rx_mcs_set[i];
+		eht_mcs->tx_mcs_set = arg->peer_eht_tx_mcs_set[i];
+		ptr += sizeof(*eht_mcs);
+	}
+
 	/* fill ML Partner links Header TAG */
 	len = 0;
 	tlv = ptr;
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -4096,6 +4096,9 @@ struct wmi_unit_test_cmd {
 #define WMI_PEER_160MHZ		0x40000000
 #define WMI_PEER_SAFEMODE_EN	0x80000000
 
+#define WMI_PEER_EXT_EHT        0x00000001
+#define WMI_PEER_EXT_320MHZ     0x00000002
+
 struct ath12k_wmi_vht_rate_set_params {
 	__le32 tlv_header;
 	__le32 rx_max_rate;
@@ -4117,6 +4120,12 @@ struct ath12k_wmi_eht_rate_set_params {
 	__le32 tlv_header;
 	__le32 rx_mcs_set;
 	__le32 tx_mcs_set;
+} __packed;
+
+struct wmi_eht_rate_set {
+	__le32 tlv_header;
+	__le32 rx_mcs_set;
+	__le32 tx_mcs_set;
 } __packed;
 
 #define MAX_REG_RULES 10
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -2455,6 +2455,18 @@ static void ath12k_peer_assoc_h_eht(stru
 
 	arg->eht_flag = true;
 
+	if (sta->deflink.bandwidth >= IEEE80211_STA_RX_BW_40)
+		arg->bw_40 = true;
+
+	if (sta->deflink.bandwidth >= IEEE80211_STA_RX_BW_80)
+		arg->bw_80 = true;
+
+	if (sta->deflink.bandwidth >= IEEE80211_STA_RX_BW_160)
+		arg->bw_160 = true;
+
+	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_320)
+		arg->bw_320 = true;
+
 	if ((eht_cap->eht_cap_elem.phy_cap_info[5] &
 	     IEEE80211_EHT_PHY_CAP5_PPE_THRESHOLD_PRESENT) &&
 	    eht_cap->eht_ppe_thres[0] != 0)
