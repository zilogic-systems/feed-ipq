From bbf57f4511201ce5afbdf541b9f504846adc9ed4 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Fri, 8 Apr 2022 17:48:31 +0530
Subject: [PATCH] ath12k porting 6g regulatory changes

Added missed declaration and definition for 6 GHZ regulatory
with new client and power type

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  8 ++++++++
 drivers/net/wireless/ath/ath12k/reg.c  | 13 ++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.c  |  8 ++------
 drivers/net/wireless/ath/ath12k/wmi.h  |  5 +++++
 4 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index dfe90fe..a15bff5 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -763,6 +763,11 @@ struct ath12k_soc_dp_stats {
 	struct ath12k_soc_dp_tx_err_stats tx_err;
 };
 
+struct ath12k_reg_rule {
+         u32 start_freq;
+         u32 end_freq;
+};
+
 /* Master structure to hold the hw data which may be used in core module */
 struct ath12k_base {
 	enum ath12k_hw_rev hw_rev;
@@ -830,6 +835,9 @@ struct ath12k_base {
 
 	/* Current DFS Regulatory */
 	enum ath12k_dfs_region dfs_region;
+	struct ath12k_reg_rule reg_rule_2g;
+	struct ath12k_reg_rule reg_rule_5g;
+	struct ath12k_reg_rule reg_rule_6g;
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_soc;
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/reg.c b/drivers/net/wireless/ath/ath12k/reg.c
index eca4694..b988033 100644
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -43,6 +43,17 @@ ath12k_ieee80211_ap_pwr_type_convert(enum ieee80211_ap_reg_power power_type)
        }
 }
 
+static void ath12k_copy_reg_rule(struct ath12k_reg_rule *ath12k_reg_rule,
+                                 struct cur_reg_rule *reg_rule)
+{
+        if (!ath12k_reg_rule->start_freq)
+                ath12k_reg_rule->start_freq = reg_rule->start_freq;
+
+        if ((!ath12k_reg_rule->end_freq) ||
+            (ath12k_reg_rule->end_freq < reg_rule->end_freq))
+                ath12k_reg_rule->end_freq = reg_rule->end_freq;
+}
+
 static struct cur_reg_rule
 *ath12k_get_active_6g_reg_rule(struct cur_regulatory_info *reg_info,
                               u32 *max_bw_6g, int *max_elements,
@@ -778,7 +789,7 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
 				       reg_rule->start_freq,
 				       reg_rule->end_freq, max_bw,
 				       reg_rule->ant_gain, reg_rule->reg_power,
-				       flags);
+				       reg_rule->psd_eirp, flags, pwr_mode);
 
 		/* Update dfs cac timeout if the dfs domain is ETSI and the
 		 * new rule covers weather radar band.
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 85fb427..23d83cc 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -6103,8 +6103,7 @@ retfail:
 }
 
 
-static int ath12k_reg_chan_list_event(struct ath12k_base *ab, struct sk_buff *skb,
-                                     enum wmi_reg_chan_list_cmd_type id)
+static int ath12k_reg_chan_list_event(struct ath12k_base *ab, struct sk_buff *skb)
 {
        struct cur_regulatory_info *reg_info;
        int ret, i, j;
@@ -6113,10 +6112,7 @@ static int ath12k_reg_chan_list_event(struct ath12k_base *ab, struct sk_buff *sk
        if (!reg_info)
                return -ENOMEM;
 
-       if (id == WMI_REG_CHAN_LIST_CC_ID)
-               ret = ath12k_pull_reg_chan_list_ext_update_ev(ab, skb, reg_info);
-       else
-               ret = ath12k_pull_reg_chan_list_ext_update_ev(ab, skb, reg_info);
+       ret = ath12k_pull_reg_chan_list_ext_update_ev(ab, skb, reg_info);
 
        if (ret) {
                ath12k_warn(ab, "failed to extract regulatory info from received event\n");
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 5cb08f2..73d7636 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -4227,6 +4227,11 @@ enum {
 
 #define WMI_REG_CLIENT_MAX 4
 
+enum wmi_reg_chan_list_cmd_type {
+        WMI_REG_CHAN_LIST_CC_ID = 0,
+        WMI_REG_CHAN_LIST_CC_EXT_ID = 1,
+};
+
 struct wmi_reg_chan_list_cc_ext_event {
 	__le32 status_code;
 	__le32 phy_id;
-- 
2.17.1

