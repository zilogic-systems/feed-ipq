From 4350fc9bf1243d6aa1e6dff984562cbf73b0f8c2 Mon Sep 17 00:00:00 2001
From: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
Date: Tue, 23 Nov 2021 18:19:03 +0530
Subject: [PATCH] mac80211: add EHT support for mesh

Add support for EHT capability, operation information element parsing
and advertisement in mesh beacon, probe responses, and peering action
frames.

Update EHT support configurations based on the parsed elements.

Filter capabilities reported by the firmware based on mesh needs
and remove the capabilities not required for mesh.

Signed-off-by: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 67 ++++++++++++++++++++++++---
 1 file changed, 61 insertions(+), 6 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -2787,7 +2787,7 @@ static void ath12k_peer_assoc_h_eht(stru
 	band = def.chan->band;
 	eht_mcs_mask = arvif->bitrate_mask.control[band].eht_mcs;
 
-	if (ath12k_peer_assoc_h_eht_masked(eht_mcs_mask))
+	if (ath12k_peer_assoc_h_eht_masked((const u16*) eht_mcs_mask))
 		return;
 
 
@@ -5889,6 +5889,47 @@ static void ath12k_mac_copy_eht_ppe_thre
 	}
 }
 
+static void
+ath12k_mac_filter_eht_cap_mesh(struct ieee80211_eht_cap_elem_fixed *eht_cap_elem)
+{
+	u8 m;
+
+	m = IEEE80211_EHT_MAC_CAP0_EPCS_PRIO_ACCESS;
+	eht_cap_elem->mac_cap_info[0] &= ~m;
+
+	m = IEEE80211_EHT_PHY_CAP0_PARTIAL_BW_UL_MU_MIMO;
+	eht_cap_elem->phy_cap_info[0] &= ~m;
+
+	m = IEEE80211_EHT_PHY_CAP3_NG_16_MU_FEEDBACK |
+	   IEEE80211_EHT_PHY_CAP3_CODEBOOK_7_5_MU_FDBK |
+	   IEEE80211_EHT_PHY_CAP3_TRIG_MU_BF_PART_BW_FDBK |
+	   IEEE80211_EHT_PHY_CAP3_TRIG_CQI_FDBK;
+	eht_cap_elem->phy_cap_info[3] &= ~m;
+
+	m = IEEE80211_EHT_PHY_CAP4_PART_BW_DL_MU_MIMO |
+	   IEEE80211_EHT_PHY_CAP4_PSR_SR_SUPP |
+	   IEEE80211_EHT_PHY_CAP4_POWER_BOOST_FACT_SUPP |
+	   IEEE80211_EHT_PHY_CAP4_EHT_MU_PPDU_4_EHT_LTF_08_GI;
+	eht_cap_elem->phy_cap_info[4] &= ~m;
+
+	m = IEEE80211_EHT_PHY_CAP5_NON_TRIG_CQI_FEEDBACK |
+	   IEEE80211_EHT_PHY_CAP5_TX_LESS_242_TONE_RU_SUPP |
+	   IEEE80211_EHT_PHY_CAP5_RX_LESS_242_TONE_RU_SUPP |
+	   IEEE80211_EHT_PHY_CAP5_MAX_NUM_SUPP_EHT_LTF_MASK;
+	eht_cap_elem->phy_cap_info[5] &= ~m;
+
+	m = IEEE80211_EHT_PHY_CAP6_MAX_NUM_SUPP_EHT_LTF_MASK;
+	eht_cap_elem->phy_cap_info[6] &= ~m;
+
+	m = IEEE80211_EHT_PHY_CAP7_NON_OFDMA_UL_MU_MIMO_80MHZ |
+	   IEEE80211_EHT_PHY_CAP7_NON_OFDMA_UL_MU_MIMO_160MHZ |
+	   IEEE80211_EHT_PHY_CAP7_NON_OFDMA_UL_MU_MIMO_320MHZ |
+	   IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_80MHZ |
+	   IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_160MHZ |
+	   IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_320MHZ;
+	eht_cap_elem->phy_cap_info[7] &= ~m;
+}
+
 static void ath12k_mac_copy_eht_cap(struct ath12k_band_cap *band_cap,
 				    struct ieee80211_he_cap_elem *he_cap_elem,
 				    int iftype,
@@ -5922,6 +5963,9 @@ static void ath12k_mac_copy_eht_cap(stru
 			  IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_160MHZ |
 			  IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_320MHZ);
 		break;
+	case NL80211_IFTYPE_MESH_POINT:
+		ath12k_mac_filter_eht_cap_mesh(eht_cap_elem);
+		break;
 	default:
 		break;
 	}
@@ -8348,7 +8392,8 @@ ath12k_mac_bitrate_mask_get_single_nss(s
 	}
 
 	mcs_nss_len = ieee80211_eht_mcs_nss_size(&sband->iftype_data->he_cap.he_cap_elem,
-						 &sband->iftype_data->eht_cap.eht_cap_elem);
+						 &sband->iftype_data->eht_cap.eht_cap_elem,
+						 false);
 	if (mcs_nss_len == 4) {
 		/* 20 MHz only STA case */
 		const struct ieee80211_eht_mcs_nss_supp_20mhz_only *eht_mcs_nss =
