From c32fcc2dbf38020481b51956892d5da787a7af1d Mon Sep 17 00:00:00 2001
From: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
Date: Thu, 12 May 2022 16:52:00 +0530
Subject: [PATCH] ath12k: Add pageable mem type for QCN9274

Added pageable mem type region in the fixed mem.
This would be used for for dynamic Paging arena for QCN9274.

Signed-off-by: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c     |   2 +
 drivers/net/wireless/ath/ath12k/core.h     |   4 +
 drivers/net/wireless/ath/ath12k/coredump.c |  18 ++++
 drivers/net/wireless/ath/ath12k/qmi.c      | 110 +++++++++++++--------
 4 files changed, 93 insertions(+), 41 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 64e186c..1945f32 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -863,6 +863,8 @@ static void ath12k_core_reset(struct work_struct *work)
 	ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset starting\n");
 
 	ab->is_reset = true;
+	/* reset host fixed mem off to zero */
+	ab->host_ddr_fixed_mem_off = 0;
 	/* prepare coredump */
 	ath12k_coredump_download_rddm(ab);
 
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 872a7a2..6777c7e 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -839,6 +839,7 @@ struct ath12k_base {
 	bool static_window_map;
 	
 	struct device_node *hremote_node;
+	u32 host_ddr_fixed_mem_off;
 
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
@@ -864,6 +865,9 @@ void ath12k_core_halt(struct ath12k *ar);
 int ath12k_core_resume(struct ath12k_base *ab);
 int ath12k_core_suspend(struct ath12k_base *ab);
 int ath12k_config_qdss(struct ath12k_base *ab);
+int ath12k_coredump_mhi_update_bhie_table(struct ath12k_base *ab,
+					  void __iomem *va,
+					  phys_addr_t pa, size_t size);
 
 const struct firmware *ath12k_core_firmware_request(struct ath12k_base *ab,
 						    const char *filename);
diff --git a/drivers/net/wireless/ath/ath12k/coredump.c b/drivers/net/wireless/ath/ath12k/coredump.c
index 4fc722b..ec5b752 100644
--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -300,3 +300,21 @@ out:
 	kfree(dump);
 }
 
+int ath12k_coredump_mhi_update_bhie_table(struct ath12k_base *ab,
+					  void __iomem *va,
+					  phys_addr_t pa, size_t size)
+{
+	struct ath12k_pci *ar_pci = (struct ath12k_pci *)ab->drv_priv;
+	struct mhi_controller *mhi_ctrl = ar_pci->mhi_ctrl;
+	int ret;
+
+	/* Attach Pageable region to MHI buffer so that it is
+	 * included as part of pageable region in dumps
+	 */
+	ret = mhi_update_bhie_table_for_dyn_paging(mhi_ctrl, va, pa, size);
+	if (ret)
+	        ath12k_dbg(ab, ATH12K_DBG_QMI,
+			   "failed to add Dynamic Paging region to MHI Buffer table %d\n", ret);
+
+	return ret;
+}
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index 355c51d..518f7d7 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -2683,70 +2683,90 @@ static int ath12k_qmi_assign_target_mem_chunk(struct ath12k_base *ab)
 	struct device *dev = ab->dev;
 	struct device_node *hremote_node = NULL;
 	struct resource res;
-	u32 host_ddr_sz;
+	int host_ddr_sz, sz;
 	int i, idx, ret;
 
-	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
-		switch (ab->qmi.target_mem[i].type) {
-		case HOST_DDR_REGION_TYPE:
-			hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
-			if (!hremote_node) {
-				ath12k_warn(ab, "qmi fail to get hremote_node\n");
-				return ret;
-			}
+	sz = ab->host_ddr_fixed_mem_off;
+	hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
+	if (!hremote_node) {
+		ath12k_warn(ab, "qmi fail to get hremote_node\n");
+		return ret;
+	}
 
-			ret = of_address_to_resource(hremote_node, 0, &res);
-			if (ret) {
-				ath12k_warn(ab, "qmi fail to get reg from hremote\n");
-				return ret;
-			}
+	ret = of_address_to_resource(hremote_node, 0, &res);
+	of_node_put(hremote_node);
+	if (ret) {
+		ath12k_warn(ab, "qmi fail to get reg from hremote\n");
+		return ret;
+	}
 
-			if (res.end - res.start + 1 < ab->qmi.target_mem[i].size) {
-				ath12k_warn(ab, "qmi fail to assign memory of sz\n");
-				return -EINVAL;
-			}
+	host_ddr_sz = (res.end - res.start) + 1;
+
+	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
+		ab->qmi.target_mem[idx].paddr = res.start + sz;
+
+		if (ab->qmi.target_mem[i].size > (host_ddr_sz - sz)) {
+			ath12k_warn(ab, "No fixed mem to assign for type %d\n",
+				    ab->qmi.target_mem[i].type);
+			return -EINVAL;
+		}
 
-			ab->qmi.target_mem[idx].paddr = res.start;
+		switch (ab->qmi.target_mem[i].type) {
+		case HOST_DDR_REGION_TYPE:
 			ab->qmi.target_mem[idx].v.ioaddr =
 					ioremap(ab->qmi.target_mem[idx].paddr,
 						ab->qmi.target_mem[i].size);
-			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
-			host_ddr_sz = ab->qmi.target_mem[i].size;
-			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+			ab->qmi.target_mem[idx].size =
+					ab->qmi.target_mem[i].size;
+			ab->qmi.target_mem[idx].type =
+					ab->qmi.target_mem[i].type;
+			sz += ab->qmi.target_mem[i].size;
 			idx++;
 			break;
 		case CALDB_MEM_REGION_TYPE:
-			if (ab->qmi.target_mem[i].size > ATH12K_QMI_CALDB_SIZE) {
-				ath12k_warn(ab, "qmi mem size is low to load caldata\n");
-				return -EINVAL;
-			}
-
-			if (ath12k_cold_boot_cal && ab->hw_params->cold_boot_calib) {
-				if (hremote_node) {
-					ab->qmi.target_mem[idx].paddr =
-							res.start + host_ddr_sz;
-					ab->qmi.target_mem[idx].v.ioaddr =
-						ioremap(ab->qmi.target_mem[idx].paddr,
-							ab->qmi.target_mem[i].size);
-				} else {
-					ab->qmi.target_mem[idx].paddr =
-						ATH12K_QMI_CALDB_ADDRESS;
-				}
+			if (ath12k_cold_boot_cal &&
+				ab->hw_params->cold_boot_calib) {
+				ab->qmi.target_mem[idx].v.ioaddr =
+					ioremap(ab->qmi.target_mem[idx].paddr,
+						ab->qmi.target_mem[i].size);
+				sz += ab->qmi.target_mem[i].size;
 			} else {
 				ab->qmi.target_mem[idx].paddr = 0;
 				ab->qmi.target_mem[idx].v.ioaddr = NULL;
 			}
 
-			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
-			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+			ab->qmi.target_mem[idx].size =
+					ab->qmi.target_mem[i].size;
+			ab->qmi.target_mem[idx].type =
+					ab->qmi.target_mem[i].type;
 			idx++;
 			break;
+		case PAGEABLE_MEM_REGION_TYPE:
+                        ab->qmi.target_mem[idx].v.ioaddr =
+                                        ioremap(ab->qmi.target_mem[idx].paddr,
+						ab->qmi.target_mem[i].size);
+                        ab->qmi.target_mem[idx].size =
+					ab->qmi.target_mem[i].size;
+                        ab->qmi.target_mem[idx].type =
+					ab->qmi.target_mem[i].type;
+			ret = ath12k_coredump_mhi_update_bhie_table(ab,
+					ab->qmi.target_mem[idx].v.ioaddr,
+					ab->qmi.target_mem[idx].paddr,
+					ab->qmi.target_mem[idx].size);
+			sz += ab->qmi.target_mem[i].size;
+			if (ret < 0)
+				ath12k_warn(ab,
+				            "qmi fail to update BHI table %d\n", ret);
+			idx++;
+			break;
+
 		default:
 			ath12k_warn(ab, "qmi ignore invalid mem req type %d\n",
 				    ab->qmi.target_mem[i].type);
 			break;
 		}
 	}
+	ab->host_ddr_fixed_mem_off = sz;
 	ab->qmi.mem_seg_count = idx;
 
 	return 0;
@@ -3508,7 +3528,14 @@ int ath12k_qmi_pci_alloc_qdss_mem(struct ath12k_qmi *qmi)
 			return ret;
 		}
 
-		ab->qmi.qdss_mem[0].paddr = (phys_addr_t)res.start + QMI_Q6_QDSS_ETR_OFFSET_QCN9274;
+		if ((ab->host_ddr_fixed_mem_off + ab->qmi.qdss_mem[0].size) >
+			((res.end - res.start) + 1)) {
+			ath12k_warn(ab,
+				    "No Fixed mem to allocate for QDSS_ETR_MEM_REGION_TYPE");
+			return -EINVAL;
+		}
+
+		ab->qmi.qdss_mem[0].paddr = (phys_addr_t)res.start + ab->host_ddr_fixed_mem_off;
 		ab->qmi.qdss_mem[0].v.ioaddr =
 			ioremap(ab->qmi.qdss_mem[0].paddr,
 				ab->qmi.qdss_mem[0].size);
@@ -3516,6 +3543,7 @@ int ath12k_qmi_pci_alloc_qdss_mem(struct ath12k_qmi *qmi)
 			ath12k_warn(ab, "WARNING etr-addr remap failed\n");
 			return -ENOMEM;
 		}
+		ab->host_ddr_fixed_mem_off += ab->qmi.qdss_mem[0].size;
 		break;
 	default:
 		ath12k_warn(ab, "qmi ignore invalid qdss mem req type %d\n",
-- 
2.17.1

