From 89a3a3a9566c5b01aeba7f20e3b2d36bee7f46b5 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Tue, 31 May 2022 19:37:15 +0530
Subject: [PATCH] ath12k: disabling credit flow for WMI path

Firmware credit flow control is enabled for WMI control services,
which expects available tokens should be acquired before sending a
command to the target. Also the token gets released when firmware
receives the command.

This credit-based flow limits driver to send WMI command only
when the token available which is causing WMI commands to timeout and
return -EAGAIN, whereas firmware has enough capability to process the
WMI command. To fix this Tx starvation issue, introduce the ability to
disable the credit flow for the WMI path.

The driver sends WMI configuration for disabling credit flow to firmware
by two ways.
	1. By using a global flag
		(HTC_MSG_SETUP_COMPLETE_EX_ID msg type flags)
	2. By using a local flag
		(ATH12K_HTC_CONN_FLAGS_DISABLE_CREDIT_FLOW_CTRL = 1 << 3)

Ath12k uses both these configurations to disable credit flow for the
WMI path completely.

Also added a hw_param member for credit flow control by which we can
enable or disable it based on per-target basis.

Signed-off-by: Praneesh P <quic_ppranees@quicinc.com>
Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ce.c  | 31 +++++++++---
 drivers/net/wireless/ath/ath12k/ce.h  |  4 +-
 drivers/net/wireless/ath/ath12k/htc.c | 71 ++++++++++++++++++++-------
 drivers/net/wireless/ath/ath12k/htc.h |  6 +++
 drivers/net/wireless/ath/ath12k/hw.c  |  2 +
 drivers/net/wireless/ath/ath12k/hw.h  |  1 +
 drivers/net/wireless/ath/ath12k/wmi.c | 64 +++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/wmi.h |  1 +
 8 files changed, 142 insertions(+), 38 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/ce.c b/drivers/net/wireless/ath/ath12k/ce.c
index b9fae1c..7146962 100644
--- a/drivers/net/wireless/ath/ath12k/ce.c
+++ b/drivers/net/wireless/ath/ath12k/ce.c
@@ -41,6 +41,7 @@ const struct ce_attr ath12k_host_ce_config_qcn9274[] = {
 		.src_nentries = 32,
 		.src_sz_max = 2048,
 		.dest_nentries = 0,
+		.send_cb = ath12k_htc_tx_completion_handler,
 	},
 
 	/* CE4: host->target HTT */
@@ -74,6 +75,7 @@ const struct ce_attr ath12k_host_ce_config_qcn9274[] = {
 		.src_nentries = 32,
 		.src_sz_max = 2048,
 		.dest_nentries = 0,
+		.send_cb = ath12k_htc_tx_completion_handler,
 	},
 
 	/* CE8: target autonomous hif_memcpy */
@@ -455,18 +457,31 @@ err_unlock:
 	return skb;
 }
 
-static void ath12k_ce_send_done_cb(struct ath12k_ce_pipe *pipe)
+static void ath12k_ce_tx_process_cb(struct ath12k_ce_pipe *pipe)
 {
 	struct ath12k_base *ab = pipe->ab;
 	struct sk_buff *skb;
+	struct sk_buff_head list;
 
+	__skb_queue_head_init(&list);
 	while (!IS_ERR(skb = ath12k_ce_completed_send_next(pipe))) {
 		if (!skb)
 			continue;
 
 		dma_unmap_single(ab->dev, ATH12K_SKB_CB(skb)->paddr, skb->len,
 				 DMA_TO_DEVICE);
-		dev_kfree_skb_any(skb);
+		if ((!pipe->send_cb) || ab->hw_params->credit_flow) {
+			dev_kfree_skb_any(skb);
+			continue;
+		}
+
+		__skb_queue_tail(&list, skb);
+	}
+
+	while ((skb = __skb_dequeue(&list))) {
+		ath12k_dbg(ab, ATH12K_DBG_PCI, "tx ce pipe %d len %d\n",
+			   pipe->pipe_num, skb->len);
+		pipe->send_cb(ab, skb);
 	}
 }
 
@@ -596,7 +611,7 @@ static int ath12k_ce_alloc_pipe(struct ath12k_base *ab, int ce_id)
 	pipe->attr_flags = attr->flags;
 
 	if (attr->src_nentries) {
-		pipe->send_cb = ath12k_ce_send_done_cb;
+		pipe->send_cb = attr->send_cb;
 		nentries = roundup_pow_of_two(attr->src_nentries);
 		desc_sz = ath12k_hal_ce_get_desc_size(HAL_CE_DESC_SRC);
 		ring = ath12k_ce_alloc_ring(ab, nentries, desc_sz);
@@ -627,9 +642,10 @@ static int ath12k_ce_alloc_pipe(struct ath12k_base *ab, int ce_id)
 void ath12k_ce_per_engine_service(struct ath12k_base *ab, u16 ce_id)
 {
 	struct ath12k_ce_pipe *pipe = &ab->ce.ce_pipe[ce_id];
+	const struct ce_attr *attr = &ab->hw_params->host_ce_config[ce_id];
 
-	if (pipe->send_cb)
-		pipe->send_cb(pipe);
+	if (attr->src_nentries)
+		ath12k_ce_tx_process_cb(pipe);
 
 	if (pipe->recv_cb)
 		ath12k_ce_recv_process_cb(pipe);
@@ -638,9 +654,10 @@ void ath12k_ce_per_engine_service(struct ath12k_base *ab, u16 ce_id)
 void ath12k_ce_poll_send_completed(struct ath12k_base *ab, u8 pipe_id)
 {
 	struct ath12k_ce_pipe *pipe = &ab->ce.ce_pipe[pipe_id];
+	const struct ce_attr *attr =  &ab->hw_params->host_ce_config[pipe_id];
 
-	if ((pipe->attr_flags & CE_ATTR_DIS_INTR) && pipe->send_cb)
-		pipe->send_cb(pipe);
+	if ((pipe->attr_flags & CE_ATTR_DIS_INTR) && attr->src_nentries)
+		ath12k_ce_tx_process_cb(pipe);
 }
 
 int ath12k_ce_send(struct ath12k_base *ab, struct sk_buff *skb, u8 pipe_id,
diff --git a/drivers/net/wireless/ath/ath12k/ce.h b/drivers/net/wireless/ath/ath12k/ce.h
index 17cf162..64381ed 100644
--- a/drivers/net/wireless/ath/ath12k/ce.h
+++ b/drivers/net/wireless/ath/ath12k/ce.h
@@ -92,6 +92,8 @@ struct ce_attr {
 	unsigned int dest_nentries;
 
 	void (*recv_cb)(struct ath12k_base *ab, struct sk_buff *skb);
+
+	void (*send_cb)(struct ath12k_base *, struct sk_buff *);
 };
 
 #define CE_DESC_RING_ALIGN 8
@@ -145,7 +147,7 @@ struct ath12k_ce_pipe {
 	unsigned int buf_sz;
 	unsigned int rx_buf_needed;
 
-	void (*send_cb)(struct ath12k_ce_pipe *pipe);
+	void (*send_cb)(struct ath12k_base *, struct sk_buff *);
 	void (*recv_cb)(struct ath12k_base *ab, struct sk_buff *skb);
 
 	struct tasklet_struct intr_tq;
diff --git a/drivers/net/wireless/ath/ath12k/htc.c b/drivers/net/wireless/ath/ath12k/htc.c
index 23f7428..4a4bf36 100644
--- a/drivers/net/wireless/ath/ath12k/htc.c
+++ b/drivers/net/wireless/ath/ath12k/htc.c
@@ -81,6 +81,8 @@ int ath12k_htc_send(struct ath12k_htc *htc,
 	struct ath12k_base *ab = htc->ab;
 	int credits = 0;
 	int ret;
+	bool credit_flow_enabled = (ab->hw_params->credit_flow &&
+				    ep->tx_credit_flow_enabled);
 
 	if (eid >= ATH12K_HTC_EP_COUNT) {
 		ath12k_warn(ab, "Invalid endpoint id: %d\n", eid);
@@ -89,7 +91,7 @@ int ath12k_htc_send(struct ath12k_htc *htc,
 
 	skb_push(skb, sizeof(struct ath12k_htc_hdr));
 
-	if (ep->tx_credit_flow_enabled) {
+	if (credit_flow_enabled) {
 		credits = DIV_ROUND_UP(skb->len, htc->target_credit_size);
 		spin_lock_bh(&htc->tx_lock);
 		if (ep->tx_credits < credits) {
@@ -125,7 +127,7 @@ int ath12k_htc_send(struct ath12k_htc *htc,
 err_unmap:
 	dma_unmap_single(dev, skb_cb->paddr, skb->len, DMA_TO_DEVICE);
 err_credits:
-	if (ep->tx_credit_flow_enabled) {
+	if (credit_flow_enabled) {
 		spin_lock_bh(&htc->tx_lock);
 		ep->tx_credits += credits;
 		ath12k_dbg(ab, ATH12K_DBG_HTC,
@@ -202,23 +204,25 @@ static int ath12k_htc_process_trailer(struct ath12k_htc *htc,
 			break;
 		}
 
-		switch (record->hdr.id) {
-		case ATH12K_HTC_RECORD_CREDITS:
-			len = sizeof(struct ath12k_htc_credit_report);
-			if (record->hdr.len < len) {
-				ath12k_warn(ab, "Credit report too long\n");
-				status = -EINVAL;
+		if (ab->hw_params->credit_flow) {
+			switch (record->hdr.id) {
+			case ATH12K_HTC_RECORD_CREDITS:
+				len = sizeof(struct ath12k_htc_credit_report);
+				if (record->hdr.len < len) {
+					ath12k_warn(ab, "Credit report too long\n");
+					status = -EINVAL;
+					break;
+				}
+				ath12k_htc_process_credit_report(htc,
+								 record->credit_report,
+								 record->hdr.len,
+								 src_eid);
+				break;
+			default:
+				ath12k_warn(ab, "Unhandled record: id:%d length:%d\n",
+					    record->hdr.id, record->hdr.len);
 				break;
 			}
-			ath12k_htc_process_credit_report(htc,
-							 record->credit_report,
-							 record->hdr.len,
-							 src_eid);
-			break;
-		default:
-			ath12k_warn(ab, "Unhandled record: id:%d length:%d\n",
-				    record->hdr.id, record->hdr.len);
-			break;
 		}
 
 		if (status)
@@ -244,6 +248,29 @@ static void ath12k_htc_suspend_complete(struct ath12k_base *ab, bool ack)
 	complete(&ab->htc_suspend);
 }
 
+void ath12k_htc_tx_completion_handler(struct ath12k_base *ab,
+				      struct sk_buff *skb)
+{
+	struct ath12k_htc *htc = &ab->htc;
+	struct ath12k_htc_ep *ep;
+	void (*ep_tx_complete)(struct ath12k_base *, struct sk_buff *);
+	u8 eid;
+
+	eid = ATH12K_SKB_CB(skb)->eid;
+	if (eid >= ATH12K_HTC_EP_COUNT)
+		return;
+
+	ep = &htc->endpoint[eid];
+	spin_lock_bh(&htc->tx_lock);
+	ep_tx_complete = ep->ep_ops.ep_tx_complete;
+	spin_unlock_bh(&htc->tx_lock);
+	if (!ep_tx_complete) {
+		dev_kfree_skb_any(skb);
+		return;
+	}
+	ep_tx_complete(htc->ab, skb);
+}
+
 void ath12k_htc_rx_completion_handler(struct ath12k_base *ab,
 				      struct sk_buff *skb)
 {
@@ -606,6 +633,11 @@ int ath12k_htc_connect_service(struct ath12k_htc *htc,
 		disable_credit_flow_ctrl = true;
 	}
 
+	if (!ab->hw_params->credit_flow) {
+		flags |= ATH12K_HTC_CONN_FLAGS_DISABLE_CREDIT_FLOW_CTRL;
+		disable_credit_flow_ctrl = true;
+	}
+
 	req_msg->flags_len = le32_encode_bits(flags, HTC_SVC_MSG_CONNECTIONFLAGS);
 	req_msg->msg_svc_id |= le32_encode_bits(conn_req->service_id,
 						HTC_SVC_MSG_SERVICE_ID);
@@ -730,7 +762,10 @@ int ath12k_htc_start(struct ath12k_htc *htc)
 	msg->msg_id = le32_encode_bits(ATH12K_HTC_MSG_SETUP_COMPLETE_EX_ID,
 				       HTC_MSG_MESSAGEID);
 
-	ath12k_dbg(ab, ATH12K_DBG_HTC, "HTC is using TX credit flow control\n");
+	if (ab->hw_params->credit_flow)
+		ath12k_dbg(ab, ATH12K_DBG_HTC, "HTC is using TX credit flow control\n");
+	else
+		msg->flags |= ATH12K_GLOBAL_DISABLE_CREDIT_FLOW;
 
 	status = ath12k_htc_send(htc, ATH12K_HTC_EP_0, skb);
 	if (status) {
diff --git a/drivers/net/wireless/ath/ath12k/htc.h b/drivers/net/wireless/ath/ath12k/htc.h
index 7e3dccc..1808996 100644
--- a/drivers/net/wireless/ath/ath12k/htc.h
+++ b/drivers/net/wireless/ath/ath12k/htc.h
@@ -81,6 +81,8 @@ enum ath12k_htc_conn_flag_threshold_level {
 	ATH12K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_ONE_HALF,
 	ATH12K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_THREE_FOURTHS,
 	ATH12K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_UNITY,
+	ATH12K_HTC_CONN_FLAGS_REDUCE_CREDIT_DRIBBLE	    = 0x4,
+	ATH12K_HTC_CONN_FLAGS_DISABLE_CREDIT_FLOW_CTRL	    = 0x8,
 };
 
 #define ATH12K_HTC_CONN_FLAGS_THRESHOLD_LEVEL_MASK	GENMASK(1, 0)
@@ -117,6 +119,8 @@ struct ath12k_htc_conn_svc_resp {
 	__le32 svc_meta_pad;
 } __packed;
 
+#define ATH12K_GLOBAL_DISABLE_CREDIT_FLOW BIT(1)
+
 struct ath12k_htc_setup_complete_extended {
 	__le32 msg_id;
 	__le32 flags;
@@ -312,5 +316,7 @@ int ath12k_htc_send(struct ath12k_htc *htc, enum ath12k_htc_ep_id eid,
 struct sk_buff *ath12k_htc_alloc_skb(struct ath12k_base *ar, int size);
 void ath12k_htc_rx_completion_handler(struct ath12k_base *ar,
 				      struct sk_buff *skb);
+void ath12k_htc_tx_completion_handler(struct ath12k_base *ab,
+				      struct sk_buff *skb);
 
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/hw.c b/drivers/net/wireless/ath/ath12k/hw.c
index 71d65bd..f3c03d3 100644
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -972,6 +972,7 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 					   BIT(CNSS_PCIE_PERST_NO_PULL_V01),
 		
 		.supports_ap_ps = true,
+		.credit_flow = false,
 	},
 	{
 		.name = "qcn9274 hw2.0",
@@ -1029,6 +1030,7 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 		.qmi_cnss_feature_bitmap = BIT(CNSS_QDSS_CFG_MISS_V01),
 
 		.supports_ap_ps = true,
+		.credit_flow = false,
 	},
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index c7831c3..b4b0903 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -192,6 +192,7 @@ struct ath12k_hw_params {
 	u64 qmi_cnss_feature_bitmap;
 
 	bool supports_ap_ps;
+	bool credit_flow;
 };
 
 struct ath12k_hw_ops {
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index e7d4590..ad7ab61 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -507,21 +507,37 @@ int ath12k_wmi_cmd_send(struct ath12k_wmi_pdev *wmi, struct sk_buff *skb,
 {
 	struct ath12k_wmi_base *wmi_sc = wmi->wmi_ab;
 	int ret = -EOPNOTSUPP;
+	struct ath12k_base *ab = wmi_sc->ab;
 
 	might_sleep();
 
-	wait_event_timeout(wmi_sc->tx_credits_wq, ({
-		ret = ath12k_wmi_cmd_send_nowait(wmi, skb, cmd_id);
+	if (ab->hw_params->credit_flow) {
+		wait_event_timeout(wmi_sc->tx_credits_wq, ({
+			ret = ath12k_wmi_cmd_send_nowait(wmi, skb, cmd_id);
 
-		if (ret && test_bit(ATH12K_FLAG_CRASH_FLUSH, &wmi_sc->ab->dev_flags))
-			ret = -ESHUTDOWN;
+			if (ret && test_bit(ATH12K_FLAG_CRASH_FLUSH,
+					    &wmi_sc->ab->dev_flags))
+				ret = -ESHUTDOWN;
+			(ret != -EAGAIN);
+			}), WMI_SEND_TIMEOUT_HZ);
+	} else {
+		wait_event_timeout(wmi->tx_ce_desc_wq, ({
+			ret = ath12k_wmi_cmd_send_nowait(wmi, skb, cmd_id);
+			if (ret && test_bit(ATH12K_FLAG_CRASH_FLUSH,
+			    		    &wmi_sc->ab->dev_flags))
+				ret = -ESHUTDOWN;
 
-		(ret != -EAGAIN);
-	}), WMI_SEND_TIMEOUT_HZ);
+			(ret != -ENOBUFS);
+			}), WMI_SEND_TIMEOUT_HZ);
+	}
 
 	if (ret == -EAGAIN)
 		ath12k_warn(wmi_sc->ab, "wmi command %d timeout\n", cmd_id);
 
+	if (ret == -ENOBUFS)
+		ath12k_warn(wmi_sc->ab, "ce desc not available for wmi command %d\n",
+			    cmd_id);
+
 	return ret;
 }
 
@@ -2514,7 +2530,7 @@ int ath12k_wmi_send_vdev_set_tpc_power(struct ath12k *ar,
                                        u32 vdev_id,
                                        struct ath12k_reg_tpc_power_info *param)
 {
-        struct ath12k_pdev_wmi *wmi = ar->wmi;
+        struct ath12k_wmi_pdev *wmi = ar->wmi;
         struct wmi_vdev_set_tpc_power_cmd *cmd;
         struct wmi_vdev_ch_power_info *ch;
         struct sk_buff *skb;
@@ -3116,7 +3132,7 @@ ath12k_wmi_send_twt_disable_cmd(struct ath12k *ar, u32 pdev_id)
 int ath12k_wmi_send_twt_add_dialog_cmd(struct ath12k *ar,
 				       struct wmi_twt_add_dialog_params *params)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct ath12k_base *ab = wmi->wmi_ab->ab;
 	struct wmi_twt_add_dialog_params_cmd *cmd;
 	struct sk_buff *skb;
@@ -3169,7 +3185,7 @@ int ath12k_wmi_send_twt_add_dialog_cmd(struct ath12k *ar,
 int ath12k_wmi_send_twt_del_dialog_cmd(struct ath12k *ar,
 				       struct wmi_twt_del_dialog_params *params)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct ath12k_base *ab = wmi->wmi_ab->ab;
 	struct wmi_twt_del_dialog_params_cmd *cmd;
 	struct sk_buff *skb;
@@ -3206,7 +3222,7 @@ int ath12k_wmi_send_twt_del_dialog_cmd(struct ath12k *ar,
 int ath12k_wmi_send_twt_pause_dialog_cmd(struct ath12k *ar,
 					 struct wmi_twt_pause_dialog_params *params)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct ath12k_base *ab = wmi->wmi_ab->ab;
 	struct wmi_twt_pause_dialog_params_cmd *cmd;
 	struct sk_buff *skb;
@@ -3244,7 +3260,7 @@ int ath12k_wmi_send_twt_pause_dialog_cmd(struct ath12k *ar,
 int ath12k_wmi_send_twt_resume_dialog_cmd(struct ath12k *ar,
 					  struct wmi_twt_resume_dialog_params *params)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct ath12k_base *ab = wmi->wmi_ab->ab;
 	struct wmi_twt_resume_dialog_params_cmd *cmd;
 	struct sk_buff *skb;
@@ -5991,7 +6007,30 @@ static void ath12k_wmi_op_ep_tx_credits(struct ath12k_base *ab)
 static void ath12k_wmi_htc_tx_complete(struct ath12k_base *ab,
 				       struct sk_buff *skb)
 {
+	struct ath12k_wmi_pdev *wmi = NULL;
+	u32 i;
+	u8 wmi_ep_count;
+	u8 eid;
+
+	eid = ATH12K_SKB_CB(skb)->eid;
 	dev_kfree_skb(skb);
+
+	if (eid >= ATH12K_HTC_EP_COUNT)
+		return;
+
+	wmi_ep_count = ab->htc.wmi_ep_count;
+	if (wmi_ep_count > ab->hw_params->max_radios)
+		return;
+
+	for (i = 0; i < ab->htc.wmi_ep_count; i++) {
+		if (ab->wmi_ab.wmi[i].eid == eid) {
+			wmi = &ab->wmi_ab.wmi[i];
+			break;
+		}
+	}
+
+	if (wmi)
+		wake_up(&wmi->tx_ce_desc_wq);
 }
 
 static bool ath12k_reg_is_world_alpha(char *alpha)
@@ -7751,6 +7790,7 @@ static int ath12k_connect_pdev_htc_service(struct ath12k_base *ab,
 	ab->wmi_ab.wmi_endpoint_id[pdev_idx] = conn_resp.eid;
 	ab->wmi_ab.wmi[pdev_idx].eid = conn_resp.eid;
 	ab->wmi_ab.max_msg_len[pdev_idx] = conn_resp.max_msg_len;
+	init_waitqueue_head(&ab->wmi_ab.wmi[pdev_idx].tx_ce_desc_wq);
 
 	return 0;
 }
@@ -7963,7 +8003,7 @@ void ath12k_wmi_detach(struct ath12k_base *ab)
 int ath12k_wmi_pdev_ap_ps_cmd_send(struct ath12k *ar, u8 pdev_id,
 				   u32 param_value)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_pdev_ap_ps_cmd *cmd;
 	struct sk_buff *skb;
 	int ret;
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index abee08c..7f9c7a2 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -5249,6 +5249,7 @@ struct ath12k_wmi_pdev {
 	enum ath12k_htc_ep_id eid;
 	const struct wmi_peer_flags_map *peer_flags;
 	u32 rx_decap_mode;
+	wait_queue_head_t tx_ce_desc_wq;
 };
 
 struct ath12k_wmi_base {
-- 
2.17.1

