From 7411939aacbb76c3574c800bb001bc6db1064217 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 8 Jun 2022 16:49:01 +0530
Subject: [PATCH] ath12k: Enable monitor interface support

mac80211 enables monitor interface based on the hardware flag
advertised by the driver. Set WANT_MONITOR_VIF hardware  flag
during MAC allocation. Also, add seperate flags for representing
various monitor vdev state machine.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c   |  4 ++
 drivers/net/wireless/ath/ath12k/core.h   |  6 +-
 drivers/net/wireless/ath/ath12k/dp_mon.c |  2 +-
 drivers/net/wireless/ath/ath12k/hw.c     |  2 +-
 drivers/net/wireless/ath/ath12k/mac.c    | 71 ++++++++++++++++--------
 5 files changed, 56 insertions(+), 29 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -814,6 +814,10 @@ static void ath12k_core_restart(struct w
 			     ath12k_mac_tx_mgmt_pending_free, ar);
 		idr_destroy(&ar->txmgmt_idr);
 		wake_up(&ar->txmgmt_empty_waitq);
+
+		ar->monitor_vdev_id = -1;
+		clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
+		clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
 	}
 
 	wake_up(&ab->wmi_ab.tx_credits_wq);
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -202,6 +202,9 @@ enum ath12k_dev_flags {
 
 enum ath12k_monitor_flags {
 	ATH12K_FLAG_MONITOR_ENABLED,
+	MONITOR_VDEV_CREATED,
+	MONITOR_VDEV_STARTED,
+	MONITOR_CONF_ENABLED,
 };
 
 struct ath12k_fw_vdev_ol_stats {
@@ -668,9 +671,6 @@ struct ath12k {
 #endif
 	bool dfs_block_radar_events;
 	struct ath12k_thermal thermal;
-	bool monitor_conf_enabled;
-	bool monitor_vdev_created;
-	bool monitor_started;
 	int monitor_vdev_id;
 	u8 twt_enabled;
 	s8 max_allowed_tx_power;
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -2600,7 +2600,7 @@ int ath12k_dp_mon_process_ring(struct at
 	struct ath12k *ar = ath12k_ab_to_ar(ab, mac_id);
 	int num_buffs_reaped = 0;
 
-	if (!ar->monitor_started)
+	if (!test_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags))
 		num_buffs_reaped = ath12k_dp_mon_rx_process_stats(ar, mac_id,
 								  napi, &budget);
 	else
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -891,7 +891,7 @@ static const struct ath12k_hw_params ath
 		.interface_modes = BIT(NL80211_IFTYPE_STATION) |
 					BIT(NL80211_IFTYPE_AP) |
 					BIT(NL80211_IFTYPE_MESH_POINT),
-		.supports_monitor = false,
+		.supports_monitor = true,
 
 		.idle_ps = false,
 		.cold_boot_calib = false,
@@ -1010,7 +1010,7 @@ static const struct ath12k_hw_params ath
 		.interface_modes = BIT(NL80211_IFTYPE_STATION) |
 					BIT(NL80211_IFTYPE_AP) |
 					BIT(NL80211_IFTYPE_MESH_POINT),
-		.supports_monitor = false,
+		.supports_monitor = true,
 
 		.idle_ps = false,
 		.cold_boot_calib = false,
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1117,7 +1117,7 @@ static int ath12k_mac_monitor_vdev_creat
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	if (ar->monitor_vdev_created)
+	if (test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		return 0;
 
 	if (ar->ab->free_vdev_map == 0) {
@@ -1169,7 +1169,8 @@ static int ath12k_mac_monitor_vdev_creat
 	ar->allocated_vdev_map |= 1LL << ar->monitor_vdev_id;
 	ar->ab->free_vdev_map &= ~(1LL << ar->monitor_vdev_id);
 	ar->num_created_vdevs++;
-	ar->monitor_vdev_created = true;
+	set_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
+
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac monitor vdev %d created\n",
 		   ar->monitor_vdev_id);
 
@@ -1183,7 +1184,7 @@ static int ath12k_mac_monitor_vdev_delet
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	if (!ar->monitor_vdev_created)
+	if (!test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		return 0;
 
 	reinit_completion(&ar->vdev_delete_done);
@@ -1206,7 +1207,7 @@ static int ath12k_mac_monitor_vdev_delet
 			   ar->monitor_vdev_id);
 		ar->num_created_vdevs--;
 		ar->monitor_vdev_id = -1;
-		ar->monitor_vdev_created = false;
+		clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
 	}
 
 	return ret;
@@ -1229,7 +1230,7 @@ static int ath12k_mac_monitor_start(stru
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	if (ar->monitor_started)
+	if (test_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags))
 		return 0;
 
 	ieee80211_iter_chan_contexts_atomic(ar->hw,
@@ -1245,9 +1246,16 @@ static int ath12k_mac_monitor_start(stru
 		return ret;
 	}
 
-	ar->monitor_started = true;
-	ar->num_started_vdevs++;
 	ret = ath12k_dp_tx_htt_monitor_mode_ring_config(ar, false);
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "fail to set monitor filter: %d\n", ret);
+		return ret;
+	}
+
+	set_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
+	ar->num_started_vdevs++;
+
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac monitor started ret %d\n", ret);
 
 	return ret;
@@ -1259,7 +1267,7 @@ static int ath12k_mac_monitor_stop(struc
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	if (!ar->monitor_started)
+	if (!test_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags))
 		return 0;
 
 	ret = ath12k_mac_monitor_vdev_stop(ar);
@@ -1268,7 +1276,7 @@ static int ath12k_mac_monitor_stop(struc
 		return ret;
 	}
 
-	ar->monitor_started = false;
+	clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
 	ar->num_started_vdevs--;
 	ret = ath12k_dp_tx_htt_monitor_mode_ring_config(ar, true);
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac monitor stopped ret %d\n", ret);
@@ -1284,10 +1292,12 @@ static int ath12k_mac_op_config(struct i
 	mutex_lock(&ar->conf_mutex);
 
 	if (changed & IEEE80211_CONF_CHANGE_MONITOR) {
-		ar->monitor_conf_enabled = conf->flags & IEEE80211_CONF_MONITOR;
-		if (ar->monitor_conf_enabled) {
-			if (ar->monitor_vdev_created)
+		if (conf->flags & IEEE80211_CONF_MONITOR) {
+			set_bit(MONITOR_CONF_ENABLED, &ar->monitor_flags);
+			if (test_bit(MONITOR_VDEV_CREATED,
+				     &ar->monitor_flags))
 				goto exit;
+
 			ret = ath12k_mac_monitor_vdev_create(ar);
 			if (ret)
 				goto exit;
@@ -1295,8 +1305,11 @@ static int ath12k_mac_op_config(struct i
 			if (ret)
 				goto err_mon_del;
 		} else {
-			if (!ar->monitor_vdev_created)
+			clear_bit(MONITOR_CONF_ENABLED, &ar->monitor_flags);
+			if (!test_bit(MONITOR_VDEV_CREATED,
+				      &ar->monitor_flags))
 				goto exit;
+
 			ret = ath12k_mac_monitor_stop(ar);
 			if (ret)
 				goto exit;
@@ -3461,7 +3474,7 @@ static int ath12k_mac_config_obss_pd(str
 
 	/* Set and enable SRG/non-SRG OBSS PD Threshold */
 	param_id = WMI_PDEV_PARAM_SET_CMD_OBSS_PD_THRESHOLD;
-	if (test_bit(ATH12K_FLAG_MONITOR_ENABLED, &ar->monitor_flags)) {
+	if (test_bit(MONITOR_CONF_ENABLED, &ar->monitor_flags)) {
 		ret = ath12k_wmi_pdev_set_param(ar, param_id, 0, pdev_id);
 		if (ret)
 			ath12k_warn(ar->ab,
@@ -6914,6 +6927,9 @@ static int ath12k_mac_op_add_interface(s
 			goto err_peer_del;
 		}
 		break;
+	case WMI_VDEV_TYPE_MONITOR:
+		set_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
+		break;
 	default:
 		break;
 	}
@@ -6936,7 +6952,8 @@ static int ath12k_mac_op_add_interface(s
 
 	ath12k_mac_ap_ps_recalc(ar);
 
-	if (vif->type != NL80211_IFTYPE_MONITOR && ar->monitor_conf_enabled)
+	if (vif->type != NL80211_IFTYPE_MONITOR &&
+	    test_bit(MONITOR_CONF_ENABLED, &ar->monitor_flags))
 		ath12k_mac_monitor_vdev_create(ar);
 
 	ret = ath12k_debugfs_add_interface(arvif);
@@ -7053,8 +7070,9 @@ static void ath12k_mac_op_remove_interfa
 
 	if (arvif->vdev_type == WMI_VDEV_TYPE_MONITOR) {
 		ar->monitor_vdev_id = -1;
-		ar->monitor_vdev_created = false;
-	} else if (ar->monitor_vdev_created && !ar->monitor_started) {
+		clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
+	} else if (test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags) &&
+		   !test_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags)) {
 		ret = ath12k_mac_monitor_vdev_delete(ar);
 	}
 
@@ -7083,7 +7101,7 @@ err_vdev_del:
 	/* Recalc txpower for remaining vdev */
 	ath12k_mac_txpower_recalc(ar);
 	ath12k_mac_ap_ps_recalc(ar);
-	clear_bit(ATH12K_FLAG_MONITOR_ENABLED, &ar->monitor_flags);
+	clear_bit(MONITOR_CONF_ENABLED, &ar->monitor_flags);
 
 	ath12k_debugfs_remove_interface(arvif);
 
@@ -7580,7 +7598,8 @@ ath12k_mac_update_vif_chan(struct ath12k
 	}
 
 	/* Restart the internal monitor vdev on new channel */
-	if (!monitor_vif && ar->monitor_vdev_created) {
+	if (!monitor_vif &&
+	    test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags)) {
 		if (!ath12k_mac_monitor_stop(ar))
 			ath12k_mac_monitor_start(ar);
 	}
@@ -8276,7 +8295,7 @@ ath12k_mac_op_assign_vif_chanctx(struct
 
 	if (ab->hw_params->vdev_start_delay &&
 	    (arvif->vdev_type == WMI_VDEV_TYPE_AP ||
-	    arvif->vdev_type == WMI_VDEV_TYPE_MONITOR)) {
+	     arvif->vdev_type == WMI_VDEV_TYPE_MONITOR)) {
 		param.vdev_id = arvif->vdev_id;
 		param.peer_type = WMI_PEER_TYPE_DEFAULT;
 		param.peer_addr = ar->mac_addr;
@@ -8305,7 +8324,8 @@ ath12k_mac_op_assign_vif_chanctx(struct
 		goto out;
 	}
 
-	if (arvif->vdev_type != WMI_VDEV_TYPE_MONITOR && ar->monitor_vdev_created)
+	if (arvif->vdev_type != WMI_VDEV_TYPE_MONITOR &&
+	    test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		ath12k_mac_monitor_start(ar);
 
 	arvif->is_started = true;
@@ -8364,7 +8384,8 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 		ath12k_wmi_vdev_down(ar, arvif->vdev_id);
 
 	if (arvif->vdev_type != WMI_VDEV_TYPE_MONITOR &&
-	    ar->num_started_vdevs == 1 && ar->monitor_vdev_created)
+	    ar->num_started_vdevs == 1 &&
+	    test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		ath12k_mac_monitor_stop(ar);
 
 	mutex_unlock(&ar->conf_mutex);
@@ -9810,6 +9831,7 @@ static int __ath12k_mac_register(struct
 	ieee80211_hw_set(ar->hw, SPECTRUM_MGMT);
 	ieee80211_hw_set(ar->hw, CONNECTION_MONITOR);
 	ieee80211_hw_set(ar->hw, SUPPORTS_PER_STA_GTK);
+	ieee80211_hw_set(ar->hw, WANT_MONITOR_VIF);
 	ieee80211_hw_set(ar->hw, CHANCTX_STA_CSA);
 	ieee80211_hw_set(ar->hw, QUEUE_CONTROL);
 	ieee80211_hw_set(ar->hw, SUPPORTS_TX_FRAG);
@@ -10053,7 +10075,9 @@ int ath12k_mac_allocate(struct ath12k_ba
 
 		INIT_WORK(&ar->wmi_mgmt_tx_work, ath12k_mgmt_over_wmi_tx_work);
 		skb_queue_head_init(&ar->wmi_mgmt_tx_queue);
-		clear_bit(ATH12K_FLAG_MONITOR_ENABLED, &ar->monitor_flags);
+		clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
+		ar->monitor_vdev_id = -1;
+		clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
 	}
 
 	return 0;
