From 6447e9a1d06316d1cb3a82f77c9f33f1b3445398 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Sun, 19 Jun 2022 19:09:58 -0700
Subject: [PATCH] ath12k: Add support for recording EHT Tx, Rx rate info from
 frames

Add support to record the MCS, GI, NSS related info from the frames

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/hal_rx.h      |  2 +
 drivers/net/wireless/ath/ath12k/core.h        |  4 ++
 drivers/net/wireless/ath/ath12k/debugfs_sta.c | 37 +++++++++++++++++--
 drivers/net/wireless/ath/ath12k/dp_mon.c      | 14 ++++++-
 drivers/net/wireless/ath/ath12k/dp_rx.c       |  5 +++
 drivers/net/wireless/ath/ath12k/hal_rx.h      |  1 +
 6 files changed, 58 insertions(+), 5 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/hal_rx.h b/drivers/net/wireless/ath/ath11k/hal_rx.h
index 61bd841..1367eb4 100644
--- a/drivers/net/wireless/ath/ath11k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath11k/hal_rx.h
@@ -45,6 +45,7 @@ enum hal_rx_bw {
 	HAL_RX_BW_40MHZ,
 	HAL_RX_BW_80MHZ,
 	HAL_RX_BW_160MHZ,
+	HAL_RX_BW_320MHZ,
 	HAL_RX_BW_MAX,
 };
 
@@ -54,6 +55,7 @@ enum hal_rx_preamble {
 	HAL_RX_PREAMBLE_11N,
 	HAL_RX_PREAMBLE_11AC,
 	HAL_RX_PREAMBLE_11AX,
+	HAL_RX_PREAMBLE_11BE,
 	HAL_RX_PREAMBLE_MAX,
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index b79c0db..172a495 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -269,6 +269,7 @@ struct ath12k_vif_iter {
 #define HAL_RX_MAX_MCS_HT	31
 #define HAL_RX_MAX_MCS_VHT	9
 #define HAL_RX_MAX_MCS_HE	11
+#define HAL_RX_MAX_MCS_BE	15
 #define HAL_RX_MAX_NSS		8
 #define HAL_RX_MAX_NUM_LEGACY_RATES 12
 #define ATH12K_RX_RATE_TABLE_11AX_NUM	576
@@ -279,6 +280,7 @@ struct ath12k_rx_peer_rate_stats {
 	u64 ht_mcs_count[HAL_RX_MAX_MCS_HT + 1];
 	u64 vht_mcs_count[HAL_RX_MAX_MCS_VHT + 1];
 	u64 he_mcs_count[HAL_RX_MAX_MCS_HE + 1];
+	u64 be_mcs_count[HAL_RX_MAX_MCS_BE + 1];
 	u64 nss_count[HAL_RX_MAX_NSS];
 	u64 bw_count[HAL_RX_BW_MAX];
 	u64 gi_count[HAL_RX_GI_MAX];
@@ -313,6 +315,7 @@ struct ath12k_rx_peer_stats {
 };
 
 #define ATH12K_HE_MCS_NUM       12
+#define ATH12K_EHT_MCS_NUM	16
 #define ATH12K_VHT_MCS_NUM      10
 #define ATH12K_BW_NUM           5
 #define ATH12K_NSS_NUM          4
@@ -367,6 +370,7 @@ struct ath12k_htt_data_stats {
 	u64 ht[ATH12K_COUNTER_TYPE_MAX][ATH12K_HT_MCS_NUM];
 	u64 vht[ATH12K_COUNTER_TYPE_MAX][ATH12K_VHT_MCS_NUM];
 	u64 he[ATH12K_COUNTER_TYPE_MAX][ATH12K_HE_MCS_NUM];
+	u64 eht[ATH12K_COUNTER_TYPE_MAX][ATH12K_EHT_MCS_NUM];
 	u64 bw[ATH12K_COUNTER_TYPE_MAX][ATH12K_BW_NUM];
 	u64 nss[ATH12K_COUNTER_TYPE_MAX][ATH12K_NSS_NUM];
 	u64 gi[ATH12K_COUNTER_TYPE_MAX][ATH12K_GI_NUM];
diff --git a/drivers/net/wireless/ath/ath12k/debugfs_sta.c b/drivers/net/wireless/ath/ath12k/debugfs_sta.c
index f04ce82..d10dc67 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_sta.c
@@ -32,7 +32,14 @@ void ath12k_debugfs_sta_add_tx_stats(struct ath12k_sta *arsta,
 
 #define STATS_OP_FMT(name) tx_stats->stats[ATH12K_STATS_TYPE_##name]
 
-	if (txrate->flags & RATE_INFO_FLAGS_HE_MCS) {
+	if (txrate->flags & RATE_INFO_FLAGS_EHT_MCS) {
+		STATS_OP_FMT(SUCC).eht[0][mcs] += peer_stats->succ_bytes;
+		STATS_OP_FMT(SUCC).eht[1][mcs] += peer_stats->succ_pkts;
+		STATS_OP_FMT(FAIL).eht[0][mcs] += peer_stats->failed_bytes;
+		STATS_OP_FMT(FAIL).eht[1][mcs] += peer_stats->failed_pkts;
+		STATS_OP_FMT(RETRY).eht[0][mcs] += peer_stats->retry_bytes;
+		STATS_OP_FMT(RETRY).eht[1][mcs] += peer_stats->retry_pkts;
+	} else if (txrate->flags & RATE_INFO_FLAGS_HE_MCS) {
 		STATS_OP_FMT(SUCC).he[0][mcs] += peer_stats->succ_bytes;
 		STATS_OP_FMT(SUCC).he[1][mcs] += peer_stats->succ_pkts;
 		STATS_OP_FMT(FAIL).he[0][mcs] += peer_stats->failed_bytes;
@@ -67,7 +74,8 @@ void ath12k_debugfs_sta_add_tx_stats(struct ath12k_sta *arsta,
 	ppdu_type = peer_stats->ppdu_type;
 	if ((ppdu_type == HTT_PPDU_STATS_PPDU_TYPE_MU_OFDMA ||
 	     ppdu_type == HTT_PPDU_STATS_PPDU_TYPE_MU_MIMO_OFDMA) &&
-	     (txrate->flags & RATE_INFO_FLAGS_HE_MCS)) {
+	     (txrate->flags & RATE_INFO_FLAGS_HE_MCS ||
+	      txrate->flags & RATE_INFO_FLAGS_EHT_MCS)) {
 		ru_type = peer_stats->ru_tones;
 
 		if (ru_type <= NL80211_RATE_INFO_HE_RU_ALLOC_996) {
@@ -106,7 +114,12 @@ void ath12k_debugfs_sta_add_tx_stats(struct ath12k_sta *arsta,
 	if (peer_stats->is_ampdu) {
 		tx_stats->ba_fails += peer_stats->ba_fails;
 
-		if (txrate->flags & RATE_INFO_FLAGS_HE_MCS) {
+		if (txrate->flags & RATE_INFO_FLAGS_EHT_MCS) {
+			STATS_OP_FMT(AMPDU).eht[0][mcs] +=
+			peer_stats->succ_bytes + peer_stats->retry_bytes;
+			STATS_OP_FMT(AMPDU).eht[1][mcs] +=
+			peer_stats->succ_pkts + peer_stats->retry_pkts;
+		} else if (txrate->flags & RATE_INFO_FLAGS_HE_MCS) {
 			STATS_OP_FMT(AMPDU).he[0][mcs] +=
 			peer_stats->succ_bytes + peer_stats->retry_bytes;
 			STATS_OP_FMT(AMPDU).he[1][mcs] +=
@@ -214,6 +227,14 @@ static ssize_t ath12k_dbg_sta_dump_tx_stats(struct file *file,
 					 str_name[k],
 					 str[j]);
 			len += scnprintf(buf + len, size - len, "==========\n");
+			len += scnprintf(buf + len, size - len,
+					 " EHT MCS %s\n\t",
+					 str[j]);
+			for (i = 0; i < ATH12K_EHT_MCS_NUM; i++)
+				len += scnprintf(buf + len, size - len,
+						 "%llu ",
+						 stats->eht[j][i]);
+			len += scnprintf(buf + len, size - len, "\n");
 			len += scnprintf(buf + len, size - len,
 					 " HE MCS %s\n\t",
 					 str[j]);
@@ -414,6 +435,11 @@ static ssize_t ath12k_dbg_sta_dump_rx_stats(struct file *file,
 			 rx_stats->rx_duration);
 
 	len += scnprintf(buf + len, size - len, "\nRX success packet stats:\n");
+	len += scnprintf(buf + len, size - len, "\nEHT packet stats:\n");
+	for (i = 0; i <= HAL_RX_MAX_MCS_BE; i++)
+		len += scnprintf(buf + len, size - len, "MCS %d: %llu%s", i,
+				 rx_stats->pkt_stats.be_mcs_count[i],
+				 (i + 1) % 7 ? "\t" : "\n");
 	len += scnprintf(buf + len, size - len, "\nHE packet stats:\n");
 	for (i = 0; i <= HAL_RX_MAX_MCS_HE; i++)
 		len += scnprintf(buf + len, size - len, "MCS %d: %llu%s", i,
@@ -458,6 +484,11 @@ static ssize_t ath12k_dbg_sta_dump_rx_stats(struct file *file,
 				(i + 1) % (he_rates_avail ? 12 : 8) ? "\t" : "\n");
 
 	len += scnprintf(buf + len, size - len, "\nRX success byte stats:\n");
+	len += scnprintf(buf + len, size - len, "\nEHT byte stats:\n");
+	for (i = 0; i <= HAL_RX_MAX_MCS_BE; i++)
+		len += scnprintf(buf + len, size - len, "MCS %d: %llu%s", i,
+				 rx_stats->byte_stats.be_mcs_count[i],
+				 (i + 1) % 7 ? "\t" : "\n");
 	len += scnprintf(buf + len, size - len, "\nHE byte stats:\n");
 	for (i = 0; i <= HAL_RX_MAX_MCS_HE; i++)
 		len += scnprintf(buf + len, size - len, "MCS %d: %llu%s", i,
diff --git a/drivers/net/wireless/ath/ath12k/dp_mon.c b/drivers/net/wireless/ath/ath12k/dp_mon.c
index c5345fd..a8b6b58 100644
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -3274,8 +3274,8 @@ ath12k_dp_mon_rx_update_peer_rate_table_stats(struct ath12k_rx_peer_stats *rx_st
 	u32 bw_idx = ppdu_info->bw;
 	u32 gi_idx = ppdu_info->gi;
 
-	if ((mcs_idx > HAL_RX_MAX_MCS_HE) || (nss_idx >= HAL_RX_MAX_NSS) ||
-	    (bw_idx >= HAL_RX_BW_MAX) || (gi_idx >= HAL_RX_GI_MAX)) {
+	if (mcs_idx > HAL_RX_MAX_MCS_BE || nss_idx >= HAL_RX_MAX_NSS ||
+	    bw_idx >= HAL_RX_BW_MAX || gi_idx >= HAL_RX_GI_MAX) {
 		return;
 	}
 
@@ -3287,6 +3287,10 @@ ath12k_dp_mon_rx_update_peer_rate_table_stats(struct ath12k_rx_peer_stats *rx_st
 		gi_idx = ath12k_he_gi_to_nl80211_he_gi(ppdu_info->gi);
 		rate_idx = mcs_idx * 12 + 12 * 12 * nss_idx;
 		rate_idx += bw_idx * 3 + gi_idx;
+	} else if (ppdu_info->preamble_type == HAL_RX_PREAMBLE_11BE) {
+		gi_idx = ath12k_he_gi_to_nl80211_he_gi(ppdu_info->gi);
+		rate_idx = mcs_idx * 12 + 12 * 12 * nss_idx;
+		rate_idx += bw_idx * 3 + gi_idx;
 	} else {
 		return;
 	}
@@ -3384,6 +3388,12 @@ static void ath12k_dp_mon_rx_update_peer_su_stats(struct ath12k *ar,
 		rx_stats->byte_stats.he_mcs_count[ppdu_info->mcs] += ppdu_info->mpdu_len;
 	}
 
+	if (ppdu_info->preamble_type == HAL_RX_PREAMBLE_11BE &&
+	    ppdu_info->mcs <= HAL_RX_MAX_MCS_BE) {
+		rx_stats->pkt_stats.be_mcs_count[ppdu_info->mcs] += num_msdu;
+		rx_stats->byte_stats.be_mcs_count[ppdu_info->mcs] += ppdu_info->mpdu_len;
+	}
+
 	if ((ppdu_info->preamble_type == HAL_RX_PREAMBLE_11A ||
 	     ppdu_info->preamble_type == HAL_RX_PREAMBLE_11B) &&
 	     ppdu_info->rate < HAL_RX_LEGACY_RATE_INVALID) {
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index a2dac25..fa73530 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1381,6 +1381,11 @@ ath12k_update_per_peer_tx_stats(struct ath12k *ar,
 		return;
 	}
 
+	if (flags == WMI_RATE_PREAMBLE_EHT && mcs > ATH12K_EHT_MCS_MAX) {
+		ath12k_warn(ab, "Invalid EHT mcs %d peer stats",  mcs);
+		return;
+	}
+
 	if (flags == WMI_RATE_PREAMBLE_VHT && mcs > ATH12K_VHT_MCS_MAX) {
 		ath12k_warn(ab, "Invalid VHT mcs %d peer stats",  mcs);
 		return;
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.h b/drivers/net/wireless/ath/ath12k/hal_rx.h
index 6d53066..d368ddb 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -71,6 +71,7 @@ enum hal_rx_preamble {
 	HAL_RX_PREAMBLE_11N,
 	HAL_RX_PREAMBLE_11AC,
 	HAL_RX_PREAMBLE_11AX,
+	HAL_RX_PREAMBLE_11BE = 6,
 	HAL_RX_PREAMBLE_MAX,
 };
 
-- 
2.17.1

