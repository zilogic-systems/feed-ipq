From bfc38b7e3cfe388f5a00289d93d36004c2f03d33 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Thu, 2 Jun 2022 11:02:27 +0530
Subject: [PATCH] ath12k: remove hw log level

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.c | 23 ++++++++++---
 drivers/net/wireless/ath/ath12k/mac.c   | 46 ++++++++++++++++++++++---
 2 files changed, 60 insertions(+), 9 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/debug.c b/drivers/net/wireless/ath/ath12k/debug.c
index 6e33313..f7859b5 100644
--- a/drivers/net/wireless/ath/ath12k/debug.c
+++ b/drivers/net/wireless/ath/ath12k/debug.c
@@ -17,7 +17,10 @@ void ath12k_info(struct ath12k_base *ab, const char *fmt, ...)
 
 	va_start(args, fmt);
 	vaf.va = &args;
-	dev_info(ab->dev, "%pV", &vaf);
+	if (ab)
+		dev_info(ab->dev, "%pV", &vaf);
+	else
+		pr_info("ath12k: %pV", &vaf);
 	/* TODO: Trace the log */
 	va_end(args);
 }
@@ -31,7 +34,10 @@ void ath12k_err(struct ath12k_base *ab, const char *fmt, ...)
 
 	va_start(args, fmt);
 	vaf.va = &args;
-	dev_err(ab->dev, "%pV", &vaf);
+	if (ab)
+		dev_err(ab->dev, "%pV", &vaf);
+	else
+		pr_err("ath12k: %pV", &vaf);
 	/* TODO: Trace the log */
 	va_end(args);
 }
@@ -45,7 +51,10 @@ void ath12k_warn(struct ath12k_base *ab, const char *fmt, ...)
 
 	va_start(args, fmt);
 	vaf.va = &args;
-	dev_warn_ratelimited(ab->dev, "%pV", &vaf);
+	if (ab)
+		dev_warn_ratelimited(ab->dev, "%pV", &vaf);
+	else
+		pr_warn_ratelimited("ath12k: %pV", &vaf);
 	/* TODO: Trace the log */
 	va_end(args);
 }
@@ -63,8 +72,12 @@ void __ath12k_dbg(struct ath12k_base *ab, enum ath12k_debug_mask mask,
 	vaf.fmt = fmt;
 	vaf.va = &args;
 
-	if (ath12k_debug_mask & mask)
-		dev_dbg(ab->dev, "%pV", &vaf);
+	if (ath12k_debug_mask & mask) {
+		if (ab)
+			dev_dbg(ab->dev, "%pV", &vaf);
+		else
+			pr_devel("ath12k: %pV", &vaf);
+	}
 
 	/* TODO: trace log */
 
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 12fb0d5..a0e2224 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4036,6 +4036,10 @@ static void ath12k_mac_op_bss_info_changed(struct ieee80211_hw *hw,
 
 	mutex_lock(&ah->conf_mutex);
 	if (!arvif->is_created) {
+		ath12k_info(NULL,
+			    "bss info parameter changes %llx cached to apply after vdev create on channel assign\n",
+			    changed);
+
 		arvif->cache.bss_conf_changed |= changed;
 		mutex_unlock(&ah->conf_mutex);
 		return;
@@ -4307,6 +4311,7 @@ static int ath12k_mac_op_hw_scan(struct ieee80211_hw *hw,
 	 */
 	ar = ath12k_mac_select_scan_device(hw, vif, hw_req);
 	if (!ar) {
+		ath12k_err(NULL, "unable to select device for scan\n");
 		mutex_unlock(&ah->conf_mutex);
 		return -EINVAL;
 	}
@@ -4423,6 +4428,7 @@ static void ath12k_mac_op_cancel_hw_scan(struct ieee80211_hw *hw,
 
 	mutex_lock(&ah->conf_mutex);
 	if (!arvif->is_created) {
+		ath12k_err(NULL, "unable to select device to cancel scan\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -4705,6 +4711,7 @@ static int ath12k_mac_op_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd,
 		arvif->cache.key_conf.key = key;
 		arvif->cache.key_conf.changed = true;
 
+		ath12k_info(NULL, "set key param cached since vif not assign to radio\n");
 		mutex_unlock(&ah->conf_mutex);
 
 		/* STA should be NULL before vdev create else need to warn */
@@ -5412,6 +5419,7 @@ static int ath12k_mac_op_sta_state(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device to set sta state\n");
 		mutex_unlock(&ah->conf_mutex);
 		return -EINVAL;
 	}
@@ -5569,6 +5577,7 @@ static int ath12k_mac_op_sta_set_txpwr(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device to set sta txpwr\n");
 		ret = -EINVAL;
 		goto out;
 	}
@@ -5634,6 +5643,7 @@ static void ath12k_mac_op_sta_rc_update(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device for sta update\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -5825,6 +5835,8 @@ static int ath12k_mac_op_conf_tx(struct ieee80211_hw *hw,
 	 */
 	mutex_lock(&ah->conf_mutex);
 	if (!arvif->is_created) {
+		ath12k_dbg(NULL, ATH12K_DBG_MAC,
+			   "tx queue params cached since vif is not assigned to radio\n");
 		arvif->cache.tx_conf.changed = true;
 		arvif->cache.tx_conf.ac = ac;
 		arvif->cache.tx_conf.tx_queue_params = *params;
@@ -7245,6 +7257,8 @@ static void ath12k_mac_op_update_vif_offload(struct ieee80211_hw *hw,
 	 */
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_info(NULL,
+			    "unable to determine device to apply vif encap/decap flags, setting will be applied on channel assignment\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -7537,8 +7551,11 @@ static struct ath12k *ath12k_mac_assign_vif_to_vdev(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		goto out;
+	}
 
 	ab = ar->ab;
 
@@ -7660,6 +7677,8 @@ static void ath12k_mac_op_remove_interface(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_dbg(NULL, ATH12K_DBG_MAC,
+			   "unable to determine device to remove interface\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -7817,6 +7836,7 @@ static int ath12k_mac_op_ampdu_action(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device to set ampdu params\n");
 		mutex_unlock(&ah->conf_mutex);
 		return -EPERM;
 	}
@@ -7855,8 +7875,11 @@ static int ath12k_mac_op_add_chanctx(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		return -EINVAL;
+	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "mac chanctx add freq %u width %d ptr %pK\n",
@@ -7883,8 +7906,11 @@ static void ath12k_mac_op_remove_chanctx(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		return;
+	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "mac chanctx remove freq %u width %d ptr %pK\n",
@@ -8342,6 +8368,7 @@ static void ath12k_mac_op_change_chanctx(struct ieee80211_hw *hw,
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device for the passed channel ctx\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -8942,6 +8969,8 @@ ath12k_mac_op_assign_vif_chanctx(struct ieee80211_hw *hw,
 	} else {
 		ar = ath12k_get_ar_by_ctx(hw, ctx);
 		if (!ar) {
+			ath12k_err(NULL,
+				   "unable to determine device for the passed channel ctx\n");
 			mutex_unlock(&ah->conf_mutex);
 			return -EINVAL;
 		}
@@ -9084,6 +9113,8 @@ ath12k_mac_op_unassign_vif_chanctx(struct ieee80211_hw *hw,
 	 */
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device to stop vdev during channel unassign\n");
 		mutex_unlock(&ah->conf_mutex);
 		WARN_ON(1);
 		return;
@@ -9153,8 +9184,11 @@ ath12k_mac_op_switch_vif_chanctx(struct ieee80211_hw *hw,
 	}
 
 	ar = ath12k_get_ar_by_ctx(hw, vifs->old_ctx);
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		return -EINVAL;
+	}
 
 	mutex_lock(&ar->conf_mutex);
 
@@ -9281,6 +9315,8 @@ static void ath12k_mac_op_flush(struct ieee80211_hw *hw, struct ieee80211_vif *v
 	} else {
 		ar = ath12k_get_ar_by_vif(hw, vif);
 		if (!ar) {
+			ath12k_err(NULL,
+				   "unable to determine device for tx flush\n");
 			goto out;
 		}
 		ath12k_mac_flush(ar);
@@ -9884,6 +9920,8 @@ ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device to set bitrates, configs can be applied after device bringup\n");
 		ret = -EPERM;
 		goto out;
 	}
-- 
2.17.1

