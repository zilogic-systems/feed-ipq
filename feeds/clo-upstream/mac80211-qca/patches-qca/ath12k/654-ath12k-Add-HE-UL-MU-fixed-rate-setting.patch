From 01c698e66e1b44ddbe633feb7ea5de62150e3aa8 Mon Sep 17 00:00:00 2001
From: Muna Sinada <msinada@codeaurora.org>
Date: Wed, 23 Sep 2020 05:55:02 -0700
Subject: [PATCH] ath12k:Add HE UL MU fixed rate setting

HE UL MU fixed rate is informed to HE STA by HE Basic Trigger frame.
The added code is reusing parts of the existing code path used for HE
fixed rate, this includes nl80211 definitions, policies and parsing
code required to pass HE UL MU fixed rate settings.

Signed-off-by: Muna Sinada <msinada@codeaurora.org>
Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 97 ++++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/wmi.h |  1 +
 2 files changed, 89 insertions(+), 9 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index f261f57..b2ea5c7 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4774,6 +4774,20 @@ ath12k_mac_bitrate_mask_num_he_rates(struct ath12k *ar,
 	return num_rates;
 }
 
+static int
+ath12k_mac_bitrate_mask_num_he_ul_rates(struct ath12k *ar,
+				    enum nl80211_band band,
+				    const struct cfg80211_bitrate_mask *mask)
+{
+	int num_rates = 0;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(mask->control[band].he_ul_mcs); i++)
+		num_rates += hweight16(mask->control[band].he_ul_mcs[i]);
+
+	return num_rates;
+}
+
 static int
 ath12k_mac_bitrate_mask_num_eht_rates(struct ath12k *ar,
 				      enum nl80211_band band,
@@ -9697,10 +9711,11 @@ static int ath12k_mac_set_rate_params(struct ath12k_vif *arvif,
 				      u32 rate, u8 nss, u8 sgi, u8 ldpc,
 				      u8 he_gi, u8 he_ltf, bool he_fixed_rate,
 				      u8 eht_gi, u8 eht_ltf,
-				      bool eht_fixed_rate)
+				      bool eht_fixed_rate,
+				      int he_ul_rate, u8 he_ul_nss)
 {
 	struct ath12k *ar = arvif->ar;
-	u32 vdev_param;
+	u32 vdev_param, rate_code;
 	int ret;
 
 	lockdep_assert_held(&ar->conf_mutex);
@@ -9777,6 +9792,21 @@ static int ath12k_mac_set_rate_params(struct ath12k_vif *arvif,
 		}
 	}
 
+	if ((he_ul_rate < 0) || !he_ul_nss)
+		return 0;
+
+	rate_code = ATH12K_HW_RATE_CODE(he_ul_rate, he_ul_nss - 1,
+					WMI_RATE_PREAMBLE_HE);
+
+	vdev_param = WMI_VDEV_PARAM_UL_FIXED_RATE;
+	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+					    vdev_param, rate_code);
+
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to set HE UL Fixed Rate:%d, error:%d\n",
+			    he_ul_rate, ret);
+	}
+
 	return 0;
 }
 
@@ -9830,6 +9860,21 @@ ath12k_mac_he_mcs_range_present(struct ath12k *ar,
 	return true;
 }
 
+static bool
+ath12k_mac_he_ul_mcs_present(struct ath12k *ar,
+				enum nl80211_band band,
+				const struct cfg80211_bitrate_mask *mask)
+{
+	int i;
+
+	for (i = 0; i < NL80211_HE_NSS_MAX; i++) {
+		if (mask->control[band].he_ul_mcs[i])
+			return true;
+	}
+
+	return false;
+}
+
 static bool
 ath12k_mac_eht_mcs_range_present(struct ath12k *ar,
 				 enum nl80211_band band,
@@ -9904,14 +9949,16 @@ ath12k_mac_validate_fixed_rate_settings(struct ath12k *ar, enum nl80211_band ban
 					const struct cfg80211_bitrate_mask *mask)
 {
 	bool eht_fixed_rate = false, he_fixed_rate = false, vht_fixed_rate = false;
+	bool he_ul_fixed_rate = false;
 	struct ath12k_peer *peer, *tmp;
-	const u16 *vht_mcs_mask, *he_mcs_mask, *eht_mcs_mask;
-	u8 vht_nss, he_nss, eht_nss;
+	const u16 *vht_mcs_mask, *he_mcs_mask, *eht_mcs_mask, *he_ul_mcs_mask;
+	u8 vht_nss, he_nss, eht_nss, he_ul_nss;
 	bool ret = true;
 
 	vht_mcs_mask = mask->control[band].vht_mcs;
 	he_mcs_mask = mask->control[band].he_mcs;
 	eht_mcs_mask = mask->control[band].eht_mcs;
+	he_ul_mcs_mask = mask->control[band].he_ul_mcs;
 
 	if (ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask) == 1)
 		vht_fixed_rate = true;
@@ -9922,12 +9969,16 @@ ath12k_mac_validate_fixed_rate_settings(struct ath12k *ar, enum nl80211_band ban
 	if (ath12k_mac_bitrate_mask_num_eht_rates(ar, band, mask) == 1)
 		eht_fixed_rate = true;
 
-	if (!vht_fixed_rate && !he_fixed_rate && !eht_fixed_rate)
+	if (ath12k_mac_bitrate_mask_num_he_ul_rates(ar, band, mask) == 1)
+		he_ul_fixed_rate = true;
+
+	if (!vht_fixed_rate && !he_fixed_rate && !eht_fixed_rate && !he_ul_fixed_rate)
 		return true;
 
 	vht_nss = ath12k_mac_max_vht_nss(vht_mcs_mask);
 	he_nss =  ath12k_mac_max_he_nss(he_mcs_mask);
 	eht_nss = ath12k_mac_max_eht_nss(eht_mcs_mask);
+	he_ul_nss =  ath12k_mac_max_he_nss(he_ul_mcs_mask);
 
 	rcu_read_lock();
 	spin_lock_bh(&ar->ab->base_lock);
@@ -9948,6 +9999,14 @@ ath12k_mac_validate_fixed_rate_settings(struct ath12k *ar, enum nl80211_band ban
 				ret = false;
 				goto exit;
 			}
+			/* TODO:
+			*	check when UL is valid
+			*/
+			if (he_ul_fixed_rate && (!peer->sta->deflink.he_cap.has_he ||
+					peer->sta->deflink.rx_nss < he_ul_nss)) {
+				ret = false;
+				goto exit;
+			}
 		}
 	}
 exit:
@@ -9970,17 +10029,19 @@ ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
 	const u16 *vht_mcs_mask;
 	const u16 *he_mcs_mask;
 	const u16 *eht_mcs_mask;
+	const u16 *he_ul_mcs_mask;
 	u8 he_ltf = 0;
 	u8 he_gi = 0;
 	u8 eht_ltf = 0;
 	u8 eht_gi = 0;
 	u32 rate;
-	u8 nss;
+	u8 nss, he_ul_nss = 0;
 	u8 sgi;
 	u8 ldpc;
 	int single_nss;
-	int ret;
+	int ret, i;
 	int num_rates;
+	int he_ul_rate = -1;
 	bool he_fixed_rate = false;
 	bool eht_fixed_rate = false;
 
@@ -10001,6 +10062,7 @@ ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
 	ht_mcs_mask = mask->control[band].ht_mcs;
 	vht_mcs_mask = mask->control[band].vht_mcs;
 	he_mcs_mask = mask->control[band].he_mcs;
+	he_ul_mcs_mask = mask->control[band].he_ul_mcs;
 	eht_mcs_mask = mask->control[band].eht_mcs;
 	ldpc = !!(ar->ht_cap_info & WMI_HT_CAP_LDPC);
 
@@ -10016,6 +10078,23 @@ ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
 	eht_gi = mask->control[band].eht_gi;
 	eht_ltf = mask->control[band].eht_ltf;
 
+	for (i = 0; i < ARRAY_SIZE(mask->control[band].he_ul_mcs); i++) {
+		if (hweight16(mask->control[band].he_ul_mcs[i]) == 1) {
+			he_ul_nss = i + 1;
+			he_ul_rate = ffs((int)
+					mask->control[band].he_ul_mcs[i]) - 1;
+			break;
+		}
+	}
+	num_rates = ath12k_mac_bitrate_mask_num_he_ul_rates(ar, band,
+			mask);
+	if (ath12k_mac_he_ul_mcs_present(ar, band, mask) &&
+			num_rates != 1) {
+		ath12k_warn(ar->ab,
+				"Setting HE UL MCS Fixed Rate range is not supported\n");
+		return -EINVAL;
+	}
+
 	/* mac80211 doesn't support sending a fixed HT/VHT MCS alone, rather it
 	 * requires passing at least one of used basic rates along with them.
 	 * Fixed rate setting across different preambles(legacy, HT, VHT) is
@@ -10134,9 +10213,9 @@ ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
 
 	ret = ath12k_mac_set_rate_params(arvif, rate, nss, sgi, ldpc, he_gi,
 					 he_ltf, he_fixed_rate, eht_gi, eht_ltf,
-					 eht_fixed_rate);
+					 eht_fixed_rate, he_ul_rate, he_ul_nss);
 	if (ret) {
-		ath12k_warn(ar->ab, "failed to set rate params on vdev %i: %d\n",
+		ath12k_warn(ar->ab, "failed to set fixed rate params on vdev %i: %d\n",
 			    arvif->vdev_id, ret);
 	}
 
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 890a5e7..b78cf2e 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -1231,6 +1231,7 @@ enum wmi_tlv_vdev_param {
 	WMI_VDEV_PARAM_BA_MODE = 0x7e,
 	WMI_VDEV_PARAM_AUTORATE_MISC_CFG = 0x80,
 	WMI_VDEV_PARAM_SET_HE_SOUNDING_MODE = 0x87,
+	WMI_VDEV_PARAM_UL_FIXED_RATE,
 	WMI_VDEV_PARAM_6GHZ_PARAMS = 0x99,
 	WMI_VDEV_PARAM_PROTOTYPE = 0x8000,
 	WMI_VDEV_PARAM_BSS_COLOR,
-- 
2.17.1

