From 333622d65f01a2f417c4fa0f2b3b47698443b670 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Thu, 28 Jul 2022 13:08:28 +0530
Subject: [PATCH] ath12k: fix scheduling while atomic in beacon_tx_status_event

ath12k_mac_setup_bcn_tmpl is directly called from
ath12k_wmi_tlv_op_rx while handling beacon_tx_status_event.
The issue arises, ince ath12k_mac_setup_bcn_tmpl will call
ath12k_wmi_cmd_send which should be called from non-atomic
context as it might go for sleep while
ath12k_wmi_event handler is atomic.

Updated the beacon_tx_status_event handling in workqueue to
avoid scheduling issue.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 25 ++++++++++++++++++++++++-
 2 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 9b64e34..da273d7 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -287,6 +287,7 @@ struct ath12k_vif {
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_twt;
 #endif /* CPTCFG_ATH12K_DEBUGFS */
+	struct work_struct update_bcn_template_work;
 };
 
 struct ath12k_vif_iter {
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index b2ea5c7..1a3ef21 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1612,6 +1612,7 @@ static int ath12k_mac_setup_bcn_tmpl(struct ath12k_vif *arvif)
 void ath12k_mac_bcn_tx_event(struct ath12k_vif *arvif)
 {
 	struct ieee80211_vif *vif = arvif->vif;
+	struct ath12k *ar = arvif->ar;
 
 	if (!vif->bss_conf.color_change_active && !arvif->bcca_zero_sent)
 		return;
@@ -1626,7 +1627,7 @@ void ath12k_mac_bcn_tx_event(struct ath12k_vif *arvif)
 
 	if (vif->bss_conf.color_change_active)
 		ieee80211_beacon_update_cntdwn(vif);
-	ath12k_mac_setup_bcn_tmpl(arvif);
+	ieee80211_queue_work(ar->ah->hw, &arvif->update_bcn_template_work);
 }
 
 static void ath12k_control_beaconing(struct ath12k_vif *arvif,
@@ -7367,6 +7368,25 @@ static void ath12k_mac_op_update_vif_offload(struct ieee80211_hw *hw,
 	mutex_unlock(&ah->conf_mutex);
 }
 
+static void ath12k_update_bcn_template_work(struct work_struct *work)
+{
+	struct ath12k_vif *arvif = container_of(work, struct ath12k_vif,
+					update_bcn_template_work);
+	struct ath12k *ar = arvif->ar;
+	int ret = -EINVAL;
+
+	if (!ar)
+		return;
+
+	mutex_lock(&ar->conf_mutex);
+	if (arvif->is_created)
+		ret = ath12k_mac_setup_bcn_tmpl(arvif);
+	mutex_unlock(&ar->conf_mutex);
+	if (ret)
+		ath12k_warn(ar->ab, "failed to update bcn tmpl for vdev_id: %d ret: %d\n",
+				arvif->vdev_id, ret);
+}
+
 static int ath12k_mac_vdev_create(struct ath12k *ar, struct ieee80211_vif *vif)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -7714,6 +7734,7 @@ static int ath12k_mac_op_add_interface(struct ieee80211_hw *hw,
 	INIT_LIST_HEAD(&arvif->list);
 	arvif->key_cipher = INVALID_CIPHER;
 
+	INIT_WORK(&arvif->update_bcn_template_work, ath12k_update_bcn_template_work);
 	for (i = 0; i < ARRAY_SIZE(arvif->bitrate_mask.control); i++) {
 		arvif->bitrate_mask.control[i].legacy = 0xffffffff;
 		arvif->bitrate_mask.control[i].gi = NL80211_TXRATE_FORCE_SGI;
@@ -7771,6 +7792,8 @@ static void ath12k_mac_op_remove_interface(struct ieee80211_hw *hw,
 	struct ath12k_base *ab;
 	int ret;
 
+	cancel_work_sync(&arvif->update_bcn_template_work);
+
 	mutex_lock(&ah->conf_mutex);
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
-- 
2.17.1

