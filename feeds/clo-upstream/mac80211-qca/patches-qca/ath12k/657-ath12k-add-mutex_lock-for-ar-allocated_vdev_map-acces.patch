From 22a1c59c47e1a9e4963056c8170ae2841d9aac1f Mon Sep 17 00:00:00 2001
From: Sathishkumar Muruganandam <murugana@codeaurora.org>
Date: Tue, 27 Apr 2021 19:14:25 +0530
Subject: [PATCH] ath12k: add mutex_lock for ar->allocated_vdev_map access

There is a race between ath11k_mac_op_remove_interface() clearing
vdev_id bit in ar->allocated_vdev_map for vdev deletion and
ath11k_mgmt_over_wmi_tx_work() checking ar->allocated_vdev_map after
skb_dequeue(&ar->wmi_mgmt_tx_queue).
Fix this by adding mutex_lock in ath11k_mgmt_over_wmi_tx_work().

Signed-off-by: Sathishkumar Muruganandam <murugana@codeaurora.org>
Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 90fe7f5..3294c11 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -6840,6 +6840,7 @@ static void ath12k_mgmt_over_wmi_tx_work(struct work_struct *work)
 		}
 
 		arvif = ath12k_vif_to_arvif(skb_cb->vif);
+		mutex_lock(&ar->conf_mutex);
 		if (ar->allocated_vdev_map & (1LL << arvif->vdev_id) &&
 		    arvif->is_started) {
 			ret = ath12k_mac_mgmt_tx_wmi(ar, arvif, skb);
@@ -6855,6 +6856,7 @@ static void ath12k_mgmt_over_wmi_tx_work(struct work_struct *work)
 				    arvif->is_started);
 			ath12k_mgmt_over_wmi_tx_drop(ar, skb);
 		}
+		mutex_unlock(&ar->conf_mutex);
 	}
 }
 
-- 
2.17.1

