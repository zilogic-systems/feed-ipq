From bfb8798829d66a7ed33bb49e9b4f2872650db732 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Mon, 15 Aug 2022 12:55:12 +0530
Subject: [PATCH] ath12k: Avoid calling mutex lock in mac_op_sta_rc_update

sta_rc_update will be called within rcu_read_lock from
mac80211. In driver, mutex_lock is added to protect ar
derived from ah which can go to sleep inside a atomic
function. This leads to "Scheduling while atomic"
issue during bandwidth or smps changes.

Modified to fetch ar from arvif directly instead of
ah.

Removed mutex_unlock from bss_info_changed ops as it
will be taken care by the caller.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 9 +++------
 1 file changed, 3 insertions(+), 6 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index fc95c7b..954f729 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4027,8 +4027,6 @@ static void ath12k_mac_bss_info_changed(struct ath12k *ar,
 		ar->ap_ps_enabled = info->ap_ps_enable;
 		ath12k_mac_ap_ps_recalc(ar);
 	}
-
-	mutex_unlock(&ar->conf_mutex);
 }
 
 static void ath12k_mac_op_bss_info_changed(struct ieee80211_hw *hw,
@@ -5740,12 +5738,12 @@ static void ath12k_mac_op_sta_rc_update(struct ieee80211_hw *hw,
 	struct ath12k_peer *peer;
 	u32 bw, smps;
 
-	mutex_lock(&ah->conf_mutex);
 
-	ar = ath12k_get_ar_by_vif(hw, vif);
+	if (arvif->is_created)
+		ar = arvif->ar;
+
 	if (!ar) {
 		ath12k_err(NULL, "unable to determine device for sta update\n");
-		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
 
@@ -5805,7 +5803,6 @@ static void ath12k_mac_op_sta_rc_update(struct ieee80211_hw *hw,
 	arsta->changed |= changed;
 
 	spin_unlock_bh(&ar->data_lock);
-	mutex_unlock(&ah->conf_mutex);
 
 	ieee80211_queue_work(hw, &arsta->update_wk);
 }
-- 
2.17.1

