From acb50c271002f2f5775a2da841dd8ad9a44e80aa Mon Sep 17 00:00:00 2001
From: Ganesh Babu Jothiram <quic_gjothira@quicinc.com>
Date: Mon, 19 Sep 2022 16:32:29 +0530
Subject: [PATCH] ath12k: Add support for cold boot calibartion

In case of cold boot calibration support enabled,
   The firmware mode set to cold boot calibration initially and
upon completion of cold boot calibration OR timeout,
The firmware power reseted and mode set to Mission Mode.
   Memory allocated on request from firmware for CALDB via QMI to
support cold boot calibration.

Signed-off-by: Ganesh Babu Jothiram <quic_gjothira@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/coredump.c | 23 +++++++++-----
 drivers/net/wireless/ath/ath12k/pci.c      |  2 ++
 drivers/net/wireless/ath/ath12k/qmi.c      | 35 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/qmi.h      |  2 ++
 4 files changed, 54 insertions(+), 8 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/coredump.c b/drivers/net/wireless/ath/ath12k/coredump.c
index 94610ed..5aa6e7f 100644
--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -162,7 +162,7 @@ void ath12k_coredump_download_rddm(struct ath12k_base *ab)
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
 		if (ab->qmi.target_mem[i].type == HOST_DDR_REGION_TYPE ||
-		    ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE ||
+		    (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE && ath12k_cold_boot_cal && ab->hw_params->cold_boot_calib) ||
 		    ab->qmi.target_mem[i].type == M3_DUMP_REGION_TYPE ||
 		    ab->qmi.target_mem[i].type == PAGEABLE_MEM_REGION_TYPE ||
 		    ab->qmi.target_mem[i].type == MLO_GLOBAL_MEM_REGION_TYPE)
@@ -204,13 +204,20 @@ void ath12k_coredump_download_rddm(struct ath12k_base *ab)
 	}
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
-		if (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE) {
-			if (ath12k_cold_boot_cal ||
-			    ab->hw_params->cold_boot_calib) {
-				/* Add separate segment type for CALDB*/
-				skip_count++;
-				continue;
-			}
+		if (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE &&
+		    ath12k_cold_boot_cal &&
+		    ab->hw_params->cold_boot_calib) {
+			seg_info->len = ab->qmi.target_mem[i].size;
+			seg_info->addr = ab->qmi.target_mem[i].paddr;
+			seg_info->vaddr = ab->qmi.target_mem[i].v.ioaddr;
+			seg_info->type = ATH12K_FW_CALDB;
+			ath12k_info(ab,
+				    "seg vaddr is %px len is 0x%x type %d\n",
+				    seg_info->vaddr,
+				    seg_info->len,
+				    seg_info->type);
+			seg_info++;
+			continue;
 		}
 
 		if (ab->qmi.target_mem[i].type == MLO_GLOBAL_MEM_REGION_TYPE) {
diff --git a/drivers/net/wireless/ath/ath12k/pci.c b/drivers/net/wireless/ath/ath12k/pci.c
index 4197c4a..726b706 100644
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -1414,6 +1414,8 @@ static int ath12k_pci_probe(struct pci_dev *pdev,
 		goto err_free_irq;
 	}
 
+	ath12k_qmi_fwreset_from_cold_boot(ab);
+
 	return 0;
 
 err_free_irq:
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index bb06fa7..1ac053b 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -8,6 +8,7 @@
 
 #include "qmi.h"
 #include "core.h"
+#include "hif.h"
 #include "debug.h"
 #include "coredump.h"
 #include <linux/of.h>
@@ -3954,6 +3955,40 @@ int ath12k_qmi_firmware_start(struct ath12k_base *ab,
 	return 0;
 }
 
+int ath12k_qmi_fwreset_from_cold_boot(struct ath12k_base *ab)
+{
+	int timeout;
+
+	if (ath12k_cold_boot_cal == 0 ||
+	    ab->hw_params->cold_boot_calib == 0){
+		ath12k_info(ab, "Cold boot cal is not supported/enabled\n");
+		return 0;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "wait for cold boot done\n");
+
+	timeout = wait_event_timeout(ab->qmi.cold_boot_waitq,
+				     (ab->qmi.cal_done  == 1),
+				     ATH12K_COLD_BOOT_FW_RESET_DELAY);
+	if (timeout <= 0) {
+		ath12k_warn(ab, "Coldboot Calibration timed out\n");
+		/*set cal_timeout to switch to mission mode on firware reset*/
+		ab->qmi.cal_timeout = 1;
+	}
+
+	/* reset the firmware */
+	ath12k_info(ab, "power down to restart firmware in mission mode\n");
+	ath12k_qmi_firmware_stop(ab);
+	ath12k_hif_power_down(ab);
+	ath12k_info(ab, "power up to restart firmware in mission mode\n");
+	/* reset host fixed mem off to zero */
+	ab->host_ddr_fixed_mem_off = 0;
+	ath12k_hif_power_up(ab);
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "exit wait for cold boot done\n");
+	return 0;
+}
+EXPORT_SYMBOL(ath12k_qmi_fwreset_from_cold_boot);
+
 int ath12k_qmi_m3_dump_upload_done_ind_send(struct ath12k_base *ab,
 					    u32 pdev_id, int status)
 {
diff --git a/drivers/net/wireless/ath/ath12k/qmi.h b/drivers/net/wireless/ath/ath12k/qmi.h
index 112aea0..b61573b 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -162,6 +162,7 @@ struct ath12k_qmi {
 	u32 target_mem_mode;
 	bool target_mem_delayed;
 	u8 cal_done;
+	u8 cal_timeout;
 	struct target_info target;
 	struct m3_mem_region m3_mem;
 	unsigned int service_ins_id;
@@ -750,6 +751,7 @@ int ath12k_qmi_init_service(struct ath12k_base *ab);
 
 int ath12k_send_qdss_trace_mode_req(struct ath12k_base *ab,
 				    enum qmi_wlanfw_qdss_trace_mode_enum_v01 mode);
+int ath12k_qmi_fwreset_from_cold_boot(struct ath12k_base *ab);
 int ath12k_enable_fwlog(struct ath12k_base *ab);
 int ath12k_qmi_m3_dump_upload_done_ind_send(struct ath12k_base *ab,
 					    u32 pdev_id, int status);
-- 
2.17.1

