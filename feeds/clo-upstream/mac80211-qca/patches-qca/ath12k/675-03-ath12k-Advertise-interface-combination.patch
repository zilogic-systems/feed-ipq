From f423bffea524f4ec729b2e4e36b4ffb335135f2f Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Sat, 8 Oct 2022 14:14:03 +0530
Subject: [PATCH] ath12k: Advertise interface combination

Advertise interface combination for each of those
underlying radios in a wiphy during mac registeration.

Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 106 ++++++++++++++++++++++++++
 1 file changed, 106 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 98b0dd7..c97b098 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11232,7 +11232,15 @@ static void __ath12k_mac_unregister(struct ath12k *ar)
 	__ath12k_mac_pre_unregister(ar);
 	__ath12k_mac_post_unregister(ar);
 }
+static void ath12k_mac_cleanup_chans(struct ath12k_hw *ah)
+{
+	int i;
+	for (i = 0; i < ah->num_radio; i++)
+		kfree(ah->hw->wiphy->hw_chans[i]);
 
+	kfree(ah->hw->wiphy->iface_combinations[0].iface_hw_list);
+	kfree(ah->hw->wiphy->hw_chans);
+}
 static void ath12k_mac_hw_unregister(struct ath12k_hw *ah)
 {
 	struct ath12k *ar;
@@ -11252,6 +11260,8 @@ static void ath12k_mac_hw_unregister(struct ath12k_hw *ah)
 		__ath12k_mac_post_unregister(ar);
 		ar++;
 	}
+	if ( ah->num_radio > 1 )
+		ath12k_mac_cleanup_chans(ah);
 
 	kfree(ah->hw->wiphy->iface_combinations[0].limits);
 	kfree(ah->hw->wiphy->iface_combinations);
@@ -11325,7 +11335,94 @@ static int __ath12k_mac_register(struct ath12k *ar)
 
 	return 0;
 }
+static int ath12k_setup_per_hw_if_comb(struct ath12k_hw *ah) {
+	struct ieee80211_iface_per_hw *if_per_hw;
+	struct ieee80211_hw *hw = ah->hw;
+	struct ieee80211_iface_combination *if_comb = hw->wiphy->iface_combinations;
+	int i;
+
+	if_per_hw  = kzalloc(sizeof(struct ieee80211_iface_per_hw) * ah->num_radio,
+			 GFP_KERNEL);
+	if (!if_per_hw)
+		return -ENOMEM;
+	for (i = 0; i < ah->num_radio; i++) {
+		struct ieee80211_iface_per_hw *per_hw_if = &if_per_hw[i];
+		per_hw_if->hw_chans_idx = i;
+		per_hw_if->num_different_channels = if_comb->num_different_channels;
+		per_hw_if->max_interfaces = if_comb->max_interfaces;
+		per_hw_if->limits = if_comb->limits;
+		per_hw_if->n_limits = if_comb->n_limits;
+	}
+
+	if_comb->iface_hw_list = if_per_hw;
+	if_comb->n_hw_list = hw->wiphy->num_hw;
+
+	ath12k_info(NULL, "Interface combination for %d hardwares is advertised ",
+		   if_comb->n_hw_list);
+
+	return 0;
+
+
+
+}
+static struct ieee80211_chans_per_hw *
+ath12k_setup_per_hw_chan(struct ath12k *ar)
+{
+	struct ieee80211_chans_per_hw *chans;
+	struct ieee80211_supported_band *band;
+	struct ath12k_pdev *pdev = ar->pdev;
+	int chan_sz;
+
+	if (pdev->cap.supported_bands & WMI_HOST_WLAN_2G_CAP) {
+		band = &ar->mac.sbands[NL80211_BAND_2GHZ];
+	} else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP && !ar->supports_6ghz) {
+		 band = &ar->mac.sbands[NL80211_BAND_5GHZ];
+	} else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP && ar->supports_6ghz) {
+		band = &ar->mac.sbands[NL80211_BAND_6GHZ];
+	}
+
+	chan_sz = struct_size(chans, chans, band->n_channels);
+	chans = kzalloc(chan_sz, GFP_KERNEL);
+	if (!chans)
+		return NULL;
+	memcpy(chans->chans, band->channels, sizeof(struct ieee80211_channel) * band->n_channels);
+
+	chans->n_chans = band->n_channels;
+	return chans;
+
+
+}
+static int ath12k_alloc_per_hw_chans(struct ath12k_hw *ah)
+{
+	struct ieee80211_chans_per_hw **chans;
+	struct ath12k *ar;
+	struct ieee80211_hw *hw = ah->hw;
+	int i;
+	ar = ah->radio;
 
+	chans = kzalloc(sizeof(*chans) * ah->num_radio,
+			GFP_KERNEL);
+	if (!chans)
+		return -ENOMEM;
+
+	for (i = 0; i < ah->num_radio; i++) {
+		chans[i] = ath12k_setup_per_hw_chan(ar);
+		if (!chans[i])
+			goto err_free;
+		ar++;
+
+	}
+	hw->wiphy->hw_chans = chans;
+	hw->wiphy->num_hw = ah->num_radio;
+	return 0;
+
+err_free:
+	for (i = i - 1; i >= 0; i--)
+		kfree(chans[i]);
+	kfree(chans);
+
+	return -ENOMEM;
+}
 static int ath12k_mac_hw_register(struct ath12k_hw *ah)
 {
 	struct ieee80211_hw *hw;
@@ -11401,6 +11498,15 @@ static int ath12k_mac_hw_register(struct ath12k_hw *ah)
 		goto err_cleanup;
 	}
 
+        if (ah->num_radio > 1) {
+                ret = ath12k_alloc_per_hw_chans(ah);
+                if (ret)
+                        goto err_cleanup;
+                ret = ath12k_setup_per_hw_if_comb(ah);
+                if (ret)
+                        goto err_cleanup;
+        }
+
 	SET_IEEE80211_PERM_ADDR(hw, ab_dflt->mac_addr);
 	SET_IEEE80211_DEV(hw, ab_dflt->dev);
 
-- 
2.17.1

