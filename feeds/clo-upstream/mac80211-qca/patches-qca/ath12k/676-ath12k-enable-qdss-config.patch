From bdc0cf3b4483735b47aca18c6d9f91f6149f556c Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Fri, 11 Nov 2022 08:33:34 +0530
Subject: [PATCH] ath12k: enable qdss config

QDSS config should be enabled by default.

Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/coredump.c | 85 +++++++++++++---------
 drivers/net/wireless/ath/ath12k/coredump.h |  3 +
 drivers/net/wireless/ath/ath12k/hw.c       |  3 -
 drivers/net/wireless/ath/ath12k/qmi.c      |  9 +--
 4 files changed, 53 insertions(+), 47 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -146,6 +146,36 @@ void ath12k_coredump_build_inline(struct
 	vfree(file_data);
 }
 
+static enum ath12k_fw_crash_dump_type
+ath12k_coredump_get_dump_type(u32 mem_region_type)
+{
+	enum ath12k_fw_crash_dump_type dump_type;
+
+	/* note: only add the supported memory type,
+		which is used to calculate the rem_seg_cnt */
+	switch(mem_region_type) {
+	case HOST_DDR_REGION_TYPE:
+		dump_type = ATH12K_FW_REMOTE_MEM_DATA;
+		break;
+	case CALDB_MEM_REGION_TYPE:
+		dump_type = ATH12K_FW_CALDB;
+		break;
+	case M3_DUMP_REGION_TYPE:
+		dump_type = ATH12K_FW_M3_DUMP;
+		break;
+	case PAGEABLE_MEM_REGION_TYPE:
+		dump_type = ATH12K_FW_PAGEABLE_DATA;
+		break;
+	case MLO_GLOBAL_MEM_REGION_TYPE:
+		dump_type = ATH12K_FW_MLO_GLOBAL;
+		break;
+	default:
+		dump_type = ATH12K_FW_DUMP_TYPE_MAX;
+		break;
+	}
+
+	return dump_type;
+}
 void ath12k_coredump_download_rddm(struct ath12k_base *ab)
 {
 	struct ath12k_pci *ar_pci = (struct ath12k_pci *)ab->drv_priv;
@@ -154,6 +184,7 @@ void ath12k_coredump_download_rddm(struc
 	struct ath12k_dump_segment *segment, *seg_info;
 	int i, rem_seg_cnt = 0, len, num_seg, seg_sz;
 	int skip_count = 0;
+	enum ath12k_fw_crash_dump_type mem_type;
 
 	ath12k_mhi_coredump(mhi_ctrl, false);
 
@@ -204,50 +235,31 @@ void ath12k_coredump_download_rddm(struc
 	}
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
-		if (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE &&
-		    ath12k_cold_boot_cal &&
-		    ab->hw_params->cold_boot_calib) {
-			seg_info->len = ab->qmi.target_mem[i].size;
-			seg_info->addr = ab->qmi.target_mem[i].paddr;
-			seg_info->vaddr = ab->qmi.target_mem[i].v.ioaddr;
-			seg_info->type = ATH12K_FW_CALDB;
-			ath12k_info(ab,
-				    "seg vaddr is %px len is 0x%x type %d\n",
-				    seg_info->vaddr,
-				    seg_info->len,
-				    seg_info->type);
-			seg_info++;
+		mem_type = ath12k_coredump_get_dump_type(ab->qmi.target_mem[i].type);
+		if(mem_type == ATH12K_FW_DUMP_TYPE_MAX) {
+			ath12k_info(ab, "target mem region type %d not supported", ab->qmi.target_mem[i].type);
 			continue;
 		}
 
-		if (ab->qmi.target_mem[i].type == MLO_GLOBAL_MEM_REGION_TYPE) {
-			seg_info->len = ab->qmi.target_mem[i].size;
-			seg_info->addr = ab->qmi.target_mem[i].paddr;
-			seg_info->vaddr = ab->qmi.target_mem[i].v.ioaddr;
-			seg_info->type = ATH12K_FW_MLO_GLOBAL;
-			seg_info++;
-			continue;
-		}
-		if (ab->qmi.target_mem[i].type == PAGEABLE_MEM_REGION_TYPE) {
-			seg_info->len = ab->qmi.target_mem[i].size;
-			seg_info->addr = ab->qmi.target_mem[i].paddr;
-			seg_info->vaddr = ab->qmi.target_mem[i].v.ioaddr;
-			seg_info->type = ATH12K_FW_PAGEABLE_DATA;
-			seg_info++;
-			continue;
-		}
-		if (ab->qmi.target_mem[i].type == M3_DUMP_REGION_TYPE) {
-			seg_info->len = ab->qmi.target_mem[i].size;
-			seg_info->addr = ab->qmi.target_mem[i].paddr;
-			seg_info->vaddr = ab->qmi.target_mem[i].v.ioaddr;
-			seg_info->type = ATH12K_FW_M3_DUMP;
-			seg_info++;
+		if (mem_type == ATH12K_FW_CALDB &&
+		    !(ath12k_cold_boot_cal && ab->hw_params->cold_boot_calib))
 			continue;
+
+		if (!ab->qmi.target_mem[i].paddr) {
+			skip_count++;
+			ath12k_info(ab, "Skipping mem region type %d", ab->qmi.target_mem[i].type);
+ 			continue;
 		}
+
 		seg_info->len = ab->qmi.target_mem[i].size;
 		seg_info->addr = ab->qmi.target_mem[i].paddr;
-		seg_info->vaddr = ab->qmi.target_mem[i].v.addr;
-		seg_info->type = ATH12K_FW_REMOTE_MEM_DATA;
+		seg_info->vaddr = ab->qmi.target_mem[i].v.ioaddr;
+		seg_info->type = mem_type;
+		ath12k_info(ab,
+		    "seg vaddr is %px len is 0x%x type %d\n",
+			    seg_info->vaddr,
+			    seg_info->len,
+			    seg_info->type);
 		seg_info++;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/coredump.h
+++ b/drivers/net/wireless/ath/ath12k/coredump.h
@@ -19,6 +19,9 @@ enum ath12k_fw_crash_dump_type {
 	ATH12K_FW_CALDB,
         ATH12K_FW_AFC,
         ATH12K_FW_MLO_GLOBAL,
+
+	/* keep last */
+	ATH12K_FW_DUMP_TYPE_MAX,
 };
 
 struct ath12k_dump_segment {
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -4165,13 +4165,6 @@ static int ath12k_qmi_event_mem_request(
 		return ret;
 	}
 
-	/* BRINGUP: QDSS should be removed */
-	ret = ath12k_qmi_send_qdss_config(ab);
-	if (ret < 0) {
-		ath12k_warn(ab, "Failed to download QDSS config to FW: %d\n", ret);
-		return ret;
-	}
-
 	return ret;
 }
 
