From fcd5cb82dd5bb7c397391164831cdee616e6c7a5 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Fri, 28 Oct 2022 11:16:25 +0530
Subject: [PATCH] wifi: ath12k: Refactor Tx/Rx Descriptor procedure

Rx Descriptor are placed in different location in the PPT based on the chip id.
so that the cookie is different for each SoC Rx descriptor which help in
processing partner chip Rxdma buffer to primary UMAC REO ring.

Ex:
	   SoC0			   SoC1

	----------		----------
	|        |		|        |
	|   Tx   |		|   Tx   |
	----------		----------
	|   Rx   |		|   Rx   |
	| (SoC0) |		| (SoC0) |
	----------		----------
	|   Rx   |		|   Rx   |
	| (SoC1) |		| (SoC1) |
	----------		----------


Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c | 50 +++++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/dp.h |  1 +
 2 files changed, 47 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1388,6 +1388,7 @@ static inline void *ath12k_dp_cc_get_des
 struct ath12k_rx_desc_info *ath12k_dp_get_rx_desc(struct ath12k_base *ab,
 						  u32 cookie)
 {
+	struct ath12k_dp *dp = &ab->dp;
 	struct ath12k_rx_desc_info **desc_addr_ptr;
 	u16 ppt_idx, spt_idx;
 
@@ -1398,6 +1399,11 @@ struct ath12k_rx_desc_info *ath12k_dp_ge
 	    spt_idx > ATH12K_MAX_SPT_ENTRIES)
 		return NULL;
 
+	if (WARN_ON(spt_idx < dp->rx_spt_base))
+		return NULL;
+
+	spt_idx = spt_idx - dp->rx_spt_base;
+
 	desc_addr_ptr = ath12k_dp_cc_get_desc_addr_ptr(ab, ppt_idx, spt_idx);
 
 	return *desc_addr_ptr;
@@ -1422,6 +1432,36 @@ struct ath12k_tx_desc_info *ath12k_dp_ge
 	return *desc_addr_ptr;
 }
 
+static void ath12k_dp_tx_cmem_init(struct ath12k_base *ab, struct ath12k_dp *dp)
+{
+	u32 cmem_base;
+	int i;
+
+	cmem_base = ab->qmi.dev_mem[ATH12K_QMI_DEVMEM_CMEM_INDEX].start;
+
+	for (i = 0; i < ATH12K_NUM_TX_SPT_PAGES; i++) {
+		/* Write to PPT in CMEM */
+		ath12k_hif_write32(ab, cmem_base + ATH12K_PPT_ADDR_OFFSET(i),
+				   dp->spt_info[i].paddr >> ATH12K_SPT_4K_ALIGN_OFFSET);
+	}
+}
+
+static void ath12k_dp_rx_cmem_init(struct ath12k_base *ab, struct ath12k_dp *dp)
+{
+	u32 cmem_base;
+	int i;
+
+	cmem_base = ab->qmi.dev_mem[ATH12K_QMI_DEVMEM_CMEM_INDEX].start;
+	cmem_base += ATH12K_PPT_ADDR_OFFSET(dp->rx_spt_base);
+
+	for (i = ATH12K_RX_SPT_PAGE_OFFSET;
+	     i < (ATH12K_RX_SPT_PAGE_OFFSET + ATH12K_NUM_RX_SPT_PAGES); i++) {
+		/* Write to PPT in CMEM */
+		ath12k_hif_write32(ab, cmem_base + ATH12K_PPT_ADDR_OFFSET(i),
+				   dp->spt_info[i].paddr >> ATH12K_SPT_4K_ALIGN_OFFSET);
+	}
+}
+
 static int ath12k_dp_cc_desc_init(struct ath12k_base *ab)
 {
 	struct ath12k_dp *dp = &ab->dp;
@@ -1443,6 +1483,7 @@ static int ath12k_dp_cc_desc_init(struct
 		}
 
 		dp->spt_info->rxbaddr[i] = &rx_descs[0];
+		ppt_idx = dp->rx_spt_base + ATH12K_RX_SPT_PAGE_OFFSET + i;
 
 		for (j = 0; j < ATH12K_MAX_SPT_ENTRIES; j++) {
 			rx_descs[j].cookie = ath12k_dp_cc_cookie_gen(i, j);
@@ -1518,6 +1559,7 @@ static int ath12k_dp_cc_init(struct ath1
 		return -ENOMEM;
 	}
 
+	dp->rx_spt_base = ab->chip_id * ATH12K_NUM_RX_SPT_PAGES;
 	cmem_base = ab->qmi.dev_mem[ATH12K_QMI_DEVMEM_CMEM_INDEX].start;
 
 	for (i = 0; i < dp->num_spt_pages; i++) {
@@ -1536,12 +1578,12 @@ static int ath12k_dp_cc_init(struct ath1
 			ret = -EINVAL;
 			goto free;
 		}
-
-		/* Write to PPT in CMEM */
-		ath12k_hif_write32(ab, cmem_base + ATH12K_PPT_ADDR_OFFSET(i),
-				   dp->spt_info[i].paddr >> ATH12K_SPT_4K_ALIGN_OFFSET);
 	}
 
+	ath12k_dp_tx_cmem_init(ab, dp);
+
+	ath12k_dp_rx_cmem_init(ab, dp);
+
 	ret = ath12k_dp_cc_desc_init(ab);
 	if (ret) {
 		ath12k_warn(ab, "HW CC desc init failed %d", ret);
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -344,6 +344,7 @@ struct ath12k_dp {
 	struct ath12k_hp_update_timer tx_ring_timer[DP_TCL_NUM_RING_MAX];
 	struct ath12k_spt_info *spt_info;
 	u32 num_spt_pages;
+	u32 rx_spt_base;
 	struct list_head rx_desc_free_list;
 	struct list_head rx_desc_used_list;
 	/* protects the free and used desc list */
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3180,7 +3180,7 @@ try_again:
 		if (!desc_info) {
 			desc_info = ath12k_dp_get_rx_desc(ab, cookie);
 			if (!desc_info) {
-				ath12k_warn(ab, "Invalid cookie in manual desc retrieval");
+				ath12k_warn(ab, "Invalid cookie in manual desc retrieval cookie 0x%x", cookie);
 				continue;
 			}
 		}
@@ -3902,7 +3902,7 @@ ath12k_dp_process_rx_err_buf(struct ath1
 	if (!desc_info) {
 		desc_info = ath12k_dp_get_rx_desc(ab, cookie);
 		if (!desc_info) {
-			ath12k_warn(ab, "Invalid cookie in manual desc retrieval");
+			ath12k_warn(ab, "Invalid cookie in manual desc retrieval cookie 0x%x", cookie);
 			return -EINVAL;
 		}
 	}
@@ -4420,7 +4420,7 @@ int ath12k_dp_rx_process_wbm_err(struct
 		if (!desc_info) {
 			desc_info = ath12k_dp_get_rx_desc(ab, err_info.cookie);
 			if (!desc_info) {
-				ath12k_warn(ab, "Invalid cookie in manual desc retrieval");
+				ath12k_warn(ab, "Invalid cookie in manual desc retrieval cookie 0x%x", err_info.cookie);
 				continue;
 			}
 		}
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -4550,7 +4550,7 @@ int ath12k_wmi_pdev_dma_ring_cfg(struct
 	cmd->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_DMA_RING_CFG_REQ,
 						 sizeof(*cmd));
 
-	cmd->pdev_id = cpu_to_le32(DP_SW2HW_MACID(arg->pdev_id));
+	cmd->pdev_id = cpu_to_le32(arg->pdev_id);
 	cmd->module_id = cpu_to_le32(arg->module_id);
 	cmd->base_paddr_lo = cpu_to_le32(arg->base_paddr_lo);
 	cmd->base_paddr_hi = cpu_to_le32(arg->base_paddr_hi);
