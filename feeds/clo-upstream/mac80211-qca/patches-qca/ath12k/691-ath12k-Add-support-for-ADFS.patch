From 048387f242188b4bbb95a624f5bdaba8948cbb3c Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Fri, 25 Nov 2022 10:37:48 +0530
Subject: [PATCH] ath12k: Add support for ADFS

The following changes are added to support background DFS feature:
	1. add support for ADFS WMI command
	2. handle ADFS complete event from Firmware
	3. parse the firmware phy mac capabilties to
	   infer which chainmask supports ADFS
	4. During channel change abort ongoing CAC
	5. handle radar on agile detector

Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |   3 +
 drivers/net/wireless/ath/ath12k/mac.c  | 115 ++++++++++
 drivers/net/wireless/ath/ath12k/mac.h  |   8 +
 drivers/net/wireless/ath/ath12k/wmi.c  | 284 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h  |  88 ++++++++
 5 files changed, 496 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -827,6 +827,7 @@ struct ath12k {
 	unsigned long last_tx_power_update;
 
 	struct completion mvr_complete;
+	struct cfg80211_chan_def agile_chandef;
 };
 
 struct ath12k_hw {
@@ -884,6 +885,8 @@ struct ath12k_pdev_cap {
 	u32 rx_chain_mask;
 	u32 tx_chain_mask_shift;
 	u32 rx_chain_mask_shift;
+	u32 chainmask_table_id;
+	u32 adfs_chain_mask;
 	struct ath12k_band_cap band[NUM_NL80211_BANDS];
 	bool nss_ratio_enabled;
 	u8 nss_ratio_info;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -9812,6 +9812,23 @@ ath12k_mac_vdev_config_after_start(struc
 	if (ret)
 		ath12k_warn(ab, "failed to set 6G non-ht dup conf for vdev %d: %d\n",
 		            arvif->vdev_id, ret);
+	 /* In case of ADFS, we have to abort ongoing backgrorund CAC */
+	if ((ar->pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP) &&
+	    test_bit(ar->cfg_rx_chainmask, &ar->pdev->cap.adfs_chain_mask) &&
+	    ar->agile_chandef.chan) {
+		ath12k_dbg(ab, ATH12K_DBG_MAC,
+			   "Aborting ongoing Agile DFS on freq %d",
+			   ar->agile_chandef.chan->center_freq);
+		ret = ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(ar,arvif->vdev_id);
+		if (!ret) {
+			memset(&ar->agile_chandef, 0, sizeof(struct cfg80211_chan_def));
+			ar->agile_chandef.chan = NULL;
+			ath12k_mac_background_dfs_event(ar, ATH12K_BGDFS_ABORT);
+		} else {
+			ath12k_warn(ab, "failed to abort agile CAC for vdev %d",
+				    arvif->vdev_id);
+		}
+	}
 
 	return ret;
 }
@@ -13035,6 +13052,123 @@ err_fallback:
 	return 0;
 }
 
+/* Note: only half bandwidth agile is supported */
+bool ath12k_is_supported_agile_bandwidth(enum nl80211_chan_width conf_bw,
+					 enum nl80211_chan_width agile_bw)
+{
+	bool is_supported = false;
+
+	switch (conf_bw) {
+	case NL80211_CHAN_WIDTH_20_NOHT:
+        case NL80211_CHAN_WIDTH_20:
+        case NL80211_CHAN_WIDTH_40:
+		if (agile_bw <= conf_bw)
+			is_supported = true;
+		break;
+        case NL80211_CHAN_WIDTH_80:
+		if (agile_bw == conf_bw ||
+		    agile_bw == NL80211_CHAN_WIDTH_40)
+			is_supported = true;
+		break;
+        case NL80211_CHAN_WIDTH_160:
+		if (agile_bw == conf_bw ||
+		    agile_bw == NL80211_CHAN_WIDTH_80)
+			is_supported = true;
+		break;
+        case NL80211_CHAN_WIDTH_320:
+		if (agile_bw == conf_bw ||
+		    agile_bw == NL80211_CHAN_WIDTH_160)
+			is_supported = true;
+		break;
+	default:
+		break;
+	}
+
+	return is_supported;
+}
+static int ath12k_mac_op_set_radar_background(struct ieee80211_hw *hw,
+					      struct cfg80211_chan_def *def)
+{
+	struct ath12k    *ar;
+	struct ath12k_link_vif *arvif;
+	struct ath12k_vif *ahvif;
+	bool arvif_found = false;
+	int ret;
+	struct cfg80211_chan_def conf_def;
+
+	ar = ath12k_mac_get_ar_by_band(hw, NL80211_BAND_5GHZ);
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->ab->dfs_region == ATH12K_DFS_REG_UNSET) {
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (!test_bit(ar->cfg_rx_chainmask, &ar->pdev->cap.adfs_chain_mask)) {
+		ret  = -EINVAL;
+		goto exit;
+	}
+
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		ahvif = arvif->ahvif;
+		if (arvif->is_started && ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
+			arvif_found = true;
+			break;
+		}
+	}
+
+	if (!arvif_found) {
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (!def) {
+		ret = ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(ar,arvif->vdev_id);
+		if (!ret) {
+			memset(&ar->agile_chandef, 0, sizeof(struct cfg80211_chan_def));
+			ar->agile_chandef.chan = NULL;
+		}
+	} else {
+		if (!cfg80211_chandef_valid(def) ||
+		    !(def->chan->flags & IEEE80211_CHAN_RADAR)) {
+			ret = -EINVAL;
+			goto exit;
+		}
+
+		if (WARN_ON(ath12k_mac_vif_chan(ahvif->vif, &conf_def,
+						arvif->link_id))) {
+			ret = -EINVAL;
+			goto exit;
+		}
+
+		/* Note: Only Half width and full bandwidth is supported */
+
+		if(!(ath12k_is_supported_agile_bandwidth(conf_def.width,
+							  def->width))) {
+                        ret = -EINVAL;
+                        goto exit;
+                }
+
+		if (conf_def.center_freq1 == def->center_freq1) {
+			ret = -EINVAL;
+			goto exit;
+		}
+
+		ret = ath12k_wmi_vdev_adfs_ch_cfg_cmd_send(ar, arvif->vdev_id, def);
+		if (!ret) {
+			memcpy(&ar->agile_chandef, def, sizeof(struct cfg80211_chan_def));
+		} else {
+			memset(&ar->agile_chandef, 0, sizeof(struct cfg80211_chan_def));
+			ar->agile_chandef.chan = NULL;
+		}
+	}
+
+exit:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
 static const struct ieee80211_ops ath12k_ops = {
 	.tx				= ath12k_mac_op_tx,
 	.wake_tx_queue			= ieee80211_handle_wake_tx_queue,
@@ -13078,6 +13212,7 @@ static const struct ieee80211_ops ath12k
 	.sta_add_debugfs		= ath12k_debugfs_sta_op_add,
 #endif
 	.get_txpower			= ath12k_mac_op_get_txpower,
+	.set_radar_background		= ath12k_mac_op_set_radar_background,
 };
 
 static void ath12k_mac_update_ch_list(struct ath12k *ar,
@@ -13510,7 +13645,12 @@ static int __ath12k_mac_register(struct
 				      NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP);
 	}
 
-	wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_PUNCT);
+	wiphy_ext_feature_set(hw->wiphy, NL80211_EXT_FEATURE_PUNCT);
+
+	if ((ar->pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP) &&
+	    test_bit(ar->cfg_rx_chainmask, &cap->adfs_chain_mask))
+		wiphy_ext_feature_set(hw->wiphy,
+				      NL80211_EXT_FEATURE_RADAR_BACKGROUND);
 
 	return 0;
 }
@@ -14130,3 +14270,42 @@ u16 ath12k_calculate_subchannel_count(en
 	}
 	return width_num/20;
 }
+
+void ath12k_mac_background_dfs_event(struct ath12k *ar,
+				     enum ath12k_background_dfs_events ev)
+{
+	struct ath12k_vif *ahvif;
+	struct ath12k_link_vif *arvif;
+	bool arvif_found = false;
+	int ret = 0;
+
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		ahvif = arvif->ahvif;
+		if (arvif->is_started &&
+		    ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
+			arvif_found = true;
+			break;
+		}
+	}
+
+	if (!arvif_found)
+		return;
+
+	if (ev == ATH12K_BGDFS_RADAR) {
+		cfg80211_background_radar_event(ar->ah->hw->wiphy, &ar->agile_chandef, GFP_ATOMIC);
+		lockdep_assert_held(&ar->conf_mutex);
+		ret = ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(ar, arvif->vdev_id);
+	} else if (ev == ATH12K_BGDFS_ABORT) {
+		cfg80211_background_cac_abort(ar->ah->hw->wiphy);
+	}
+
+	if (!ret) {
+		memset(&ar->agile_chandef, 0, sizeof(struct cfg80211_chan_def));
+		ar->agile_chandef.chan = NULL;
+	} else {
+		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+			   "ADFS state can't be reset (ret=%d)\n",
+			   ret);
+	}
+}
+
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -93,6 +93,12 @@ enum ath12k_supported_bw {
 				       IEEE80211_CU_MODIFY_UORA_PARAM_ELEM | \
 				       IEEE80211_CU_MODIFY_EHT_OPER_ELEM)
 
+enum ath12k_background_dfs_events {
+	ATH12K_BGDFS_SUCCESS,
+	ATH12K_BGDFS_ABORT,
+	ATH12K_BGDFS_RADAR,
+};
+
 extern const struct htt_rx_ring_tlv_filter ath12k_mac_mon_status_filter_default;
 
 void ath12k_mac_ap_ps_recalc(struct ath12k *ar);
@@ -140,4 +146,6 @@ int ath12k_mac_mlo_teardown(struct ath12
 struct ieee80211_bss_conf *ath12k_get_link_bss_conf(struct ath12k_link_vif *arvif);
 bool ath12k_mac_is_ml_arvif(struct ath12k_link_vif *arvif);
 u16 ath12k_calculate_subchannel_count(enum nl80211_chan_width width);
+void ath12k_mac_background_dfs_event(struct ath12k *ar,
+				     enum ath12k_background_dfs_events ev);
 #endif
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -39,6 +39,9 @@ struct ath12k_wmi_service_ext_arg {
 	u32 max_bssid_rx_filters;
 	u32 num_hw_modes;
 	u32 num_phy;
+	u32 num_chainmask_tables;
+	struct ath12k_chainmask_table
+		chainmask_table[ATH12K_MAX_CHAINMASK_TABLES];
 };
 
 struct ath12k_wmi_svc_rdy_ext_parse {
@@ -57,6 +60,7 @@ struct ath12k_wmi_svc_rdy_ext_parse {
 	bool hw_mode_done;
 	bool mac_phy_done;
 	bool ext_hal_reg_done;
+	u32 n_mac_phy_chainmask_combo;
 	bool mac_phy_chainmask_combo_done;
 	bool mac_phy_chainmask_cap_done;
 	bool oem_dma_ring_cap_done;
@@ -306,6 +310,40 @@ static const int ath12k_hw_mode_pri_map[
 	PRIMAP(WMI_HOST_HW_MODE_MAX),
 };
 
+
+enum wmi_host_channel_width
+ath12k_wmi_get_host_chan_width(u32 width)
+{
+	enum wmi_host_channel_width host_width;
+
+	switch (width) {
+	case NL80211_CHAN_WIDTH_20_NOHT:
+	case NL80211_CHAN_WIDTH_20:
+		host_width = WMI_HOST_CHAN_WIDTH_20;
+		break;
+	case NL80211_CHAN_WIDTH_40:
+		host_width = WMI_HOST_CHAN_WIDTH_40;
+		break;
+	case NL80211_CHAN_WIDTH_80:
+		host_width = WMI_HOST_CHAN_WIDTH_80;
+		break;
+	case NL80211_CHAN_WIDTH_160:
+		host_width = WMI_HOST_CHAN_WIDTH_160;
+		break;
+	case NL80211_CHAN_WIDTH_80P80:
+		host_width = WMI_HOST_CHAN_WIDTH_80P80;
+		break;
+	case NL80211_CHAN_WIDTH_320:
+		host_width = WMI_HOST_CHAN_WIDTH_320;
+		break;
+	default:
+		host_width = WMI_HOST_CHAN_WIDTH_MAX;
+		break;
+	}
+
+	return host_width;
+}
+
 static int
 ath12k_wmi_tlv_iter(struct ath12k_base *ab, const void *ptr, size_t len,
 		    int (*iter)(struct ath12k_base *ab, u16 tag, u16 len,
@@ -529,6 +567,7 @@ ath12k_pull_mac_phy_cap_svc_ready_ext(st
 	pdev->hw_link_id = mac_caps->hw_link_id;
 	pdev_cap->supported_bands |= le32_to_cpu(mac_caps->supported_bands);
 	pdev_cap->ampdu_density = le32_to_cpu(mac_caps->ampdu_density);
+	pdev_cap->chainmask_table_id = mac_caps->chainmask_table_id;
 
 	fw_pdev = &ab->fw_pdev[ab->fw_pdev_count];
 	fw_pdev->supported_bands = le32_to_cpu(mac_caps->supported_bands);
@@ -4977,6 +5016,102 @@ static void ath12k_wmi_pdev_dma_ring_buf
 	}
 }
 
+
+static int ath12k_wmi_tlv_mac_phy_chainmask_caps(struct ath12k_base *soc,
+						 u16 len, const void *ptr, void *data)
+{
+	struct ath12k_wmi_svc_rdy_ext_parse *svc_rdy_ext = data;
+	struct wmi_mac_phy_chainmask_caps *cmask_caps = (struct wmi_mac_phy_chainmask_caps *)ptr;
+	struct ath12k_chainmask_table *cmask_table;
+	struct ath12k_pdev_cap *pdev_cap;
+	u32 tag;
+	int i, j;
+
+	if (!svc_rdy_ext->hw_mode_caps)
+		return -EINVAL;
+
+	if ((!svc_rdy_ext->arg.num_chainmask_tables) ||
+	    (svc_rdy_ext->arg.num_chainmask_tables > ATH12K_MAX_CHAINMASK_TABLES))
+		return -EINVAL;
+
+	for (i = 0; i < svc_rdy_ext->arg.num_chainmask_tables; i++) {
+		cmask_table = &svc_rdy_ext->arg.chainmask_table[i];
+
+		for (j = 0; j < cmask_table->num_valid_chainmasks; j++) {
+			tag = FIELD_GET(WMI_TLV_TAG, cmask_caps->tlv_header);
+
+			if (tag != WMI_TAG_MAC_PHY_CHAINMASK_CAPABILITY)
+                                return -EPROTO;
+
+                        cmask_table->cap_list[j].chainmask = cmask_caps->chainmask;
+                        cmask_table->cap_list[j].supported_caps = cmask_caps->supported_flags;
+                        cmask_caps++;
+			ath12k_dbg(soc, ATH12K_DBG_WMI,"[id %d] chainmask %x supported_caps %x",
+				   cmask_table->table_id, cmask_table->cap_list[j].chainmask,
+				   cmask_table->cap_list[j].supported_caps);
+		}
+	}
+
+	for (i = 0; i < soc->num_radios; i++) {
+		pdev_cap = &soc->pdevs[i].cap;
+		for (j = 0; j < svc_rdy_ext->n_mac_phy_chainmask_combo; j++) {
+			cmask_table = &svc_rdy_ext->arg.chainmask_table[j];
+			if (cmask_table->table_id == pdev_cap->chainmask_table_id)
+				break;
+		}
+		for (j = 0; j < cmask_table->num_valid_chainmasks; j++) {
+                        if (cmask_table->cap_list[j].supported_caps & WMI_SUPPORT_CHAIN_MASK_ADFS)
+				pdev_cap->adfs_chain_mask |= (1 << cmask_table->cap_list[j].chainmask);
+		}
+		ath12k_dbg(soc, ATH12K_DBG_WMI, "updated adfs chain mask %x for pdev %d",
+			   pdev_cap->adfs_chain_mask, i);
+	}
+	return 0;
+}
+
+static void ath12k_wmi_free_chainmask_caps(struct ath12k_wmi_svc_rdy_ext_parse *svc_rdy_ext)
+{
+	int i;
+
+	if (!svc_rdy_ext->arg.num_chainmask_tables)
+		return;
+
+	for (i = 0; i < svc_rdy_ext->arg.num_chainmask_tables; i++) {
+		if (!svc_rdy_ext->arg.chainmask_table[i].cap_list)
+			continue;
+		kfree(svc_rdy_ext->arg.chainmask_table[i].cap_list);
+		svc_rdy_ext->arg.chainmask_table[i].cap_list = NULL;
+	}
+}
+
+static int ath12k_wmi_tlv_mac_phy_chainmask_combo_parse(struct ath12k_base *soc,
+							u16 tag, u16 len,
+							const void *ptr, void *data)
+{
+	struct ath12k_wmi_svc_rdy_ext_parse *svc_rdy_ext = data;
+	struct wmi_mac_phy_chainmask_combo *cmask_combo = (struct wmi_mac_phy_chainmask_combo *) ptr;
+	u32 i = svc_rdy_ext->n_mac_phy_chainmask_combo;
+	struct ath12k_chainmask_table *cmask_table;
+
+	if (tag != WMI_TAG_MAC_PHY_CHAINMASK_COMBO)
+		return -EPROTO;
+
+	if (svc_rdy_ext->n_mac_phy_chainmask_combo >= svc_rdy_ext->arg.num_chainmask_tables)
+		return -ENOBUFS;
+
+	cmask_table = &svc_rdy_ext->arg.chainmask_table[i];
+	cmask_table->table_id = cmask_combo->chainmask_table_id;
+	cmask_table->num_valid_chainmasks = cmask_combo->num_valid_chainmask;
+	cmask_table->cap_list = kcalloc(cmask_combo->num_valid_chainmask,
+					sizeof(struct ath12k_chainmask_caps),
+					GFP_ATOMIC);
+	if (!svc_rdy_ext->arg.chainmask_table[i].cap_list)
+		return -ENOMEM;
+
+	svc_rdy_ext->n_mac_phy_chainmask_combo++;
+	return 0;
+}
+
 static int ath12k_wmi_hw_mode_caps_parse(struct ath12k_base *soc,
 					 u16 tag, u16 len,
 					 const void *ptr, void *data)
@@ -5288,6 +5423,7 @@ static int ath12k_wmi_svc_rdy_ext_parse(
 		svc_rdy_ext->hw_caps = ptr;
 		svc_rdy_ext->arg.num_hw_modes =
 			le32_to_cpu(svc_rdy_ext->hw_caps->num_hw_modes);
+		svc_rdy_ext->arg.num_chainmask_tables = le32_to_cpu(svc_rdy_ext->hw_caps->num_chainmask_tables);
 		break;
 
 	case WMI_TAG_SOC_HAL_REG_CAPABILITIES:
@@ -5322,8 +5458,21 @@ static int ath12k_wmi_svc_rdy_ext_parse(
 
 			svc_rdy_ext->ext_hal_reg_done = true;
 		} else if (!svc_rdy_ext->mac_phy_chainmask_combo_done) {
+			svc_rdy_ext->n_mac_phy_chainmask_combo = 0;
+			ret = ath12k_wmi_tlv_iter(ab, ptr, len,
+						  ath12k_wmi_tlv_mac_phy_chainmask_combo_parse,
+						  svc_rdy_ext);
+			if (ret) {
+				ath12k_warn(ab, "failed to parse chainmask combo tlv %d\n", ret);
+				return ret;
+			}
 			svc_rdy_ext->mac_phy_chainmask_combo_done = true;
 		} else if (!svc_rdy_ext->mac_phy_chainmask_cap_done) {
+			ret = ath12k_wmi_tlv_mac_phy_chainmask_caps(ab, len, ptr, svc_rdy_ext);
+			if (ret) {
+				ath12k_warn(ab, "failed to parse chainmask caps tlv %d\n", ret);
+				return ret;
+			}
 			svc_rdy_ext->mac_phy_chainmask_cap_done = true;
 		} else if (!svc_rdy_ext->oem_dma_ring_cap_done) {
 			svc_rdy_ext->oem_dma_ring_cap_done = true;
@@ -5361,9 +5510,12 @@ static int ath12k_service_ready_ext_even
 		complete(&ab->wmi_ab.service_ready);
 
 	kfree(svc_rdy_ext.mac_phy_caps);
+	ath12k_wmi_free_chainmask_caps(&svc_rdy_ext);
 	return 0;
 
 err:
+	kfree(svc_rdy_ext.mac_phy_caps);
+	ath12k_wmi_free_chainmask_caps(&svc_rdy_ext);
 	ath12k_wmi_free_dbring_caps(ab);
 	return ret;
 }
@@ -8829,10 +8981,15 @@ static void ath12k_dfs_calculate_subchan
 
 	arg.ar = ar;
 	arg.def = NULL;
-	ieee80211_iter_chan_contexts_atomic(ar->ah->hw, ath12k_mac_get_any_chandef_iter,
+	if (!radar->detector_id) {
+		ieee80211_iter_chan_contexts_atomic(ar->ah->hw, ath12k_mac_get_any_chandef_iter,
 					    &arg);
-	chandef = arg.def;
-	if (!chandef) {
+		chandef = arg.def;
+	} else {
+		chandef = &ar->agile_chandef;
+	}
+
+	if (!chandef || !chandef->chan) {
 		ath12k_err(ab, "Channel information not available\n");
 		return;
 	}
@@ -8876,7 +9033,12 @@ static void ath12k_dfs_calculate_subchan
 		   radar_bitmap,subchannel_count);
 
 mark_radar:
-	ieee80211_radar_detected_bitmap(ar->ah->hw,radar_bitmap);
+	if (!radar->detector_id) {
+		ieee80211_radar_detected_bitmap(ar->ah->hw,radar_bitmap);
+	} else {
+		ar->agile_chandef.radar_bitmap = radar_bitmap;
+		ath12k_mac_background_dfs_event(ar, ATH12K_BGDFS_RADAR);
+	}
 }
 
 static void
@@ -9842,6 +10004,57 @@ exit:
 	kfree(tb);
 }
 
+static void ath12k_process_ocac_complete_event(struct ath12k_base *ab,
+                struct sk_buff *skb)
+{
+        const void **tb;
+        const struct wmi_vdev_adfs_ocac_complete_event_fixed_param *ev;
+        struct ath12k *ar;
+        int ret;
+
+        tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
+        if (IS_ERR(tb)) {
+                ret = PTR_ERR(tb);
+                ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
+                return;
+        }
+
+        ev = tb[WMI_TAG_VDEV_ADFS_OCAC_COMPLETE_EVENT];
+
+        if (!ev) {
+                ath12k_warn(ab, "failed to fetch ocac completed ev");
+                kfree(tb);
+                return;
+        }
+
+        ath12k_dbg(ab, ATH12K_DBG_WMI,
+                   "pdev dfs ocac complete event on pdev %d, chan freq %d,"
+		   "chan_width %d, status %d  freq %d, freq1  %d, freq2 %d",
+                   ev->vdev_id, ev->chan_freq, ev->chan_width,
+                   ev->status, ev->center_freq, ev->center_freq1,
+		   ev->center_freq2);
+
+        ar = ath12k_mac_get_ar_by_vdev_id(ab, ev->vdev_id);
+
+        if (!ar) {
+		ath12k_warn(ab, "OCAC complete event in invalid vdev %d\n",
+                            ev->vdev_id);
+                goto exit;
+        }
+
+        ath12k_dbg(ar->ab, ATH12K_DBG_WMI,"aDFS ocac complete event in vdev %d\n",
+                   ev->vdev_id);
+
+        if (ev->status) {
+            ath12k_mac_background_dfs_event(ar, ATH12K_BGDFS_ABORT);
+	} else {
+		memset(&ar->agile_chandef, 0, sizeof(struct cfg80211_chan_def));
+		ar->agile_chandef.chan = NULL;
+	}
+exit:
+        kfree(tb);
+}
+
 static void ath12k_wmi_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -9988,6 +10201,9 @@ static void ath12k_wmi_op_rx(struct ath1
 	case WMI_PDEV_MULTIPLE_VDEV_RESTART_RESP_EVENTID:
 		ath12k_wmi_event_mvr_response(ab, skb);
 		break;
+	case WMI_VDEV_ADFS_OCAC_COMPLETE_EVENTID:
+		ath12k_process_ocac_complete_event(ab, skb);
+		break;
 	/* TODO: Add remaining events */
 	default:
 		ath12k_dbg(ab, ATH12K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
@@ -10477,3 +10693,96 @@ int ath12k_wmi_pdev_multiple_vdev_restar
 
 	return ret;
 }
+
+int ath12k_wmi_vdev_adfs_ch_cfg_cmd_send(struct ath12k *ar,
+					 u32 vdev_id,
+					 struct cfg80211_chan_def *def)
+{
+	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_vdev_adfs_ch_cfg_cmd *cmd;
+	struct sk_buff *skb;
+	int ret = 0;
+
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, sizeof(*cmd));
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_vdev_adfs_ch_cfg_cmd *)skb->data;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_VDEV_ADFS_CH_CFG_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN,
+				     sizeof(struct wmi_vdev_adfs_ch_cfg_cmd) - TLV_HDR_SIZE);
+	cmd->vdev_id = vdev_id;
+
+	if (ar->ab->dfs_region == ATH12K_DFS_REG_ETSI) {
+		cmd->ocac_mode = WMI_ADFS_MODE_QUICK_OCAC;
+		cmd->min_duration_ms = cfg80211_chandef_dfs_cac_time(ar->ah->hw->wiphy,
+								     def,
+								     true, false);
+
+		if (cmd->min_duration_ms == MIN_WEATHER_RADAR_CHAN_PRECAC_TIMEOUT)
+			cmd->max_duration_ms = MAX_WEATHER_RADAR_CHAN_PRECAC_TIMEOUT;
+		else
+			cmd->max_duration_ms = MAX_PRECAC_TIMEOUT;
+	} else if (ar->ab->dfs_region == ATH12K_DFS_REG_FCC) {
+		cmd->ocac_mode = WMI_ADFS_MODE_QUICK_RCAC;
+		cmd->min_duration_ms = MIN_RCAC_TIMEOUT;
+		cmd->max_duration_ms = MAX_RCAC_TIMEOUT;
+	}
+
+	cmd->chan_freq = def->chan->center_freq;
+	cmd->chan_width = ath12k_wmi_get_host_chan_width(def->width);
+	cmd->center_freq1 = def->center_freq1;
+	cmd->center_freq2 = def->center_freq2;
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+		   "Send adfs channel cfg command for vdev id %d "
+		   "mode as %d min duration %d chan_freq %d chan_width %d\n"
+		   "center_freq1 %d center_freq2 %d", cmd->vdev_id,
+		   cmd->ocac_mode, cmd->min_duration_ms, cmd->chan_freq,
+		   cmd->chan_width, cmd->center_freq1, cmd->center_freq2);
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_VDEV_ADFS_CH_CFG_CMDID);
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "failed to send WMI_VDEV_ADFS_CH_CFG_CMDID\n");
+		dev_kfree_skb(skb);
+	}
+
+	return ret;
+}
+
+int ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(struct ath12k *ar, u32 vdev_id)
+{
+	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_vdev_adfs_ocac_abort_cmd *cmd;
+	struct sk_buff *skb;
+	int ret = 0;
+
+	if (!ar->agile_chandef.chan) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+			   "Currently, agile CAC is not active on any channel."
+			   "Ignore abort");
+		return ret;
+	}
+
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, sizeof(*cmd));
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_vdev_adfs_ocac_abort_cmd *)skb->data;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_VDEV_ADFS_OCAC_ABORT_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN,
+				     sizeof(struct wmi_vdev_adfs_ocac_abort_cmd) - TLV_HDR_SIZE);
+
+	cmd->vdev_id = vdev_id;
+	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_VDEV_ADFS_OCAC_ABORT_CMDID);
+
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "failed to send WMI_VDEV_ADFS_ABORT_CMD\n");
+		dev_kfree_skb(skb);
+		return ret;
+	}
+	return ret;
+}
+
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2645,6 +2645,19 @@ struct ath12k_ppe_threshold {
 	u32 ppet16_ppet8_ru3_ru0[PSOC_HOST_MAX_NUM_SS];
 };
 
+struct ath12k_chainmask_caps {
+	u32 supported_caps;
+	u32 chainmask;
+};
+
+struct ath12k_chainmask_table {
+	u32 table_id;
+	u32 num_valid_chainmasks;
+	struct ath12k_chainmask_caps *cap_list;
+};
+
+#define ATH12K_MAX_CHAINMASK_TABLES 5
+
 struct wmi_ppe_threshold {
 	u32 numss_m1; /** NSS - 1*/
 	union {
@@ -2816,6 +2829,18 @@ struct ath12k_wmi_hw_mode_cap_params {
 	__le32 hw_mode_config_type;
 } __packed;
 
+struct wmi_mac_phy_chainmask_combo {
+	u32 chainmask_table_id;
+	u32 num_valid_chainmask;
+} __packed;
+
+struct wmi_mac_phy_chainmask_caps {
+	u32 tlv_header;
+	u32 supported_flags;
+	u32 chainmask;
+} __packed;
+
+
 #define WMI_MAX_HECAP_PHY_SIZE                 (3)
 #define WMI_NSS_RATIO_ENABLE_DISABLE_BITPOS    BIT(0)
 #define WMI_NSS_RATIO_ENABLE_DISABLE_GET(_val) \
@@ -5005,6 +5030,9 @@ enum wmi_host_channel_width {
         WMI_HOST_CHAN_WIDTH_80    = 2,
         WMI_HOST_CHAN_WIDTH_160   = 3,
         WMI_HOST_CHAN_WIDTH_80P80 = 4,
+	WMI_HOST_CHAN_WIDTH_320   = 7,
+	/*keep last */
+	WMI_HOST_CHAN_WIDTH_MAX	  = 0xF,
 };
 
 enum wmi_dcs_interference_chan_segment {
@@ -6196,6 +6224,59 @@ struct wmi_critical_update_arg {
 #define ATH12K_GET_LOWER_32_BITS(val)		(val & ATH12K_LOWER_32_MASK)
 #define ATH12K_GET_UPPER_32_BITS(val)		((val & ATH12K_UPPER_32_MASK) >> 32)
 
+
+#define WMI_ADFS_MODE_QUICK_OCAC                0 /* Agile preCAC */
+#define WMI_ADFS_MODE_QUICK_RCAC                2 /* Agile Rolling CAC */
+#define WMI_SUPPORT_CHAIN_MASK_ADFS             BIT(31)
+
+#define MIN_PRECAC_TIMEOUT                      (6 * 60 * 1000) /* 6 minutes */
+#define MIN_WEATHER_RADAR_CHAN_PRECAC_TIMEOUT   (6 * 10 * 60 * 1000) /* 1 hour */
+#define MAX_PRECAC_TIMEOUT                      (4 * 60 * 60 * 1000) /* 4 hours */
+#define MAX_WEATHER_RADAR_CHAN_PRECAC_TIMEOUT   (24 * 60 * 60 * 1000) /* 24 hours */
+#define MIN_RCAC_TIMEOUT                        (62 * 1000) /* 62 seconds */
+#define MAX_RCAC_TIMEOUT                        0xffffffff
+
+struct wmi_vdev_adfs_ch_cfg_cmd {
+	u32  tlv_header;
+	u32  vdev_id;
+	u32  ocac_mode;
+	u32  min_duration_ms;
+	u32  max_duration_ms;
+	u32  chan_freq;
+	u32  chan_width;
+        /*
+         * Two center frequencies are required since agile channel switch
+         * has to support 160/165 MHz for products like Pine.
+         * For agile which supports only up to 80MHz (HK),
+         * freq2 will be 0 and ignored.
+         */
+	union {
+		u32  center_freq;
+		u32  center_freq1;
+	};
+	u32  center_freq2;
+} __packed;
+
+struct wmi_vdev_adfs_ocac_abort_cmd {
+	u32 tlv_header;
+	u32 vdev_id;
+} __packed;
+
+#define WMI_DFS_RADAR_DETECTED_IN_SERVICE_CHAN  0
+#define WMI_DFS_RADAR_DETECTED_IN_OCAC_CHAN     1
+
+struct wmi_vdev_adfs_ocac_complete_event_fixed_param {
+	u32 vdev_id;
+	u32 chan_freq;
+	u32 chan_width;
+	union {
+		u32 center_freq;
+		u32 center_freq1;
+	};
+	u32 status;
+	u32 center_freq2;
+} __packed;
+
 #define ATH12K_FW_STATS_BUF_SIZE (1024 * 1024)
 
 void ath12k_wmi_init_qcn9274(struct ath12k_base *ab,
@@ -6366,4 +6447,7 @@ int ath12k_wmi_mlo_teardown(struct ath12
 bool ath12k_wmi_is_mvr_supported(struct ath12k_base *ab);
 int ath12k_wmi_pdev_multiple_vdev_restart(struct ath12k *ar,
 					  struct wmi_pdev_multiple_vdev_restart_req_arg *arg);
+int ath12k_wmi_vdev_adfs_ch_cfg_cmd_send(struct ath12k *ar,u32 vdev_id,
+                                        struct cfg80211_chan_def *chandef);
+int ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(struct ath12k *ar,u32 vdev_id);
 #endif
