From 69d5f20e4c472d431916fc8ef016ba641c73c9f2 Mon Sep 17 00:00:00 2001
From: Vishal Kumar <quic_visk@quicinc.com>
Date: Fri, 13 Jan 2023 02:19:51 +0530
Subject: [PATCH] ath12k: tx and rx nss changes for eht mode

calculation of eht nss using intersection of link_sta and phy capability.
For example:
	sta_nss = 4x4 and ap_nss = 2x2 then final nss will be 2x2.

Signed-off-by: Vishal Kumar <quic_visk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 31 ++++++++++++++++++++++-----
 1 file changed, 26 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -552,6 +552,18 @@ ath12k_mac_max_eht_nss(const u16 eht_mcs
 	return 1;
 }
 
+static u32
+ath12k_mac_max_eht_mcs_nss(const u8 *eht_mcs, int eht_mcs_set_size)
+{
+	int i;
+	u8 nss = 0;
+
+	for (i = 0; i < eht_mcs_set_size; i++)
+		nss = max(nss, u8_get_bits(eht_mcs[i], IEEE80211_EHT_MCS_NSS_RX));
+
+	return nss;
+}
+
 static u8 ath12k_parse_mpdudensity(u8 mpdudensity)
 {
 /*  From IEEE Std 802.11-2020 defined values for "Minimum MPDU Start Spacing":
@@ -3242,6 +3254,8 @@ static void ath12k_peer_assoc_h_eht(stru
 	struct ieee80211_sta *sta;
 	struct ieee80211_bss_conf* link_conf;
 	struct ieee80211_link_sta *link_sta;
+	struct ieee80211_sta_eht_cap *own_eht_cap;
+	struct ieee80211_eht_mcs_nss_supp *own_eht_mcs_nss_supp;
 
 	link_conf = ath12k_get_link_bss_conf(arvif);
 
@@ -3268,6 +3282,9 @@ static void ath12k_peer_assoc_h_eht(stru
 	band = def.chan->band;
 	eht_mcs_mask = arvif->bitrate_mask.control[band].eht_mcs;
 
+	own_eht_cap = &ar->mac.sbands[band].iftype_data->eht_cap;
+	own_eht_mcs_nss_supp = &own_eht_cap->eht_mcs_nss_supp;
+
 	if (ath12k_peer_assoc_h_eht_masked((const u16*) eht_mcs_mask))
 		return;
 
@@ -3296,7 +3313,8 @@ static void ath12k_peer_assoc_h_eht(stru
 	rx_mcs = arg->peer_eht_rx_mcs_set;
 	tx_mcs = arg->peer_eht_tx_mcs_set;
 
-	eht_nss = ath12k_mac_max_eht_nss(eht_mcs_mask);
+	eht_nss = ath12k_mac_max_eht_mcs_nss((void *)own_eht_mcs_nss_supp,
+						  sizeof(*own_eht_mcs_nss_supp));
 
 	if (eht_nss > link_sta->rx_nss) {
 		user_rate_valid = false;
@@ -3379,15 +3397,19 @@ static void ath12k_peer_assoc_h_eht(stru
 		else
 			max_nss = bw_20->rx_tx_mcs7_max_nss;
 	} else {
+		max_nss = 0;
 		if (bw->rx_tx_mcs13_max_nss)
-			max_nss = bw->rx_tx_mcs13_max_nss;
-		else if (bw->rx_tx_mcs11_max_nss)
-			max_nss = bw->rx_tx_mcs11_max_nss;
-		else
-			max_nss = bw->rx_tx_mcs9_max_nss;
+			max_nss = max(max_nss, u8_get_bits(bw->rx_tx_mcs13_max_nss,
+					      IEEE80211_EHT_MCS_NSS_RX));
+		if (bw->rx_tx_mcs11_max_nss)
+			max_nss = max(max_nss, u8_get_bits(bw->rx_tx_mcs11_max_nss,
+					      IEEE80211_EHT_MCS_NSS_RX));
+		if (bw->rx_tx_mcs9_max_nss)
+			max_nss = max(max_nss, u8_get_bits(bw->rx_tx_mcs9_max_nss,
+					      IEEE80211_EHT_MCS_NSS_RX));
 	}
 
-	max_nss = max(max_nss, (uint8_t)eht_nss);
+	max_nss = min(max_nss, (uint8_t)eht_nss);
 
 	arg->peer_nss = min(link_sta->rx_nss, max_nss);
 	arg->punct_bitmap = ~def.ru_punct_bitmap;
