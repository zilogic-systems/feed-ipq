From d20bb0d5efdd9004c1fe1501990cf9df7444ce48 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Sat, 4 Mar 2023 20:55:46 -0800
Subject: [PATCH 1/4] ath12k: Use precomputed SW TCL descriptor

Precompute and store all tx desc values that won't change
on a per packet basis. These precomputed values could be
reused on per vdev basis while transmitting packets. This
helps save CPU cycles on the mesh transmit enqueue path and
improve throughput.

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h   |  9 ++++++
 drivers/net/wireless/ath/ath12k/dp.c     | 15 +++++++++
 drivers/net/wireless/ath/ath12k/dp_tx.c  | 55 +++++++++++++++++---------------
 drivers/net/wireless/ath/ath12k/hal_tx.c | 37 ---------------------
 drivers/net/wireless/ath/ath12k/hal_tx.h |  2 --
 drivers/net/wireless/ath/ath12k/peer.c   |  2 ++
 6 files changed, 55 insertions(+), 65 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -275,7 +275,16 @@ struct ath12k_vif_cache {
 	u64 bss_conf_changed;
 };
 
+struct ath12k_vif_tcl_desc_template {
+	u32 info0;
+	u32 info1;
+	u32 info2;
+	u32 info3;
+	u32 info4;
+};
+
 struct ath12k_link_vif {
+	struct ath12k_vif_tcl_desc_template desc;
 	u32 vdev_id;
 	u32 beacon_interval;
 	u32 dtim_period;
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -462,6 +462,8 @@ void ath12k_dp_tx_update_bank_profile(st
 
 	ath12k_dp_tx_put_bank_profile(dp, arvif->bank_id);
 	arvif->bank_id = ath12k_dp_tx_get_bank_profile(ab, arvif, dp);
+	arvif->desc.info0 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_BANK_ID,
+				       arvif->bank_id);
 }
 
 static void ath12k_dp_deinit_bank_profiles(struct ath12k_base *ab)
@@ -1194,6 +1196,19 @@ void ath12k_dp_vdev_tx_attach(struct ath
 	arvif->vdev_id_check_en = true;
 	arvif->bank_id = ath12k_dp_tx_get_bank_profile(ab, arvif, &ab->dp);
 
+	arvif->desc.info0 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_BANK_ID,
+				       arvif->bank_id);
+	arvif->desc.info1 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO1_CMD_NUM,
+				       arvif->tcl_metadata);
+	arvif->desc.info3 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO3_PMAC_ID,
+				       ar->lmac_id) |
+			    FIELD_PREP(HAL_TCL_DATA_CMD_INFO3_VDEV_ID,
+			    	       arvif->vdev_id);
+	arvif->desc.info4 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_SEARCH_INDEX,
+				       arvif->ast_idx) |
+			    FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_CACHE_SET_NUM,
+			    	       arvif->ast_hash);
+
 	/* TODO: error path for bank id failure */
 	if (arvif->bank_id == DP_INVALID_BANK_ID) {
 		ath12k_err(ar->ab, "Failed to initialize DP TX Banks");
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -94,27 +94,6 @@ struct ath12k_tx_desc_info *ath12k_dp_tx
 	return desc;
 }
 
-static struct ath12k_tx_desc_info *ath12k_dp_tx_assign_buffer(struct ath12k_dp *dp,
-							      u8 ring_id)
-{
-	struct ath12k_tx_desc_info *desc;
-
-	spin_lock_bh(&dp->tx_desc_lock[ring_id]);
-	desc = list_first_entry_or_null(&dp->tx_desc_free_list[ring_id],
-					struct ath12k_tx_desc_info,
-					list);
-	if (unlikely(!desc)) {
-		spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
-		ath12k_warn(dp->ab, "failed to allocate data Tx buffer\n");
-		return NULL;
-	}
-
-	list_move_tail(&desc->list, &dp->tx_desc_used_list[ring_id]);
-	spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
-
-	return desc;
-}
-
 static void ath12k_hal_tx_cmd_ext_desc_setup(struct ath12k_base *ab, void *cmd,
 					     struct hal_tx_info *ti)
 {
@@ -254,19 +233,15 @@ int ath12k_dp_tx_direct(struct ath12k_li
 	tcl_desc.buf_addr_info.info1 |=
 		FIELD_PREP(BUFFER_ADDR_INFO1_RET_BUF_MGR, rbm_id) |
 		FIELD_PREP(BUFFER_ADDR_INFO1_SW_COOKIE, tx_desc->desc_id);
-	tcl_desc.info0 =
-		FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_DESC_TYPE, HAL_TCL_DESC_TYPE_BUFFER) |
-		FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_BANK_ID, arvif->bank_id);
-	tcl_desc.info1 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO1_CMD_NUM,
-				    arvif->tcl_metadata);
+	tcl_desc.info0 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_DESC_TYPE,
+				    HAL_TCL_DESC_TYPE_BUFFER) | arvif->desc.info0;
+	tcl_desc.info1 =  arvif->desc.info1;
+
 	if (likely(skb->ip_summed == CHECKSUM_PARTIAL))
 		tcl_desc.info2 |= TX_IP_CHECKSUM;
 	tcl_desc.info2 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_DATA_LEN, skb->len);
-	tcl_desc.info3 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO3_PMAC_ID, ar->lmac_id) |
-		FIELD_PREP(HAL_TCL_DATA_CMD_INFO3_VDEV_ID, arvif->vdev_id);
-	tcl_desc.info4 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_SEARCH_INDEX, arvif->ast_idx) |
-		FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_CACHE_SET_NUM, arvif->ast_hash);
-
+	tcl_desc.info3 = arvif->desc.info3;
+	tcl_desc.info4 =  arvif->desc.info4;
 	memcpy(hal_tcl_desc, &tcl_desc, sizeof(tcl_desc));
 	dsb(st);
 	ath12k_hal_srng_access_umac_src_ring_end_nolock(ab->mem, tcl_ring);
@@ -304,6 +279,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	struct hal_srng *tcl_ring;
 	struct ieee80211_hdr *hdr = (void *)skb->data;
 	struct dp_tx_ring *tx_ring;
+	struct hal_tcl_data_cmd *tcl_cmd;
 	u8 hal_ring_id;
 	int ret;
 	u16 peer_id;
@@ -361,30 +337,20 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 		ti.meta_data_flags = u32_encode_bits(HTT_TCL_META_DATA_TYPE_GLOBAL_SEQ_NUM,
 						     HTT_TCL_META_DATA_TYPE_MISSION) |
 				     u32_encode_bits(mcbc_gsn, HTT_TCL_META_DATA_GLOBAL_SEQ_NUM);
+		ti.vdev_id = arvif->vdev_id +
+			     HTT_TX_MLO_MCAST_HOST_REINJECT_BASE_VDEV_ID;
+	} else {
+		ti.vdev_id = arvif->vdev_id;
 	}
 
 	ti.encap_type = ath12k_dp_tx_get_encap_type(arvif, skb);
 	ti.addr_search_flags = arvif->hal_addr_search_flags;
 	ti.search_type = arvif->search_type;
 	ti.type = HAL_TCL_DESC_TYPE_BUFFER;
-	ti.pkt_offset = 0;
-	ti.lmac_id = ar->lmac_id;
-	if (gsn_valid)
-		ti.vdev_id = arvif->vdev_id +
-			     HTT_TX_MLO_MCAST_HOST_REINJECT_BASE_VDEV_ID;
-	else
-		ti.vdev_id = arvif->vdev_id;
-	ti.bss_ast_hash = arvif->ast_hash;
-	ti.bss_ast_idx = arvif->ast_idx;
-	ti.dscp_tid_tbl_idx = 0;
 
 	if (likely(skb->ip_summed == CHECKSUM_PARTIAL &&
 		   ti.encap_type != HAL_TCL_ENCAP_TYPE_RAW)) {
-		ti.flags0 |= u32_encode_bits(1, HAL_TCL_DATA_CMD_INFO2_IP4_CKSUM_EN) |
-			     u32_encode_bits(1, HAL_TCL_DATA_CMD_INFO2_UDP4_CKSUM_EN) |
-			     u32_encode_bits(1, HAL_TCL_DATA_CMD_INFO2_UDP6_CKSUM_EN) |
-			     u32_encode_bits(1, HAL_TCL_DATA_CMD_INFO2_TCP4_CKSUM_EN) |
-			     u32_encode_bits(1, HAL_TCL_DATA_CMD_INFO2_TCP6_CKSUM_EN);
+		ti.flags0 |= TX_IP_CHECKSUM;
 	}
 
 	switch (ti.encap_type) {
@@ -457,7 +423,9 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 
 		ti.pkt_offset += htt_meta_size;
 		ti.meta_data_flags |= HTT_TCL_META_DATA_VALID_HTT;
-		ti.flags0 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_TO_FW, 1);
+		ti.flags0 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_TO_FW, 1) |
+			     FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_PKT_OFFSET,
+					ti.pkt_offset);
 		ti.encap_type = HAL_TCL_ENCAP_TYPE_RAW;
 		ti.encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
 	}
@@ -532,7 +500,31 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	arvif->link_stats.tx_encap_type[ti.encap_type]++;
 	arvif->link_stats.tx_encrypt_type[ti.encrypt_type]++;
 	arvif->link_stats.tx_desc_type[ti.type]++;
-	ath12k_hal_tx_cmd_desc_setup(ab, hal_tcl_desc, &ti);
+	tcl_cmd = (struct hal_tcl_data_cmd *)hal_tcl_desc;
+
+	tcl_cmd->buf_addr_info.info0 =
+		FIELD_PREP(BUFFER_ADDR_INFO0_ADDR, ti.paddr);
+	tcl_cmd->buf_addr_info.info1 =
+		FIELD_PREP(BUFFER_ADDR_INFO1_ADDR,
+			   ((uint64_t)ti.paddr >> HAL_ADDR_MSB_REG_SHIFT));
+	tcl_cmd->buf_addr_info.info1 |=
+		FIELD_PREP(BUFFER_ADDR_INFO1_RET_BUF_MGR,
+			   (ti.rbm_id)) |
+		FIELD_PREP(BUFFER_ADDR_INFO1_SW_COOKIE, ti.desc_id);
+
+	tcl_cmd->info0 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_DESC_TYPE,
+				    ti.type) | arvif->desc.info0;
+	tcl_cmd->info1 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO1_CMD_NUM,
+				    ti.meta_data_flags);
+	tcl_cmd->info2 = ti.flags0 |
+		FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_DATA_LEN, ti.data_len);
+
+	/* In tcl_cmd->info3, Bit 24 to 31 represents vdev_id
+	 * LSH 24 times to add updated vdev_id to info3
+	 */
+	tcl_cmd->info3 = (ti.vdev_id << 24) | arvif->desc.info3;
+	tcl_cmd->info4 = arvif->desc.info4;
+	tcl_cmd->info5 = 0;
 
 	ath12k_hal_srng_access_end(ab, tcl_ring);
 
--- a/drivers/net/wireless/ath/ath12k/hal_tx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_tx.h
@@ -182,9 +182,6 @@ struct hal_tx_fes_status_end {
 /* STA mode will have MCAST_PKT_CTRL instead of DSCP_TID_MAP bitfield */
 #define HAL_TX_BANK_CONFIG_DSCP_TIP_MAP_ID	GENMASK(22, 17)
 
-void ath12k_hal_tx_cmd_desc_setup(struct ath12k_base *ab,
-				  struct hal_tcl_data_cmd *tcl_cmd,
-				  struct hal_tx_info *ti);
 void ath12k_hal_tx_set_dscp_tid_map(struct ath12k_base *ab, int id);
 int ath12k_hal_reo_cmd_send(struct ath12k_base *ab, struct hal_srng *srng,
 			    enum hal_reo_cmd_type type,
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -492,6 +492,8 @@ int ath12k_peer_create(struct ath12k *ar
 	if (vif->type == NL80211_IFTYPE_STATION) {
 		arvif->ast_hash = peer->ast_hash;
 		arvif->ast_idx = peer->hw_peer_id;
+		arvif->desc.info4 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_SEARCH_INDEX, arvif->ast_idx) |
+				    FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_CACHE_SET_NUM, arvif->ast_hash);
 	}
 
 	peer->sec_type = HAL_ENCRYPT_TYPE_OPEN;
