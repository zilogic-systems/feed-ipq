From 3a96baddcdd8f1ac37a75b531c93abd314afad60 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Tue, 7 Mar 2023 01:23:49 -0800
Subject: [PATCH 1/6] ath12k: Process tx completions using the napi  budget

Limit the number of tx completions processing in a loop and
prioritize the transmit enqueue operation

Signed-off-by: Balamurugan Mahalingam<quic_bmahalin@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c    | 16 ++++++++++------
 drivers/net/wireless/ath/ath12k/dp_tx.c | 12 ++++++++----
 drivers/net/wireless/ath/ath12k/dp_tx.h |  3 ++-
 drivers/net/wireless/ath/ath12k/pci.c   | 18 ++++++++++++++++--
 4 files changed, 36 insertions(+), 13 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -954,11 +954,17 @@ int ath12k_dp_service_srng(struct ath12k
 
 	while (i < ab->hw_params->max_tx_ring) {
 		if (tx_mask &
-		    BIT(ab->hw_params->hal_ops->tcl_to_wbm_rbm_map[i].wbm_ring_num))
-			ath12k_dp_tx_completion_handler(ab, i);
+		    BIT(ab->hw_params->hal_ops->tcl_to_wbm_rbm_map[i].wbm_ring_num)) {
+			work_done = ath12k_dp_tx_completion_handler(ab, i,
+								    budget);
+			budget -= work_done;
+			tot_work_done += work_done;
+			if (budget <= 0)
+				goto done;
+		}
 		i++;
 	}
-	
+
 	if (rx_err_mask) {
 		work_done = ath12k_dp_rx_process_err(ab, napi, budget);
 		budget -= work_done;
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1016,7 +1016,8 @@ static inline bool ath12k_dp_tx_completi
 	return true;
 }
 
-void ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id)
+int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
+				    int budget)
 {
 	struct ath12k *ar;
 	struct ath12k_dp *dp = &ab->dp;
@@ -1030,6 +1031,7 @@ void ath12k_dp_tx_completion_handler(str
 	u64 desc_va;
 	u32 desc_id;
 	int valid_entries;
+	int workdone = 0;
 	struct hal_wbm_completion_ring_tx tx_status = { 0 };
 	enum hal_wbm_rel_src_module buf_rel_source;
 
@@ -1039,12 +1041,12 @@ void ath12k_dp_tx_completion_handler(str
 	valid_entries = ath12k_hal_srng_dst_num_free(ab, status_ring, false);
 	if (!valid_entries) {
 		ath12k_hal_srng_access_umac_dst_ring_end_nolock(ab->mem, status_ring);
-		return;
+		return workdone;
 	}
 
 	ath12k_hal_srng_dst_invalidate_entry(ab, status_ring, valid_entries);
 
-	while ((desc = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
+	while (budget && (desc = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
 		if (!ath12k_dp_tx_completion_valid(desc))
 			continue;
 
@@ -1087,6 +1089,7 @@ void ath12k_dp_tx_completion_handler(str
 			continue;
 		}
 
+		workdone++;
 		pdev_id = ath12k_hw_mac_id_to_pdev_id(ab->hw_params, mac_id);
 		ar = ab->pdevs[pdev_id].ar;
 
@@ -1096,9 +1099,11 @@ void ath12k_dp_tx_completion_handler(str
 		ath12k_dp_tx_complete_msdu(ar, msdu, &tx_status,
 					   buf_rel_source, skb_ext_desc,
 					   tx_ring->tcl_data_ring_id);
+		budget--;
 	}
 	ath12k_hal_srng_access_umac_dst_ring_end_nolock(ab->mem, status_ring);
 
+	return workdone;
 }
 
 static int
--- a/drivers/net/wireless/ath/ath12k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.h
@@ -218,7 +218,8 @@ int ath12k_dp_tx_htt_h2t_ver_req_msg(str
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 		 struct ath12k_sta *ahsta, struct sk_buff *skb,
 		 bool gsn_valid, int mcbc_gsn);
-void ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id);
+int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
+				    int tx_comp_budget);
 
 int ath12k_dp_tx_htt_h2t_ppdu_stats_req(struct ath12k *ar, u32 mask);
 int
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -30,6 +30,10 @@
 #define TCSR_SOC_HW_VERSION		0x1B00000
 #define TCSR_SOC_HW_VERSION_MAJOR_MASK	GENMASK(11, 8)
 #define TCSR_SOC_HW_VERSION_MINOR_MASK	GENMASK(7, 4)
+/* choose a little lower value for tx completion processing
+ * to give priority for enqueue */
+#define ATH12K_TX_COMP_NAPI_BUDGET 0x5F
+
 
 /* BAR0 + 4k is always accessible, and no
  * need to force wakeup.
@@ -545,6 +549,11 @@ static int ath12k_pci_ext_irq_config(str
 		else
 			budget = ath12k_napi_poll_budget;
 
+		/* Apply a reduced budget for tx completion to prioritize tx
+		 * enqueue operation */
+		if (ab->hw_params->ring_mask->tx[i])
+			budget = ATH12K_TX_COMP_NAPI_BUDGET;
+
 		netif_napi_add(&irq_grp->napi_ndev, &irq_grp->napi,
 			       ath12k_pci_ext_grp_napi_poll, budget);
 
