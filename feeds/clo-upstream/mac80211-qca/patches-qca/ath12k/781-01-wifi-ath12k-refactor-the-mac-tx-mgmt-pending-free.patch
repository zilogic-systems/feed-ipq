From 7d3e91eb70470c5c82c8e337ae2e9d30a1167b7c Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Wed, 7 Jun 2023 21:51:16 +0530
Subject: [PATCH 1/2] wifi: ath12k: refactor the mac tx mgmt pending free

Remove the ath12k_mac_vif_txmgmt_idr_remove() by make use of
ath12k_mac_tx_mgmt_pending_free() through the argument context
type as a scalable to free the tx mgmt pending.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  6 +++-
 drivers/net/wireless/ath/ath12k/mac.c  | 42 +++++++++++++++++---------
 drivers/net/wireless/ath/ath12k/mac.h  |  9 ++++++
 3 files changed, 42 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1768,6 +1768,7 @@ static void ath12k_core_pre_reconfigure_
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
 	struct ath12k_link_vif *arvif;
+	struct ath12k_mac_tx_mgmt_free_arg arg;
 	int i;
 
 	spin_lock_bh(&ab->base_lock);
@@ -1797,8 +1798,11 @@ static void ath12k_core_pre_reconfigure_
 		complete(&ar->bss_survey_done);
 		complete(&ar->thermal.wmi_sync);
 
+		memset(&arg, 0, sizeof(arg));
+		arg.ar = ar;
+		arg.type = u8_encode_bits(true, ATH12K_MAC_TX_MGMT_FREE_TYPE_PDEV);
 		idr_for_each(&ar->txmgmt_idr,
-			     ath12k_mac_tx_mgmt_pending_free, ar);
+			     ath12k_mac_tx_mgmt_pending_free, &arg);
 		idr_destroy(&ar->txmgmt_idr);
 		wake_up(&ar->tx_empty_waitq);
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8654,23 +8654,26 @@ static void ath12k_mac_tx_mgmt_free(stru
 
 int ath12k_mac_tx_mgmt_pending_free(int buf_id, void *skb, void *ctx)
 {
-	struct ath12k *ar = ctx;
+	struct ath12k_mac_tx_mgmt_free_arg *arg = ctx;
+	struct ath12k_skb_cb *skb_cb = ATH12K_SKB_CB((struct sk_buff *)skb);
+	struct ath12k *ar = NULL;
 
-	ath12k_mac_tx_mgmt_free(ar, buf_id);
-	
- 	return 0;
- }
+	if (u8_get_bits(arg->type, ATH12K_MAC_TX_MGMT_FREE_TYPE_PDEV))
+		ar = arg->ar;
 
-static int ath12k_mac_vif_txmgmt_idr_remove(int buf_id, void *skb, void *ctx)
-{
-	struct ieee80211_vif *vif = ctx;
-	struct ath12k_skb_cb *skb_cb = ATH12K_SKB_CB(skb);
-	struct ath12k *ar = skb_cb->ar;
+	/* If radio invalid, dont proceed */
+	if (!ar)
+		goto out;
 
-	if (skb_cb->vif == vif) {
-		ath12k_mac_tx_mgmt_free(ar, buf_id);
+	/* If vif valid, then free the match vif alone */
+	if (u8_get_bits(arg->type, ATH12K_MAC_TX_MGMT_FREE_TYPE_VIF)) {
+		if (skb_cb->vif != arg->vif)
+			goto out;
 	}
 
+	ath12k_mac_tx_mgmt_free(arg->ar, buf_id);
+
+out:
 	return 0;
 }
 
@@ -10709,6 +10712,7 @@ static void ath12k_mac_remove_link_inter
 	struct ieee80211_vif *vif = ahvif->vif;
 	struct ath12k_key_conf *key_conf, *tmp;
 	struct ath12k_base *ab;
+	struct ath12k_mac_tx_mgmt_free_arg arg = { };
 	int ret;
 
 	cancel_work_sync(&arvif->update_obss_color_notify_work);
@@ -10765,8 +10769,15 @@ err_vdev_del:
 	ath12k_peer_cleanup(ar, arvif->vdev_id);
 
 	spin_lock_bh(&ar->data_lock);
+
+	arg.ar = ar;
+	arg.vif = vif;
+	arg.type = u8_encode_bits(true, ATH12K_MAC_TX_MGMT_FREE_TYPE_PDEV) |
+		   u8_encode_bits(true, ATH12K_MAC_TX_MGMT_FREE_TYPE_VIF);
+
 	idr_for_each(&ar->txmgmt_idr,
-		     ath12k_mac_vif_txmgmt_idr_remove, vif);
+		     ath12k_mac_tx_mgmt_pending_free, &arg);
+
 	spin_unlock_bh(&ar->data_lock);
 
 	ath12k_mac_vif_unref(&ab->dp, vif);
@@ -15279,9 +15290,12 @@ static void __ath12k_mac_pre_unregister(
 
 static void __ath12k_mac_post_unregister(struct ath12k *ar)
 {
+	struct ath12k_mac_tx_mgmt_free_arg arg = { };
 	int i;
 
-	idr_for_each(&ar->txmgmt_idr, ath12k_mac_tx_mgmt_pending_free, ar);
+	arg.ar = ar;
+	arg.type = u8_encode_bits(true, ATH12K_MAC_TX_MGMT_FREE_TYPE_PDEV);
+	idr_for_each(&ar->txmgmt_idr, ath12k_mac_tx_mgmt_pending_free, &arg);
 	idr_destroy(&ar->txmgmt_idr);
 
 	kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -30,6 +30,15 @@ struct ath12k_mac_num_chanctxs_arg {
 	int num;
 };
 
+#define ATH12K_MAC_TX_MGMT_FREE_TYPE_PDEV	BIT(0)
+#define ATH12K_MAC_TX_MGMT_FREE_TYPE_VIF	BIT(1)
+
+struct ath12k_mac_tx_mgmt_free_arg {
+	u8 type;
+	struct ath12k *ar;
+	struct ieee80211_vif *vif;
+};
+
 /* Default link after the IEEE802.11 defined Max link id limit
  * for driver usage purpose
  */
