From dc3d0124fe7bea10eb39318d5bcd1bd10e9c9fff Mon Sep 17 00:00:00 2001
From: Arulanbu Balusamy <quic_abalusam@quicinc.com>
Date: Thu, 8 Jun 2023 23:36:57 +0530
Subject: [PATCH] Overflow header changes


This changes has ath12k integration with OpenWRT-ginger branch, Also
fixed the various compilation issues due to kernel upgradation from 5.x to 6.x,
some API names are changed and some unsupported API are disable in the kernel 6.x
this patch support for both the kernel versions

Signed-off-by: Arulanbu Balusamy <quic_abalusam@quicinc.com>
---
 include/linux/overflow.h | 2 ++
 1 file changed, 2 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/ahb.h
+++ b/drivers/net/wireless/ath/ath12k/ahb.h
@@ -7,7 +7,7 @@
 #define ATH12K_AHB_H
 
 #include <linux/remoteproc.h>
-
+#include <linux/remoteproc/qcom_rproc.h>
 #include "core.h"
 
 #define ATH12K_AHB_RECOVERY_TIMEOUT (3 * HZ)
@@ -47,24 +47,33 @@ static inline struct ath12k_ahb *ath12k_
 {
 	return (struct ath12k_ahb *)ab->drv_priv;
 }
-
-static inline int ath12k_rproc_register_subsys_notifier(const char *name,
-							struct notifier_block *nb,
-							struct notifier_block *atomic_nb)
+static inline int ath12k_rproc_register_subsys_notifier(struct ath12k_base *ab)
 {
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 #ifdef CONFIG_REMOTEPROC
-	return rproc_register_subsys_notifier(name, nb, atomic_nb);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+	return rproc_register_subsys_notifier(ab_ahb->tgt_rrproc->name, &ab->ssr_nb, &ab->atomic_ssr_nb);
+#else
+	ab->ssr_handle = qcom_register_ssr_notifier(ab_ahb->tgt_rrproc->name, &ab->atomic_ssr_nb);
+	if (!ab->ssr_handle)
+		return -EINVAL;
+	return 0;
+#endif
 #else
 	return -ENODEV;
 #endif
 }
-
-static inline int ath12k_rproc_unregister_subsys_notifier(const char *name,
-							  struct notifier_block *nb,
-							  struct notifier_block *atomic_nb)
+static inline int ath12k_rproc_unregister_subsys_notifier(struct ath12k_base *ab)
 {
 #ifdef CONFIG_REMOTEPROC
-	return rproc_unregister_subsys_notifier(name, nb, atomic_nb);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	return rproc_unregister_subsys_notifier(ab_ahb->tgt_rrproc->name, &ab->ssr_nb, &ab->atomic_ssr_nb);
+#else
+	if (ab->ssr_handle)
+		qcom_unregister_ssr_notifier(ab->ssr_handle, &ab->atomic_ssr_nb);
+	return 0;
+#endif
 #else
 	return -ENODEV;
 #endif
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1659,8 +1659,7 @@ static int ath12k_core_ssr_notifier_cb(s
 				       void *data)
 {
 	struct ath12k_base *ab = container_of(nb, struct ath12k_base, ssr_nb);
-
-	if (ab->collect_dump && (event == SUBSYS_AFTER_POWERUP)) {
+		if (ab->collect_dump && (event == ATH12K_SSR_POWERUP)) {
 		ab->collect_dump = false;
 		wake_up(&ab->ssr_dump_wq);
 		return NOTIFY_OK;
@@ -1681,9 +1680,7 @@ static int ath12k_core_atomic_ssr_notifi
 	struct device_node *rrproc_node = NULL;
 	struct platform_device *ssr_pdev = (struct platform_device *)data;
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-
-
-	if (event != SUBSYS_PREPARE_FOR_FATAL_SHUTDOWN)
+	if (event != ATH12K_SSR_PREPARE_SHUTDOWN)
 		return NOTIFY_DONE;
 
 	ab->collect_dump = true;
@@ -1963,7 +1960,6 @@ static void ath12k_rproc_recovery_do_cor
 		rproc->ops->coredump(rproc);
 	}
 }
-
 static int ath12k_rproc_recovery_stop_coredump(struct ath12k_base *ab)
 {
 	int ret;
@@ -1971,7 +1967,11 @@ static int ath12k_rproc_recovery_stop_co
 
 	if (ab_ahb->tgt_rproc) {
 		ab_ahb->tgt_rproc->state = RPROC_CRASHED;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		ret = rproc_stop(ab_ahb->tgt_rproc, true);
+#else
+		ret = rproc_shutdown(ab_ahb->tgt_rproc);
+#endif
 		if (ret < 0) {
 			ath12k_err(ab, "userpd rproc stop failed\n");
 			return ret;
@@ -1980,7 +1980,11 @@ static int ath12k_rproc_recovery_stop_co
 	}
 	if (ab_ahb->tgt_rrproc) {
 		ab_ahb->tgt_rrproc->state = RPROC_RUNNING;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		ret = rproc_stop(ab_ahb->tgt_rrproc, true);
+#else
+		ret = rproc_shutdown(ab_ahb->tgt_rrproc);
+#endif
 		if (ret < 0) {
 			ath12k_err(ab, "rootpd rproc stop failed\n");
 			return ret;
@@ -2010,7 +2014,11 @@ static int ath12k_rproc_recovery_power_u
 			ath12k_err(ab, "request_firmware failed: %d\n", ret);
 			return ret;
 		}
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		ret = rproc_start(rproc_rpd, firmware_p);
+#else
+		ret = rproc_boot(rproc_rpd);
+#endif
 		if (ret < 0) {
 			ath12k_err(ab, "Root pd rproc_start failed: %d\n", ret);
 			return ret;
@@ -2025,7 +2033,11 @@ static int ath12k_rproc_recovery_power_u
 						ret);
 				return ret;
 			}
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 			ret = rproc_start(rproc, firmware_p);
+#else
+			ret = rproc_boot(rproc);
+#endif
 			if (ret < 0) {
 				ath12k_err(ab, "User pd rproc_start failed: %d\n", ret);
 				return ret;
@@ -2076,6 +2088,7 @@ static void ath12k_core_disable_ppe_rtnl
 }
 #endif
 
+
 static void ath12k_core_reset(struct work_struct *work)
 {
 	struct ath12k_base *ab = container_of(work, struct ath12k_base, reset_work);
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -9,6 +9,9 @@
 #include "core.h"
 #include "rx_desc.h"
 #include "debug.h"
+#if LINUX_VERSION_IS_GEQ(5,10,0)
+#include "crypto/hash.h"
+#endif
 
 /* different supported pkt types for routing */
 enum ath12k_routing_pkt_type {
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -307,7 +307,6 @@ int ath12k_dp_tx_direct(struct ath12k_li
 	tx_desc->mac_id = arvif->pdev_idx;
 	tx_desc->recycler_fast_xmit = 0;
 	tx_desc->timestamp = ktime_get_real();
-
 	/* the edma driver uses this flags to optimize the cache invalidation */
 	skb->fast_recycled = 1;
 	if (skb->is_from_recycler)
@@ -1640,7 +1639,6 @@ int ath12k_dp_tx_completion_handler(stru
 	}
 	ath12k_hal_srng_access_dst_ring_end_nolock(status_ring);
 	dev_kfree_skb_list_fast(&free_list_head);
-
 	return (orig_budget - budget);
 }
 
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -931,6 +931,8 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_3);
 		ppdu_info->eht_data[2] |= (ru_allocation2_3 << EHT_RU_ALLOCATION2_3_SHIFT);
 	        /* fallthrough */
+		fallthrough;
+
 	case HAL_EHT_BW_160:
 		num_ru_allocation_known += 2;
 		ru_allocation2_2 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
@@ -942,6 +944,8 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 		ppdu_info->eht_data[2] |=
 				(ru_allocation2_1 << EHT_RU_ALLOCATION2_1_SHIFT);
 		/* fallthrough */
+		fallthrough;
+
 	case HAL_EHT_BW_80:
 		num_ru_allocation_known += 1;
 		ru_allocation1_2 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb1->info0),
@@ -949,6 +953,8 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 		ppdu_info->eht_data[1] |=
 				(ru_allocation1_2 << EHT_RU_ALLOCATION1_2_SHIFT);
 		/* fallthrough */
+		fallthrough;
+
 	case HAL_EHT_BW_40:
 	case HAL_EHT_BW_20:
 		num_ru_allocation_known += 1;
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -786,7 +786,7 @@ struct hal_eht_sig_ofdma_cmn_eb1 {
 	__le64 info0;
 } __packed;
 
-#define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1		GENMASK_ULL(0, 8)
+#define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1		GENMASK_ULL(8, 0)
 #define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_2		GENMASK_ULL(17, 9)
 #define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_3		GENMASK_ULL(26, 18)
 #define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_4		GENMASK_ULL(35, 27)
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -64,6 +64,14 @@ extern unsigned int ath12k_frame_mode;
 #define ATH12K_MAX_MLO_PEERS		256
 #define ATH12K_MLO_PEER_ID_INVALID	0xFFFF
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+#define ATH12K_SSR_POWERUP SUBSYS_AFTER_POWERUP
+#define ATH12K_SSR_PREPARE_SHUTDOWN SUBSYS_PREPARE_FOR_FATAL_SHUTDOWN
+#else
+#define ATH12K_SSR_POWERUP QCOM_SSR_AFTER_POWERUP
+#define ATH12K_SSR_PREPARE_SHUTDOWN QCOM_SSR_NOTIFY_CRASH
+#endif
+
 enum ath12k_bdf_search {
     ATH12K_BDF_SEARCH_DEFAULT,
     ATH12K_BDF_SEARCH_BUS_AND_BOARD,
@@ -1343,6 +1351,7 @@ struct ath12k_base {
 	bool collect_dump;
 	struct notifier_block ssr_nb;
 	struct notifier_block atomic_ssr_nb;
+    void *ssr_handle;
 	struct completion reconfigure_complete;
 	unsigned long reset_fail_timeout;
         /* continuous recovery fail count */
--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -506,9 +506,13 @@ static int ath12k_ahb_config_ext_irq(str
 		irq_grp->ab = ab;
 		irq_grp->grp_id = i;
 		init_dummy_netdev(&irq_grp->napi_ndev);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		netif_napi_add(&irq_grp->napi_ndev, &irq_grp->napi,
 			       ath12k_ahb_ext_grp_napi_poll, NAPI_POLL_WEIGHT);
-
+#else
+		 netif_napi_add_weight(&irq_grp->napi_ndev, &irq_grp->napi,
+                               ath12k_ahb_ext_grp_napi_poll, NAPI_POLL_WEIGHT);
+#endif
 		for (j = 0; j < ATH12K_EXT_IRQ_NUM_MAX; j++) {
 			if (ab->hw_params->ring_mask->tx[i]  &&
 					(j <= ATH12K_MAX_TCL_RING_NUM) &&
@@ -635,20 +639,12 @@ static int ath12k_ahb_map_service_to_pip
 
 static int ath12k_ahb_ssr_notifier_reg(struct ath12k_base *ab)
 {
-	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-
-	return ath12k_rproc_register_subsys_notifier(ab_ahb->tgt_rrproc->name,
-						     &ab->ssr_nb,
-						     &ab->atomic_ssr_nb);
+	return ath12k_rproc_register_subsys_notifier(ab);
 }
 
 static int ath12k_ahb_ssr_notifier_unreg(struct ath12k_base *ab)
 {
-	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-
-	return ath12k_rproc_unregister_subsys_notifier(ab_ahb->tgt_rrproc->name,
-						       &ab->ssr_nb,
-						       &ab->atomic_ssr_nb);
+	return ath12k_rproc_unregister_subsys_notifier(ab);
 }
 
 static const struct ath12k_hif_ops ath12k_ahb_hif_ops_ipq5332 = {
