From f81b597ba49b561504c1593ba86399f2b5871542 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Tue, 18 Jul 2023 23:25:08 +0530
Subject: [PATCH] ath12k: fix traffic stall with MLO AP+Mon coexist

With MLO AP+Mon coexist, encap/decap of the AP interfaces gets updated only
for the deflink, for the other link, data is getting stalled due to this
incorrect encap/decap set between two links.

Fix by properly updating encap/decap type through offload_flags to all the mlo
vif links.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 41 +++++++++++++++++----------
 1 file changed, 26 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -9898,31 +9898,38 @@ static void ath12k_mac_update_vif_offloa
 	}
 }
 
-static void ath12k_mac_op_update_vif_offload(struct ieee80211_hw *hw,
-					     struct ieee80211_vif *vif)
+static void ath12k_mac_hdl_update_vif_offload(struct ath12k_link_vif *arvif)
 {
-	struct ath12k_hw *ah = hw->priv;
-	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
-	struct ath12k_link_vif *arvif;
-
-	mutex_lock(&ah->conf_mutex);
-
-	/* TODO ML link vifs handling, currently checking default only */
-	/* If the update_vif_offload() is received from mac80211 before
-	 * vdev is created, no action is needed since the flags would
-	 * be applied right after vdev create based on vif->offload_flags
-	 */
-	arvif = &ahvif->deflink;
 	if (!arvif->ar) {
 		ath12k_info(NULL,
-			    "unable to determine device to apply vif encap/decap flags, setting will be applied on channel assignment\n");
-		mutex_unlock(&ah->conf_mutex);
+				"unable to determine device to apply vif encap/decap flags, setting will be applied on channel assignment\n");
 		return;
 	}
 
 	ath12k_mac_update_vif_offload(arvif->ar, arvif);
 	ath12k_dp_tx_update_bank_profile(arvif);
+}
 
+static void ath12k_mac_op_update_vif_offload(struct ieee80211_hw *hw,
+					     struct ieee80211_vif *vif)
+{
+	struct ath12k_hw *ah = hw->priv;
+	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
+	struct ath12k_link_vif *arvif;
+	int link_id;
+
+	mutex_lock(&ah->conf_mutex);
+	if (vif->valid_links) {
+		for_each_set_bit(link_id, &vif->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+			arvif = ahvif->link[link_id];
+			if (!(arvif && arvif->ar))
+				continue;
+
+			ath12k_mac_hdl_update_vif_offload(arvif);
+		}
+	} else {
+		ath12k_mac_hdl_update_vif_offload(&ahvif->deflink);
+	}
 	mutex_unlock(&ah->conf_mutex);
 }
 
