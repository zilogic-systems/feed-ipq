From b0416d287b8012ca4326580cab8f71fe9cf3f70f Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Mon, 24 Jul 2023 10:29:24 +0530
Subject: [PATCH] wifi: ath12k: add support to enqueue radio measurement frame
 at MLD level

Currently, RRM action frames to a certain link station
gets transmitted by FW or dropped due to retransmissions if that
link station is inactive or in power save state. A ML client can
decide to use only one of its links or can decide to put it in
power save for longer periods while listening on the other link
as per MLD listen interval. In such cases allow FW to decide on
which link a certain management frame needs to be transmitted on.

Curenly deauth and dissassoc frames are enqueued as link agnostic,
extend the same for RRM beacon and neighbor req/resp action frames.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 29 +++++++++++++++++----------
 include/linux/ieee80211.h             |  1 +
 2 files changed, 19 insertions(+), 11 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8899,7 +8899,7 @@ static int ath12k_mac_mgmt_action_frame_
 						  struct sk_buff *skb)
 {
 	struct ath12k *ar = arvif->ar;
-	struct ath12k_skb_cb *skb_cb;
+	struct ath12k_skb_cb *skb_cb = ATH12K_SKB_CB(skb);
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 	struct ieee80211_mgmt *mgmt;
 	struct ieee80211_bss_conf *link_conf;
@@ -8913,8 +8913,10 @@ static int ath12k_mac_mgmt_action_frame_
 	lockdep_assert_held(&ar->conf_mutex);
 
 	/* make sure category field is present */
-	if (skb->len < IEEE80211_MIN_ACTION_SIZE)
+	if (skb->len < IEEE80211_MIN_ACTION_SIZE) {
+		skb_cb->flags &= ~ATH12K_SKB_MGMT_LINK_AGNOSTIC;
 		return -EINVAL;
+	}
 
 	has_protected = ieee80211_has_protected(hdr->frame_control);
 
@@ -8922,8 +8924,10 @@ static int ath12k_mac_mgmt_action_frame_
 	 * we can't put in data in this case
 	 */
 	if (test_bit(ATH12K_FLAG_HW_CRYPTO_DISABLED, &ar->ab->ag->dev_flags) &&
-	    has_protected)
+	    has_protected) {
+		skb_cb->flags &= ~ATH12K_SKB_MGMT_LINK_AGNOSTIC;
 		return -EOPNOTSUPP;
+	}
 
 	mgmt = (struct ieee80211_mgmt *)hdr;
 	buf = &mgmt->u.action;
@@ -8932,8 +8936,6 @@ static int ath12k_mac_mgmt_action_frame_
 	 * many bytes if it is there
 	 */
 	if (has_protected) {
-		skb_cb = ATH12K_SKB_CB(skb);
-
 		switch (skb_cb->cipher) {
 		/* Currently only for CCMP cipher suite, we asked for it via
 		 * setting %IEEE80211_KEY_FLAG_GENERATE_IV_MGMT in key. Check
@@ -8953,6 +8955,7 @@ static int ath12k_mac_mgmt_action_frame_
 			iv_len = 0;
 			break;
 		default:
+			skb_cb->flags &= ~ATH12K_SKB_MGMT_LINK_AGNOSTIC;
 			return -EINVAL;
 		}
 
@@ -9022,6 +9025,7 @@ check_rm_action_frame:
 			ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 				   "RRM: Link Measurement Req dialog_token=%u, cur_tx_power=%d, max_tx_power=%d\n",
 				   dialog_token, cur_tx_power, max_tx_power);
+			skb_cb->flags &= ~ATH12K_SKB_MGMT_LINK_AGNOSTIC;
 			break;
 		case WLAN_ACTION_RADIO_MSR_LINK_MSR_REP:
 			/* Variable Len Format:
@@ -9037,6 +9041,7 @@ check_rm_action_frame:
 			ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 				   "RRM: Link Measurement Resp dialog_token=%u, cur_tx_power=%d\n",
 				   dialog_token, cur_tx_power);
+			skb_cb->flags &= ~ATH12K_SKB_MGMT_LINK_AGNOSTIC;
 			break;
 		default:
 			return -EINVAL;
@@ -9044,6 +9049,7 @@ check_rm_action_frame:
 		break;
 	default:
 		/* nothing to fill */
+		skb_cb->flags &= ~ATH12K_SKB_MGMT_LINK_AGNOSTIC;
 		return 0;
 	}
 
@@ -9192,8 +9198,7 @@ static bool ath12k_mac_is_mgmt_link_agno
 	struct ieee80211_mgmt *mgmt;
 	mgmt = (struct ieee80211_mgmt *)skb->data;
 
-	if (ieee80211_is_deauth(mgmt->frame_control) ||
-		ieee80211_is_disassoc(mgmt->frame_control))
+	if (ieee80211_is_action(mgmt->frame_control))
 		return true;
 
 	/* TODO Extend as per requirement */
@@ -9296,9 +9301,9 @@ static u8 ath12k_mac_get_tx_link(struct
 		 */
 		if (ath12k_mac_is_mgmt_link_agnostic(skb)) {
 			ATH12K_SKB_CB(skb)->flags |= ATH12K_SKB_MGMT_LINK_AGNOSTIC;
-			ath12k_dbg(NULL, ATH12K_DBG_MGMT,
-				   "Sending Mgmt Frame (fc %x) as link agnostic to ML STA %pM \n",
-				   hdr->frame_control, sta->addr);
+			/* For action frames this will be reset if not needed
+			 * later based on action category.
+			 */
 		}
 	}
 
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -3180,6 +3180,7 @@ ieee80211_eht_oper_size_ok(const u8 *dat
 #define IEEE80211_SPCT_MSR_RPRT_TYPE_BASIC	0
 #define IEEE80211_SPCT_MSR_RPRT_TYPE_CCA	1
 #define IEEE80211_SPCT_MSR_RPRT_TYPE_RPI	2
+#define IEEE80211_SPCT_MSR_RPRT_TYPE_BCN	5
 #define IEEE80211_SPCT_MSR_RPRT_TYPE_LCI	8
 #define IEEE80211_SPCT_MSR_RPRT_TYPE_CIVIC	11
 
