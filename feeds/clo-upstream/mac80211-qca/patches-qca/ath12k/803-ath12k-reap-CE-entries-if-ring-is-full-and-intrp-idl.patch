From 07b3324b76a9cbb654666269980787127b710fa5 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Tue, 11 Jul 2023 15:30:51 +0530
Subject: [PATCH 1/3] ath12k: reap CE entries if ring is full and intrp idle
 for 500ms

If there is no buffer to send packet via HTC, then check if
interrupts are not processed from that CE for last 500ms.
If so, schedule a tasklet to reap available entries.

This change is added because there is a case where intermittently
completion interrupts are not received from CE3 and hence adding
this WAR in host to come out of this issue scenario.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ce.c  | 40 ++++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/ce.h  |  4 ++-
 drivers/net/wireless/ath/ath12k/hal.c |  7 +++--
 drivers/net/wireless/ath/ath12k/hw.c  |  1 +
 drivers/net/wireless/ath/ath12k/hw.h  |  1 +
 5 files changed, 46 insertions(+), 7 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/ce.c
+++ b/drivers/net/wireless/ath/ath12k/ce.c
@@ -752,6 +752,29 @@ void ath12k_ce_poll_send_completed(struc
 		ath12k_ce_tx_process_cb(pipe);
 }
 
+#define CE_RING_FULL_THRESHOLD_TIME_MS 500
+#define ATH12K_MAX_CE_MANUAL_RETRY	3
+/* Ths function is called from ce_send path. Returns true If there is no buffer
+ * to send packet via HTC, then check if interrupts are not processed from that
+ * CE for last 500ms. If so, poll manually to reap available entries.
+ */
+static bool ath12k_is_manual_ce_poll_needed(struct ath12k_base *ab, struct ath12k_ce_pipe *pipe, struct hal_srng *srng)
+{
+	if (!ab->hw_params->support_ce_manual_poll)
+		return false;
+
+	if (time_after
+	    (jiffies, pipe->timestamp + msecs_to_jiffies(CE_RING_FULL_THRESHOLD_TIME_MS)) &&
+	    (srng->u.src_ring.hp == srng->u.src_ring.reap_hp) &&
+		 (srng->u.src_ring.reap_hp == *srng->u.src_ring.tp_addr)) {
+		pipe->ce_manual_poll_count++;
+		pipe->last_ce_manual_poll_ts = jiffies;
+		return true;
+	}
+
+	return false;
+}
+
 int ath12k_ce_send(struct ath12k_base *ab, struct sk_buff *skb, u8 pipe_id,
 		   u16 transfer_id)
 {
@@ -762,7 +785,7 @@ int ath12k_ce_send(struct ath12k_base *a
 	unsigned int nentries_mask;
 	int ret = 0;
 	u8 byte_swap_data = 0;
-	int num_used;
+	int num_used, retry = 0;
 
 	/* Check if some entries could be regained by handling tx completion if
 	 * the CE has interrupts disabled and the used entries is more than the
@@ -788,7 +811,7 @@ int ath12k_ce_send(struct ath12k_base *a
 
 	if (test_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags))
 		return -ESHUTDOWN;
-
+retry:
 	spin_lock_bh(&ab->ce.ce_lock);
 
 	write_index = pipe->src_ring->write_index;
@@ -809,8 +832,17 @@ int ath12k_ce_send(struct ath12k_base *a
 	desc = ath12k_hal_srng_src_get_next_reaped(ab, srng);
 	if (!desc) {
 		ath12k_hal_srng_access_end(ab, srng);
-		ret = -ENOBUFS;
-		goto unlock;
+		if (retry++ < ATH12K_MAX_CE_MANUAL_RETRY &&
+		    ath12k_is_manual_ce_poll_needed(ab, pipe, srng)) {
+			spin_unlock_bh(&srng->lock);
+			spin_unlock_bh(&ab->ce.ce_lock);
+
+			ath12k_ce_tx_process_cb(pipe);
+			goto retry;
+		} else {
+			ret = -ENOBUFS;
+			goto unlock;
+		}
 	}
 
 	if (pipe->attr_flags & CE_ATTR_BYTE_SWAP_DATA)
--- a/drivers/net/wireless/ath/ath12k/ce.h
+++ b/drivers/net/wireless/ath/ath12k/ce.h
@@ -165,7 +165,9 @@ struct ath12k_ce_pipe {
 	struct ath12k_ce_ring *src_ring;
 	struct ath12k_ce_ring *dest_ring;
 	struct ath12k_ce_ring *status_ring;
-	u64 timestamp;
+	unsigned long timestamp;
+	u32 ce_manual_poll_count;
+	u64 last_ce_manual_poll_ts;
 };
 
 struct ath12k_ce {
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -2584,9 +2584,12 @@ void ath12k_hal_dump_srng_stats(struct a
 		if (ath12k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
-		ath12k_err(ab, "CE_id %d pipe_num %d %ums before\n",
+		ath12k_err(ab,"CE_id %d pipe_num %d %ums before ce_manual_poll_count %d "
+				"ce_last_manual_tasklet_schedule_ts %ums before\n",
 			   i, ce_pipe->pipe_num,
-			   jiffies_to_msecs(jiffies - ce_pipe->timestamp));
+			   jiffies_to_msecs(jiffies - ce_pipe->timestamp),
+			   ce_pipe->ce_manual_poll_count,
+			   jiffies_to_msecs(jiffies - ce_pipe->last_ce_manual_poll_ts));
 	}
 
 	ath12k_err(ab, "\nLast interrupt received for each group:\n");
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1636,6 +1636,7 @@ static struct ath12k_hw_params ath12k_hw
 		.send_platform_model = true,
 		.en_fwlog = true,
 		.support_umac_reset = false,
+		.support_ce_manual_poll=true,
 	},
 };
 
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -230,6 +230,7 @@ struct ath12k_hw_params {
 	const struct ce_remap *ce_remap;
 	const struct cmem_remap *cmem_remap;
 	bool compact_rx_tlv;
+	bool support_ce_manual_poll;
 	const struct pmm_remap *pmm_remap;
 	bool support_umac_reset;
 };
