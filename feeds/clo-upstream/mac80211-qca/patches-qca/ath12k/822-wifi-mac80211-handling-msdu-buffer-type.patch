From 1538131d583bd9e377831b35253a648095e276b9 Mon Sep 17 00:00:00 2001
From: Logapriya P <quic_logapriy@quicinc.com>
Date: Thu, 27 Jul 2023 19:21:55 +0530
Subject: [PATCH] ath12k: add handling for MSDU buffer type

REO exception ring of IPQ5322 receives buffer type other than
MSDU descriptor type which is unexpected behaviour. This results
in triggering host BUG_ON. In the multiclient, this particular
behaviour is observed frequently.

The above packets are sent from un-associated peers and AST lookup
for the same is expected to fail. Hence, added code to handle the same
as MSDU buffer type.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
Signed-off-by: Logapriya P <quic_logapriy@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  1 +
 drivers/net/wireless/ath/ath12k/debugfs.c |  2 ++
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 40 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.h   |  1 +
 drivers/net/wireless/ath/ath12k/hal_rx.c  |  6 ----
 5 files changed, 44 insertions(+), 6 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1201,6 +1201,7 @@ struct ath12k_soc_dp_stats {
 	struct ath12k_dp_ring_bp_stats bp_stats;
 	u32 reo_cmd_update_rx_queue_error;
 	u32 first_and_last_msdu_bit_miss;
+	u32 reo_excep_msdu_buf_type;
 };
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1626,6 +1626,8 @@ static ssize_t ath12k_debugfs_dump_soc_d
 		len += scnprintf(buf + len, size - len, "%s: handled %u dropped %u\n",
 				 reo_err[i], soc_stats->reo_error[i],
 				 soc_stats->reo_error_drop[i]);
+	len += scnprintf(buf + len, size - len, "REO excep MSDU buf type:%u\n",
+			soc_stats->reo_excep_msdu_buf_type);
 
 	len += scnprintf(buf + len, size - len, "\nHAL REO errors:\n");
 	len += scnprintf(buf + len, size - len,
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4405,6 +4405,37 @@ int ath12k_dp_rx_process_err(struct ath1
 					sizeof(*reo_desc), srng);
 			BUG_ON(1);
 		}
+
+                hw_link_id = u32_get_bits(reo_desc->info0,
+                                          HAL_REO_DEST_RING_INFO0_SRC_LINK_ID);
+
+                rcu_read_lock();
+                if (hw_link_id < ATH12K_GROUP_MAX_RADIO)
+                        ar = rcu_dereference(ab->ag->hw_links[hw_link_id]);
+		else
+			ar = NULL;
+
+                rcu_read_unlock();
+
+                if (!ar || ar->ab != ab) {
+                        ath12k_err(ab, "invalid src link id %d drop %d on chip id %d err process\n",
+                                   hw_link_id, drop, ab->chip_id);
+
+                        ath12k_err_dump(ab, NULL, "rx err desc: ", reo_desc,
+                                        sizeof(*reo_desc), srng);
+                        BUG_ON(1);
+                }
+
+		/* Below case is added to handle data packet from un-associated clients.
+		 * As it is expected that AST lookup will fail for
+		 * un-associated station's data packets.
+		 */
+		if (u32_get_bits(reo_desc->info0, HAL_REO_DEST_RING_INFO0_BUFFER_TYPE) ==
+			HAL_REO_DEST_RING_BUFFER_TYPE_MSDU) {
+				ath12k_dp_h_msdu_buffer_type(ab, reo_desc);
+				continue;
+		}
+
 		link_desc_va = link_desc_banks[desc_bank].vaddr +
 			       (paddr - link_desc_banks[desc_bank].paddr);
 		ath12k_hal_rx_msdu_link_info_get(link_desc_va, &num_msdus, msdu_cookies,
@@ -4432,23 +4463,6 @@ int ath12k_dp_rx_process_err(struct ath1
 						      HAL_WBM_REL_BM_ACT_PUT_IN_IDLE);
 		}
 
-		hw_link_id = le32_get_bits(reo_desc->info0,
-					  HAL_REO_DEST_RING_INFO0_SRC_LINK_ID);
-
-		rcu_read_lock();
-		if (hw_link_id < ATH12K_GROUP_MAX_RADIO)
-			ar = rcu_dereference(ab->ag->hw_links[hw_link_id]);
-		rcu_read_unlock();
-
-		if (!ar || ar->ab != ab) {
-			ath12k_err(ab, "invalid src link id %d drop %d on chip id %d err process\n",
-				   hw_link_id, drop, ab->chip_id);
-
-			ath12k_err_dump(ab, NULL, "rx err desc: ", reo_desc,
-					sizeof(*reo_desc), srng);
-			BUG_ON(1);
-		}
-
 		for (i = 0; i < num_msdus; i++) {
 			if (drop)
 				ar->wmm_stats.total_wmm_rx_drop[ar->wmm_stats.rx_type]++;
@@ -5472,3 +5486,32 @@ int ath12k_dp_rx_pktlog_stop(struct ath1
 
 	return 0;
 }
+
+void ath12k_dp_h_msdu_buffer_type(struct ath12k_base *ab, u32 *rx_desc)
+{
+	struct hal_reo_dest_ring *desc = (struct hal_reo_dest_ring *)rx_desc;
+	struct ath12k_rx_desc_info *desc_info;
+	struct sk_buff *msdu;
+	u64 desc_va;
+
+	desc_va = ((u64)desc->buf_va_hi << 32 | desc->buf_va_lo);
+	desc_info = (struct ath12k_rx_desc_info *)((unsigned long)desc_va);
+	if (!desc_info) {
+		ath12k_warn(ab, " rx exception, hw cookie conversion failed");
+		goto skip_skb_free;
+	}
+
+	if (desc_info->magic != ATH12K_DP_RX_DESC_MAGIC) {\
+		ath12k_warn(ab, " rx exception, magic check failed");
+		goto skip_skb_free;
+	}
+
+	msdu = desc_info->skb;
+	desc_info->skb = NULL;
+	spin_lock_bh(&ab->dp.rx_desc_lock);
+	list_move_tail(&desc_info->list, &ab->dp.rx_desc_free_list);
+	spin_unlock_bh(&ab->dp.rx_desc_lock);
+	dev_kfree_skb_any(msdu);
+skip_skb_free:
+	ab->soc_stats.reo_excep_msdu_buf_type++;
+}
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -240,4 +240,5 @@ void ath12k_dp_peer_reo_tid_setup(struct
 void ath12k_dp_tid_setup(void *data, struct ieee80211_sta *sta);
 void ath12k_dp_reset_rx_reo_tid_q(void *vaddr, u32 ba_window_size,
 				  u8 tid);
+void ath12k_dp_h_msdu_buffer_type(struct ath12k_base *ab, u32 *rx_desc);
 #endif /* ATH12K_DP_RX_H */
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -323,7 +323,7 @@ int ath12k_hal_desc_reo_parse_err(struct
 {
 	enum hal_reo_dest_ring_push_reason push_reason;
 	enum hal_reo_dest_ring_error_code err_code;
-	u32 cookie, val;
+	u32 cookie;
 
 	push_reason = le32_get_bits(desc->info0,
 				    HAL_REO_DEST_RING_INFO0_PUSH_REASON);
@@ -338,12 +338,6 @@ int ath12k_hal_desc_reo_parse_err(struct
 		return -EINVAL;
 	}
 
-	val = le32_get_bits(desc->info0, HAL_REO_DEST_RING_INFO0_BUFFER_TYPE);
-	if (val != HAL_REO_DEST_RING_BUFFER_TYPE_LINK_DESC) {
-		ath12k_warn(ab, "expected buffer type link_desc");
-		return -EINVAL;
-	}
-
 	ath12k_hal_rx_reo_ent_paddr_get(ab, &desc->buf_addr_info, paddr, &cookie);
 	*desc_bank = u32_get_bits(cookie, DP_LINK_DESC_BANK_MASK);
 
