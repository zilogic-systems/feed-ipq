From ed202790fdd06b3b807ed920c914bd19bdf23dfc Mon Sep 17 00:00:00 2001
From: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
Date: Tue, 25 Jul 2023 12:50:00 +0530
Subject: [PATCH] ath12k:Virtual Interface Delete timeout Handler

ath12k:Fix driver state in timeout cleanup of Vif Deletion

When timeout occurs during vif delete, the cleanup only deletes the
list but driver vif state is not cleared. This leads to crash during
wifi down/ reboot where driver will still try to delete a vif which list
is already deleted. So, driver vif state clearing is included in timeout cleanup

Observed call trace:
ath12k_mac_op_change_vif_links+0x125c/0x2268 [ath12k]
ath12k_mac_ap_ps_recalc+0x22c/0x2af4 [ath12k]
ath12k_mac_ap_ps_recalc+0x790/0x2af4 [ath12k]
drv_remove_interface+0x68/0x80 [mac80211]
ieee80211_del_virtual_monitor+0xe4/0xa04 [mac80211]
ieee80211_del_virtual_monitor+0x7d4/0xa04 [mac80211]
ieee80211_del_virtual_monitor+0x9cc/0xa04 [mac80211]
__dev_close_many+0xbc/0xec
__dev_change_flags+0xd0/0x19c
dev_change_flags+0x20/0x5c
devinet_ioctl+0x258/0x580
inet_ioctl+0x678/0x6ac
sock_do_ioctl+0x4c/0x61c
sock_ioctl+0x80c/0x870
vfs_ioctl+0x24/0x48
do_vfs_ioctl+0xa3c/0xaa8
ksys_ioctl+0x44/0x74
__arm64_sys_ioctl+0x18/0x2c8
el0_svc_common.constprop.0+0x98/0x114
el0_svc_handler+0x18/0x20

Signed-off-by: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index e3aecca..0c70c11 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4939,13 +4939,13 @@ static int ath12k_mac_vdev_delete(struct ath12k *ar, struct ath12k_link_vif *arv
 	ar->ab->free_vdev_stats_id_map &= ~(1LL << arvif->vdev_stats_id);
 	ar->num_created_vdevs--;
 	arvif->ahvif->num_vdev_created--;
-	arvif->is_created = false;
-	arvif->ar = NULL;
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_SET(MAC, L1), "mac vdev delete id %d type %d subtype %d map %llx\n",
 		   arvif->vdev_id, ahvif->vdev_type, ahvif->vdev_subtype,
 		   ar->ab->free_vdev_map);
 clean_up:
+	arvif->is_created = false;
+	arvif->ar = NULL;
 	spin_lock_bh(&ar->data_lock);
 	list_del(&arvif->list);
 	spin_unlock_bh(&ar->data_lock);
-- 
2.34.1

