From ef37fa5e8968d96db5d891b496bf2b80812aac97 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Fri, 21 Jul 2023 19:10:44 +0530
Subject: [PATCH] ath12k: Add mhi_soc_reset in PCI remove flow

SOC_GLOBAL_RESET would be ignored if there is any pending
PCIe transaction. To handle all pending PCIe transactions
cleanly mhi host reset request needs to be done before calling
SOC_GLOBAL_RESET. mhi_soc_reset triggers a WDOG reset on
the target which will cleanly handle any pending PCIe transactions
and put the device in RDDM mode. After device enters in RDDM mode
SOC_GLOBAL_RESET can be called safely.

previous sequence flow
power_down -> soc_global_reset

current sequence will be
power_down -> mhi_soc_reset -> wdog_reset -> RDDM -> soc_global_reset

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  1 +
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mhi.c  | 85 ++++++++++++++++----------
 drivers/net/wireless/ath/ath12k/mhi.h  |  4 +-
 drivers/net/wireless/ath/ath12k/pci.c  | 10 +++
 5 files changed, 68 insertions(+), 33 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -3467,6 +3467,7 @@ struct ath12k_base *ath12k_core_alloc(st
 	INIT_WORK(&ab->recovery_work, ath12k_core_mode1_recovery_work);
 	timer_setup(&ab->rx_replenish_retry, ath12k_ce_rx_replenish_retry, 0);
 	init_completion(&ab->htc_suspend);
+	init_completion(&ab->rddm_reset_done);
 
 	ab->dev = dev;
 	ab->bus_params = *bus_params;
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1382,6 +1382,7 @@ struct ath12k_base {
 
 	u64 fw_soc_drop_count;
 	bool static_window_map;
+	struct completion rddm_reset_done;
 	
 	struct device_node *hremote_node;
 	u32 host_ddr_fixed_mem_off;
--- a/drivers/net/wireless/ath/ath12k/mhi.c
+++ b/drivers/net/wireless/ath/ath12k/mhi.c
@@ -323,25 +323,65 @@ static char *ath12k_mhi_op_callback_to_s
 	}
 }
 
+static char *ath12k_mhi_state_to_str(enum ath12k_mhi_state mhi_state)
+{
+	switch (mhi_state) {
+	case ATH12K_MHI_INIT:
+		return "INIT";
+	case ATH12K_MHI_DEINIT:
+		return "DEINIT";
+	case ATH12K_MHI_POWER_ON:
+		return "POWER_ON";
+	case ATH12K_MHI_POWER_OFF:
+		return "POWER_OFF";
+	case ATH12K_MHI_FORCE_POWER_OFF:
+		return "FORCE_POWER_OFF";
+	case ATH12K_MHI_SUSPEND:
+		return "SUSPEND";
+	case ATH12K_MHI_RESUME:
+		return "RESUME";
+	case ATH12K_MHI_TRIGGER_RDDM:
+		return "TRIGGER_RDDM";
+	case ATH12K_MHI_RDDM_DONE:
+		return "RDDM_DONE";
+	case ATH12K_MHI_SOC_RESET:
+		return "SOC_RESET";
+	default:
+		return "UNKNOWN";
+	}
+};
+
 static void ath12k_mhi_op_status_cb(struct mhi_controller *mhi_cntrl,
 				    enum mhi_callback cb)
 {
 	struct ath12k_base *ab = dev_get_drvdata(mhi_cntrl->cntrl_dev);
+	struct ath12k_pci *ab_pci = ath12k_pci_priv(ab);
 
-	ath12k_dbg(ab, ATH12K_DBG_BOOT, "mhi notify status reason %s\n",
-		   ath12k_mhi_op_callback_to_str(cb));
+	ath12k_dbg(ab, ATH12K_DBG_BOOT, "mhi notify status reason %s mhi_state:%s (0x%lx)\n",
+		   ath12k_mhi_op_callback_to_str(cb),
+		   ath12k_mhi_state_to_str(ab_pci->mhi_state), ab_pci->mhi_state);
 
 	switch (cb) {
 	case MHI_CB_SYS_ERROR:
 		ath12k_warn(ab, "firmware crashed: MHI_CB_SYS_ERROR\n");
 		break;
 	case MHI_CB_EE_RDDM:
-		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
+		/* In-case of rddm for mhi soc reset */
+		if(test_bit(ATH12K_MHI_SOC_RESET, &ab_pci->mhi_state)) {
+			ath12k_dbg(ab, ATH12K_DBG_BOOT, "Triggering RDDM from mhi soc reset\n");
+			clear_bit(ATH12K_MHI_SOC_RESET, &ab_pci->mhi_state);
+			complete(&ab->rddm_reset_done);
+			return;
+		}
+
+		/* In-case of rddm for fatal error and ab is registered. */
+		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->dev_flags))) {
 			set_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags);
 			set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
 			queue_work(ab->workqueue_aux, &ab->reset_work);
-		}
-		else {
+			ath12k_dbg(ab, ATH12K_DBG_BOOT, "Schedule SSR Recovery reset work queue\n");
+			ath12k_hal_dump_srng_stats(ab);
+		} else {
 			BUG_ON(1);
 		}
 		ath12k_hal_dump_srng_stats(ab);
@@ -474,32 +514,6 @@ void ath12k_mhi_unregister(struct ath12k
 	ab_pci->mhi_ctrl = NULL;
 }
 
-static char *ath12k_mhi_state_to_str(enum ath12k_mhi_state mhi_state)
-{
-	switch (mhi_state) {
-	case ATH12K_MHI_INIT:
-		return "INIT";
-	case ATH12K_MHI_DEINIT:
-		return "DEINIT";
-	case ATH12K_MHI_POWER_ON:
-		return "POWER_ON";
-	case ATH12K_MHI_POWER_OFF:
-		return "POWER_OFF";
-	case ATH12K_MHI_FORCE_POWER_OFF:
-		return "FORCE_POWER_OFF";
-	case ATH12K_MHI_SUSPEND:
-		return "SUSPEND";
-	case ATH12K_MHI_RESUME:
-		return "RESUME";
-	case ATH12K_MHI_TRIGGER_RDDM:
-		return "TRIGGER_RDDM";
-	case ATH12K_MHI_RDDM_DONE:
-		return "RDDM_DONE";
-	default:
-		return "UNKNOWN";
-	}
-};
-
 static void ath12k_mhi_set_state_bit(struct ath12k_pci *ab_pci,
 				     enum ath12k_mhi_state mhi_state)
 {
@@ -533,6 +547,9 @@ static void ath12k_mhi_set_state_bit(str
 	case ATH12K_MHI_RDDM_DONE:
 		set_bit(ATH12K_MHI_RDDM_DONE, &ab_pci->mhi_state);
 		break;
+	case ATH12K_MHI_SOC_RESET:
+		set_bit(ATH12K_MHI_SOC_RESET, &ab_pci->mhi_state);
+                break;
 	default:
 		ath12k_err(ab, "unhandled mhi state (%d)\n", mhi_state);
 	}
@@ -575,6 +592,8 @@ static int ath12k_mhi_check_state_bit(st
 		break;
 	case ATH12K_MHI_RDDM_DONE:
 		return 0;
+	case ATH12K_MHI_SOC_RESET:
+		return 0;
 	default:
 		ath12k_err(ab, "unhandled mhi state: %s(%d)\n",
 			   ath12k_mhi_state_to_str(mhi_state), mhi_state);
@@ -587,7 +606,7 @@ static int ath12k_mhi_check_state_bit(st
 	return -EINVAL;
 }
 
-static int ath12k_mhi_set_state(struct ath12k_pci *ab_pci,
+int ath12k_mhi_set_state(struct ath12k_pci *ab_pci,
 				enum ath12k_mhi_state mhi_state)
 {
 	struct ath12k_base *ab = ab_pci->ab;
@@ -630,6 +649,9 @@ static int ath12k_mhi_set_state(struct a
 		break;
 	case ATH12K_MHI_RDDM_DONE:
 		break;
+	case ATH12K_MHI_SOC_RESET:
+		mhi_soc_reset(ab_pci->mhi_ctrl);
+		break;
 	default:
 		ath12k_err(ab, "unhandled MHI state (%d)\n", mhi_state);
 		ret = -EINVAL;
--- a/drivers/net/wireless/ath/ath12k/mhi.h
+++ b/drivers/net/wireless/ath/ath12k/mhi.h
@@ -29,6 +29,7 @@ enum ath12k_mhi_state {
 	ATH12K_MHI_TRIGGER_RDDM,
 	ATH12K_MHI_RDDM,
 	ATH12K_MHI_RDDM_DONE,
+	ATH12K_MHI_SOC_RESET,
 };
 
 extern const struct mhi_controller_config ath12k_mhi_config_qcn9274;
@@ -44,5 +45,6 @@ void ath12k_mhi_clear_vector(struct ath1
 void ath12k_mhi_suspend(struct ath12k_pci *ar_pci);
 void ath12k_mhi_resume(struct ath12k_pci *ar_pci);
 void ath12k_mhi_coredump(struct mhi_controller *mhi_ctrl, bool state);
-
+int ath12k_mhi_set_state(struct ath12k_pci *ab_pci,
+                                enum ath12k_mhi_state mhi_state);
 #endif
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -860,6 +860,16 @@ void ath12k_pci_power_down(struct ath12k
 {
 	struct ath12k_pci *ab_pci = ath12k_pci_priv(ab);
 
+
+	ath12k_mhi_set_state(ab_pci, ATH12K_MHI_SOC_RESET);
+	if (!wait_for_completion_timeout(&ab->rddm_reset_done, msecs_to_jiffies(200))) {
+		ath12k_warn(ab, "failed to set RDDM mode\n");
+		if (test_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags)) {
+			ath12k_warn(ab, "failed to clear MHI SOC RESET as mhi already in rddm state due to recovery in progress, clearing it here\n");
+			clear_bit(ATH12K_MHI_SOC_RESET, &ab_pci->mhi_state);
+			reinit_completion(&ab->rddm_reset_done);
+		}
+	}
 	if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->dev_flags))) {
 		ath12k_qmi_free_target_mem_chunk(ab);
 	}
