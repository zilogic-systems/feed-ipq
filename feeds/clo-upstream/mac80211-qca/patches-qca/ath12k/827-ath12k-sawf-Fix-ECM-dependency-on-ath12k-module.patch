From 5a8767caf8bf31081102903d147fb1ff9f121262 Mon Sep 17 00:00:00 2001
From: Monika Korada <quic_koramoni@quicinc.com>
Date: Thu, 21 Sep 2023 16:13:38 +0530
Subject: wifi: ath12k: sawf: Redesign ECM and ath12k module dependencies

Due to ECM dependency on ath12k module, ECM is loaded
first followed by ath12k.ko. But inorder to unload ECM, ath12k
module needs to be removed. To avoid this dependency between
ath12k driver and ECM, move the dependency to ath module(ath.ko).
This ath module will now provide the support to register,
deregister the uplink and downlink callbacks from ath12k module
and support to ECM for uplink and downlink functionality. Thus,
the interdependency between ECM and ath12k can be eliminated and
they both can be unloaded separately from one another.

Signed-off-by: Monika Korada <quic_koramoni@quicinc.com>
---
 drivers/net/wireless/ath/Makefile      |  3 +-
 drivers/net/wireless/ath/ath12k/sawf.c | 50 +++++++------
 drivers/net/wireless/ath/ath12k/sawf.h |  6 +-
 drivers/net/wireless/ath/ath_sawf.c    | 97 ++++++++++++++++++++++++++
 include/ath/ath_sawf.h                 | 47 +++++++++++++
 5 files changed, 180 insertions(+), 23 deletions(-)
 create mode 100644 drivers/net/wireless/ath/ath_sawf.c
 create mode 100644 include/ath/ath_sawf.h

--- a/drivers/net/wireless/ath/Makefile
+++ b/drivers/net/wireless/ath/Makefile
@@ -18,7 +18,8 @@ ath-objs :=	main.o \
 		key.o \
 		debug.o \
 		dfs_pattern_detector.o \
-		dfs_pri_detector.o
+		dfs_pri_detector.o \
+		ath_sawf.o
 
 ath-$(CPTCFG_ATH_TRACEPOINTS) += trace.o
 
--- a/drivers/net/wireless/ath/ath12k/sawf.c
+++ b/drivers/net/wireless/ath/ath12k/sawf.c
@@ -11,7 +11,6 @@
 #include "debugfs_htt_stats.h"
 #include "vendor.h"
 #include <linux/module.h>
-#include <qca-nss-ecm/ecm_classifier_emesh_public.h>
 #include "telemetry.h"
 #include "telemetry_agent_if.h"
 
@@ -22,15 +21,17 @@ bool ath12k_sawf_enable;
 module_param_named(sawf, ath12k_sawf_enable, bool, 0444);
 MODULE_PARM_DESC(sawf, "Enable SAWF feature (Default: false)");
 
-static struct ecm_classifier_emesh_sawf_callbacks ecm_wifi_sawf_callback = {
-	.update_service_id_get_msduq = ath12k_sawf_get_msduq,
-	.sawf_conn_sync = ath12k_sawf_config_ul,
+static const struct ath_sawf_callbacks ath_wifi_sawf_callback = {
+	.sawf_dl_callback = ath12k_sawf_get_msduq,
+	.sawf_ul_callback = ath12k_sawf_config_ul,
 };
 
 static struct ath12k_sawf_ctx *sawf_ctx;
 
 void ath12k_sawf_init(struct ath12k_base *ab)
 {
+	struct ath_sawf_callbacks *ops;
+
 	if (!ath12k_sawf_enable)
 		return;
 
@@ -53,18 +54,20 @@ void ath12k_sawf_init(struct ath12k_base
 		return;
 	}
 
-	if (ecm_classifier_emesh_sawf_msduq_callback_register(&ecm_wifi_sawf_callback))
-		ath12k_err(NULL, "ECM msduq cb reg fail\n");
-	else
-		ath12k_dbg(ab, ATH12K_DBG_SAWF, "ECM msduq callback register success\n");
+	ops = &ath_wifi_sawf_callback;
 
-	if (ecm_classifier_emesh_sawf_conn_sync_callback_register(&ecm_wifi_sawf_callback))
-		ath12k_err(NULL, "ECM uplink cfg cb reg fail\n");
-	else
-		ath12k_dbg(ab, ATH12K_DBG_SAWF,
-			   "ECM uplink cfg callback register success\n");
+	if (ath_sawf_msduq_callback_register(ops)) {
+		ath12k_err(ab, "ath callback register fail\n");
+		goto err;
+	}
+
+	ath12k_info(ab, "SAWF context initialized\n");
+	return;
 
-	ath12k_info(NULL, "SAWF context initialized\n");
+err:
+	kfree(sawf_ctx);
+	sawf_ctx = NULL;
+	ath12k_info(ab, "SAWF context initialization failed\n");
 }
 
 void ath12k_sawf_deinit(struct ath12k_base *ab)
@@ -83,17 +86,13 @@ void ath12k_sawf_deinit(struct ath12k_ba
 		return;
 	}
 
-	ecm_classifier_emesh_sawf_msduq_callback_unregister();
-	ath12k_dbg(ab, ATH12K_DBG_SAWF, "ECM msduq callback unregister success\n");
-
-	ecm_classifier_emesh_sawf_conn_sync_callback_unregister();
-	ath12k_dbg(ab, ATH12K_DBG_SAWF, "ECM uplink cfg callback unregister success\n");
+	ath_sawf_msduq_callback_unregister();
 
 	cancel_work_sync(&sawf_ctx->ul_configure);
 	destroy_workqueue(sawf_ctx->workqueue);
 	kfree(sawf_ctx);
 	sawf_ctx = NULL;
-	ath12k_info(NULL, "SAWF context freed\n");
+	ath12k_info(ab, "SAWF context freed\n");
 	return;
 }
 
@@ -694,6 +693,7 @@ u16 ath12k_sawf_get_msduq(struct net_dev
 	ath12k_dbg(ab, ATH12K_DBG_SAWF,
 		   "SAWF get msduq:peer %pM SvcId %u:msduq id 0x%x allocated\n",
 		   peer_mac, service_id, peer_msduq);
+
 	return peer_msduq;
 }
 
--- a/drivers/net/wireless/ath/ath12k/sawf.h
+++ b/drivers/net/wireless/ath/ath12k/sawf.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: BSD-3-Clause-Clear
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
 /*
  * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
  */
@@ -12,6 +12,7 @@ struct telemetry_sawftx_stats;
 struct telemetry_sawfdelay_stats;
 
 #ifdef CPTCFG_ATH12K_SAWF
+#include <ath/ath_sawf.h>
 
 #define ATH12K_MAC_ADDR_SIZE	6
 #define DP_SAWF_INVALID_PARAM	-1
--- /dev/null
+++ b/drivers/net/wireless/ath/ath_sawf.c
@@ -0,0 +1,84 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include <ath/ath_sawf.h>
+#include <linux/module.h>
+
+const struct ath_sawf_callbacks *sawf_cb;
+static DEFINE_SPINLOCK(sawf_uldl_lock);
+
+int ath_sawf_msduq_callback_register(struct ath_sawf_callbacks *ath_cb)
+{
+	if (!ath_cb) {
+		pr_err("Failed to register SAWF callbacks\n");
+		return -EINVAL;
+	}
+
+	spin_lock_bh(&sawf_uldl_lock);
+	sawf_cb = ath_cb;
+	spin_unlock_bh(&sawf_uldl_lock);
+
+	pr_info("SAWF callbacks are registered successfully to ath\n");
+	return 0;
+}
+EXPORT_SYMBOL(ath_sawf_msduq_callback_register);
+
+void ath_sawf_msduq_callback_unregister(void)
+{
+	spin_lock_bh(&sawf_uldl_lock);
+	sawf_cb = NULL;
+	spin_unlock_bh(&sawf_uldl_lock);
+}
+EXPORT_SYMBOL(ath_sawf_msduq_callback_unregister);
+
+u16 ath_sawf_downlink(struct ath_dl_params *ecm_ath_dl_params)
+{
+	u16 ret = SAWF_MSDUQ_ID_INVALID;
+
+	if (unlikely(!ecm_ath_dl_params)) {
+		pr_info(" ECM downlink parameters are not available\n");
+		return ret;
+	}
+
+	spin_lock_bh(&sawf_uldl_lock);
+
+	if (sawf_cb)
+		ret = sawf_cb->sawf_dl_callback(ecm_ath_dl_params->netdev,
+						 ecm_ath_dl_params->peer_mac,
+						 ecm_ath_dl_params->service_id,
+						 ecm_ath_dl_params->dscp,
+						 ecm_ath_dl_params->rule_id);
+	else
+		pr_err("SAWF ath downlink callback failed\n");
+
+	spin_unlock_bh(&sawf_uldl_lock);
+
+	return ret;
+}
+EXPORT_SYMBOL(ath_sawf_downlink);
+
+void ath_sawf_uplink(struct ath_ul_params *ecm_ath_ul_params)
+{
+	if (unlikely(!ecm_ath_ul_params)) {
+		pr_info("ECM uplink parameters are not available\n");
+		return;
+	}
+
+	spin_lock_bh(&sawf_uldl_lock);
+
+	if (sawf_cb)
+		sawf_cb->sawf_ul_callback(ecm_ath_ul_params->dst_dev,
+					   ecm_ath_ul_params->dst_mac,
+					   ecm_ath_ul_params->src_dev,
+					   ecm_ath_ul_params->src_mac,
+					   ecm_ath_ul_params->fw_service_id,
+					   ecm_ath_ul_params->rv_service_id,
+					   ecm_ath_ul_params->start_or_stop);
+	else
+		pr_err("SAWF ath uplink callback failed\n");
+
+	spin_unlock_bh(&sawf_uldl_lock);
+}
+EXPORT_SYMBOL(ath_sawf_uplink);
--- /dev/null
+++ b/include/ath/ath_sawf.h
@@ -0,0 +1,47 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+#ifndef ATH_SAWF_H
+#define ATH_SAWF_H
+#include <linux/netdevice.h>
+#define SAWF_MSDUQ_ID_INVALID   0x3F
+
+struct ath_sawf_callbacks {
+	u16 (*sawf_dl_callback)(struct net_device *out_dev,
+				 u8 dest_mac[],
+				 u8 service_class_id,
+				 u32 dscp,
+				 u32 rule_id);
+	void (*sawf_ul_callback)(struct net_device *dest_dev,
+				  u8 dest_mac[],
+				  struct net_device *src_dev,
+				  u8 src_mac[],
+				  u8 fwd_service_id,
+				  u8 rev_service_id,
+				  u8 add_or_sub);
+};
+
+struct ath_dl_params {
+	struct net_device *netdev;
+	u8 *peer_mac;
+	u32 service_id;
+	u32 dscp;
+	u32 rule_id;
+};
+
+struct ath_ul_params {
+	struct net_device *dst_dev;
+	struct net_device *src_dev;
+	u8 *dst_mac;
+	u8 *src_mac;
+	u8 fw_service_id;
+	u8 rv_service_id;
+	u8 start_or_stop;
+};
+
+int ath_sawf_msduq_callback_register(struct ath_sawf_callbacks *ath_cb);
+void ath_sawf_msduq_callback_unregister(void);
+u16 ath_sawf_downlink(struct ath_dl_params *ecm_ath_dl_params);
+void ath_sawf_uplink(struct ath_ul_params *ecm_ath_ul_params);
+#endif
