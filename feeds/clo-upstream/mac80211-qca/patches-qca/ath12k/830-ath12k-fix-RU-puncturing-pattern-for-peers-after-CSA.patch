From 461878d94724cdb16e815b3c50fee1339c1549e7 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Wed, 23 Aug 2023 12:36:19 +0530
Subject: [PATCH] ath12k: fix RU puncturing pattern for peers after CSA

If AP switches channel and with a valid puncturing pattern, the
peer at firmware level is not updated with the new value. This
leads to an issue where firmware still transmits the packets
in the whole bandwidth.

Fix the issue by updating the ru puncturing bitmap of all EHT
capable peers by sending Peer Channel width Switch command. The
command has puncturing member and hence it can be leveraged.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 59 +++++++++++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 17bab9a42641..69a7ba4c451c 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11612,6 +11612,63 @@ static int ath12k_mac_vdev_restart(struct ath12k_link_vif *arvif,
 	return ret;
 }
 
+static void
+ath12k_mac_update_peer_ru_punct_bitmap_iter(void *data,
+					    struct ieee80211_sta *sta)
+{
+	struct ath12k_link_vif *arvif = data;
+	struct ath12k *ar = arvif->ar;
+	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
+	struct ath12k_link_sta *arsta;
+	struct ieee80211_link_sta *link_sta;
+	u8 link_id = arvif->link_id;
+
+	if (ahsta->ahvif != arvif->ahvif)
+		return;
+
+	/* Check if there is a link sta in the vif link */
+	if (!(BIT(link_id) & ahsta->links_map))
+		return;
+
+	arsta = ahsta->link[link_id];
+	link_sta = ath12k_get_link_sta(arsta);
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer ru punct bitmap update\n");
+		return;
+	}
+
+	/* Puncturing in only applicable for EHT supported peers */
+	if (!link_sta->he_cap.has_he || !link_sta->eht_cap.has_eht)
+		return;
+
+	spin_lock_bh(&ar->data_lock);
+	/* RC_BW_CHANGED handler has infra already to send the bitmap.
+	 * Hence we can leverage from the same flag
+	 */
+	arsta->changed |= IEEE80211_RC_BW_CHANGED;
+	spin_unlock_bh(&ar->data_lock);
+
+	ieee80211_queue_work(ar->ah->hw, &arsta->update_wk);
+}
+
+void ath12k_mac_update_ru_punct_bitmap(struct ath12k_link_vif *arvif,
+				       struct ieee80211_chanctx_conf *old_ctx,
+				       struct ieee80211_chanctx_conf *new_ctx)
+{
+	struct ath12k *ar = arvif->ar;
+	struct ath12k_hw *ah = ar->ah;
+
+	lockdep_assert_held(&ah->conf_mutex);
+	lockdep_assert_held(&ar->conf_mutex);
+
+	if (old_ctx->def.ru_punct_bitmap == new_ctx->def.ru_punct_bitmap)
+		return;
+
+	ieee80211_iterate_stations_atomic(ah->hw,
+					  ath12k_mac_update_peer_ru_punct_bitmap_iter,
+					  arvif);
+}
+
 static int ath12k_vdev_restart_sequence(struct ath12k_link_vif *arvif,
 					struct ieee80211_chanctx_conf *new_ctx,
 					u64 vif_down_failed_map,
@@ -11655,6 +11712,8 @@ static int ath12k_vdev_restart_sequence(struct ath12k_link_vif *arvif,
 	}
 
 beacon_tmpl_setup:
+	ath12k_mac_update_ru_punct_bitmap(arvif, &old_chanctx, new_ctx);
+
 	if (arvif->pending_csa_up)
 		return 0;
 
-- 
2.17.1

