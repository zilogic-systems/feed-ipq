From 9457c42da9d9da067b7847c207df7a3e72d739d5 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Sat, 29 Jul 2023 20:12:18 +0530
Subject: [PATCH] wifi: ath12k: Add partner rx replinish support in wbm error
 path

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 52 ++++++++++++++++++-------
 1 file changed, 37 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4807,26 +4807,27 @@ int ath12k_dp_rx_process_wbm_err(struct
 				 struct napi_struct *napi, int budget)
 {
 	struct ath12k *ar;
+	struct ath12k_base *src_ab;
 	struct ath12k_dp *dp = &ab->dp;
 	struct dp_rxdma_ring *rx_ring;
 	struct hal_rx_wbm_rel_info err_info;
 	struct hal_srng *srng;
 	struct sk_buff *msdu;
-	struct sk_buff_head msdu_list;
+	struct sk_buff_head msdu_list, scatter_msdu_list;
 	struct ath12k_skb_rxcb *rxcb;
 	void *rx_desc;
-	int mac_id;
-	int num_buffs_reaped = 0;
+	int i, num_buffs_reaped[ATH12K_MAX_SOCS] = { 0 };
 	struct ath12k_rx_desc_info *desc_info;
 	struct ath12k_soc_dp_stats *soc_stats = &ab->soc_stats;
+	int total_num_buffs_reaped = 0;
 	int ret;
-	u8 src_link_id;
+	u8 hw_link_id;
 	char buf[64] = {0};
 
 	__skb_queue_head_init(&msdu_list);
+	__skb_queue_head_init(&scatter_msdu_list);
 
 	srng = &ab->hal.srng_list[dp->rx_rel_ring.ring_id];
-	rx_ring = &dp->rx_refill_buf_ring;
 
 	spin_lock_bh(&srng->lock);
 
@@ -4861,17 +4862,20 @@ int ath12k_dp_rx_process_wbm_err(struct
 
 		msdu = desc_info->skb;
 		desc_info->skb = NULL;
+		src_ab = ab->ag->ab[desc_info->chip_id];
+		dp = &src_ab->dp;
 
 		spin_lock_bh(&dp->rx_desc_lock);
 		list_move_tail(&desc_info->list, &dp->rx_desc_free_list);
 		spin_unlock_bh(&dp->rx_desc_lock);
 
 		rxcb = ATH12K_SKB_RXCB(msdu);
-		dma_unmap_single(ab->dev, rxcb->paddr,
+		dma_unmap_single(src_ab->dev, rxcb->paddr,
 				 msdu->len + skb_tailroom(msdu),
 				 DMA_FROM_DEVICE);
 
-		num_buffs_reaped++;
+		num_buffs_reaped[src_ab->chip_id]++;
+		total_num_buffs_reaped++;
 
 		if (!err_info.continuation)
 			budget--;
@@ -4884,36 +4888,86 @@ int ath12k_dp_rx_process_wbm_err(struct
 
 		rxcb->err_rel_src = err_info.err_rel_src;
 		rxcb->err_code = err_info.err_code;
-		rxcb->rx_desc = (struct hal_rx_desc *)msdu->data;
-
-		__skb_queue_tail(&msdu_list, msdu);
-
 		rxcb->is_first_msdu = err_info.first_msdu;
 		rxcb->is_last_msdu = err_info.last_msdu;
 		rxcb->is_continuation = err_info.continuation;
+		rxcb->rx_desc = (struct hal_rx_desc *)msdu->data;
+
+		if (!err_info.continuation) {
+			hw_link_id = ath12k_dp_rx_get_msdu_src_link(src_ab, msdu->data);
+			if (hw_link_id >= ATH12K_GROUP_MAX_RADIO) {
+				if (ath12k_debug_critical) {
+					ath12k_err(ab, "WBM Err: invalid hw link id %d\n",
+						   hw_link_id);
+					ath12k_err_dump(ab, NULL, "WBM err desc: ", rx_desc,
+							sizeof(struct hal_wbm_release_ring_cc_rx), srng);
+					ath12k_err_dump(ab, NULL, "WBM Rx TLV: ", msdu->data,
+							sizeof(struct hal_rx_desc), srng);
+					dev_kfree_skb_any(msdu);
+					BUG_ON(1);
+				} else {
+					dev_kfree_skb_any(msdu);
+				}
+				continue;
+			}
+
+			if (!skb_queue_empty(&scatter_msdu_list)) {
+				__skb_queue_tail(&scatter_msdu_list, msdu);
+
+				skb_queue_walk(&scatter_msdu_list, msdu) {
+					rxcb = ATH12K_SKB_RXCB(msdu);
+					rxcb->hw_link_id = hw_link_id;
+				}
+
+				skb_queue_splice_tail_init(&scatter_msdu_list, &msdu_list);
+			} else {
+				rxcb->hw_link_id = hw_link_id;
+				__skb_queue_tail(&msdu_list, msdu);
+			}
+		} else {
+			__skb_queue_tail(&scatter_msdu_list, msdu);
+		}
 	}
 
 	ath12k_hal_srng_access_end(ab, srng);
 
 	spin_unlock_bh(&srng->lock);
 
-	if (!num_buffs_reaped)
+	if (!total_num_buffs_reaped)
 		goto done;
 
-	ath12k_dp_rx_bufs_replenish(ab, rx_ring, num_buffs_reaped,
-				    ab->hw_params->hal_params->rx_buf_rbm, true);
+	if (!skb_queue_empty(&scatter_msdu_list))
+		__skb_queue_purge(&scatter_msdu_list);
+
+	for (i = 0; i < ab->ag->num_chip; i++) {
+		if (!num_buffs_reaped[i])
+			continue;
+
+		src_ab = ab->ag->ab[i];
+		if (!src_ab)
+			continue;
+
+		rx_ring = &src_ab->dp.rx_refill_buf_ring;
+
+		ath12k_dp_rx_bufs_replenish(src_ab, rx_ring, num_buffs_reaped[i],
+					    src_ab->hw_params->hal_params->rx_buf_rbm, true);
+	}
 
 	rcu_read_lock();
 	while ((msdu = __skb_dequeue(&msdu_list)) != NULL) {
 
-		src_link_id = ath12k_dp_rx_get_msdu_src_link(ab, msdu->data);
-		if (src_link_id < ATH12K_GROUP_MAX_RADIO)
-			ar = rcu_dereference(ab->ag->hw_links[src_link_id]);
-		else
-			ar = NULL;
+		rxcb = ATH12K_SKB_RXCB(msdu);
+		hw_link_id = rxcb->hw_link_id;
+
+		ar = rcu_dereference(ab->ag->hw_links[hw_link_id]);
+		if (!ar) {
+			dev_kfree_skb_any(msdu);
+			ath12k_warn(ab, "WBM Rx: invalid pdev for hw link id %d\n",
+				    hw_link_id);
+			continue;
+		}
 
-		mac_id = ar ? ar->pdev_idx : 0;
-		if (!ar || !rcu_dereference(ar->ab->pdevs_active[mac_id])) {
+		if (!rcu_dereference(ar->ab->pdevs_active[ar->pdev_idx])) {
 			dev_kfree_skb_any(msdu);
 			continue;
 		}
@@ -4923,8 +4977,6 @@ int ath12k_dp_rx_process_wbm_err(struct
 			continue;
 		}
 
-		rxcb = ATH12K_SKB_RXCB(msdu);
-
 		if (rxcb->err_rel_src < HAL_WBM_REL_SRC_MODULE_MAX)
 			soc_stats->rx_wbm_rel_source[rxcb->err_rel_src][ar->ab->chip_id]++;
 
@@ -4932,7 +4984,7 @@ int ath12k_dp_rx_process_wbm_err(struct
 	}
 	rcu_read_unlock();
 done:
-	return num_buffs_reaped;
+	return total_num_buffs_reaped;
 }
 
 void ath12k_dp_rx_process_reo_status(struct ath12k_base *ab)
