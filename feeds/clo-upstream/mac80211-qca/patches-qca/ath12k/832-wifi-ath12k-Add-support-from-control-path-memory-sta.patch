From 5b8df9fd3b9730b0f3886ed9265f54fe6e2c3cd2 Mon Sep 17 00:00:00 2001
From: Rahul Bhattacharjee <quic_rbhattac@quicinc.com>
Date: Tue, 7 Nov 2023 17:20:54 +0530
Subject: [PATCH] wifi: ath12k: Add support for control path memory stats

Add support for control path memory stats. Fetch firmware meomory stats
through WMI and add stats type.

Use below command:

echo <stats_id> <action> > sys/kernel/debug/ath12k/
qcn9274\ hw2.0_000X:01:00.0/macX/wmi_ctrl_stats

stats_id = 3 = WMI_REQ_CTRL_PATH_MEM_STAT

action = 1 or 2

1: WMI_REQUEST_CTRL_PATH_STAT_GET
2: WMI_REQUEST_CTRL_PATH_STAT_RESET

To display stats:
cat sys/kernel/debug/ath12k/qcn9274\ hw2.0_000X:01:00.0/macX/wmi_ctrl_stats

Sample Output:
WMI_CTRL_PATH_MEM_STATS:
arena_id = 0
arena = HRAM
total_bytes = 430080
allocated_bytes = 391440
arena_id = 1
arena = HCRAM
total_bytes = 917504
allocated_bytes = 888704
arena_id = 2
arena = HREMOTE
total_bytes = 8388608
allocated_bytes = 3134720
arena_id = 3
arena = HCREMOTE
total_bytes = 3145728
allocated_bytes = 244928
arena_id = 4
arena = REMOTE
total_bytes = 17649792
allocated_bytes = 3850688
arena_id = 5
arena = SRAM_AUX
total_bytes = 1343440
allocated_bytes = 1254288
arena_id = 7
arena = PAGEABLE
total_bytes = 12582912
allocated_bytes = 4462912
arena_id = 8
arena = CMEM
total_bytes = 57344
allocated_bytes = 48576
arena_id = 20
arena = MLO_SHMEM
total_bytes = 245760
allocated_bytes = 162368
arena_id = 21
arena = MLO_H_SHMEM
total_bytes = 3670016
allocated_bytes = 1288704
arena_id = 22
arena = MLO_HC_SHMEM
total_bytes = 1572864
allocated_bytes = 757376


Patch-dependency:  [None]
Patch-work:        [None]


Signed-off-by: Rahul Bhattacharjee <quic_rbhattac@quicinc.com>
Signed-off-by: Arulanbu Balusamy <quic_abalusam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  2 +
 drivers/net/wireless/ath/ath12k/debugfs.c | 54 +++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.c     | 57 ++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h     | 94 +++++++++++++++++++++++
 4 files changed, 207 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1004,6 +1004,8 @@ struct ath12k {
 	struct completion fw_stats_complete;
 	bool fw_stats_done;
 
+	bool ctrl_mem_stats;
+
 	unsigned long last_tx_power_update;
 
 	struct completion mvr_complete;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -443,6 +443,62 @@ int wmi_ctrl_path_btcoex_stat(struct ath
 	return ret_val;
 }
 
+int wmi_ctrl_path_mem_stat(struct ath12k *ar, const char __user *ubuf,
+			   size_t count, loff_t *ppos)
+{
+	struct wmi_ctrl_path_stats_list *stats, *tmp;
+	struct wmi_ctrl_path_mem_stats_params *mem_stats;
+	const int size = 2048;
+	int len = 0, ret_val;
+	char *buf;
+	LIST_HEAD(wmi_stats_list);
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	len += scnprintf(buf + len, size - len,
+			"WMI_CTRL_PATH_MEM_STATS:\n");
+
+	spin_lock_bh(&ar->wmi_ctrl_path_stats_lock);
+	list_splice_tail_init(&ar->debug.wmi_list, &wmi_stats_list);
+	spin_unlock_bh(&ar->wmi_ctrl_path_stats_lock);
+	list_for_each_entry_safe(stats, tmp, &wmi_stats_list, list) {
+		if (!stats)
+			break;
+
+		mem_stats = stats->stats_ptr;
+
+		if (!mem_stats)
+			break;
+
+		if (mem_stats->total_bytes){
+			len += scnprintf(buf + len, size - len,
+				"arena_id = %u\n",
+				le32_to_cpu(mem_stats->arena_id));
+			len += scnprintf(buf + len, size - len,
+				"arena = %s\n",
+				wmi_ctrl_path_fw_arena_id_to_name(le32_to_cpu(mem_stats->arena_id)));
+			len += scnprintf(buf + len, size - len,
+				"total_bytes = %u\n",
+				le32_to_cpu(mem_stats->total_bytes));
+			len += scnprintf(buf + len, size - len,
+				"allocated_bytes = %u\n",
+				le32_to_cpu(mem_stats->allocated_bytes));
+		}
+
+		kfree(stats->stats_ptr);
+		list_del(&stats->list);
+		kfree(stats);
+
+	}
+
+	ar->ctrl_mem_stats = false;
+	ret_val =  simple_read_from_buffer(ubuf, count, ppos, buf, len);
+	kfree(buf);
+	return ret_val;
+}
+
 static ssize_t ath12k_read_wmi_ctrl_path_stats(struct file *file,
 		const char __user *ubuf,
 		size_t count, loff_t *ppos)
@@ -466,6 +522,9 @@ static ssize_t ath12k_read_wmi_ctrl_path
 	case WMI_CTRL_PATH_AWGN_STATS:
 		ret_val = wmi_ctrl_path_awgn_stat(ar, ubuf, count, ppos);
 		break;
+	case WMI_CTRL_PATH_MEM_STATS:
+		ret_val = wmi_ctrl_path_mem_stat(ar, ubuf, count, ppos);
+		break;
 		/* Add case for newly wmi ctrl path added stats here */
 	default:
 		/* Unsupported tag */
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -4448,6 +4448,11 @@ ath12k_wmi_send_wmi_ctrl_stats_cmd(struc
 			return -EIO;
 		}
 		break;
+	case WMI_REQ_CTRL_PATH_MEM_STAT:
+		ar->ctrl_mem_stats = true;
+		pdev_id_array[0] = ar->pdev->pdev_id;
+		stats_id = (1 << param->stats_id);
+		break;
 		/* Add case for newly wmi ctrl path stats here */
 	default:
 		ath12k_warn(ab, "Unsupported stats id %d", param->stats_id);
@@ -4725,6 +4730,47 @@ int wmi_print_ctrl_path_awgn_stats_tlv(s
 	return 0;
 }
 
+int wmi_print_ctrl_path_mem_stats_tlv(struct ath12k_base *ab, u16 len,
+				      const void *ptr, void *data)
+{
+	struct wmi_ctrl_path_stats_ev_parse_param *stats_buff =
+		(struct wmi_ctrl_path_stats_ev_parse_param *)data;
+	struct wmi_ctrl_path_mem_stats_params *mem_stats_skb =
+		(struct wmi_ctrl_path_mem_stats_params *)ptr;
+	struct wmi_ctrl_path_mem_stats_params *mem_stats = NULL;
+	struct wmi_ctrl_path_stats_list *stats;
+	struct ath12k *ar = NULL;
+	int i;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		ar = ab->pdevs[i].ar;
+		if (!ar || !ar->ctrl_mem_stats)
+			continue;
+		stats = kzalloc(sizeof(*stats), GFP_ATOMIC);
+		if (!stats)
+			return -ENOMEM;
+
+		mem_stats = kzalloc(sizeof(*mem_stats), GFP_ATOMIC);
+		if (!mem_stats) {
+			kfree(stats);
+			return -ENOMEM;
+		}
+
+		memcpy(mem_stats, mem_stats_skb, sizeof(*mem_stats));
+		stats->stats_ptr = mem_stats;
+		list_add_tail(&stats->list, &stats_buff->list);
+
+		spin_lock_bh(&ar->wmi_ctrl_path_stats_lock);
+		ath12k_wmi_crl_path_stats_list_free(ar, &ar->debug.wmi_list);
+		spin_unlock_bh(&ar->wmi_ctrl_path_stats_lock);
+		ar->debug.wmi_ctrl_path_stats_tagid = WMI_CTRL_PATH_MEM_STATS;
+		stats_buff->ar = ar;
+	}
+
+	return 0;
+}
+
+
 static int ath12k_wmi_ctrl_stats_subtlv_parser(struct ath12k_base *ab,
 					       u16 tag, u16 len,
 					       const void *ptr, void *data)
@@ -4746,6 +4792,9 @@ static int ath12k_wmi_ctrl_stats_subtlv_
 	case WMI_CTRL_PATH_AWGN_STATS:
 		ret = wmi_print_ctrl_path_awgn_stats_tlv(ab, len, ptr, data);
 		break;
+	case WMI_CTRL_PATH_MEM_STATS:
+                ret = wmi_print_ctrl_path_mem_stats_tlv(ab, len, ptr, data);
+                break;
 		/* Add case for newly wmi ctrl path added stats here */
 	default:
 		ath12k_warn(ab,
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2154,6 +2154,7 @@ enum wmi_tlv_tag {
 	WMI_CTRL_PATH_PDEV_STATS,
 	WMI_TAG_REGULATORY_RULE_EXT_STRUCT = 0x3A9,
 	WMI_TAG_REG_CHAN_LIST_CC_EXT_EVENT,
+	WMI_CTRL_PATH_MEM_STATS,
 	WMI_TAG_VDEV_SET_TPC_POWER_CMD = 0x3B5,
 	WMI_TAG_VDEV_CH_POWER_INFO,
 	WMI_TAG_PEER_TID_LATENCY_CONFIG_FIXED_PARAM = 0x3B9,
@@ -7217,6 +7218,93 @@ wmi_ctrl_path_periodic_cal_type_id_to_na
 	return "UNKNOWN_PERIODIC_CAL_TYPE";
 }
 
+enum wmi_ctrl_path_fw_arena_id {
+	WMI_CTRL_PATH_STATS_ARENA_HRAM = 0,
+	WMI_CTRL_PATH_STATS_ARENA_HCRAM,
+	WMI_CTRL_PATH_STATS_ARENA_HREMOTE,
+	WMI_CTRL_PATH_STATS_ARENA_HCREMOTE,
+	WMI_CTRL_PATH_STATS_ARENA_REMOTE,
+	WMI_CTRL_PATH_STATS_ARENA_SRAM,
+	WMI_CTRL_PATH_STATS_ARENA_SRAM_AUX,
+	WMI_CTRL_PATH_STATS_ARENA_PAGEABLE,
+	WMI_CTRL_PATH_STATS_ARENA_CMEM,
+	WMI_CTRL_PATH_STATS_ARENA_TRAM,
+	WMI_CTRL_PATH_STATS_ARENA_HWIO,
+	WMI_CTRL_PATH_STATS_ARENA_CALDB,
+	WMI_CTRL_PATH_STATS_ARENA_M3,
+	WMI_CTRL_PATH_STATS_ARENA_ETMREMOTE,
+	WMI_CTRL_PATH_STATS_ARENA_M3_DUMP,
+	WMI_CTRL_PATH_STATS_ARENA_EMUPHY,
+	WMI_CTRL_PATH_STATS_ARENA_DBG_SRAM,
+	WMI_CTRL_PATH_STATS_ARENA_DBG_SRAM_AUX,
+	WMI_CTRL_PATH_STATS_ARENA_SRAM_AUX_OVERFLOW,
+	WMI_CTRL_PATH_STATS_ARENA_AMSS,
+	WMI_CTRL_PATH_STATS_ARENA_MLO_SHMEM,
+	WMI_CTRL_PATH_STATS_ARENA_MLO_H_SHMEM,
+	WMI_CTRL_PATH_STATS_ARENA_MLO_HC_SHMEM,
+	WMI_CTRL_PATH_STATS_ARENA_RRI_CMD,
+	WMI_CTRL_PATH_STATS_ARENA_SRAM_CLADE,
+	/* IDs 25 to 254 for future use*/
+	WMI_CTRL_PATH_STATS_ARENA_INVALID = 0xFF,
+};
+
+static inline const char *
+wmi_ctrl_path_fw_arena_id_to_name(u8 arena_id) {
+	switch(arena_id) {
+	case WMI_CTRL_PATH_STATS_ARENA_HRAM:
+		return "HRAM";
+	case WMI_CTRL_PATH_STATS_ARENA_HCRAM:
+		return "HCRAM";
+	case WMI_CTRL_PATH_STATS_ARENA_HREMOTE:
+		return "HREMOTE";
+	case WMI_CTRL_PATH_STATS_ARENA_HCREMOTE:
+		return "HCREMOTE";
+	case WMI_CTRL_PATH_STATS_ARENA_REMOTE:
+		return "REMOTE";
+	case WMI_CTRL_PATH_STATS_ARENA_SRAM:
+		return "SRAM_AUX";
+	case WMI_CTRL_PATH_STATS_ARENA_PAGEABLE:
+		return "PAGEABLE";
+	case WMI_CTRL_PATH_STATS_ARENA_CMEM:
+		return "CMEM";
+	case WMI_CTRL_PATH_STATS_ARENA_TRAM:
+		return "TRAM";
+	case WMI_CTRL_PATH_STATS_ARENA_HWIO:
+		return "HWIO";
+	case WMI_CTRL_PATH_STATS_ARENA_CALDB:
+		return "CALDB";
+	case WMI_CTRL_PATH_STATS_ARENA_M3:
+		return "M3";
+	case WMI_CTRL_PATH_STATS_ARENA_ETMREMOTE:
+		return "ETMREMOTE";
+	case WMI_CTRL_PATH_STATS_ARENA_M3_DUMP:
+		return "M3_DUMP";
+	case WMI_CTRL_PATH_STATS_ARENA_EMUPHY:
+		return "EMUPHY";
+	case WMI_CTRL_PATH_STATS_ARENA_DBG_SRAM:
+		return "DBG_SRAM";
+	case WMI_CTRL_PATH_STATS_ARENA_DBG_SRAM_AUX:
+		return "DBG_SRAM_AUX";
+	case WMI_CTRL_PATH_STATS_ARENA_SRAM_AUX_OVERFLOW:
+		return "OVERFLOW";
+	case WMI_CTRL_PATH_STATS_ARENA_AMSS:
+		return "AMSS";
+	case WMI_CTRL_PATH_STATS_ARENA_MLO_SHMEM:
+		return "MLO_SHMEM";
+	case WMI_CTRL_PATH_STATS_ARENA_MLO_H_SHMEM:
+		return "MLO_H_SHMEM";
+	case WMI_CTRL_PATH_STATS_ARENA_MLO_HC_SHMEM:
+		return "MLO_HC_SHMEM";
+	case WMI_CTRL_PATH_STATS_ARENA_RRI_CMD:
+		return "RRI_CMD";
+	case WMI_CTRL_PATH_STATS_ARENA_SRAM_CLADE:
+		return "SRAM_CLADE";
+	case WMI_CTRL_PATH_STATS_ARENA_INVALID:
+		break;
+	}
+	return "UNKNOWN_ARENA_ID";
+}
+
 #define WMI_CTRL_PATH_CAL_PROF_MASK	GENMASK(12, 8)
 #define WMI_CTRL_PATH_CAL_TYPE_MASK	GENMASK(7, 0)
 #define WMI_CTRL_PATH_IS_PERIODIC_CAL	GENMASK(13, 13)
@@ -7297,6 +7385,12 @@ struct wmi_ctrl_path_awgn_stats {
 	u32 awgn_int_bw_cnt[WMI_AWGN_MAX_BW];
 } __packed;
 
+struct wmi_ctrl_path_mem_stats_params {
+	__le32 arena_id;
+	__le32 total_bytes;
+	__le32 allocated_bytes;
+} __packed;
+
 struct wmi_ctrl_path_stats_ev_parse_param {
 	struct list_head list;
 	struct ath12k *ar;
