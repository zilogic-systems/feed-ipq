From 04fa39f783a406f411a528577a9411a52e5f48e6 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Date: Mon, 11 Sep 2023 22:05:43 +0530
Subject: [PATCH 1/2] ath12k: Disable tx monitor support

Disable tx monitor support through hw params as
it is not supported yet. This will give us some
memory headroom.

Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_mon.c |   6 ++
 drivers/net/wireless/ath/ath12k/dp_rx.c  | 107 +++++++++++++----------
 drivers/net/wireless/ath/ath12k/dp_tx.c  |  16 ++--
 drivers/net/wireless/ath/ath12k/hw.c     |   5 ++
 4 files changed, 84 insertions(+), 50 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -2855,6 +2855,9 @@ ath12k_dp_mon_tx_parse_status_tlv(struct
 
 	tx_ppdu_info = ath12k_dp_mon_hal_tx_ppdu_info(pmon, tlv_tag);
 
+	if (tlv_tag == HAL_MON_BUF_ADDR && !ab->hw_params->supports_tx_monitor)
+		return status;
+
 	switch (tlv_tag) {
 	case HAL_TX_FES_SETUP: {
 		struct hal_tx_fes_setup *tx_fes_setup =
@@ -3743,6 +3746,9 @@ int ath12k_dp_mon_srng_process(struct at
 		mon_dst_ring = &pdev_dp->rxdma_mon_dst_ring[srng_id];
 		buf_ring = &dp->rxdma_mon_buf_ring;
 	} else {
+		if (!ab->hw_params->supports_tx_monitor)
+			return 0;
+
 		mon_dst_ring = &pdev_dp->tx_mon_dst_ring[srng_id];
 		buf_ring = &dp->tx_mon_buf_ring;
 	}
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -399,8 +399,10 @@ static int ath12k_dp_rxdma_buf_free(stru
 	rx_ring = &dp->rxdma_mon_buf_ring;
 	ath12k_dp_rxdma_buf_ring_free(ab, rx_ring);
 
-	rx_ring = &dp->tx_mon_buf_ring;
-	ath12k_dp_rxdma_buf_ring_free(ab, rx_ring);
+	if (ab->hw_params->supports_tx_monitor) {
+		rx_ring = &dp->tx_mon_buf_ring;
+		ath12k_dp_rxdma_buf_ring_free(ab, rx_ring);
+	}
 
 	return 0;
 }
@@ -448,13 +450,15 @@ static int ath12k_dp_rxdma_buf_setup(str
 			return ret;
 		}
 
-		rx_ring = &dp->tx_mon_buf_ring;
-		ret = ath12k_dp_rxdma_ring_buf_setup(ab, rx_ring,
-						     HAL_TX_MONITOR_BUF);
-		if (ret) {
-			ath12k_warn(ab,
-				    "failed to setup HAL_TX_MONITOR_BUF\n");
-			return ret;
+		if (ab->hw_params->supports_tx_monitor) {
+			rx_ring = &dp->tx_mon_buf_ring;
+			ret = ath12k_dp_rxdma_ring_buf_setup(ab, rx_ring,
+							     HAL_TX_MONITOR_BUF);
+			if (ret) {
+				ath12k_warn(ab,
+					    "failed to setup HAL_TX_MONITOR_BUF\n");
+				return ret;
+			}
 		}
 	}
 
@@ -469,7 +473,8 @@ static void ath12k_dp_rx_pdev_srng_free(
 
 	for (i = 0; i < ab->hw_params->num_rxmda_per_pdev; i++) {
 		ath12k_dp_srng_cleanup(ab, &dp->rxdma_mon_dst_ring[i]);
-		ath12k_dp_srng_cleanup(ab, &dp->tx_mon_dst_ring[i]);
+		if (ab->hw_params->supports_tx_monitor)
+			ath12k_dp_srng_cleanup(ab, &dp->tx_mon_dst_ring[i]);
 	}
 }
 
@@ -533,15 +538,17 @@ static int ath12k_dp_rx_pdev_srng_alloc(
 			return ret;
 		}
 
-		ret = ath12k_dp_srng_setup(ar->ab,
-					   &dp->tx_mon_dst_ring[i],
-					   HAL_TX_MONITOR_DST,
-					   0, mac_id + i,
-					   DP_TX_MONITOR_DEST_RING_SIZE);
-		if (ret) {
-			ath12k_warn(ar->ab,
-				    "failed to setup HAL_TX_MONITOR_DST\n");
-			return ret;
+		if (ab->hw_params->supports_tx_monitor) {
+			ret = ath12k_dp_srng_setup(ar->ab,
+						   &dp->tx_mon_dst_ring[i],
+						   HAL_TX_MONITOR_DST,
+						   0, mac_id + i,
+						   DP_TX_MONITOR_DEST_RING_SIZE);
+			if (ret) {
+				ath12k_warn(ar->ab,
+					    "failed to setup HAL_TX_MONITOR_DST\n");
+				return ret;
+			}
 		}
 	}
 
@@ -5099,7 +5106,9 @@ void ath12k_dp_rx_free(struct ath12k_bas
 		ath12k_dp_srng_cleanup(ab, &dp->rxdma_err_dst_ring[i]);
 
 	ath12k_dp_srng_cleanup(ab, &dp->rxdma_mon_buf_ring.refill_buf_ring);
-	ath12k_dp_srng_cleanup(ab, &dp->tx_mon_buf_ring.refill_buf_ring);
+
+	if (ab->hw_params->supports_tx_monitor)
+		ath12k_dp_srng_cleanup(ab, &dp->tx_mon_buf_ring.refill_buf_ring);
 
 	ath12k_dp_rxdma_buf_free(ab);
 }
@@ -5294,13 +5303,15 @@ int ath12k_dp_rx_htt_setup(struct ath12k
 			return ret;
 		}
 
-		ring_id = dp->tx_mon_buf_ring.refill_buf_ring.ring_id;
-		ret = ath12k_dp_tx_htt_srng_setup(ab, ring_id,
-						  0, HAL_TX_MONITOR_BUF);
-		if (ret) {
-			ath12k_warn(ab, "failed to configure rxdma_mon_buf_ring %d\n",
-				    ret);
-			return ret;
+		if (ab->hw_params->supports_tx_monitor) {
+			ring_id = dp->tx_mon_buf_ring.refill_buf_ring.ring_id;
+			ret = ath12k_dp_tx_htt_srng_setup(ab, ring_id,
+							  0, HAL_TX_MONITOR_BUF);
+			if (ret) {
+				ath12k_warn(ab, "failed to configure rxdma_mon_buf_ring %d\n",
+					    ret);
+				return ret;
+			}
 		}
 	}
 
@@ -5324,8 +5335,10 @@ int ath12k_dp_rx_alloc(struct ath12k_bas
 	idr_init(&dp->rxdma_mon_buf_ring.bufs_idr);
 	spin_lock_init(&dp->rxdma_mon_buf_ring.idr_lock);
 
-	idr_init(&dp->tx_mon_buf_ring.bufs_idr);
-	spin_lock_init(&dp->tx_mon_buf_ring.idr_lock);
+	if (ab->hw_params->supports_tx_monitor) {
+		idr_init(&dp->tx_mon_buf_ring.bufs_idr);
+		spin_lock_init(&dp->tx_mon_buf_ring.idr_lock);
+	}
 
 	ret = ath12k_dp_srng_setup(ab,
 				   &dp->rx_refill_buf_ring.refill_buf_ring,
@@ -5370,13 +5383,15 @@ int ath12k_dp_rx_alloc(struct ath12k_bas
 			return ret;
 		}
 
-		ret = ath12k_dp_srng_setup(ab,
-					   &dp->tx_mon_buf_ring.refill_buf_ring,
-					   HAL_TX_MONITOR_BUF, 0, 0,
-					   DP_TX_MONITOR_BUF_RING_SIZE);
-		if (ret) {
-			ath12k_warn(ab, "failed to setup DP_TX_MONITOR_BUF_RING_SIZE\n");
-			return ret;
+		if (ab->hw_params->supports_tx_monitor) {
+			ret = ath12k_dp_srng_setup(ab,
+						   &dp->tx_mon_buf_ring.refill_buf_ring,
+						   HAL_TX_MONITOR_BUF, 0, 0,
+						   DP_TX_MONITOR_BUF_RING_SIZE);
+			if (ret) {
+				ath12k_warn(ab, "failed to setup DP_TX_MONITOR_BUF_RING_SIZE\n");
+				return ret;
+			}
 		}
 	}
 
@@ -5418,15 +5433,17 @@ int ath12k_dp_rx_pdev_alloc(struct ath12
 			return ret;
 		}
 
-		ring_id = dp->tx_mon_dst_ring[i].ring_id;
-		ret = ath12k_dp_tx_htt_srng_setup(ab, ring_id,
-						  mac_id + i,
-						  HAL_TX_MONITOR_DST);
-		if (ret) {
-			ath12k_warn(ab,
-				    "failed to configure tx_mon_dst_ring %d %d\n",
-				    i, ret);
-			return ret;
+		if (ab->hw_params->supports_tx_monitor) {
+			ring_id = dp->tx_mon_dst_ring[i].ring_id;
+			ret = ath12k_dp_tx_htt_srng_setup(ab, ring_id,
+							  mac_id + i,
+							  HAL_TX_MONITOR_DST);
+			if (ret) {
+				ath12k_warn(ab,
+					    "failed to configure tx_mon_dst_ring %d %d\n",
+					    i, ret);
+				return ret;
+			}
 		}
 	}
 out:
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1685,6 +1685,10 @@ ath12k_dp_tx_get_ring_id_type(struct ath
 {
 	int ret = 0;
 
+	if ((ring_type == HAL_TX_MONITOR_BUF || ring_type == HAL_TX_MONITOR_DST) &&
+	    !ab->hw_params->supports_tx_monitor)
+		return ret;
+
 	switch (ring_type) {
 	case HAL_RXDMA_BUF:
 		/* for some targets, host fills rx buffer to fw and fw fills to
@@ -2164,10 +2168,12 @@ int ath12k_dp_tx_htt_monitor_mode_ring_c
 	struct ath12k_base *ab = ar->ab;
 	int ret = 0;
 
-	ret = ath12k_dp_tx_htt_tx_monitor_mode_ring_config(ar, reset);
-	if (ret) {
-		ath12k_err(ab, "failed to setup tx monitor filter %d\n", ret);
-		return ret;
+	if (ab->hw_params->supports_tx_monitor) {
+		ret = ath12k_dp_tx_htt_tx_monitor_mode_ring_config(ar, reset);
+		if (ret) {
+			ath12k_err(ab, "failed to setup tx monitor filter %d\n", ret);
+			return ret;
+		}
 	}
 
 	ret = ath12k_dp_tx_htt_rx_monitor_mode_ring_config(ar, reset);
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1649,6 +1649,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_fwlog = true,
 		.support_umac_reset = false,
 		.en_qdsslog = true,
+		.supports_tx_monitor = false,
 	},
 	{
 		.name = "wcn7850 hw2.0",
@@ -1720,6 +1721,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_fwlog = true,
 		.support_umac_reset = false,
 		.en_qdsslog = true,
+		.supports_tx_monitor = false,
 	},
 	{
 		.name = "qcn9274 hw2.0",
@@ -1799,6 +1801,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_fwlog = true,
 		.support_umac_reset = true,
 		.en_qdsslog = true,
+		.supports_tx_monitor = false,
 	},
 	{
 		.name = "ipq5332 hw1.0",
@@ -1882,6 +1885,7 @@ static struct ath12k_hw_params ath12k_hw
		.support_umac_reset = false,
		.support_ce_manual_poll=true,
		.en_qdsslog = false,
+		.supports_tx_monitor = false,
 	},
 	{
 		.name = "qcn6432 hw1.0",
@@ -1959,6 +1963,7 @@ static struct ath12k_hw_params ath12k_hw
		.en_fwlog = false,
		.support_umac_reset = false,
		.en_qdsslog = false,
+		.supports_monitor = false,
 	},
 };
 
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -196,6 +196,7 @@ struct ath12k_hw_params {

	u16 interface_modes;
	bool supports_monitor:1;
+	bool supports_tx_monitor;
 
	bool idle_ps:1;
	bool cold_boot_calib:1;
