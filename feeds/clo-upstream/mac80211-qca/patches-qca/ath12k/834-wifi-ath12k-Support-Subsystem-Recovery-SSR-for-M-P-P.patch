From ef58f0184cc41afccaace35fb0bf1bd68fbd210b Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Mon, 9 Oct 2023 14:17:51 -0700
Subject: [PATCH] wifi: ath12k: Support Subsystem Recovery(SSR) for IPQ5332 +
 QCN6432

- Add Mode 0 SSR support for above platform.
- Refactor boot recovery code for ahb and hybrid interface based radios.
- Set default rproc coredump configure as RPROC_COREDUMP_INLINE.

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c     |  64 +++-
 drivers/net/wireless/ath/ath12k/ahb.h     |  17 +-
 drivers/net/wireless/ath/ath12k/core.c    | 397 ++++++++++++++++------
 drivers/net/wireless/ath/ath12k/core.h    |  16 +
 drivers/net/wireless/ath/ath12k/debugfs.c |  39 +++
 drivers/net/wireless/ath/ath12k/wmi.h     |   1 +
 6 files changed, 408 insertions(+), 126 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -691,11 +691,26 @@ static const struct ath12k_hif_ops ath12
 	.ssr_notifier_unreg = ath12k_ahb_ssr_notifier_unreg,
 };
 
+static struct rproc *ath12k_core_get_parent_of_rproc_node(struct rproc *rproc)
+{
+	struct device *rproc_dev;
+	struct rproc *rproc_pd;
+
+	rproc_dev = rproc->dev.parent;
+	rproc_pd = dev_get_drvdata(rproc_dev->parent);
+
+	if (!rproc_pd)
+		ath12k_err(NULL, "failed to get parent of rproc:%s\n",
+			   rproc->name);
+
+	return rproc_pd;
+}
+
 static int ath12k_core_get_rproc(struct ath12k_base *ab)
 {
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 	struct device *dev = ab->dev;
-	struct rproc *prproc, *rrproc;
+	struct rproc *prproc, *text_rproc, *rproc_pd;
 	phandle rproc_phandle, rproc_rpd_node;
 
 	if (of_property_read_u32(dev->of_node, "qcom,rproc", &rproc_phandle)) {
@@ -710,17 +725,46 @@ static int ath12k_core_get_rproc(struct
 	}
 	ab_ahb->tgt_rproc = prproc;
 
-	if (of_property_read_u32(dev->of_node, "qcom,rproc_rpd", &rproc_rpd_node)) {
-		ath12k_err(ab, "failed to get q6_root_pd_rproc handle\n");
-		return -ENOENT;
-	}
-
-	rrproc = rproc_get_by_phandle(rproc_rpd_node);
-	if (!rrproc) {
-		ath12k_err(ab, "failed to get root pd rproc\n");
-		return -EINVAL;
+	/* Currently in multipd arch, rootpd handle is used to collect
+	 * coredump on firmware assert. Hence, there will be total 1
+	 * coredump for all radios. To enable, use dump_conf as inline.
+	 * Refer to remoteproc module for more detail.
+	 * i:e; rproc->dump_conf = RPROC_COREDUMP_INLINE
+	 */
+	ab_ahb->tgt_rproc->dump_conf = RPROC_COREDUMP_INLINE;
+
+	rproc_pd = ath12k_core_get_parent_of_rproc_node(prproc);
+	if (rproc_pd) {
+		if (!strncmp(rproc_pd->name,
+			     DT_NODE_RPROC_TEXTPD_NAME,
+			     sizeof(DT_NODE_RPROC_TEXTPD_NAME))) {
+			text_rproc = rproc_pd;
+			ab_ahb->tgt_text_rproc = rproc_pd;
+			rproc_pd = ath12k_core_get_parent_of_rproc_node(text_rproc);
+		}
+
+		if (rproc_pd) {
+			if (!strncmp(rproc_pd->name,
+				     DT_NODE_RPROC_ROOTPD_NAME,
+				     sizeof(DT_NODE_RPROC_ROOTPD_NAME))) {
+				ab_ahb->tgt_rrproc = rproc_pd;
+				ab_ahb->tgt_rrproc->dump_conf = RPROC_COREDUMP_INLINE;
+			}
+		}
+	} else {
+		if (of_property_read_u32(dev->of_node, "qcom,rproc_rpd", &rproc_rpd_node)) {
+			ath12k_err(ab, "failed to get q6_root_pd_rproc handle\n");
+			return -ENOENT;
+		}
+
+		rproc_pd = rproc_get_by_phandle(rproc_rpd_node);
+		if (!rproc_pd) {
+			ath12k_err(ab, "failed to get root pd rproc\n");
+			return -EINVAL;
+		}
+		ab_ahb->tgt_rrproc = rproc_pd;
+		ab_ahb->tgt_rrproc->dump_conf = RPROC_COREDUMP_INLINE;
 	}
-	ab_ahb->tgt_rrproc = rrproc;
 
 	return 0;
 }
--- a/drivers/net/wireless/ath/ath12k/ahb.h
+++ b/drivers/net/wireless/ath/ath12k/ahb.h
@@ -11,6 +11,9 @@
 #include "core.h"
 #include "debug.h"
 
+#define DT_NODE_RPROC_TEXTPD_NAME "d100000.remoteproc:remoteproc_pd4"
+#define DT_NODE_RPROC_ROOTPD_NAME "d100000.remoteproc"
+
 #define ATH12K_AHB_RECOVERY_TIMEOUT (3 * HZ)
 
 #define ATH12K_AHB_SMP2P_SMEM_MSG		GENMASK(15, 0)
@@ -27,7 +30,7 @@ enum ath12k_ahb_smp2p_msg_id {
 struct ath12k_base;
 
 struct ath12k_ahb {
-	struct rproc *tgt_rproc, *tgt_rrproc;
+	struct rproc *tgt_rproc, *tgt_text_rproc, *tgt_rrproc;
 	struct {
 		struct device *dev;
 		struct iommu_domain *iommu_domain;
@@ -53,7 +56,9 @@ static inline int ath12k_rproc_register_
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 #ifdef CONFIG_REMOTEPROC
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
-	return rproc_register_subsys_notifier(ab_ahb->tgt_rrproc->name,&ab->ssr_nb, &ab->atomic_ssr_nb);
+	return rproc_register_subsys_notifier(ab_ahb->tgt_rrproc->name,
+					      &ab->rpd_ssr_nb,
+					      &ab->rpd_atomic_ssr_nb);
 #else
 	ab->ssr_atomic_upd_handle = qcom_register_ssr_atomic_notifier(ab_ahb->tgt_rproc->name,
 								      &ab->atomic_ssr_nb);
@@ -68,13 +73,13 @@ static inline int ath12k_rproc_register_
 
 	if (ab->userpd_id == USERPD_0) {
 		ab->ssr_atomic_rpd_handle = qcom_register_ssr_atomic_notifier(ab_ahb->tgt_rrproc->name,
-									      &ab->atomic_ssr_nb);
+									      &ab->rpd_atomic_ssr_nb);
 		if (!ab->ssr_atomic_rpd_handle) {
 			ath12k_err(ab, "failed to register root_pd atomic handle\n");
 			return -EINVAL;
 		}
 		ab->ssr_rpd_handle = qcom_register_ssr_notifier(ab_ahb->tgt_rrproc->name,
-								&ab->ssr_nb);
+								&ab->rpd_ssr_nb);
 		if (!ab->ssr_rpd_handle)
 			return -EINVAL;
 	}
@@ -99,9 +104,9 @@ static inline int ath12k_rproc_unregiste
 						    &ab->atomic_ssr_nb);
 	if (ab->ssr_atomic_rpd_handle)
 		qcom_unregister_ssr_atomic_notifier(ab->ssr_atomic_rpd_handle,
-						    &ab->atomic_ssr_nb);
+						    &ab->rpd_atomic_ssr_nb);
 	if (ab->ssr_rpd_handle)
-		qcom_unregister_ssr_notifier(ab->ssr_rpd_handle, &ab->ssr_nb);
+		qcom_unregister_ssr_notifier(ab->ssr_rpd_handle, &ab->rpd_ssr_nb);
 	return 0;
 #endif
 #else
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -143,6 +143,32 @@ void ath12k_core_put_hw_group(struct ath
 
 }
 
+static void ath12k_core_hw_group_reset(struct work_struct *work)
+{
+	struct ath12k_hw_group *ag = container_of(work, struct ath12k_hw_group, reset_work);
+	struct ath12k_base *ab;
+	int i;
+
+	if (ag->recovery_mode != ATH12K_MLO_RECOVERY_MODE0)
+		return;
+
+	for (i = 0; i < ag->num_chip; i++) {
+		ab = ag->ab[i];
+		if (ab->hif.bus == ATH12K_BUS_PCI) {
+			ag->crash_type = ATH12K_RPROC_ROOTPD_AHB_CRASH;
+			continue;
+		}
+
+		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
+			set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
+			set_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags);
+			queue_work(ab->workqueue_aux, &ab->reset_work);
+		}
+
+		ath12k_hal_dump_srng_stats(ab);
+	}
+}
+
 static struct ath12k_hw_group *
 ath12k_core_hw_group_alloc(u8 id, u8 max_chip)
 {
@@ -163,6 +189,7 @@ ath12k_core_hw_group_alloc(u8 id, u8 max
 	mutex_init(&ag->mlomem_arena.mutex_lock);
 	ag->hw_queues_stopped = false;
 	ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
+	INIT_WORK(&ag->reset_work, ath12k_core_hw_group_reset);
 
 	return ag;
 }
@@ -1695,7 +1722,7 @@ err_firmware_stop:
 	return ret;
 }
 
-#define ATH12K_COLLECT_DUMP_TIMEOUT	(90 * HZ)
+#define ATH12K_COLLECT_DUMP_TIMEOUT	(120 * HZ)
 
 void ath12k_core_wait_dump_collect(struct ath12k_base *ab)
 {
@@ -1770,7 +1797,8 @@ static int ath12k_core_ssr_notifier_cb(s
 				       void *data)
 {
 	struct ath12k_base *ab = container_of(nb, struct ath12k_base, ssr_nb);
-		if (ab->collect_dump && (event == ATH12K_SSR_POWERUP)) {
+
+	if (ab->collect_dump && event == ATH12K_SSR_POWERUP) {
 		ab->collect_dump = false;
 		wake_up(&ab->ssr_dump_wq);
 		return NOTIFY_OK;
@@ -1779,67 +1807,131 @@ static int ath12k_core_ssr_notifier_cb(s
 	return NOTIFY_DONE;
 }
 
-/* Print the driver stats and crash the system on receiving this notification */
+static int ath12k_core_rpd_ssr_notifier_cb(struct notifier_block *nb,
+					   const unsigned long event,
+					   void *data)
+{
+	struct ath12k_base *ab = container_of(nb, struct ath12k_base, rpd_ssr_nb);
+
+	if (ab->collect_dump && event == ATH12K_SSR_POWERUP) {
+		ab->collect_dump = false;
+		wake_up(&ab->ssr_dump_wq);
+		return NOTIFY_OK;
+	}
+
+	return NOTIFY_DONE;
+}
+
+static int ath12k_core_check_ssr_notifier_as_expected(struct ath12k_base *ab,
+						      void *data,
+						      const char *node)
+{
+	phandle rproc_phandle;
+	struct device *dev = ab->dev;
+	struct platform_device *pdev;
+	struct device_node *rproc_node;
+	struct platform_device *ssr_pdev = data;
+
+	if (of_property_read_u32(dev->of_node, node, &rproc_phandle))
+		return -EINVAL;
+
+	rproc_node = of_find_node_by_phandle(rproc_phandle);
+	if (!rproc_node) {
+		ath12k_warn(ab, "ssr notification failed to get rproc_node\n");
+		return -EINVAL;
+	}
+
+	pdev = of_find_device_by_node(rproc_node);
+	if (!pdev) {
+		ath12k_warn(ab, "Failed to get pdev from device node\n");
+		return -EINVAL;
+	}
+
+	if (!ab->in_panic && (strcmp(ssr_pdev->name, pdev->name) != 0)) {
+		ath12k_warn(ab, "SSR notification mismatch %s  pdev name:%s\n",
+			    ssr_pdev->name, pdev->name);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static int ath12k_core_atomic_ssr_notifier_cb(struct notifier_block *nb,
 					      const unsigned long event,
 					      void *data)
 {
 	struct ath12k_base *ab = container_of(nb, struct ath12k_base, atomic_ssr_nb);
-	struct device *dev = ab->dev;
-	phandle rrproc_phandle;
-	struct platform_device *pdev = NULL;
-	struct device_node *rrproc_node = NULL;
-	struct platform_device *ssr_pdev = (struct platform_device *)data;
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	struct platform_device *ssr_pdev = data;
+	int ret;
+
 	if (event != ATH12K_SSR_PREPARE_SHUTDOWN)
 		return NOTIFY_DONE;
 
-	ab->collect_dump = true;
-
 	if (!test_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags))
 		return NOTIFY_DONE;
 
-	if (of_property_read_u32(dev->of_node, "qcom,rproc_rpd",
-				 &rrproc_phandle))
-		return NOTIFY_DONE;
-	rrproc_node = of_find_node_by_phandle(rrproc_phandle);
-	if (!rrproc_node) {
-		ath12k_warn(ab, "ssr notification failed to get rproc_node\n");
+	ab->collect_dump = true;
+
+	ret = ath12k_core_check_ssr_notifier_as_expected(ab, data, "qcom,rproc");
+	if (ret)
 		return NOTIFY_DONE;
+
+	if (strcmp(ssr_pdev->name, ab_ahb->tgt_rproc->name) == 0) {
+		ab->ag->crash_type = ATH12K_RPROC_USERPD_HYBRID_CRASH;
+		ab_ahb->tgt_rproc->state = RPROC_CRASHED;
 	}
-	pdev = of_find_device_by_node(rrproc_node);
-	if (!pdev) {
-		ath12k_warn(ab, "Failed to get pdev from device node\n");
-		return NOTIFY_DONE;
+
+	if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
+		set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
+		set_bit(ATH12K_FLAG_RECOVERY, &ab->ag->dev_flags);
+		set_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags);
+		queue_work(ab->workqueue_aux, &ab->reset_work);
 	}
 
-	/* incase of panic notifier ssr callback, ssr_pdev->name will not be same as
-	 * pdev->name because ssr_pdev->name is ab->pdev->name which is not similar
-	 * as dts entry
-	 */
-	if (!ab->in_panic && (strcmp(ssr_pdev->name, pdev->name) != 0)) {
-		ath12k_warn(ab, "SSR notification mismatch %s  pdev name:%s\n",
-			    ssr_pdev->name, pdev->name);
+	ath12k_hal_dump_srng_stats(ab);
+
+	return NOTIFY_OK;
+}
+
+/* Print the driver stats and crash the system on receiving this notification */
+static int ath12k_core_rpd_atomic_ssr_notifier_cb(struct notifier_block *nb,
+						  const unsigned long event,
+						  void *data)
+{
+	struct ath12k_base *ab = container_of(nb, struct ath12k_base, rpd_atomic_ssr_nb);
+	struct ath12k_hw_group *ag = ab->ag;
+	struct platform_device *ssr_pdev = data;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	int ret;
+
+	if (event != ATH12K_SSR_PREPARE_SHUTDOWN)
+		return NOTIFY_DONE;
+
+	if (!test_bit(ATH12K_FLAG_REGISTERED, &ag->dev_flags))
+		return NOTIFY_DONE;
+
+	ab->collect_dump = true;
+
+	ret = ath12k_core_check_ssr_notifier_as_expected(ab, data, "qcom,rproc_rpd");
+	if (ret)
 		return NOTIFY_DONE;
-	}
 
 	/* Changing the rrpoc->state to crashed disabled the
 	 * remoteproc module to do the recovery process.
 	 * This module will take care of the rrproc recovery process.
 	 */
 	if (strcmp(ssr_pdev->name, ab_ahb->tgt_rrproc->name) == 0) {
+		ag->crash_type = ATH12K_RPROC_ROOTPD_HYBRID_CRASH;
 		ab_ahb->tgt_rrproc->state = RPROC_CRASHED;
-	} else {
-		ab_ahb->tgt_rproc->state = RPROC_CRASHED;
 	}
 
-	if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
-		set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
-		set_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags);
-		queue_work(ab->workqueue_aux, &ab->reset_work);
+	if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ag->dev_flags))) {
+		set_bit(ATH12K_FLAG_RECOVERY, &ag->dev_flags);
+		set_bit(ATH12K_FLAG_CRASH_FLUSH, &ag->dev_flags);
+		queue_work(ab->workqueue_aux, &ag->reset_work);
 	}
 
-	ath12k_hal_dump_srng_stats(ab);
 	/* TODO Add more driver stats */
 
 	return NOTIFY_OK;
@@ -2813,98 +2905,213 @@ static void ath12k_core_mode1_recovery_w
 	ath12k_mode1_recovery_reconfig(ab, __func__);
 }
 
-static void ath12k_rproc_recovery_do_coredump(struct rproc *rproc)
+static int ath12k_core_rproc_stop(struct rproc *rproc)
 {
-	if (rproc) {
-		rproc->ops->coredump(rproc);
+	int ret = 0;
+
+	if (!rproc)
+		return ret;
+
+	if (rproc->state != RPROC_OFFLINE) {
+		ret = rproc_stop(rproc, true);
+		if (ret < 0) {
+			ath12k_err(NULL, "rproc:%s stop failed:%d\n",
+				   rproc->name, ret);
+		}
 	}
+	return ret;
 }
-static int ath12k_rproc_recovery_stop_coredump(struct ath12k_base *ab)
+
+static int ath12k_core_rproc_start(struct rproc *rproc)
 {
-	int ret;
-	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	const struct firmware *firmware_p = NULL;
+	struct device *dev;
+	int ret = 0;
 
-	if (ab_ahb->tgt_rproc) {
-		ab_ahb->tgt_rproc->state = RPROC_CRASHED;
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
-		ret = rproc_stop(ab_ahb->tgt_rproc, true);
-#else
-		ret = rproc_shutdown(ab_ahb->tgt_rproc);
-#endif
+	if (rproc && rproc->state != RPROC_RUNNING) {
+		dev = &rproc->dev;
+		ret = request_firmware(&firmware_p, rproc->firmware, dev);
 		if (ret < 0) {
-			ath12k_err(ab, "userpd rproc stop failed\n");
+			ath12k_err(NULL, "rproc:%s request_firmware failed: %d\n",
+				   rproc->name, ret);
 			return ret;
 		}
-		ab_ahb->tgt_rproc->state = RPROC_SUSPENDED;
-	}
-	if (ab_ahb->tgt_rrproc) {
-		ab_ahb->tgt_rrproc->state = RPROC_RUNNING;
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
-		ret = rproc_stop(ab_ahb->tgt_rrproc, true);
-#else
-		ret = rproc_shutdown(ab_ahb->tgt_rrproc);
-#endif
+		ret = rproc_start(rproc, firmware_p);
 		if (ret < 0) {
-			ath12k_err(ab, "rootpd rproc stop failed\n");
-			return ret;
+			ath12k_err(NULL, "rproc:%s start failed: %d\n",
+				   rproc->name, ret);
 		}
-		ath12k_rproc_recovery_do_coredump(ab_ahb->tgt_rrproc);
+		release_firmware(firmware_p);
 	}
+	return ret;
+}
 
-	return 0;
+static void ath12k_core_rproc_coredump(struct rproc *rproc)
+{
+	if (rproc)
+		rproc->ops->coredump(rproc);
 }
 
-static int ath12k_rproc_recovery_power_up(struct ath12k_base *ab)
+/* Asserted target's reboot handling for crash type ATH12K_RPROC_ROOTPD_AHB_CRASH */
+static void ath12k_core_rproc_boot_recovery(struct ath12k_base *ab)
 {
+	struct ath12k_hw_group *ag = ab->ag;
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-	struct rproc *rproc_rpd;
-	const struct firmware *firmware_p = NULL;
-	struct rproc *rproc;
-	struct device *dev;
-	int ret;
 
-	rproc = ab_ahb->tgt_rproc;
-	rproc_rpd = ab_ahb->tgt_rrproc;
+	if (ag->crash_type != ATH12K_RPROC_ROOTPD_AHB_CRASH)
+		return;
 
-	if (rproc_rpd) {
-		dev = &rproc_rpd->dev;
-		ret = request_firmware(&firmware_p, rproc_rpd->firmware, dev);
-		if (ret < 0) {
-			ath12k_err(ab, "request_firmware failed: %d\n", ret);
-			return ret;
+	/*
+	 * Stop user pd
+	 * Collect coredump using user pd if enabled
+	 * Stop root pd
+	 * Collect coredump using root pd
+	 * Free Target memory chunk
+	 * Start root pd, then start user pd
+	 */
+
+	ab_ahb->tgt_rproc->state = RPROC_CRASHED;
+	ath12k_core_rproc_stop(ab_ahb->tgt_rproc);
+
+	ab_ahb->tgt_rproc->state = RPROC_SUSPENDED;
+	ath12k_core_rproc_coredump(ab_ahb->tgt_rproc);
+
+	ab_ahb->tgt_rrproc->state = RPROC_RUNNING;
+	ath12k_core_rproc_stop(ab_ahb->tgt_rrproc);
+	ath12k_core_rproc_coredump(ab_ahb->tgt_rrproc);
+
+	ath12k_qmi_free_target_mem_chunk(ab);
+
+	ath12k_core_rproc_start(ab_ahb->tgt_rrproc);
+	ath12k_core_rproc_start(ab_ahb->tgt_rproc);
+	ag->crash_type = ATH12K_NO_CRASH;
+	ath12k_core_wait_dump_collect(ab);
+}
+
+/* Asserted target's reboot handling for crash type ATH12K_RPROC_USERPD_HYBRID_CRASH */
+static void ath12k_core_upd_rproc_boot_recovery(struct ath12k_base *ab)
+{
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+
+	if (ag->crash_type != ATH12K_RPROC_USERPD_HYBRID_CRASH)
+		return;
+
+	/*
+	 * Stop user pd
+	 * Collect coredump using user pd
+	 * Free Target memory chunk
+	 * Start root pd
+	 */
+	ath12k_core_rproc_stop(ab_ahb->tgt_rproc);
+	ath12k_core_rproc_coredump(ab_ahb->tgt_rproc);
+	ath12k_qmi_free_target_mem_chunk(ab);
+	ath12k_core_rproc_start(ab_ahb->tgt_rproc);
+	ag->crash_type = ATH12K_NO_CRASH;
+	ath12k_core_wait_dump_collect(ab);
+}
+
+/* Asserted target's reboot handling for crash type ATH12K_RPROC_ROOTPD_HYBRID_CRASH */
+static void ath12k_core_rpd_rproc_boot_recovery(struct ath12k_base *ab)
+{
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	struct rproc *rootpd_rproc = ab_ahb->tgt_rrproc;
+	struct rproc *txtpd_rproc = ab_ahb->tgt_text_rproc;
+	struct rproc *usrpd_rproc = ab_ahb->tgt_rproc;
+	struct ath12k_base *tmp_ab;
+	int user_pd, ret;
+
+	if (ag->crash_type != ATH12K_RPROC_ROOTPD_HYBRID_CRASH)
+		return;
+
+	if (!rootpd_rproc || !usrpd_rproc) {
+		ath12k_err(ab, "rproc(s) are null\n");
+		return;
+	}
+
+	if (rootpd_rproc->state == RPROC_OFFLINE) {
+		ath12k_err(ab, "rootpd rproc:%s is already stopped.\n",
+			   rootpd_rproc->name);
+		return;
+	}
+
+	if (usrpd_rproc->state == RPROC_OFFLINE) {
+		ath12k_err(ab, "userpd rproc:%s is already stopped.\n",
+			   usrpd_rproc->name);
+		return;
+	}
+
+	usrpd_rproc->state = RPROC_CRASHED;
+	ret = ath12k_core_rproc_stop(usrpd_rproc);
+	if (ret)
+		ath12k_err(ab, "failed to stop user_pd:%s ret:%d\n",
+			   usrpd_rproc->name, ret);
+
+	/* Reboot Sequence of all remoteproc pds
+	 * 1. Stop all user pds
+	 * 2. In case of text device present, stop text pd
+	 * 3. Stop the root pd
+	 * 4. Do the coredump using root pd handle once all user pds and root
+	 *    pd are stopped:
+	 *    Root pd handle coredump will take care of all the userpd data
+	 *    collection as part of the coredump
+	 * 5. Free Target memory chunk
+	 * 6. Power up the remote processor again as per below sequence
+	 *    Start the rootpd device
+	 *    Start textpd device if present
+	 *    Start all userpd devices
+	 */
+	if (!ag->num_started) {
+		if (txtpd_rproc && txtpd_rproc->state != RPROC_OFFLINE) {
+			txtpd_rproc->state = RPROC_CRASHED;
+			ret = ath12k_core_rproc_stop(txtpd_rproc);
+			if (ret)
+				ath12k_err(ab, "failed to stop text_pd:%s ret:%d\n",
+					   txtpd_rproc->name, ret);
 		}
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
-		ret = rproc_start(rproc_rpd, firmware_p);
-#else
-		ret = rproc_boot(rproc_rpd);
-#endif
-		if (ret < 0) {
-			ath12k_err(ab, "Root pd rproc_start failed: %d\n", ret);
-			return ret;
+		rootpd_rproc->state = RPROC_RUNNING;
+		ret = ath12k_core_rproc_stop(rootpd_rproc);
+		if (ret)
+			ath12k_err(ab, "failed to stop root_pd:%s ret:%d\n",
+				   rootpd_rproc->name, ret);
+
+		ath12k_core_rproc_coredump(rootpd_rproc);
+	}
+
+	ath12k_qmi_free_target_mem_chunk(ab);
+
+	if (!ag->num_started) {
+		ret = ath12k_core_rproc_start(rootpd_rproc);
+		if (ret)
+			ath12k_err(ab, "failed to start root_pd:%s ret:%d\n",
+				   rootpd_rproc->name, ret);
+
+		ath12k_core_wait_dump_collect(ab);
+
+		if (txtpd_rproc) {
+			ret = ath12k_core_rproc_start(txtpd_rproc);
+			if (ret)
+				ath12k_err(ab, "failed to start text_pd:%s ret:%d\n",
+					   txtpd_rproc->name, ret);
 		}
-	} else {
-		if (rproc) {
-			dev = &rproc->dev;
-			ret = request_firmware(&firmware_p,
-					       rproc->firmware, dev);
-			if (ret < 0) {
-				ath12k_err(ab, "request_firmware failed: %d\n",
-						ret);
-				return ret;
-			}
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
-			ret = rproc_start(rproc, firmware_p);
-#else
-			ret = rproc_boot(rproc);
-#endif
-			if (ret < 0) {
-				ath12k_err(ab, "User pd rproc_start failed: %d\n", ret);
-				return ret;
+
+		for (user_pd = 0; user_pd < ag->num_chip; user_pd++) {
+			tmp_ab = ag->ab[user_pd];
+			if (tmp_ab->hif.bus == ATH12K_BUS_PCI)
+				continue;
+
+			ab_ahb = ath12k_ahb_priv(tmp_ab);
+			usrpd_rproc = ab_ahb->tgt_rproc;
+			ret = ath12k_core_rproc_start(usrpd_rproc);
+			if (ret) {
+				ath12k_err(tmp_ab, "failed to start user_pd:%s ret:%d\n",
+					   usrpd_rproc->name, ret);
 			}
 		}
-	}
 
-	return 0;
+		ag->crash_type = ATH12K_NO_CRASH;
+	}
 }
 
 /*
@@ -2976,7 +3183,6 @@ static void ath12k_core_disable_ppe_rtnl
 }
 #endif
 
-
 static void ath12k_core_reset(struct work_struct *work)
 {
 	struct ath12k_base *ab = container_of(work, struct ath12k_base, reset_work);
@@ -3183,10 +3389,13 @@ static void ath12k_core_reset(struct wor
 			ath12k_hif_power_up(ab);
 		} else if (ab->hif.bus == ATH12K_BUS_AHB ||
 			   ab->hif.bus == ATH12K_BUS_HYBRID) {
-			ath12k_rproc_recovery_stop_coredump(ab);
-			ath12k_qmi_free_target_mem_chunk(ab);
-			ath12k_rproc_recovery_power_up(ab);
-			ath12k_core_wait_dump_collect(ab);
+			/* When crash type ATH12K_RPROC_USERPD_HYBRID_CRASH is set */
+			ath12k_core_upd_rproc_boot_recovery(ab);
+			/* When crash type ATH12K_RPROC_ROOTPD_AHB_CRASH is set */
+			ath12k_core_rproc_boot_recovery(ab);
+			/* When crash type ATH12K_RPROC_ROOTPD_HYBRID_CRASH is set */
+			ath12k_core_rpd_rproc_boot_recovery(ab);
+
 		}
 		ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset started\n");
 	}
@@ -3275,6 +3484,9 @@ int ath12k_core_init(struct ath12k_base
 	init_waitqueue_head(&ab->ipci.gic_msi_waitq);
 	ab->ssr_nb.notifier_call = ath12k_core_ssr_notifier_cb;
 	ab->atomic_ssr_nb.notifier_call = ath12k_core_atomic_ssr_notifier_cb;
+	ab->rpd_ssr_nb.notifier_call = ath12k_core_rpd_ssr_notifier_cb;
+	ab->rpd_atomic_ssr_nb.notifier_call = ath12k_core_rpd_atomic_ssr_notifier_cb;
+
 	ret = ath12k_hif_ssr_notifier_reg(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to register ssr notifier callback\n");
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1243,6 +1243,37 @@ struct vendor_info {
     u32 subsystem_device;
 };
 
+/* Fatal error notification type based on specific platform type */
+enum ath12k_core_crash_type {
+	/* Fatal error notification unknown or fatal error notification
+	 * is honored.
+	 */
+	ATH12K_NO_CRASH,
+
+	/* Fatal error notification from MHI message */
+	ATH12K_MHI_CRASH,
+
+	/* Fatal error notification from remoteproc user pd for ahb based
+	 * internal radio
+	 */
+	ATH12K_RPROC_USERPD_AHB_CRASH,
+
+	/* Fatal error notification from remoteproc user pd for platform with
+	 * ahb based internal radio and pcic based external radios
+	 */
+	ATH12K_RPROC_USERPD_HYBRID_CRASH,
+
+	/* Fatal error notification from remoteproc root pd for ahb based
+	 * internal radio
+	 */
+	ATH12K_RPROC_ROOTPD_AHB_CRASH,
+
+	/* Fatal error notification from remoteproc root pd for platform with
+	 * ahb based internal radio and pcic based external radios
+	 */
+	ATH12K_RPROC_ROOTPD_HYBRID_CRASH
+};
+
 enum ath12k_mlo_recovery_mode {
 	ATH12K_MLO_RECOVERY_MODE0 = 1,
 	ATH12K_MLO_RECOVERY_MODE1 = 2,
@@ -1284,6 +1315,7 @@ struct ath12k_hw_group {
 	bool mgmt_rx_reorder;
 	unsigned long dev_flags;
 	enum ath12k_mlo_recovery_mode recovery_mode;
+	enum ath12k_core_crash_type crash_type;
 	struct ath12k_hw *ah[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_base *ab[ATH12K_MAX_SOCS];
 	struct ath12k __rcu *hw_links[ATH12K_GROUP_MAX_RADIO];
@@ -1293,6 +1325,8 @@ struct ath12k_hw_group {
 	struct ath12k_host_mlo_mem_arena mlomem_arena;
 	atomic_t num_dp_tx_pending;
 	u64 mlo_tstamp_offset;
+	struct work_struct reset_work;
+	struct work_struct recovery_work;
 	struct ath12k_mlo_dp_umac_reset mlo_umac_reset;
 	struct completion umac_reset_complete;
 	bool trigger_umac_reset;
@@ -1434,9 +1468,13 @@ struct ath12k_base {
 	bool collect_dump;
 	struct notifier_block ssr_nb;
 	struct notifier_block atomic_ssr_nb;
+	struct notifier_block rpd_ssr_nb;
+	struct notifier_block rpd_atomic_ssr_nb;
 	void *ssr_upd_handle;
+	void *ssr_txt_handle;
 	void *ssr_rpd_handle;
 	void *ssr_atomic_rpd_handle;
+	void *ssr_atomic_txt_handle;
 	void *ssr_atomic_upd_handle;
 	struct completion reconfigure_complete;
 	unsigned long reset_fail_timeout;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -4,6 +4,8 @@
  * Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
  */
 
+#include <linux/of.h>
+
 #include "debugfs.h"
 
 #include "core.h"
@@ -2016,6 +2018,40 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static void ath12k_debug_multipd_wmi_pdev_set_param(struct ath12k_base *ab,
+						    const unsigned int value)
+{
+	struct ath12k_pdev *pdev;
+	struct ath12k *ar;
+	bool assert_userpd;
+	int i;
+
+	if (ab->hif.bus == ATH12K_BUS_PCI)
+		return;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		ar = pdev->ar;
+
+		/* Set pdev param to let firmware know which pd to use for
+		 * sending fatal IRQ.
+		 * Non-MLO, fatal error comes from asserted radios's user pd
+		 * MLO, fatal error comes from asserted radio's root pd
+		 */
+		if (!ab->ag->mlo_capable) {
+			assert_userpd = true;
+		} else {
+			if (value == ATH12K_FW_RECOVERY_DISABLE)
+				assert_userpd = false;
+			else
+				assert_userpd = true;
+		}
+
+		ath12k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_MPD_USERPD_SSR,
+					  assert_userpd, ar->pdev->pdev_id);
+	}
+}
+
 static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 					      char __user *user_buf,
 					      size_t count, loff_t *ppos)
@@ -2049,6 +2085,7 @@ static ssize_t ath12k_debug_write_fw_rec
 			ATH12K_WMI_FW_HANG_RECOVERY_MODE1 :
 			ATH12K_WMI_FW_HANG_RECOVERY_MODE0;
 
+
 	if (ag->mlo_capable) {
 		for (i = 0; i < ag->num_chip; i++) {
 			ab = ag->ab[i];
@@ -2074,6 +2111,7 @@ static ssize_t ath12k_debug_write_fw_rec
 				}
 
 				if (radioup) {
+					ath12k_debug_multipd_wmi_pdev_set_param(ab, ab->fw_recovery_support);
 					ret = ath12k_wmi_force_fw_hang_cmd(ar,
 									   recovery_mode,
 									   ATH12K_WMI_FW_HANG_DELAY, false);
@@ -2082,8 +2120,10 @@ static ssize_t ath12k_debug_write_fw_rec
 					continue;
 			}
 		}
-	} else
+	} else {
 		ab->fw_recovery_support = value ? true : false;
+		ath12k_debug_multipd_wmi_pdev_set_param(ab, ab->fw_recovery_support);
+	}
 
 	ret = count;
 
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -1231,6 +1231,7 @@ enum wmi_tlv_pdev_param {
 	WMI_PDEV_PARAM_SET_CMD_OBSS_PD_THRESHOLD = 0xbc,
 	WMI_PDEV_PARAM_SET_CMD_OBSS_PD_PER_AC = 0xbe,
 	WMI_PDEV_PARAM_ENABLE_SR_PROHIBIT = 0xc6,
+	WMI_PDEV_PARAM_MPD_USERPD_SSR = 0xce,
 };
 
 enum wmi_tlv_vdev_param {
