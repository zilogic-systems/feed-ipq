From 05a2f674d578d37c04441a1fd1c41032055d3363 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Mon, 25 Sep 2023 15:29:43 +0530
Subject: [PATCH] wifi: ath12k: Send disassoc to MLD sta during recovery

During Mode1 recovery, legacy clients will be continued
for non-asserted chipset but MLD STA will not be served
as in mode1 we will do MLO teardown between all partner
links. So, after recovery it is taking longer than the
expected time to resume the data traffic.

Fix this by disassociating all MLD station connected
by sending EVENT_LOW_ACK to upper layer with number of
packets set to maximum of '0xFFFF', thus making it to
reassociate once the recovery is completed.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  70 ++++++-----
 drivers/net/wireless/ath/ath12k/core.h |   1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 158 ++++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/mac.h  |   2 +-
 4 files changed, 171 insertions(+), 60 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2777,45 +2777,49 @@ int ath12k_mode1_recovery_reconfig(struc
 	}
 
 	/* sta state part */
-	for (j = 0; j < ab->num_radios; j++) {
-		pdev = &ab->pdevs[j];
-		ar = pdev->ar;
-
-		if (!ar)
-			continue;
+	for (i = 0; i < ag->num_chip; i++) {
+		partner_ab = ag->ab[i];
 
-		mutex_lock(&ar->conf_mutex);
+		for (j = 0; j < partner_ab->num_radios; j++) {
+			pdev = &partner_ab->pdevs[j];
+			ar = pdev->ar;
 
-		if (list_empty(&ar->arvifs)) {
-			mutex_unlock(&ar->conf_mutex);
-			continue;
-		}
+			if (!ar)
+				continue;
 
-		list_for_each_entry_safe_reverse(arvif, tmp, &ar->arvifs, list) {
-			ahvif = arvif->ahvif;
+			mutex_lock(&ar->conf_mutex);
 
-			if (!ahvif)
+			if (list_empty(&ar->arvifs)) {
+				mutex_unlock(&ar->conf_mutex);
 				continue;
-			/* unlock ar mutex here as the iterator will be called
-			 * within rcu lock.
-			 */
-			mutex_unlock(&ar->conf_mutex);
-			ieee80211_iterate_stations_atomic(ar->ah->hw,
-							  ath12k_core_mode1_recovery_sta_list,
-							  arvif);
-			mutex_lock(&ar->conf_mutex);
-			for (key_idx = 0; key_idx < WMI_MAX_KEY_INDEX; key_idx++) {
-				key = arvif->keys[key_idx];
-				if (key) {
-					ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-						"key:%p cipher:%d idx:%d flags:%d\n",
-						key, key->cipher, key->keyidx, key->flags);
-					ret = ath12k_mac_set_key(arvif->ar, SET_KEY, arvif, NULL, key);
+			}
+			list_for_each_entry_safe_reverse(arvif, tmp, &ar->arvifs, list) {
+				ahvif = arvif->ahvif;
+
+				if (!ahvif)
+					continue;
+
+				/* unlock ar mutex here as the iterator will be called
+				 * within rcu lock.
+				 */
+				mutex_unlock(&ar->conf_mutex);
+				ieee80211_iterate_stations_atomic(ar->ah->hw,
+								  ath12k_core_mode1_recovery_sta_list,
+								  arvif);
+				mutex_lock(&ar->conf_mutex);
+				for (key_idx = 0; key_idx < WMI_MAX_KEY_INDEX; key_idx++) {
+					key = arvif->keys[key_idx];
+					if (key) {
+						ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
+							   "key:%p cipher:%d idx:%d flags:%d\n",
+							   key, key->cipher, key->keyidx, key->flags);
+						ret = ath12k_mac_set_key(arvif->ar, SET_KEY, arvif, NULL, key);
+					}
 				}
 			}
+			mutex_unlock(&ar->conf_mutex);
+			ar->ah->in_recovery = false;
 		}
-		mutex_unlock(&ar->conf_mutex);
-		ar->ah->in_recovery = false;
 	}
 
 	for (i = 0; i < ag->num_hw; i++) {
@@ -2836,6 +2840,8 @@ int ath12k_mode1_recovery_reconfig(struc
 		}
 	}
 
+	/* Send disassoc to MLD STA */
+	ath12k_mac_partner_peer_cleanup(ab, true);
 	ab->recovery_start = false;
 	ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 	return ret;
@@ -3321,7 +3327,7 @@ static void ath12k_core_reset(struct wor
 
 	if (teardown) {
 		if (ath12k_core_trigger_umac_reset(ab) ||
-		    ath12k_mac_partner_peer_cleanup(ab)) {
+		    ath12k_mac_partner_peer_cleanup(ab, false)) {
 			/* Fallback to Mode0 if umac reset/peer_cleanup is
 			 * failed */
 			ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1179,7 +1179,7 @@ static void ath12k_mac_dec_num_stations(
 	ar->num_stations--;
 }
 
-int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab)
+int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab, bool disassoc)
 {
 
 	struct ath12k_base *partner_ab;
@@ -1220,32 +1220,59 @@ int ath12k_mac_partner_peer_cleanup(stru
 				/* get arsta */
 				sta = peer->sta;
 				ahsta = (struct ath12k_sta *)sta->drv_priv;
-				arsta = ahsta->link[link_id];
 
-				/* get arvif */
-				vif = peer->vif;
-				ahvif = (struct ath12k_vif *)vif->drv_priv;
-				arvif = ahvif->link[link_id];
-				cancel_work_sync(&arsta->update_wk);
+				if (!disassoc) {
+					arsta = ahsta->link[link_id];
 
-				mutex_lock(&ar->conf_mutex);
-				ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr);
-				if (ret) {
-					mutex_unlock(&ar->conf_mutex);
-					ath12k_warn(ar->ab,
-						    "failed to delete peer vdev_id %d addr %pM ret %d\n",
-						    arvif->vdev_id, arsta->addr, ret);
-					continue;
-				}
-				ret = ath12k_wait_for_peer_delete_done(ar, arvif->vdev_id, arsta->addr);
-				if (ret) {
+					/* get arvif */
+					vif = peer->vif;
+					ahvif = (struct ath12k_vif *)vif->drv_priv;
+					arvif = ahvif->link[link_id];
+					cancel_work_sync(&arsta->update_wk);
+
+					mutex_lock(&ar->conf_mutex);
+					ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr);
+					if (ret) {
+						mutex_unlock(&ar->conf_mutex);
+						ath12k_warn(ar->ab,
+							    "failed to delete peer vdev_id %d addr %pM ret %d\n",
+							    arvif->vdev_id, arsta->addr, ret);
+						continue;
+					}
+					ret = ath12k_wait_for_peer_delete_done(ar, arvif->vdev_id, arsta->addr);
+					if (ret) {
+						mutex_unlock(&ar->conf_mutex);
+						continue;
+					}
+
+					ar->num_peers--;
+					arvif->num_stations--;
+					ath12k_mac_dec_num_stations(arvif, arsta);
 					mutex_unlock(&ar->conf_mutex);
-					continue;
+				} else {
+					/* Send low ack to disassoc the MLD station
+					 * Need to check on the sequence as FW has
+					 * discarded the management packet at this
+					 * sequence.
+					 */
+					if (sta->mlo && !ahsta->low_ack_sent) {
+						ath12k_dbg(ar->ab, ATH12K_DBG_MODE1_RECOVERY,
+							   "sending low ack for/disassoc:%pM\n",
+							   sta->addr);
+						/* set num of packets to maximum so
+						 * that we distinguish in the hostapd
+						 * to send disassoc irrespective of
+						 * hostapd conf
+						 */
+						ieee80211_report_low_ack(sta, 0xFFFF);
+						/* Using this flag to avoid certain
+						 * known warnings which will be
+						 * triggerred when umac reset is
+						 * happening
+						 */
+						ahsta->low_ack_sent = true;
+					}
 				}
-				ar->num_peers--;
-				arvif->num_stations--;
-				ath12k_mac_dec_num_stations(arvif, arsta);
-				mutex_unlock(&ar->conf_mutex);
 			}
 		}
 	}
@@ -7421,6 +7448,7 @@ static int ath12k_mac_handle_link_sta_st
 		if (ret)
 			ath12k_warn(ar->ab, "Failed to add station: %pM for VDEV: %d\n",
 				    arsta->addr, arvif->vdev_id);
+		ahsta->low_ack_sent = false;
 	} else if ((old_state == IEEE80211_STA_NONE &&
 		    new_state == IEEE80211_STA_NOTEXIST)) {
 
@@ -7658,8 +7686,9 @@ int ath12k_mac_update_sta_state(struct i
 		ret = ath12k_mac_handle_link_sta_state(hw, arvif, arsta,
 						       old_state, new_state);
 		if (ret) {
-			ath12k_err(NULL, "unable to move link sta %d of sta %pM from state %d to %d",
-				   link_id, arsta->addr, old_state, new_state);
+			if (ret != -ESHUTDOWN)
+				ath12k_err(NULL, "unable to move link sta %d of sta %pM from state %d to %d",
+					   link_id, arsta->addr, old_state, new_state);
 
 			/* If FW recovery is ongoing, no need to move down sta states
 			 * as FW will wake up with a clean slate. Hence we set the
@@ -9288,6 +9317,16 @@ static u8 ath12k_mac_get_tx_link(struct
 		link = ahsta->deflink.link_id;
 
 	if (ieee80211_is_mgmt(hdr->frame_control)) {
+		/* For MLD STA post FW recovery, sending disassoc
+		 * in other link apart from primary link results in
+		 * disassoc packet getting dropped always, hence as
+		 * a workaround until FW enables it post recovery
+		 * this is needed to send disassoc always in primary
+		 * link
+		 */
+		if (ieee80211_is_disassoc(hdr->frame_control))
+			link = ahsta->deflink.link_id;
+
 		/* Perform address conversion for ML STA Tx */
 		bss_conf = rcu_dereference(vif->link_conf[link]);
 		link_sta = rcu_dereference(sta->link[link]);
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -210,5 +210,5 @@ int ath12k_set_vdev_param_to_all_vifs(st
 void ath12k_mac_reconfig_complete(struct ieee80211_hw *hw,
 				  enum ieee80211_reconfig_type reconfig_type,
 				  struct ath12k *asserted_radio);
-int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab);
+int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab, bool disassoc);
 #endif
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -672,6 +672,10 @@ struct ath12k_sta {
 	u16 ml_peer_id;
 	u8 assoc_link_id;
 	u8 num_peer;
+	/* Indicates whether disassoc is sent after recovery
+	 * ONLY used currently in recovery case
+	 */
+	bool low_ack_sent;
  };
 
 #define ATH12K_HALF_20MHZ_BW 10
