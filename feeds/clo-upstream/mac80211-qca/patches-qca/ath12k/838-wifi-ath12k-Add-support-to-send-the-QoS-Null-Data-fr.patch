From 767c4a0232ccc5efc8ff4bc14c1091a640787d6f Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Wed, 4 Oct 2023 13:02:41 +0530
Subject: [PATCH] wifi: ath12k: Add support to send the QoS Null Data frame
 through exception path

When we try to send QoS NULL Data frame in Ethernet encap type, it modified
as QoS Data frame with TID 0 and encryption enabled one if seecurity enabled.
But it should be send as open type frame with TID 7 since its a QoS NULL
data frame.

Added this frame under exception route to bypass TCL with the help of FW.

In MSDU EXT descriptor enqueue, TCL not considered the packet offset. So if we
pack HTT META then it misbehave due to misconception of HTT META as packet data.
So avoid the HTT META data pack for the MSDU EXT descriptor.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -434,7 +434,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	int ret;
 	u16 peer_id;
 	bool msdu_ext_desc = false;
-	bool is_diff_encap = false;
+	bool is_diff_encap = false, is_qos_null = false;
 	u8 align_pad, htt_meta_size = 0;
 
 	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)) ||
@@ -518,7 +518,8 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	switch (ti.encap_type) {
 	case HAL_TCL_ENCAP_TYPE_NATIVE_WIFI:
 		if ((ahvif->vif->offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED) &&
-		     skb->protocol == cpu_to_be16(ETH_P_PAE))
+		    (skb->protocol == cpu_to_be16(ETH_P_PAE) ||
+		     (is_qos_null = ieee80211_is_qos_nullfunc(hdr->frame_control))))
 			is_diff_encap = true;
 		else
 			ath12k_dp_tx_encap_nwifi(skb);
@@ -571,8 +572,20 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	/* Add metadata for sw encrypted vlan group traffic */
 	if ((!test_bit(ATH12K_FLAG_HW_CRYPTO_DISABLED, &ar->ab->ag->dev_flags) &&
 	     !(skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP) &&
-	     !(skb_cb->flags & ATH12K_SKB_CIPHER_SET) && ieee80211_has_protected(hdr->frame_control)) ||
+	     !(skb_cb->flags & ATH12K_SKB_CIPHER_SET) &&
+	     ieee80211_has_protected(hdr->frame_control)) ||
 	     is_diff_encap) {
+		/**
+		 * In MSDU EXT descriptor enqueue, TCL not considered the packet
+		 * offset. So if we pack HTT META then it misbehave due to
+		 * misconception of HTT META as packet data.
+		 * So avoid the HTT META data pack for the MSDU EXT descriptor.
+		 *
+		 * TODO: Need to confirm the same for vlan group traffic cases.
+		 */
+		if (is_qos_null && msdu_ext_desc)
+			goto skip_htt_meta;
+
 		align_pad = ((unsigned long)skb->data) & (HTT_META_DATA_ALIGNMENT - 1);
 		ret = ath12k_dp_metadata_align_skb(skb, align_pad);
 		if (unlikely(ret))
@@ -585,9 +598,11 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 
 		ti.pkt_offset += htt_meta_size;
 		ti.meta_data_flags |= HTT_TCL_META_DATA_VALID_HTT;
-		ti.flags0 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_TO_FW, 1) |
-			     FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_PKT_OFFSET,
+		ti.flags0 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_PKT_OFFSET,
 					ti.pkt_offset);
+
+skip_htt_meta:
+		ti.flags0 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_TO_FW, 1);
 		ti.encap_type = HAL_TCL_ENCAP_TYPE_RAW;
 		ti.encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
 	}
