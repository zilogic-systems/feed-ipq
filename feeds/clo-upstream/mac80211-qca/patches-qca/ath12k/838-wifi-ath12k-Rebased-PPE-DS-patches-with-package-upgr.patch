From 4b1a7d7051e603cfea8672564972e0cf161d9f0c Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Wed, 25 Oct 2023 12:57:17 -0700
Subject: [PATCH] wifi: ath12k: Rebased PPE-DS patches with package upgrade

Port missing lines of code from below patches.
DS feature is compiled and tested for over 16 hours with these changes.

763-b-wifi-ath12k-add-framework-to-support-PPE-DS.patch
765-ath12k-Bonded-interface-working.-Traffic-tested.patch
782-ath12k-PPEDS-SSR-Recovery-Fixes.patch

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/bondif.c |  96 ++++++++++++------
 drivers/net/wireless/ath/ath12k/bondif.h |   4 +-
 drivers/net/wireless/ath/ath12k/dp.c     |  17 ++++
 drivers/net/wireless/ath/ath12k/dp_rx.c  |   2 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c  |  46 ++++-----
 drivers/net/wireless/ath/ath12k/hw.c     | 121 ++++++++++++-----------
 drivers/net/wireless/ath/ath12k/hw.h     |  57 ++++++-----
 drivers/net/wireless/ath/ath12k/mac.c    |   6 +-
 drivers/net/wireless/ath/ath12k/ppe.c    |  18 +++-
 9 files changed, 215 insertions(+), 152 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/bondif.c
+++ b/drivers/net/wireless/ath/ath12k/bondif.c
@@ -32,6 +32,22 @@ static void ath12k_ieee80211_if_setup(st
 	netdev_set_priv_destructor(dev, ath12k_ieee80211_if_free);
 }
 
+static bool ath12k_ppe_vp_set_mtu(struct net_device *dev, struct ath12k_link_vif *arvif,
+				  const int mtu)
+{
+	if (!arvif->ndev_pvt->vp_num)
+		return true;
+
+	if (ppe_vp_mtu_set(arvif->ndev_pvt->vp_num, mtu) != PPE_VP_STATUS_SUCCESS) {
+		ath12k_err(NULL, "Setting mtu to %d for link_ndev:%s (vp num:%d) failed\n",
+			   mtu, arvif->ndev_pvt->link_ndev->name,
+			   arvif->ndev_pvt->vp_num);
+		return false;
+	}
+
+	return true;
+}
+
 static bool ath12k_dst_ppe_vp(struct net_device *dev,
                                          struct sk_buff *skb, void *cb_data)
 {
@@ -46,7 +62,7 @@ static bool ath12k_dst_ppe_vp(struct net
 	return true;
 }
 
-int ath12k_bond_link_add(struct ath12k_link_vif *arvif, struct net_device *link_dev)
+int ath12k_bond_link_enslave(struct ath12k_link_vif *arvif, struct net_device *link_dev)
 {
 	struct ath12k_link_vif_pvt *link_ndev_pvt = NULL;
 	int ret;
@@ -72,9 +88,10 @@ int ath12k_bond_link_add(struct ath12k_l
 	return 0;
 }
 
-void ath12k_bond_link_delete(struct ath12k_link_vif *arvif)
+void ath12k_bond_link_release(struct ath12k_link_vif *arvif)
 {
 	struct ath12k_link_vif_pvt *link_ndev_pvt = NULL;
+	int err;
 
 	if (!g_bonded_interface_model)
 		return;
@@ -91,7 +108,13 @@ void ath12k_bond_link_delete(struct ath1
 
 		/* bond_release expects slave netdevices to be in down state */
 		link_ndev_pvt->link_ndev->flags &= ~IFF_UP;
-		bond_release(link_ndev_pvt->bond_dev, link_ndev_pvt->link_ndev);
+		err = bond_release(link_ndev_pvt->bond_dev, link_ndev_pvt->link_ndev);
+		if (err) {
+			ath12k_err(NULL, "Error bond release link ndev:%s from bond ndev:%s: due to err: %d\n",
+				   link_ndev_pvt->link_ndev->name,
+				   link_ndev_pvt->bond_dev->name, err);
+			return;
+		}
 		arvif->ndev_pvt->is_bond_enslaved = false;
 	} else {
 		ath12k_err(NULL, "ERR unable to release Bond %s link ndev %px \n",
@@ -101,7 +124,7 @@ void ath12k_bond_link_delete(struct ath1
 
 static bool ath12k_stats_update_ppe_vp(struct net_device *dev, ppe_vp_hw_stats_t *vp_stats)
 {
-        struct pcpu_sw_netstats *tstats = this_cpu_ptr(netdev_tstats(dev));
+	struct pcpu_sw_netstats *tstats = this_cpu_ptr(netdev_tstats(dev));
 
         u64_stats_update_begin(&tstats->syncp);
         tstats->tx_packets += vp_stats->tx_pkt_cnt;
@@ -110,7 +133,7 @@ static bool ath12k_stats_update_ppe_vp(s
         tstats->rx_bytes += vp_stats->rx_byte_cnt;
         u64_stats_update_end(&tstats->syncp);
 
-        return true;
+	return true;
 }
 
 void ath12k_enable_ppe_for_link_netdev(struct ath12k_base *ab,
@@ -128,9 +151,6 @@ void ath12k_enable_ppe_for_link_netdev(s
 	if (!g_bonded_interface_model)
 		return;
 
-	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
- 		return;
-
 	if (!arvif->ar) {
 		ath12k_warn(ab, "failed to enable ds for link id %d \n",
 				arvif->link_id);
@@ -146,8 +166,6 @@ void ath12k_enable_ppe_for_link_netdev(s
 	vpai.src_cb_data = NULL;
 	vpai.stats_cb = ath12k_stats_update_ppe_vp;
 	vpai.queue_num = 0;
-	vpai.usr_type = PPE_VP_USER_TYPE_DS;
-	vpai.usr_type = PPE_VP_USER_TYPE_DS;
 	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
 	link_ndev_pvt = netdev_priv(link_dev);
 
@@ -201,15 +219,17 @@ void ath12k_disable_ppe_for_link_netdev(
 	if (!g_bonded_interface_model)
 		return;
 
-	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
- 		return;
-
 	if (!arvif->ar) {
 		ath12k_warn(ab, "failed to disable ds for link id %d \n",
 				arvif->link_id);
 		return;
 	}
 
+	if (!arvif->ndev_pvt || !arvif->ndev_pvt->link_ndev) {
+		ath12k_err(NULL, "ERR no link dev for this vif to disable DS.\n");
+		return;
+	}
+
 	link_ndev_pvt = netdev_priv(link_dev);
 	vp_params.ppe_vp_profile_idx = link_ndev_pvt->ppe_vp_profile_idx;
 	if (arvif->ppe_vp_num == -1)
@@ -231,6 +251,36 @@ void ath12k_disable_ppe_for_link_netdev(
 	arvif->ppe_vp_type = -1;
 }
 
+static const struct ath12k_base *
+ath12k_get_primary_ab_from_mldev(struct ieee80211_vif *vif,
+				 struct ath12k_mld_dev *mldev)
+{
+	struct net_device *link_ndev;
+	struct ath12k_link_vif *arvif = NULL;
+	struct ath12k_link_vif_pvt *arvif_pvt = NULL;
+	uint8_t chip_id;
+	uint8_t pdev_id;
+
+	if (!mldev)
+		return NULL;
+
+	chip_id = mldev->primary_chipid;
+	pdev_id = mldev->primary_pdevid;
+
+	mutex_lock(&vif->bond_mutex);
+	link_ndev = mldev->link_dev[chip_id][pdev_id];
+	if (link_ndev) {
+		arvif_pvt = netdev_priv(link_ndev);
+		if (arvif_pvt)
+			arvif = arvif_pvt->arvif;
+	}
+	mutex_unlock(&vif->bond_mutex);
+
+	ath12k_info(NULL, "Get primary ab for Link dev:%s\n", link_ndev->name);
+
+	return arvif ? arvif->ab : NULL;
+}
+
 int ath12k_mac_op_change_vif_links(struct ieee80211_hw *hw,
 					  struct ieee80211_vif *vif,
 					  u16 old_links, u16 new_links,
@@ -241,14 +291,13 @@ int ath12k_mac_op_change_vif_links(struc
 	struct net_device *cp_netdev = wdev->netdev;
 	struct ath12k_link_vif_pvt *link_ndev_pvt = NULL;
 	struct net_device *link_ndev;
-	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_mld_dev *mldev = NULL;
 	u16 link_num;
 	struct net_device *bond_dev = NULL;
 	char name[20] = {0};
-	int ret = 0, chip_id = 0, pdev_id = 0, bit = 0;
+	int ret = 0, chip_id = 0, pdev_id = 0;
 	struct ath12k_link_vif *arvif = NULL;
-	struct ath12k_base *ab = NULL;
+	struct ath12k_base *tmp_ab = NULL;
 
 	if (!g_bonded_interface_model)
 		return 0;
@@ -261,10 +310,10 @@ int ath12k_mac_op_change_vif_links(struc
 	new_link_id = new_links ^ old_links;
 	link_num =  ffs(new_link_id) - 1;
 	/* TODO: Do this assignment only for the Add link case */
-
-	if (old_links == 0 && hweight16(new_links) == 1) {
-		bit = ffs(new_links) - 1;
-		ahvif->link[bit]->assoc_link = true;
+	tmp_ab = ath12k_get_primary_ab_from_mldev(vif, mldev);
+	if (tmp_ab && test_bit(ATH12K_FLAG_RECOVERY, &tmp_ab->dev_flags)) {
+		ath12k_warn(tmp_ab, "Skip: link netdev allocation during recovery\n");
+		return 0;
 	}
 
 	if (new_links > old_links)  {
@@ -319,22 +368,21 @@ int ath12k_mac_op_change_vif_links(struc
 				link_ndev_pvt = netdev_priv(link_ndev);
 				if (link_ndev_pvt->is_bond_enslaved) {
 					arvif = link_ndev_pvt->arvif;
-					ab = arvif->ab;
+					tmp_ab = arvif->ab;
 					ath12k_bond_link_release(link_ndev_pvt->arvif);
 					if (link_ndev_pvt->vp_num)
-						ath12k_disable_ppe_for_link_netdev(ab, arvif,
+						ath12k_disable_ppe_for_link_netdev(tmp_ab, arvif,
 										  arvif->ndev_pvt->link_ndev);
 				}
 				ath12k_info(NULL, "Unregister link netdevice %s link ndev %px link_num %d\n", link_ndev->name, link_ndev, link_num);
 				unregister_netdevice(link_ndev);
+				link_ndev_pvt->link_ndev = NULL;
 				vif->link_ndev[link_num] = NULL;
 			} else {
 				ath12k_err(NULL, "ERR Unregister link netdevice %s link ndev %px link_num %d\n", link_ndev->name, link_ndev, link_num);
 			}
 			mutex_unlock(&vif->bond_mutex);
 		}
-	if (new_links == 0)
-		ahvif->link[0]->assoc_link = false;
 	ath12k_info(NULL, "%s:%d link changed for MLD %pM old 0x%x new 0x%x\n", __func__, __LINE__, vif->addr, old_links, new_links);
 	return 0;
 }
@@ -772,6 +820,22 @@ void ieee80211_link_set_multicast_list(s
 	return;
 }
 
+static int ieee80211_link_set_mtu(struct net_device *dev, int mtu)
+{
+	struct ath12k_link_vif_pvt *arvif_pvt = netdev_priv(dev);
+	struct ath12k_link_vif *arvif = arvif_pvt->arvif;
+
+	if (!(IEEE80211_MTU_MIN < mtu && mtu < IEEE80211_MTU_MAX))
+		return -EINVAL;
+
+	if (!ath12k_ppe_vp_set_mtu(dev, arvif, mtu))
+		return -EINVAL;
+
+	dev->mtu = mtu;
+
+	return 0;
+}
+
 int ieee80211_link_change_mac(struct net_device *dev, void *addr)
 {
 	return 0;
@@ -807,6 +871,7 @@ static const struct net_device_ops ieee8
 	.ndo_uninit		= ieee80211_link_uninit,
 	.ndo_start_xmit		= ieee80211_link_subif_start_xmit_8023,
 	.ndo_set_rx_mode	= ieee80211_link_set_multicast_list,
+	.ndo_change_mtu		= ieee80211_link_set_mtu,
 	.ndo_set_mac_address	= ieee80211_link_change_mac,
 	.ndo_select_queue	= ieee80211_link_netdev_select_queue,
 	.ndo_get_stats64	= ieee80211_link_get_stats64,
--- a/drivers/net/wireless/ath/ath12k/bondif.h
+++ b/drivers/net/wireless/ath/ath12k/bondif.h
@@ -23,8 +23,8 @@ void ath12k_enable_ppe_for_link_netdev(s
 int ath12k_free_bonddev_for_sfe(struct wireless_dev *wdev,
 				struct ieee80211_vif *vif,
 				int link_num);
-int ath12k_bond_link_add(struct ath12k_link_vif *arvif, struct net_device *link_dev);
-void ath12k_bond_link_delete(struct ath12k_link_vif *arvif);
+int ath12k_bond_link_enslave(struct ath12k_link_vif *arvif, struct net_device *link_dev);
+void ath12k_bond_link_release(struct ath12k_link_vif *arvif);
 enum ath12k_bond_state {
 	ATH12K_BOND_SETUP_INPROGRESS,
 	ATH12K_BOND_REGISTERED,
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -97,6 +97,7 @@ int ath12k_dp_peer_default_route_setup(s
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* keep last - override any PPE DS specific routing config */
 	if ((ahvif->vdev_type == WMI_VDEV_TYPE_AP) && !((ahvif->vdev_type == WMI_VDEV_TYPE_AP) && (ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S)))
+		ath12k_dp_peer_ppeds_route_setup(ar, arvif, arsta);
 #endif
 
 	return 0;
@@ -1933,6 +1934,22 @@ struct ath12k_tx_desc_info *ath12k_dp_ge
 }
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+static u8 *ath12k_dp_cc_find_desc(struct ath12k_base *ab, u32 cookie, bool is_rx)
+{
+	struct ath12k_dp *dp = &ab->dp;
+	u16 spt_page_id, spt_idx;
+	u8 *spt_va;
+	spt_idx = u32_get_bits(cookie, ATH12k_DP_CC_COOKIE_SPT);
+	spt_page_id = u32_get_bits(cookie, ATH12K_DP_CC_COOKIE_PPT);
+	if (is_rx) {
+		if (WARN_ON(spt_page_id < dp->rx_spt_base))
+			return NULL;
+		spt_page_id = spt_page_id - dp->rx_spt_base;
+	}
+	spt_va = (u8 *)dp->spt_info[spt_page_id].vaddr;
+	return (spt_va + spt_idx * sizeof(u64));
+}
+
 struct ath12k_ppeds_tx_desc_info *ath12k_dp_get_ppeds_tx_desc(struct ath12k_base *ab,
 						  u32 desc_id)
 {
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2945,7 +2945,7 @@ static void ath12k_dp_rx_h_mpdu(struct a
 				spin_unlock_bh(&ar->ab->base_lock);
 				ath12k_dp_rx_h_csum_offload(ar, msdu, rx_info);
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
-				ahvif = ath12k_vif_to_ahvif(peer->vif)
+				ahvif = ath12k_vif_to_ahvif(peer->vif);
 				arvif = ahvif->link[peer->link_id];
 				vp = arvif->ppe_vp_num;
 				if (wdev->bond_netdev)
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -809,7 +809,7 @@ static struct ath12k_hw_ring_mask ath12k
 		ATH12K_RX_MON_RING_MASK_0,
 		ATH12K_RX_MON_RING_MASK_1,
 		ATH12K_RX_MON_RING_MASK_2,
-		0, 0, 0, 0,
+		0, 0, 0, 0
 	},
 	.rx = {
 		0, 0, 0, 0,
@@ -1018,30 +1018,6 @@ static const struct ath12k_hw_regs qcn92
 	/* TCL STATUS ring address */
 	.hal_tcl_status_ring_base_lsb = 0x00000d38,
 
-	.hal_wbm_idle_ring_base_lsb = 0x00000d0c,
-	.hal_wbm_idle_ring_misc_addr = 0x00000d1c,
-	.hal_wbm_r0_idle_list_cntl_addr = 0x00000210,
-	.hal_wbm_r0_idle_list_size_addr = 0x00000214,
-	.hal_wbm_scattered_ring_base_lsb = 0x00000220,
-	.hal_wbm_scattered_ring_base_msb = 0x00000224,
-	.hal_wbm_scattered_desc_head_info_ix0 = 0x00000230,
-	.hal_wbm_scattered_desc_head_info_ix1 = 0x00000234,
-	.hal_wbm_scattered_desc_tail_info_ix0 = 0x00000240,
-	.hal_wbm_scattered_desc_tail_info_ix1 = 0x00000244,
-	.hal_wbm_scattered_desc_ptr_hp_addr = 0x0000024c,
-
-	.hal_wbm_sw_release_ring_base_lsb = 0x0000034c,
-	.hal_wbm_sw1_release_ring_base_lsb = 0x000003c4,
-	.hal_wbm0_release_ring_base_lsb = 0x00000dd8,
-	.hal_wbm1_release_ring_base_lsb = 0x00000e50,
-
-	/* PCIe base address */
-	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
-	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
-
-	/* reo2ppe ring address */
-	.hal_reo2ppe_ring_base = 0x00000938,
-
 	/* REO DEST ring address */
 	.hal_reo2_ring_base = 0x0000055c,
 	.hal_reo1_misc_ctrl_addr = 0x00000b7c,
@@ -1077,6 +1053,34 @@ static const struct ath12k_hw_regs qcn92
 	/* REO status ring address */
 	.hal_reo_status_ring_base = 0x00000a84,
 
+	/* WBM idle link ring address */
+	.hal_wbm_idle_ring_base_lsb = 0x00000d0c,
+	.hal_wbm_idle_ring_misc_addr = 0x00000d1c,
+	.hal_wbm_r0_idle_list_cntl_addr = 0x00000210,
+	.hal_wbm_r0_idle_list_size_addr = 0x00000214,
+	.hal_wbm_scattered_ring_base_lsb = 0x00000220,
+	.hal_wbm_scattered_ring_base_msb = 0x00000224,
+	.hal_wbm_scattered_desc_head_info_ix0 = 0x00000230,
+	.hal_wbm_scattered_desc_head_info_ix1 = 0x00000234,
+	.hal_wbm_scattered_desc_tail_info_ix0 = 0x00000240,
+	.hal_wbm_scattered_desc_tail_info_ix1 = 0x00000244,
+	.hal_wbm_scattered_desc_ptr_hp_addr = 0x0000024c,
+
+	/* SW2WBM release ring address */
+	.hal_wbm_sw_release_ring_base_lsb = 0x0000034c,
+	.hal_wbm_sw1_release_ring_base_lsb = 0x000003c4,
+
+	/* WBM2SW release ring address */
+	.hal_wbm0_release_ring_base_lsb = 0x00000dd8,
+	.hal_wbm1_release_ring_base_lsb = 0x00000e50,
+
+	/* reo2ppe ring address */
+	.hal_reo2ppe_ring_base = 0x00000938,
+
+	/* PCIe base address */
+	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
+	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
+
 	/* CE base address */
 	.hal_umac_ce0_src_reg_base = 0x01b80000,
 	.hal_umac_ce0_dest_reg_base = 0x01b81000,
@@ -1103,34 +1107,6 @@ static const struct ath12k_hw_regs qcn92
 	/* TCL STATUS ring address */
 	.hal_tcl_status_ring_base_lsb = 0x00000d38,
 
-	/* WBM idle link ring address */
-	.hal_wbm_idle_ring_base_lsb = 0x00000d3c,
-	.hal_wbm_idle_ring_misc_addr = 0x00000d4c,
-	.hal_wbm_r0_idle_list_cntl_addr = 0x00000240,
-	.hal_wbm_r0_idle_list_size_addr = 0x00000244,
-	.hal_wbm_scattered_ring_base_lsb = 0x00000250,
-	.hal_wbm_scattered_ring_base_msb = 0x00000254,
-	.hal_wbm_scattered_desc_head_info_ix0 = 0x00000260,
-	.hal_wbm_scattered_desc_head_info_ix1 = 0x00000264,
-	.hal_wbm_scattered_desc_tail_info_ix0 = 0x00000270,
-	.hal_wbm_scattered_desc_tail_info_ix1 = 0x00000274,
-	.hal_wbm_scattered_desc_ptr_hp_addr = 0x0000027c,
-
-	/* SW2WBM release ring address */
-	.hal_wbm_sw_release_ring_base_lsb = 0x0000037c,
-	.hal_wbm_sw1_release_ring_base_lsb = 0x000003f4,
-
-	/* WBM2SW release ring address */
-	.hal_wbm0_release_ring_base_lsb = 0x00000e08,
-	.hal_wbm1_release_ring_base_lsb = 0x00000e80,
-
-	/* PCIe base address */
-	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
-	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
-
-	/* reo2ppe ring base address */
-	.hal_reo2ppe_ring_base = 0x00000938,
-
 	/* REO DEST ring address */
 	.hal_reo2_ring_base = 0x00000578,
 	.hal_reo1_misc_ctrl_addr = 0x00000b9c,
@@ -1168,6 +1144,34 @@ static const struct ath12k_hw_regs qcn92
 	/* REO status ring address */
 	.hal_reo_status_ring_base = 0x00000aa0,
 
+	/* WBM idle link ring address */
+	.hal_wbm_idle_ring_base_lsb = 0x00000d3c,
+	.hal_wbm_idle_ring_misc_addr = 0x00000d4c,
+	.hal_wbm_r0_idle_list_cntl_addr = 0x00000240,
+	.hal_wbm_r0_idle_list_size_addr = 0x00000244,
+	.hal_wbm_scattered_ring_base_lsb = 0x00000250,
+	.hal_wbm_scattered_ring_base_msb = 0x00000254,
+	.hal_wbm_scattered_desc_head_info_ix0 = 0x00000260,
+	.hal_wbm_scattered_desc_head_info_ix1 = 0x00000264,
+	.hal_wbm_scattered_desc_tail_info_ix0 = 0x00000270,
+	.hal_wbm_scattered_desc_tail_info_ix1 = 0x00000274,
+	.hal_wbm_scattered_desc_ptr_hp_addr = 0x0000027c,
+
+	/* SW2WBM release ring address */
+	.hal_wbm_sw_release_ring_base_lsb = 0x0000037c,
+	.hal_wbm_sw1_release_ring_base_lsb = 0x000003f4,
+
+	/* WBM2SW release ring address */
+	.hal_wbm0_release_ring_base_lsb = 0x00000e08,
+	.hal_wbm1_release_ring_base_lsb = 0x00000e80,
+
+	/* reo2ppe ring base address */
+	.hal_reo2ppe_ring_base = 0x00000938,
+
+	/* PCIe base address */
+	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
+	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
+
 	/* CE base address */
 	.hal_umac_ce0_src_reg_base = 0x01b80000,
 	.hal_umac_ce0_dest_reg_base = 0x01b81000,
@@ -1299,9 +1303,6 @@ static const struct ath12k_hw_regs wcn78
 	.pcie_qserdes_sysclk_en_sel = 0x01e0e0a8,
 	.pcie_pcs_osc_dtct_config_base = 0x01e0f45c,
 
-	/* PPE release ring address */
-	.hal_ppe_rel_ring_base = 0x0000043c,
-
 	/* REO DEST ring address */
 	.hal_reo2_ring_base = 0x0000055c,
 	.hal_reo1_misc_ctrl_addr = 0x00000b7c,
@@ -1961,3 +1962,4 @@ int ath12k_hw_init(struct ath12k_base *a
 
 	return 0;
 }
+
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5049,8 +5049,8 @@ static int ath12k_mac_vdev_delete(struct
 	if (arvif->link_id != ATH12K_DEFAULT_SCAN_LINK && arvif->ndev_pvt) {
 		if (arvif->ndev_pvt->is_bond_enslaved)
 			ath12k_bond_link_release(arvif);
- 		ath12k_disable_ppe_for_link_netdev(ar->ab, arvif,
-						  arvif->ndev_pvt->link_ndev);
+		ath12k_disable_ppe_for_link_netdev(ar->ab, arvif,
+						   arvif->ndev_pvt->link_ndev);
 	}
 #endif
 	ar->allocated_vdev_map &= ~(1LL << arvif->vdev_id);
@@ -10709,7 +10709,7 @@ static void ath12k_update_obss_color_not
 		}
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
 		if (arvif->link_id != ATH12K_DEFAULT_SCAN_LINK) {
-			if (hweight16(vif->valid_links) <= 1) {
+			if (hweight16(vif->valid_links) <= 1 && link_ndev) {
 				ath12k_free_bonddev_for_sfe(wdev, vif, link_id);
 				arvif->ndev_pvt = NULL;
 				arvif->ppe_vp_num = -1;
@@ -10720,7 +10720,7 @@ static void ath12k_update_obss_color_not
 				netif_tx_start_all_queues(arvif->ndev_pvt->bond_dev);
 				netif_tx_start_all_queues(arvif->ndev_pvt->link_ndev);
 				arvif->ndev_pvt->bond_dev->flags |= IFF_UP;
-				ath12k_bond_link_add(arvif, arvif->ndev_pvt->link_ndev);
+				ath12k_bond_link_enslave(arvif, arvif->ndev_pvt->link_ndev);
 			}
 		}
 #endif
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -17,7 +17,12 @@
 #include "hif.h"
 #include "ppe.h"
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+extern int g_bonded_interface_model;
+#endif
+
 static atomic_t num_ppeds_nodes;
+
 extern struct sk_buff *
 ath12k_dp_ppeds_tx_release_desc_nolock(struct ath12k_dp *dp,
 				struct ath12k_ppeds_tx_desc_info *tx_desc,
@@ -418,8 +423,14 @@ static int ath12k_dp_ppeds_add_napi_ctxt
 		ath12k_err(ab,"dummy netdev init fail\n");
 		return -ENOSR;
 	}
-	netif_napi_add(&napi_ctxt->ndev, &napi_ctxt->napi,
-                ath12k_dp_ppeds_tx_comp_poll, ath12k_ppe_napi_budget);
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+		netif_napi_add(&napi_ctxt->ndev, &napi_ctxt->napi,
+			       ath12k_dp_ppeds_tx_comp_poll, ath12k_ppe_napi_budget);
+#else
+		netif_napi_add_weight(&napi_ctxt->ndev, &napi_ctxt->napi,
+				      ath12k_dp_ppeds_tx_comp_poll, ath12k_ppe_napi_budget);
+#endif
 
 	return 0;
 }
@@ -462,7 +473,7 @@ void ath12k_dp_peer_ppeds_route_setup(st
 
 	/* In SLO AP, DS is not supported */
 	if (hweight16(ahvif->vif->valid_links) <= 1)
- 		return;
+		return;
 
 	/* When SLO STA is associated to AP link vif which does not have DS rings,
  	 * do not enable DS.
@@ -1119,3 +1130,4 @@ void ath12k_dp_srng_ppeds_cleanup(struct
 	kfree(dp->ppeds_comp_ring.tx_status);
 	ath12k_dp_srng_cleanup(ab, &dp->ppeds_comp_ring.ppe_wbm2sw_ring);
 }
+
