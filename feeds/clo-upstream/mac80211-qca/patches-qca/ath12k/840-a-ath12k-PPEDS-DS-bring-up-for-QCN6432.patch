From 73211e16a15ee9e8bcfe90280845cf1e2c14e8f3 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Mon, 25 Sep 2023 12:49:12 -0700
Subject: [PATCH] wifi: ath12k: PPEDS - Add Direct Switching support for QCN6432

Register ppeds interrupts on internal pci platform.

For ipci drivers we need msi_desc for interrupt registration.
Add dummy msi interrupt handler to acquire msi_data for ppe-ds which
will be used for srng_setup.

Add macro for ext_irq_num_max which is chip specific

Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c    |  48 ++++++-
 drivers/net/wireless/ath/ath12k/bondif.c |   4 +
 drivers/net/wireless/ath/ath12k/ce.h     |   1 +
 drivers/net/wireless/ath/ath12k/core.c   |   2 +-
 drivers/net/wireless/ath/ath12k/core.h   |   4 +-
 drivers/net/wireless/ath/ath12k/dp.c     |   1 +
 drivers/net/wireless/ath/ath12k/dp_rx.h  |   2 +-
 drivers/net/wireless/ath/ath12k/hal.c    |   6 +-
 drivers/net/wireless/ath/ath12k/hal.h    |   3 +-
 drivers/net/wireless/ath/ath12k/hw.c     |  31 +++-
 drivers/net/wireless/ath/ath12k/hw.h     |   5 +-
 drivers/net/wireless/ath/ath12k/pcic.c   | 174 ++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/pcic.h   |  12 +-
 drivers/net/wireless/ath/ath12k/ppe.c    |  28 ++--
 drivers/net/wireless/ath/ath12k/ppe.h    |   1 +
 15 files changed, 274 insertions(+), 48 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -17,6 +17,7 @@
 #include <linux/remoteproc.h>
 #include <linux/soc/qcom/smem.h>
 #include <linux/soc/qcom/smem_state.h>
+#include "bondif.h"
 
 static const struct of_device_id ath12k_ahb_of_match[] = {
 	{ .compatible = "qcom,ipq5332-wifi",
@@ -212,7 +213,7 @@ static void __ath12k_ahb_ext_irq_disable
 {
 	int i;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 
 		ath12k_ahb_ext_grp_disable(irq_grp);
@@ -309,7 +310,7 @@ static void ath12k_ahb_sync_ext_irqs(str
 	int i, j;
 	int irq_idx;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 
 		for (j = 0; j < irq_grp->num_irq; j++) {
@@ -353,7 +354,7 @@ static void ath12k_ahb_ext_irq_enable(st
 {
 	int i;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 		if (!irq_grp->napi_enabled) {
 			napi_enable(&irq_grp->napi);
@@ -415,7 +416,7 @@ static void ath12k_ahb_free_ext_irq(stru
 {
 	int i, j;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 
 		for (j = 0; j < irq_grp->num_irq; j++)
@@ -506,7 +507,7 @@ static int ath12k_ahb_config_ext_irq(str
 	int irq;
 	int ret;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 		u32 num_irq = 0;
 
@@ -689,6 +690,12 @@ static const struct ath12k_hif_ops ath12
 	.map_service_to_pipe = ath12k_pcic_map_service_to_pipe,
 	.ssr_notifier_reg = ath12k_ahb_ssr_notifier_reg,
 	.ssr_notifier_unreg = ath12k_ahb_ssr_notifier_unreg,
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	.ppeds_register_interrupts = ath12k_pcic_ppeds_register_interrupts,
+	.ppeds_free_interrupts = ath12k_pcic_ppeds_free_interrupts,
+	.ppeds_irq_enable = ath12k_pcic_ppeds_irq_enable,
+	.ppeds_irq_disable = ath12k_pcic_ppeds_irq_disable,
+#endif
 };
 
 static struct rproc *ath12k_core_get_parent_of_rproc_node(struct rproc *rproc)
@@ -1044,6 +1051,9 @@ static int ath12k_ahb_probe(struct platf
 		bus_type = ATH12K_BUS_AHB;
 		break;
 	case ATH12K_HW_QCN6432_HW10:
+#ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
+		ath12k_bond_enable_ppe_ds();
+#endif
 		hif_ops = &ath12k_ahb_hif_ops_qcn6432;
 		bus_params = &ath12k_internal_pci_bus_params;
 		bus_type = ATH12K_BUS_HYBRID;
--- a/drivers/net/wireless/ath/ath12k/ce.h
+++ b/drivers/net/wireless/ath/ath12k/ce.h
@@ -9,6 +9,7 @@
 
 #define CE_COUNT_MAX 16
 #define ATH12K_QCN6432_CE_COUNT 12
+#define ATH12K_QCN6432_EXT_IRQ_GRP_NUM_MAX 12
 
 /* Byte swap data words */
 #define CE_ATTR_BYTE_SWAP_DATA 2
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1629,6 +1629,7 @@ int ath12k_core_qmi_firmware_ready(struc
 		goto err_firmware_stop;
 	}
 
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	if (ath12k_ppe_ds_enabled) {
 		if (ath12k_frame_mode != ATH12K_HW_TXRX_ETHERNET) {
 			ath12k_warn(ab,
@@ -1640,9 +1641,10 @@ int ath12k_core_qmi_firmware_ready(struc
 			 */
 			ath12k_frame_mode = ATH12K_HW_TXRX_ETHERNET;
 		}
-		if (ab->hif.bus == ATH12K_BUS_PCI)
+		if (ab->hif.bus == ATH12K_BUS_PCI || ab->hif.bus == ATH12K_BUS_HYBRID)
 			set_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags);
 	}
+#endif
 
 	ret = ath12k_dp_alloc(ab);
 	if (ret) {
@@ -3951,6 +3953,9 @@ static void ath12k_exit(void)
 	ath12k_pci_exit();
 	ath12k_ahb_exit();
 	ath12k_debugfs_destroy();
+#ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
+	ath12k_bond_disable_ppe_ds();
+#endif
 }
 
 module_init(ath12k_init)
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1286,9 +1286,9 @@ enum ath12k_mlo_recovery_mode {
 struct ath12k_internal_pci {
 	bool gic_enabled;
 	wait_queue_head_t gic_msi_waitq;
-	u32 dp_msi_data[ATH12K_EXT_IRQ_GRP_NUM_MAX];
+	u32 dp_msi_data[ATH12K_QCN6432_EXT_IRQ_GRP_NUM_MAX];
 	u32 ce_msi_data[ATH12K_QCN6432_CE_COUNT];
-	u32 dp_irq_num[ATH12K_EXT_IRQ_GRP_NUM_MAX];
+	u32 dp_irq_num[ATH12K_QCN6432_EXT_IRQ_GRP_NUM_MAX];
 };
 
 struct ath12k_mlo_dp_umac_reset {
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -41,7 +41,8 @@ enum ath12k_routing_pkt_type {
 };
 
 #define ATH12K_RX_PROTOCOL_TAG_START_OFFSET  128
-#define ATH12K_ROUTE_WBM_RELEASE        3
+#define ATH12K_ROUTE_WBM_RELEASE(ab) \
+	((ab)->hw_params->route_wbm_release)
 #define ATH12K_ROUTE_EAP_METADATA       (ATH12K_RX_PROTOCOL_TAG_START_OFFSET + ATH12K_PKT_TYPE_EAP)
 #define ATH12K_ROUTE_ARP_METADATA       (ATH12K_RX_PROTOCOL_TAG_START_OFFSET + ATH12K_PKT_TYPE_ARP_IPV4)
 
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -716,7 +716,7 @@ static int ath12k_hal_srng_create_config
 	 * RXDMA_RX_MONITOR_BUF, TX_MONITOR_BUF, TX_MONITOR_DST, SW2RXDMA
 	 */
 	s = &hal->srng_config[HAL_PPE2TCL];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_PPE2TCL1_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_PPE2TCL1_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_PPE2TCL1_RING_HP;
 
 	return 0;
@@ -2650,7 +2650,7 @@ void ath12k_hal_dump_srng_stats(struct a
 	}
 
 	ath12k_err(ab, "\nLast interrupt received for each group:\n");
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		irq_grp = &ab->ext_irq_grp[i];
 		ath12k_err(ab, "group_id %d %ums before\n",
 			   irq_grp->grp_id,
@@ -2708,7 +2708,7 @@ ssize_t ath12k_debugfs_hal_dump_srng_sta
 	}
 
 	len += scnprintf(buf + len, size - len, "\nLast interrupt received for each group:\n");
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		irq_grp = &ab->ext_irq_grp[i];
 		len += scnprintf(buf + len, size - len, "group_id %d %ums before\n",
 			   irq_grp->grp_id,
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -143,7 +143,8 @@ struct ath12k_dp_rx_info;
 #define HAL_TCL_STATUS_RING_HP			0x00002048
 
 /* PPE2TCL1 Ring address */
-#define HAL_TCL_PPE2TCL1_RING_BASE_LSB		0x00000c48
+#define HAL_TCL_PPE2TCL1_RING_BASE_LSB(ab) \
+	((ab)->hw_params->regs->hal_tcl_ppe2tcl_ring_base_lsb)
 #define HAL_TCL_PPE2TCL1_RING_HP		0x00002038
 
 /* REO2SW(x) R0 ring configuration address */
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -994,8 +994,22 @@ static struct ath12k_hw_ring_mask ath12k
 	.tx_mon_dest = {
 		ATH12K_TX_MON_RING_MASK_0,
 		ATH12K_TX_MON_RING_MASK_1,
-		0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 	},
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	.ppe2tcl = {
+		0, 0, 0, 0,
+		0, 0, ATH12K_PPE2TCL_RING_MASK_0, 0, 0, 0, 0, 0,
+	},
+	.reo2ppe = {
+		0, 0, 0, 0,
+		0, 0, 0, ATH12K_REO2PPE_RING_MASK_0, 0, 0, 0, 0,
+	},
+	.wbm2sw6_ppeds_tx_cmpln = {
+		0, 0, 0, 0,
+		0, 0, 0, 0, ATH12K_PPE_WBM2SW_RELEASE_RING_MASK_0, 0, 0, 0,
+	},
+#endif
 };
 
 static const struct ath12k_hw_regs qcn9274_v1_regs = {
@@ -1077,6 +1091,9 @@ static const struct ath12k_hw_regs qcn92
 	/* reo2ppe ring address */
 	.hal_reo2ppe_ring_base = 0x00000938,
 
+	/* ppe2tcl ring base address */
+	.hal_tcl_ppe2tcl_ring_base_lsb = 0x00000c48,
+
 	/* PCIe base address */
 	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
 	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
@@ -1168,6 +1185,9 @@ static const struct ath12k_hw_regs qcn92
 	/* reo2ppe ring base address */
 	.hal_reo2ppe_ring_base = 0x00000938,
 
+	/* ppe2tcl ring base address */
+	.hal_tcl_ppe2tcl_ring_base_lsb = 0x00000c48,
+
 	/* PCIe base address */
 	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
 	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
@@ -1424,6 +1444,9 @@ const struct ath12k_hw_regs qcn6432_regs
 	/* reo2ppe ring base address */
 	.hal_reo2ppe_ring_base = 0x00000938,
 
+	/* ppe2tcl ring base address */
+	.hal_tcl_ppe2tcl_ring_base_lsb = 0x00000c58,
+
 	/* PCIe base address */
 	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
 	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
@@ -1500,6 +1523,8 @@ static struct ath12k_hw_params ath12k_hw
 		.hw_ops = &qcn9274_ops,
 		.ring_mask = &ath12k_hw_ring_mask_qcn9274,
 		.regs = &qcn9274_v1_regs,
+		.ext_irq_grp_num_max = 12,
+		.route_wbm_release = 3,
 
 		.host_ce_config = ath12k_host_ce_config_qcn9274,
 		.ce_count = 16,
@@ -1582,6 +1607,8 @@ static struct ath12k_hw_params ath12k_hw
 		.hw_ops = &wcn7850_ops,
 		.ring_mask = &ath12k_hw_ring_mask_wcn7850,
 		.regs = &wcn7850_regs,
+		.ext_irq_grp_num_max = 12,
+		.route_wbm_release = 3,
 
 		.host_ce_config = ath12k_host_ce_config_wcn7850,
 		.ce_count = 9,
@@ -1648,6 +1675,8 @@ static struct ath12k_hw_params ath12k_hw
 		.hw_ops = &qcn9274_ops,
 		.ring_mask = &ath12k_hw_ring_mask_qcn9274,
 		.regs = &qcn9274_v2_regs,
+		.ext_irq_grp_num_max = 12,
+		.route_wbm_release = 3,
 
 		.host_ce_config = ath12k_host_ce_config_qcn9274,
 		.ce_count = 16,
@@ -1729,7 +1758,9 @@ static struct ath12k_hw_params ath12k_hw
 
 		.hw_ops = &ipq5332_ops,
 		.regs = &ipq5332_regs,
+		.ext_irq_grp_num_max = 12,
 		.ring_mask = &ath12k_hw_ring_mask_ipq5332,
+		.route_wbm_release = 3,
 
 		.host_ce_config = ath12k_host_ce_config_ipq5332,
 		.ce_count = 12,
@@ -1814,7 +1845,9 @@ static struct ath12k_hw_params ath12k_hw
 
 		.hw_ops = &ipq5332_ops,
 		.regs = &qcn6432_regs,
+		.ext_irq_grp_num_max = 6,
 		.ring_mask = &ath12k_hw_ring_mask_qcn6432,
+		.route_wbm_release = 2,
 
 		.host_ce_config = ath12k_host_ce_config_ipq5332,
 		.ce_count = 12,
@@ -1890,7 +1923,7 @@ void ath12k_dp_reset_interrupt_mask(stru
 	if (ag->mlo_umac_reset.is_intr_bkup)
 		return;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		umac_reset->intr_bkup.tx[i] = ring_mask->tx[i];
 
 		umac_reset->intr_bkup.rx_mon_dest[i] = ring_mask->rx_mon_dest[i];
@@ -1924,7 +1957,7 @@ void ath12k_dp_restore_interrupt_mask(st
 	if (!ag->mlo_umac_reset.is_intr_bkup)
 		return;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		ring_mask->tx[i] = umac_reset->intr_bkup.tx[i];
 		ring_mask->rx_mon_dest[i] = umac_reset->intr_bkup.rx_mon_dest[i];
 		ring_mask->rx[i] = umac_reset->intr_bkup.rx[i];
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -129,7 +129,8 @@ enum ath12k_bus {
 
 /* Regular 12 Host DP interrupts + 3 PPEDS interrupts + 1 DP UMAC RESET interrupt*/
 #define ATH12K_EXT_IRQ_DP_NUM_VECTORS 16
-#define ATH12K_EXT_IRQ_GRP_NUM_MAX 12
+#define ATH12K_EXT_IRQ_GRP_NUM_MAX(ab)\
+	((ab)->hw_params->ext_irq_grp_num_max)
 struct hal_rx_desc;
 struct hal_tcl_data_cmd;
 struct htt_rx_ring_tlv_filter;
@@ -176,6 +177,8 @@ struct ath12k_hw_params {
 	const struct ath12k_hw_ops *hw_ops;
 	struct ath12k_hw_ring_mask *ring_mask;
 	const struct ath12k_hw_regs *regs;
+	u8 ext_irq_grp_num_max;
+	u8 route_wbm_release;
 
 	const struct ce_attr *host_ce_config;
 	u32 ce_count;
@@ -365,6 +368,7 @@ struct ath12k_hw_regs {
 
 	u32 hal_reo2_ring_base;
 	u32 hal_reo2ppe_ring_base;
+	u32 hal_tcl_ppe2tcl_ring_base_lsb;
 	u32 hal_reo1_misc_ctrl_addr;
 	u32 hal_reo1_sw_cookie_cfg0;
 	u32 hal_reo1_sw_cookie_cfg1;
--- a/drivers/net/wireless/ath/ath12k/pcic.c
+++ b/drivers/net/wireless/ath/ath12k/pcic.c
@@ -8,6 +8,7 @@
 #include "core.h"
 #include "pcic.h"
 #include "debug.h"
+#include "ppe.h"
 
 unsigned int tx_comp_budget = 0x7F;
 module_param_named(tx_comp_budget, tx_comp_budget, uint, 0644);
@@ -174,7 +175,7 @@ static void ath12k_pcic_free_ext_irq(str
 {
 	int i, j;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 
 		for (j = 0; j < irq_grp->num_irq; j++)
@@ -267,7 +268,7 @@ static void __ath12k_pcic_ext_irq_disabl
 {
 	int i;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(sc); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &sc->ext_irq_grp[i];
 
 		ath12k_pcic_ext_grp_disable(irq_grp);
@@ -289,7 +290,7 @@ static void ath12k_pcic_sync_ext_irqs(st
 {
 	int i, j, irq_idx;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 
 		for (j = 0; j < irq_grp->num_irq; j++) {
@@ -402,20 +403,35 @@ static int ath12k_pcic_ext_config_gic_ms
 		int irq_idx = irq_grp->irqs[j];
 		int vector = (i % num_vectors);
 
-		scnprintf(dp_irq_name[userpd_id][i], DP_IRQ_NAME_LEN,
-			  "pci%u_wlan_dp_%u", userpd_id, i);
-		irq_set_status_flags(msi_desc->irq, IRQ_DISABLE_UNLAZY);
-		ret = devm_request_irq(&pdev->dev, msi_desc->irq,
-				       ath12k_pcic_ext_interrupt_handler, IRQF_SHARED,
-				       dp_irq_name[userpd_id][i], irq_grp);
-		if (ret) {
-			ath12k_err(ab, "failed request irq %d: %d\n", irq_idx, ret);
-			return ret;
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+		if (ab->hw_params->ring_mask->ppe2tcl[i] ||
+			ab->hw_params->ring_mask->wbm2sw6_ppeds_tx_cmpln[i] ||
+			ab->hw_params->ring_mask->reo2ppe[i]) {
+			ret = ath12k_pcic_get_msi_data(ab, msi_desc, i);
+			if (ret) {
+				ath12k_err(ab, "failed to get msi data for irq %d: %d",
+						msi_desc->irq, ret);
+				return ret;
+			}
+		} else {
+#endif
+			scnprintf(dp_irq_name[userpd_id][i], DP_IRQ_NAME_LEN,
+				  "pci%u_wlan_dp_%u", userpd_id, i);
+			irq_set_status_flags(msi_desc->irq, IRQ_DISABLE_UNLAZY);
+			ret = devm_request_irq(&pdev->dev, msi_desc->irq,
+					       ath12k_pcic_ext_interrupt_handler, IRQF_SHARED,
+					       dp_irq_name[userpd_id][i], irq_grp);
+			if (ret) {
+				ath12k_err(ab, "failed request irq %d: %d\n", irq_idx, ret);
+				return ret;
+			}
+			ab->irq_num[irq_idx] = msi_desc->irq;
+			ab->ipci.dp_irq_num[vector] = msi_desc->irq;
+			ab->ipci.dp_msi_data[i] = msi_desc->msg.data;
+			disable_irq_nosync(ab->irq_num[irq_idx]);
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 		}
-		ab->irq_num[irq_idx] = msi_desc->irq;
-		ab->ipci.dp_irq_num[vector] = msi_desc->irq;
-		ab->ipci.dp_msi_data[i] = msi_desc->msg.data;
-		disable_irq_nosync(ab->irq_num[irq_idx]);
+#endif
 	}
 	return ret;
 }
@@ -566,11 +582,137 @@ void ath12k_pcic_get_msi_address(struct
 	*msi_addr_hi = ab->msi.addr_hi;
 }
 
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+int ath12k_pcic_ppeds_register_interrupts(struct ath12k_base *ab, int type, int vector,
+					int ring_num)
+{
+
+	int ret, irq;
+	u8 bus_id = ab->userpd_id;
+	struct platform_device *pdev = ab->pdev;
+
+	if (type != HAL_REO2PPE && type != HAL_PPE2TCL &&
+	    !(type == HAL_WBM2SW_RELEASE &&
+	    ring_num == HAL_WBM2SW_PPEDS_TX_CMPLN_RING_NUM)) {
+		return 0;
+	}
+
+	if (type == HAL_PPE2TCL) {
+		irq = ab->dp.ppeds_irq[PPEDS_IRQ_PPE2TCL];
+		if (!irq)
+			goto irq_fail;
+		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL], sizeof(ab->dp.ppeds_irq_name),
+			 "pci%d_ppe2tcl", bus_id);
+		ret = devm_request_irq(&pdev->dev, irq,  ath12k_ds_ppe2tcl_irq_handler,
+				  IRQF_SHARED,
+			    ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL], (void *)ath12k_dp_get_ppe_ds_ctxt(ab));
+		if (ret)
+			goto irq_fail;
+		ab->dp.ppeds_irq[PPEDS_IRQ_PPE2TCL] = irq;
+	} else if (type == HAL_REO2PPE) {
+		irq = ab->dp.ppeds_irq[PPEDS_IRQ_REO2PPE];
+		if (!irq)
+			goto irq_fail;
+		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE], sizeof(ab->dp.ppeds_irq_name),
+			 "pci%d_reo2ppe", bus_id);
+		ret = devm_request_irq(&pdev->dev, irq,  ath12k_ds_reo2ppe_irq_handler,
+				  IRQF_SHARED,
+				  ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE], (void *)ath12k_dp_get_ppe_ds_ctxt(ab));
+		if (ret)
+			goto irq_fail;
+		ab->dp.ppeds_irq[PPEDS_IRQ_REO2PPE] = irq;
+	} else if (type == HAL_WBM2SW_RELEASE && ring_num == HAL_WBM2SW_PPEDS_TX_CMPLN_RING_NUM) {
+		irq = ab->dp.ppeds_irq[PPEDS_IRQ_PPE_WBM2SW_REL];
+		if (!irq)
+			goto irq_fail;
+		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL], sizeof(ab->dp.ppeds_irq_name),
+			 "pci%d_ppe_wbm_rel", bus_id);
+		ret = devm_request_irq(&pdev->dev, irq,  ath12k_dp_ppeds_handle_tx_comp,
+				  IRQF_SHARED,
+				  ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL],(void *)ab);
+		if (ret)
+			goto irq_fail;
+		ab->dp.ppeds_irq[PPEDS_IRQ_PPE_WBM2SW_REL] = irq;
+	}
+	disable_irq_nosync(irq);
+
+	return 0;
+
+irq_fail:
+	return ret;
+}
+
+void ath12k_pcic_ppeds_irq_disable(struct ath12k_base *ab, enum ppeds_irq_type type)
+{
+	disable_irq_nosync(ab->dp.ppeds_irq[type]);
+}
+
+void ath12k_pcic_ppeds_irq_enable(struct ath12k_base *ab, enum ppeds_irq_type type)
+{
+	enable_irq(ab->dp.ppeds_irq[type]);
+}
+
+void ath12k_pcic_ppeds_free_interrupts(struct ath12k_base *ab)
+{
+	disable_irq_nosync(ab->dp.ppeds_irq[PPEDS_IRQ_PPE2TCL]);
+	free_irq(ab->dp.ppeds_irq[PPEDS_IRQ_PPE2TCL], ath12k_dp_get_ppe_ds_ctxt(ab));
+
+	disable_irq_nosync(ab->dp.ppeds_irq[PPEDS_IRQ_REO2PPE]);
+	free_irq(ab->dp.ppeds_irq[PPEDS_IRQ_REO2PPE], ath12k_dp_get_ppe_ds_ctxt(ab));
+
+	disable_irq_nosync(ab->dp.ppeds_irq[PPEDS_IRQ_PPE_WBM2SW_REL]);
+	free_irq(ab->dp.ppeds_irq[PPEDS_IRQ_PPE_WBM2SW_REL], ab);
+}
+
+irqreturn_t ath12k_pcic_dummy_irq_handler(int irq, void *context)
+{
+	return IRQ_HANDLED;
+}
+
+int ath12k_pcic_get_msi_data(struct ath12k_base *ab, struct msi_desc *msi_desc,
+		int i)
+{
+	int ret, type;
+	struct platform_device *pdev = ab->pdev;
+
+	if (ab->hw_params->ring_mask->ppe2tcl[i])
+		type = PPEDS_IRQ_PPE2TCL;
+	else if (ab->hw_params->ring_mask->reo2ppe[i])
+		type = PPEDS_IRQ_REO2PPE;
+	else if (ab->hw_params->ring_mask->wbm2sw6_ppeds_tx_cmpln[i])
+		type = PPEDS_IRQ_PPE_WBM2SW_REL;
+	else
+		return -EINVAL;
+
+	/* For multi-platform device, to retrieve msi base address and irq data,
+	 * request a dummy irq  store the base address and data to
+	 * provide the required base address/data info in
+	 * hal_srng_init and srng_msi_setup API calls.
+	*/
+	ab->dp.ppeds_irq[type] = msi_desc->irq;
+	ret = devm_request_irq(&pdev->dev, msi_desc->irq,
+				ath12k_pcic_dummy_irq_handler, IRQF_SHARED,
+				"dummy", (void *)ab);
+
+	if (ret)
+		return -EINVAL;
+
+	ab->ipci.dp_msi_data[i] = msi_desc->msg.data;
+	disable_irq_nosync(ab->dp.ppeds_irq[type]);
+	free_irq(ab->dp.ppeds_irq[type], (void *)ab);
+
+	return 0;
+}
+#endif
+
 void ath12k_pcic_ext_irq_enable(struct ath12k_base *ab)
 {
 	int i;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 
 		napi_enable(&irq_grp->napi);
@@ -633,7 +775,7 @@ static int ath12k_pci_ext_irq_config(str
 	if (ath12k_napi_poll_budget < NAPI_POLL_WEIGHT)
 		ath12k_napi_poll_budget = NAPI_POLL_WEIGHT;
 
-	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX; i++) {
+	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 		u32 num_irq = 0;
 
@@ -875,7 +1017,7 @@ int ath12k_pcic_config_hybrid_irq(struct
 				j++;
 			}
 		} else {
-			if (k >= ATH12K_EXT_IRQ_GRP_NUM_MAX)
+			if (k >= ATH12K_EXT_IRQ_GRP_NUM_MAX(ab))
 				break;
 			ret = ath12k_pcic_ext_config_gic_msi_irq(ab, pdev, msi_desc, k);
 			if (ret) {
--- a/drivers/net/wireless/ath/ath12k/pcic.h
+++ b/drivers/net/wireless/ath/ath12k/pcic.h
@@ -36,12 +36,15 @@ static const struct ath12k_msi_config at
 		},
 	},
 	{
-		.total_vectors = 14,
+		/* In DP, we use num_vectors as 9 (6 REGULAR DP INTERRUPTS + 3 PPEDS
+		 * INTERRUPTS)
+		 */
+		.total_vectors = 15,
 		.total_users = 3,
 		.users = (struct ath12k_msi_user[]) {
 			{ .name = "QDSS", .num_vectors = 1, .base_vector = 0 },
 			{ .name = "CE", .num_vectors = 5, .base_vector = 1 },
-			{ .name = "DP", .num_vectors = 8, .base_vector = 6 },
+			{ .name = "DP", .num_vectors = 9, .base_vector = 6 },
 		},
 	},
 };
@@ -70,5 +73,13 @@ void ath12k_pcic_ce_irq_disable_sync(str
 int ath12k_pcic_get_msi_irq(struct ath12k_base *ab, unsigned int vector);
 int ath12k_pcic_config_hybrid_irq(struct ath12k_base *ab);
 int ath12k_pcic_config_irq(struct ath12k_base *ab);
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+int ath12k_pcic_ppeds_register_interrupts(struct ath12k_base *ab, int type,
+					int vector, int ring_num);
+void ath12k_pcic_ppeds_free_interrupts(struct ath12k_base *ab);
+void ath12k_pcic_ppeds_irq_enable(struct ath12k_base *ab, enum ppeds_irq_type type);
+void ath12k_pcic_ppeds_irq_disable(struct ath12k_base *ab, enum ppeds_irq_type type);
+int ath12k_pcic_get_msi_data(struct ath12k_base *ab, struct msi_desc *msi_desc, int i);
+#endif
 void ath12k_pcic_free_irq(struct ath12k_base *ab);
 #endif
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -426,7 +426,7 @@ static int ath12k_dp_ppeds_add_napi_ctxt
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		netif_napi_add(&napi_ctxt->ndev, &napi_ctxt->napi,
-			       ath12k_dp_ppeds_tx_comp_poll, ath12k_ppe_napi_budget);
+			       ath12k_dp_ppeds_tx_comp_poll);
 #else
 		netif_napi_add_weight(&napi_ctxt->ndev, &napi_ctxt->napi,
 				      ath12k_dp_ppeds_tx_comp_poll, ath12k_ppe_napi_budget);
@@ -857,6 +857,21 @@ void ath12k_mac_op_ppeds_detach_vdev(str
 		   vp_profile->vp_num, ppe_vp_profile_idx);
 }
 
+int ath12k_ppeds_get_handle(struct ath12k_base *ab)
+{
+	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
+		return 0;
+
+	ab->ppeds_handle = ppe_ds_wlan_inst_alloc(&ppeds_ops, sizeof(struct ath12k_base *));
+	if (!ab->ppeds_handle) {
+		ath12k_err(ab, "Failed to allocate ppeds soc instance\n");
+		ath12k_ppeds_detach(ab);
+		return -ENOSR;
+	}
+	ath12k_dbg(ab, ATH12K_DBG_PPE, "PPEDS handle obtained for ab %px ppeds_handle %px\n", ab, ab->ppeds_handle);
+	return 0;
+}
+
 int ath12k_ppeds_attach(struct ath12k_base *ab)
 {
 	struct ath12k_base **abptr;
@@ -878,12 +893,9 @@ int ath12k_ppeds_attach(struct ath12k_ba
 		ab->dp.ppe_vp_profile[i].is_configured = false;
 	}
 
-	ab->ppeds_handle = ppe_ds_wlan_inst_alloc(&ppeds_ops, sizeof(struct ath12k_base *));
-	if (!ab->ppeds_handle) {
-		ath12k_err(ab, "Failed to allocate ppeds soc instance\n");
-		ath12k_ppeds_detach(ab);
-		return -1;
-	}
+	ret = ath12k_ppeds_get_handle(ab);
+	if (ret)
+		return ret;
 
 	WARN_ON(ab->ppeds_node_idx != -1);
 	/* dec ppeds_node_idx to start from 0 */
@@ -1107,8 +1119,8 @@ int ath12k_dp_srng_ppeds_setup(struct at
 				   HAL_WBM2SW_PPEDS_TX_CMPLN_RING_NUM, 0,
 				   DP_PPE_WBM2SW_RING_SIZE);
 	if (ret) {
-		ath12k_warn(ab,
-			    "failed to set up wbm2sw ippeds tx completion ring :%d\n",
+		ath12k_err(ab,
+			    "failed to set up wbm2sw ppeds tx completion ring :%d\n",
 			    ret);
 		goto err;
 	}
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -29,6 +29,7 @@ void ath12k_mac_op_ppeds_detach_vdev(str
                                      struct ieee80211_ppe_vp_ds_params *vp_params);
 void ath12k_dp_peer_ppeds_route_setup(struct ath12k *ar, struct ath12k_link_vif *arvif,
 				      struct ath12k_link_sta *arsta);
+int ath12k_ppeds_get_handle(struct ath12k_base *ab);
 void *ath12k_dp_get_ppe_ds_ctxt(struct ath12k_base *ab);
 irqreturn_t ath12k_ds_ppe2tcl_irq_handler(int irq, void *ctxt);
 irqreturn_t ath12k_ds_reo2ppe_irq_handler(int irq, void *ctxt);
--- a/drivers/net/wireless/ath/ath12k/bondif.c
+++ b/drivers/net/wireless/ath/ath12k/bondif.c
@@ -19,6 +19,33 @@ extern struct ath12k_link_vif *ath12k_ma
 extern int g_bonded_interface_model;
 extern bool ath12k_mac_tx_check_max_limit(struct ath12k *ar, struct sk_buff *skb);
 
+void ath12k_bond_enable_ppe_ds(void)
+{
+	if (ath12k_frame_mode == ATH12K_HW_TXRX_RAW ||
+	   ath12k_frame_mode == ATH12K_HW_TXRX_NATIVE_WIFI) {
+			ath12k_mlo_capable = 1;
+	}
+
+	if (ath12k_mlo_capable == 2) {
+		ath12k_mlo_capable = 1;
+		g_bonded_interface_model = ath12k_mlo_capable;
+		ath12k_ppe_ds_enabled = 1;
+		driver_bond_dev_cb = ath12k_bond_dev_cb;
+	} else if (ath12k_mlo_capable == 1 && g_bonded_interface_model != 1) {
+		g_bonded_interface_model = 0;
+		driver_bond_dev_cb = NULL;
+	}
+
+	ath12k_info(NULL, "g_bonded_interface_model %d ath12k_mlo_capable %d\n",
+			g_bonded_interface_model, ath12k_mlo_capable);
+}
+
+void ath12k_bond_disable_ppe_ds(void)
+{
+	g_bonded_interface_model = 0;
+	driver_bond_dev_cb = NULL;
+}
+
 static void ath12k_ieee80211_if_free(struct net_device *dev)
 {
 	free_percpu(dev->tstats);
@@ -124,15 +151,16 @@ void ath12k_bond_link_release(struct ath
 
 static bool ath12k_stats_update_ppe_vp(struct net_device *dev, ppe_vp_hw_stats_t *vp_stats)
 {
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	struct pcpu_sw_netstats *tstats = this_cpu_ptr(netdev_tstats(dev));
 
-        u64_stats_update_begin(&tstats->syncp);
-        tstats->tx_packets += vp_stats->tx_pkt_cnt;
-        tstats->tx_bytes += vp_stats->tx_byte_cnt;
-        tstats->rx_packets += vp_stats->rx_pkt_cnt;
-        tstats->rx_bytes += vp_stats->rx_byte_cnt;
-        u64_stats_update_end(&tstats->syncp);
-
+	u64_stats_update_begin(&tstats->syncp);
+	tstats->tx_packets += vp_stats->tx_pkt_cnt;
+	tstats->tx_bytes += vp_stats->tx_byte_cnt;
+	tstats->rx_packets += vp_stats->rx_pkt_cnt;
+	tstats->rx_bytes += vp_stats->rx_byte_cnt;
+	u64_stats_update_end(&tstats->syncp);
+#endif
 	return true;
 }
 
@@ -326,8 +354,12 @@ int ath12k_mac_op_change_vif_links(struc
 			return -EINVAL;
 		}
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		memcpy(&link_ndev->perm_addr, wdev->links[link_num].addr, ETH_ALEN);
 		link_ndev->dev_addr = &link_ndev->perm_addr;
+#else
+		dev_addr_set(link_ndev, wdev->links[link_num].addr);
+#endif
 		link_ndev_pvt = netdev_priv(link_ndev);
 		memset(link_ndev_pvt, 0, sizeof(*link_ndev_pvt));
 		link_ndev->netdev_ops = &ieee80211_link_dataif_8023_ops;
@@ -349,9 +381,12 @@ int ath12k_mac_op_change_vif_links(struc
 			return -EINVAL;
 		}
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		memcpy(&bond_dev->perm_addr, vif->addr, ETH_ALEN);
 		bond_dev->dev_addr = &bond_dev->perm_addr;
-
+#else
+		dev_addr_set(bond_dev, vif->addr);
+#endif
 		if (mldev && !mldev->mcast_dev_set) {
 			mldev->mcast_dev_set = true;
 			mldev->primary_chipid = chip_id;
@@ -739,12 +774,14 @@ void ieee80211_link_uninit(struct net_de
 
 static inline void ieee80211_tx_stats_bonded_if(struct net_device *dev, u32 len)
 {
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
     struct pcpu_sw_netstats *tstats = this_cpu_ptr(netdev_tstats(dev));
 
     u64_stats_update_begin(&tstats->syncp);
     tstats->tx_packets++;
     tstats->tx_bytes += len;
     u64_stats_update_end(&tstats->syncp);
+#endif
 }
 
 netdev_tx_t ieee80211_link_subif_start_xmit_8023(struct sk_buff *skb,
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -11,6 +11,7 @@
 #include "mhi.h"
 #include "debug.h"
 #include "ppe.h"
+#include "bondif.h"
 #include "pcic.h"
 
 #define ATH12K_PCI_BAR_NUM		0
@@ -40,15 +41,6 @@ EXPORT_SYMBOL(ath12k_fw_mem_seg);
 module_param_named(fw_mem_seg, ath12k_fw_mem_seg, uint, 0644);
 MODULE_PARM_DESC(fw_mem_seg, "Enable/Disable FW segmentted memory");
 
-#ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
-extern int ath12k_mlo_capable;
-extern int g_bonded_interface_model;
-extern unsigned int ath12k_ppe_ds_enabled;
-
-extern int ath12k_bond_dev_cb(struct wireless_dev *wdev, struct net_device *dev, bool is_register);
-extern int (*driver_bond_dev_cb)(struct wireless_dev *wdev, struct net_device *dev, bool is_register);
-#endif
-
 static const struct pci_device_id ath12k_pci_id_table[] = {
 	{ PCI_VDEVICE(QCOM, QCN9274_DEVICE_ID) },
 	{ PCI_VDEVICE(QCOM, WCN7850_DEVICE_ID) },
@@ -256,12 +248,6 @@ int ath12k_pci_ppeds_register_interrupts
 	u8 bus_id = pci_domain_nr(ar_pci->pdev->bus);
 	int ret;
 
-	if (type != HAL_REO2PPE && type != HAL_PPE2TCL &&
-	    !(type == HAL_WBM2SW_RELEASE &&
-	    ring_num == HAL_WBM2SW_PPEDS_TX_CMPLN_RING_NUM)) {
-		return 0;
-	}
-
 	if (ab->ppeds_node_idx == -1) {
 		ath12k_err(ab, "invalid ppeds_node_idx in ppeds_register_interrupts\n");
 		return -EINVAL;
@@ -297,6 +283,8 @@ int ath12k_pci_ppeds_register_interrupts
 		if (ret)
 			goto irq_fail;
 		ab->dp.ppeds_irq[PPEDS_IRQ_PPE_WBM2SW_REL] = irq;
+	} else {
+		return 0;
 	}
 	disable_irq_nosync(irq);
 
@@ -916,23 +904,7 @@ static int ath12k_pci_probe(struct pci_d
 	u32 addr;
 	int ret;
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
-	if (ath12k_frame_mode == ATH12K_HW_TXRX_RAW ||
-	    ath12k_frame_mode == ATH12K_HW_TXRX_NATIVE_WIFI) {
-		ath12k_mlo_capable = 1;
-	}
-
-	if (ath12k_mlo_capable == 2) {
-		ath12k_mlo_capable = 1;
-		g_bonded_interface_model = ath12k_mlo_capable;
-		ath12k_ppe_ds_enabled = 1;
-		driver_bond_dev_cb = ath12k_bond_dev_cb;
-	} else if (ath12k_mlo_capable == 1 && g_bonded_interface_model != 1) {
-		g_bonded_interface_model = 0;
-		driver_bond_dev_cb = NULL;
-	}
-
-
-	ath12k_info(NULL, "g_bonded_interface_model %d ath12k_mlo_capable %d \n", g_bonded_interface_model, ath12k_mlo_capable);
+       ath12k_bond_enable_ppe_ds();
 #endif
 	ab = ath12k_core_alloc(&pdev->dev, sizeof(*ab_pci), ATH12K_BUS_PCI,
 			       &ath12k_pci_bus_params);
@@ -1179,8 +1151,4 @@ int ath12k_pci_init(void)
 void ath12k_pci_exit(void)
 {
 	pci_unregister_driver(&ath12k_pci_driver);
-#ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
-	g_bonded_interface_model = 0;
-	driver_bond_dev_cb = NULL;
-#endif
 }
--- a/drivers/net/wireless/ath/ath12k/bondif.h
+++ b/drivers/net/wireless/ath/ath12k/bondif.h
@@ -25,6 +25,13 @@ int ath12k_free_bonddev_for_sfe(struct w
 				int link_num);
 int ath12k_bond_link_enslave(struct ath12k_link_vif *arvif, struct net_device *link_dev);
 void ath12k_bond_link_release(struct ath12k_link_vif *arvif);
+void ath12k_bond_enable_ppe_ds(void);
+void ath12k_bond_disable_ppe_ds(void);
+extern int g_bonded_interface_model;
+extern unsigned int ath12k_ppe_ds_enabled;
+extern unsigned int ath12k_mlo_capable;
+int ath12k_bond_dev_cb(struct wireless_dev *wdev, struct net_device *dev, bool is_register);
+extern int (*driver_bond_dev_cb)(struct wireless_dev *wdev, struct net_device *dev, bool is_register);
 enum ath12k_bond_state {
 	ATH12K_BOND_SETUP_INPROGRESS,
 	ATH12K_BOND_REGISTERED,
