From a65705dffe66ce0d6af33c122463928e4e400ea0 Mon Sep 17 00:00:00 2001
From: Arunpandi Kannan <quic_arunpand@quicinc.com>
Date: Tue, 17 Oct 2023 10:50:49 +0530
Subject: [PATCH] wifi: ath12k: Add support for AP mode offchannel scan and
 offchannel tx.

Some features such as DPP require AP to go into off-channel,
to perform authentication process. So enable the driver to
receive and process remain-on-channel(ROC) scan request. ROC
will initiate a new off-channel scan request to firmware
on the requested channel.
Add support send off-channel frames when AP is on ROC. And
support to cancel ROC scan, when ROC scan cancel request
received from upper layers.

Signed-off-by: Arunpandi Kannan <quic_arunpand@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |   1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 251 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.c  |  82 ++++++++
 drivers/net/wireless/ath/ath12k/wmi.h  |   2 +
 4 files changed, 327 insertions(+), 9 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2037,6 +2037,7 @@ static void ath12k_core_pre_reconfigure_
 		ath12k_mac_radio_drain_tx(ar);
 		complete(&ar->scan.started);
 		complete(&ar->scan.completed);
+		complete(&ar->scan.on_channel);
 		complete(&ar->peer_assoc_done);
 		complete(&ar->peer_delete_done);
 		if (!list_empty(&ab->neighbor_peers))
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5156,7 +5156,7 @@ ath12k_mac_assign_link_vif( struct ath12
 static struct ath12k*
 ath12k_mac_select_scan_device(struct ieee80211_hw *hw,
 			      struct ieee80211_vif *vif,
-			      struct ieee80211_scan_request *req)
+			      u32 center_freq)
 {
 	struct ath12k_hw *ah = hw->priv;
 	enum nl80211_band band;
@@ -5168,9 +5168,9 @@ ath12k_mac_select_scan_device(struct iee
 	 * split the hw request and perform multiple scans
 	 */
 
-	if (req->req.channels[0]->center_freq < ATH12K_MIN_5G_FREQ)
+	if (center_freq < ATH12K_MIN_5G_FREQ)
 		band = NL80211_BAND_2GHZ;
-	else if (req->req.channels[0]->center_freq < ATH12K_MIN_6G_FREQ)
+	else if (center_freq < ATH12K_MIN_6G_FREQ)
 		band = NL80211_BAND_5GHZ;
 	else
 		band = NL80211_BAND_6GHZ;
@@ -5179,8 +5179,8 @@ ath12k_mac_select_scan_device(struct iee
 
 	for (i = 0; i < ah->num_radio; i++) {
 		if (band == NL80211_BAND_5GHZ || band == NL80211_BAND_6GHZ) {
-			if (req->req.channels[0]->center_freq > ar->chan_info.low_freq &&
-			    req->req.channels[0]->center_freq < ar->chan_info.high_freq)
+			if (center_freq > ar->chan_info.low_freq &&
+			    center_freq < ar->chan_info.high_freq)
 				if (ar->mac.sbands[band].channels)
 					return ar;
 		} else if (ar->mac.sbands[band].channels) {
@@ -5423,7 +5423,7 @@ static int ath12k_mac_op_hw_scan(struct
 	/* Since the targeted scan device could depend on the frequency
 	 * requested in the hw_req, select the corresponding radio
 	 */
-	ar = ath12k_mac_select_scan_device(hw, vif, hw_req);
+	ar = ath12k_mac_select_scan_device(hw, vif, hw_req->req.channels[0]->center_freq);
 	if (!ar) {
 		ath12k_err(NULL, "unable to select device for scan\n");
 		mutex_unlock(&ah->conf_mutex);
@@ -8861,6 +8861,7 @@ static int ath12k_mac_mgmt_tx_wmi(struct
 				  struct sk_buff *skb)
 {
 	struct ath12k_base *ab = ar->ab;
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 	dma_addr_t paddr;
 	struct ath12k_skb_cb *skb_cb;
@@ -8894,10 +8895,14 @@ static int ath12k_mac_mgmt_tx_wmi(struct
 
 	skb_cb->paddr = paddr;
 
-	link_agnostic = ATH12K_SKB_CB(skb)->flags & ATH12K_SKB_MGMT_LINK_AGNOSTIC;
+	if (info->flags & IEEE80211_TX_CTL_TX_OFFCHAN) {
+		ret = ath12k_wmi_offchan_mgmt_send(ar, arvif->vdev_id, buf_id, skb);
+	} else {
+		link_agnostic = ATH12K_SKB_CB(skb)->flags & ATH12K_SKB_MGMT_LINK_AGNOSTIC;
 
-	ret = ath12k_wmi_mgmt_send(ar, arvif->vdev_id, buf_id, skb,
-				   link_agnostic);
+		ret = ath12k_wmi_mgmt_send(ar, arvif->vdev_id, buf_id, skb,
+					   link_agnostic);
+	}
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to send mgmt frame: %d\n", ret);
 		goto err_unmap_buf;
@@ -15316,6 +15321,231 @@ err_fallback:
 	return 0;
 }
 
+/*
+ * Cancel remain on channel scan. This API will be called when remain on
+ * channel timer expires or when ROC scan required to be cancelled by
+ * mac layer even before ROC timer expires.
+ */
+static int ath12k_mac_op_cancel_remain_on_channel(struct ieee80211_hw *hw,
+						  struct ieee80211_vif *vif)
+{
+	struct ath12k_hw *ah = hw->priv;
+	struct ath12k *ar;
+	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
+	u8 link_id = ahvif->last_scan_link;
+	struct ath12k_link_vif *arvif;
+
+	mutex_lock(&ah->conf_mutex);
+	if (!(ahvif->links_map & BIT(link_id))) {
+		mutex_unlock(&ah->conf_mutex);
+		ath12k_err(NULL, "unable to cancel scan. Link id %d not found\n",
+			   link_id);
+		return -EINVAL;
+	}
+
+	arvif = ahvif->link[link_id];
+
+	if (!arvif || !arvif->is_created) {
+		mutex_unlock(&ah->conf_mutex);
+		ath12k_err(NULL, "unable to cancel scan. arvif interface is not created\n");
+		return -EINVAL;
+	}
+
+	ar = arvif->ar;
+	if (!ar) {
+		mutex_unlock(&ah->conf_mutex);
+		ath12k_err(NULL, "unable to select device to cancel scan\n");
+		return -EINVAL;
+	}
+	mutex_unlock(&ah->conf_mutex);
+
+	mutex_lock(&ar->conf_mutex);
+
+	spin_lock_bh(&ar->data_lock);
+	ar->scan.roc_notify = false;
+	spin_unlock_bh(&ar->data_lock);
+
+	ath12k_scan_abort(ar);
+
+	mutex_unlock(&ar->conf_mutex);
+
+	cancel_delayed_work_sync(&ar->scan.timeout);
+
+	return 0;
+}
+
+/*
+ * Initiate remain on channel scan. When AP required to go to scan
+ * on off-channel, remain on channel will be called. This will
+ * start the scan in the requested channel
+ */
+static int ath12k_mac_op_remain_on_channel(struct ieee80211_hw *hw,
+					   struct ieee80211_vif *vif,
+					   struct ieee80211_channel *chan,
+					   int duration,
+					   enum ieee80211_roc_type type)
+{
+	struct ath12k_hw *ah = hw->priv;
+	struct ath12k_link_vif *arvif;
+	struct ath12k *ar;
+	struct ath12k_wmi_scan_req_arg arg = {0};
+	int ret = 0, link_id;
+	u32 scan_time_msec;
+	bool create = true;
+
+	mutex_lock(&ah->conf_mutex);
+
+	ar = ath12k_mac_select_scan_device(hw, vif, chan->center_freq);
+	if (!ar) {
+		mutex_unlock(&ah->conf_mutex);
+		ath12k_err(NULL, "unable to select device for scan\n");
+		return -EINVAL;
+	}
+	if (unlikely(test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags))) {
+		mutex_unlock(&ah->conf_mutex);
+		ath12k_err(ar->ab, "Recovery is in progress, cannot perform scan\n");
+		return -ESHUTDOWN;
+	}
+
+	link_id = ath12k_mac_find_link_id_by_freq(vif, ar,
+						  chan->center_freq);
+
+	arvif = ath12k_mac_assign_link_vif(ah, vif, link_id);
+
+	if (!arvif) {
+		mutex_unlock(&ah->conf_mutex);
+		ath12k_err(ar->ab, "arvif device is not found, link_id:%d, chan:%d, band:%d\n",
+			   link_id, chan->center_freq, chan->band);
+		return -ENOMEM;
+	}
+
+	if (arvif->is_created) {
+		if (ar != arvif->ar) {
+			if (arvif->is_started) {
+				mutex_unlock(&ah->conf_mutex);
+				return -EINVAL;
+			}
+			if (!arvif->ar) {
+				mutex_unlock(&ah->conf_mutex);
+				return -EINVAL;
+			}
+			mutex_lock(&arvif->ar->conf_mutex);
+			arvif->ar->scan.vdev_id = -1;
+			mutex_unlock(&arvif->ar->conf_mutex);
+
+			ath12k_mac_remove_link_interface(hw, arvif);
+			ath12k_mac_unassign_link_vif(arvif);
+		} else {
+			create = false;
+		}
+	}
+
+	if (create) {
+		mutex_lock(&ar->conf_mutex);
+		ret = ath12k_mac_vdev_create(ar, arvif);
+		mutex_unlock(&ar->conf_mutex);
+		if (ret) {
+			mutex_unlock(&ah->conf_mutex);
+			ath12k_warn(ar->ab, "unable to create scan vdev %d\n", ret);
+			return -EINVAL;
+		}
+	}
+
+	mutex_unlock(&ah->conf_mutex);
+
+	mutex_lock(&ar->conf_mutex);
+	spin_lock_bh(&ar->data_lock);
+	switch (ar->scan.state) {
+	case ATH12K_SCAN_IDLE:
+		reinit_completion(&ar->scan.started);
+		reinit_completion(&ar->scan.completed);
+		reinit_completion(&ar->scan.on_channel);
+		ar->scan.state = ATH12K_SCAN_STARTING;
+		ar->scan.is_roc = true;
+		ar->scan.vdev_id = arvif->vdev_id;
+		ar->scan.roc_freq = chan->center_freq;
+		ar->scan.roc_notify = true;
+		ret = 0;
+		break;
+	case ATH12K_SCAN_STARTING:
+	case ATH12K_SCAN_RUNNING:
+	case ATH12K_SCAN_ABORTING:
+		ret = -EBUSY;
+		break;
+	}
+	spin_unlock_bh(&ar->data_lock);
+
+	if (ret) {
+		mutex_unlock(&ar->conf_mutex);
+		ath12k_err(ar->ab, "Unable to start scan. scan_state:%d\n", ar->scan.state);
+		return ret;
+	}
+
+	if (duration <= 0)
+		scan_time_msec = ah->hw->wiphy->max_remain_on_channel_duration * 2;
+	else
+		scan_time_msec = duration;
+
+	ath12k_wmi_start_scan_init(ar, &arg);
+
+	arg.num_chan = 1;
+	arg.chan_list = kcalloc(arg.num_chan, sizeof(*arg.chan_list),
+				GFP_KERNEL);
+	if (!arg.chan_list) {
+		mutex_unlock(&ar->conf_mutex);
+		ath12k_err(ar->ab, "chan list memory allocation failed\n");
+		return -ENOMEM;
+	}
+	arg.chan_list[0] = chan->center_freq;
+
+	arg.vdev_id = arvif->vdev_id;
+	arg.scan_id = ATH12K_SCAN_ID;
+	arg.dwell_time_active = scan_time_msec;
+	arg.dwell_time_passive = scan_time_msec;
+	arg.max_scan_time = scan_time_msec;
+	arg.dwell_time_active_6g = scan_time_msec;
+	arg.dwell_time_passive_6g = scan_time_msec;
+
+	/* Set required scan flags*/
+	arg.scan_f_passive = 1;
+	arg.scan_f_filter_prb_req = 1;
+
+	/*these flags enables fw to tx offchan frame to unknown STA*/
+	arg.scan_f_offchan_mgmt_tx = 1;
+	arg.scan_f_offchan_data_tx = 1;
+	arg.burst_duration = duration;
+
+	ret = ath12k_start_scan(ar, &arg);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to start roc scan: %d\n", ret);
+		spin_lock_bh(&ar->data_lock);
+		ar->scan.state = ATH12K_SCAN_IDLE;
+		spin_unlock_bh(&ar->data_lock);
+		goto exit;
+	}
+
+	ret = wait_for_completion_timeout(&ar->scan.on_channel, 3 * HZ);
+	if (ret == 0) {
+		ath12k_warn(ar->ab, "failed to switch to channel for roc scan\n");
+		ret = ath12k_scan_stop(ar);
+		if (ret)
+			ath12k_warn(ar->ab, "failed to stop scan: %d\n", ret);
+		ret = -ETIMEDOUT;
+		goto exit;
+	}
+
+	ieee80211_queue_delayed_work(ah->hw, &ar->scan.timeout,
+				     msecs_to_jiffies(duration +
+						      ATH12K_MAC_SCAN_TIMEOUT_MSECS));
+
+	ret = 0;
+
+exit:
+	kfree(arg.chan_list);
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
 /* Note: only half bandwidth agile is supported */
 bool ath12k_is_supported_agile_bandwidth(enum nl80211_chan_width conf_bw,
 					 enum nl80211_chan_width agile_bw)
@@ -15482,6 +15712,8 @@ static const struct ieee80211_ops ath12k
 	.sta_add_debugfs		= ath12k_debugfs_sta_op_add,
 	.link_sta_add_debugfs		= ath12k_debugfs_link_sta_op_add,
 #endif
+	.remain_on_channel              = ath12k_mac_op_remain_on_channel,
+	.cancel_remain_on_channel       = ath12k_mac_op_cancel_remain_on_channel,
 	.get_txpower			= ath12k_mac_op_get_txpower,
 	.set_radar_background		= ath12k_mac_op_set_radar_background,
 };
@@ -16628,6 +16860,7 @@ static int ath12k_mac_chip_setup(struct
 	init_completion(&ar->thermal.wmi_sync);
 	init_completion(&ar->mlo_setup_done);
 	init_completion(&ar->mvr_complete);
+	init_completion(&ar->scan.on_channel);
 
 	INIT_DELAYED_WORK(&ar->scan.timeout, ath12k_scan_timeout_work);
 	INIT_WORK(&ar->scan.vdev_del_wk, ath12k_scan_vdev_del_work);
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1219,6 +1219,103 @@ send:
 	return ret;
 }
 
+static u32 ath12k_wmi_mgmt_get_freq(struct ath12k *ar,
+				    struct ieee80211_tx_info *info)
+{
+	u32 freq = 0;
+
+	if (ar->scan.is_roc &&
+	    (info->flags & IEEE80211_TX_CTL_TX_OFFCHAN))
+		freq = ar->scan.roc_freq;
+
+	return freq;
+}
+
+/* For Big Endian Host, Copy Engine byte_swap is enabled
+ * When Copy Engine does byte_swap, need to byte swap again for the
+ * Host to get/put buffer content in the correct byte order
+ */
+void ath12k_ce_byte_swap(void *mem, u32 len)
+{
+        int i;
+
+        if (IS_ENABLED(CONFIG_CPU_BIG_ENDIAN)) {
+                if (!mem)
+                        return;
+
+                for (i = 0; i < (len / 4); i++) {
+                        *(u32 *)mem = swab32(*(u32 *)mem);
+                        mem += 4;
+                }
+        }
+}
+
+/* Send off-channel managemnt frame to firmware. when driver receive a
+ * packet with off channel tx flag enabled. This API will send the
+ * packet to firmware with WMI command WMI_TAG_OFFCHAN_DATA_TX_SEND_CMD
+ * for off-chan tx.
+ */
+int ath12k_wmi_offchan_mgmt_send(struct ath12k *ar, u32 vdev_id, u32 buf_id,
+				 struct sk_buff *frame)
+{
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(frame);
+	struct wmi_mgmt_send_cmd *cmd;
+	struct wmi_tlv *frame_tlv;
+	struct sk_buff *skb;
+	u32 buf_len, buf_len_padded;
+	int ret, len;
+	void *ptr;
+	struct wmi_tlv *tlv;
+
+	buf_len = min(frame->len, (unsigned int)WMI_MGMT_SEND_DOWNLD_LEN);
+	buf_len_padded = roundup(buf_len, sizeof(u32));
+
+	len = sizeof(*cmd) + sizeof(*frame_tlv) + buf_len_padded +
+	      sizeof(struct wmi_mgmt_send_params);
+
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	ptr = skb->data;
+	cmd = ptr;
+	cmd->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_OFFCHAN_DATA_TX_SEND_CMD,
+						 sizeof(*cmd));
+	cmd->vdev_id = cpu_to_le32(vdev_id);
+	cmd->desc_id = cpu_to_le32(buf_id);
+	cmd->chanfreq = cpu_to_le32(ath12k_wmi_mgmt_get_freq(ar, info));
+	cmd->paddr_lo = cpu_to_le32(lower_32_bits(ATH12K_SKB_CB(frame)->paddr));
+	cmd->paddr_hi = cpu_to_le32(upper_32_bits(ATH12K_SKB_CB(frame)->paddr));
+	cmd->frame_len = cpu_to_le32(frame->len);
+	cmd->buf_len = cpu_to_le32(buf_len);
+	cmd->tx_params_valid = 1;
+	ptr += sizeof(*cmd);
+
+	frame_tlv = ptr;
+	frame_tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_BYTE, buf_len_padded);
+	ptr += sizeof(*frame_tlv);
+
+	memcpy(ptr, frame->data, buf_len);
+	ath12k_ce_byte_swap(ptr, buf_len);
+	ptr += buf_len_padded;
+
+	tlv = ptr;
+	/* Tx params not used currently */
+	tlv->header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_TX_SEND_PARAMS,
+					     sizeof(struct wmi_mgmt_send_params));
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_OFFCHAN_DATA_TX_SEND_CMDID);
+
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "failed to submit WMI_OFFCHAN_DATA_TX_SEND_CMDID cmd\n");
+		dev_kfree_skb(skb);
+	}
+
+	return ret;
+}
+
 int ath12k_wmi_vdev_create(struct ath12k *ar, u8 *macaddr,
 			   struct ath12k_wmi_vdev_create_arg *args)
 {
@@ -7627,6 +7724,8 @@ static void ath12k_wmi_event_scan_starte
 		break;
 	case ATH12K_SCAN_STARTING:
 		ar->scan.state = ATH12K_SCAN_RUNNING;
+		if (ar->scan.is_roc)
+			ieee80211_ready_on_channel(ar->ah->hw);
 		complete(&ar->scan.started);
 		break;
 	}
@@ -7710,6 +7809,8 @@ static void ath12k_wmi_event_scan_foreig
 	case ATH12K_SCAN_ABORTING:
 		ar->scan_channel = ieee80211_get_channel(ar->ah->hw->wiphy,
 							 freq);
+		if (ar->scan.is_roc && ar->scan.roc_freq == freq)
+			complete(&ar->scan.on_channel);
 		break;
 	}
 }
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -8267,6 +8267,8 @@ int ath12k_wmi_cmd_send(struct ath12k_wm
 struct sk_buff *ath12k_wmi_alloc_skb(struct ath12k_wmi_base *wmi_sc, u32 len);
 int ath12k_wmi_mgmt_send(struct ath12k *ar, u32 vdev_id, u32 buf_id,
 			 struct sk_buff *frame, bool link_agnostic);
+int ath12k_wmi_offchan_mgmt_send(struct ath12k *ar, u32 vdev_id, u32 buf_id,
+				 struct sk_buff *frame);
 int ath12k_wmi_bcn_tmpl(struct ath12k *ar, u32 vdev_id,
 			struct ieee80211_mutable_offsets *offs,
 			struct sk_buff *bcn, u32 ema_param);
