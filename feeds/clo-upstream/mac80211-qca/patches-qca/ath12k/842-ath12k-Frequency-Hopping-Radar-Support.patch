From f7daa6246808ae1ebee3db696947df9e33925c48 Mon Sep 17 00:00:00 2001
From: Thomas Wu <quic_wthomas@quicinc.com>
Date: Thu, 14 Sep 2023 14:55:30 -0700
Subject: [PATCH] wifi: ath12k: Add Frequency Hopping Radar handling support

When frequency hopping radar is detected, firmware will send a control bit to
determine whether to perform channel submarking or put all channels on NOL.
Host will perform channel submarking unless it receives this message
from firmware telling it to put all channels on NOL.

Signed-off-by: Thomas Wu <quic_wthomas@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 19 +++--
 drivers/net/wireless/ath/ath12k/wmi.c     | 97 +++++++++++++++++------
 drivers/net/wireless/ath/ath12k/wmi.h     |  9 +++
 3 files changed, 96 insertions(+), 29 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2718,6 +2718,7 @@ static const struct file_operations fops
 #define CHRIP_ID    BIT(2)
 #define OFFSET      GENMASK(10,3)
 #define DETECTOR_ID GENMASK(12,11)
+#define FHSS	    BIT(14)
 
 static ssize_t ath12k_write_simulate_radar(struct file *file,
 					   const char __user *user_buf,
@@ -2726,7 +2727,7 @@ static ssize_t ath12k_write_simulate_rad
 	struct ath12k *ar = file->private_data;
 	int ret;
 	u32 radar_params;
-	u8 agile = 0, segment = 0, chirp = 0;
+	u8 agile = 0, segment = 0, radar_type = 0, chirp = 0, fhss = 0;
 	int offset = 0;
 	int len;
 	char buf[64], *token, *sptr;
@@ -2753,7 +2754,7 @@ static ssize_t ath12k_write_simulate_rad
 	if (!token)
 		return -EINVAL;
 
-	if (kstrtou8(token, 16, &chirp))
+	if (kstrtou8(token, 16, &radar_type))
 		return -EINVAL;
 
 	token = strsep(&sptr, " ");
@@ -2770,18 +2771,26 @@ static ssize_t ath12k_write_simulate_rad
 	if (kstrtou8(token, 16, &agile))
 		return -EINVAL;
 
-	if ((segment > 1) || (chirp > 1) || (agile > 2))
+	if ((segment > 1) || (radar_type > 2) || (agile > 2))
 		return -EINVAL;
 
 	if (agile && ar->agile_chandef.chan == NULL)
 		return -EINVAL;
+
 send_cmd:
+	/* radar_type 1 is for chirp, radar_type 2 is for FHSS */
+	if (radar_type == 1)
+		chirp = 1;
+	if (radar_type == 2)
+		fhss = 1;
+
 	radar_params = u32_encode_bits(segment, SEGMENT_ID) |
 		       u32_encode_bits(chirp, CHRIP_ID) |
 		       u32_encode_bits(offset, OFFSET) |
-		       u32_encode_bits(agile, DETECTOR_ID);
+		       u32_encode_bits(agile, DETECTOR_ID) |
+		       u32_encode_bits(fhss, FHSS);
 
-	ret = ath12k_wmi_simulate_radar(ar,radar_params);
+	ret = ath12k_wmi_simulate_radar(ar, radar_params);
 	if (ret)
 		return ret;
 
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -5546,6 +5546,7 @@ ath12k_wmi_copy_resource_config(struct a
 	wmi_cfg->host_service_flags &= ~(1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT);
 	wmi_cfg->host_service_flags |= 1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT;
 	wmi_cfg->host_service_flags |= 1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REO_QREF_SUPPORT_BIT;
+	wmi_cfg->host_service_flags |= 1 << WMI_RSRC_CFG_HOST_SVC_FLAG_FULL_BW_NOL_SUPPORT_BIT;
 	wmi_cfg->ema_max_vap_cnt = tg_cfg->ema_max_vap_cnt;
 	wmi_cfg->ema_max_profile_period = tg_cfg->ema_max_profile_period;
 }
@@ -5764,6 +5765,8 @@ int ath12k_wmi_cmd_init(struct ath12k_ba
 	if (test_bit(WMI_TLV_SERVICE_REG_CC_EXT_EVENT_SUPPORT,
 		     ab->wmi_ab.svc_map))
 		arg.res_cfg.is_reg_cc_ext_event_supported = true;
+	if (test_bit(WMI_TLV_SERVICE_RADAR_FLAGS_SUPPORT, ab->wmi_ab.svc_map))
+		arg.res_cfg.is_full_bw_nol_feature_supported = true;
 
 	ab->hw_params->wmi_init(ab, &arg.res_cfg);
 
@@ -12092,7 +12095,7 @@ static void ath12k_vdev_install_key_comp
 }
 
 static int ath12k_wmi_tlv_services_parser(struct ath12k_base *ab,
-					  u16 tag, u16 len,
+					  u16 tag, u16 tag_len,
 					  const void *ptr,
 					  void *data)
 {
@@ -12100,11 +12103,12 @@ static int ath12k_wmi_tlv_services_parse
 	u32 *wmi_ext2_service_bitmap;
 	int i, j;
 	u16 expected_len;
+	u16 wmi_max_ext2_service_words;
 
 	expected_len = WMI_SERVICE_SEGMENT_BM_SIZE32 * sizeof(u32);
-	if (len < expected_len) {
+	if (tag_len < expected_len) {
 		ath12k_warn(ab, "invalid length %d for the WMI services available tag 0x%x\n",
-			    len, tag);
+			    tag_len, tag);
 		return -EINVAL;
 	}
 
@@ -12130,8 +12134,9 @@ static int ath12k_wmi_tlv_services_parse
 		break;
 	case WMI_TAG_ARRAY_UINT32:
 		wmi_ext2_service_bitmap = (u32 *)ptr;
+		wmi_max_ext2_service_words = tag_len / sizeof(u32);
 		for (i = 0, j = WMI_MAX_EXT_SERVICE;
-		     i < WMI_SERVICE_SEGMENT_BM_SIZE32 && j < WMI_MAX_EXT2_SERVICE;
+		     i < wmi_max_ext2_service_words && j < WMI_MAX_EXT2_SERVICE;
 		     i++) {
 			do {
 				if (wmi_ext2_service_bitmap[i] &
@@ -12591,7 +12596,9 @@ ath12k_wmi_pdev_csa_switch_count_status_
 	kfree(tb);
 }
 
-static void ath12k_dfs_calculate_subchannels(struct ath12k_base *ab, const struct ath12k_wmi_pdev_radar_event *radar)
+static void ath12k_dfs_calculate_subchannels(struct ath12k_base *ab,
+					     const struct ath12k_wmi_pdev_radar_event *radar,
+					     bool do_full_bw_nol)
 {
 	struct ath12k *ar;
 	u32 center_freq;
@@ -12624,11 +12631,16 @@ static void ath12k_dfs_calculate_subchan
 
 	width = chandef->width;
 	subchannel_count = ath12k_calculate_subchannel_count(width);
-	if (!subchannel_count)
-	{
-		ath12k_warn(ab, "invalid subchannel count for bandwith=%d\n",width);
+	if (!subchannel_count) {
+		ath12k_warn(ab, "invalid subchannel count for bandwidth=%d\n", width);
+		goto mark_radar;
+	}
+
+	if (do_full_bw_nol) {
+		ath12k_dbg(ab, ATH12K_DBG_WMI, "put all channels in NOL\n");
 		goto mark_radar;
 	}
+	ath12k_dbg(ab, ATH12K_DBG_WMI, "perform channel submarking\n");
 
 	center_freq = chandef->center_freq1;
 
@@ -12670,24 +12682,64 @@ mark_radar:
 static void
 ath12k_wmi_pdev_dfs_radar_detected_event(struct ath12k_base *ab, struct sk_buff *skb)
 {
-	const void **tb;
 	const struct ath12k_wmi_pdev_radar_event *ev;
+	const struct wmi_pdev_radar_flags_param *rf_ev;
 	struct ath12k *ar;
-	int ret;
+	bool do_full_bw_nol = false;
+	bool is_full_bw_nol_feature_supported = false;
+	const struct wmi_tlv *tlv;
+	u16 tlv_tag;
+	u32 len = 0;
+	void *ptr;
 
-	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
-	if (IS_ERR(tb)) {
-		ret = PTR_ERR(tb);
-		ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
+	ptr = skb->data;
+
+	len += sizeof(*ev) + TLV_HDR_SIZE;
+	if (skb->len < len) {
+		ath12k_warn(ab, "pdev dfs radar event size invalid\n");
 		return;
 	}
 
-	ev = tb[WMI_TAG_PDEV_DFS_RADAR_DETECTION_EVENT];
+	tlv = ptr;
+	tlv_tag = le32_get_bits(tlv->header, WMI_TLV_TAG);
 
-	if (!ev) {
-		ath12k_warn(ab, "failed to fetch pdev dfs radar detected ev");
-		kfree(tb);
-		return;
+	ptr += sizeof(*tlv);
+	if (tlv_tag != WMI_TAG_PDEV_DFS_RADAR_DETECTION_EVENT) {
+		ath12k_warn(ab, "pdev dfs event received with wrong tag %x\n", tlv_tag);
+		return;
+	}
+	ev = ptr;
+	ptr += sizeof(*ev);
+
+	is_full_bw_nol_feature_supported = test_bit(WMI_TLV_SERVICE_RADAR_FLAGS_SUPPORT,
+						    ab->wmi_ab.svc_map);
+	ath12k_dbg(ab, ATH12K_DBG_WMI, "pdev dfs radar event found\n");
+	ath12k_dbg(ab, ATH12K_DBG_WMI, "pdev dfs radar flags host support %x\n",
+		   is_full_bw_nol_feature_supported);
+	if (is_full_bw_nol_feature_supported) {
+		/* Expect an array TLV containing a single radar flags param TLV */
+		len += sizeof(*tlv) + sizeof(*tlv) + sizeof(*rf_ev);
+		if (skb->len < len) {
+			ath12k_warn(ab, "pdev dfs radar flag event size invalid\n");
+			return;
+		}
+
+		/* Skip Array TLV Tag */
+		ptr += sizeof(*tlv);
+
+		tlv = ptr;
+		tlv_tag = le32_get_bits(tlv->header, WMI_TLV_TAG);
+		ptr += sizeof(*tlv);
+		if (tlv_tag != WMI_TAG_PDEV_DFS_RADAR_FLAGS) {
+			ath12k_warn(ab, "pdev dfs radar flag event received with wrong tag\n");
+			return;
+		}
+
+		rf_ev = ptr;
+		do_full_bw_nol = le32_to_cpu(rf_ev->radar_flags) &
+				 (1 << WMI_PDEV_RADAR_FLAGS_FULL_BW_NOL_MARK_BIT);
+		ath12k_dbg(ab, ATH12K_DBG_WMI, "pdev dfs radar flag event found, radar_flag_bit %d\n",
+			   do_full_bw_nol);
 	}
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI,
@@ -12699,11 +12751,10 @@ ath12k_wmi_pdev_dfs_radar_detected_event
 	rcu_read_lock();
 
 	ar = ath12k_mac_get_ar_by_pdev_id(ab, le32_to_cpu(ev->pdev_id));
-
 	if (!ar) {
 		ath12k_warn(ab, "radar detected in invalid pdev %d\n",
 			    ev->pdev_id);
-		goto exit;
+		return;
 	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_REG, "DFS Radar Detected in pdev %d\n",
@@ -12712,12 +12763,9 @@ ath12k_wmi_pdev_dfs_radar_detected_event
 	if (ar->dfs_block_radar_events)
 		ath12k_info(ab, "DFS Radar detected, but ignored as requested\n");
 	else
-		ath12k_dfs_calculate_subchannels(ab, ev);
+		ath12k_dfs_calculate_subchannels(ab, ev, do_full_bw_nol);
 
-exit:
 	rcu_read_unlock();
-
-	kfree(tb);
 }
 
 static void
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2213,6 +2213,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_BCN_TMPL_ML_INFO_CMD = 0x436,
 	WMI_TAG_CTRL_PATH_CMD_FIXED_PARAM = 0x442,
 	WMI_TAG_CTRL_PATH_EVENT_FIXED_PARAM,
+	WMI_TAG_PDEV_DFS_RADAR_FLAGS = 0x4b4,
 	WMI_TAG_MAX
 };
 
@@ -2450,6 +2451,7 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_SAWF_LEVEL0 = 311,
 	WMI_TLV_SERVICE_PKTLOG_DECODE_INFO_SUPPORT = 320,
 	WMI_TLV_SERVICE_PEER_METADATA_V1A_V1B_SUPPORT = 365,
+	WMI_TLV_SERVICE_RADAR_FLAGS_SUPPORT = 390,
 	WMI_MAX_EXT2_SERVICE,
 };
 
@@ -2728,6 +2730,7 @@ struct ath12k_wmi_resource_config_arg {
 	u32 ema_max_profile_period;
 	u8  dp_peer_meta_data_ver;
 	bool sawf;
+	bool is_full_bw_nol_feature_supported;
 };
 
 struct ath12k_wmi_init_cmd_arg {
@@ -2809,6 +2812,7 @@ struct wmi_init_cmd {
 
 #define WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT 4
 #define WMI_RSRC_CFG_HOST_SVC_FLAG_REO_QREF_SUPPORT_BIT   12
+#define WMI_RSRC_CFG_HOST_SVC_FLAG_FULL_BW_NOL_SUPPORT_BIT 14
 #define WMI_RSRC_CFG_FLAGS2_RX_PEER_METADATA_VERSION GENMASK(5,4)
 #define WMI_RSRC_CFG_FLAGS2_CALC_NEXT_DTIM_COUNT_SET      BIT(9)
 #define WMI_RSRC_CFG_FLAGS2_INTRABSS_MEC_WDS_LEARNING_DISABLE	BIT(15)
@@ -5289,6 +5293,11 @@ struct ath12k_wmi_pdev_radar_event {
 	a_sle32 sidx;
 } __packed;
 
+struct wmi_pdev_radar_flags_param {
+	__le32 radar_flags;
+} __packed;
+#define WMI_PDEV_RADAR_FLAGS_FULL_BW_NOL_MARK_BIT 0
+
 #define WMI_DCS_AWGN_INTF       0x04
 
 struct wmi_dcs_awgn_info {
