From 182ccac3476c13b9f5a4d3074650af569ca8ea5e Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Thu, 9 Nov 2023 16:34:48 -0800
Subject: [PATCH] wifi: ath12k: Fix SSR Mode 0 recovery with Package upgrade

Fix kernel crash with specific to remoteproc helper functions in ath12k.

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/bondif.c
+++ b/drivers/net/wireless/ath/ath12k/bondif.c
@@ -280,33 +280,38 @@ void ath12k_disable_ppe_for_link_netdev(
 }
 
 static const struct ath12k_base *
-ath12k_get_primary_ab_from_mldev(struct ieee80211_vif *vif,
-				 struct ath12k_mld_dev *mldev)
+ath12k_get_core_ab_from_link_ndev_pvt(struct ieee80211_vif *vif,
+				      const int link_num)
 {
 	struct net_device *link_ndev;
-	struct ath12k_link_vif *arvif = NULL;
 	struct ath12k_link_vif_pvt *arvif_pvt = NULL;
-	uint8_t chip_id;
-	uint8_t pdev_id;
-
-	if (!mldev)
-		return NULL;
 
-	chip_id = mldev->primary_chipid;
-	pdev_id = mldev->primary_pdevid;
+	if (!vif)
+		return false;
 
 	mutex_lock(&vif->bond_mutex);
-	link_ndev = mldev->link_dev[chip_id][pdev_id];
+
+	link_ndev = vif->link_ndev[link_num];
 	if (link_ndev) {
 		arvif_pvt = netdev_priv(link_ndev);
-		if (arvif_pvt)
-			arvif = arvif_pvt->arvif;
+		if (arvif_pvt && arvif_pvt->ab)
+			ath12k_info(NULL, "Get core AB:%pV of Link ndev:%s\n",
+				    arvif_pvt->ab->dev, link_ndev->name);
 	}
+
 	mutex_unlock(&vif->bond_mutex);
 
-	ath12k_info(NULL, "Get primary ab for Link dev:%s\n", link_ndev->name);
+	return arvif_pvt ? arvif_pvt->ab : NULL;
+}
+
+static bool ath12k_is_core_recovery_in_progress(const struct ath12k_base *ab)
+{
+	if (ab && test_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags)) {
+		ath12k_warn(ab, "Skip: link netdev allocation during recovery\n");
+		return true;
+	}
 
-	return arvif ? arvif->ab : NULL;
+	return false;
 }
 
 int ath12k_mac_op_change_vif_links(struct ieee80211_hw *hw,
@@ -338,13 +343,12 @@ int ath12k_mac_op_change_vif_links(struc
 	new_link_id = new_links ^ old_links;
 	link_num =  ffs(new_link_id) - 1;
 	/* TODO: Do this assignment only for the Add link case */
-	tmp_ab = ath12k_get_primary_ab_from_mldev(vif, mldev);
-	if (tmp_ab && test_bit(ATH12K_FLAG_RECOVERY, &tmp_ab->dev_flags)) {
-		ath12k_warn(tmp_ab, "Skip: link netdev allocation during recovery\n");
-		return 0;
-	}
+	tmp_ab = ath12k_get_core_ab_from_link_ndev_pvt(vif, link_num);
 
 	if (new_links > old_links)  {
+		if (ath12k_is_core_recovery_in_progress(tmp_ab))
+			return 0;
+
 		/* Add Link operation */
 		snprintf(name, sizeof(name), "%s_l%d", cp_netdev->name, link_num);
 		link_ndev = alloc_netdev_mqs(sizeof (struct ath12k_link_vif_pvt), name, NET_NAME_ENUM, ath12k_ieee80211_if_setup, 1, 1);
@@ -395,30 +399,33 @@ int ath12k_mac_op_change_vif_links(struc
 		if (mldev)
 			mldev->link_dev[chip_id][pdev_id] =  link_ndev;
 
-		} else {
-			/* Delete Link operation */
-			mutex_lock(&vif->bond_mutex);
-			link_ndev = vif->link_ndev[link_num];
-			if (link_ndev) {
-				link_ndev_pvt = netdev_priv(link_ndev);
-				if (link_ndev_pvt->is_bond_enslaved) {
-					arvif = link_ndev_pvt->arvif;
-					tmp_ab = arvif->ab;
-					ath12k_bond_link_release(link_ndev_pvt->arvif);
-					if (link_ndev_pvt->vp_num)
-						ath12k_disable_ppe_for_link_netdev(tmp_ab, arvif,
-										  arvif->ndev_pvt->link_ndev);
-				}
-				ath12k_info(NULL, "Unregister link netdevice %s link ndev %px link_num %d\n", link_ndev->name, link_ndev, link_num);
-				unregister_netdevice(link_ndev);
-				link_ndev_pvt->link_ndev = NULL;
-				vif->link_ndev[link_num] = NULL;
-			} else {
-				ath12k_err(NULL, "ERR Unregister link netdevice %s link ndev %px link_num %d\n", link_ndev->name, link_ndev, link_num);
+	} else {
+		/* Delete Link operation */
+		mutex_lock(&vif->bond_mutex);
+		link_ndev = vif->link_ndev[link_num];
+		if (link_ndev) {
+			link_ndev_pvt = netdev_priv(link_ndev);
+			if (link_ndev_pvt->is_bond_enslaved) {
+				arvif = link_ndev_pvt->arvif;
+				tmp_ab = arvif->ab;
+				ath12k_bond_link_release(link_ndev_pvt->arvif);
+				if (link_ndev_pvt->vp_num)
+					ath12k_disable_ppe_for_link_netdev(tmp_ab, arvif,
+									   arvif->ndev_pvt->link_ndev);
 			}
-			mutex_unlock(&vif->bond_mutex);
+			ath12k_info(NULL, "Unregister link netdevice %s link ndev %p link_num %d\n",
+				    link_ndev->name, link_ndev, link_num);
+			unregister_netdevice(link_ndev);
+			link_ndev_pvt->link_ndev = NULL;
+			vif->link_ndev[link_num] = NULL;
+		} else {
+			ath12k_err(NULL, "ERR Unregister link netdevice %s link ndev %p link_num %d\n",
+				   link_ndev->name, link_ndev, link_num);
 		}
-	ath12k_info(NULL, "%s:%d link changed for MLD %pM old 0x%x new 0x%x\n", __func__, __LINE__, vif->addr, old_links, new_links);
+		mutex_unlock(&vif->bond_mutex);
+	}
+	ath12k_info(NULL, "%s:%d link changed for MLD %pM old 0x%x new 0x%x\n", __func__, __LINE__,
+		    vif->addr, old_links, new_links);
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -324,7 +324,8 @@ struct ath12k_vif_tcl_desc_template {
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 struct ath12k_link_vif_pvt {
-        struct ath12k_link_vif *arvif;
+	struct ath12k_base *ab;
+	struct ath12k_link_vif *arvif;
 	struct net_device *link_ndev;
 	struct net_device *bond_dev;
 	struct ieee80211_hw *hw;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10684,6 +10684,7 @@ static void ath12k_update_obss_color_not
 		link_ndev = vif->link_ndev[link_id];
 		if (link_ndev) {
 			link_ndev_pvt = netdev_priv(link_ndev);
+			link_ndev_pvt->ab = ab;
 			link_ndev_pvt->arvif = arvif;
 			arvif->ndev_pvt = link_ndev_pvt;
 		}
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2036,6 +2036,11 @@ static void ath12k_core_pre_reconfigure_
 			if (arvif->is_started)
 				ath12k_debugfs_remove_interface(arvif);
 
+		list_for_each_entry(arvif, &ar->arvifs, list) {
+			arvif->is_started = false;
+			arvif->is_created = false;
+		}
+
 		ath12k_mac_radio_drain_tx(ar);
 		complete(&ar->scan.started);
 		complete(&ar->scan.completed);
