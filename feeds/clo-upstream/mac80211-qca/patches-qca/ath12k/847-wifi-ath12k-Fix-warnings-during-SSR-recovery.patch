From bbe99c18b0b872ac3c46cc562ed9f1b6bd4eea29 Mon Sep 17 00:00:00 2001
From: Vignesh C <quic_vignc@quicinc.com> 
Date: Thu, 16 Nov 2023 23:41:59 +0530
Subject: [PATCH] wifi: ath12k: Fix warnings during SSR recovery

In MLD AP with stations connected, with fw_recovery bit is
set and if firmware asserted for any reason ath12k driver
will internally delete all the peers connected but still
mac80211 will have the station reference until firmware
powers up again. When firmware is in recovery process,
there are cases where mac80211 might try to delete the stations
which will lead to warnings getting printed as some firmware
commands are expected to fail in this scenario.

Fix this by avoiding sending firmware commands in the peer
cleanup scenario until firmware powers up again.

Fixes: I4fca5504445: ath12k: Add support for Mode 1 recovery

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Signed-off-by: Vignesh C <quic_vignc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c  | 16 ++++++++++++++--
 drivers/net/wireless/ath/ath12k/peer.c |  8 ++++++--
 2 files changed, 20 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1226,7 +1226,6 @@ int ath12k_mac_partner_peer_cleanup(stru
 					vif = peer->vif;
 					ahvif = (struct ath12k_vif *)vif->drv_priv;
 					arvif = ahvif->link[link_id];
-					cancel_work_sync(&arsta->update_wk);
 
 					mutex_lock(&ar->conf_mutex);
 					ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr);
@@ -1247,6 +1246,7 @@ int ath12k_mac_partner_peer_cleanup(stru
 					arvif->num_stations--;
 					ath12k_mac_dec_num_stations(arvif, arsta);
 					mutex_unlock(&ar->conf_mutex);
+					cancel_work_sync(&arsta->update_wk);
 				} else {
 					/* Send low ack to disassoc the MLD station
 					 * Need to check on the sequence as FW has
@@ -7589,7 +7589,7 @@ int ath12k_mac_update_sta_state(struct i
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_sta *ahsta = ath12k_sta_to_ahsta(sta);
 	int ret = 0;
-	u8 link_id = 0;
+	u8 link_id = 0, link;
 
 	mutex_lock(&ah->conf_mutex);
 
@@ -7640,6 +7640,18 @@ int ath12k_mac_update_sta_state(struct i
 	/* assign default link to the first link sta */
 	if (!ahsta->links_map && hweight16(sta->valid_links) == 1 &&
 	    new_state == IEEE80211_STA_NONE && old_state == IEEE80211_STA_NOTEXIST) {
+		/* add case to prevent MLO assoc from happening when UMAC recovery
+		 * happens
+		 */
+		for_each_set_bit(link, &ahvif->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+			arvif = ahvif->link[link];
+
+			if (!arvif || !arvif->ar ||
+			    (test_bit(ATH12K_FLAG_UMAC_RECOVERY_START,
+				      &arvif->ar->ab->dev_flags)))
+				goto exit;
+		}
+
 		ret = ath12k_ml_peer_create(ah, sta);
 		if (ret) {
 			ath12k_err(NULL, "unable to create ML peer for sta %pM", sta->addr);
@@ -11250,6 +11262,9 @@ static void ath12k_mac_op_remove_interfa
 		if (WARN_ON(arvif->link_id != link_id))
 			continue;
 
+		if (unlikely(test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags)))
+			continue;
+
 		if (arvif->is_scan_vif && arvif->is_started) {
 			mutex_lock(&ar->conf_mutex);
 			ret = ath12k_mac_vdev_stop(arvif);
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -542,8 +542,11 @@ int ath12k_ml_link_peers_delete(struct a
 		cancel_work_sync(&arsta->update_wk);
 
 		if (test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags) ||
-				test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags))
+		    test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags) ||
+		    test_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &ar->ab->dev_flags))
 			continue;
+
+		cancel_work_sync(&arsta->update_wk);
 		mutex_lock(&ar->conf_mutex);
 		ath12k_dp_peer_cleanup(ar, arvif->vdev_id, arsta->addr);
 
@@ -573,7 +576,8 @@ int ath12k_ml_link_peers_delete(struct a
 			continue;
 
 		if (test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags) ||
-				test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags))
+		    test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags) ||
+		    test_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &ar->ab->dev_flags))
 			continue;
 		mutex_lock(&ar->conf_mutex);
 		ret = ath12k_wait_for_peer_delete_done(ar, arvif->vdev_id, arsta->addr);
