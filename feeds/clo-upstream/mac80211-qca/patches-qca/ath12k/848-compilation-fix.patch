From c0c8049d56940862a52ffad0286b335b153166b6 Mon Sep 17 00:00:00 2001
From: Saravanakumar Duraisamy <quic_saradura@quicinc.com>
Date: Wed, 16 Aug 2023 15:15:09 +0530
Subject: [PATCH] ath12k: package update compilation fix ath12k 6.5

Signed-off-by: Saravanakumar Duraisamy <quic_saradura@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c     |  1 +
 drivers/net/wireless/ath/ath12k/core.h     | 45 +++++++++++++++++--
 drivers/net/wireless/ath/ath12k/coredump.c |  4 +-
 drivers/net/wireless/ath/ath12k/dp_mon.c   | 12 ++---
 drivers/net/wireless/ath/ath12k/dp_rx.c    |  2 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c    |  5 ++-
 drivers/net/wireless/ath/ath12k/mac.c      | 51 +++++++++++++---------
 drivers/net/wireless/ath/ath12k/qmi.c      |  2 +
 drivers/net/wireless/ath/ath12k/reg.c      | 10 ++---
 drivers/net/wireless/ath/ath12k/wmi.c      | 19 ++++----
 drivers/net/wireless/ath/ath12k/wmi.h      | 10 ++---
 include/net/mac80211.h                     |  2 +
 12 files changed, 109 insertions(+), 54 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -278,6 +278,43 @@ struct ath12k_fw_vdev_ol_stats {
 	u64 tx_msdu_ttl_pkt_cnt;
 };
 
+/**
+ * struct chan_power_info - TPE containing power info per channel chunk
+ * @chan_cfreq: channel center freq (MHz)
+ * e.g.
+ * channel 37/20MHz,  it is 6135
+ * channel 37/40MHz,  it is 6125
+ * channel 37/80MHz,  it is 6145
+ * channel 37/160MHz, it is 6185
+ * @tx_power: transmit power (dBm)
+ */
+struct chan_power_info {
+        u16 chan_cfreq;
+        s8 tx_power;
+};
+
+/**
+ * struct reg_tpc_power_info - regulatory TPC power info
+ * @is_psd_power: is PSD power or not
+ * @eirp_power: Maximum EIRP power (dBm), valid only if power is PSD
+ * @power_type_6g: type of power (SP/LPI/VLP)
+ * @num_pwr_levels: number of power levels
+ * @reg_max: Array of maximum TX power (dBm) per PSD value
+ * @ap_constraint_power: AP constraint power (dBm)
+ * @tpe: TPE values processed from TPE IE
+ * @chan_power_info: power info to send to FW
+ */
+struct ath12k_reg_tpc_power_info {
+        bool is_psd_power;
+        u8 eirp_power;
+        enum wmi_reg_6g_ap_type power_type_6g;
+        u8 num_pwr_levels;
+        u8 reg_max[IEEE80211_MAX_NUM_PWR_LEVEL];
+        u8 ap_constraint_power;
+        s8 tpe[IEEE80211_MAX_NUM_PWR_LEVEL];
+        struct chan_power_info chan_power_info[IEEE80211_MAX_NUM_PWR_LEVEL];
+};
+
 #define ATH12K_STATS_MGMT_FRM_TYPE_MAX 16
 
 struct ath12k_mgmt_frame_stats {
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -939,8 +939,8 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_2);
 		ppdu_info->eht_data[2] |=
 				(ru_allocation2_2 << EHT_RU_ALLOCATION2_2_SHIFT);
-		ru_allocation2_1 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1);
+		//ru_allocation2_1 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
+			//			HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1);
 		ppdu_info->eht_data[2] |=
 				(ru_allocation2_1 << EHT_RU_ALLOCATION2_1_SHIFT);
 		/* fallthrough */
@@ -1113,7 +1113,7 @@ ath12k_dp_mon_hal_rx_parse_eht_sig_ofdma
 	void *user_info = (void *)(eht_sig_tlv + 2);
 
 	ath12k_dp_mon_hal_rx_parse_usig_overflow(tlv, ppdu_info);
-        ath12k_dp_mon_hal_rx_parse_ru_allocation(tlv, ppdu_info);
+    	ath12k_dp_mon_hal_rx_parse_ru_allocation    (tlv, ppdu_info);
 	ath12k_dp_mon_hal_rx_parse_eht_sig_non_mumimo_user(user_info,
 							   ppdu_info);
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
@@ -3717,7 +3717,7 @@ ath12k_dp_mon_rx_memset_ppdu_info(struct
 }
 
 int ath12k_dp_mon_srng_process(struct ath12k *ar, int mac_id, int *budget,
-			       bool flag, struct napi_struct *napi)
+			       enum dp_monitor_mode dp_mon_mode, struct napi_struct *napi)
 {
 	struct hal_mon_dest_desc *mon_dst_desc;
 	struct ath12k_pdev_dp *pdev_dp = &ar->dp;
@@ -3743,7 +3743,7 @@ int ath12k_dp_mon_srng_process(struct at
 
 	srng_id = ath12k_hw_mac_id_to_srng_id(ab->hw_params, mac_id);
 
-	if (flag == ATH12K_DP_RX_MONITOR_MODE) {
+	if (dp_mon_mode == ATH12K_DP_RX_MONITOR_MODE) {
 		mon_dst_ring = &pdev_dp->rxdma_mon_dst_ring[srng_id];
 		buf_ring = &dp->rxdma_mon_buf_ring;
 	} else {
@@ -3852,7 +3852,7 @@ move_next:
 			                                   log_type, rx_buf_sz);
 		}
 
-		if (flag == ATH12K_DP_RX_MONITOR_MODE)
+		if (dp_mon_mode == ATH12K_DP_RX_MONITOR_MODE)
 			hal_status =
 				ath12k_dp_mon_rx_parse_mon_status(ar, ppdu_info, mac_id,
 								  skb, napi);
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1628,7 +1628,6 @@ ath12k_update_per_peer_tx_stats(struct a
 	int ret;
 	u8 flags, mcs, nss, bw, sgi, dcm, rate_idx = 0;
 	u32 v, succ_bytes = 0, ppdu_type;
-	u16 tones;
 	u16 rate = 0, succ_pkts = 0, ru_start, ru_end;
 	u32 tx_duration = 0, ru_tones, ru_format, tlv_bitmap, rate_flags;
 	bool is_ampdu = false, resp_type_valid;
@@ -4766,7 +4765,7 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 
 	hdr = (struct ieee80211_hdr *)msdu->data;
 	hdr_len = ieee80211_hdrlen(hdr->frame_control);
-	llc = msdu->data + hdr_len;
+	llc = (struct ath12k_dp_rx_rfc1042_hdr *)(msdu->data + hdr_len);
 
 	if (!(llc->snap_type == cpu_to_be16(ETH_P_PAE) ||
 	      ieee80211_is_qos_nullfunc(hdr->frame_control)))
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -28,6 +28,13 @@
 #include "bondif.h"
 #endif
 
+#define IEEE80211_EHT_PPE_THRES_NSS_POS                        0
+#define IEEE80211_EHT_PPE_THRES_NSS_MASK               0xf
+#define IEEE80211_EHT_PPE_THRES_RU_INDEX_BITMASK_MASK  0x1f0
+#define IEEE80211_EHT_PPE_THRES_RU_INDEX_BITMASK_POS   4
+#define IEEE80211_EHT_PPE_THRES_INFO_PPET_SIZE         3
+#define IEEE80211_EHT_PPE_THRES_INFO_HEADER_SIZE       9
+
 #define CHAN2G(_channel, _freq, _flags) { \
 	.band                   = NL80211_BAND_2GHZ, \
 	.hw_value               = (_channel), \
@@ -511,6 +518,19 @@ int ath12k_mac_hw_ratecode_to_legacy_rat
 	return -EINVAL;
 }
 
+static int get_num_chains(u32 mask)
+{
+	int num_chains = 0;
+
+	while (mask) {
+		if (mask & BIT(0))
+			num_chains++;
+		mask >>= 1;
+	}
+
+	return num_chains;
+}
+
 u8 ath12k_mac_bitrate_to_idx(const struct ieee80211_supported_band *sband,
 			     u32 bitrate)
 {
@@ -11738,7 +11758,7 @@ ath12k_mac_vdev_start_restart(struct ath
 	ath12k_dbg(ab, ATH12K_DBG_MAC,
 		   "mac vdev %d start center_freq %d phymode %s punct_bitmap 0x%x\n",
 		   arg.vdev_id, arg.channel.freq,
-		   ath12k_mac_phymode_str(arg.mode), arg.punct_bitmap);
+		   ath12k_mac_phymode_str(arg.channel.mode), arg.punct_bitmap);
 
 	ret = ath12k_wmi_vdev_start(ar, &arg, restart);
 	if (ret) {
@@ -16280,6 +16300,12 @@ static int __ath12k_mac_register(struct
 	if (cap->nss_ratio_enabled)
 		ieee80211_hw_set(hw, SUPPORTS_VHT_EXT_NSS_BW);
 
+    ieee80211_hw_set(hw, AMPDU_AGGREGATION);
+    ieee80211_hw_set(hw, TX_AMPDU_SETUP_IN_HW);
+    ieee80211_hw_set(hw, SUPPORTS_REORDERING_BUFFER);
+    ieee80211_hw_set(hw, SUPPORTS_AMSDU_IN_AMPDU);
+    ieee80211_hw_set(hw, USES_RSS);
+
 	/* TODO: Check if HT capability advertised from firmware is different
 	 * for each band for a dual band capable radio. It will be tricky to
 	 * handle it when the ht capability different for each band.
@@ -16737,8 +16763,8 @@ static inline struct ath12k *ath12k_mac_
 	return ar + link_idx;
 }
 
-static int ath12k_mac_chip_setup(struct ath12k_hw *ah, u8 *link_id,
-				 struct ath12k_base *ab)
+static int ath12k_mac_setup(struct ath12k_hw *ah, u8 link_id,
+			    struct ath12k_base *ab, int mac_id)
 {
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -44,7 +44,7 @@ ath12k_ieee80211_ap_pwr_type_convert(enu
 }
 
 static void ath12k_copy_reg_rule(struct ath12k_reg_freq *ath12k_reg_freq,
-                                 struct cur_reg_rule *reg_rule)
+                                 struct ath12k_reg_rule *reg_rule)
 {
         if (!ath12k_reg_freq->start_freq)
                 ath12k_reg_freq->start_freq = reg_rule->start_freq;
@@ -54,12 +54,12 @@ static void ath12k_copy_reg_rule(struct
                 ath12k_reg_freq->end_freq = reg_rule->end_freq;
 }
 
-static struct cur_reg_rule
-*ath12k_get_active_6g_reg_rule(struct cur_regulatory_info *reg_info,
+static struct ath12k_reg_rule
+*ath12k_get_active_6g_reg_rule(struct ath12k_reg_info *reg_info,
                               u32 *max_bw_6g, int *max_elements,
 			      enum nl80211_regulatory_power_modes *pwr_mode)
 {
-       struct cur_reg_rule *reg_rule = NULL;
+       struct ath12k_reg_rule *reg_rule = NULL;
        u8 i = 0, j = 0;
 
        for (i = 0; i < WMI_REG_CURRENT_MAX_AP_TYPE; i++) {
@@ -729,10 +729,10 @@ ath12k_reg_build_regd(struct ath12k_base
 	u8 i = 0, j = 0, k = 0;
 	u8 num_rules;
 	u16 max_bw;
-	u32 flags;
 	u32 flags = 0, reg_6g_number = 0, max_bw_6g = 0;
 	char alpha2[3];
 	int max_elements = 0;
+	bool reg_6g_itr_set = false;
 	enum nl80211_regulatory_power_modes pwr_mode;
 
 	num_rules = reg_info->num_5g_reg_rules + reg_info->num_2g_reg_rules;
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1833,7 +1833,7 @@ int ath12k_wmi_config_peer_ppeds_routing
 					 u32 service_code, u32 priority_valid,
 					 u32 src_info, bool ppe_routing_enable)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct sk_buff *skb;
 	struct wmi_peer_config_ppeds_cmd *cmd;
 	int ret;
@@ -1873,7 +1873,7 @@ int
 ath12k_wmi_send_vdev_set_intra_bss_cmd(struct ath12k *ar,
 				       u32 vdev_id, u32 enable)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct ath12k_vdev_set_intra_bss_cmd *cmd;
 	struct sk_buff *skb;
 	int ret;
@@ -1905,7 +1905,7 @@ ath12k_wmi_send_vdev_set_intra_bss_cmd(s
 int ath12k_wmi_set_peer_intra_bss_cmd(struct ath12k *ar, u32 vdev_id, const u8 *peer_addr,
 				      u32 enable)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_peer_set_intra_bss_cmd *cmd;
 	struct sk_buff *skb;
 	int ret;
@@ -1938,7 +1938,7 @@ int ath12k_wmi_set_peer_intra_bss_cmd(st
 int ath12k_wmi_send_pdev_pkt_route(struct ath12k *ar,
 				   struct ath12k_wmi_pkt_route_param *param)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_pdev_pkt_route_cmd *cmd;
 	struct sk_buff *skb;
 	int ret;
@@ -2456,7 +2456,7 @@ int ath12k_wmi_vdev_set_param_cmd(struct
 int ath12k_wmi_send_stats_request_cmd(struct ath12k *ar, u32 stats_id,
 				      u32 vdev_id, u32 pdev_id)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_request_stats_cmd *cmd;
 	struct sk_buff *skb;
 	int ret;
@@ -2563,7 +2563,7 @@ static void ath12k_wmi_copy_coex_config(
 int ath12k_send_coex_config_cmd(struct ath12k *ar,
                                 struct coex_config_arg *coex_config)
 {
-        struct ath12k_pdev_wmi *wmi = ar->wmi;
+        struct ath12k_wmi_pdev *wmi = ar->wmi;
         struct wmi_coex_config_cmd *cmd;
         struct sk_buff *skb;
         int ret;
@@ -4448,7 +4448,7 @@ int
 ath12k_wmi_send_wmi_ctrl_stats_cmd(struct ath12k *ar,
 		struct wmi_ctrl_path_stats_cmd_param *param)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct ath12k_base *ab = wmi->wmi_ab->ab;
 	u32 pdev_id_array[2] = {0};
 	int len, ret;
@@ -6820,7 +6820,7 @@ static struct ath12k_reg_rule
 	return reg_rule_ptr;
 }
 
-static const char *ath12k_cc_status_to_str(enum cc_setting_code code)
+static const char *ath12k_cc_status_to_str(enum ath12k_reg_cc_code code)
 {
        switch (code) {
        case REG_SET_CC_STATUS_PASS:
@@ -6916,9 +6916,9 @@ static const char *ath12k_sub_reg_6g_to_
 
 static void ath12k_print_reg_rule(struct ath12k_base *ab, char *prev,
                                  u32 num_reg_rules,
-                                 struct cur_reg_rule *reg_rule_ptr)
+                                 struct ath12k_reg_rule *reg_rule_ptr)
 {
-       struct cur_reg_rule *reg_rule = reg_rule_ptr;
+       struct ath12k_reg_rule *reg_rule = reg_rule_ptr;
        u32 count;
 
        ath12k_dbg(ab, ATH12K_DBG_WMI, "%s reg rules number %d\n", prev, num_reg_rules);
@@ -6935,7 +6935,7 @@ static void ath12k_print_reg_rule(struct
 
 static u8
 ath12k_invalid_5g_reg_ext_rules_from_wmi(u32 num_reg_rules,
-                                         struct wmi_regulatory_ext_rule_struct *wmi_reg_rule)
+                                         struct ath12k_wmi_reg_rule_ext_params *wmi_reg_rule)
 {
         u8 num_invalid_5g_rules = 0;
         u32 count, start_freq, end_freq;
@@ -7982,13 +7982,14 @@ static int ath12k_pull_roam_ev(struct at
 static int freq_to_idx(struct ath12k *ar, int freq)
 {
 	struct ieee80211_supported_band *sband;
+	struct ieee80211_hw *hw = ar->ah->hw;
 	int band, ch, idx = 0;
 
 	for (band = NL80211_BAND_2GHZ; band < NUM_NL80211_BANDS; band++) {
 		if (!ar->mac.sbands[band].channels)
 			continue;
 
-		sband = ar->hw->wiphy->bands[band];
+		sband = hw->wiphy->bands[band];
 		if (!sband)
 			continue;
 
@@ -8742,7 +8743,7 @@ static void ath12k_wmi_htc_tx_complete(s
 }
 
 static int ath12k_reg_handle_chan_list(struct ath12k_base *ab,
-                                      struct cur_regulatory_info *reg_info,
+                                      struct ath12k_reg_info *reg_info,
                                       enum ieee80211_ap_reg_power power_type)
 {
 	struct ieee80211_regdomain *regd;
@@ -8834,7 +8835,7 @@ retfail:
 
 static int ath12k_reg_chan_list_event(struct ath12k_base *ab, struct sk_buff *skb)
 {
-       struct cur_regulatory_info *reg_info;
+       struct ath12k_reg_info *reg_info;
        int ret, i, j;
 
        reg_info = kzalloc(sizeof(*reg_info), GFP_ATOMIC);
@@ -13512,7 +13513,7 @@ exit:
 
 int ath12k_wmi_pdev_get_tpc_table_cmdid(struct ath12k *ar)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_request_ctrl_path_stats_cmd_fixed_param *cmd;
 	struct sk_buff *skb;
 	struct wmi_tlv *tlv;
@@ -13683,7 +13684,7 @@ static const char *ath12k_wmi_twt_add_di
 
 int ath12k_wmi_dbglog_cfg(struct ath12k *ar, u32 param, u64 value)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_dbglog_config_cmd_fixed_param *cmd;
 	struct sk_buff *skb;
 	struct wmi_tlv *tlv;
@@ -14583,7 +14584,7 @@ int ath12k_wmi_pdev_ap_ps_cmd_send(struc
 int ath12k_wmi_mlo_setup(struct ath12k *ar,
 			 struct wmi_mlo_setup_params *mlo_params)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_mlo_setup_cmd_fixed_param *cmd;
 	struct sk_buff *skb;
 	struct wmi_tlv *tlv;
@@ -14624,7 +14625,7 @@ int ath12k_wmi_mlo_setup(struct ath12k *
 
 int ath12k_wmi_mlo_ready(struct ath12k *ar)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_mlo_ready_cmd_fixed_param *cmd;
 	struct sk_buff *skb;
 	int ret, len;
@@ -14651,7 +14652,7 @@ int ath12k_wmi_mlo_ready(struct ath12k *
 
 int ath12k_wmi_mlo_teardown(struct ath12k *ar, bool umac_reset)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_mlo_teardown_fixed_param *cmd;
 	struct sk_buff *skb;
 	int ret, len;
@@ -14692,7 +14693,7 @@ bool ath12k_wmi_is_mvr_supported(struct
 int ath12k_wmi_pdev_multiple_vdev_restart(struct ath12k *ar,
 					  struct wmi_pdev_multiple_vdev_restart_req_arg *arg)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_pdev_multiple_vdev_restart_request_cmd *cmd;
 	struct ath12k_wmi_channel_params *chan;
 	struct wmi_tlv *tlv;
@@ -14762,7 +14763,7 @@ int ath12k_wmi_vdev_adfs_ch_cfg_cmd_send
 					 u32 vdev_id,
 					 struct cfg80211_chan_def *def)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_vdev_adfs_ch_cfg_cmd *cmd;
 	struct sk_buff *skb;
 	int ret = 0;
@@ -14817,7 +14818,7 @@ int ath12k_wmi_vdev_adfs_ch_cfg_cmd_send
 
 int ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(struct ath12k *ar, u32 vdev_id)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_vdev_adfs_ocac_abort_cmd *cmd;
 	struct sk_buff *skb;
 	int ret = 0;
@@ -14854,7 +14855,7 @@ int ath12k_wmi_vdev_adfs_ocac_abort_cmd_
 
 int ath12k_wmi_svc_config_send(struct ath12k *ar, struct ath12k_sawf_svc_params *param)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_sawf_svc_cfg_cmd_fixed_param *cmd;
 	struct sk_buff *skb;
 	int len, ret;
@@ -14904,7 +14905,7 @@ int ath12k_wmi_svc_config_send(struct at
 
 int ath12k_wmi_svc_send_disable(struct ath12k *ar, u32 svc_id)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_sawf_svc_disable_cmd_fixed_param *cmd;
 	struct sk_buff *skb;
 	int len, ret;
@@ -14972,7 +14973,7 @@ static int ath12k_wmi_peer_chan_width_sw
 					     struct wmi_peer_chan_width_switch_arg *arg)
 {
 	struct ath12k_base *ab = ar->ab;
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_peer_chan_width_switch_req_cmd *cmd;
 	struct wmi_chan_width_peer_list *peer_list;
 	struct wmi_tlv *tlv;
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -1077,6 +1077,10 @@ enum ath12k_eht_ru_size {
 #define REO_DEST_CTRL_IX_0_RING6_MAP_MASK 0xF
 #define REO_DEST_CTRL_IX_0_RING6_MAP_SHFT 24
 
+#define REO2PPE_DST_RING_MAP 11
+#define REO_DEST_CTRL_IX_0_RING6_MAP_MASK 0xF
+#define REO_DEST_CTRL_IX_0_RING6_MAP_SHFT 24
+
 /* U-SIG Common Mask */
 #define USIG_PHY_VERSION_KNOWN	0x00000001
 #define USIG_BW_KNOWN		0x00000002
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1039,6 +1039,8 @@ static const struct ath12k_hw_regs qcn92
 	.hal_reo1_sw_cookie_cfg1 = 0x00000054,
 	.hal_reo1_qdesc_lut_base0 = 0x00000058,
 	.hal_reo1_qdesc_lut_base1 = 0x0000005c,
+	.hal_reo1_qdesc_addr_read = 0x00000060,
+
 	.hal_reo1_ring_base_lsb = 0x000004e4,
 	.hal_reo1_ring_base_msb = 0x000004e8,
 	.hal_reo1_ring_id = 0x000004ec,
@@ -1161,6 +1163,8 @@ static const struct ath12k_hw_regs qcn92
 	/* REO status ring address */
 	.hal_reo_status_ring_base = 0x00000aa0,
 
+	.hal_reo1_qdesc_addr_read = 0x0000007c,
+
 	/* WBM idle link ring address */
 	.hal_wbm_idle_ring_base_lsb = 0x00000d3c,
 	.hal_wbm_idle_ring_misc_addr = 0x00000d4c,
@@ -1663,7 +1667,7 @@ static struct ath12k_hw_params ath12k_hw
 		.name = "qcn9274 hw2.0",
 		.hw_rev = ATH12K_HW_QCN9274_HW20,
 		.fw = {
-			.dir = "QCN9274/hw2.0",
+			.dir = "QCN92XX/hw1.0",
 			.board_size = 256 * 1024,
 			.cal_offset = 128 * 1024,
 		},
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -219,6 +219,7 @@ struct ath12k_hw_params {
 	u32 hal_desc_sz;
 	u32 num_tcl_banks;
 	u32 max_tx_ring;
+	bool static_window_map;
 
 	const struct mhi_controller_config *mhi_config;
 
@@ -341,6 +342,10 @@ struct ath12k_hw_regs {
 
 	u32 hal_tcl_status_ring_base_lsb;
 
+	u32 hal_reo1_qdesc_addr_read;
+	u32 hal_reo1_qdesc_max_peerid;
+	u32 hal_ppe_rel_ring_base;
+
 	u32 hal_wbm_idle_ring_base_lsb;
 	u32 hal_wbm_idle_ring_misc_addr;
 	u32 hal_wbm_r0_idle_list_cntl_addr;
--- a/drivers/net/wireless/ath/ath12k/sawf.c
+++ b/drivers/net/wireless/ath/ath12k/sawf.c
@@ -1066,7 +1066,7 @@ void ath12k_sawf_config_ul(struct net_de
 int ath12k_sawf_wmi_config_peer_latency(struct ath12k *ar,
 				   struct ath12k_sawf_wmi_peer_latency_param *latency_info)
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_tid_latency_info *tid_latency_info;
 	struct wmi_peer_tid_latency_config_fixed_param *cmd;
 	struct sk_buff *skb;
--- a/drivers/net/wireless/ath/ath12k/testmode.c
+++ b/drivers/net/wireless/ath/ath12k/testmode.c
@@ -402,7 +402,7 @@ out:
 
 static int ath12k_tm_cmd_process_ftm(struct ath12k *ar, struct nlattr *tb[])
 {
-	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct sk_buff *skb;
 	u32 cmd_id, buf_len, hdr_info;
 	int ret;
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3476,6 +3476,87 @@ struct wmi_channel_arg {
 	enum wmi_phy_mode mode;
 };
 
+static inline const char *ath12k_wmi_phymode_str(enum wmi_phy_mode mode)
+{
+	switch (mode) {
+	case MODE_11A:
+		return "11a";
+	case MODE_11G:
+		return "11g";
+	case MODE_11B:
+		return "11b";
+	case MODE_11GONLY:
+		return "11gonly";
+	case MODE_11NA_HT20:
+		return "11na-ht20";
+	case MODE_11NG_HT20:
+		return "11ng-ht20";
+	case MODE_11NA_HT40:
+		return "11na-ht40";
+	case MODE_11NG_HT40:
+		return "11ng-ht40";
+	case MODE_11AC_VHT20:
+		return "11ac-vht20";
+	case MODE_11AC_VHT40:
+		return "11ac-vht40";
+	case MODE_11AC_VHT80:
+		return "11ac-vht80";
+	case MODE_11AC_VHT160:
+		return "11ac-vht160";
+	case MODE_11AC_VHT80_80:
+		return "11ac-vht80+80";
+	case MODE_11AC_VHT20_2G:
+		return "11ac-vht20-2g";
+	case MODE_11AC_VHT40_2G:
+		return "11ac-vht40-2g";
+	case MODE_11AC_VHT80_2G:
+		return "11ac-vht80-2g";
+	case MODE_11AX_HE20:
+		return "11ax-he20";
+	case MODE_11AX_HE40:
+		return "11ax-he40";
+	case MODE_11AX_HE80:
+		return "11ax-he80";
+	case MODE_11AX_HE80_80:
+		return "11ax-he80+80";
+	case MODE_11AX_HE160:
+		return "11ax-he160";
+	case MODE_11AX_HE20_2G:
+		return "11ax-he20-2g";
+	case MODE_11AX_HE40_2G:
+		return "11ax-he40-2g";
+	case MODE_11AX_HE80_2G:
+		return "11ax-he80-2g";
+	case MODE_11BE_EHT20:
+		return "11be-eht20";
+	case MODE_11BE_EHT40:
+		return "11be-eht40";
+	case MODE_11BE_EHT80:
+		return "11be-eht80";
+	case MODE_11BE_EHT80_80:
+		return "11be-eht80+80";
+	case MODE_11BE_EHT160:
+		return "11be-eht160";
+	case MODE_11BE_EHT160_160:
+		return "11be-eht160+160";
+	case MODE_11BE_EHT320:
+		return "11be-eht320";
+	case MODE_11BE_EHT20_2G:
+		return "11be-eht20-2g";
+	case MODE_11BE_EHT40_2G:
+		return "11be-eht40-2g";
+	case MODE_UNKNOWN:
+		/* skip */
+		break;
+
+		/* no default handler to allow compiler to check that the
+		 *          * enum is fully handled
+		 *                   */
+	}
+
+	return "<unknown>";
+}
+
 #define ATH12K_WMI_MLO_MAX_LINKS 3
 
 struct wmi_ml_partner_info {
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1303,7 +1303,7 @@ int ath12k_dp_service_srng(struct ath12k
 	int i = 0, j;
 	int tot_work_done = 0;
 	enum dp_monitor_mode monitor_mode;
-	u8 ring_mask;
+	u8 ring_mask_val;
 	struct ath12k_hw_ring_mask *ring_mask = ab->hw_params->ring_mask;
 	u8 tx_mask = ring_mask->tx[grp_id];
 	u8 rx_err_mask = ring_mask->rx_err[grp_id];
@@ -1366,12 +1366,12 @@ int ath12k_dp_service_srng(struct ath12k
 
 	if (rx_mon_dest_mask) {
 		monitor_mode = ATH12K_DP_RX_MONITOR_MODE;
-		ring_mask = ab->hw_params->ring_mask->rx_mon_dest[grp_id];
+		ring_mask_val = ab->hw_params->ring_mask->rx_mon_dest[grp_id];
 		for (i = 0; i < ab->num_radios; i++) {
 			for (j = 0; j < ab->hw_params->num_rxmda_per_pdev; j++) {
 				int id = i * ab->hw_params->num_rxmda_per_pdev + j;
 
-				if (ring_mask & BIT(id)) {
+				if (ring_mask_val & BIT(id)) {
 					work_done =
 					ath12k_dp_mon_process_ring(ab, id, napi, budget,
 								   monitor_mode);
@@ -1387,12 +1387,12 @@ int ath12k_dp_service_srng(struct ath12k
 
 	if (tx_mon_dest_mask) {
 		monitor_mode = ATH12K_DP_TX_MONITOR_MODE;
-		ring_mask = ab->hw_params->ring_mask->tx_mon_dest[grp_id];
+		ring_mask_val = ab->hw_params->ring_mask->tx_mon_dest[grp_id];
 		for (i = 0; i < ab->num_radios; i++) {
 			for (j = 0; j < ab->hw_params->num_rxmda_per_pdev; j++) {
 				int id = i * ab->hw_params->num_rxmda_per_pdev + j;
 
-				if (ring_mask & BIT(id)) {
+				if (ring_mask_val & BIT(id)) {
 					work_done =
 					ath12k_dp_mon_process_ring(ab, id, napi, budget,
 								   monitor_mode);
@@ -1889,7 +1889,7 @@ static inline void *ath12k_dp_cc_get_des
 {
 	struct ath12k_dp *dp = &ab->dp;
 
-	return dp->spt_info[ppt_idx].vaddr + spt_idx;
+	return dp->spt_info[ppt_idx].vaddr + (spt_idx * sizeof(u64));
 }
 
 struct ath12k_rx_desc_info *ath12k_dp_get_rx_desc(struct ath12k_base *ab,
@@ -2137,13 +2137,16 @@ int ath12k_dp_cc_ppeds_desc_init(struct
 static int ath12k_dp_cc_desc_init(struct ath12k_base *ab)
 {
 	struct ath12k_dp *dp = &ab->dp;
-	struct ath12k_rx_desc_info *rx_descs, **rx_desc_addr;
-	struct ath12k_tx_desc_info *tx_descs, **tx_desc_addr;
+	struct ath12k_rx_desc_info *rx_descs;
+	struct ath12k_tx_desc_info *tx_descs;
+	struct ath12k_spt_info *tx_spt_pages, *rx_spt_pages;
 	u32 i, j, pool_id, tx_spt_page;
 	u32 ppt_idx;
 
 	spin_lock_bh(&dp->rx_desc_lock);
 
+	rx_spt_pages = &dp->spt_info[ATH12K_RX_SPT_PAGE_OFFSET];
+
 	/* First ATH12K_NUM_RX_SPT_PAGES of allocated SPT pages are used for RX */
 	for (i = 0; i < ATH12K_NUM_RX_SPT_PAGES; i++) {
 		rx_descs = kcalloc(ATH12K_MAX_SPT_ENTRIES, sizeof(*rx_descs),
@@ -2158,19 +2161,22 @@ static int ath12k_dp_cc_desc_init(struct
 		ppt_idx = dp->rx_spt_base + ATH12K_RX_SPT_PAGE_OFFSET + i;
 
 		for (j = 0; j < ATH12K_MAX_SPT_ENTRIES; j++) {
-			rx_descs[j].cookie = ath12k_dp_cc_cookie_gen(i, j);
+			rx_descs[j].cookie = ath12k_dp_cc_cookie_gen(ppt_idx, j);
 			rx_descs[j].magic = ATH12K_DP_RX_DESC_MAGIC;
 			rx_descs[j].chip_id = ab->chip_id;
 			list_add_tail(&rx_descs[j].list, &dp->rx_desc_free_list);
 
 			/* Update descriptor VA in SPT */
-			rx_desc_addr = ath12k_dp_cc_get_desc_addr_ptr(ab, i, j);
-			*rx_desc_addr = &rx_descs[j];
+			*(struct ath12k_rx_desc_info **)((u8 *)rx_spt_pages[i].vaddr +
+				(j * sizeof(u64))) = &rx_descs[j];
 		}
 	}
 
 	spin_unlock_bh(&dp->rx_desc_lock);
 
+	/* pointer to start of TX pages */
+	tx_spt_pages = &dp->spt_info[ATH12K_TX_SPT_PAGE_OFFSET];
+
 	for (pool_id = 0; pool_id < ATH12K_HW_MAX_QUEUES; pool_id++) {
 		spin_lock_bh(&dp->tx_desc_lock[pool_id]);
 		for (i = 0; i < ATH12K_TX_SPT_PAGES_PER_POOL; i++) {
@@ -2187,16 +2193,16 @@ static int ath12k_dp_cc_desc_init(struct
 			dp->spt_info->txbaddr[tx_spt_page] = &tx_descs[0];
 
 			for (j = 0; j < ATH12K_MAX_SPT_ENTRIES; j++) {
-				ppt_idx = ATH12K_NUM_RX_SPT_PAGES + tx_spt_page;
+				ppt_idx = ATH12K_TX_SPT_PAGE_OFFSET + tx_spt_page;
 				tx_descs[j].desc_id = ath12k_dp_cc_cookie_gen(ppt_idx, j);
 				tx_descs[j].pool_id = pool_id;
 				list_add_tail(&tx_descs[j].list,
 					      &dp->tx_desc_free_list[pool_id]);
 
 				/* Update descriptor VA in SPT */
-				tx_desc_addr =
-					ath12k_dp_cc_get_desc_addr_ptr(ab, ppt_idx, j);
-				*tx_desc_addr = &tx_descs[j];
+				*(struct ath12k_tx_desc_info **)
+					((u8 *)tx_spt_pages[tx_spt_page].vaddr +
+					 (j * sizeof(u64))) = &tx_descs[j];
 			}
 		}
 		spin_unlock_bh(&dp->tx_desc_lock[pool_id]);
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1589,6 +1589,7 @@ static ssize_t ath12k_debugfs_dump_soc_d
 {
 	struct ath12k_base *ab = file->private_data;
 	struct ath12k_soc_dp_stats *soc_stats = &ab->soc_stats;
+	struct ath12k *ar;
 	int len = 0, i, retval;
 	const int size = 4096;
 	static const char *rxdma_err[HAL_REO_ENTR_RING_RXDMA_ECODE_MAX] = {
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -155,7 +155,7 @@ struct ath12k_dp_rx_info;
 #define HAL_REO1_DEST_RING_CTRL_IX_1		0x00000008
 #define HAL_REO1_DEST_RING_CTRL_IX_2		0x0000000c
 #define HAL_REO1_DEST_RING_CTRL_IX_3		0x00000010
-#define HAL_REO1_QDESC_ADDR_READ		0x00000060
+#define HAL_REO1_QDESC_ADDR_READ(ab)   (ab)->hw_params->regs->hal_reo1_qdesc_addr_read
 #define HAL_REO1_QDESC_MAX_PEERID(ab)   (ab)->hw_params->regs->hal_reo1_qdesc_max_peerid
 #define HAL_REO1_SW_COOKIE_CFG0(ab)	((ab)->hw_params->regs->hal_reo1_sw_cookie_cfg0)
 #define HAL_REO1_SW_COOKIE_CFG1(ab)	((ab)->hw_params->regs->hal_reo1_sw_cookie_cfg1)
