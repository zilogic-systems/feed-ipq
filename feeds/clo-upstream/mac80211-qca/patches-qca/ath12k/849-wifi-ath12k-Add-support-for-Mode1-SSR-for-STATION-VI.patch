From cbae20c22e0f7c20c0b3af79f23a39fb1fe2b7a9 Mon Sep 17 00:00:00 2001
From: Vignesh C <quic_vignc@quicinc.com>
Date: Fri, 17 Nov 2023 16:27:15 +0530
Subject: [PATCH] wifi: ath12k: Add support for Mode1 SSR for STATION VIF

Add support for mode1 SSR Target recovery mechanism for
DUT with station VIF type enabled. Currently, mode1 SSR
can only be done on AP mode.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Signed-off-by: Vignesh C <quic_vignc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c  | 333 +++++++++++++++++-------
 drivers/net/wireless/ath/ath12k/debug.h |   4 +-
 drivers/net/wireless/ath/ath12k/mac.c   | 134 +++++-----
 drivers/net/wireless/ath/ath12k/mac.h   |   7 +-
 4 files changed, 311 insertions(+), 167 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2178,7 +2178,9 @@ static int ath12k_core_mode1_recovery_st
 	key_conf = container_of((void *)sta, struct ath12k_key_conf, sta);
 
 	if (vif->type != NL80211_IFTYPE_AP &&
-	    vif->type != NL80211_IFTYPE_AP_VLAN)
+	    vif->type != NL80211_IFTYPE_AP_VLAN &&
+	    vif->type != NL80211_IFTYPE_STATION &&
+	    vif->type != NL80211_IFTYPE_MESH_POINT)
 		return 0;
 
 	peer = ath12k_peer_find(ar->ab, arvif->vdev_id, arsta->addr);
@@ -2226,7 +2228,6 @@ key_add:
 				key_conf = kzalloc(sizeof(*key_conf), GFP_ATOMIC);
 
 				if (!key_conf) {
-					ath12k_info(NULL, "failed to alloc cache key config\n");
 					goto out;
 				}
 
@@ -2237,7 +2238,7 @@ key_add:
 				list_add_tail(&key_conf->list,
 					      &ahvif->cache[link_id].key_conf.list);
 
-				ath12k_info(NULL, "set key param cached since vif not assign to radio\n");
+				ath12k_info(ab, "set key param cached since vif not assign to radio\n");
 				goto out;
 			}
 
@@ -2278,29 +2279,114 @@ key_add:
 	}
 
 	ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-		"Recovered sta:%pM link_id:%d, num_sta:%d\n",
-		arsta->addr, arsta->link_id, arvif->ar->num_stations);
+		   "Recovered sta:%pM link_id:%d, num_sta:%d\n",
+		   arsta->addr, arsta->link_id, arvif->ar->num_stations);
 
 	ret = 0;
 out:
 	return ret;
 }
 
+static void ath12k_core_iterate_sta_list(struct ath12k *ar,
+					 struct ath12k_link_vif *arvif)
+{
+	/* unlock ar mutex here as the iterator will be called
+	 * within rcu lock.
+	 */
+	mutex_unlock(&ar->conf_mutex);
+	ieee80211_iterate_stations_atomic(ar->ah->hw,
+					  ath12k_core_mode1_recovery_sta_list,
+					  arvif);
+	mutex_lock(&ar->conf_mutex);
+}
+
+static void ath12k_core_ml_sta_add(struct ath12k *ar)
+{
+	struct ath12k_link_vif *arvif, *tmp;
+	struct ieee80211_bss_conf *info;
+	struct ath12k_vif *ahvif;
+	struct ieee80211_vif *vif;
+
+	mutex_lock(&ar->conf_mutex);
+	list_for_each_entry_safe_reverse(arvif, tmp, &ar->arvifs, list) {
+		ahvif = arvif->ahvif;
+
+		if (!ahvif)
+			continue;
+
+		vif = ahvif->vif;
+		if (ahvif->vdev_type != WMI_VDEV_TYPE_STA)
+			continue;
+
+		if (!vif->valid_links)
+			continue;
+
+		ath12k_core_iterate_sta_list(ar, arvif);
+
+		info = vif->link_conf[arvif->link_id];
+		/* Set is_up to false as we will do
+		 * recovery for that vif in the
+		 * upcoming executions
+		 */
+		arvif->is_up = false;
+		if (vif->cfg.assoc && info)
+			ath12k_bss_assoc(ar, arvif, info);
+		else
+			ath12k_bss_disassoc(ar, arvif, false);
+		ath12k_dbg(ar->ab, ATH12K_DBG_MODE1_RECOVERY,
+			   "station vif:%pM recovered\n",
+			   arvif->addr);
+	}
+	mutex_unlock(&ar->conf_mutex);
+}
+
+/* API to recovery station VIF enabled in non-asserted links */
+static void ath12k_core_mlo_recover_station(struct ath12k_hw_group *ag,
+					    struct ath12k_base *assert_ab)
+{
+	struct ath12k_base *ab;
+	struct ath12k_pdev *pdev;
+	struct ath12k *ar;
+	int i, j;
+
+	for (i = 0; i < ag->num_chip; i++) {
+		ab = ag->ab[i];
+
+		if (ab == assert_ab)
+			continue;
+
+		for (j = 0; j < ab->num_radios; j++) {
+			pdev = &ab->pdevs[j];
+			ar = pdev->ar;
+
+			if (!ar)
+				continue;
+
+			if (list_empty(&ar->arvifs))
+				continue;
+
+			/* Re-add all MLD station VIF which are
+			 * in non-asserted link
+			 */
+			ath12k_core_ml_sta_add(ar);
+		}
+	}
+}
+
 static int ath12k_mlo_recovery_link_vif_reconfig(struct ath12k *ar,
-					    struct ath12k_vif *ahvif,
-					    struct ath12k_link_vif *arvif,
-					    struct ieee80211_vif *vif,
-					    struct ieee80211_bss_conf *link_conf)
+						 struct ath12k_vif *ahvif,
+						 struct ath12k_link_vif *arvif,
+						 struct ieee80211_vif *vif,
+						 struct ieee80211_bss_conf *link_conf)
 {
 	int i;
 	int link_id = arvif->link_id;
 	struct ath12k_hw *ah = ar->ah;
 	struct ieee80211_tx_queue_params params;
 	struct wmi_wmm_params_arg *p = NULL;
+	struct ieee80211_bss_conf *info;
 	u64 changed = 0;
 
-	mutex_lock(&ah->conf_mutex);
-
 	switch (vif->type) {
 	case NL80211_IFTYPE_AP_VLAN:
 	case NL80211_IFTYPE_MONITOR:
@@ -2317,7 +2403,7 @@ static int ath12k_mlo_recovery_link_vif_
 
 			if ((vif->active_links &&
 			    !(vif->active_links & BIT(link_id))) ||
-			    (link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
+			    link_id >= IEEE80211_MLD_MAX_NUM_LINKS)
 				break;
 
 			switch (i) {
@@ -2347,6 +2433,8 @@ static int ath12k_mlo_recovery_link_vif_
 		break;
 	}
 
+	mutex_lock(&ah->conf_mutex);
+
 	/* common change flags for all interface types */
 	changed = BSS_CHANGED_ERP_CTS_PROT |
 		  BSS_CHANGED_ERP_PREAMBLE |
@@ -2357,7 +2445,6 @@ static int ath12k_mlo_recovery_link_vif_
 		  BSS_CHANGED_BSSID |
 		  BSS_CHANGED_CQM |
 		  BSS_CHANGED_QOS |
-		  BSS_CHANGED_IDLE |
 		  BSS_CHANGED_TXPOWER |
 		  BSS_CHANGED_MCAST_RATE;
 
@@ -2371,29 +2458,46 @@ static int ath12k_mlo_recovery_link_vif_
 		return 0;
 #endif
 	case NL80211_IFTYPE_STATION:
-		changed |= BSS_CHANGED_ASSOC |
-			   BSS_CHANGED_ARP_FILTER |
-			   BSS_CHANGED_PS;
-
-		/* Assume re-send beacon info report to the driver */
-		changed |= BSS_CHANGED_BEACON_INFO;
-
-		if (link_conf->max_idle_period ||
-			link_conf->protected_keep_alive)
-			changed |= BSS_CHANGED_KEEP_ALIVE;
-
-		if (!arvif->is_created) {
-			ath12k_info(NULL,
-				    "bss info parameter changes %llx cached to apply after vdev create on channel assign\n",
-				    changed);
-			ahvif->cache[link_id].bss_conf_changed |= changed;
+		if (!vif->valid_links) {
+			/* Set this only for legacy stations */
+			changed |= BSS_CHANGED_ASSOC |
+				   BSS_CHANGED_ARP_FILTER |
+				   BSS_CHANGED_PS;
+
+			/* Assume re-send beacon info report to the driver */
+			changed |= BSS_CHANGED_BEACON_INFO;
+
+			if (link_conf->max_idle_period ||
+				link_conf->protected_keep_alive)
+				changed |= BSS_CHANGED_KEEP_ALIVE;
 
-			mutex_unlock(&ah->conf_mutex);
-			return 0;
+			if (!arvif->is_created) {
+				ath12k_info(NULL,
+					    "bss info parameter changes %llx cached to apply after vdev create on channel assign\n",
+					    changed);
+				ahvif->cache[link_id].bss_conf_changed |= changed;
+
+				mutex_unlock(&ah->conf_mutex);
+				return 0;
+			}
 		}
 
 		mutex_lock(&ar->conf_mutex);
+		/* Set is_up to false as we will do
+		 * recovery for that vif in the
+		 * upcoming executions
+		 */
+		arvif->is_up = false;
 		ath12k_mac_bss_info_changed(ar, arvif, link_conf, changed);
+		if (vif->valid_links) {
+			info = vif->link_conf[link_id];
+			if (vif->cfg.assoc) {
+				if (info)
+					ath12k_bss_assoc(ar, arvif, info);
+			} else {
+				ath12k_bss_disassoc(ar, arvif, false);
+			}
+		}
 		mutex_unlock(&ar->conf_mutex);
 		break;
 	case NL80211_IFTYPE_OCB:
@@ -2423,7 +2527,7 @@ static int ath12k_mlo_recovery_link_vif_
 
 			mutex_lock(&ar->conf_mutex);
 			ath12k_mac_bss_info_changed(ar, arvif, link_conf,
-					changed &~ BSS_CHANGED_IDLE);
+					changed & ~BSS_CHANGED_IDLE);
 			mutex_unlock(&ar->conf_mutex);
 
 		}
@@ -2444,7 +2548,8 @@ static int ath12k_mlo_recovery_link_vif_
 	}
 
 	mutex_unlock(&ah->conf_mutex);
-	ath12k_dbg(ar->ab, ATH12K_DBG_MODE1_RECOVERY, "Reconfig link vif done:type:%d\n", vif->type);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MODE1_RECOVERY,
+		   "Reconfig link vif done:type:%d\n", vif->type);
 
 	return 0;
 }
@@ -2464,22 +2569,22 @@ static int ath12k_mlo_core_recovery_reco
 	u8 link_id = link_conf->link_id;
 
 	ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-		"Recovering: link_id:%d [vif->link_id:%d] type:%d\n",
-		link_id, arvif->link_id, vif->type);
+		   "Recovering: link_id:%d addr %pM type:%d\n",
+		   link_id, arvif->addr, vif->type);
 
 	mutex_lock(&ah->conf_mutex);
 
 	if (vif->type == NL80211_IFTYPE_AP &&
 	    ar->num_peers > (ar->max_num_peers - 1)) {
 		ath12k_err(ab, "Error in peers:%d\n",
-				ar->num_peers);
+			   ar->num_peers);
 		goto exit;
 	}
 
 	if (ar->num_created_vdevs > (TARGET_NUM_VDEVS - 1)) {
 		ath12k_err(ab, "failed to create vdev, reached max vdev limit %d[%d]\n",
-				ar->num_created_vdevs,
-				TARGET_NUM_VDEVS);
+			   ar->num_created_vdevs,
+			   TARGET_NUM_VDEVS);
 		goto exit;
 	}
 
@@ -2490,22 +2595,22 @@ static int ath12k_mlo_core_recovery_reco
 		ath12k_mac_vif_cache_flush(ar, vif, arvif->link_id);
 
 	if (ar->supports_6ghz && ctx->def.chan->band == NL80211_BAND_6GHZ &&
-            (ahvif->vdev_type == WMI_VDEV_TYPE_STA ||
-             ahvif->vdev_type == WMI_VDEV_TYPE_AP)) {
-                power_type = link_conf->power_type;
-                ath12k_dbg(ab, ATH12K_DBG_MAC, "mac chanctx power type %d\n",
-                           power_type);
-                if (power_type == IEEE80211_REG_UNSET_AP)
-                        power_type = IEEE80211_REG_LPI_AP;
+	    (ahvif->vdev_type == WMI_VDEV_TYPE_STA ||
+	    ahvif->vdev_type == WMI_VDEV_TYPE_AP)) {
+		power_type = link_conf->power_type;
+		ath12k_dbg(ab, ATH12K_DBG_MAC, "mac chanctx power type %d\n",
+			   power_type);
+		if (power_type == IEEE80211_REG_UNSET_AP)
+			power_type = IEEE80211_REG_LPI_AP;
 
 		/* TODO: Transmit Power Envelope specification for 320 is not
-                 * available yet. Need to add TPE 320 support when spec is ready
-                 */
-                if (ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
+		 * available yet. Need to add TPE 320 support when spec is ready
+		 */
+		if (ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
 		    ctx->def.width != NL80211_CHAN_WIDTH_320) {
-                        ath12k_mac_parse_tx_pwr_env(ar, arvif, ctx);
+			ath12k_mac_parse_tx_pwr_env(ar, arvif, ctx);
 		}
-        }
+	}
 
 	/* for some targets bss peer must be created before vdev_start */
 	if (ab->hw_params->vdev_start_delay &&
@@ -2567,8 +2672,59 @@ exit:
 	return ret;
 }
 
+static void ath12k_core_peer_disassoc(struct ath12k_hw_group *ag,
+				      struct ath12k_base *assert_ab)
+{
+	struct ath12k_base *ab;
+	struct ath12k_peer *peer, *tmp;
+	struct ath12k_sta *ahsta;
+	struct ieee80211_sta *sta;
+	int i;
+
+	for (i = 0; i < ag->num_chip; i++) {
+		ab = ag->ab[i];
+
+		list_for_each_entry_safe(peer, tmp, &ab->peers, list) {
+			if (!peer->sta || !peer->vif)
+				continue;
+
+			/* Allow sending disassoc to legacy peer
+			 * only for asserted radio
+			 */
+			if (!peer->mlo && ab != assert_ab)
+				continue;
+
+			sta = peer->sta;
+			ahsta = (struct ath12k_sta *)sta->drv_priv;
+
+			/* Send low ack to disassoc the MLD station
+			 * Need to check on the sequence as FW has
+			 * discarded the management packet at this
+			 * sequence.
+			 */
+			if (!ahsta->low_ack_sent) {
+				ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
+					   "sending low ack for/disassoc:%pM\n",
+					   sta->addr);
+				/* set num of packets to maximum so
+				 * that we distinguish in the hostapd
+				 * to send disassoc irrespective of
+				 * hostapd conf
+				 */
+				ieee80211_report_low_ack(sta, 0xFFFF);
+				/* Using this flag to avoid certain
+				 * known warnings which will be
+				 * triggerred when umac reset is
+				 * happening
+				 */
+				ahsta->low_ack_sent = true;
+			}
+		}
+	}
+}
+
 /* Wrapper function for recovery after crash */
-int ath12k_mode1_recovery_reconfig(struct ath12k_base *ab, const char *fun)
+int ath12k_mode1_recovery_reconfig(struct ath12k_base *ab)
 {
 	struct ath12k *ar = NULL;
 	struct ath12k_pdev *pdev;
@@ -2580,7 +2736,6 @@ int ath12k_mode1_recovery_reconfig(struc
 	struct ath12k_hw *ah;
 	struct ieee80211_key_conf *key;
 	int i, j, key_idx;
-	u32 changed = 0;
 	int ret = -EINVAL;
 	bool started = false;
 
@@ -2645,15 +2800,11 @@ int ath12k_mode1_recovery_reconfig(struc
 			spin_unlock_bh(&ar->data_lock);
 
 			/* hw_config */
-			changed &= ~(IEEE80211_CONF_CHANGE_CHANNEL |
-				IEEE80211_CONF_CHANGE_POWER |
-				IEEE80211_CONF_CHANGE_SMPS);
-
 			if (ar->ah->hw->conf.flags & IEEE80211_CONF_MONITOR) {
 				set_bit(MONITOR_CONF_ENABLED, &ar->monitor_flags);
 
 				if (test_bit(MONITOR_VDEV_CREATED,
-				    &ar->monitor_flags)) {
+					     &ar->monitor_flags)) {
 					ret = ath12k_mac_monitor_vdev_create(ar);
 					if (!ret && ath12k_mac_monitor_start(ar)) {
 						ath12k_err(ab, "unable to start monitor vdev\n");
@@ -2665,7 +2816,7 @@ int ath12k_mode1_recovery_reconfig(struc
 			} else {
 				clear_bit(MONITOR_CONF_ENABLED, &ar->monitor_flags);
 				if (test_bit(MONITOR_VDEV_CREATED,
-					      &ar->monitor_flags)) {
+					     &ar->monitor_flags)) {
 					ret = ath12k_mac_monitor_stop(ar);
 					if (!ret && ath12k_mac_monitor_vdev_delete(ar))
 						ath12k_err(ab, "monitor vdev delete failed\n");
@@ -2714,15 +2865,22 @@ int ath12k_mode1_recovery_reconfig(struc
 			ret = ath12k_mlo_core_recovery_reconfig_link_bss(ar, link, ahvif, arvif);
 			if (ret) {
 				ath12k_err(ab, "ERROR in reconfig link:%d\n",
-						ret);
+					   ret);
 				return ret;
 			}
 			mutex_lock(&ar->conf_mutex);
 			ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-					"vdev_created getting incremented:%d\n",
-					ahvif->num_vdev_created);
+				   "vdev_created getting incremented:%d\n",
+				   ahvif->num_vdev_created);
 		}
 		mutex_unlock(&ar->conf_mutex);
+		ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY, "assign chanctx is completed\n");
+	}
+
+	for (i = 0; i < ag->num_chip; i++) {
+		partner_ab = ag->ab[i];
+
+		clear_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &partner_ab->dev_flags);
 	}
 
 	/* reconfig_link_bss */
@@ -2756,9 +2914,9 @@ int ath12k_mode1_recovery_reconfig(struc
 			 */
 			mutex_unlock(&ar->conf_mutex);
 			ret = ath12k_mlo_recovery_link_vif_reconfig(ar, ahvif,
-				       arvif,
-				       arvif->ahvif->vif,
-				       link);
+								    arvif,
+								    arvif->ahvif->vif,
+								    link);
 			if (ret) {
 				ath12k_err(ab, "Failed to update reconfig_bss\n");
 				return ret;
@@ -2768,13 +2926,8 @@ int ath12k_mode1_recovery_reconfig(struc
 		mutex_unlock(&ar->conf_mutex);
 	}
 
-	for (i = 0; i < ag->num_chip; i++) {
-		partner_ab = ag->ab[i];
-		if (ab == partner_ab)
-			continue;
-
-		clear_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &partner_ab->dev_flags);
-	}
+	/* recover station VIF enabled in non-asserted links */
+	ath12k_core_mlo_recover_station(ag, ab);
 
 	/* sta state part */
 	for (i = 0; i < ag->num_chip; i++) {
@@ -2802,11 +2955,10 @@ int ath12k_mode1_recovery_reconfig(struc
 				/* unlock ar mutex here as the iterator will be called
 				 * within rcu lock.
 				 */
-				mutex_unlock(&ar->conf_mutex);
-				ieee80211_iterate_stations_atomic(ar->ah->hw,
-								  ath12k_core_mode1_recovery_sta_list,
-								  arvif);
-				mutex_lock(&ar->conf_mutex);
+				if (ahvif->vdev_type != WMI_VDEV_TYPE_STA) {
+					ath12k_core_iterate_sta_list(ar, arvif);
+				}
+
 				for (key_idx = 0; key_idx < WMI_MAX_KEY_INDEX; key_idx++) {
 					key = arvif->keys[key_idx];
 					if (key) {
@@ -2841,10 +2993,10 @@ int ath12k_mode1_recovery_reconfig(struc
 	}
 
 	/* Send disassoc to MLD STA */
-	ath12k_mac_partner_peer_cleanup(ab, true);
+	ath12k_core_peer_disassoc(ag, ab);
 	ab->recovery_start = false;
 	ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
-	ab->fw_recovery_support = ATH12K_MLO_RECOVERY_MODE0;
+	ath12k_info(ab, "Mode1 recovery completed\n");
 	return ret;
 }
 
@@ -2905,9 +3057,10 @@ static void ath12k_core_restart(struct w
 static void ath12k_core_mode1_recovery_work(struct work_struct *work)
 {
 	struct ath12k_base *ab = container_of(work, struct ath12k_base, recovery_work);
+
 	ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-			"queued recovery work\n");
-	ath12k_mode1_recovery_reconfig(ab, __func__);
+		   "queued recovery work\n");
+	ath12k_mode1_recovery_reconfig(ab);
 }
 
 static int ath12k_core_rproc_stop(struct rproc *rproc)
@@ -3210,16 +3363,24 @@ static void ath12k_core_reset(struct wor
 	}
 #endif
 
+	/* Initializing this flag to false, as this flag will be only
+	 * set true on Mode1 SSR.
+	 */
+	ab->recovery_start = false;
+
 	if (ab->recovery_mode_address) {
 		switch (*ab->recovery_mode_address) {
-			case ATH12K_MLO_RECOVERY_MODE1:
-				ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE1;
-				break;
-			case ATH12K_MLO_RECOVERY_MODE0:
-				fallthrough;
-			default:
-				ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
+		
+		case ATH12K_MLO_RECOVERY_MODE1:
+			ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE1;
+			break;
+		case ATH12K_MLO_RECOVERY_MODE0:
+			fallthrough;
+		default:
+			ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 		}
+		ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
+			   "mode:%d\n", ag->recovery_mode);
 	} else {
 		ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 	}
@@ -3315,7 +3476,7 @@ static void ath12k_core_reset(struct wor
 				 * and set flag to send teardown later
 				 */
 				ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-						"setting teardown to true\n");
+					   "setting teardown to true\n");
 				set_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &partner_ab->dev_flags);
 				teardown = true;
 				continue;
@@ -3332,9 +3493,10 @@ static void ath12k_core_reset(struct wor
 
 	if (teardown) {
 		if (ath12k_core_trigger_umac_reset(ab) ||
-		    ath12k_mac_partner_peer_cleanup(ab, false)) {
+		    ath12k_mac_partner_peer_cleanup(ab)) {
 			/* Fallback to Mode0 if umac reset/peer_cleanup is
-			 * failed */
+			 * failed
+			 */
 			ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 			ath12k_info(ab, "Recovery is falling back to Mode0\n");
 		} else {
--- a/drivers/net/wireless/ath/ath12k/debug.h
+++ b/drivers/net/wireless/ath/ath12k/debug.h
@@ -33,8 +33,8 @@ enum ath12k_debug_mask {
 	/* keep last*/
 	ATH12K_DBG_SAWF		= 0x00040000,
 	ATH12K_DBG_PPE          = 0x00080000,
-	ATH12K_DBG_DP_UMAC_RESET= 0x00100000,
-	ATH12K_DBG_MODE1_RECOVERY= 0x00200000,
+	ATH12K_DBG_DP_UMAC_RESET = 0x00100000,
+	ATH12K_DBG_MODE1_RECOVERY = 0x00200000,
 	ATH12K_DBG_ANY		= 0xffffffff,
 };
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1177,7 +1177,7 @@ static int ath12k_mac_set_kickout(struct
 }
 
 static void ath12k_mac_dec_num_stations(struct ath12k_link_vif *arvif,
-				        struct ath12k_link_sta *arsta)
+					struct ath12k_link_sta *arsta)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k *ar = arvif->ar;
@@ -1197,7 +1197,7 @@ static void ath12k_mac_dec_num_stations(
 	ar->num_stations--;
 }
 
-int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab, bool disassoc)
+int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab)
 {
 
 	struct ath12k_base *partner_ab;
@@ -1229,63 +1229,37 @@ int ath12k_mac_partner_peer_cleanup(stru
 			/* get arsta */
 			sta = peer->sta;
 			ahsta = ath12k_sta_to_ahsta(sta);
+			arsta = ahsta->link[link_id];
 
-			if (!disassoc) {
-				arsta = ahsta->link[link_id];
-
-				/* get arvif */
-				vif = peer->vif;
-				ahvif = (struct ath12k_vif *)vif->drv_priv;
-				arvif = ahvif->link[link_id];
-
-				ar = arvif->ar;
-				if (!ar)
-					continue;
+			/* get arvif */
+			vif = peer->vif;
+			ahvif = (struct ath12k_vif *)vif->drv_priv;
+			arvif = ahvif->link[link_id];
 
-				mutex_lock(&ar->conf_mutex);
-				ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr);
-				if (ret) {
-					mutex_unlock(&ar->conf_mutex);
-					ath12k_warn(ar->ab,
-						    "failed to delete peer vdev_id %d addr %pM ret %d\n",
-						    arvif->vdev_id, arsta->addr, ret);
-					continue;
-				}
-				ret = ath12k_wait_for_peer_delete_done(ar, arvif->vdev_id, arsta->addr);
-				if (ret) {
-					mutex_unlock(&ar->conf_mutex);
-					continue;
-				}
+			ar = arvif->ar;
+			if (!ar)
+				continue;
 
-				ar->num_peers--;
-				arvif->num_stations--;
-				ath12k_mac_dec_num_stations(arvif, arsta);
+			mutex_lock(&ar->conf_mutex);
+			ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr);
+			if (ret) {
 				mutex_unlock(&ar->conf_mutex);
-				cancel_work_sync(&arsta->update_wk);
-			} else {
-				/* Send low ack to disassoc the MLD station
-				 * Need to check on the sequence as FW has
-				 * discarded the management packet at this
-				 * sequence.
-				 */
-				if (sta->mlo && !ahsta->low_ack_sent) {
-					ath12k_dbg(ar->ab, ATH12K_DBG_MODE1_RECOVERY,
-						   "sending low ack for/disassoc:%pM\n",
-						   sta->addr);
-					/* set num of packets to maximum so
-					 * that we distinguish in the hostapd
-					 * to send disassoc irrespective of
-					 * hostapd conf
-					 */
-					ieee80211_report_low_ack(sta, 0xFFFF);
-					/* Using this flag to avoid certain
-					 * known warnings which will be
-					 * triggerred when umac reset is
-					 * happening
-					 */
-					ahsta->low_ack_sent = true;
-				}
+				ath12k_warn(ar->ab,
+					    "failed to delete peer vdev_id %d addr %pM ret %d\n",
+					    arvif->vdev_id, arsta->addr, ret);
+				continue;
+			}
+			ret = ath12k_wait_for_peer_delete_done(ar, arvif->vdev_id, arsta->addr);
+			if (ret) {
+				mutex_unlock(&ar->conf_mutex);
+				continue;
 			}
+
+			ar->num_peers--;
+			arvif->num_stations--;
+			ath12k_mac_dec_num_stations(arvif, arsta);
+			mutex_unlock(&ar->conf_mutex);
+			cancel_work_sync(&arsta->update_wk);
 		}
 	}
 	return ret;
@@ -4052,9 +4026,9 @@ static bool ath12k_mac_set_eht_txbf_conf
 	return true;
 }
 
-static void ath12k_bss_assoc(struct ath12k *ar,
-			     struct ath12k_link_vif *arvif,
-			     struct ieee80211_bss_conf *bss_conf)
+void ath12k_bss_assoc(struct ath12k *ar,
+		      struct ath12k_link_vif *arvif,
+		      struct ieee80211_bss_conf *bss_conf)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_vif *vif = ahvif->vif;
@@ -4152,6 +4126,13 @@ static void ath12k_bss_assoc(struct ath1
 		params.tx_bssid = bss_conf->transmitter_bssid;
 	}
 
+	if (ar->ab->ag->recovery_mode == ATH12K_MLO_RECOVERY_MODE1 &&
+	    !ar->ab->is_reset)
+		/* Skip sending vdev up for non-asserted links while
+		 * recovering station vif type
+		 */
+		goto skip_vdev_up;
+
 	ret = ath12k_wmi_vdev_up(ar, &params);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to set vdev %d up: %d\n",
@@ -4159,6 +4140,7 @@ static void ath12k_bss_assoc(struct ath1
 		return;
 	}
 
+skip_vdev_up:
 	arvif->is_up = true;
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
@@ -4190,9 +4172,9 @@ static void ath12k_bss_assoc(struct ath1
 			    arvif->vdev_id, ret);
 }
 
-static void ath12k_bss_disassoc(struct ath12k *ar,
-				struct ath12k_link_vif *arvif,
-				bool do_vdev_down)
+void ath12k_bss_disassoc(struct ath12k *ar,
+			 struct ath12k_link_vif *arvif,
+			 bool do_vdev_down)
 {
 	struct ath12k_vif *tx_ahvif;
 	struct ath12k_link_vif *tx_arvif;
@@ -5819,7 +5801,7 @@ int ath12k_mac_set_key(struct ath12k *ar
 	}
 
 	if (sta && sta->mlo &&
-	   (test_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &ar->ab->dev_flags)))
+	    (test_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &ar->ab->dev_flags)))
 		return 0;
 
 	lockdep_assert_held(&ar->ah->conf_mutex);
@@ -6021,7 +6003,7 @@ static int ath12k_mac_op_set_key(struct
 
 		if (test_bit(ATH12K_FLAG_CRASH_FLUSH, &arvif->ar->ab->dev_flags)) {
 			ath12k_dbg(arvif->ar->ab, ATH12K_DBG_MODE1_RECOVERY,
-					"cmd:%d called for crash flush set ab\n", cmd);
+				   "cmd:%d called for crash flush set ab\n", cmd);
 			mutex_unlock(&ah->conf_mutex);
 			return 0;
 		}
@@ -7003,7 +6985,8 @@ static int ath12k_mac_inc_num_stations(s
 
 	ar->num_stations++;
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_MODE1_RECOVERY,"num_stat incremented:%d\n", ar->num_stations);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MODE1_RECOVERY,
+		   "num_stat incremented:%d\n", ar->num_stations);
 	return 0;
 }
 
@@ -7432,7 +7415,7 @@ static int ath12k_mac_handle_link_sta_st
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
 	if (sta->mlo &&
-	   (test_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &ar->ab->dev_flags)))
+	    (test_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &ar->ab->dev_flags)))
 		/* Shouldn't allow MLO STA assoc until UMAC_RECOVERY bit is cleared */
 		return 0;
 
@@ -7649,8 +7632,10 @@ int ath12k_mac_update_sta_state(struct i
 
 			if (!arvif || !arvif->ar ||
 			    (test_bit(ATH12K_FLAG_UMAC_RECOVERY_START,
-				      &arvif->ar->ab->dev_flags)))
+				      &arvif->ar->ab->dev_flags))){
+				ret = -EINVAL;
 				goto exit;
+			}
 		}
 
 		ret = ath12k_ml_peer_create(ah, sta);
@@ -9846,9 +9831,9 @@ static int __ath12k_mac_mlo_teardown(str
 	struct ath12k_base *ab = ar->ab;
 	int ret;
 
-       // If we receive teardown during ab is down, then exit silently
-       if (test_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags))
-	       return 0;
+	// If we receive teardown during ab is down, then exit silently
+	if (test_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags))
+		return 0;
 
 	ret = ath12k_wmi_mlo_teardown(ar, umac_reset);
 	if (ret) {
@@ -11681,10 +11666,9 @@ ath12k_mac_vdev_config_after_start(struc
 	return ret;
 }
 
-static int
-ath12k_mac_vdev_start_restart(struct ath12k_link_vif *arvif,
-			      const struct cfg80211_chan_def *chandef,
-			      bool restart, bool radar_enabled)
+static int ath12k_mac_vdev_start_restart(struct ath12k_link_vif *arvif,
+					 const struct cfg80211_chan_def *chandef,
+					 bool restart, bool radar_enabled)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k *ar = arvif->ar;
@@ -11783,8 +11767,8 @@ ath12k_mac_vdev_start_restart(struct ath
 }
 
 int ath12k_mac_vdev_start(struct ath12k_link_vif *arvif,
-				 const struct cfg80211_chan_def *chandef,
-				 bool radar_enabled)
+			  const struct cfg80211_chan_def *chandef,
+			  bool radar_enabled)
 {
 	return ath12k_mac_vdev_start_restart(arvif, chandef, false,
 			radar_enabled);
@@ -14808,8 +14792,8 @@ static void ath12k_mac_reconfig_completi
 
 void
 ath12k_mac_reconfig_complete(struct ieee80211_hw *hw,
-                               enum ieee80211_reconfig_type reconfig_type,
-                               struct ath12k *asserted_radio)
+			     enum ieee80211_reconfig_type reconfig_type,
+			     struct ath12k *asserted_radio)
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
@@ -14847,7 +14831,7 @@ out:
 }
 
 static void ath12k_mac_op_reconfig_complete(struct ieee80211_hw *hw,
-				 enum ieee80211_reconfig_type reconfig_type)
+					    enum ieee80211_reconfig_type reconfig_type)
 {
 	ath12k_mac_reconfig_complete(hw, reconfig_type, NULL);
 }
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -210,5 +210,10 @@ int ath12k_set_vdev_param_to_all_vifs(st
 void ath12k_mac_reconfig_complete(struct ieee80211_hw *hw,
 				  enum ieee80211_reconfig_type reconfig_type,
 				  struct ath12k *asserted_radio);
-int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab, bool disassoc);
+int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab);
+void ath12k_bss_assoc(struct ath12k *ar,
+		      struct ath12k_link_vif *arvif,
+		      struct ieee80211_bss_conf *bss_conf);
+void ath12k_bss_disassoc(struct ath12k *ar, struct ath12k_link_vif *arvif,
+			 bool do_vdev_down);
 #endif
