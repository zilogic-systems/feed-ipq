From db5a8cd8971ba28d63ff426555f1aa44a9f3412e Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Sun, 22 Oct 2023 22:13:52 +0530
Subject: [PATCH 1/6] wifi: ath12k: fix reap procedure of Rx error process

If the Rxdma buffer doesn't reap as expected, then it leads to backpressure
from HW. Currently, the msdu type buffer error handler doesn't reap the
buffer as expected in the ath12k_dp_rx_process_err(). Which may lead
to the backpressure scenario due to unavailability of rx buffer.
So fix this issue by properly reap the rxdma buffer for the msdu type
buffer error.

Fixes: I1dc5e4373155 ("ath12k: add handling for MSDU buffer type")

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4385,6 +4385,41 @@ exit:
 	return 0;
 }
 
+static int ath12k_dp_h_msdu_buffer_type(struct ath12k_base *ab,
+					struct hal_reo_dest_ring *desc)
+{
+	struct ath12k_rx_desc_info *desc_info;
+	struct sk_buff *msdu;
+	struct ath12k_skb_rxcb *rxcb;
+	u64 desc_va;
+
+	ab->soc_stats.reo_excep_msdu_buf_type++;
+
+	desc_va = ((u64)desc->buf_va_hi << 32 | desc->buf_va_lo);
+	desc_info = (struct ath12k_rx_desc_info *)(uintptr_t)desc_va;
+	if (!desc_info) {
+		ath12k_warn(ab, " rx exception, hw cookie conversion failed");
+		return -EINVAL;
+	}
+
+	if (desc_info->magic != ATH12K_DP_RX_DESC_MAGIC) {
+		ath12k_warn(ab, " rx exception, magic check failed");
+		return -EINVAL;
+	}
+
+	msdu = desc_info->skb;
+	desc_info->skb = NULL;
+	spin_lock_bh(&ab->dp.rx_desc_lock);
+	list_move_tail(&desc_info->list, &ab->dp.rx_desc_free_list);
+	spin_unlock_bh(&ab->dp.rx_desc_lock);
+	rxcb = ATH12K_SKB_RXCB(msdu);
+	dma_unmap_single(ab->dev, rxcb->paddr, msdu->len + skb_tailroom(msdu),
+			 DMA_FROM_DEVICE);
+	dev_kfree_skb_any(msdu);
+
+	return 0;
+}
+
 int ath12k_dp_rx_process_err(struct ath12k_base *ab, struct napi_struct *napi,
 			     int budget)
 {
@@ -4457,8 +4492,10 @@ int ath12k_dp_rx_process_err(struct ath1
 		 */
 		if (u32_get_bits(reo_desc->info0, HAL_REO_DEST_RING_INFO0_BUFFER_TYPE) ==
 			HAL_REO_DEST_RING_BUFFER_TYPE_MSDU) {
-				ath12k_dp_h_msdu_buffer_type(src_ab, reo_desc);
-				continue;
+			if (!ath12k_dp_h_msdu_buffer_type(src_ab, reo_desc))
+				tot_n_bufs_reaped++;
+
+			goto end_loop;
 		}
 
 		dp = &src_ab->dp;
@@ -4503,6 +4540,7 @@ int ath12k_dp_rx_process_err(struct ath1
 				tot_n_bufs_reaped++;
 		}
 
+end_loop:
 		if (tot_n_bufs_reaped >= quota) {
 			tot_n_bufs_reaped = quota;
 			goto exit;
@@ -5578,31 +5616,3 @@ int ath12k_dp_rx_pktlog_stop(struct ath1
 	return 0;
 }
 
-void ath12k_dp_h_msdu_buffer_type(struct ath12k_base *ab, u32 *rx_desc)
-{
-	struct hal_reo_dest_ring *desc = (struct hal_reo_dest_ring *)rx_desc;
-	struct ath12k_rx_desc_info *desc_info;
-	struct sk_buff *msdu;
-	u64 desc_va;
-
-	desc_va = ((u64)desc->buf_va_hi << 32 | desc->buf_va_lo);
-	desc_info = (struct ath12k_rx_desc_info *)((unsigned long)desc_va);
-	if (!desc_info) {
-		ath12k_warn(ab, " rx exception, hw cookie conversion failed");
-		goto skip_skb_free;
-	}
-
-	if (desc_info->magic != ATH12K_DP_RX_DESC_MAGIC) {\
-		ath12k_warn(ab, " rx exception, magic check failed");
-		goto skip_skb_free;
-	}
-
-	msdu = desc_info->skb;
-	desc_info->skb = NULL;
-	spin_lock_bh(&ab->dp.rx_desc_lock);
-	list_move_tail(&desc_info->list, &ab->dp.rx_desc_free_list);
-	spin_unlock_bh(&ab->dp.rx_desc_lock);
-	dev_kfree_skb_any(msdu);
-skip_skb_free:
-	ab->soc_stats.reo_excep_msdu_buf_type++;
-}
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -238,5 +238,4 @@ void ath12k_dp_peer_reo_tid_setup(struct
 void ath12k_dp_tid_setup(void *data, struct ieee80211_sta *sta);
 void ath12k_dp_reset_rx_reo_tid_q(void *vaddr, u32 ba_window_size,
 				  u8 tid);
-void ath12k_dp_h_msdu_buffer_type(struct ath12k_base *ab, u32 *rx_desc);
 #endif /* ATH12K_DP_RX_H */
