From 94e27bf2bb4e2638463d75572684ae8ee841a45d Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Sun, 22 Oct 2023 22:39:58 +0530
Subject: [PATCH 2/6] wifi: ath12k: fix partner reap in ath12k_dp_rx_process_err() handler

Partner chip buffers are not reaped in the exception ring handler.
Always primary UMAC buffers get reaped with miscalculated count, Which
leads to backpressure in the partner chip due to unavailable buffer.
So fix this issue by reap the partner chip buffer properly.

Fixes: I75e4afda12f8d8c ("wifi: ath12k: Drop dynamic fragmentation msdu in Multi-link")

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4439,7 +4439,8 @@ int ath12k_dp_rx_process_err(struct ath1
 	dma_addr_t paddr;
 	bool is_frag, drop;
 	char buf[64] = {0};
-	u8 hw_link_id;
+	u8 hw_link_id, chip_id;
+	int num_buffs_reaped[ATH12K_MAX_SOCS] = { };
 
 	tot_n_bufs_reaped = 0;
 	quota = budget;
@@ -4485,6 +4486,7 @@ int ath12k_dp_rx_process_err(struct ath1
                 }
 
 		src_ab = ar->ab;
+		chip_id = src_ab->chip_id;
 
 		/* Below case is added to handle data packet from un-associated clients.
 		 * As it is expected that AST lookup will fail for
@@ -4492,8 +4494,10 @@ int ath12k_dp_rx_process_err(struct ath1
 		 */
 		if (u32_get_bits(reo_desc->info0, HAL_REO_DEST_RING_INFO0_BUFFER_TYPE) ==
 			HAL_REO_DEST_RING_BUFFER_TYPE_MSDU) {
-			if (!ath12k_dp_h_msdu_buffer_type(src_ab, reo_desc))
+			if (!ath12k_dp_h_msdu_buffer_type(src_ab, reo_desc)) {
+				num_buffs_reaped[chip_id]++;
 				tot_n_bufs_reaped++;
+			}
 
 			goto end_loop;
 		}
@@ -4536,8 +4540,10 @@ int ath12k_dp_rx_process_err(struct ath1
 
  		for (i = 0; i < num_msdus; i++) {
 			if (!ath12k_dp_process_rx_err_buf(ar, reo_desc, drop,
-							  msdu_cookies[i]))
+							  msdu_cookies[i])) {
+				num_buffs_reaped[chip_id]++;
 				tot_n_bufs_reaped++;
+			}
 		}
 
 end_loop:
@@ -4554,11 +4560,19 @@ exit:
 
 	spin_unlock_bh(&srng->lock);
 
-	dp = &ab->dp;
-	rx_ring = &dp->rx_refill_buf_ring;
+	for (i = 0; i < ab->ag->num_chip; i++) {
+		if (!num_buffs_reaped[i])
+			continue;
+
+		src_ab = ab->ag->ab[i];
+		if (!src_ab)
+			continue;
+
+		rx_ring = &src_ab->dp.rx_refill_buf_ring;
 
-	ath12k_dp_rx_bufs_replenish(ab, rx_ring, tot_n_bufs_reaped,
-				    ab->hw_params->hal_params->rx_buf_rbm, true);
+		ath12k_dp_rx_bufs_replenish(src_ab, rx_ring, num_buffs_reaped[i],
+					    src_ab->hw_params->hal_params->rx_buf_rbm, true);
+	}
 
 	return tot_n_bufs_reaped;
 }
