From f255dbe6d0cbee9bc455c08731d502471ce944ed Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Sun, 22 Oct 2023 19:58:45 +0530
Subject: [PATCH 4/6] wifi: ath12k: avoid explicit HW conversion argument

Currently rxdma replenish require HW conversion argument which is
unnecessary argument since ath12k driver configures the rxdma only in
HW conversion. To optimize the rx data path per packet, avoid the
explicit unneessary argument and condition check in the rx replenish.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c    |  6 +-
 drivers/net/wireless/ath/ath12k/dp_rx.c | 82 ++++++++++---------------
 drivers/net/wireless/ath/ath12k/dp_rx.h |  3 +-
 3 files changed, 34 insertions(+), 57 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1414,8 +1414,7 @@ int ath12k_dp_service_srng(struct ath12k
 		struct dp_rxdma_ring *rx_ring = &dp->rx_refill_buf_ring;
 
 		ath12k_dp_rx_bufs_replenish(ab, rx_ring, 0,
-					    ab->hw_params->hal_params->rx_buf_rbm,
-					    true);
+					    ab->hw_params->hal_params->rx_buf_rbm);
 	}
 
 	/* TODO: Implement handler for other interrupts */
@@ -2465,8 +2464,7 @@ int ath12k_dp_rxdma_ring_setup(struct at
 	}
 
 	ath12k_dp_rx_bufs_replenish(ab, rx_ring, 0,
-				    ab->hw_params->hal_params->rx_buf_rbm,
-				    true);
+				    ab->hw_params->hal_params->rx_buf_rbm);
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -227,15 +227,13 @@ static int ath12k_dp_purge_mon_ring(stru
 int ath12k_dp_rx_bufs_replenish(struct ath12k_base *ab,
 				struct dp_rxdma_ring *rx_ring,
 				int req_entries,
-				enum hal_rx_buf_return_buf_manager mgr,
-				bool hw_cc)
+				enum hal_rx_buf_return_buf_manager mgr)
 {
 	struct ath12k_buffer_addr *desc;
 	struct hal_srng *srng;
 	struct sk_buff *skb;
 	int num_free;
 	int num_remain;
-	int buf_id;
 	u32 cookie;
 	dma_addr_t paddr;
 	struct ath12k_dp *dp = &ab->dp;
@@ -275,41 +273,30 @@ int ath12k_dp_rx_bufs_replenish(struct a
 		if (dma_mapping_error(ab->dev, paddr))
 			goto fail_free_skb;
 
-		if (likely(hw_cc)) {
-			spin_lock_bh(&dp->rx_desc_lock);
-
-			/* Get desc from free list and store in used list
-			 * for cleanup purposes
-			 *
-			 * TODO: pass the removed descs rather than
-			 * add/read to optimize
-			 */
-			rx_desc = list_first_entry_or_null(&dp->rx_desc_free_list,
-							   struct ath12k_rx_desc_info,
-							   list);
-			if (!rx_desc) {
-				spin_unlock_bh(&dp->rx_desc_lock);
-				goto fail_dma_unmap;
-			}
-
-			rx_desc->skb = skb;
-			rx_desc->paddr = paddr;
-			cookie = rx_desc->cookie;
-			list_del(&rx_desc->list);
-			list_add_tail(&rx_desc->list, &dp->rx_desc_used_list);
+		spin_lock_bh(&dp->rx_desc_lock);
 
+		/* Get desc from free list and store in used list
+		 * for cleanup purposes
+		 *
+		 * TODO: pass the removed descs rather than
+		 * add/read to optimize
+		 */
+		rx_desc = list_first_entry_or_null(&dp->rx_desc_free_list,
+						   struct ath12k_rx_desc_info,
+						   list);
+		if (!rx_desc) {
 			spin_unlock_bh(&dp->rx_desc_lock);
-		} else {
-			spin_lock_bh(&rx_ring->idr_lock);
-			buf_id = idr_alloc(&rx_ring->bufs_idr, skb, 0,
-					   rx_ring->bufs_max * 3, GFP_ATOMIC);
-			spin_unlock_bh(&rx_ring->idr_lock);
-			if (buf_id < 0)
-				goto fail_dma_unmap;
-			cookie = u32_encode_bits(buf_id,
-						 DP_RXDMA_BUF_COOKIE_BUF_ID);
+			goto fail_dma_unmap;
 		}
 
+		rx_desc->skb = skb;
+		rx_desc->paddr = paddr;
+		cookie = rx_desc->cookie;
+		list_del(&rx_desc->list);
+		list_add_tail(&rx_desc->list, &dp->rx_desc_used_list);
+
+		spin_unlock_bh(&dp->rx_desc_lock);
+
 		desc = ath12k_hal_srng_src_get_next_entry(ab, srng);
 		if (!desc)
 			goto fail_buf_unassign;
@@ -328,17 +315,11 @@ int ath12k_dp_rx_bufs_replenish(struct a
 	return req_entries - num_remain;
 
 fail_buf_unassign:
-	if (hw_cc) {
-		spin_lock_bh(&dp->rx_desc_lock);
-		list_del(&rx_desc->list);
-		list_add_tail(&rx_desc->list, &dp->rx_desc_free_list);
-		rx_desc->skb = NULL;
-		spin_unlock_bh(&dp->rx_desc_lock);
-	} else {
-		spin_lock_bh(&rx_ring->idr_lock);
-		idr_remove(&rx_ring->bufs_idr, buf_id);
-		spin_unlock_bh(&rx_ring->idr_lock);
-	}
+	spin_lock_bh(&dp->rx_desc_lock);
+	list_del(&rx_desc->list);
+	list_add_tail(&rx_desc->list, &dp->rx_desc_free_list);
+	rx_desc->skb = NULL;
+	spin_unlock_bh(&dp->rx_desc_lock);
 fail_dma_unmap:
 	dma_unmap_single_attrs(ab->dev, paddr, skb->len + skb_tailroom(skb),
 			       DMA_FROM_DEVICE, DMA_ATTR_SKIP_CPU_SYNC);
@@ -407,8 +388,7 @@ static int ath12k_dp_rxdma_ring_buf_setu
 		ath12k_dp_mon_buf_replenish(ab, rx_ring, num_entries);
 	else
 		ath12k_dp_rx_bufs_replenish(ab, rx_ring, 0,
-					    ab->hw_params->hal_params->rx_buf_rbm,
-					    ringtype == HAL_RXDMA_BUF);
+					    ab->hw_params->hal_params->rx_buf_rbm);
 	return 0;
 }
 
@@ -3706,7 +3686,7 @@ try_again:
 
 		/* TODO: Move to implicit BM? */
 		ath12k_dp_rx_bufs_replenish(src_ab, rx_ring, num_buffs_reaped[i],
-					    src_ab->hw_params->hal_params->rx_buf_rbm, true);
+					    src_ab->hw_params->hal_params->rx_buf_rbm);
 	}
 
 	ath12k_dp_rx_process_received_packets(ab, napi, &msdu_list,
@@ -4571,7 +4551,7 @@ exit:
 		rx_ring = &src_ab->dp.rx_refill_buf_ring;
 
 		ath12k_dp_rx_bufs_replenish(src_ab, rx_ring, num_buffs_reaped[i],
-					    src_ab->hw_params->hal_params->rx_buf_rbm, true);
+					    src_ab->hw_params->hal_params->rx_buf_rbm);
 	}
 
 	return tot_n_bufs_reaped;
@@ -5056,7 +5036,7 @@ int ath12k_dp_rx_process_wbm_err(struct
 		rx_ring = &src_ab->dp.rx_refill_buf_ring;
 
 		ath12k_dp_rx_bufs_replenish(src_ab, rx_ring, num_buffs_reaped[i],
-					    src_ab->hw_params->hal_params->rx_buf_rbm, true);
+					    src_ab->hw_params->hal_params->rx_buf_rbm);
 	}
 
 	rcu_read_lock();
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -201,8 +201,7 @@ int ath12k_dp_rx_process(struct ath12k_b
 int ath12k_dp_rx_bufs_replenish(struct ath12k_base *ab,
 				struct dp_rxdma_ring *rx_ring,
 				int req_entries,
-				enum hal_rx_buf_return_buf_manager mgr,
-				bool hw_cc);
+				enum hal_rx_buf_return_buf_manager mgr);
 int ath12k_dp_rx_pdev_mon_attach(struct ath12k *ar);
 void ath12k_dp_rx_pdev_mon_detach(struct ath12k_base *ab, const int pdev_idx);
 int ath12k_dp_rx_peer_frag_setup(struct ath12k *ar, struct ath12k_peer *peer,
