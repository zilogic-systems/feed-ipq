From 7fb8eaffd397ca9184fbb2a4f983fcf5239048fe Mon Sep 17 00:00:00 2001
From: Balamurugan Ramar <quic_bramar@quicinc.com>
Date: Mon, 27 Nov 2023 09:11:15 +0530
Subject: [PATCH] ath12k: Add Stream Classification Service Support

Stream classification service classifies incoming individually
addressed MSDUs based upon the parameters provided by the STA.

AP advertise the SCS capability in beacon frame or probe response
or assoc response to the station. Station sends the SCS request
frame to the AP if AP advertise SCS capability.

Each SCS stream is identified by an SCSID. This SCSID is used by a STA
to request creation, modification, or deletion of an SCS stream.

Receive SCS latency params through vendor NL commands from the user space
application. AP Configure SCS latency params to the firmware via WMI command.

AP send SCS response back to the client after successefully processing
the SCS request.

Signed-off-by: Balamurugan Ramar <quic_bramar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c    | 99 +++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/mac.h    | 15 ++++
 drivers/net/wireless/ath/ath12k/vendor.c | 68 ++++++++++++++++
 drivers/net/wireless/ath/ath12k/vendor.h | 43 +++++++++-
 drivers/net/wireless/ath/ath12k/wmi.c    | 73 +++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h    | 32 ++++++++
 6 files changed, 328 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 453cfde..206b719 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5726,6 +5726,7 @@ static int ath12k_install_key(struct ath12k_link_vif *arvif,
 	case WLAN_CIPHER_SUITE_GCMP:
 	case WLAN_CIPHER_SUITE_GCMP_256:
 		arg.key_cipher = WMI_CIPHER_AES_GCM;
+		key->flags |= IEEE80211_KEY_FLAG_GENERATE_IV_MGMT;
 		break;
 	default:
 		ath12k_warn(ar->ab, "cipher %d is not supported\n", key->cipher);
@@ -8934,7 +8935,20 @@ static int ath12k_mac_mgmt_tx_wmi(struct ath12k *ar, struct ath12k_link_vif *arv
 		     ieee80211_is_deauth(hdr->frame_control) ||
 		     ieee80211_is_disassoc(hdr->frame_control)) &&
 		     ieee80211_has_protected(hdr->frame_control)) {
-			skb_put(skb, IEEE80211_CCMP_MIC_LEN);
+			int mic_len;
+
+			switch(skb_cb->cipher) {
+				case WLAN_CIPHER_SUITE_CCMP:
+					mic_len = IEEE80211_CCMP_MIC_LEN;
+					break;
+				case WLAN_CIPHER_SUITE_GCMP:
+				case WLAN_CIPHER_SUITE_GCMP_256:
+					mic_len = IEEE80211_GCMP_MIC_LEN;
+					break;
+				default:
+					mic_len = IEEE80211_CCMP_MIC_LEN;
+			}
+			skb_put(skb, mic_len);
 		}
 	}
 
@@ -15526,6 +15540,89 @@ bool ath12k_is_supported_agile_bandwidth(enum nl80211_chan_width conf_bw,
 
 	return is_supported;
 }
+
+/* Note: caller should call rcu_read_lock before getting the peer mac.
+ */
+static u8 *ath12k_get_peer_mac(struct ieee80211_vif *vif, u8 *addr, u8 *link_id)
+{
+	struct ieee80211_sta *ap_sta;
+	struct ath12k_sta *ahsta;
+	struct ath12k_link_sta *arsta;
+	u8 link, *peer_addr = NULL;
+
+	ap_sta = ieee80211_find_sta(vif, addr);
+	if (!ap_sta)
+		return NULL;
+
+	ahsta = ath12k_sta_to_ahsta(ap_sta);
+
+	for_each_set_bit(link, &ahsta->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+		arsta = ahsta->link[link];
+		if (!arsta)
+			continue;
+
+		*link_id = link;
+		peer_addr = arsta->addr;
+		break;
+	}
+	return peer_addr;
+}
+
+int ath12k_mac_op_set_scs(struct wireless_dev *wdev,
+			  struct ath12k_latency_params *params)
+{
+	struct ieee80211_vif *vif;
+	struct ath12k *ar;
+	struct ath12k_vif *ahvif;
+	struct ath12k_link_vif *arvif;
+	u8 *peer_mac;
+	int ret = 0;
+	u8 link_id;
+
+	if (!wdev || !params)
+		return -EINVAL;
+
+	vif = wdev_to_ieee80211_vif(wdev);
+	if (!vif)
+		return -EINVAL;
+
+	ahvif = ath12k_vif_to_ahvif(vif);
+	if (!ahvif)
+		return -EINVAL;
+
+	rcu_read_lock();
+	peer_mac = ath12k_get_peer_mac(vif, params->peer_mac, &link_id);
+	if (!peer_mac) {
+		rcu_read_unlock();
+		return -EINVAL;
+	}
+	memcpy(params->peer_mac, peer_mac, ETH_ALEN);
+	rcu_read_unlock();
+
+	arvif = ahvif->link[link_id];
+	if (WARN_ON(!arvif))
+		return -EINVAL;
+
+	ar = arvif->ar;
+	if (!ar)
+		return -EINVAL;
+
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "link id    	        %d\n", link_id);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "service interval    %d\n", params->service_interval);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "burst size          %d\n", params->burst_size);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "delay bound         %d\n", params->delay_bound);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "min data rate       %d\n", params->min_data_rate);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "user priority       %d\n", params->user_priority);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "req type            %d\n", params->req_type);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "access category     %d\n", params->ac);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "direction           %d\n", params->direction);
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "peer mac            %pM\n", params->peer_mac);
+
+	ret = ath12k_wmi_set_latency(ar, params);
+	return ret;
+}
+
 static int ath12k_mac_op_set_radar_background(struct ieee80211_hw *hw,
 					      struct cfg80211_chan_def *def)
 {
diff --git a/drivers/net/wireless/ath/ath12k/mac.h b/drivers/net/wireless/ath/ath12k/mac.h
index b196a01..3096891 100644
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -42,6 +42,20 @@ struct ath12k_mac_tx_mgmt_free_arg {
 	u8 link_id;
 };
 
+struct ath12k_latency_params {
+	u32 service_interval;
+	u32 burst_size;
+	u32 delay_bound;
+	u32 min_data_rate;
+	u8 user_priority;
+	u8 req_type;
+	u8 ac;
+	u8 direction;
+	u8 peer_mac[6];
+};
+
+#define ATH12K_LATENCY_PARAM_SIZE sizeof(struct ath12k_latency_params)
+
 /* Default link after the IEEE802.11 defined Max link id limit
  * for driver usage purpose
  */
@@ -216,4 +230,5 @@ void ath12k_bss_assoc(struct ath12k *ar,
 		      struct ieee80211_bss_conf *bss_conf);
 void ath12k_bss_disassoc(struct ath12k *ar, struct ath12k_link_vif *arvif,
 			 bool do_vdev_down);
+int ath12k_mac_op_set_scs(struct wireless_dev *wdev, struct ath12k_latency_params *params);
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/vendor.c b/drivers/net/wireless/ath/ath12k/vendor.c
index b25d6a1..a1d9cf4 100644
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -106,7 +106,23 @@ ath12k_telemetric_sla_policy[QCA_WLAN_VENDOR_ATTR_SLA_MAX + 1] = {
 						   .len = ETH_ALEN},
 	[QCA_WLAN_VENDOR_ATTR_SLA_AC] = {.type = NLA_U8},
 };
+#endif
+
+static const struct nla_policy
+ath12k_vendor_scs_config_policy[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_MAX + 1] = {
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DST_MAC_ADDR] = {.type = NLA_BINARY,
+							       .len = ETH_ALEN},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_SERVICE_INTERVAL] = {.type = NLA_U32},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_BURST_SIZE] = {.type = NLA_U32},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DELAY_BOUND] = {.type = NLA_U32},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_MINIMUM_DATA_RATE] = {.type = NLA_U32},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_REQUEST_TYPE] = {.type = NLA_U8},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_USER_PRIORITY] = {.type = NLA_U8},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_ACCESS_CATEGORY] = {.type = NLA_U8},
+	[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DIRECTION] = {.type = NLA_U8},
+};
 
+#ifdef CPTCFG_ATH12K_SAWF
 static void ath12k_set_default_values(struct ath12k_sawf_svc_params *param)
 {
 	param->min_throughput_rate = SAWF_SVC_PARAM_DEFAULT_MIN_THRUPUT;
@@ -1009,6 +1025,50 @@ err:
 }
 
 #endif /* CPTCFG_ATH12K_SAWF */
+
+#define NL_VENDOR_GET_ATTR(res, info, attr, bit) \
+	do { \
+		struct nlattr *nl_attr; \
+		nl_attr = info[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_##attr]; \
+		if (nl_attr) \
+			res = nla_get_u##bit(nl_attr); \
+	} while (0)
+
+static int ath12k_vendor_set_scs_qos_params(struct wiphy *wihpy,
+					    struct wireless_dev *wdev,
+					    const void *data,
+					    int data_len)
+{
+	struct nlattr *info[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_MAX + 1];
+	struct ath12k_latency_params params = { 0 };
+	u8 *peer_mac;
+	int ret;
+
+	ret = nla_parse(info, QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_MAX,
+			data, data_len, ath12k_vendor_scs_config_policy, NULL);
+	if (ret) {
+		ath12k_err(NULL, "Invalid SCS attributes\n");
+		return ret;
+	}
+
+	NL_VENDOR_GET_ATTR(params.service_interval, info, SERVICE_INTERVAL, 32);
+	NL_VENDOR_GET_ATTR(params.burst_size, info, BURST_SIZE, 32);
+	NL_VENDOR_GET_ATTR(params.delay_bound, info, DELAY_BOUND, 32);
+	NL_VENDOR_GET_ATTR(params.min_data_rate, info, MINIMUM_DATA_RATE, 32);
+	NL_VENDOR_GET_ATTR(params.req_type, info, REQUEST_TYPE, 8);
+	NL_VENDOR_GET_ATTR(params.user_priority, info, USER_PRIORITY, 8);
+	NL_VENDOR_GET_ATTR(params.ac, info, ACCESS_CATEGORY, 8);
+	NL_VENDOR_GET_ATTR(params.direction, info, DIRECTION, 8);
+	if (info[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DST_MAC_ADDR]) {
+		peer_mac = nla_data(info[QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DST_MAC_ADDR]);
+		memcpy(params.peer_mac, peer_mac, ETH_ALEN);
+	}
+
+	ret = ath12k_mac_op_set_scs(wdev, &params);
+
+	return ret;
+}
+
 static struct wiphy_vendor_command ath12k_vendor_commands[] = {
 #ifdef CPTCFG_ATH12K_SAWF
 	{
@@ -1102,6 +1162,14 @@ static struct wiphy_vendor_command ath12k_vendor_commands[] = {
 		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
 	},
 #endif /* CPTCFG_ATH12K_SAWF */
+	{
+		.info.vendor_id = QCA_NL80211_VENDOR_ID,
+		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SCS_RULE_CONFIG,
+		.doit = ath12k_vendor_set_scs_qos_params,
+		.policy = ath12k_vendor_scs_config_policy,
+		.maxattr = QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_MAX,
+		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
+	},
 };
 
 static const struct nl80211_vendor_cmd_info ath12k_vendor_events[] = {
diff --git a/drivers/net/wireless/ath/ath12k/vendor.h b/drivers/net/wireless/ath/ath12k/vendor.h
index f46acb1..146f366 100644
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -23,8 +23,11 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_STREAMING_STATS = 213,
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH = 214,
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH_INDEX = 215,
-	QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA = 334,
 #endif /* CPTCFG_ATH12K_SAWF */
+	QCA_NL80211_VENDOR_SUBCMD_SCS_RULE_CONFIG = 218,
+#ifdef CPTCFG_ATH12K_SAWF
+	QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA = 334,
+#endif
 };
 
 #ifdef CPTCFG_ATH12K_SAWF
@@ -492,4 +495,42 @@ void ath12k_vendor_telemetry_notify_breach(struct ieee80211_vif *vif, u8 *mac_ad
 #endif /* CPTCFG_ATH12K_SAWF */
 
 int ath12k_vendor_register(struct ath12k_hw *ah);
+
+enum qca_wlan_vendor_attr_scs_rule_config {
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_RULE_ID = 1,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_REQUEST_TYPE = 2,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_OUTPUT_TID = 3,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_CLASSIFIER_TYPE = 4,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_VERSION = 5,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_SRC_IPV4_ADDR = 6,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_DST_IPV4_ADDR = 7,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_SRC_IPV6_ADDR = 8,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_DST_IPV6_ADDR = 9,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_SRC_PORT = 10,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_DST_PORT = 11,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_DSCP = 12,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_NEXT_HEADER = 13,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS4_FLOW_LABEL = 14,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS10_PROTOCOL_INSTANCE = 15,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS10_NEXT_HEADER = 16,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS10_FILTER_MASK = 17,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_TCLAS10_FILTER_VALUE = 18,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_SERVICE_CLASS_ID = 19,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DST_MAC_ADDR = 20,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_NETDEV_IF_INDEX = 21,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_SERVICE_INTERVAL = 22,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_BURST_SIZE = 23,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DELAY_BOUND = 24,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_MINIMUM_DATA_RATE = 25,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_USER_PRIORITY = 26,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_ACCESS_CATEGORY = 27,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_DIRECTION = 28,
+
+	/* Keep last */
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_MAX =
+	QCA_WLAN_VENDOR_ATTR_SCS_RULE_CONFIG_AFTER_LAST - 1,
+};
+
 #endif /* QCA_VENDOR_H */
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index bd9cf0b..ac6abe9 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -15029,3 +15029,76 @@ send_cmd:
 	arvif->peer_ch_width_switch_data = NULL;
 	mutex_unlock(&ar->conf_mutex);
 }
+
+int ath12k_wmi_set_latency(struct ath12k *ar, struct ath12k_latency_params *params)
+{
+	struct sk_buff *skb;
+	struct wmi_tlv *tlv;
+	struct ath12k_wmi_pdev *wmi;
+	struct wmi_peer_tid_latency_cmd *cmd;
+	struct wmi_tid_latency_params *tid_lat;
+	void *data;
+	int len, ret, num_peer = 1, sawf_ul_param = 1;
+	u8 dl_enable, ul_enable;
+
+	wmi = ar->wmi;
+	len = sizeof(*cmd) + TLV_HDR_SIZE + (num_peer * sizeof(*tid_lat));
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb) {
+		ath12k_warn(ar->ab, "Memory is not available\n");
+		return -ENOMEM;
+	}
+
+	if (params->direction == WMI_LATENCY_DIR_UL) {
+		ul_enable = 1;
+		dl_enable = 0;
+	} else if (params->direction == WMI_LATENCY_DIR_DL) {
+		ul_enable = 0;
+		dl_enable = 1;
+	} else {
+		ath12k_warn(ar->ab, "Direct link is not supported\n");
+		dev_kfree_skb(skb);
+		return -EINVAL;
+	}
+
+	data = skb->data;
+	cmd = data;
+	cmd->tlv_header = ath12k_wmi_tlv_hdr(WMI_TAG_PEER_TID_LATENCY_CONFIG_FIXED_PARAM,
+					     (sizeof(*cmd) - TLV_HDR_SIZE));
+	cmd->pdev_id = cpu_to_le32(ar->pdev->pdev_id);
+
+	data += sizeof(*cmd);
+	tlv = data;
+	len = sizeof(*tid_lat) * num_peer;
+
+	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT, len);
+
+	data += TLV_HDR_SIZE;
+	tid_lat = data;
+
+	tid_lat->tlv_header = ath12k_wmi_tlv_hdr(WMI_TAG_TID_LATENCY_INFO,
+						 (sizeof(*tid_lat) - TLV_HDR_SIZE));
+
+	tid_lat->service_interval = cpu_to_le32(params->service_interval);
+	tid_lat->burst_size_diff = cpu_to_le32(params->burst_size);
+	tid_lat->max_latency = cpu_to_le32(params->delay_bound);
+	tid_lat->min_tput = cpu_to_le32(params->min_data_rate);
+
+	ether_addr_copy(tid_lat->destmac.addr, params->peer_mac);
+
+	tid_lat->latency_tid_info =
+		le32_encode_bits(params->user_priority, WMI_LATENCY_TID_INFO_SCS_TID_NUM) |
+		le32_encode_bits(params->ac, WMI_LATENCY_TID_INFO_SCS_AC) |
+		le32_encode_bits(dl_enable, WMI_LATENCY_TID_INFO_SCS_DL_EN) |
+		le32_encode_bits(ul_enable, WMI_LATENCY_TID_INFO_SCS_UL_EN) |
+		le32_encode_bits(params->req_type, WMI_LATENCY_TID_INFO_SCS_BURST_SZ_SUM) |
+		le32_encode_bits(sawf_ul_param, WMI_LATENCY_TID_INFO_SCS_SAWF_UL_PARAM);
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_PEER_TID_LATENCY_CONFIG_CMDID);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to submit WMI_PEER_TID_LATENCY_CONFIG_CMDID cmd %d\n",
+			    ret);
+		dev_kfree_skb(skb);
+	}
+	return ret;
+}
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 0c9c664..e8a8dd6 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -27,6 +27,7 @@ struct ath12k;
 struct ath12k_fw_stats;
 struct ath12k_reg_tpc_power_info;
 struct ath12k_sawf_svc_params;
+struct ath12k_latency_params;
 
 #define PSOC_HOST_MAX_NUM_SS (8)
 
@@ -8225,6 +8226,36 @@ struct wmi_rssi_dbm_conv_offsets {
 	s32 rssi_offset;
 };
 
+#define WMI_LATENCY_TID_INFO_SCS_TID_NUM		GENMASK(7, 0)
+#define WMI_LATENCY_TID_INFO_SCS_AC			GENMASK(9, 8)
+#define WMI_LATENCY_TID_INFO_SCS_DL_EN			BIT(10)
+#define WMI_LATENCY_TID_INFO_SCS_UL_EN			BIT(11)
+#define WMI_LATENCY_TID_INFO_SCS_BURST_SZ_SUM		GENMASK(13, 12)
+#define WMI_LATENCY_TID_INFO_SCS_MSDUQ_ID		GENMASK(17, 14)
+#define WMI_LATENCY_TID_INFO_SCS_UL_OFDMA_DISABLE	BIT(18)
+#define WMI_LATENCY_TID_INFO_SCS_UL_MU_MIMO_DISABLE	BIT(19)
+#define WMI_LATENCY_TID_INFO_SCS_SAWF_UL_PARAM		BIT(20)
+
+#define WMI_LATENCY_DIR_UL	0
+#define WMI_LATENCY_DIR_DL	1
+#define WMI_LATENCY_DIR_DIRECT	2
+
+struct wmi_tid_latency_params {
+	__le32 tlv_header;
+	struct wmi_mac_addr destmac;
+	__le32 service_interval;
+	__le32 burst_size_diff;
+	__le32 max_latency;
+	__le32 max_per;
+	__le32 min_tput;
+	__le32 latency_tid_info;
+} __packed;
+
+struct wmi_peer_tid_latency_cmd {
+	__le32 tlv_header;
+	__le32 pdev_id;
+} __packed;
+
 #define ATH12K_FW_STATS_BUF_SIZE (1024 * 1024)
 
 void ath12k_wmi_init_qcn9274(struct ath12k_base *ab,
@@ -8435,4 +8466,5 @@ int ath12k_wmi_config_peer_ppeds_routing(struct ath12k *ar,
 					 u32 src_info, bool ppe_routing_enable);
 #endif
 void ath12k_wmi_peer_chan_width_switch_work(struct work_struct *work);
+int ath12k_wmi_set_latency(struct ath12k *ar, struct ath12k_latency_params *params);
 #endif
-- 
2.17.1

