From 0509f24d12f763b788fec477c6ee7f57db35e755 Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Mon, 20 Nov 2023 15:44:01 +0530
Subject: [PATCH] ath12k: move board related members to board data struct

Passing board related arguments individual members to
board data fetching api this reduce the scalability
when the arguments are more.
Modify the argument passing as struct to increase
the scalability.

In existing code memset of entire board struct during
release_firmware this lead to clearing the board parameters
set by caller which cause the board data fetch failure when
the API called again.
Modified the code to set only bd->fw to NULL as the resource
got from FW only getting free so this will avoid board data
fetch failure of next call.

Signed-off-by: Karthik M <quic_karm@quicinc.com>
Signed-off-by: Saleemuddin Shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 195 +++++++++++++------------
 drivers/net/wireless/ath/ath12k/core.h |   5 +-
 drivers/net/wireless/ath/ath12k/hw.h   |  20 +--
 3 files changed, 116 insertions(+), 104 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 161f78780e44..9ae9e8366916 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -426,8 +426,9 @@ int ath12k_core_check_dt(struct ath12k_base *ab)
 	return 0;
 }
 
-static int ath12k_core_create_board_name(struct ath12k_base *ab, char *name,
-                                         char *defaultname, size_t name_len)
+static int ath12k_core_create_board_name(struct ath12k_base *ab,
+					 char *boardname,
+					 char *defaultboardname)
 {
 	/* strlen(',variant=') + strlen(ab->qmi.target.bdf_ext) */
 	char variant[9 + ATH12K_QMI_BDF_EXT_STR_LENGTH] = { 0 };
@@ -435,35 +436,51 @@ static int ath12k_core_create_board_name(struct ath12k_base *ab, char *name,
 	if (ab->qmi.target.bdf_ext[0] != '\0')
 		scnprintf(variant, sizeof(variant), ",variant=%s",
 			  ab->qmi.target.bdf_ext);
-    switch (ab->id.bdf_search) {
-    	case ATH12K_BDF_SEARCH_BUS_AND_BOARD:
-            scnprintf(name, name_len,
-                      "bus=%s,vendor=%04x,device=%04x,subsystem-vendor=%04x,"
-                      "subsystem-device=%04x,qmi-chip-id=%d,qmi-board-id=%d%s",
-                      ath12k_bus_str(ab->hif.bus),
-                      ab->id.vendor, ab->id.device,
-                      ab->id.subsystem_vendor,
-                      ab->id.subsystem_device,
-                      ab->qmi.target.chip_id,
-                      ab->qmi.target.board_id,
-                      variant);
-            break;
-    	default:
-            scnprintf(name, name_len,
-                      "bus=%s,qmi-chip-id=%d,qmi-board-id=%d%s",
-                      ath12k_bus_str(ab->hif.bus),
-                      ab->qmi.target.chip_id,
-                      ab->qmi.target.board_id, variant);
-
-            scnprintf(defaultname, name_len,
-                      "bus=%s,qmi-chip-id=%d,qmi-board-id=%d%s",
-                      ath12k_bus_str(ab->hif.bus),
-                      ab->qmi.target.chip_id,
-                      ATH12K_DEFAULT_ID, variant);
-            break;
-	}
-
-	ath12k_dbg(ab, ATH12K_DBG_BOOT, "boot using board name '%s'\n", name);
+	switch (ab->id.bdf_search) {
+	case ATH12K_BDF_SEARCH_BUS_AND_BOARD:
+		snprintf(boardname, BOARD_NAME_SIZE,
+			 "bus=%s,vendor=%04x,device=%04x,"
+			 "subsystem-vendor=%04x,"
+			 "subsystem-device=%04x,"
+			 "qmi-chip-id=%d,qmi-board-id=%d%s",
+			 ath12k_bus_str(ab->hif.bus),
+			 ab->id.vendor, ab->id.device,
+			 ab->id.subsystem_vendor,
+			 ab->id.subsystem_device,
+			 ab->qmi.target.chip_id,
+			 ab->qmi.target.board_id, variant);
+
+		snprintf(defaultboardname, BOARD_NAME_SIZE,
+			 "bus=%s,vendor=%04x,device=%04x,"
+			 "subsystem-vendor=%04x,"
+			 "subsystem-device=%04x,"
+			 "qmi-chip-id=%d,qmi-board-id=%d%s",
+			 ath12k_bus_str(ab->hif.bus),
+			 ab->id.vendor, ab->id.device,
+			 ab->id.subsystem_vendor,
+			 ab->id.subsystem_device,
+			 ab->qmi.target.chip_id,
+			 ab->qmi.target.board_id,
+			 variant);
+		break;
+	default:
+		snprintf(boardname, BOARD_NAME_SIZE,
+			 "bus=%s,qmi-chip-id=%d,qmi-board-id=%d%s",
+			 ath12k_bus_str(ab->hif.bus),
+			 ab->qmi.target.chip_id,
+			 ab->qmi.target.board_id, variant);
+
+		snprintf(defaultboardname, BOARD_NAME_SIZE,
+			 "bus=%s,qmi-chip-id=%d,qmi-board-id=%d%s",
+			 ath12k_bus_str(ab->hif.bus),
+			 ab->qmi.target.chip_id,
+			 ATH12K_DEFAULT_ID, variant);
+		break;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_BOOT, "boot using board name : '%s'\t"
+		   "default boardname : '%s'\n", boardname,
+		   defaultboardname);
 
 	return 0;
 }
@@ -492,19 +509,15 @@ const struct firmware *ath12k_core_firmware_request(struct ath12k_base *ab,
 
 void ath12k_core_free_bdf(struct ath12k_base *ab, struct ath12k_board_data *bd)
 {
-	if (!IS_ERR(bd->fw))
+	if (!IS_ERR(bd->fw)) {
 		release_firmware(bd->fw);
-
-	memset(bd, 0, sizeof(*bd));
+		bd->fw = NULL;
+	}
 }
 
 static int ath12k_core_parse_bd_ie_board(struct ath12k_base *ab,
 					 struct ath12k_board_data *bd,
-					 const void *buf, size_t buf_len,
-					 const char *boardname,
-					 int ie_id,
-					 int name_id,
-					 int data_id)
+					 const void *buf, size_t buf_len)
 {
 	const struct ath12k_fw_ie *hdr;
 	bool name_match_found;
@@ -526,37 +539,37 @@ static int ath12k_core_parse_bd_ie_board(struct ath12k_base *ab,
 
 		if (buf_len < ALIGN(board_ie_len, 4)) {
 			ath12k_err(ab, "invalid %s length: %zu < %zu\n",
-			           ath12k_bd_ie_type_str(ie_id),
-			           buf_len, ALIGN(board_ie_len, 4));
+				   ath12k_bd_ie_type_str(bd->ie_id),
+				   buf_len, ALIGN(board_ie_len, 4));
 			ret = -EINVAL;
 			goto out;
 		}
 
-		if (board_ie_id == name_id) {
+		if (board_ie_id == bd->name_id) {
 			ath12k_dbg_dump(ab, ATH12K_DBG_BOOT, "board name", "",
 					board_ie_data, board_ie_len);
 
-			if (board_ie_len != strlen(boardname))
+			if (board_ie_len != strlen(bd->boardname))
 				goto next;
 
-			ret = memcmp(board_ie_data, boardname, strlen(boardname));
+			ret = memcmp(board_ie_data, bd->boardname, strlen(bd->boardname));
 			if (ret)
 				goto next;
 
 			name_match_found = true;
 			ath12k_dbg(ab, ATH12K_DBG_BOOT,
 				   "boot found match %s for name '%s'",
-				   ath12k_bd_ie_type_str(ie_id),
-				   boardname);
-		} else if (board_ie_id == data_id) {
+				   ath12k_bd_ie_type_str(bd->ie_id),
+				   bd->boardname);
+		} else if (board_ie_id == bd->data_id) {
 			if (!name_match_found)
 				/* no match found */
 				goto next;
 
 			ath12k_dbg(ab, ATH12K_DBG_BOOT,
 				   "boot found %s for '%s'",
-				   ath12k_bd_ie_type_str(ie_id),
-				   boardname);
+				   ath12k_bd_ie_type_str(bd->ie_id),
+				   bd->boardname);
 
 			bd->data = board_ie_data;
 			bd->len = board_ie_len;
@@ -565,8 +578,8 @@ static int ath12k_core_parse_bd_ie_board(struct ath12k_base *ab,
 			goto out;
 		} else {
 			ath12k_warn(ab, "unknown %s id found: %d\n",
-                        ath12k_bd_ie_type_str(ie_id),
-                        board_ie_id);
+				    ath12k_bd_ie_type_str(bd->ie_id),
+				    board_ie_id);
 		}
 
 next:
@@ -585,11 +598,7 @@ out:
 }
 
 static int ath12k_core_fetch_board_data_api_n(struct ath12k_base *ab,
-                                              struct ath12k_board_data *bd,
-                                              const char *boardname,
-                                              int ie_id_match,
-                                              int name_id,
-                                              int data_id)
+					      struct ath12k_board_data *bd)
 {
 	size_t len, magic_len;
 	const u8 *data;
@@ -654,13 +663,9 @@ static int ath12k_core_fetch_board_data_api_n(struct ath12k_base *ab,
 			goto err;
 		}
 
-		if (ie_id == ie_id_match) {
+		if (ie_id == bd->ie_id) {
 			ret = ath12k_core_parse_bd_ie_board(ab, bd, data,
-							    ie_len,
-							    boardname,
-							    ie_id_match,
-							    name_id,
-							    data_id);
+							    ie_len);
 			if (ret == -ENOENT)
 				/* no match found, continue */
 				goto next;
@@ -682,9 +687,9 @@ next:
 out:
 	if (!bd->data || !bd->len) {
 		ath12k_dbg(ab, ATH12K_DBG_BOOT,
-		           "failed to fetch %s for %s from %s\n",
-		           ath12k_bd_ie_type_str(ie_id_match),
-		           boardname, filepath);
+			   "failed to fetch %s for %s from %s\n",
+			   ath12k_bd_ie_type_str(bd->ie_id),
+			   bd->boardname, filepath);
 		ret = -ENODATA;
 		goto err;
 	}
@@ -713,32 +718,34 @@ int ath12k_core_fetch_board_data_api_1(struct ath12k_base *ab,
 
 int ath12k_core_fetch_bdf(struct ath12k_base *ab, struct ath12k_board_data *bd)
 {
-	char boardname[BOARD_NAME_SIZE], boarddefaultname[BOARD_NAME_SIZE];
+	char boardname[BOARD_NAME_SIZE] = {};
+	char defaultboardname[BOARD_NAME_SIZE] = {};
+	u8 bd_api;
 	int ret;
 
-	ret = ath12k_core_create_board_name(ab, boardname, boarddefaultname,
-					    BOARD_NAME_SIZE);
+	ret = ath12k_core_create_board_name(ab, boardname, defaultboardname);
 	if (ret) {
 		ath12k_err(ab, "failed to create board name: %d", ret);
 		return ret;
 	}
 
-	ab->bd_api = 2;
-	ret = ath12k_core_fetch_board_data_api_n(ab, bd, boardname,
-						 ATH12K_BD_IE_BOARD,
-						 ATH12K_BD_IE_BOARD_NAME,
-						 ATH12K_BD_IE_BOARD_DATA);
+	bd_api = 2;
+	bd->ie_id = ATH12K_BD_IE_BOARD;
+	bd->name_id = ATH12K_BD_IE_BOARD_NAME;
+	bd->data_id = ATH12K_BD_IE_BOARD_DATA;
+	memcpy(bd->boardname, boardname, BOARD_NAME_SIZE);
+
+	ret = ath12k_core_fetch_board_data_api_n(ab, bd);
 	if (!ret)
 		goto success;
 
-	ret = ath12k_core_fetch_board_data_api_n(ab, bd, boarddefaultname,
-						 ATH12K_BD_IE_BOARD,
-						 ATH12K_BD_IE_BOARD_NAME,
-						 ATH12K_BD_IE_BOARD_DATA);
+	memcpy(bd->boardname, defaultboardname, BOARD_NAME_SIZE);
+
+	ret = ath12k_core_fetch_board_data_api_n(ab, bd);
 	if (!ret)
 		goto success;
 
-	ab->bd_api = 1;
+	bd_api = 1;
 	ret = ath12k_core_fetch_board_data_api_1(ab, bd, ATH12K_DEFAULT_BOARD_FILE);
 	if (ret) {
 		ath12k_err(ab, "failed to fetch board-2.bin from %s\n",
@@ -752,38 +759,40 @@ int ath12k_core_fetch_bdf(struct ath12k_base *ab, struct ath12k_board_data *bd)
 	}
 
 success:
-	ath12k_dbg(ab, ATH12K_DBG_BOOT, "using board api %d\n", ab->bd_api);
+	ath12k_dbg(ab, ATH12K_DBG_BOOT, "using board api %hhu\n", bd_api);
 	return 0;
 }
 
 int ath12k_core_fetch_regdb(struct ath12k_base *ab, struct ath12k_board_data *bd)
 {
-	char regdbname[REGDB_NAME_SIZE], regdbdefaultname[REGDB_NAME_SIZE];
+	char regdbname[BOARD_NAME_SIZE] = {};
+	char defaultregdbname[BOARD_NAME_SIZE] = {};
+	u8 bd_api;
 	int ret;
 
-	ret = ath12k_core_create_board_name(ab, regdbname, regdbdefaultname,
-	                                    REGDB_NAME_SIZE);
+	ret = ath12k_core_create_board_name(ab, regdbname, defaultregdbname);
 	if (ret) {
 		ath12k_err(ab, "failed to create regdb name: %d", ret);
 		return ret;
 	}
 
-	ab->bd_api = 2;
-	ret = ath12k_core_fetch_board_data_api_n(ab, bd, regdbname,
-	                                         ATH12K_BD_IE_REGDB,
-	                                         ATH12K_BD_IE_REGDB_NAME,
-	                                         ATH12K_BD_IE_REGDB_DATA);
+	bd_api = 2;
+	bd->ie_id = ATH12K_BD_IE_REGDB;
+	bd->name_id = ATH12K_BD_IE_REGDB_NAME;
+	bd->data_id = ATH12K_BD_IE_REGDB_DATA;
+	memcpy(bd->boardname, regdbname, BOARD_NAME_SIZE);
+
+	ret = ath12k_core_fetch_board_data_api_n(ab, bd);
 	if (!ret)
 		goto success;
 
-	ret = ath12k_core_fetch_board_data_api_n(ab, bd, regdbdefaultname,
-	                                         ATH12K_BD_IE_REGDB,
-	                                         ATH12K_BD_IE_REGDB_NAME,
-	                                         ATH12K_BD_IE_REGDB_DATA);
+	memcpy(bd->boardname, defaultregdbname, BOARD_NAME_SIZE);
+
+	ret = ath12k_core_fetch_board_data_api_n(ab, bd);
 	if (!ret)
 		goto success;
 
-	ab->bd_api = 1;
+	bd_api = 1;
 	ret = ath12k_core_fetch_board_data_api_1(ab, bd, ATH12K_REGDB_FILE_NAME);
 	if (ret) {
 		ath12k_err(ab, "failed to fetch %s file from %s\n",
@@ -792,7 +801,7 @@ int ath12k_core_fetch_regdb(struct ath12k_base *ab, struct ath12k_board_data *bd
 	}
 
 success:
-	ath12k_dbg(ab, ATH12K_DBG_BOOT, "using board api %d\n", ab->bd_api);
+	ath12k_dbg(ab, ATH12K_DBG_BOOT, "using board api %hhu\n", bd_api);
 	return 0;
 }
 static void ath12k_core_stop(struct ath12k_base *ab)
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 43fef42efd7e..90059dd17923 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1155,12 +1155,15 @@ struct cmem_remap {
 };
 
 #define BOARD_NAME_SIZE 100
-#define REGDB_NAME_SIZE 100
 
 struct ath12k_board_data {
 	const struct firmware *fw;
 	const void *data;
 	size_t len;
+	char boardname[BOARD_NAME_SIZE];
+	u32 ie_id;
+	u32 name_id;
+	u32 data_id;
 };
 
 struct ath12k_bp_stats {
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index 32d89943808c..6f8933538132 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -313,16 +313,16 @@ enum ath12k_bd_ie_type {
 
 static inline const char *ath12k_bd_ie_type_str(enum ath12k_bd_ie_type type)
 {
-    switch (type) {
-    case ATH12K_BD_IE_BOARD:
-        return "board data";
-    case ATH12K_BD_IE_REGDB:
-        return "regdb data";
-    case ATH12K_BD_IE_BOARD_EXT:
-        return "board data ext";
-    }
-
-    return "unknown";
+	switch (type) {
+	case ATH12K_BD_IE_BOARD:
+		return "board data";
+	case ATH12K_BD_IE_REGDB:
+		return "regdb data";
+	case ATH12K_BD_IE_BOARD_EXT:
+		return "board data ext";
+	}
+
+	return "unknown";
 }
 
 struct ath12k_hw_regs {
-- 
2.17.1

