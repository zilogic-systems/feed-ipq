From ccbb171f44f58fb04641a6b1c11e06963d5abb8e Mon Sep 17 00:00:00 2001
From: Yuvarani V <quic_yuvarani@quicinc.com>
Date: Thu, 23 Nov 2023 19:37:53 +0530
Subject: [PATCH] ath12k: Handle CU and BPCC for probe and assoc response

Add changes to indicate ongoing critical update CU flags and
BPCC values in probe and assoc/reassoc response.
For beacon FW update the CU flags and BPCC values in impacted
and partner links and keeps the latest copy of BPCC for ML VDEV.
The similar CU indication needs to be considered for probe,
assoc/reassoc response.
FW indicate to host the ongoing CU flag within DTIM interval for
impacted, and latest BPCC values of AP MLDs in impacted
and partner link VDEVs as part of mgmt_rx_event.
Extract cu_vdev_bitmap and bpcc values CU information from
TLV for probe and assoc / reassoc request.
Pass these values to update CU flag and BSS Parameter Change Count
in probe and assoc response frame.

Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Signed-off-by: Yuvarani V <quic_yuvarani@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 108 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h |  42 ++++++++++
 3 files changed, 153 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -118,6 +118,9 @@ struct wmi_tlv_mgmt_rx_parse {
 	bool frame_buf_done;
 	struct ath12k_wmi_mgmt_rx_reo_params *reo_params;
 	struct ath12k_wmi_mgmt_rx_fw_consumed_hdr *fw_consumed_reo_params;
+	struct ath12k_mgmt_rx_cu_arg cu_params;
+	bool mgmt_ml_info_done;
+	bool bpcc_buf_done;
 };
 
 static const struct ath12k_wmi_tlv_policy ath12k_wmi_tlv_policies[] = {
@@ -7388,11 +7391,46 @@ static int ath12k_pull_vdev_stopped_para
 	return 0;
 }
 
+static int ath12k_wmi_mgmt_rx_sub_tlv_parse(struct ath12k_base *ab,
+					    u16 tag, u16 len,
+					    const void *ptr, void *data)
+{
+	struct wmi_tlv_mgmt_rx_parse *parse = data;
+	struct ath12k_mgmt_rx_cu_arg *rx_cu_params;
+	struct ath12k_wmi_mgmt_rx_cu_params *rx_cu_params_tlv;
+
+	switch (tag) {
+	case WMI_TAG_MLO_MGMT_RX_CU_PARAMS:
+		rx_cu_params = &parse->cu_params;
+		rx_cu_params_tlv = (struct ath12k_wmi_mgmt_rx_cu_params *)ptr;
+		rx_cu_params->cu_vdev_map[0] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_1, CU_VDEV_MAP_LB);
+		rx_cu_params->cu_vdev_map[1] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_1, CU_VDEV_MAP_HB);
+		rx_cu_params->cu_vdev_map[2] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_2, CU_VDEV_MAP_LB);
+		rx_cu_params->cu_vdev_map[3] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_2, CU_VDEV_MAP_HB);
+		rx_cu_params->cu_vdev_map[4] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_3, CU_VDEV_MAP_LB);
+		rx_cu_params->cu_vdev_map[5] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_3, CU_VDEV_MAP_HB);
+		rx_cu_params->cu_vdev_map[6] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_4, CU_VDEV_MAP_LB);
+		rx_cu_params->cu_vdev_map[7] =
+			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_4, CU_VDEV_MAP_HB);
+		parse->mgmt_ml_info_done = true;
+		break;
+	}
+	return 0;
+}
+
 static int ath12k_wmi_tlv_mgmt_rx_parse(struct ath12k_base *ab,
 					u16 tag, u16 len,
 					const void *ptr, void *data)
 {
 	struct wmi_tlv_mgmt_rx_parse *parse = data;
+	int ret;
 
 	switch (tag) {
 	case WMI_TAG_MGMT_RX_HDR:
@@ -7402,6 +7440,11 @@ static int ath12k_wmi_tlv_mgmt_rx_parse(
 		if (!parse->frame_buf_done) {
 			parse->frame_buf = ptr;
 			parse->frame_buf_done = true;
+		} else if (!parse->bpcc_buf_done) {
+			if (len == 0)
+				break;
+			parse->cu_params.bpcc_bufp = ptr;
+			parse->bpcc_buf_done = true;
 		}
 		break;
 	case WMI_TAG_MLO_MGMT_RX_REO_PARAMS:
@@ -7410,6 +7453,14 @@ static int ath12k_wmi_tlv_mgmt_rx_parse(
 	case WMI_TAG_MLO_MGMT_RX_FW_CONSUMED_HDR:
 		parse->fw_consumed_reo_params = (struct ath12k_wmi_mgmt_rx_fw_consumed_hdr *)ptr;
 		break;
+	case WMI_TAG_ARRAY_STRUCT:
+		ret = ath12k_wmi_tlv_iter(ab, ptr, len,
+					  ath12k_wmi_mgmt_rx_sub_tlv_parse, parse);
+		if (ret) {
+			ath12k_warn(ab, "failed to parse mgmt rx sub tlv %d\n", ret);
+			return ret;
+		}
+		break;
 	}
 	return 0;
 }
@@ -7458,6 +7509,60 @@ static int ath12k_pull_fw_consumed_mgmt_
 	return 0;
 }
 
+static u32 ath12k_get_ar_next_vdev_pos(struct ath12k *ar, u32 pos)
+{
+	bool bit;
+	u32 i = 0;
+
+	for (i = pos; i < MAX_AP_MLDS_PER_LINK; i++) {
+		bit = ar->allocated_vdev_map & (1LL << i);
+		if (bit)
+			break;
+	}
+	return i;
+}
+
+static void ath12k_update_cu_params(struct ath12k_base *ab,
+				    struct ath12k_mgmt_rx_cu_arg *cu_params)
+{
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k *ar;
+	struct ath12k_link_vif *arvif;
+	bool critical_flag;
+	u8 hw_link_id;
+	u8 *bpcc_ptr, *bpcc_bufp;
+	u32 vdev_id, pos = 0;
+	int i;
+
+	if (!cu_params->bpcc_bufp)
+		return;
+	/* Iterate over all the valid hw links */
+	for (hw_link_id = 0; hw_link_id < CU_MAX_MLO_LINKS; hw_link_id++) {
+		ar = rcu_dereference(ag->hw_links[hw_link_id]);
+		if (!ar)
+			continue;
+		pos = 0;
+		for (i = 0; i < ar->num_created_vdevs; i++) {
+			pos = ath12k_get_ar_next_vdev_pos(ar, pos);
+			vdev_id = pos;
+			pos++;
+			arvif = ath12k_mac_get_arvif(ar, vdev_id);
+			if (!arvif)
+				continue;
+			if (arvif->is_up && arvif->ahvif->vif->valid_links) {
+				critical_flag = cu_params->cu_vdev_map[hw_link_id] & (1 << i);
+				bpcc_bufp = cu_params->bpcc_bufp;
+				bpcc_ptr = bpcc_bufp +
+					((hw_link_id * MAX_AP_MLDS_PER_LINK) + i);
+				ieee80211_critical_update(arvif->ahvif->vif,
+							  arvif->link_id,
+							  critical_flag,
+							  *bpcc_ptr);
+			}
+		}
+	}
+}
+
 static int ath12k_pull_mgmt_rx_params_tlv(struct ath12k_base *ab,
 					  struct sk_buff *skb,
 					  struct ath12k_wmi_mgmt_rx_arg *hdr)
@@ -7468,6 +7573,7 @@ static int ath12k_pull_mgmt_rx_params_tl
 	int i, ret;
 	struct ath12k_wmi_mgmt_rx_reo_params *reo_params_tlv = NULL;
 
+	memset(&parse, 0, sizeof(parse));
 	ret = ath12k_wmi_tlv_iter(ab, skb->data, skb->len,
 				  ath12k_wmi_tlv_mgmt_rx_parse,
 				  &parse);
@@ -7524,6 +7630,11 @@ static int ath12k_pull_mgmt_rx_params_tl
 			hdr->reo_params.global_timestamp,
 			hdr->reo_params.mgmt_pkt_ctr);
 
+	if (parse.mgmt_ml_info_done) {
+		rcu_read_lock();
+		ath12k_update_cu_params(ab, &parse.cu_params);
+		rcu_read_unlock();
+	}
 	if (skb->len < (frame - skb->data) + hdr->buf_len) {
 		ath12k_warn(ab, "invalid length in mgmt rx hdr ev");
 		return -EPROTO;
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2206,6 +2206,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_RSSI_DBM_CONVERSION_PARAMS_INFO,
 	WMI_TAG_RSSI_DBM_CONVERSION_TEMP_OFFSET_INFO,
 	WMI_TAG_BCN_TMPL_ML_INFO_CMD = 0x436,
+	WMI_TAG_MLO_MGMT_RX_CU_PARAMS = 0x439,
 	WMI_TAG_CTRL_PATH_CMD_FIXED_PARAM = 0x442,
 	WMI_TAG_CTRL_PATH_EVENT_FIXED_PARAM,
 	WMI_TAG_PRB_RESP_TMPL_ML_INFO_CMD = 0x460,
@@ -6266,6 +6267,42 @@ struct mgmt_rx_reo_list_entry {
 #define ATH12K_MGMT_RX_REO_PKT_CTR_HALF_RANGE	(0x8000)
 #define ATH12K_MGMT_RX_REO_PKT_CTR_FULL_RANGE	(ATH12K_MGMT_RX_REO_PKT_CTR_HALF_RANGE << 1)
 
+#define CU_VDEV_MAP_LB GENMASK(15, 0)
+#define CU_VDEV_MAP_HB GENMASK(31, 16)
+/* Maximum number of CU LINKS across the system.
+ * this is not the CU links within an AP MLD.
+ */
+#define CU_MAX_MLO_LINKS 8
+#define MAX_AP_MLDS_PER_LINK 16
+
+struct ath12k_wmi_mgmt_rx_cu_params {
+	/* CU vdev map to intimate about the on-going Critical update
+	 * per-link contains 16 VAPs at max.
+	 */
+
+	/* bits    : 0-15 | 16-31
+	 * link-id :  0   |   1
+	 */
+	__le32 cu_vdev_map_1;
+	/* bits    : 0-15 | 16-31
+	 * link-id :  2   |   3
+	 */
+	__le32 cu_vdev_map_2;
+	/* bits    : 0-15 | 16-31
+	 * link-id :  4   |   5
+	 */
+	__le32 cu_vdev_map_3;
+	/* bits    : 0-15 | 16-31
+	 * link-id :  6   |   7
+	 */
+	__le32 cu_vdev_map_4; /* bits 63:32 */
+};
+
+struct ath12k_mgmt_rx_cu_arg {
+	u16 cu_vdev_map[CU_MAX_MLO_LINKS];
+	u8 *bpcc_bufp;
+};
+
 struct ath12k_wmi_mgmt_rx_arg {
 	u32 chan_freq;
 	u32 channel;
