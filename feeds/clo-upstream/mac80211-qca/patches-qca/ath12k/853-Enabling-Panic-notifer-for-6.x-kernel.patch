From 0b939edce9486bb9f896ce1f0f9b9f77618ad6cc Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Wed, 22 Nov 2023 22:20:15 +0530
Subject: [PATCH 1/1] wifi: ath12k: Enable Panic notifer for 6.x kernel

Currently when driver crashes due to some unexpected descriptor
from the rings, there is no logic to collect firmware rddm dump.
To debug such issues, MAC/FW needs the rddm dump.

Add panic notifier chain callback for ath12k module during insmod.
So that whenever driver panics, through the notifier chain
callback we collect the rddm dump of the firmware.

Refactor ath12k_core_issue_bugon to invoke BUG_ON if mlo_capable is
not true or chip_count exceeds number of chips started. In rest cases
we will just print the debug information.

Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c     | 13 +++----
 drivers/net/wireless/ath/ath12k/coredump.c | 43 ++++++++++++++++++++--
 2 files changed, 45 insertions(+), 11 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -8,6 +8,7 @@
 #include <linux/slab.h>
 #include <linux/remoteproc.h>
 #include <linux/firmware.h>
+#include <linux/panic_notifier.h>
 #include <linux/of.h>
 #include <linux/of_platform.h>
 
@@ -1754,31 +1755,36 @@ void ath12k_core_issue_bug_on(struct ath
 {
 	struct ath12k_hw_group *ag = ab->ag;
 
-	if ((ag->mlo_capable &&
-	    (atomic_read(&ath12k_coredump_ram_info.num_chip) >= ab->ag->num_started) &&
-	    (!ab->in_panic)) || (!ag->mlo_capable)) {
-		/* set in_panic to true to avoid multiple rddm download during
-		 * firmware crash
-		 */
-		ab->in_panic = true;
+	if (ab->in_panic)
+		goto out;
+
+	/* set in_panic to true to avoid multiple rddm download during
+	 * firmware crash
+	 */
+	ab->in_panic = true;
+
+	if (!ag->mlo_capable)
 		BUG_ON(1);
-	} else {
-		ath12k_info(ab,
-			    "%d chip dump collected and waiting for partner chips\n",
-			    atomic_read(&ath12k_coredump_ram_info.num_chip));
-	}
+
+	if (atomic_read(&ath12k_coredump_ram_info.num_chip) >= ab->ag->num_started)
+		BUG_ON(1);
+	else
+		goto out;
+
+out:
+	ath12k_info(ab,
+		    "%d chip dump collected and waiting for partner chips\n",
+		    atomic_read(&ath12k_coredump_ram_info.num_chip));
+
 }
 
 static void ath12k_coredump_download_ahb(struct ath12k_base *ab)
 {
 	struct ath12k_hw_group *ag = ab->ag;
 	int dump_count;
-	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-	struct ath12k_base *partner_ab;
-	int i;
 
 	/* Crash the system once all the stats are dumped */
-	if (ab->fw_recovery_support)
+	if (ab->fw_recovery_support && !ab->in_panic)
 		return;
 
 	if (ag->mlo_capable ) {
@@ -1789,16 +1795,8 @@ static void ath12k_coredump_download_ahb
 			return;
 		}
 	}
-	if (ab_ahb->tgt_rrproc->state == RPROC_CRASHED && ab->multi_pd_arch) {
-		for (i = 0; i < ag->num_chip; i++) {
-			partner_ab = ag->ab[i];
-			if (partner_ab->multi_pd_arch)
-				atomic_inc(&ath12k_coredump_ram_info.num_chip);
-		}
-	} else {
-		atomic_inc(&ath12k_coredump_ram_info.num_chip);
-	}
 
+	atomic_inc(&ath12k_coredump_ram_info.num_chip);
 	ath12k_core_issue_bug_on(ab);
 }
 
@@ -4085,7 +4083,6 @@ void *ath12k_get_ab_nd_peer_from_peer_ma
 
 #endif /* CPTCFG_ATH12K_SAWF */
 
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 
 static void ath12k_rddm_notifier(struct notifier_block *this,
 				 unsigned long event, void *ptr)
@@ -4102,9 +4099,7 @@ static void ath12k_rddm_notifier(struct
 			ab->in_panic = true;
 			if (ab->hif.bus == ATH12K_BUS_AHB ||
 			    ab->hif.bus == ATH12K_BUS_HYBRID)
-				ath12k_core_atomic_ssr_notifier_cb(&ab->atomic_ssr_nb,
-								   SUBSYS_PREPARE_FOR_FATAL_SHUTDOWN,
-								   ab->pdev);
+				ath12k_coredump_download_ahb(ab);
 			else
 				ath12k_coredump_download_rddm(ab);
 		}
@@ -4115,7 +4110,6 @@ static struct notifier_block rddm_notifi
 	.notifier_call  = ath12k_rddm_notifier,
 };
 
-#endif 
 
 static int ath12k_init(void)
 {
@@ -4126,12 +4120,10 @@ static int ath12k_init(void)
 		pr_err("Failed to register debugfs ath12k driver: %d\n", ret);
 		return ret;
 	}
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 
 	/* Add notifier to an atomic notifier chain to get the callback during BUG_ON
 	 */
 	atomic_notifier_chain_register(&panic_notifier_list, &rddm_notifier);
-#endif
 
 	ret = ath12k_ahb_init();
 	if (ret) {
@@ -4159,9 +4151,7 @@ error:
 
 static void ath12k_exit(void)
 {
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	atomic_notifier_chain_unregister(&panic_notifier_list, &rddm_notifier);
-#endif
 	ath12k_pci_exit();
 	ath12k_ahb_exit();
 	ath12k_debugfs_destroy();
--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -354,7 +354,8 @@ void ath12k_coredump_download_rddm(struc
 	}
 
 	num_seg = num_seg - skip_count;
-	if(!ab->fw_recovery_support) {
+
+	if (!ab->fw_recovery_support || ab->in_panic) {
 		if (ag->mlo_capable) {
 			dump_count = atomic_read(&ath12k_coredump_ram_info.num_chip);
 			if (dump_count >= ATH12K_MAX_SOCS) {
@@ -391,8 +392,7 @@ void ath12k_coredump_download_rddm(struc
 
 		ath12k_core_issue_bug_on(ab);
 
-	} else {
-		/* TODO dump collection for MLO when fw_recovery set */
+	} else if (!ab->in_panic) {
 		ath12k_info(ab, "WLAN target is restarting");
 		ath12k_coredump_build_inline(ab, segment, num_seg);
 		kfree(segment);
