From 9fe7e97a77ac65516d02b3e3128173c6f022c014 Mon Sep 17 00:00:00 2001
From: Saleemuddin Shaik <quic_saleemud@quicinc.com>
Date: Tue, 28 Nov 2023 07:43:06 +0530
Subject: [PATCH] wifi: ath12k: Add support to download rxgainlut.bin

Update the QMI sequence to download rxgainlut bin files, if rxgainlut
support is enabled in firmware, firmware will advertise in the
firmware capabalities based on that rxgainlut.bin is downloaded to
firmware over QMI.

Rxgainlut binaries are used as input parameters for front end modules
(FEM) configuration.

If it fails to download rxgainlut from board-2.bin, it will check for
rxgainlut.b<board_id> file in /lib/firmware/ directory, if it fails to
download, then it will check for rxgainlut.bin file.

Signed-off-by: Saleemuddin Shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 56 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/core.h |  3 ++
 drivers/net/wireless/ath/ath12k/hw.h   | 10 +++++
 drivers/net/wireless/ath/ath12k/qmi.c  | 36 +++++++++++++++++
 drivers/net/wireless/ath/ath12k/qmi.h  |  3 ++
 5 files changed, 108 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 9ae9e8366916..0993cd306e58 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -804,6 +804,62 @@ success:
 	ath12k_dbg(ab, ATH12K_DBG_BOOT, "using board api %hhu\n", bd_api);
 	return 0;
 }
+
+int ath12k_core_fetch_rxgainlut(struct ath12k_base *ab, struct ath12k_board_data *bd)
+{
+	char rxgainlutname[BOARD_NAME_SIZE] = {};
+	char rxgainlutdefaultname[BOARD_NAME_SIZE] = {};
+	int ret;
+	u8 bd_api;
+
+	ret = ath12k_core_create_board_name(ab, rxgainlutname,
+					    rxgainlutdefaultname);
+	if (ret) {
+		ath12k_err(ab, "failed to create rxgainlut name: %d", ret);
+		return ret;
+	}
+
+	bd_api = 2;
+	bd->ie_id = ATH12K_BD_IE_RXGAINLUT;
+	bd->name_id = ATH12K_BD_IE_RXGAINLUT_NAME;
+	bd->data_id = ATH12K_BD_IE_RXGAINLUT_DATA;
+	memcpy(bd->boardname, rxgainlutname, BOARD_NAME_SIZE);
+
+	ret = ath12k_core_fetch_board_data_api_n(ab, bd);
+
+	if (!ret)
+		goto success;
+
+	memcpy(bd->boardname, rxgainlutdefaultname, BOARD_NAME_SIZE);
+
+	ret = ath12k_core_fetch_board_data_api_n(ab, bd);
+
+	if (!ret)
+		goto success;
+
+	bd_api = 1;
+	snprintf(rxgainlutname, sizeof(rxgainlutname), "%s%04x",
+		 ATH12K_RXGAINLUT_FILE_PREFIX, ab->qmi.target.board_id);
+
+	ret = ath12k_core_fetch_board_data_api_1(ab, bd, rxgainlutname);
+	if (ret) {
+		ath12k_dbg(ab, ATH12K_DBG_BOOT, "failed to fetch %s from %s\n",
+			   rxgainlutname, ab->hw_params->fw.dir);
+
+		ret = ath12k_core_fetch_board_data_api_1(ab, bd,
+							 ATH12K_RXGAINLUT_FILE);
+		if (ret) {
+			ath12k_warn(ab, "failed to fetch default %s from %s\n",
+				    ATH12K_RXGAINLUT_FILE, ab->hw_params->fw.dir);
+			return -ENOENT;
+		}
+	}
+
+success:
+	ath12k_dbg(ab, ATH12K_DBG_BOOT, "using board api %hhu\n", bd_api);
+	return 0;
+}
+
 static void ath12k_core_stop(struct ath12k_base *ab)
 {
 	lockdep_assert_held(&ab->ag->mutex_lock);
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 44ddad3e739a..a928a8c1a53e 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1576,6 +1576,7 @@ struct ath12k_base {
 	bool recovery_start;
 
 	bool ce_pipe_init_done;
+	bool rxgainlut_support;
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
 };
@@ -1718,6 +1719,8 @@ int ath12k_core_fetch_bdf(struct ath12k_base *ath12k,
 			  struct ath12k_board_data *bd);
 int ath12k_core_fetch_regdb(struct ath12k_base *ath12k,
                             struct ath12k_board_data *bd);
+int ath12k_core_fetch_rxgainlut(struct ath12k_base *ath12k,
+				struct ath12k_board_data *bd);
 void ath12k_core_free_bdf(struct ath12k_base *ab, struct ath12k_board_data *bd);
 int ath12k_core_check_dt(struct ath12k_base *ath12k);
 
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index 6f8933538132..7d894dff951a 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -98,6 +98,8 @@
 #define ATH12K_M3_FILE			"m3.bin"
 #define ATH12K_REGDB_FILE_NAME		"regdb.bin"
 #define ATH12K_REGDB_BINARY		"regdb"
+#define ATH12K_RXGAINLUT_FILE_PREFIX	"rxgainlut.b"
+#define ATH12K_RXGAINLUT_FILE		"rxgainlut.bin"
 #define ATH12K_DEFAULT_ID		255
 
 enum ath12k_hw_rate_cck {
@@ -304,11 +306,17 @@ enum ath12k_bd_ie_regdb_type {
 	ATH12K_BD_IE_REGDB_DATA = 1,
 };
 
+enum ath12k_bd_ie_rxgainlut_type {
+	 ATH12K_BD_IE_RXGAINLUT_NAME = 0,
+	 ATH12K_BD_IE_RXGAINLUT_DATA = 1,
+};
+
 enum ath12k_bd_ie_type {
 	/* contains sub IEs of enum ath12k_bd_ie_board_type */
 	ATH12K_BD_IE_BOARD = 0,
 	ATH12K_BD_IE_REGDB = 1,
 	ATH12K_BD_IE_BOARD_EXT = 2,
+	ATH12K_BD_IE_RXGAINLUT = 3,
 };
 
 static inline const char *ath12k_bd_ie_type_str(enum ath12k_bd_ie_type type)
@@ -320,6 +328,8 @@ static inline const char *ath12k_bd_ie_type_str(enum ath12k_bd_ie_type type)
 		return "regdb data";
 	case ATH12K_BD_IE_BOARD_EXT:
 		return "board data ext";
+	case ATH12K_BD_IE_RXGAINLUT:
+		return "rxgainlut data";
 	}
 
 	return "unknown";
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index 24ce13692157..3f433acaf730 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -1706,6 +1706,24 @@ static struct qmi_elem_info qmi_wlanfw_cap_resp_msg_v01_ei[] = {
 		.offset		= offsetof(struct qmi_wlanfw_cap_resp_msg_v01, dev_mem),
 		.ei_array	= qmi_wlanfw_dev_mem_info_s_v01_ei,
 	},
+	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x25,
+		.offset         = offsetof(struct qmi_wlanfw_cap_resp_msg_v01,
+					   rxgainlut_support_valid),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_8_BYTE,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x25,
+		.offset         = offsetof(struct qmi_wlanfw_cap_resp_msg_v01,
+					   rxgainlut_support),
+	},
 	{
 		.data_type	= QMI_EOTI,
 		.array_type	= NO_ARRAY,
@@ -4463,6 +4481,11 @@ static int ath12k_qmi_request_target_cap(struct ath12k_base *ab)
 		}
 	}
 
+	if (resp.rxgainlut_support_valid)
+		ab->rxgainlut_support = !!resp.rxgainlut_support;
+
+	ath12k_info(ab, "rxgainlut_support %u\n", ab->rxgainlut_support);
+
 	if (resp.eeprom_caldata_read_timeout_valid) {
 		ab->qmi.target.eeprom_caldata = resp.eeprom_caldata_read_timeout;
 		ath12k_dbg(ab, ATH12K_DBG_QMI, "qmi cal data supported from eeprom\n");
@@ -4630,6 +4653,13 @@ static int ath12k_qmi_load_bdf_qmi(struct ath12k_base *ab,
 		}
 		type = ATH12K_QMI_BDF_TYPE_REGDB;
 		break;
+	case ATH12K_QMI_BDF_TYPE_RXGAINLUT:
+		ret = ath12k_core_fetch_rxgainlut(ab, &bd);
+		if (ret < 0) {
+			ath12k_warn(ab, "qmi failed to load rxgainlut\n");
+			goto out;
+		}
+		break;
 	case ATH12K_QMI_BDF_TYPE_CALIBRATION:
 
 		if (ab->qmi.target.eeprom_caldata) {
@@ -5678,6 +5708,12 @@ static int ath12k_qmi_event_load_bdf(struct ath12k_qmi *qmi)
 		return ret;
 	}
 
+	if (ab->rxgainlut_support) {
+		ret = ath12k_qmi_load_bdf_qmi(ab, ATH12K_QMI_BDF_TYPE_RXGAINLUT);
+		if (ret < 0)
+			ath12k_warn(ab, "qmi failed to load rxgainlut: %d\n", ret);
+	}
+
 	if (ab->hw_params->download_calib) {
 		ret = ath12k_qmi_load_bdf_qmi(ab, ATH12K_QMI_BDF_TYPE_CALIBRATION);
 		if (ret < 0)
diff --git a/drivers/net/wireless/ath/ath12k/qmi.h b/drivers/net/wireless/ath/ath12k/qmi.h
index e09f96595ae6..964fa394c38e 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -83,6 +83,7 @@ enum ath12k_qmi_bdf_type {
 	ATH12K_QMI_BDF_TYPE_ELF			= 1,
 	ATH12K_QMI_BDF_TYPE_REGDB		= 4,
 	ATH12K_QMI_BDF_TYPE_CALIBRATION		= 5,
+	ATH12K_QMI_BDF_TYPE_RXGAINLUT		= 7,
 };
 
 enum ath12k_qmi_event_type {
@@ -608,6 +609,8 @@ struct qmi_wlanfw_cap_resp_msg_v01 {
 	enum qmi_wlanfw_rd_card_chain_cap_v01 rd_card_chain_cap;
 	u8 dev_mem_info_valid;
 	struct qmi_wlanfw_dev_mem_info_s_v01 dev_mem[ATH12K_QMI_WLFW_MAX_DEV_MEM_NUM_V01];
+	u8 rxgainlut_support_valid;
+	u8 rxgainlut_support;
 };
 
 struct qmi_wlanfw_cap_req_msg_v01 {
-- 
2.17.1

