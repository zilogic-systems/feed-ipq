From 02d420a8fe63d410f440970f55cee269e51fcf26 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Mon, 20 Nov 2023 17:34:07 +0530
Subject: [PATCH] wifi: ath12k: fix indentation in rhash related functions

While adding rhash based peer lookup support, indentation was not
properly done leading to inconsistent code formatting. Fix it by
adding proper indentation to maintain code consistency.

Fixes: Ic63ef22b85 ("wifi: ath12k: Add peer rhash table support")
Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/peer.c | 263 +++++++++++++------------
 1 file changed, 133 insertions(+), 130 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/peer.c b/drivers/net/wireless/ath/ath12k/peer.c
index e1d1197..5b9254e 100644
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -837,204 +837,207 @@ int ath12k_ml_peer_delete(struct ath12k_hw *ah, struct ieee80211_sta *sta)
 		   sta->addr);
 	return 0;
 }
+
 int ath12k_peer_rhash_delete(struct ath12k_base *ab, struct ath12k_peer *peer)
 {
-		int ret;
+	int ret;
 
-		lockdep_assert_held(&ab->base_lock);
-		lockdep_assert_held(&ab->tbl_mtx_lock);
+	lockdep_assert_held(&ab->base_lock);
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
-		if (!ab->rhead_peer_id || !ab->rhead_peer_addr)
-				return -EPERM;
+	if (!ab->rhead_peer_id || !ab->rhead_peer_addr)
+		return -EPERM;
 
-		if (!peer->rhash_done)
-                        return 0;
+	if (!peer->rhash_done)
+		return 0;
 
-		ret = ath12k_peer_rhash_remove(ab, ab->rhead_peer_addr, &peer->rhash_addr,
-									   &ab->rhash_peer_addr_param);
-		if (ret) {
-				ath12k_warn(ab, "failed to remove peer %pM id %d in rhash_addr ret %d\n",
-							peer->addr, peer->peer_id, ret);
-				return ret;
-		}
+	ret = ath12k_peer_rhash_remove(ab, ab->rhead_peer_addr, &peer->rhash_addr,
+				       &ab->rhash_peer_addr_param);
+	if (ret) {
+		ath12k_warn(ab, "failed to remove peer %pM id %d in rhash_addr ret %d\n",
+			    peer->addr, peer->peer_id, ret);
+		return ret;
+	}
 
-		ret = ath12k_peer_rhash_remove(ab, ab->rhead_peer_id, &peer->rhash_id,
-									   &ab->rhash_peer_id_param);
-		if (ret) {
-				ath12k_warn(ab, "failed to remove peer %pM id %d in rhash_id ret %d\n",
-							peer->addr, peer->peer_id, ret);
-				return ret;
-		}
+	ret = ath12k_peer_rhash_remove(ab, ab->rhead_peer_id, &peer->rhash_id,
+				       &ab->rhash_peer_id_param);
+	if (ret) {
+		ath12k_warn(ab, "failed to remove peer %pM id %d in rhash_id ret %d\n",
+			    peer->addr, peer->peer_id, ret);
+		return ret;
+	}
 
-		peer->rhash_done=false;
+	peer->rhash_done = false;
 
-		return 0;
+	return 0;
 }
 
 static int ath12k_peer_rhash_id_tbl_init(struct ath12k_base *ab)
 {
-		struct rhashtable_params *param;
-		struct rhashtable *rhash_id_tbl;
-		int ret;
-		size_t size;
-
-		lockdep_assert_held(&ab->tbl_mtx_lock);
-
-		if (ab->rhead_peer_id)
-				return 0;
-
-		size = sizeof(*ab->rhead_peer_id);
-		rhash_id_tbl = kzalloc(size, GFP_KERNEL);
-		if (!rhash_id_tbl) {
-				ath12k_warn(ab, "failed to init rhash id table due to no mem (size %zu)\n",
-							size);
-				return -ENOMEM;
-		}
+	struct rhashtable_params *param;
+	struct rhashtable *rhash_id_tbl;
+	int ret;
+	size_t size;
 
-		param = &ab->rhash_peer_id_param;
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
-		param->key_offset = offsetof(struct ath12k_peer, peer_id);
-		param->head_offset = offsetof(struct ath12k_peer, rhash_id);
-		param->key_len = sizeof_field(struct ath12k_peer, peer_id);
-		param->automatic_shrinking = true;
-		param->nelem_hint = ab->num_radios * TARGET_NUM_PEERS_PDEV;
+	if (ab->rhead_peer_id)
+		return 0;
 
-		ret = rhashtable_init(rhash_id_tbl, param);
-		if (ret) {
-			ath12k_warn(ab, "failed to init peer id rhash table %d\n", ret);
-			goto err_free;
-		}
+	size = sizeof(*ab->rhead_peer_id);
+	rhash_id_tbl = kzalloc(size, GFP_KERNEL);
+	if (!rhash_id_tbl) {
+		ath12k_warn(ab, "failed to init rhash id table due to no mem (size %zu)\n",
+			    size);
+		return -ENOMEM;
+	}
 
-		spin_lock_bh(&ab->base_lock);
+	param = &ab->rhash_peer_id_param;
 
-		if (!ab->rhead_peer_id) {
-				ab->rhead_peer_id = rhash_id_tbl;
-		} else {
-				spin_unlock_bh(&ab->base_lock);
-				goto cleanup_tbl;
-		}
+	param->key_offset = offsetof(struct ath12k_peer, peer_id);
+	param->head_offset = offsetof(struct ath12k_peer, rhash_id);
+	param->key_len = sizeof_field(struct ath12k_peer, peer_id);
+	param->automatic_shrinking = true;
+	param->nelem_hint = ab->num_radios * TARGET_NUM_PEERS_PDEV;
+
+	ret = rhashtable_init(rhash_id_tbl, param);
+	if (ret) {
+		ath12k_warn(ab, "failed to init peer id rhash table %d\n", ret);
+		goto err_free;
+	}
+
+	spin_lock_bh(&ab->base_lock);
 
+	if (!ab->rhead_peer_id) {
+		ab->rhead_peer_id = rhash_id_tbl;
+	} else {
 		spin_unlock_bh(&ab->base_lock);
+		goto cleanup_tbl;
+	}
 
-		return 0;
+	spin_unlock_bh(&ab->base_lock);
+
+	return 0;
 
 cleanup_tbl:
-		rhashtable_destroy(rhash_id_tbl);
+	rhashtable_destroy(rhash_id_tbl);
 err_free:
-		kfree(rhash_id_tbl);
+	kfree(rhash_id_tbl);
 
-		return ret;
+	return ret;
 }
 
 static int ath12k_peer_rhash_addr_tbl_init(struct ath12k_base *ab)
 {
-		struct rhashtable_params *param;
-		struct rhashtable *rhash_addr_tbl;
-		int ret;
-		size_t size;
-
-		lockdep_assert_held(&ab->tbl_mtx_lock);
-
-		if (ab->rhead_peer_addr)
-				return 0;
-
-		size = sizeof(*ab->rhead_peer_addr);
-		rhash_addr_tbl = kzalloc(size, GFP_KERNEL);
-		if (!rhash_addr_tbl) {
-				ath12k_warn(ab, "failed to init rhash addr table due to no mem (size %zu)\n",
-							size);
-				return -ENOMEM;
-		}
-		param = &ab->rhash_peer_addr_param;
+	struct rhashtable_params *param;
+	struct rhashtable *rhash_addr_tbl;
+	int ret;
+	size_t size;
 
-		param->key_offset = offsetof(struct ath12k_peer, addr);
-		param->head_offset = offsetof(struct ath12k_peer, rhash_addr);
-		param->key_len = sizeof_field(struct ath12k_peer, addr);
-		param->automatic_shrinking = true;
-		param->nelem_hint = ab->num_radios * TARGET_NUM_PEERS_PDEV;
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
-		ret = rhashtable_init(rhash_addr_tbl, param);
-		if (ret) {
-				ath12k_warn(ab, "failed to init peer addr rhash table %d\n", ret);
-				goto err_free;
-		}
+	if (ab->rhead_peer_addr)
+		return 0;
+
+	size = sizeof(*ab->rhead_peer_addr);
+	rhash_addr_tbl = kzalloc(size, GFP_KERNEL);
+	if (!rhash_addr_tbl) {
+		ath12k_warn(ab, "failed to init rhash addr table due to no mem (size %zu)\n",
+			    size);
+		return -ENOMEM;
+	}
 
-		spin_lock_bh(&ab->base_lock);
+	param = &ab->rhash_peer_addr_param;
 
-		if (!ab->rhead_peer_addr) {
-				ab->rhead_peer_addr = rhash_addr_tbl;
-		} else {
-				spin_unlock_bh(&ab->base_lock);
-				goto cleanup_tbl;
-		}
+	param->key_offset = offsetof(struct ath12k_peer, addr);
+	param->head_offset = offsetof(struct ath12k_peer, rhash_addr);
+	param->key_len = sizeof_field(struct ath12k_peer, addr);
+	param->automatic_shrinking = true;
+	param->nelem_hint = ab->num_radios * TARGET_NUM_PEERS_PDEV;
 
+	ret = rhashtable_init(rhash_addr_tbl, param);
+	if (ret) {
+		ath12k_warn(ab, "failed to init peer addr rhash table %d\n", ret);
+		goto err_free;
+	}
+
+	spin_lock_bh(&ab->base_lock);
+
+	if (!ab->rhead_peer_addr) {
+		ab->rhead_peer_addr = rhash_addr_tbl;
+	} else {
 		spin_unlock_bh(&ab->base_lock);
+		goto cleanup_tbl;
+	}
 
-		return 0;
+	spin_unlock_bh(&ab->base_lock);
+
+	return 0;
 
 cleanup_tbl:
-		rhashtable_destroy(rhash_addr_tbl);
+	rhashtable_destroy(rhash_addr_tbl);
 err_free:
-		kfree(rhash_addr_tbl);
+	kfree(rhash_addr_tbl);
 
-		return ret;
+	return ret;
 }
 
 static inline void ath12k_peer_rhash_id_tbl_destroy(struct ath12k_base *ab)
 {
-		lockdep_assert_held(&ab->tbl_mtx_lock);
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
-		if (!ab->rhead_peer_id)
-				return;
+	if (!ab->rhead_peer_id)
+		return;
 
-		rhashtable_destroy(ab->rhead_peer_id);
-		kfree(ab->rhead_peer_id);
-		ab->rhead_peer_id = NULL;
+	rhashtable_destroy(ab->rhead_peer_id);
+	kfree(ab->rhead_peer_id);
+	ab->rhead_peer_id = NULL;
 }
 
 static inline void ath12k_peer_rhash_addr_tbl_destroy(struct ath12k_base *ab)
 {
-		lockdep_assert_held(&ab->tbl_mtx_lock);
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
-		if (!ab->rhead_peer_addr)
-				return;
+	if (!ab->rhead_peer_addr)
+		return;
 
-		rhashtable_destroy(ab->rhead_peer_addr);
-		kfree(ab->rhead_peer_addr);
-		ab->rhead_peer_addr = NULL;
+	rhashtable_destroy(ab->rhead_peer_addr);
+	kfree(ab->rhead_peer_addr);
+	ab->rhead_peer_addr = NULL;
 }
 
 int ath12k_peer_rhash_tbl_init(struct ath12k_base *ab)
 {
-		int ret;
+	int ret;
 
-		mutex_lock(&ab->tbl_mtx_lock);
+	mutex_lock(&ab->tbl_mtx_lock);
 
-		ret = ath12k_peer_rhash_id_tbl_init(ab);
-		if (ret)
-			goto out;
+	ret = ath12k_peer_rhash_id_tbl_init(ab);
+	if (ret)
+		goto out;
 
-		ret = ath12k_peer_rhash_addr_tbl_init(ab);
-		if (ret)
-				goto cleanup_tbl;
+	ret = ath12k_peer_rhash_addr_tbl_init(ab);
+	if (ret)
+		goto cleanup_tbl;
 
-		mutex_unlock(&ab->tbl_mtx_lock);
+	mutex_unlock(&ab->tbl_mtx_lock);
 
-		return 0;
+	return 0;
 
 cleanup_tbl:
-		ath12k_peer_rhash_id_tbl_destroy(ab);
+	ath12k_peer_rhash_id_tbl_destroy(ab);
 out:
-		mutex_unlock(&ab->tbl_mtx_lock);
-		return ret;
+	mutex_unlock(&ab->tbl_mtx_lock);
+	return ret;
 }
+
 void ath12k_peer_rhash_tbl_destroy(struct ath12k_base *ab)
 {
-		mutex_lock(&ab->tbl_mtx_lock);
+	mutex_lock(&ab->tbl_mtx_lock);
 
-		ath12k_peer_rhash_addr_tbl_destroy(ab);
-		ath12k_peer_rhash_id_tbl_destroy(ab);
+	ath12k_peer_rhash_addr_tbl_destroy(ab);
+	ath12k_peer_rhash_id_tbl_destroy(ab);
 
-		mutex_unlock(&ab->tbl_mtx_lock);
+	mutex_unlock(&ab->tbl_mtx_lock);
 }
 
-- 
2.17.1

