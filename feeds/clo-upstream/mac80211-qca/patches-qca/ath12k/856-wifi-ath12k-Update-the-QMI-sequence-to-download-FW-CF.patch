From 579af36124ed84b92e09050a207a4db610167e1d Mon Sep 17 00:00:00 2001
From: Madhavan Ganesan <quic_madhgane@quicinc.com>
Date: Tue, 21 Nov 2023 08:22:39 +0530
Subject: [RFC] ath12k: Update the QMI sequence to download FW CFG

Add the new QMI message for downloading the firmware.dat file to
Target if the file is present in firmware path.

If the file is present, then set the flag in Host Capability QMI
request to indicate the Target about the firmware.dat file to be
downloaded in next QMI message. The Target will take the AFC data
from the FW CFG QMI message.

If the file is not present in firmware path, the flag will be
reset in Host Capability and the Target will take the default
data instead of getting it from the FW CFG QMI message.

Signed-off-by: Madhavan Ganesan <quic_madhgane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  18 ++
 drivers/net/wireless/ath/ath12k/core.h |   3 +
 drivers/net/wireless/ath/ath12k/hw.h   |   1 +
 drivers/net/wireless/ath/ath12k/qmi.c  | 285 +++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/qmi.h  |  33 ++-
 5 files changed, 338 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -805,6 +805,24 @@ success:
 	return 0;
 }
 
+int ath12k_core_fetch_fw_cfg(struct ath12k_base *ab,
+			     struct ath12k_board_data *bd)
+{
+	int ret;
+
+	ret = ath12k_core_fetch_board_data_api_1(ab, bd, ATH12K_FW_CFG_FILE);
+	if (ret) {
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "failed to fetch %s from %s\n",
+			   ATH12K_FW_CFG_FILE, ab->hw_params->fw.dir);
+		return -ENOENT;
+	}
+
+	ath12k_info(ab, "fetching %s from %s\n", ATH12K_FW_CFG_FILE,
+		    ab->hw_params->fw.dir);
+
+	return 0;
+}
+
 int ath12k_core_fetch_rxgainlut(struct ath12k_base *ab, struct ath12k_board_data *bd)
 {
 	char rxgainlutname[BOARD_NAME_SIZE] = {};
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1575,6 +1575,7 @@ struct ath12k_base {
 	bool multi_pd_arch;
 	/* Mode1 specific flag to identify recovering pdev */
 	bool recovery_start;
+	bool fw_cfg_support;
 
 	bool ce_pipe_init_done;
 	bool rxgainlut_support;
@@ -1720,6 +1721,8 @@ int ath12k_core_fetch_bdf(struct ath12k_
 			  struct ath12k_board_data *bd);
 int ath12k_core_fetch_regdb(struct ath12k_base *ath12k,
                             struct ath12k_board_data *bd);
+int ath12k_core_fetch_fw_cfg(struct ath12k_base *ath12k,
+			     struct ath12k_board_data *bd);
 int ath12k_core_fetch_rxgainlut(struct ath12k_base *ath12k,
 				struct ath12k_board_data *bd);
 void ath12k_core_free_bdf(struct ath12k_base *ab, struct ath12k_board_data *bd);
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -101,6 +101,7 @@
 #define ATH12K_RXGAINLUT_FILE_PREFIX	"rxgainlut.b"
 #define ATH12K_RXGAINLUT_FILE		"rxgainlut.bin"
 #define ATH12K_DEFAULT_ID		255
+#define ATH12K_FW_CFG_FILE		"firmware.dat"
 
 enum ath12k_hw_rate_cck {
 	ATH12K_HW_RATE_CCK_LP_11M = 0,
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -693,6 +693,24 @@ static struct qmi_elem_info qmi_wlanfw_h
 					   feature_list),
 	},
 	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x2E,
+		.offset         = offsetof(struct qmi_wlanfw_host_cap_req_msg_v01,
+					   fw_cfg_support_valid),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_1_BYTE,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x2E,
+		.offset         = offsetof(struct qmi_wlanfw_host_cap_req_msg_v01,
+					   fw_cfg_support),
+	},
+	{
 		.data_type	= QMI_EOTI,
 		.array_type	= NO_ARRAY,
 		.tlv_type	= QMI_COMMON_TLV_TYPE,
@@ -716,6 +734,131 @@ static struct qmi_elem_info qmi_wlanfw_h
 	},
 };
 
+struct qmi_elem_info wlanfw_cfg_download_req_msg_v01_ei[] = {
+	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x10,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   file_type_valid),
+	},
+	{
+		.data_type      = QMI_SIGNED_4_BYTE_ENUM,
+		.elem_len       = 1,
+		.elem_size      = sizeof(enum wlanfw_cfg_type_v01),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x10,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   file_type),
+	},
+	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x11,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   total_size_valid),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_4_BYTE,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u32),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x11,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   total_size),
+	},
+	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x12,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   seg_id_valid),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_4_BYTE,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u32),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x12,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   seg_id),
+	},
+	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x13,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   data_valid),
+	},
+	{
+		.data_type      = QMI_DATA_LEN,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u16),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x13,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   data_len),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_1_BYTE,
+		.elem_len       = QMI_WLANFW_MAX_DATA_SIZE_V01,
+		.elem_size      = sizeof(u8),
+		.array_type     = VAR_LEN_ARRAY,
+		.tlv_type       = 0x13,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   data),
+	},
+	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x14,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   end_valid),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_1_BYTE,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x14,
+		.offset         = offsetof(struct wlanfw_cfg_download_req_msg_v01,
+					   end),
+	},
+	{
+		.data_type      = QMI_EOTI,
+		.array_type     = NO_ARRAY,
+		.tlv_type       = QMI_COMMON_TLV_TYPE,
+	},
+};
+
+struct qmi_elem_info wlanfw_cfg_download_resp_msg_v01_ei[] = {
+	{
+		.data_type      = QMI_STRUCT,
+		.elem_len       = 1,
+		.elem_size      = sizeof(struct qmi_response_type_v01),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x02,
+		.offset         = offsetof(struct wlanfw_cfg_download_resp_msg_v01,
+					   resp),
+		.ei_array       = qmi_response_type_v01_ei,
+	},
+	{
+		.data_type      = QMI_EOTI,
+		.array_type     = NO_ARRAY,
+		.tlv_type       = QMI_COMMON_TLV_TYPE,
+	},
+};
+
 static struct qmi_elem_info qmi_wlanfw_phy_cap_req_msg_v01_ei[] = {
 	{
 		.data_type	= QMI_EOTI,
@@ -2995,6 +3138,7 @@ static int ath12k_qmi_host_cap_send(stru
 {
 	struct qmi_wlanfw_host_cap_req_msg_v01 req;
 	struct qmi_wlanfw_host_cap_resp_msg_v01 resp;
+	struct ath12k_board_data bd;
 	struct device_node *root;
 	const char *model = NULL;
 	struct qmi_txn txn = {};
@@ -3062,6 +3206,14 @@ static int ath12k_qmi_host_cap_send(stru
 		req.nm_modem |= PLATFORM_CAP_PCIE_GLOBAL_RESET;
 	}
 
+	ret = ath12k_core_fetch_fw_cfg(ab, &bd);
+	if (!ret) {
+		req.fw_cfg_support_valid = 1;
+		req.fw_cfg_support = 1;
+	}
+	ab->fw_cfg_support = !!req.fw_cfg_support;
+	ath12k_core_free_bdf(ab, &bd);
+
 	ret = ath12k_qmi_fill_mlo_host_caps(ab, &req);
 	if (ret < 0) {
 		ath12k_warn(ab, "Failed to get MLO capability,err = %d\n", ret);
@@ -4618,6 +4770,91 @@ out:
 	return ret;
 }
 
+static int ath12k_qmi_fw_cfg_send_sync(struct ath12k_base *ab,
+				       const u8 *data, u32 len,
+				       enum wlanfw_cfg_type_v01 file_type)
+{
+	struct wlanfw_cfg_download_req_msg_v01 *req;
+	struct wlanfw_cfg_download_resp_msg_v01 *resp;
+	struct qmi_txn txn;
+	int ret = 0;
+	const u8 *temp = data;
+	unsigned int remaining = len;
+
+	req = kzalloc(sizeof(*req), GFP_KERNEL);
+	if (!req)
+		return -ENOMEM;
+
+	resp = kzalloc(sizeof(*resp), GFP_KERNEL);
+	if (!resp) {
+		kfree(req);
+		return -ENOMEM;
+	}
+
+	while (remaining) {
+		req->file_type_valid = 1;
+		req->file_type = file_type;
+		req->total_size_valid = 1;
+		req->total_size = remaining;
+		req->seg_id_valid = 1;
+		req->data_valid = 1;
+		req->end_valid = 1;
+
+		if (remaining > QMI_WLANFW_MAX_DATA_SIZE_V01) {
+			req->data_len = QMI_WLANFW_MAX_DATA_SIZE_V01;
+		} else {
+			req->data_len = remaining;
+			req->end = 1;
+		}
+
+		memcpy(req->data, temp, req->data_len);
+
+		ret = qmi_txn_init(&ab->qmi.handle, &txn,
+				   wlanfw_cfg_download_resp_msg_v01_ei,
+				   resp);
+		if (ret < 0) {
+			ath12k_dbg(ab, ATH12K_DBG_QMI, "Failed to initialize txn for FW file download request, err: %d\n",
+				   ret);
+			goto err;
+		}
+
+		ret = qmi_send_request(&ab->qmi.handle, NULL, &txn,
+				       QMI_WLANFW_CFG_DOWNLOAD_REQ_V01,
+				       WLANFW_CFG_DOWNLOAD_REQ_MSG_V01_MAX_MSG_LEN,
+				       wlanfw_cfg_download_req_msg_v01_ei, req);
+		if (ret < 0) {
+			qmi_txn_cancel(&txn);
+			ath12k_dbg(ab, ATH12K_DBG_QMI, "Failed to send FW File download request, err: %d\n",
+				   ret);
+			goto err;
+		}
+
+		ret = qmi_txn_wait(&txn, ATH12K_QMI_WLANFW_TIMEOUT_MS);
+		if (ret < 0) {
+			ath12k_dbg(ab, ATH12K_DBG_QMI, "Failed to wait for response of FW File download request, err: %d\n",
+				   ret);
+			goto err;
+		}
+
+		if (resp->resp.result != QMI_RESULT_SUCCESS_V01) {
+			ath12k_dbg(ab, ATH12K_DBG_QMI, "FW file download request failed, result: %d, err: %d\n",
+				   resp->resp.result, resp->resp.error);
+			ret = -resp->resp.result;
+			goto err;
+		}
+
+		remaining -= req->data_len;
+		temp += req->data_len;
+		req->seg_id++;
+	}
+
+err:
+	kfree(req);
+	kfree(resp);
+
+	return ret;
+}
+
 static int ath12k_qmi_load_bdf_qmi(struct ath12k_base *ab,
 				   enum ath12k_qmi_bdf_type type)
 {
@@ -5304,6 +5541,29 @@ static int ath12k_qmi_event_server_arriv
 	return ret;
 }
 
+static int ath12k_qmi_fw_cfg(struct ath12k_base *ab)
+{
+	struct ath12k_board_data bd;
+	int ret;
+
+	ret = ath12k_core_fetch_fw_cfg(ab, &bd);
+	if (ret < 0) {
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "qmi failed to fetch FW CFG file:%d\n", ret);
+		goto out;
+	}
+	ret = ath12k_qmi_fw_cfg_send_sync(ab, bd.data,
+					  bd.len, WLANFW_CFG_FILE_V01);
+	if (ret < 0)
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "qmi failed to load FW CFG file\n");
+
+out:
+	ath12k_core_free_bdf(ab, &bd);
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "qmi FW CFG download sequence completed, ret: %d\n",
+		   ret);
+
+	return ret;
+}
+
 static int ath12k_qmi_event_host_cap(struct ath12k_qmi *qmi)
 {
 	struct ath12k_base *ab = qmi->ab;
@@ -5317,6 +5577,13 @@ static int ath12k_qmi_event_host_cap(str
 	}
 	set_bit(ATH12K_FLAG_QMI_HOST_CAP_SENT, &ab->dev_flags);
 
+	if (!ab->fw_cfg_support) {
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "FW CFG file is not supported\n");
+		return 0;
+	}
+
+	ret = ath12k_qmi_fw_cfg(ab);
+
 	return ret;
 }
 
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -246,7 +246,7 @@ struct qmi_wlanfw_qdss_trace_mode_resp_m
 	struct qmi_response_type_v01 resp;
 };
 
-#define QMI_WLANFW_HOST_CAP_REQ_MSG_V01_MAX_LEN		351
+#define QMI_WLANFW_HOST_CAP_REQ_MSG_V01_MAX_LEN		355
 
 struct qmi_wlanfw_m3_dump_upload_done_req_msg_v01 {
 	u32 pdev_id;
@@ -355,7 +355,8 @@ struct qmi_wlanfw_host_cap_req_msg_v01 {
 	struct wlfw_host_mlo_chip_info_s_v01 mlo_chip_info[QMI_WLFW_MAX_NUM_MLO_CHIPS_V01];
 	u8 feature_list_valid;
 	u64 feature_list;
-
+	u8 fw_cfg_support_valid;
+	u8 fw_cfg_support;
 };
 
 struct qmi_wlanfw_host_cap_resp_msg_v01 {
@@ -799,6 +800,34 @@ struct qmi_wlanfw_m3_dump_upload_req_ind
 	u64 size;
 };
 
+#define QMI_WLANFW_CFG_DOWNLOAD_REQ_V01 0x0056
+#define QMI_WLANFW_CFG_DOWNLOAD_RESP_V01 0x0056
+enum wlanfw_cfg_type_v01 {
+	WLANFW_CFG_TYPE_MIN_VAL_V01 = INT_MIN,
+	WLANFW_CFG_FILE_V01 = 0,
+	WLANFW_CFG_TYPE_MAX_VAL_V01 = INT_MAX,
+};
+
+#define WLANFW_CFG_DOWNLOAD_REQ_MSG_V01_MAX_MSG_LEN 6174
+struct wlanfw_cfg_download_req_msg_v01 {
+	u8 file_type_valid;
+	enum wlanfw_cfg_type_v01 file_type;
+	u8 total_size_valid;
+	u32 total_size;
+	u8 seg_id_valid;
+	u32 seg_id;
+	u8 data_valid;
+	u32 data_len;
+	u8 data[QMI_WLANFW_MAX_DATA_SIZE_V01];
+	u8 end_valid;
+	u8 end;
+};
+
+#define WLANFW_CFG_DOWNLOAD_RESP_MSG_V01_MAX_MSG_LEN 7
+struct wlanfw_cfg_download_resp_msg_v01 {
+	struct qmi_response_type_v01 resp;
+};
+
 int ath12k_qmi_firmware_start(struct ath12k_base *ab,
 			      u32 mode);
 void ath12k_qmi_firmware_stop(struct ath12k_base *ab);
