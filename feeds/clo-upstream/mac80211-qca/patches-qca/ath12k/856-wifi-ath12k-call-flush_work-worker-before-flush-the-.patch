From b916a64f2d199cfae4c2012685a56b84bdcfb80f Mon Sep 17 00:00:00 2001
From: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
Date: Fri, 23 Feb 2024 15:50:52 +0530
Subject: [PATCH] wifi: ath12k: call flush_work worker before flush the radios

There is a chance of mgmt tx workqueue and op_flush to go
mutually exclusive as both are acquring the ah->mutex_lock.
During that time, if op_flush acquried the mutex_lock first
then the wait for event timeout would happen due to the wmi
mgmt tx completion is not received because of wmi mgmt tx
workqueue is waiting for the mutex_lock to be released by
op_flush.
This leads to transmit the pending mgmt packet after flush
which is not the correct way.

Hence, flush the workqueue in the op_flush before flush all
the radios with flush_work API (wait for the work to finish
executing the last queueing instance) to avoid the above scenario.

Signed-off-by: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -13790,6 +13790,21 @@ static void ath12k_mac_op_flush(struct i
 	if (drop)
 		return;
 
+	/* There is a chance of mgmt tx workqueue and op_flush to go
+	 * mutually exclusive as both are acquiring the ah->mutex_lock.
+	 * During that time, if op_flush acquired the mutex_lock first
+	 * then the wait for event timeout happen due to the wmi mgmt tx
+	 * completion is not received because of wmi mgmt tx workqueue is
+	 * waiting for the mutex_lock to be release by op_flush.
+	 * Hence, flush the work in the op_flush before flush all the
+	 * radios to avoid the above scenario.
+	 */
+
+	for (i = 0; i < ah->num_radio; i++) {
+		ar = &ah->radio[i];
+		flush_work(&ar->wmi_mgmt_tx_work);
+	}
+
 	mutex_lock(&ah->conf_mutex);
 
 	if (!vif) {
