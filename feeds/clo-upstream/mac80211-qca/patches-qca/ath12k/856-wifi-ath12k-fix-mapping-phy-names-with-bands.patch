From 1c2dd0bfcf08bce950223e2b3c4090f6a72d503d Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Wed, 13 Dec 2023 16:36:24 +0530
Subject: [PATCH] wifi: ath12k: fix mapping phy names with bands

mac80211 is assigning wiphy idx based on the radio probing,
during the simultaneous wiphy idx is assigned randomly for
each radios without maintaining the order.
Due to this phy mapping with bands is getting changed randomly
on reboot and cause problems.

Use ieee80211_alloc_hw_nm() to allocate hw object for fixed phy
mapping with bands. Specify the phy name based on the
bands(2 GHz/5 GHz/6 GHz).

2 GHz            - phy00
5 GHz/5 GHz Low  - phy01
5 GHz High       - phy02
6 GHz            - phy03

In single wiphy case, only one interface name will be registered
for all the radios based on the probing order. Set phy name
by sorting all the pdev phy names in ascending order.

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  6 ++++++
 drivers/net/wireless/ath/ath12k/mac.c  | 24 +++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.c  | 11 +++++++++++
 3 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index cf786d3..116f17a 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -50,6 +50,11 @@
 
 extern unsigned int ath12k_frame_mode;
 
+#define ATH12K_PHY_2GHZ "phy00"
+#define ATH12K_PHY_5GHZ "phy01"
+#define ATH12K_PHY_5GHZ_LOW "phy01"
+#define ATH12K_PHY_5GHZ_HIGH "phy02"
+#define ATH12K_PHY_6GHZ "phy03"
 
 extern bool ath12k_debug_critical;
 #define ATH12K_MON_TIMER_INTERVAL  10
@@ -1145,6 +1150,7 @@ struct ath12k_pdev {
 	struct ath12k_pdev_cap cap;
 	u8 mac_addr[ETH_ALEN];
 	struct mlo_timestamp timestamp;
+	const char *phy_name;
 };
 
 struct pmm_remap {
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 5312942..a7f18ef 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -16924,11 +16924,27 @@ int ath12k_mac_allocate(struct ath12k_hw_group *ag)
 	int i, j, total_radio, num_radios, ret;
 	int mac_id, chip_id;
 	u8 link_id, num_hw;
+	struct ath12k_pdev *pdev;
+	char *mlo_phy_name;
 
 	total_radio = 0;
 	for (i = 0; i < ag->num_chip; i++)
 		total_radio += ag->ab[i]->num_radios;
 
+	if (ag->mlo_capable) {
+		ab = ag->ab[0];
+		pdev = &ab->pdevs[0];
+		mlo_phy_name = pdev->phy_name;
+		for (i = 0; i < ag->num_chip; i++) {
+			for (j = 0; j < ag->ab[i]->num_radios; j++) {
+				ab = ag->ab[i];
+				pdev = &ab->pdevs[j];
+				if (strcmp(mlo_phy_name, pdev->phy_name) > 0)
+					mlo_phy_name = pdev->phy_name;
+			}
+		}
+	}
+
 	/* All pdev get combined and register as single wiphy if MLO capable
 	 * is enabled. where as in other group, each pdev get register separately.
 	 */
@@ -16948,6 +16964,9 @@ int ath12k_mac_allocate(struct ath12k_hw_group *ag)
 	mac_id = 0;
 	chip_id = 0;
 	for (i = 0; i < num_hw; i++) {
+		ab = ag->ab[chip_id];
+		pdev = &ab->pdevs[i];
+
 		ops = kmemdup(&ath12k_ops, sizeof(ath12k_ops), GFP_KERNEL);
 		if (!ops) {
 			ret = -ENOMEM;
@@ -16955,7 +16974,10 @@ int ath12k_mac_allocate(struct ath12k_hw_group *ag)
 		}
 
 		len = sizeof(struct ath12k_hw) + (num_radios * sizeof(struct ath12k));
-		hw = ieee80211_alloc_hw(len, ops);
+		if (ag->mlo_capable)
+			hw = ieee80211_alloc_hw_nm(len, ops, mlo_phy_name);
+		else
+			hw = ieee80211_alloc_hw_nm(len, ops, pdev->phy_name);
 		if (!hw) {
 			kfree(ops);
 			ret = -ENOMEM;
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 24dbe4c..e2dc8e7 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -5537,10 +5537,21 @@ ath12k_fill_band_to_mac_param(struct ath12k_base  *soc,
 		case WMI_HOST_WLAN_2G_CAP:
 			arg[i].start_freq = hal_reg_cap->low_2ghz_chan;
 			arg[i].end_freq = hal_reg_cap->high_2ghz_chan;
+			pdev->phy_name = ATH12K_PHY_2GHZ;
 			break;
 		case WMI_HOST_WLAN_5G_CAP:
 			arg[i].start_freq = hal_reg_cap->low_5ghz_chan;
 			arg[i].end_freq = hal_reg_cap->high_5ghz_chan;
+			if (hal_reg_cap->high_5ghz_chan <= ATH12K_MIN_5G_HIGH_BAND_FREQ)
+				pdev->phy_name = ATH12K_PHY_5GHZ_LOW;
+			else if (hal_reg_cap->low_5ghz_chan >= ATH12K_MAX_5G_LOW_BAND_FREQ &&
+				 hal_reg_cap->high_5ghz_chan <= ATH12K_MIN_6G_FREQ)
+				pdev->phy_name = ATH12K_PHY_5GHZ_HIGH;
+			else if (hal_reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ &&
+				 hal_reg_cap->high_5ghz_chan <= ATH12K_MAX_6G_FREQ)
+				pdev->phy_name = ATH12K_PHY_6GHZ;
+			else
+				pdev->phy_name = ATH12K_PHY_5GHZ;
 			break;
 		default:
 			break;
-- 
2.17.1

