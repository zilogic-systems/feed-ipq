From 597eb1320aaacbf42eaa968f36259069a0878a21 Mon Sep 17 00:00:00 2001
From: Shivani Tambatkar <quic_stambatk@quicinc.com>
Date: Tue, 28 Nov 2023 17:40:41 -0800
Subject: [PATCH 6/8] wifi: ath12k: add device bandwidth parameters to vdev
 start

Add device bandwidth parameters, center frequency and bandwidth, to
structures wmi_vdev_start_req_arg, wmi_pdev_multiple_vdev_restart_req_arg
to be passed to firmware.

Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c |  13 ++
 drivers/net/wireless/ath/ath12k/wmi.c | 180 +++++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/wmi.h |   4 +
 3 files changed, 166 insertions(+), 31 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11733,6 +11733,11 @@ static int ath12k_mac_vdev_start_restart
 	arg.channel.max_reg_power = chandef->chan->max_reg_power;
 	arg.channel.max_antenna_gain = chandef->chan->max_antenna_gain;
 	arg.punct_bitmap = ~chandef->ru_punct_bitmap;
+	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT,
+				 ar->ab->wmi_ab.svc_map)) {
+		arg.width_device = chandef->width_device;
+		arg.center_freq_device = chandef->center_freq_device;
+	}
 
 	arg.pref_tx_streams = ar->num_tx_chains;
 	arg.pref_rx_streams = ar->num_rx_chains;
@@ -12179,6 +12184,13 @@ ath12k_mac_multi_vdev_restart(struct ath
 	arg.channel.freq2_radar = radar_enabled;
 	arg.channel.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
 	arg.ru_punct_bitmap = ~chandef->ru_punct_bitmap;
+
+	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT,
+		     ar->ab->wmi_ab.svc_map)) {
+		arg.width_device = chandef->width_device;
+		arg.center_freq_device = chandef->center_freq_device;
+	}
+
 	ret = ath12k_wmi_pdev_multiple_vdev_restart(ar, &arg);
 	if (ret)
 		ath12k_warn(ab, "mac failed to do mvr (%d)\n", ret);
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1518,6 +1518,79 @@ int ath12k_wmi_vdev_down(struct ath12k *
 	return ret;
 }
 
+static inline bool
+ath12k_wmi_check_device_present(u32 width_device,
+				u32 center_freq_device,
+				u32 center_freq_oper)
+{
+	return (center_freq_device && width_device &&
+		center_freq_device != center_freq_oper);
+}
+
+static void ath12k_wmi_set_wmi_channel_device(struct ath12k_wmi_channel_params *chan_device,
+					      struct wmi_channel_arg *channel,
+					      u32 cf_device, u32 width_device)
+{
+	enum wmi_phy_mode mode_device;
+
+	memset(chan_device, 0, sizeof(*chan_device));
+
+	chan_device->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_CHANNEL,
+							 sizeof(*chan_device));
+	chan_device->mhz = cpu_to_le32(channel->freq);
+	chan_device->band_center_freq1 = cpu_to_le32(cf_device);
+
+	if (width_device == NL80211_CHAN_WIDTH_320) {
+		mode_device = MODE_11BE_EHT320;
+		if (channel->freq > chan_device->band_center_freq1)
+			chan_device->band_center_freq1 = cf_device + 80;
+		else
+			chan_device->band_center_freq1 = cf_device - 80;
+		chan_device->band_center_freq2 = cf_device;
+	} else if (width_device == NL80211_CHAN_WIDTH_160) {
+		mode_device = MODE_11BE_EHT160;
+		if (channel->freq > chan_device->band_center_freq1)
+			chan_device->band_center_freq1 = cf_device + 40;
+		else
+			chan_device->band_center_freq1 = cf_device - 40;
+		chan_device->band_center_freq2 = cf_device;
+	} else if (width_device == NL80211_CHAN_WIDTH_80) {
+		mode_device = MODE_11BE_EHT80;
+	} else if (width_device == NL80211_CHAN_WIDTH_40) {
+		mode_device = MODE_11BE_EHT40;
+	} else {
+		mode_device = MODE_UNKNOWN;
+	}
+
+	chan_device->info |= le32_encode_bits(mode_device, WMI_CHAN_INFO_MODE);
+	if (channel->passive)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_PASSIVE);
+	if (channel->allow_ibss)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_ADHOC_ALLOWED);
+	if (channel->allow_ht)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_ALLOW_HT);
+	if (channel->allow_vht)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_ALLOW_VHT);
+	if (channel->allow_he)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_ALLOW_HE);
+	if (channel->ht40plus)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_HT40_PLUS);
+	if (channel->chan_radar)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_DFS);
+	if (channel->freq2_radar)
+		chan_device->info |= cpu_to_le32(WMI_CHAN_INFO_DFS_FREQ2);
+
+	chan_device->reg_info_1 = le32_encode_bits(channel->max_power,
+						   WMI_CHAN_REG_INFO1_MAX_PWR) |
+				  le32_encode_bits(channel->max_reg_power,
+						   WMI_CHAN_REG_INFO1_MAX_REG_PWR);
+
+	chan_device->reg_info_2 = le32_encode_bits(channel->max_antenna_gain,
+						   WMI_CHAN_REG_INFO2_ANT_MAX) |
+				  le32_encode_bits(channel->max_power,
+						   WMI_CHAN_REG_INFO2_MAX_TX_PWR);
+}
+
 static void ath12k_wmi_put_wmi_channel(struct ath12k_wmi_channel_params *chan,
 				       struct wmi_channel_arg chan_arg)
 {
@@ -1586,20 +1659,28 @@ int ath12k_wmi_vdev_start(struct ath12k
 	struct sk_buff *skb;
 	struct ath12k_wmi_channel_params *chan;
 	struct wmi_tlv *tlv;
+	struct ath12k_wmi_channel_params *chan_device;
 	void *ptr;
 	int ret, len, ml_arg_size = 0;
 	u8 i;
 	struct ath12k_hw_group *ag = ar->ab->ag;
+	bool device_params_present = false;
 
 	if (WARN_ON(arg->ssid_len > sizeof(cmd->ssid.ssid)))
 		return -EINVAL;
 
 	if (!restart && arg->ml.enabled)
 		ml_arg_size = TLV_HDR_SIZE + sizeof(*ml_params) +
-			      TLV_HDR_SIZE + (arg->ml.num_partner_links * sizeof(*partner_info));;
+			      TLV_HDR_SIZE + (arg->ml.num_partner_links * sizeof(*partner_info));
 
 	len = sizeof(*cmd) + sizeof(*chan) + TLV_HDR_SIZE + ml_arg_size;
 
+	device_params_present = ath12k_wmi_check_device_present(arg->width_device,
+								arg->center_freq_device,
+								arg->channel.band_center_freq1);
+	if (device_params_present)
+		len += TLV_HDR_SIZE + sizeof(*chan_device);
+
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
 	if (!skb)
 		return -ENOMEM;
@@ -1655,59 +1736,74 @@ int ath12k_wmi_vdev_start(struct ath12k
 
 	ptr += sizeof(*tlv);
 
-	if (!ml_arg_size)
-		goto send;
+	if (ml_arg_size) {
+		tlv = ptr;
+		tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+				  FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params));
+		ptr += TLV_HDR_SIZE;
 
-	tlv = ptr;
-	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
-		      FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params));
-	ptr += TLV_HDR_SIZE;
+		ml_params = ptr;
 
-	ml_params = ptr;
+		ml_params->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_MLO_VDEV_START_PARAMS) |
+					 FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params) - TLV_HDR_SIZE);
 
-	ml_params->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_MLO_VDEV_START_PARAMS) |
-				 FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params) - TLV_HDR_SIZE);
+		ml_params->flags = FIELD_PREP(ATH12K_WMI_FLAG_MLO_ENABLED,
+					      arg->ml.enabled) |
+				   FIELD_PREP(ATH12K_WMI_FLAG_MLO_ASSOC_LINK,
+					      arg->ml.assoc_link) |
+				   FIELD_PREP(ATH12K_WMI_FLAG_MLO_MCAST_VDEV,
+					      arg->ml.mcast_link) |
+				   FIELD_PREP(ATH12K_WMI_FLAG_MLO_LINK_ADD,
+					      arg->ml.link_add);
 
-	ml_params->flags = FIELD_PREP(ATH12K_WMI_FLAG_MLO_ENABLED,
-				      arg->ml.enabled) |
-			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_ASSOC_LINK,
-				      arg->ml.assoc_link) |
-			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_MCAST_VDEV,
-				      arg->ml.mcast_link) |
-			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_LINK_ADD,
-				      arg->ml.link_add);
+		ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "vdev %d start ml flags 0x%x\n",
+			   arg->vdev_id, ml_params->flags);
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "vdev %d start ml flags 0x%x\n",
-		   arg->vdev_id, ml_params->flags);
+		ptr += sizeof(*ml_params);
 
-	ptr += sizeof(*ml_params);
+		tlv = ptr;
+		tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+				  FIELD_PREP(WMI_TLV_LEN, arg->ml.num_partner_links *
+						sizeof(*partner_info));
+		ptr += TLV_HDR_SIZE;
 
-	tlv = ptr;
-	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
-		      FIELD_PREP(WMI_TLV_LEN, arg->ml.num_partner_links *
-					sizeof(*partner_info));
-	ptr += TLV_HDR_SIZE;
+		partner_info = ptr;
 
-	partner_info = ptr;
+		for (i = 0; i < arg->ml.num_partner_links; i++) {
+			partner_info->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+							      WMI_TAG_MLO_PARTNER_LINK_PARAMS) |
+						   FIELD_PREP(WMI_TLV_LEN, sizeof(*partner_info) -
+							      TLV_HDR_SIZE);
 
-	for (i = 0; i < arg->ml.num_partner_links; i++) {
-		partner_info->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_MLO_PARTNER_LINK_PARAMS) |
-					   FIELD_PREP(WMI_TLV_LEN, sizeof(*partner_info) - TLV_HDR_SIZE);
+			partner_info->vdev_id = arg->ml.partner_info[i].vdev_id;
+			partner_info->hw_link_id = arg->ml.partner_info[i].hw_link_id;
+			ether_addr_copy(partner_info->vdev_addr.addr, arg->ml.partner_info[i].addr);
 
-		partner_info->vdev_id = arg->ml.partner_info[i].vdev_id;
-		partner_info->hw_link_id = arg->ml.partner_info[i].hw_link_id;
-		ether_addr_copy(partner_info->vdev_addr.addr, arg->ml.partner_info[i].addr);
+			ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "partner vdev %d hw_link_id %d macaddr%pM\n",
+				   partner_info->vdev_id, partner_info->hw_link_id,
+				   partner_info->vdev_addr.addr);
+			partner_info++;
+		}
+		ptr = partner_info;
+	}
 
-		ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "partner vdev %d hw_link_id %d macaddr%pM\n",
-			   partner_info->vdev_id, partner_info->hw_link_id,
-			   partner_info->vdev_addr.addr);
-		partner_info++;
+	if (device_params_present) {
+		tlv = ptr;
+		tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT,
+						 sizeof(*chan_device));
+		ptr += TLV_HDR_SIZE;
+
+		chan_device = ptr;
+		ath12k_wmi_set_wmi_channel_device(chan_device, &arg->channel,
+						  arg->center_freq_device,
+						  arg->width_device);
+		ptr += sizeof(*chan_device);
 	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "vdev %s id 0x%x freq 0x%x mode 0x%x\n",
 		   restart ? "restart" : "start", arg->vdev_id,
 		   arg->channel.freq, arg->channel.mode);
-send:
+
 	if (restart)
 		ret = ath12k_wmi_cmd_send(wmi, skb,
 					  WMI_VDEV_RESTART_REQUEST_CMDID);
@@ -14915,12 +15011,14 @@ int ath12k_wmi_pdev_multiple_vdev_restar
 	struct wmi_pdev_multiple_vdev_restart_request_cmd *cmd;
 	struct ath12k_wmi_channel_params *chan;
 	struct wmi_tlv *tlv;
+	struct ath12k_wmi_channel_params *chan_device;
 	u32 num_vdev_ids;
 	__le32 *vdev_ids;
 	size_t vdev_ids_len;
 	struct sk_buff *skb;
 	void *ptr;
 	int ret, len, i;
+	bool device_params_present = false;
 
 	if (WARN_ON(arg->vdev_ids.id_len > TARGET_NUM_VDEVS))
 		return -EINVAL;
@@ -14929,7 +15027,15 @@ int ath12k_wmi_pdev_multiple_vdev_restar
 	vdev_ids_len = num_vdev_ids * sizeof(__le32);
 
 	len = sizeof(*cmd) + TLV_HDR_SIZE + vdev_ids_len +
-	      sizeof(*chan);
+	      sizeof(*chan) + TLV_HDR_SIZE + TLV_HDR_SIZE +
+	      TLV_HDR_SIZE;
+
+	device_params_present = ath12k_wmi_check_device_present(arg->width_device,
+								arg->center_freq_device,
+								arg->channel.band_center_freq1);
+
+	if (device_params_present)
+		len += TLV_HDR_SIZE + sizeof(*chan_device);
 
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
 	if (!skb)
@@ -14961,6 +15067,32 @@ int ath12k_wmi_pdev_multiple_vdev_restar
 	chan->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_CHANNEL, sizeof(*chan));
 	ptr += sizeof(*chan);
 
+	/* Zero length TLVs for phymode_list, preferred_tx_stream_list
+	 * and preferred_rx_stream_list which are mandatory if any of
+	 * the following TLVs are to be sent to target.
+	 */
+	tlv = ptr;
+	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_UINT32, 0);
+	ptr += sizeof(*tlv);
+	tlv = ptr;
+	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_UINT32, 0);
+	ptr += sizeof(*tlv);
+	tlv = ptr;
+	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_UINT32, 0);
+	ptr += sizeof(*tlv);
+
+	if (device_params_present) {
+		tlv = ptr;
+		tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT,
+						 sizeof(*chan_device));
+		ptr += TLV_HDR_SIZE;
+		chan_device = ptr;
+		ath12k_wmi_set_wmi_channel_device(chan_device, &arg->channel,
+						  arg->center_freq_device,
+						  arg->width_device);
+		ptr += sizeof(*chan_device);
+	}
+
 	ret = ath12k_wmi_cmd_send(wmi, skb,
 				  WMI_PDEV_MULTIPLE_VDEV_RESTART_REQUEST_CMDID);
 	if (ret) {
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3611,6 +3611,8 @@ struct wmi_vdev_start_req_arg {
 	u32 mbssid_tx_vdev_id;
 	u32 punct_bitmap;
 	struct wmi_ml_arg ml;
+	u32 width_device;
+	u32 center_freq_device;
 };
 
 struct ath12k_wmi_peer_create_arg {
@@ -8148,6 +8150,8 @@ struct wmi_pdev_multiple_vdev_restart_re
 	struct wmi_vdev_ids_arg vdev_ids;
 	struct wmi_channel_arg channel;
 	u16 ru_punct_bitmap;
+	u32 width_device;
+	u32 center_freq_device;
 };
 
 struct wmi_pdev_multiple_vdev_restart_request_cmd {
