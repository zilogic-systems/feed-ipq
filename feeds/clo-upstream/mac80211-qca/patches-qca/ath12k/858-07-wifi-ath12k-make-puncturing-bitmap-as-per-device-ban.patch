From ceaeb68e340bb2d6b648b95e1d597c5040e3126a Mon Sep 17 00:00:00 2001
From: Shivani Tambatkar <quic_stambatk@quicinc.com>
Date: Fri, 1 Dec 2023 10:36:04 -0800
Subject: [PATCH 7/8] wifi: ath12k: make puncturing bitmap as per device
 bandwidth

Puncturing bitmap must be calculated over the device bandwidth
parameters when these are different than the operating bandwidth
parameters. Shift the puncturing bitmap depending on the location
of the operating bandwidth in the device bandwidth.

Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 123 ++++++++++++++++++--------
 drivers/net/wireless/ath/ath12k/wmi.h |   6 ++
 2 files changed, 93 insertions(+), 36 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1733,7 +1733,6 @@ int ath12k_wmi_vdev_start(struct ath12k
 	/* Note: This is a nested TLV containing:
 	 * [wmi_tlv][wmi_p2p_noa_descriptor][wmi_tlv]..
 	 */
-
 	ptr += sizeof(*tlv);
 
 	if (ml_arg_size) {
@@ -1787,7 +1786,8 @@ int ath12k_wmi_vdev_start(struct ath12k
 		ptr = partner_info;
 	}
 
-	if (device_params_present) {
+	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT, ar->ab->wmi_ab.svc_map) &&
+	    device_params_present) {
 		tlv = ptr;
 		tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT,
 						 sizeof(*chan_device));
@@ -15046,6 +15046,7 @@ int ath12k_wmi_pdev_multiple_vdev_restar
 						 sizeof(*cmd));
 	cmd->pdev_id = cpu_to_le32(ar->pdev->pdev_id);
 	cmd->num_vdevs = cpu_to_le32(arg->vdev_ids.id_len);
+
 	cmd->puncture_20mhz_bitmap = cpu_to_le32(arg->ru_punct_bitmap);
 
 	cmd->flags = cpu_to_le32(WMI_MVR_RESPONSE_SUPPORT_EXPECTED);
@@ -15081,7 +15082,8 @@ int ath12k_wmi_pdev_multiple_vdev_restar
 	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_UINT32, 0);
 	ptr += sizeof(*tlv);
 
-	if (device_params_present) {
+	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT, ar->ab->wmi_ab.svc_map) &&
+	    device_params_present) {
 		tlv = ptr;
 		tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT,
 						 sizeof(*chan_device));
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -6624,6 +6624,23 @@ static int ath12k_station_unauthorize(st
 	return ret;
 }
 
+static u16 ath12k_mac_set_ru_punc_bitmap_device(u32 oper_freq,
+						enum nl80211_chan_width width_device,
+						u32 device_freq, u16 oper_ru_punct_bitmap)
+{
+	if (oper_freq == device_freq || oper_freq < device_freq)
+		return oper_ru_punct_bitmap;
+
+	switch (width_device) {
+	case NL80211_CHAN_WIDTH_160:
+		return (oper_ru_punct_bitmap << 4);
+	case NL80211_CHAN_WIDTH_320:
+		return (oper_ru_punct_bitmap << 8);
+	default:
+		return oper_ru_punct_bitmap;
+	}
+}
+
 static int ath12k_mac_set_peer_ch_switch_data(struct ath12k_link_vif *arvif,
 					      struct ath12k_link_sta *arsta,
 					      enum wmi_phy_mode peer_phymode,
@@ -6697,6 +6714,14 @@ static int ath12k_mac_set_peer_ch_switch
 
 	rcu_read_unlock();
 
+	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT, ar->ab->wmi_ab.svc_map) &&
+	    cfg80211_chandef_device_present(&def)) {
+		ru_punct_bitmap = ath12k_mac_set_ru_punc_bitmap_device(def.chan->center_freq,
+								       def.width_device,
+								       def.center_freq_device,
+								       def.ru_punct_bitmap);
+	}
+
 	spin_lock_bh(&ar->data_lock);
 	ether_addr_copy(peer_arg->mac_addr.addr, arsta->addr);
 	peer_arg->chan_width = arsta->bw;
@@ -11710,6 +11735,7 @@ static int ath12k_mac_vdev_start_restart
 	struct ath12k_base *ab = ar->ab;
 	struct wmi_vdev_start_req_arg arg = {};
 	int ret;
+	u16 ru_punct_bitmap = chandef->ru_punct_bitmap;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -11730,13 +11756,17 @@ static int ath12k_mac_vdev_start_restart
 	arg.channel.max_power = chandef->chan->max_power;
 	arg.channel.max_reg_power = chandef->chan->max_reg_power;
 	arg.channel.max_antenna_gain = chandef->chan->max_antenna_gain;
-	arg.punct_bitmap = ~chandef->ru_punct_bitmap;
-	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT,
-				 ar->ab->wmi_ab.svc_map)) {
+	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT, ar->ab->wmi_ab.svc_map) &&
+			cfg80211_chandef_device_present(chandef)) {
 		arg.width_device = chandef->width_device;
 		arg.center_freq_device = chandef->center_freq_device;
+		ru_punct_bitmap = ath12k_mac_set_ru_punc_bitmap_device(chandef->chan->center_freq,
+														chandef->width_device,
+														chandef->center_freq_device,
+														ru_punct_bitmap);
 	}
 
+	arg.punct_bitmap = ~ru_punct_bitmap;
 	arg.pref_tx_streams = ar->num_tx_chains;
 	arg.pref_rx_streams = ar->num_rx_chains;
 
@@ -12159,6 +12189,7 @@ ath12k_mac_multi_vdev_restart(struct ath
 	struct ath12k_base *ab = ar->ab;
 	struct wmi_pdev_multiple_vdev_restart_req_arg arg = {};
 	int ret, i;
+	u16 ru_punct_bitmap = chandef->ru_punct_bitmap;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -12181,14 +12212,19 @@ ath12k_mac_multi_vdev_restart(struct ath
 	arg.channel.passive = arg.channel.chan_radar;
 	arg.channel.freq2_radar = radar_enabled;
 	arg.channel.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
-	arg.ru_punct_bitmap = ~chandef->ru_punct_bitmap;
 
-	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT,
-		     ar->ab->wmi_ab.svc_map)) {
+	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT, ar->ab->wmi_ab.svc_map) &&
+	    cfg80211_chandef_device_present(chandef)) {
 		arg.width_device = chandef->width_device;
 		arg.center_freq_device = chandef->center_freq_device;
+		ru_punct_bitmap = ath12k_mac_set_ru_punc_bitmap_device(chandef->chan->center_freq,
+								       chandef->width_device,
+								       chandef->center_freq_device,
+								       ru_punct_bitmap);
 	}
 
+	arg.ru_punct_bitmap = ~ru_punct_bitmap;
+
 	ret = ath12k_wmi_pdev_multiple_vdev_restart(ar, &arg);
 	if (ret)
 		ath12k_warn(ab, "mac failed to do mvr (%d)\n", ret);
