From 2099262dcbca6a5ee703f41f2cdac88535a2ed11 Mon Sep 17 00:00:00 2001
From: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
Date: Wed, 13 Dec 2023 11:24:49 +0530
Subject: [PATCH] wifi: ath12k: Add debugfs support to configure primary link

Add a vif specific debugfs entry to select the primary link to be used by
the user in MLO case for the AP mode.

This will helpful while running the functionality and performance test
case.

echo N > /sys/kernel/debug/ieee80211/phy1/netdev:wlan0/primary_link

where N = 0 to set link-0 as primary link, 1 to set link-1 as primary
link and 2 to set link-2 as primary link.

cat /sys/kernel/debug/ieee80211/phy1/netdev:wlan0/primary_link to
get the configured primary link.

Co-developed-by: Avula Sri Charan <quic_asrichar@quicinc.com>
Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
Signed-off-by: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  1 +
 drivers/net/wireless/ath/ath12k/debugfs.c | 74 +++++++++++++++++++----
 drivers/net/wireless/ath/ath12k/debugfs.h |  5 +-
 drivers/net/wireless/ath/ath12k/mac.c     |  4 +-
 4 files changed, 66 insertions(+), 18 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -501,8 +501,10 @@ struct ath12k_vif {
 	spinlock_t mcbc_gsn_lock; /* Protect mcbc_gsn */
 	struct ath12k_vif_cache cache[IEEE80211_MLD_MAX_NUM_LINKS];
 	u8 last_scan_link;
+	u8 primary_link_id;
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_linkstats;
+	struct dentry *debugfs_primary_link;
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	bool mcast_to_ucast_en;
  };
@@ -722,6 +724,7 @@ struct ath12k_sta {
 	u16 links_map;
 	u16 ml_peer_id;
 	u8 assoc_link_id;
+	u8 primary_link_id;
 	u8 num_peer;
 	/* Indicates whether disassoc is sent after recovery
 	 * ONLY used currently in recovery case
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -4898,22 +4898,74 @@ static const struct file_operations ath1
 	.llseek = default_llseek,
 };
 
-int ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
+static ssize_t ath12k_write_primary_link(struct file *file,
+					 const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	struct ath12k_vif *ahvif = file->private_data;
+	struct ath12k_hw *ah = ahvif->ah;
+	struct ath12k *ar = ah->radio;
+	u8 primary_link;
+
+	if (kstrtou8_from_user(user_buf, count, 0, &primary_link))
+		return -EINVAL;
+
+	if (!(ahvif->links_map & BIT(primary_link)) &&
+	    ahvif->vif->type != NL80211_IFTYPE_STATION) {
+		ath12k_warn(ar->ab, "Invalid link id : %u\n", primary_link);
+		return -EINVAL;
+	}
+
+	mutex_lock(&ah->conf_mutex);
+	ahvif->primary_link_id = primary_link;
+	mutex_unlock(&ah->conf_mutex);
+
+	return count;
+}
+
+static ssize_t ath12k_read_primary_link(struct file *file,
+					char __user *ubuf,
+					size_t count, loff_t *ppos)
+{
+	struct ath12k_vif *ahvif = file->private_data;
+	struct ath12k_hw *ah = ahvif->ah;
+	int len = 0;
+	char buf[32] = {0};
+
+	mutex_lock(&ah->conf_mutex);
+	len = scnprintf(buf, sizeof(buf) - len, "Primary link_id: %u\n",
+			ahvif->primary_link_id);
+	mutex_unlock(&ah->conf_mutex);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
+
+static const struct file_operations ath12k_fops_primary_link = {
+	.open = simple_open,
+	.write = ath12k_write_primary_link,
+	.read = ath12k_read_primary_link,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+void ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_hw *hw = arvif->ar->ah->hw;
 	struct ieee80211_vif *vif = ahvif->vif;
 	u8 link_id = arvif->link_id;
-	int ret = 0;
 
 	if (link_id >= IEEE80211_MLD_MAX_NUM_LINKS)
-		goto exit;
+		return;
+
+	if (ahvif->vif->type == NL80211_IFTYPE_STATION)
+		goto ap_and_sta_debugfs_file;
 
 	if (ahvif->vif->type != NL80211_IFTYPE_AP)
-		goto exit;
+		return;
 
 	if (arvif->debugfs_twt)
-		goto exit;
+		return;
 
 	if (!hw->wiphy->num_hw) {
 		arvif->debugfs_twt = debugfs_create_dir("twt",
@@ -4933,8 +4985,7 @@ int ath12k_debugfs_add_interface(struct
 			    "failed to create directory %p\n",
 			    arvif->debugfs_twt);
 		arvif->debugfs_twt = NULL;
-		ret = -1;
-		goto exit;
+		return;
 	}
 
 	debugfs_create_file("add_dialog", 0200, arvif->debugfs_twt,
@@ -4957,13 +5008,12 @@ int ath12k_debugfs_add_interface(struct
 			debugfs_remove_recursive(arvif->debugfs_twt);
 			arvif->debugfs_twt = NULL;
 			arvif->debugfs_rtsthreshold = NULL;
-			ret = -ENOMEM;
-			goto exit;
+			return;
 		}
 	}
 
 	if (ahvif->debugfs_linkstats)
-		goto exit;
+		return;
 
 	ahvif->debugfs_linkstats = debugfs_create_file("link_stats",
 						       0200,
@@ -4985,8 +5035,29 @@ int ath12k_debugfs_add_interface(struct
 		ahvif->debugfs_linkstats = NULL;
 	}
 
-exit:
-	return ret;
+	/* Note: Add new AP mode only debugfs file before "ap_and_sta_debugfs_file" label.
+	 * Add new debugfs file for both AP and STA mode after the "ap_and_sta_debugfs_file"
+	 * label.
+	 */
+ap_and_sta_debugfs_file:
+	if (ahvif->debugfs_primary_link)
+		return;
+
+	ahvif->debugfs_primary_link = debugfs_create_file("primary_link",
+							  0644,
+							  vif->debugfs_dir,
+							  ahvif,
+							  &ath12k_fops_primary_link);
+
+	/* If debugfs_primary_link already exist, don't remove */
+	if (IS_ERR(ahvif->debugfs_primary_link) &&
+	    PTR_ERR(ahvif->debugfs_primary_link) != -EEXIST) {
+		ath12k_warn(arvif->ar->ab,
+			    "failed to create primary_link file, vif %pM",
+			    vif->addr);
+		debugfs_remove(ahvif->debugfs_primary_link);
+		ahvif->debugfs_primary_link = NULL;
+	}
 }
 
 void ath12k_debugfs_remove_interface(struct ath12k_link_vif *arvif)
@@ -5002,6 +5073,9 @@ void ath12k_debugfs_remove_interface(str
 		return;
 	}
 
+	debugfs_remove(ahvif->debugfs_primary_link);
+	ahvif->debugfs_primary_link = NULL;
+
 	if (ahvif->debugfs_linkstats) {
 		debugfs_remove(ahvif->debugfs_linkstats);
 		ahvif->debugfs_linkstats = NULL;
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -311,7 +311,7 @@ static inline int ath12k_debugfs_rx_filt
 	return ar->debug.rx_filter;
 }
 
-int ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif);
+void ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif);
 void ath12k_debugfs_remove_interface(struct ath12k_link_vif *arvif);
 
 #else
@@ -390,9 +390,8 @@ static inline int ath12k_debugfs_rx_filt
 	return 0;
 }
 
-static inline int ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
+static inline void ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
 {
-	return 0;
 }
 
 static inline void ath12k_debugfs_remove_interface(struct ath12k_link_vif *arvif)
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3166,8 +3166,10 @@ static void ath12k_peer_assoc_h_mlo(stru
 
 	ml->enabled = true;
 	ml->assoc_link = arsta->is_assoc_link;
-	/* For now considering the primary umac based on assoc link */
-	ml->primary_umac = arsta->is_assoc_link;
+	if (arsta->link_id == ahsta->primary_link_id)
+		ml->primary_umac = true;
+	else
+		ml->primary_umac = false;
 	ml->peer_id_valid = true;
 	ml->logical_link_idx_valid = true;
 
@@ -3190,8 +3192,11 @@ static void ath12k_peer_assoc_h_mlo(stru
 	       ml->partner_info[i].vdev_id = arvif->vdev_id;
 	       ml->partner_info[i].hw_link_id = arvif->ar->pdev->hw_link_id;
 	       ml->partner_info[i].assoc_link = arsta_p->is_assoc_link;
-	       ml->partner_info[i].primary_umac = arsta_p->is_assoc_link;
-	       ml->partner_info[i].logical_link_idx_valid = true;
+	       if (arsta_p->link_id == ahsta->primary_link_id)
+			   ml->partner_info[i].primary_umac = true;
+		   else
+			   ml->partner_info[i].primary_umac = false;
+		   ml->partner_info[i].logical_link_idx_valid = true;
 	       ml->partner_info[i].logical_link_idx = arsta_p->link_idx;
 	       ml->num_partner_links++;
 	       i++;
@@ -7207,13 +7212,6 @@ static int ath12k_mac_station_add(struct
 		}
 	}
 
-	ret = ath12k_dp_peer_setup(ar, arvif, arsta);
-	if (ret) {
-		ath12k_warn(ab, "failed to setup dp for peer %pM on vdev %i (%d)\n",
-			    arsta->addr, arvif->vdev_id, ret);
-		goto free_tx_stats;
-	}
-
 	if (ab->hw_params->vdev_start_delay &&
 	    !arvif->is_started &&
 	    ahvif->vdev_type != WMI_VDEV_TYPE_AP) {
@@ -7479,6 +7477,12 @@ static int ath12k_mac_handle_link_sta_st
 							  arsta->ahsta, arsta->link_id);
 	} else if (old_state == IEEE80211_STA_AUTH &&
 		    new_state == IEEE80211_STA_ASSOC) {
+
+		ret = ath12k_dp_peer_setup(ar, arvif, arsta);
+		if (ret)
+			ath12k_warn(ar->ab, "failed to setup dp for peer %pM on vdev %i (%d)\n",
+					arsta->addr, arvif->vdev_id, ret);
+
 		ath12k_dp_peer_default_route_setup(ar, arvif, arsta);
 
 		if (vif->type == NL80211_IFTYPE_AP ||
@@ -7680,6 +7684,7 @@ int ath12k_mac_update_sta_state(struct i
 
 		ahsta->deflink.is_assoc_link = true;
 		ahsta->assoc_link_id = link_id;
+		ahsta->primary_link_id = link_id;
 	}
 
 	if (new_state == IEEE80211_STA_NOTEXIST && old_state == IEEE80211_STA_NONE) {
@@ -7805,6 +7810,25 @@ static int ath12k_mac_op_change_sta_link
 	/* this op is expected only after initial sta insertion with default link */
 	WARN_ON(ahsta->links_map == 0);
 
+	if ((test_bit(ahvif->primary_link_id, &sta->valid_links))) {
+		arvif = ahvif->link[ahvif->primary_link_id];
+		if (arvif->ar->ab->hw_params->is_plink_preferable) {
+			ahsta->primary_link_id = ahvif->primary_link_id;
+		} else {
+			ahsta->primary_link_id = ahsta->assoc_link_id;
+			arvif = ahvif->link[ahsta->assoc_link_id];
+			if (!arvif->ar->ab->hw_params->is_plink_preferable) {
+				for_each_set_bit(link_id, &sta->valid_links,
+						 IEEE80211_MLD_MAX_NUM_LINKS) {
+					if (link_id != ahsta->primary_link_id) {
+						ahsta->primary_link_id = link_id;
+						break;
+					}
+				}
+			}
+		}
+	}
+
 	for_each_set_bit(link_id, &new_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		if (ahsta->links_map & BIT(link_id))
 			continue;
@@ -9376,11 +9400,11 @@ static u8 ath12k_mac_get_tx_link(struct
 		return link;
 	}
 
-	/* enqueue eth data frames on assoc link */
+	/* enqueue eth data frames on primary link */
 	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
-		return ahsta->assoc_link_id;
+		return ahsta->primary_link_id;
 	else if (ieee80211_is_data(hdr->frame_control))
-		return ahsta->assoc_link_id;
+		return ahsta->primary_link_id;
 
 	/* 802.11 frame cases */
 	if (link == IEEE80211_LINK_UNSPECIFIED)
@@ -10910,9 +10934,7 @@ static void ath12k_update_obss_color_not
 	}
 #endif
 
-	ret = ath12k_debugfs_add_interface(arvif);
-	if (ret)
-		goto err_peer_del;
+	ath12k_debugfs_add_interface(arvif);
 
 	return ret;
 
--- a/drivers/net/wireless/ath/ath12k/bondif.c
+++ b/drivers/net/wireless/ath/ath12k/bondif.c
@@ -469,10 +469,10 @@ static struct net_device *ath12k_mac_get
 	}
 
 	if (sta) {
-		ndev = mldev->vif->link_ndev[ahsta->assoc_link_id];
-		ath12k_dbg(NULL, ATH12K_DBG_DP_TX, "[%s] %s:%d deliver packets for sta %pM ahsta->assoc_link_id %d ndev %s\n",
+		ndev = mldev->vif->link_ndev[ahsta->primary_link_id];
+		ath12k_dbg(NULL, ATH12K_DBG_DP_TX, "[%s] %s:%d deliver packets for sta %pM ahsta->primary_link_id %d ndev %s\n",
 			   current->comm, __func__, __LINE__,
-			   sta, ahsta->assoc_link_id, ndev->name);
+			   sta, ahsta->primary_link_id, ndev->name);
 	}
 
 dvlan_check:
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -124,11 +124,14 @@ int ath12k_dp_peer_setup(struct ath12k *
 		goto free_shash;
 	}
 
-	if (!peer->primary_link) {
+	if (peer->mlo && peer->link_id != arsta->ahsta->primary_link_id) {
 		ret = 0;
+		peer->primary_link = false;
 		goto free_shash;
 	}
 
+	peer->primary_link = true;
+
 	for (tid = 0; tid <= IEEE80211_NUM_TIDS; tid++) {
 		ret = ath12k_dp_rx_peer_tid_setup(ar, tid, 1, 0, HAL_PN_TYPE_NONE, peer);
 		if (ret) {
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1594,6 +1594,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.is_plink_preferable = true,
 	},
 	{
 		.name = "wcn7850 hw2.0",
@@ -1665,6 +1666,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.is_plink_preferable = true,
 	},
 	{
 		.name = "qcn9274 hw2.0",
@@ -1749,6 +1751,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.is_plink_preferable = true,
 	},
 	{
 		.name = "ipq5332 hw1.0",
@@ -1837,6 +1840,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.is_plink_preferable = false,
 	},
 	{
 		.name = "qcn6432 hw1.0",
@@ -1918,6 +1922,7 @@ static struct ath12k_hw_params ath12k_hw
 		.support_umac_reset = false,
 		.en_qdsslog = true,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.is_plink_preferable = true,
 	},
 };
 
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -253,6 +253,7 @@ struct ath12k_hw_params {
 	const struct pmm_remap *pmm_remap;
 	bool support_umac_reset;
 	int fw_mem_mode;
+	bool is_plink_preferable;
 };
 
 struct ath12k_hw_ops {
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -726,13 +726,10 @@ int ath12k_peer_create(struct ath12k *ar
 		/* Fill ML info into created peer */
 		if (sta->mlo) {
 			peer->ml_peer_id = ahsta->ml_peer_id | ATH12K_ML_PEER_ID_VALID;
-			/* the assoc link is considered primary for now */
-			peer->primary_link = arsta->is_assoc_link;
 			ether_addr_copy(peer->ml_addr, sta->addr);
 			peer->mlo = true;
 		} else {
 			peer->ml_peer_id = ATH12K_MLO_PEER_ID_INVALID;
-			peer->primary_link = true;
 			peer->mlo = false;
 		}
 	}
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -460,8 +460,12 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	if (ieee80211_has_a4(hdr->frame_control) &&
 	    is_multicast_ether_addr(hdr->addr3) && ahsta &&
 	    ahsta->use_4addr_set) {
-		/* TODO set tcl metadata based on primary link sta ? */
-		ti.meta_data_flags = ahsta->deflink.tcl_metadata;
+		if (unlikely(!ahsta->link[ahsta->primary_link_id])) {
+			ath12k_err(ab, "arsta not found on primary link");
+			ret = -EINVAL;
+			goto fail_remove_tx_buf;
+		}
+		ti.meta_data_flags = ahsta->link[ahsta->primary_link_id]->tcl_metadata;
 		ti.flags0 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_TO_FW, 1);
 		spin_lock_bh(&ab->base_lock);
 		peer_id = FIELD_GET(HTT_TCL_META_DATA_PEER_ID_MISSION,
--- a/drivers/net/wireless/ath/ath12k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_sta.c
@@ -1158,6 +1158,31 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t ath12k_dbg_sta_read_primary_link_id(struct file *file,
+						   char __user *user_buf,
+						   size_t count, loff_t *ppos)
+{
+	struct ieee80211_sta *sta = file->private_data;
+	struct ath12k_sta *ahsta = ath12k_sta_to_ahsta(sta);
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	char buf[32];
+	int len = 0;
+
+	mutex_lock(&ah->conf_mutex);
+	len = scnprintf(buf, sizeof(buf) - len,
+			"Primary_link_id: %d\n", ahsta->primary_link_id);
+	mutex_unlock(&ah->conf_mutex);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static const struct file_operations fops_primary_link_id = {
+	.read = ath12k_dbg_sta_read_primary_link_id,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t
 ath12k_write_htt_peer_stats_reset(struct file *file,
 				  const char __user *user_buf,
@@ -1870,6 +1895,7 @@ void ath12k_debugfs_sta_op_add(struct ie
 	debugfs_create_file("addba", 0200, dir, sta, &fops_addba);
 	debugfs_create_file("addba_resp", 0200, dir, sta, &fops_addba_resp);
 	debugfs_create_file("delba", 0200, dir, sta, &fops_delba);
+	debugfs_create_file("primary_link_id", 0400, dir, sta, &fops_primary_link_id);
 }
 
 void ath12k_debugfs_link_sta_op_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
