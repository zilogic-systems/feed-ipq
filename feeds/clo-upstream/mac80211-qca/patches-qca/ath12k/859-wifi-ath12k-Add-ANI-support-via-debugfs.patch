From 3a704b87adbf179afdd41623137566f20f703f28 Mon Sep 17 00:00:00 2001
From: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
Date: Tue, 19 Dec 2023 12:26:50 +0530
Subject: [PATCH] wifi: ath12k: Add ANI support via debugfs

Add Adaptive Noise Immunity(ANI) support to configure the ANI related
info such as ani_poll_period, ani_listen_period, ani_ofdm_level via
debugfs.

ANI helps to achieve better performance in noisy environment.

parameters    : ani_enable, ani_poll_period, ani_listen_period,
                ani_ofdm_level
cases handled : set ani_enable, get ani_enable
                set ani_poll_period, get ani_poll_period
                set ani_listen_period, get ani_listen_period
                set ani_ofdm_level, get ani_ofdm_level

Only GET of ani_ofdm_level is fetched from firmware.
The other GET cases in the above mentioned lists are handled in ath12k
driver itself.

Commands :

To enable/disable ANI:
GET - cat /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_enable
SET - echo N > /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_enable
N   - 0 or 1

To get/set ani_poll_period:
GET - cat /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_poll_period
SET - echo N > /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_poll_period
N   - unsigned 32bit number

To get/set ani_listen_period:
GET - cat /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_listen_period
SET - echo N > /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_listen_period
N   - unsigned 32bit number

To get/set ani_ofdm_level:
GET - cat /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_level
SET - echo N > /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/ani_level
N = -5 to 30, 128

When N is set to 128, firmware selects a suitable value within range
based on an algorithm.

Signed-off-by: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |   9 +
 drivers/net/wireless/ath/ath12k/debugfs.c | 328 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/debugfs.h |   6 +
 drivers/net/wireless/ath/ath12k/mac.c     |   3 +
 drivers/net/wireless/ath/ath12k/wmi.c     |  88 ++++++
 drivers/net/wireless/ath/ath12k/wmi.h     |  30 ++
 6 files changed, 464 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1071,6 +1071,12 @@ struct ath12k {
 	u64 delta_tqm;
 
 	bool mlo_complete_event;
+
+	bool ani_enabled;
+	u32 ani_poll_period;
+	u32 ani_listen_period;
+	int ani_ofdm_level;
+	struct completion ani_ofdm_event;
 };
 
 struct ath12k_hw {
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -4378,6 +4378,299 @@ static const struct file_operations fops
 };
 #endif /* CPTCFG_ATH12K_SAWF */
 
+static ssize_t ath12k_read_ani_enable(struct file *file,
+				      char __user *user_buf,
+				      size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int len = 0;
+	char buf[32];
+
+	len = scnprintf(buf, sizeof(buf) - len, "%d\n", ar->ani_enabled);
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t ath12k_write_ani_enable(struct file *file,
+				       const char __user *user_buf,
+				       size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int ret;
+	bool enable;
+
+	if (kstrtobool_from_user(user_buf, count, &enable))
+		return -EINVAL;
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->state != ATH12K_STATE_ON) {
+		ret = -ENETDOWN;
+		goto exit;
+	}
+
+	if (ar->ani_enabled == enable) {
+		ret = count;
+		goto exit;
+	}
+
+	ret = ath12k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_ANI_ENABLE,
+					enable, ar->pdev->pdev_id);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to %s ANI: %d\n", enable ? "enable" : "disable",
+			    ret);
+		goto exit;
+	}
+
+	ar->ani_enabled = enable;
+	ret = count;
+exit:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static const struct file_operations fops_ani_enable = {
+	.read = ath12k_read_ani_enable,
+	.write = ath12k_write_ani_enable,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+static ssize_t ath12k_read_ani_poll_period(struct file *file,
+					   char __user *user_buf,
+					   size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int len = 0;
+	char buf[32];
+
+	if (!ar->ani_enabled)
+		len = scnprintf(buf, sizeof(buf), "ANI is disabled\n");
+	else
+		len = scnprintf(buf, sizeof(buf) - len, "%u\n", ar->ani_poll_period);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t ath12k_write_ani_poll_period(struct file *file,
+					    const char __user *user_buf,
+					    size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int ret;
+	u32 ani_poll_period;
+
+	if (kstrtou32_from_user(user_buf, count, 0, &ani_poll_period))
+		return -EINVAL;
+
+	if (ani_poll_period > ATH12K_ANI_POLL_PERIOD_MAX)
+		return -EINVAL;
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->state != ATH12K_STATE_ON) {
+		ret = -ENETDOWN;
+		goto exit;
+	}
+
+	if (!ar->ani_enabled) {
+		ath12k_warn(ar->ab, "ANI is disabled\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	ret = ath12k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_ANI_POLL_PERIOD,
+					ani_poll_period,
+					ar->pdev->pdev_id);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to send ANI poll period wmi cmd: %d\n", ret);
+		goto exit;
+	}
+
+	ar->ani_poll_period = ani_poll_period;
+	ret = count;
+exit:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static const struct file_operations fops_ani_poll_period = {
+	.read = ath12k_read_ani_poll_period,
+	.write = ath12k_write_ani_poll_period,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+static ssize_t ath12k_read_ani_listen_period(struct file *file,
+					     char __user *user_buf,
+					     size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int len = 0;
+	char buf[32];
+
+	if (!ar->ani_enabled)
+		len = scnprintf(buf, sizeof(buf), "ANI is disabled\n");
+	else
+		len = scnprintf(buf, sizeof(buf) - len, "%u\n", ar->ani_listen_period);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t ath12k_write_ani_listen_period(struct file *file,
+					      const char __user *user_buf,
+					      size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	u32 ani_listen_period = 0;
+	int ret;
+
+	if (kstrtou32_from_user(user_buf, count, 0, &ani_listen_period))
+		return -EINVAL;
+
+	if (ani_listen_period > ATH12K_ANI_LISTEN_PERIOD_MAX)
+		return -EINVAL;
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->state != ATH12K_STATE_ON) {
+		ret = -ENETDOWN;
+		goto exit;
+	}
+
+	if (!ar->ani_enabled) {
+		ath12k_warn(ar->ab, "ANI is disabled\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	ret = ath12k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_ANI_LISTEN_PERIOD,
+					ani_listen_period, ar->pdev->pdev_id);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to send ANI listen period wmi cmd: %d\n", ret);
+		goto exit;
+	}
+
+	ar->ani_listen_period = ani_listen_period;
+	ret = count;
+exit:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static const struct file_operations fops_ani_listen_period = {
+	.read = ath12k_read_ani_listen_period,
+	.write = ath12k_write_ani_listen_period,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
+static int ath12k_debug_get_ani_level(struct ath12k *ar)
+{
+	unsigned long time_left;
+	int ret;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	reinit_completion(&ar->ani_ofdm_event);
+
+	ret = ath12k_wmi_pdev_get_ani_level(ar, WMI_PDEV_GET_ANI_OFDM_CONFIG_CMDID,
+					    ar->pdev->pdev_id);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to request ofdm ani level: %d\n", ret);
+		return ret;
+	}
+
+	time_left = wait_for_completion_timeout(&ar->ani_ofdm_event, 1 * HZ);
+	if (time_left == 0)
+		return -ETIMEDOUT;
+
+	return 0;
+}
+
+static ssize_t ath12k_read_ani_level(struct file *file, char __user *user_buf,
+				     size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	char buf[128];
+	int ret, len = 0;
+
+	mutex_lock(&ar->conf_mutex);
+	if (ar->state != ATH12K_STATE_ON) {
+		ret = -ENETDOWN;
+		goto unlock;
+	}
+
+	if (!ar->ani_enabled) {
+		len += scnprintf(buf, sizeof(buf), "ANI is disabled\n");
+	} else {
+		ret = ath12k_debug_get_ani_level(ar);
+		if (ret) {
+			ath12k_warn(ar->ab, "failed to request ani ofdm level: %d\n", ret);
+			goto unlock;
+		}
+		len += scnprintf(buf, sizeof(buf), "ofdm level %d\n",
+				 ar->ani_ofdm_level);
+	}
+	mutex_unlock(&ar->conf_mutex);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+unlock:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static ssize_t ath12k_write_ani_level(struct file *file,
+				      const char __user *user_buf,
+				      size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	s32 ofdm_level;
+	int ret;
+
+	if (kstrtos32_from_user(user_buf, count, 0, &ofdm_level))
+		return -EINVAL;
+
+	if ((ofdm_level < ATH12K_ANI_LEVEL_MIN || ofdm_level > ATH12K_ANI_LEVEL_MAX) &&
+	    ofdm_level != ATH12K_ANI_LEVEL_AUTO)
+		return -EINVAL;
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->state != ATH12K_STATE_ON && ar->state != ATH12K_STATE_RESTARTED) {
+		ret = -ENETDOWN;
+		goto exit;
+	}
+
+	if (!ar->ani_enabled) {
+		ath12k_warn(ar->ab, "ANI is disabled\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	ret = ath12k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_ANI_OFDM_LEVEL,
+					ofdm_level, ar->pdev->pdev_id);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to set ANI ofdm level :%d\n", ret);
+		goto exit;
+	}
+
+	ret = count;
+exit:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static const struct file_operations fops_ani_level = {
+	.write = ath12k_write_ani_level,
+	.read = ath12k_read_ani_level,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 int ath12k_debugfs_register(struct ath12k *ar)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -4410,6 +4703,7 @@ int ath12k_debugfs_register(struct ath12
 	ath12k_init_pktlog(ar);
 
 	init_completion(&ar->tpc_complete);
+	init_completion(&ar->ani_ofdm_event);
 
 	memset(&ar->wmm_stats, 0, sizeof(struct ath12k_wmm_stats));
 
@@ -4481,6 +4775,16 @@ int ath12k_debugfs_register(struct ath12
 			    ar->debug.debugfs_pdev, ar,
 			    &fops_sawf_stats);
 #endif
+	debugfs_create_file("ani_enable", 0600, ar->debug.debugfs_pdev,
+			    ar, &fops_ani_enable);
+	debugfs_create_file("ani_level", 0600, ar->debug.debugfs_pdev,
+			    ar, &fops_ani_level);
+	debugfs_create_file("ani_poll_period", 0600,
+			    ar->debug.debugfs_pdev, ar,
+			    &fops_ani_poll_period);
+	debugfs_create_file("ani_listen_period", 0600,
+			    ar->debug.debugfs_pdev, ar,
+			    &fops_ani_listen_period);
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -260,6 +260,12 @@ enum qca_wlan_priority_type {
 #define BTCOEX_PTA_MODE                  2
 #define BTCOEX_MAX_PKT_WEIGHT            255
 
+#define ATH12K_ANI_LEVEL_MAX         30
+#define ATH12K_ANI_LEVEL_MIN         -5
+#define ATH12K_ANI_LEVEL_AUTO        128
+#define ATH12K_ANI_POLL_PERIOD_MAX   3000
+#define ATH12K_ANI_LISTEN_PERIOD_MAX 3000
+
 void ath12k_wmi_crl_path_stats_list_free(struct ath12k *ar, struct list_head *head);
 
 #ifdef CPTCFG_ATH12K_DEBUGFS
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10146,6 +10146,9 @@ int ath12k_mac_radio_start(struct ath12k
 	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx],
 			   &ab->pdevs[ar->pdev_idx]);
 
+	/*ani is enabled by default*/
+	ar->ani_enabled = true;
+
 	return 0;
 
 err:
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -2263,7 +2263,7 @@ ath12k_wmi_rx_reord_queue_remove(struct
 }
 
 int ath12k_wmi_pdev_set_param(struct ath12k *ar, u32 param_id,
-			      u32 param_value, u8 pdev_id)
+			      s32 param_value, u8 pdev_id)
 {
 	struct ath12k_wmi_pdev *wmi = ar->wmi;
 	struct wmi_pdev_set_param_cmd *cmd;
@@ -14078,6 +14078,62 @@ ath12k_wmi_spectral_capabilities_event(s
 
 }
 
+int ath12k_wmi_pdev_get_ani_level(struct ath12k *ar, u32 cmd_id, u8 pdev_id)
+{
+	struct ath12k_wmi_pdev *wmi = ar->wmi;
+	struct wmi_pdev_get_ani_level_cmd *cmd;
+	struct sk_buff *skb;
+	int ret;
+	enum wmi_tlv_tag tlv_tag;
+
+	tlv_tag = WMI_TAG_PDEV_GET_ANI_OFDM_CONFIG_CMD;
+
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, sizeof(*cmd));
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_pdev_get_ani_level_cmd *)skb->data;
+	cmd->tlv_header = ath12k_wmi_tlv_cmd_hdr(tlv_tag, sizeof(*cmd));
+	cmd->pdev_id = cpu_to_le32(pdev_id);
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, cmd_id);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to send WMI_PDEV_GET_ANI_CONFIG cmd\n");
+		dev_kfree_skb(skb);
+	}
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "WMI_PDEV_GET_ANI_CONFIG cmdid %d for pdev_id: %d\n",
+		   cmd_id, pdev_id);
+	return ret;
+}
+
+static void ath12k_wmi_event_ani_ofdm_level(struct ath12k_base *ab,
+					    struct sk_buff *skb)
+{
+	const struct wmi_pdev_ani_event *ev;
+	struct ath12k *ar;
+	u8 pdev_id;
+	bool pdev_id_valid;
+
+	ev = (struct wmi_pdev_ani_event *)skb->data;
+
+	pdev_id_valid = WMI_ANI_EVENT_PDEV_ID_VALID & le32_to_cpu(ev->pdev_id_bitmap);
+	if (!pdev_id_valid) {
+		ath12k_warn(ab, "WMI_PDEV_ANI_OFDM_LEVEL_EVENT is not supported\n");
+		return;
+	}
+
+	pdev_id = le32_get_bits(ev->pdev_id_bitmap, WMI_ANI_EVENT_PDEV_ID);
+	ar = ath12k_mac_get_ar_by_pdev_id(ab, pdev_id);
+	if (!ar) {
+		ath12k_warn(ab, "Invalid pdev_id received for ANI OFDM level\n");
+		return;
+	}
+
+	ar->ani_ofdm_level = le32_to_cpu(ev->ani_level);
+	complete(&ar->ani_ofdm_event);
+}
+
 static void ath12k_wmi_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -14245,6 +14301,9 @@ static void ath12k_wmi_op_rx(struct ath1
 	case WMI_MGMT_RX_FW_CONSUMED_EVENTID:
 		ath12k_fw_consumed_mgmt_rx_event(ab, skb);
 		break;
+	case WMI_PDEV_ANI_OFDM_LEVEL_EVENTID:
+		ath12k_wmi_event_ani_ofdm_level(ab, skb);
+		break;
 	/* TODO: Add remaining events */
 	default:
 		ath12k_dbg(ab, ATH12K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3774,6 +3774,12 @@ struct wmi_pdev_ap_ps_cmd {
 	u32 param_value;
 };
 
+struct wmi_pdev_get_ani_level_cmd {
+	__le32 tlv_header;
+	__le32 pdev_id;
+	__le32 param_id;
+} __packed;
+
 struct wmi_pdev_set_param_cmd {
 	__le32 tlv_header;
 	__le32 pdev_id;
@@ -8274,6 +8280,19 @@ struct wmi_peer_tid_latency_cmd {
 	__le32 pdev_id;
 } __packed;
 
+#define WMI_ANI_EVENT_PDEV_ID_VALID	BIT(31)
+#define WMI_ANI_EVENT_PDEV_ID		GENMASK(7, 0)
+
+struct wmi_pdev_ani_event {
+	__le32 tlv_header;
+	__s32 ani_level;
+	/* Bits 7:0  - pdev_id
+	 * Bits 30:8 - reserved
+	 * Bits 31   - pdev_id_valid - Flag to check pdev_id is valid or not
+	 */
+	__le32 pdev_id_bitmap;
+} __packed;
+
 #define ATH12K_FW_STATS_BUF_SIZE (1024 * 1024)
 
 void ath12k_wmi_init_qcn9274(struct ath12k_base *ab,
@@ -8300,7 +8319,7 @@ int ath12k_wmi_vdev_start(struct ath12k
 int ath12k_wmi_set_peer_param(struct ath12k *ar, const u8 *peer_addr,
 			      u32 vdev_id, u32 param_id, u32 param_val);
 int ath12k_wmi_pdev_set_param(struct ath12k *ar, u32 param_id,
-			      u32 param_value, u8 pdev_id);
+			      s32 param_value, u8 pdev_id);
 int ath12k_wmi_pdev_set_ps_mode(struct ath12k *ar, int vdev_id, u32 enable);
 int ath12k_wmi_wait_for_unified_ready(struct ath12k_base *ab);
 int ath12k_wmi_cmd_init(struct ath12k_base *ab);
@@ -8485,4 +8504,5 @@ int ath12k_wmi_config_peer_ppeds_routing
 #endif
 void ath12k_wmi_peer_chan_width_switch_work(struct work_struct *work);
 int ath12k_wmi_set_latency(struct ath12k *ar, struct ath12k_latency_params *params);
+int ath12k_wmi_pdev_get_ani_level(struct ath12k *ar, u32 param_id, u8 pdev_id);
 #endif
