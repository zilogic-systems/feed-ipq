From f3fa4257afe1cbbc196e3c09ba85667344f130fc Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Mon, 18 Dec 2023 12:38:36 +0530
Subject: [PATCH] wifi: ath12k: update scan bssid based on the scan request

In case of single netdev architecture, when we configure
multi-link virtual ap interface, say 2 GHz + 5 GHz combination,
the interface starts without synchronization. In this case,
first 2 GHz link configuration is initiated first and started with
say mac address X, then 5 GHz link configuration is initiated but
since it has subset of 40 MHz, 40 MHz scan is triggered from
hostapd.

Driver uses same address X for 5G link scan which is causing same
mac address clashes.

This can be avoided by leveraging the existing bssid param used in
scan command. hence, add changes to handle the bssid parameter for
scan vdev in driver

Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index ebfa186..c083b9c 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5134,6 +5134,8 @@ void ath12k_mac_unassign_link_vif(struct ath12k_link_vif *arvif)
 
 	if (arvif != &ahvif->deflink)
 		kfree(arvif);
+	else
+		memset(arvif->addr, 0, ETH_ALEN);
 }
 
 struct ath12k_link_vif *
@@ -5525,6 +5527,12 @@ static int ath12k_mac_op_hw_scan(struct ieee80211_hw *hw,
 			mutex_unlock(&ah->conf_mutex);
 			return -ENOMEM;
 		}
+
+		if (arvif->link_id == ATH12K_DEFAULT_SCAN_LINK &&
+		    (!is_broadcast_ether_addr(req->bssid) &&
+		     !is_zero_ether_addr(req->bssid)))
+			memcpy(arvif->addr, req->bssid, ETH_ALEN);
+
 		mutex_lock(&ar->conf_mutex);
 		ret = ath12k_mac_vdev_create(ar, arvif);
 		if (ret) {
@@ -10754,8 +10762,14 @@ static void ath12k_update_obss_color_notify_work(struct work_struct *work)
 		return -EINVAL;
 	}
 
-	memcpy(link_addr, link_conf->addr, ETH_ALEN);
-	memcpy(arvif->addr, link_conf->addr, ETH_ALEN);
+	if (arvif->link_id == ATH12K_DEFAULT_SCAN_LINK &&
+	    !is_zero_ether_addr(arvif->addr)) {
+		memcpy(link_addr, arvif->addr, ETH_ALEN);
+	} else {
+		memcpy(link_addr, link_conf->addr, ETH_ALEN);
+		memcpy(arvif->addr, link_conf->addr, ETH_ALEN);
+	}
+
 	txpower = link_conf->txpower;
 	rcu_read_unlock();
 
-- 
2.34.1

