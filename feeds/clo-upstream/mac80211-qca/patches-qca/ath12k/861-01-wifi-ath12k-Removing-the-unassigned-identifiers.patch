From 27450bbac2e0243e66817101a63abfa7b0026965 Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Thu, 21 Dec 2023 11:17:05 +0530
Subject: [PATCH] wifi: ath12k: Removing the unassigned identifiers and their
 functionalities.

Removing the unassigned identifiers and the functionalities associated
with them from the vendor.c and vendor.h files.

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/vendor.c | 882 -----------------------
 drivers/net/wireless/ath/ath12k/vendor.h | 138 ----
 2 files changed, 1020 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -13,78 +13,6 @@
 
 #ifdef CPTCFG_ATH12K_SAWF
 static const struct nla_policy
-ath12k_vendor_sawf_config_policy[QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX + 1] = {
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SERVICE_CLASSES] = {.type = NLA_NESTED},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID] = {.type = NLA_U8},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_APP_NAME] = {.type = NLA_STRING},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MIN_TP] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MAX_TP] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_BURST_SIZE] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_INTERVAL] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_DELAY_BOUND] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_TTL] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_PRIO] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_TID] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_RATE_LOSS] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_SVC_INTERVAL] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MIN_TPUT] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MAX_LATENCY] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_BURST_SIZE] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_OFDMA_DISABLE] = {.type = NLA_U8},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MU_MIMO_DISABLE] = {.type = NLA_U8},
-};
-
-static const struct nla_policy
-ath12k_vendor_sawf_def_qmap_req_policy[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX + 1] = {
-	[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_SVC_ID] = {.type = NLA_U8},
-	[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR] = {.type = NLA_STRING, .len = 18},
-};
-
-static const struct nla_policy
-ath12k_vendor_sawf_def_qmap_rep_req_policy[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX + 1] = {
-	[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR] = {.type = NLA_STRING, .len = 18},
-};
-
-static const struct nla_policy
-ath12k_vendor_telemetry_sawf_sla_thershold_config_policy[QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX + 1] = {
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_SVC_ID] = {.type = NLA_U8},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MIN_TP] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MAX_TP] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_BURST_SIZE] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_INTERVAL] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_DELAY_BOUND] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_TTL] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_RATE_LOSS] = {.type = NLA_U32},
-};
-
-
-static const struct nla_policy
-ath12k_vendor_telemetry_sawf_sla_detect_config_policy[QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX + 1] = {
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECTION_PARAM] = {.type = NLA_U8},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MIN_TP] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MAX_TP] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_BURST_SIZE] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_INTERVAL] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_DELAY_BOUND] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_TTL] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_RATE_LOSS] = {.type = NLA_U32},
-};
-
-static const struct nla_policy
-ath12k_vendor_telemetry_sawf_sla_samples_config_policy[QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX + 1] = {
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_PKT] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_WIN] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_NUM_PKT] = {.type = NLA_U32},
-	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_TIME_SEC] = {.type = NLA_U32},
-};
-
-static const struct nla_policy
-ath12k_vendor_sawf_streaming[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX + 1] = {
-	[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS] = {.type = NLA_U8},
-	[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS] = {.type = NLA_U8},
-};
-
-static const struct nla_policy
 ath12k_telemetric_req_policy[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX + 1] = {
 	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL] = {.type = NLA_U8},
 	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT] = {.type = NLA_U8},
@@ -95,18 +23,6 @@ ath12k_telemetric_req_policy[QCA_WLAN_VE
 						     .len = ETH_ALEN},
 	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID] = {.type = NLA_U8},
 };
-
-static const struct nla_policy
-ath12k_telemetric_sla_policy[QCA_WLAN_VENDOR_ATTR_SLA_MAX + 1] = {
-	[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MAC] = {.type = NLA_BINARY,
-					       .len = ETH_ALEN},
-	[QCA_WLAN_VENDOR_ATTR_SLA_SVC_ID] = {.type = NLA_U8},
-	[QCA_WLAN_VENDOR_ATTR_SLA_PARAM] = {.type = NLA_U8},
-	[QCA_WLAN_VENDOR_ATTR_SLA_SET_CLEAR] = {.type = NLA_U8},
-	[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MLD_MAC] = {.type = NLA_BINARY,
-						   .len = ETH_ALEN},
-	[QCA_WLAN_VENDOR_ATTR_SLA_AC] = {.type = NLA_U8},
-};
 #endif
 
 static const struct nla_policy
@@ -129,618 +45,6 @@ ath12k_ds_policy[QCA_WLAN_VENDOR_ATTR_DS
 };
 
 #ifdef CPTCFG_ATH12K_SAWF
-static void ath12k_set_default_values(struct ath12k_sawf_svc_params *param)
-{
-	param->min_throughput_rate = SAWF_SVC_PARAM_DEFAULT_MIN_THRUPUT;
-	param->max_throughput_rate = SAWF_SVC_PARAM_DEFAULT_MAX_THRUPUT;
-	param->burst_size = SAWF_SVC_PARAM_DEFAULT_BURST_SIZE;
-	param->service_interval = SAWF_SVC_PARAM_DEFAULT_SVC_INTERVAL;
-	param->delay_bound = SAWF_SVC_PARAM_DEFAULT_DELAY_BOUND;
-	param->msdu_ttl = SAWF_SVC_PARAM_DEFAULT_TIME_TO_LIVE;
-	param->priority = SAWF_SVC_PARAM_DEFAULT_PRIORITY;
-	param->tid = SAWF_SVC_PARAM_DEFAULT_TID;
-	param->msdu_rate_loss = SAWF_SVC_PARAM_DEFAULT_MSDU_LOSS_RATE;
-	param->ul_burst_size = SAWF_SVC_PARAM_DEFAULT_UL_BURST_SIZE;
-	param->ul_min_tput = SAWF_SVC_PARAM_DEFAULT_UL_MIN_TPUT;
-	param->ul_max_latency = SAWF_SVC_PARAM_DEFAULT_UL_MAX_LATENCY;
-	param->ul_service_interval = SAWF_SVC_PARAM_DEFAULT_UL_SVC_INTERVAL;
-	param->ul_ofdma_disable = SAWF_SVC_PARAM_DEFAULT_UL_OFDMA_DISABLE;
-	param->ul_mu_mimo_disable = SAWF_SVC_PARAM_DEFAULT_UL_MU_MIMO_DISABLE;
-}
-
-static int ath12k_vendor_set_sawf_config(struct wiphy *wiphy,
-					 struct wireless_dev *wdev,
-					 const void *data,
-					 int data_len)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX + 1];
-	struct ath12k_sawf_svc_params sawf_param;
-	char *app_name = NULL;
-	int ret = 0;
-
-	if (!ath12k_sawf_enable)
-		return -EOPNOTSUPP;
-
-	memset(&sawf_param, 0, sizeof(struct ath12k_sawf_svc_params));
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX, data, data_len,
-			ath12k_vendor_sawf_config_policy, NULL);
-	if (ret) {
-		ath12k_err(NULL, "Invalid attributes with SAWF configure command\n");
-		return ret;
-	}
-
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID] &&
-	    tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_APP_NAME]) {
-		sawf_param.svc_id = nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID]);
-		app_name = nla_data(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_APP_NAME]);
-		memcpy(sawf_param.app_name, app_name, ATH12K_MAX_APP_NAME);
-	} else {
-		ath12k_err(NULL, "Mandatory attributes not available\n");
-		return -EINVAL;
-	}
-
-	ath12k_set_default_values(&sawf_param);
-
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MIN_TP])
-		sawf_param.min_throughput_rate = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MIN_TP]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MAX_TP])
-		sawf_param.max_throughput_rate = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MAX_TP]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_BURST_SIZE])
-		sawf_param.burst_size = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_BURST_SIZE]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_INTERVAL])
-		sawf_param.service_interval = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_INTERVAL]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_DELAY_BOUND])
-		sawf_param.delay_bound = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_DELAY_BOUND]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_TTL])
-		sawf_param.msdu_ttl = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_TTL]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_PRIO])
-		sawf_param.priority = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_PRIO]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_TID])
-		sawf_param.tid = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_TID]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_RATE_LOSS])
-		sawf_param.msdu_rate_loss = nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_RATE_LOSS]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_SVC_INTERVAL])
-		sawf_param.ul_service_interval =
-			nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_SVC_INTERVAL]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_BURST_SIZE])
-		sawf_param.ul_burst_size =
-			nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_BURST_SIZE]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MIN_TPUT])
-		sawf_param.ul_min_tput =
-			nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MIN_TPUT]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MAX_LATENCY])
-		sawf_param.ul_max_latency =
-			nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MAX_LATENCY]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_OFDMA_DISABLE])
-		sawf_param.ul_ofdma_disable =
-			nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_OFDMA_DISABLE]);
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MU_MIMO_DISABLE])
-		sawf_param.ul_mu_mimo_disable =
-			nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MU_MIMO_DISABLE]);
-
-	ret = ath12k_create_send_svc_params(&sawf_param);
-
-	return ret;
-}
-
-static int ath12k_vendor_disable_sawf_config(struct wiphy *wihpy,
-					     struct wireless_dev *wdev,
-					     const void *data,
-					     int data_len)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX + 1];
-	u8 svc_id = 0;
-	int ret = 0;
-
-	if (!ath12k_sawf_enable)
-		return -EOPNOTSUPP;
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX, data, data_len,
-			ath12k_vendor_sawf_config_policy, NULL);
-	if (ret) {
-		ath12k_err(NULL, "Invalid attribute with SAWF disable command\n");
-		return ret;
-	}
-
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID]) {
-		svc_id = nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID]);
-	} else {
-		ath12k_err(NULL, "Mandatory attribute not available\n");
-		return -EINVAL;
-	}
-
-	ret = ath12k_sawf_disable_config(svc_id);
-
-	return ret;
-}
-
-static int ath12k_vendor_view_sawf_config(struct wiphy *wihpy,
-					  struct wireless_dev *wdev,
-					  struct sk_buff *msg,
-					  const void *data,
-					  int data_len,
-					  unsigned long *storage)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX + 1];
-	struct ath12k_sawf_ctx *sawf_ctx;
-	struct ath12k_sawf_svc_params *svc_class;
-	struct nlattr *sawf_svc_classes, *sawf_svc_class;
-	int ret = 0, i, j = 0;
-	int tailroom = 0, nest_start_length = 0, nest_end_length = 0, nested_range = 0;
-	u8 svc_id = 0;
-
-	if (!ath12k_sawf_enable)
-		return -EOPNOTSUPP;
-
-	sawf_ctx = ath12k_get_sawf_context();
-	if (!sawf_ctx) {
-		ath12k_err(NULL, "SAWF context not available\n");
-		return -ENODATA;
-	}
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX, data, data_len,
-			ath12k_vendor_sawf_config_policy, NULL);
-
-	if (ret) {
-		ath12k_warn(NULL, "Invalid attribute with SAWF view command \n");
-		return ret;
-	}
-
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID]) {
-		bool isconfigured;
-		svc_id = nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID]);
-		if (!ath12k_svc_id_valid(svc_id)) {
-			ath12k_err(NULL, "Invalid Service ID: %u\n", svc_id);
-			return -EINVAL;
-		}
-		spin_lock_bh(&sawf_ctx->sawf_svc_lock);
-		isconfigured = ath12k_svc_id_configured(svc_id);
-		spin_unlock_bh(&sawf_ctx->sawf_svc_lock);
-		if (!isconfigured)
-			return -EINVAL;
-	}
-
-	/* return 0 to end the dump */
-	if (storage && (*storage == ATH12K_SAWF_SVC_CLASS_MAX))
-		return 0;
-
-	sawf_svc_classes = nla_nest_start(msg,
-					  QCN_WLAN_VENDOR_ATTR_SAWF_SERVICE_CLASSES);
-
-	if (!sawf_svc_classes)
-		return -ENOBUFS;
-
-	tailroom = skb_tailroom(msg);
-	spin_lock_bh(&sawf_ctx->sawf_svc_lock);
-	for (i = (svc_id) ? (svc_id - 1) : (*storage);
-	     i < ATH12K_SAWF_SVC_CLASS_MAX && tailroom > nested_range;
-	     i += (svc_id) ? (ATH12K_SAWF_SVC_CLASS_MAX) : (1)) {
-		if (!sawf_ctx->svc_classes[i].configured)
-			continue;
-
-		svc_class = &sawf_ctx->svc_classes[i];
-		nest_start_length = msg->len;
-		sawf_svc_class = nla_nest_start(msg, j);
-		if (nla_put_u8(msg, QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID,
-			       svc_class->svc_id) ||
-		    nla_put(msg, QCN_WLAN_VENDOR_ATTR_SAWF_SVC_APP_NAME,
-			    sizeof(svc_class->app_name),
-			    svc_class->app_name) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MIN_TP,
-				svc_class->min_throughput_rate) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MAX_TP,
-				svc_class->max_throughput_rate) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_BURST_SIZE,
-				svc_class->burst_size) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_INTERVAL,
-				svc_class->service_interval) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_DELAY_BOUND,
-				svc_class->delay_bound) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_TTL,
-				svc_class->msdu_ttl) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_PRIO,
-				svc_class->priority) ||
-		    nla_put_u32(msg, QCN_WLAN_VENDOR_ATTR_SAWF_SVC_TID,
-				svc_class->tid) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_RATE_LOSS,
-				svc_class->msdu_rate_loss) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_SVC_INTERVAL,
-				svc_class->ul_service_interval) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MIN_TPUT,
-				svc_class->ul_min_tput) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MAX_LATENCY,
-				svc_class->ul_max_latency) ||
-		    nla_put_u32(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_BURST_SIZE,
-				svc_class->ul_burst_size) ||
-		    nla_put_u8(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_OFDMA_DISABLE,
-				svc_class->ul_ofdma_disable) ||
-		    nla_put_u8(msg,
-				QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MU_MIMO_DISABLE,
-				svc_class->ul_mu_mimo_disable))
-
-			goto nla_put_failure;
-
-		nest_end_length = nla_nest_end(msg, sawf_svc_class);
-		nested_range = nest_end_length - nest_start_length;
-		tailroom -= nested_range;
-		j++;
-	}
-	spin_unlock_bh(&sawf_ctx->sawf_svc_lock);
-	nla_nest_end(msg, sawf_svc_classes);
-
-	*storage = (svc_id) ? (ATH12K_SAWF_SVC_CLASS_MAX) : (i);
-
-	if (!j)
-		return 0;
-
-	return msg->len;
-
-nla_put_failure:
-	spin_unlock_bh(&sawf_ctx->sawf_svc_lock);
-	return -ENOBUFS;
-}
-
-static int ath12k_vendor_sawf_def_qmap_req(struct wiphy *wiphy,
-					   struct wireless_dev *wdev,
-					   const void *data,
-					   int data_len)
-{
-	struct nlattr *tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX + 1];
-	struct ath12k_base *ab = NULL;
-	u8 svc_id;
-	u8 *mac_addr_p = NULL;
-	u16 peer_id = 0xFFFF;
-	u8 mac_addr[ATH12K_MAC_ADDR_SIZE] = { 0 };
-	int ret = 0;
-
-	ret = nla_parse(tb, QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX, data, data_len,
-			ath12k_vendor_sawf_def_qmap_req_policy, NULL);
-	if (ret) {
-		ath12k_warn(NULL, "invalid sawf def q map policy attribute\n");
-		return ret;
-	}
-
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR])	{
-		mac_addr_p = nla_data(tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR]);
-		if (sscanf(mac_addr_p,
-			   "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
-			   &mac_addr[0],
-			   &mac_addr[1],
-			   &mac_addr[2],
-			   &mac_addr[3],
-			   &mac_addr[4],
-			   &mac_addr[5]) != ATH12K_MAC_ADDR_SIZE) {
-			ath12k_warn(NULL, "invalid Macaddr %s\n", mac_addr_p);
-			return -1;
-		}
-	}
-	svc_id = nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_SVC_ID]);
-
-	ath12k_dbg(NULL, ATH12K_DBG_SAWF,
-		   "Default Q map:svcid[%u]macaddr[%pM]\n", svc_id, mac_addr);
-
-	ab = ath12k_sawf_get_ab_from_netdev(wdev->netdev, mac_addr, &peer_id);
-	if (ab)
-		ret = ath12k_sawf_def_qmap_req(ab, svc_id, peer_id);
-
-	return ret;
-}
-
-static int ath12k_vendor_sawf_def_qunmap_req(struct wiphy *wiphy,
-					     struct wireless_dev *wdev,
-					     const void *data,
-					     int data_len)
-{
-	struct nlattr *tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX + 1];
-	struct ath12k_base *ab;
-	u8 svc_id;
-	u16 peer_id = 0xFFFF;
-	u8 *mac_addr_p = NULL;
-	u8 mac_addr[ATH12K_MAC_ADDR_SIZE] = { 0 };
-	int ret = 0;
-
-	ret = nla_parse(tb, QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX, data, data_len,
-			ath12k_vendor_sawf_def_qmap_req_policy, NULL);
-	if (ret) {
-		ath12k_warn(NULL, "invalid sawf def q unmap policy attribute\n");
-		return ret;
-	}
-
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR]) {
-		mac_addr_p = nla_data(tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR]);
-		if (sscanf(mac_addr_p,
-			   "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
-			   &mac_addr[0],
-			   &mac_addr[1],
-			   &mac_addr[2],
-			   &mac_addr[3],
-			   &mac_addr[4],
-			   &mac_addr[5]) != ATH12K_MAC_ADDR_SIZE) {
-			ath12k_warn(NULL, "invalid Macaddr %s\n", mac_addr_p);
-			return -1;
-		}
-	}
-	svc_id = nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_SVC_ID]);
-
-	ath12k_dbg(NULL, ATH12K_DBG_SAWF,
-		   "Default Q unmap:svcid[%u]macaddr[%pM]\n", svc_id, mac_addr);
-
-	ab = ath12k_sawf_get_ab_from_netdev(wdev->netdev, mac_addr, &peer_id);
-
-	if (ab)
-		ret = ath12k_sawf_def_qunmap_req(ab, svc_id, peer_id);
-
-	return ret;
-}
-
-static int ath12k_vendor_sawf_def_qmap_report_req(struct wiphy *wiphy,
-						  struct wireless_dev *wdev,
-						  const void *data,
-						  int data_len)
-{
-	struct nlattr *tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX + 1];
-	struct ath12k_base *ab = NULL;
-	u16 peer_id = 0xFFFF;
-	u8 *mac_addr_p = NULL;
-	u8 mac_addr[ATH12K_MAC_ADDR_SIZE] = { 0 };
-	int ret = 0;
-
-	ret = nla_parse(tb, QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX, data, data_len,
-			ath12k_vendor_sawf_def_qmap_rep_req_policy, NULL);
-	if (ret) {
-		ath12k_warn(NULL, "invalid sawf def q map report req policy attribute\n");
-		return ret;
-	}
-
-	if (tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR])	{
-		mac_addr_p = nla_data(tb[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR]);
-		if (sscanf(mac_addr_p,
-			   "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
-			   &mac_addr[0],
-			   &mac_addr[1],
-			   &mac_addr[2],
-			   &mac_addr[3],
-			   &mac_addr[4],
-			   &mac_addr[5]) != ATH12K_MAC_ADDR_SIZE) {
-			ath12k_warn(NULL, "invalid Macaddr %s\n", mac_addr_p);
-			return -1;
-		}
-	}
-	ath12k_dbg(NULL, ATH12K_DBG_SAWF,
-		   "Default Q map report:macaddr[%pM]\n", mac_addr);
-
-	ab = ath12k_sawf_get_ab_from_netdev(wdev->netdev, mac_addr, &peer_id);
-	if (ab)
-		ret = ath12k_sawf_def_qmap_report_req(ab, peer_id);
-
-	return ret;
-}
-
-static int ath12k_vendor_telemetry_sawf_sla_samples_config(struct wiphy *wiphy,
-							   struct wireless_dev *wdev,
-							   const void *data,
-							   int data_len)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX + 1];
-	struct ath12k_sla_samples_cfg t_param;
-	int ret = 0;
-
-	if (!ath12k_sawf_enable) {
-		ath12k_warn(NULL, "sawf is not enabled \n");
-		return -ENOSYS;
-	}
-
-	memset(&t_param, 0, sizeof(struct ath12k_sla_samples_cfg));
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX,
-			data, data_len, ath12k_vendor_telemetry_sawf_sla_samples_config_policy, NULL);
-        if (ret) {
-		ath12k_warn(NULL, "invalid set telemetry sla samples config policy attribute\n");
-		return ret;
-        }
-
-	t_param.moving_avg_pkt =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_PKT]);
-	t_param.moving_avg_win =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_WIN]);
-	t_param.sla_num_pkt =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_NUM_PKT]);
-	t_param.sla_time_sec =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_TIME_SEC]);
-
-	ret = ath12k_telemetry_sawf_sla_samples_config(t_param);
-	return ret;
-}
-
-static int ath12k_vendor_telemetry_sawf_sla_thershold_config(struct wiphy *wiphy,
-							     struct wireless_dev *wdev,
-							     const void *data,
-							     int data_len)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX + 1];
-	struct ath12k_sla_thershold_cfg t_param;
-	int ret = 0;
-
-	if (!ath12k_sawf_enable) {
-		ath12k_warn(NULL, "sawf is not enabled \n");
-		return -ENOSYS;
-	}
-
-	memset(&t_param, 0, sizeof(struct ath12k_sla_thershold_cfg));
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX,
-			data, data_len, ath12k_vendor_telemetry_sawf_sla_thershold_config_policy,
-			NULL);
-	if (ret) {
-		ath12k_warn(NULL, "invalid telemetry sla thershold config policy attribute\n");
-		return ret;
-	}
-
-	t_param.svc_id =
-		nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_SVC_ID]);
-	t_param.min_throughput_rate =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MIN_TP]);
-	t_param.max_throughput_rate =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MAX_TP]);
-	t_param.burst_size =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_BURST_SIZE]);
-	t_param.service_interval =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_INTERVAL]);
-	t_param.delay_bound =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_DELAY_BOUND]);
-	t_param.msdu_ttl =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_TTL]);
-	t_param.msdu_rate_loss =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_RATE_LOSS]);
-
-	ret = ath12k_telemetry_sawf_sla_thershold_config(t_param);
-
-	return ret;
-}
-
-static int ath12k_vendor_telemetry_sawf_sla_detection_config(struct wiphy *wiphy,
-							     struct wireless_dev *wdev,
-							     const void *data,
-							     int data_len)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX + 1];
-	struct ath12k_sla_detect_cfg t_param;
-	int ret = 0;
-
-	if (!ath12k_sawf_enable) {
-		ath12k_warn(NULL, "sawf is not enabled \n");
-		return -ENOSYS;
-	}
-
-	memset(&t_param, 0, sizeof(struct ath12k_sla_detect_cfg));
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX, data, data_len,
-			ath12k_vendor_telemetry_sawf_sla_detect_config_policy, NULL);
-	if (ret) {
-		ath12k_warn(NULL, "invalid telemetry sawf sla detection  config policy attribute\n");
-		return ret;
-	}
-
-	t_param.sla_detect =
-		nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECTION_PARAM]);
-	t_param.min_throughput_rate =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MIN_TP]);
-	t_param.max_throughput_rate =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MAX_TP]);
-	t_param.burst_size =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_BURST_SIZE]);
-	t_param.service_interval =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_INTERVAL]);
-	t_param.delay_bound =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_DELAY_BOUND]);
-	t_param.msdu_ttl =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_TTL]);
-	t_param.msdu_rate_loss =
-		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_RATE_LOSS]);
-
-	ret = ath12k_telemetry_sawf_sla_detection_config(t_param);
-
-	return ret;
-}
-
-static struct ath12k *ath12k_get_ar_from_wdev(struct wireless_dev *wdev, u8 link_id)
-{
-        struct ieee80211_vif *vif =  NULL;
-        struct ath12k_vif *ahvif = NULL;
-        struct ieee80211_hw *hw = NULL;
-        struct ath12k *ar = NULL;
-
-	vif = wdev_to_ieee80211_vif(wdev);
-	if (!vif)
-		return NULL;
-
-	ahvif = (struct ath12k_vif *)vif->drv_priv;
-	if (!ahvif)
-		return NULL;
-
-	mutex_lock(&ahvif->ah->conf_mutex);
-	hw = ahvif->ah->hw;
-	if (!hw) {
-		mutex_unlock(&ahvif->ah->conf_mutex);
-		return NULL;
-	}
-
-	ar = ath12k_get_ar_by_vif(hw, vif, link_id);
-	mutex_unlock(&ahvif->ah->conf_mutex);
-
-	return ar;
-}
-
-static int ath12k_vendor_sawf_streaming_stats_configure(struct wiphy *wiphy,
-							struct wireless_dev *wdev,
-							const void *data,
-							int data_len)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX + 1];
-	struct ath12k *ar = NULL;
-	int ret = 0;
-	u8 basic_stats_configure, extnd_stats_configure, link_id;
-
-	if (!ath12k_sawf_enable)
-		return -EOPNOTSUPP;
-
-	if(!wdev)
-		return -ENODATA;
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX, data, data_len,
-			ath12k_vendor_sawf_streaming, NULL);
-	if (ret) {
-		ath12k_warn(NULL, "invalid sawf streaming stats configuration\n");
-		return ret;
-	}
-
-	if (wdev->valid_links) { /* MLO case */
-		if (!tb[QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID])
-			return -EINVAL;
-		link_id = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID]);
-		if (!(wdev->valid_links & BIT(link_id)))
-			return -ENOLINK;
-	} else { /* NON-MLO case */
-		if (!tb[QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID])
-			link_id = 0;
-		else
-			return -EINVAL;
-	}
-
-	ar = ath12k_get_ar_from_wdev(wdev, link_id);
-	if (!ar)
-		return -ENODATA;
-
-	if (tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS]) {
-		basic_stats_configure = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS]);
-		ret = ath12k_htt_sawf_streaming_stats_configure(ar, HTT_STRM_GEN_MPDUS_STATS,
-								basic_stats_configure, 0, 0, 0, 0);
-		if (ret)
-			return ret;
-	}
-
-	if (tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS]) {
-		extnd_stats_configure = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS]);
-		ret = ath12k_htt_sawf_streaming_stats_configure(ar, HTT_STRM_GEN_MPDUS_DETAILS_STATS,
-								extnd_stats_configure, 0, 0, 0, 0);
-	}
-
-	return ret;
-}
 
 static int telemetry_build_nd_send_reply_msg(struct wiphy *wiphy, struct stats_config *cfg,
 					     u8 *mac_addr, struct unified_stats *stats)
@@ -955,108 +259,10 @@ static int ath12k_vendor_ds_handler(stru
 
 	return 0;
 }
-
-static int ath12k_vendor_telemetry_sla_reset_stats(struct wiphy *wihpy,
-						   struct wireless_dev *wdev,
-						   const void *data,
-						   int data_len)
-{
-	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX + 1];
-	int ret = 0;
-	u8 svc_id, mac_addr[ETH_ALEN] = { 0 }, mld_mac_addr[ETH_ALEN] = { 0 }, set_clear;
-
-	if (!ath12k_sawf_enable)
-		return -EOPNOTSUPP;
-
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_ATTR_SLA_MAX, data, data_len,
-			ath12k_telemetric_sla_policy, NULL);
-
-	if (ret) {
-		ath12k_err(NULL, "Invalid attribute with telemetry sla reset stats command\n");
-		return ret;
-	}
-
-	if (tb[QCA_WLAN_VENDOR_ATTR_SLA_SVC_ID])
-		svc_id = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_SLA_SVC_ID]);
-
-	if (tb[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MAC] &&
-	    (nla_len(tb[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MAC]) == ETH_ALEN))
-		memcpy(mac_addr, nla_data(tb[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MAC]),
-		       ETH_ALEN);
-
-	if (tb[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MLD_MAC] &&
-	    (nla_len(tb[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MLD_MAC]) == ETH_ALEN))
-		memcpy(mld_mac_addr, nla_data(tb[QCA_WLAN_VENDOR_ATTR_SLA_PEER_MLD_MAC]),
-		       ETH_ALEN);
-
-	if (tb[QCA_WLAN_VENDOR_ATTR_SLA_SET_CLEAR])
-		set_clear = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_SLA_SET_CLEAR]);
-
-	return ath12k_telemetry_sla_reset_stats(svc_id, mac_addr, mld_mac_addr,
-						set_clear);
-}
-
 void ath12k_vendor_telemetry_notify_breach(struct ieee80211_vif *vif, u8 *mac_addr,
 					   u8 svc_id, u8 param, bool set_clear,
 					   u8 tid, u8 *mld_addr)
 {
-	struct wireless_dev *wdev;
-	struct sk_buff *skb;
-	u8 access_category;
-
-	wdev = ieee80211_vif_to_wdev(vif);
-
-	if (!wdev)
-		return;
-
-	if (!wdev->wiphy)
-		return;
-
-	skb = cfg80211_vendor_event_alloc(wdev->wiphy, wdev, NLMSG_DEFAULT_SIZE,
-					  QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH_INDEX,
-					  GFP_KERNEL);
-	if (!skb) {
-		ath12k_err(NULL, "No memory available to send notify breach event\n");
-		return;
-	}
-
-	switch (tid) {
-	case 0:
-	case 3:
-		access_category = 0; //AC_BE
-		break;
-	case 1:
-	case 2:
-		access_category = 1; //AC_BK
-		break;
-	case 4:
-	case 5:
-		access_category = 2; //AC_VI
-		break;
-	case 6:
-	case 7:
-		access_category = 3; //AC_VO
-		break;
-	default:
-		ath12k_err(NULL, "Invalid TID = %u for notifying breach event\n", tid);
-		goto err;
-	}
-
-	if (nla_put(skb, QCA_WLAN_VENDOR_ATTR_SLA_PEER_MAC, ETH_ALEN, mac_addr) ||
-	    (mld_addr && nla_put(skb, QCA_WLAN_VENDOR_ATTR_SLA_PEER_MLD_MAC,
-	    ETH_ALEN, mld_addr)) ||
-	    nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_SLA_SVC_ID, svc_id) ||
-	    nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_SLA_PARAM, param) ||
-	    nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_SLA_SET_CLEAR, set_clear) ||
-	    nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_SLA_AC, access_category)) {
-		ath12k_err(NULL, "No memory available at NL to send notify breach event\n");
-		goto err;
-	}
-
-	cfg80211_vendor_event(skb, GFP_KERNEL);
-	return;
-err:
-	kfree(skb);
 	return;
 }
 
@@ -1109,80 +315,6 @@ static struct wiphy_vendor_command ath12
 #ifdef CPTCFG_ATH12K_SAWF
 	{
 		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SVC_CREATE,
-		.doit = ath12k_vendor_set_sawf_config,
-		.policy = ath12k_vendor_sawf_config_policy,
-		.maxattr = QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SVC_DISABLE,
-		.doit = ath12k_vendor_disable_sawf_config,
-		.policy = ath12k_vendor_sawf_config_policy,
-		.maxattr = QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SVC_VIEW,
-		.dumpit = ath12k_vendor_view_sawf_config,
-		.policy = ath12k_vendor_sawf_config_policy,
-		.maxattr = QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP,
-		.doit = ath12k_vendor_sawf_def_qmap_req,
-		.policy = ath12k_vendor_sawf_def_qmap_req_policy,
-		.maxattr = QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX,
-		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_UNMAP,
-		.doit = ath12k_vendor_sawf_def_qunmap_req,
-		.policy = ath12k_vendor_sawf_def_qmap_req_policy,
-		.maxattr = QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX,
-		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP_REP,
-		.doit = ath12k_vendor_sawf_def_qmap_report_req,
-		.policy = ath12k_vendor_sawf_def_qmap_rep_req_policy,
-		.maxattr = QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX,
-		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_SAMPLES_CFG,
-		.doit = ath12k_vendor_telemetry_sawf_sla_samples_config,
-		.policy = ath12k_vendor_telemetry_sawf_sla_samples_config_policy,
-		.maxattr = QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_THERSHOLD_CFG,
-		.doit = ath12k_vendor_telemetry_sawf_sla_thershold_config,
-		.policy = ath12k_vendor_telemetry_sawf_sla_thershold_config_policy,
-		.maxattr = QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_BREACH_DETECTION_CFG,
-		.doit = ath12k_vendor_telemetry_sawf_sla_detection_config,
-		.policy = ath12k_vendor_telemetry_sawf_sla_detect_config_policy,
-		.maxattr = QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SAWF_STREAMING_STATS,
-		.doit = ath12k_vendor_sawf_streaming_stats_configure,
-		.policy = ath12k_vendor_sawf_streaming,
-		.maxattr = QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX,
-		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
 		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA,
 		.doit = ath12k_vendor_telemetry_getstats,
 		.policy = ath12k_telemetric_req_policy,
@@ -1191,14 +323,6 @@ static struct wiphy_vendor_command ath12
 	},
 	{
 		.info.vendor_id = QCA_NL80211_VENDOR_ID,
-		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH,
-		.doit = ath12k_vendor_telemetry_sla_reset_stats,
-		.policy = ath12k_telemetric_sla_policy,
-		.maxattr = QCA_WLAN_VENDOR_ATTR_SLA_MAX,
-		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
-	},
-	{
-		.info.vendor_id = QCA_NL80211_VENDOR_ID,
 		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION,
 		.doit = ath12k_vendor_ds_handler,
 		.policy = ath12k_ds_policy,
@@ -1217,12 +341,6 @@ static struct wiphy_vendor_command ath12
 };
 
 static const struct nl80211_vendor_cmd_info ath12k_vendor_events[] = {
-#ifdef CPTCFG_ATH12K_SAWF
-	[QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH_INDEX] = {
-		.vendor_id = QCA_NL80211_VENDOR_ID,
-		.subcmd = QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH,
-	},
-#endif
 };
 
 int ath12k_vendor_register(struct ath12k_hw *ah)
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -10,20 +10,6 @@
 enum qca_nl80211_vendor_subcmds {
 	/* Wi-Fi configuration subcommand */
 	QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION = 74,
-#ifdef CPTCFG_ATH12K_SAWF
-	QCA_NL80211_VENDOR_SUBCMD_SVC_CREATE = 204,
-	QCA_NL80211_VENDOR_SUBCMD_SVC_DISABLE = 205,
-	QCA_NL80211_VENDOR_SUBCMD_SVC_VIEW = 206,
-	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP = 207,
-	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_UNMAP = 208,
-	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP_REP = 209,
-	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_THERSHOLD_CFG = 210,
-	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_SAMPLES_CFG = 211,
-	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_BREACH_DETECTION_CFG = 212,
-	QCA_NL80211_VENDOR_SUBCMD_SAWF_STREAMING_STATS = 213,
-	QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH = 214,
-	QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH_INDEX = 215,
-#endif /* CPTCFG_ATH12K_SAWF */
 	QCA_NL80211_VENDOR_SUBCMD_SCS_RULE_CONFIG = 218,
 #ifdef CPTCFG_ATH12K_SAWF
 	QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA = 334,
@@ -31,98 +17,6 @@ enum qca_nl80211_vendor_subcmds {
 };
 
 #ifdef CPTCFG_ATH12K_SAWF
-enum qca_wlan_vendor_sawf_attr_config {
-	QCN_WLAN_VENDOR_ATTR_SAWF_SERVICE_CLASSES = 1,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_ID,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_APP_NAME,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MIN_TP,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MAX_TP,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_BURST_SIZE,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_INTERVAL,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_DELAY_BOUND,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_TTL,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_PRIO,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_TID,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_MSDU_RATE_LOSS,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_SVC_INTERVAL,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MIN_TPUT,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MAX_LATENCY,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_BURST_SIZE,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_OFDMA_DISABLE,
-	QCN_WLAN_VENDOR_ATTR_SAWF_SVC_UL_MU_MIMO_DISABLE,
-
-	/* keep last */
-	QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_AFTER_LAST,
-	QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX =
-		QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_AFTER_LAST - 1,
-};
-
-enum ath12k_vendor_attr_sawf_def_q_map {
-	QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_INVALID = 0,
-	QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_SVC_ID = 1,
-	QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR = 2,
-	/* keep last */
-	QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_AFTER_LAST,
-	QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX =
-		QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_AFTER_LAST - 1,
-};
-
-enum qca_wlan_vendor_attr_telemetry_sawf_sla_samples_config {
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_PKT = 1,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_WIN,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_NUM_PKT,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_TIME_SEC,
-
-	/* keep last */
-	QCN_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_AFTER_LAST,
-	QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX =
-		QCN_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_AFTER_LAST - 1,
-};
-
-enum qca_wlan_vendor_attr_telemetry_sawf_sla_detect_config {
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECTION_PARAM = 1,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MIN_TP,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MAX_TP,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_BURST_SIZE,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_INTERVAL,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_DELAY_BOUND,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_TTL,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_RATE_LOSS,
-
-	/* keep last */
-	QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_AFTER_LAST,
-	QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX =
-	QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_AFTER_LAST - 1,
-
-};
-
-enum qca_wlan_vendor_attr_telemetry_sawf_sla_thershold_config {
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_SVC_ID = 1,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MIN_TP,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MAX_TP,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_BURST_SIZE,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_INTERVAL,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_DELAY_BOUND,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_TTL,
-	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_RATE_LOSS,
-
-	/* keep last */
-	QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_AFTER_LAST,
-	QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX =
-	QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_AFTER_LAST - 1,
-};
-
-enum ath12k_vendor_attr_sawf_streaming {
-	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_INVALID = 0,
-	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS = 1,
-	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS = 2,
-	QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID = 3,
-	/* keep last */
-	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_AFTER_LAST,
-	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX =
-		QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_AFTER_LAST - 1,
-};
-
 /**
  * enum qca_wlan_vendor_attr_telemetric: Defines attributes to be used in
  * request message of QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command.
@@ -457,38 +351,6 @@ struct unified_stats {
 	u_int32_t size[STATS_FEAT_MAX];
 };
 
-/**
- * enum qca_wlan_vendor_attr_sawf_sla_params - This enum defines
- * attributes required for QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH
- * Attributes are required to notify SLA breaches from driver to
- * user application.
- *
- * @QCA_WLAN_VENDOR_ATTR_SLA_PEER_MAC: Unsigned 8-bit array
- * of size 6, representing peer mac address.
- * @QCA_WLAN_VENDOR_ATTR_SLA_SVC_ID: Unsigned 8-bit representing service ID
- * @QCA_WLAN_VENDOR_ATTR_SLA_PARAM: Unsigned 8-bit indicaing service class
- * from qca_vendor_attr_sla_param_type
- * @QCA_WLAN_VENDOR_ATTR_SLA_PEER_MLD_MAC: Unsigned 8-bit array
- * of size 6, representing peer mld mac address. Filled only for ML capable
- * peers
- * @QCA_WLAN_VENDOR_ATTR_SLA_AC: Unsigned 8-bit representing AC for breach
- *
- */
-enum qca_wlan_vendor_attr_sawf_sla_params {
-	QCA_WLAN_VENDOR_ATTR_SLA_INVALID = 0,
-	QCA_WLAN_VENDOR_ATTR_SLA_PEER_MAC = 1,
-	QCA_WLAN_VENDOR_ATTR_SLA_SVC_ID = 2,
-	QCA_WLAN_VENDOR_ATTR_SLA_PARAM = 3,
-	QCA_WLAN_VENDOR_ATTR_SLA_SET_CLEAR = 4,
-	QCA_WLAN_VENDOR_ATTR_SLA_PEER_MLD_MAC = 5,
-	QCA_WLAN_VENDOR_ATTR_SLA_AC = 6,
-
-	/* Keep last */
-	QCA_WLAN_VENDOR_ATTR_SLA_AFTER_LAST,
-	QCA_WLAN_VENDOR_ATTR_SLA_MAX =
-		QCA_WLAN_VENDOR_ATTR_SLA_AFTER_LAST - 1
-};
-
 enum qca_wlan_vendor_attr_ds {
 	QCA_WLAN_VENDOR_ATTR_DS_INVALID = 0,
 	QCA_WLAN_VENDOR_ATTR_CONFIG_EHT_MLO_MODE = 90,
