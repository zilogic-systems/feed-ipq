From 224151756ac1f972160081e01712e8d033618e5d Mon Sep 17 00:00:00 2001
From: Saravanakumar Duraisamy <quic_saradura@quicinc.com>
Date: Thu, 21 Dec 2023 12:54:59 +0530
Subject: [PATCH] wifi: ath12k: avoid synchronize_rcu call during rmmod

Crash observed in core rcu callback handling "rcu_cblist_dequeue"
during rmmod of ath12k with multiple station in random. synchronize_rcu is
called to update the NULL pointer in ath driver. Inside
synchronize_rcu there is a grace period and based on that callback
may got register via call_rcu.

In our case the rmmod synchronize_rcu might register a callback and
module got removed then when the callback called the memory invalid.
To avoid this issue ignore the synchronize_rcu during UNREGSITERING
as the data structure will not be used further.

Crash Signature:
address between user and kernel address ranges
Call trace:
    rcu_cblist_dequeue+0x18/0x2c
    rcu_core_si+0xc/0x14
    _stext+0x1c4/0x228
    run_ksoftirqd+0x24/0x4c
    smpboot_thread_fn+0x224/0x228

Signed-off-by: Saravanakumar Duraisamy <quic_saradura@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c  | 1 +
 drivers/net/wireless/ath/ath12k/core.c | 4 +++-
 drivers/net/wireless/ath/ath12k/mac.c  | 7 +++++--
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/ahb.c b/drivers/net/wireless/ath/ath12k/ahb.c
index 7882b2a..6cd5924 100644
--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -1201,6 +1201,7 @@ static void ath12k_ahb_remove_prepare(struct ath12k_base *ab)
 	}
 
 	set_bit(ATH12K_FLAG_UNREGISTERING, &ab->dev_flags);
+	set_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags);
 	cancel_work_sync(&ab->restart_work);
 	cancel_work_sync(&ab->qmi.event_work);
 }
diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 6cd03e9..06ce96b 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2215,7 +2215,9 @@ void ath12k_core_halt(struct ath12k *ar)
 	ath12k_mac_peer_cleanup_all(ar);
 	cancel_work_sync(&ar->regd_update_work);
 	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
-	synchronize_rcu();
+	
+	if(!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags)))
+		synchronize_rcu();
 
 	if (ag->recovery_mode == ATH12K_MLO_RECOVERY_MODE0)
 		INIT_LIST_HEAD(&ar->arvifs);
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 4ca491b..67c4cd6 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10208,7 +10208,8 @@ static void ath12k_mac_radio_stop(struct ath12k *ar)
 
 	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
 
-	synchronize_rcu();
+	if(!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags)))
+		synchronize_rcu();
 
 	atomic_set(&ar->num_pending_mgmt_tx, 0);
 	atomic_set(&ar->flush_request, 0);
@@ -17047,7 +17048,9 @@ void ath12k_mac_destroy(struct ath12k_hw_group *ag)
 
 			if (hw_link_id < ATH12K_GROUP_MAX_RADIO) {
 				rcu_assign_pointer(ag->hw_links[hw_link_id], NULL);
-				synchronize_rcu();
+				
+				if(!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags)))
+					synchronize_rcu();
 			}
 
 			ar = pdev->ar;
-- 
2.17.1

