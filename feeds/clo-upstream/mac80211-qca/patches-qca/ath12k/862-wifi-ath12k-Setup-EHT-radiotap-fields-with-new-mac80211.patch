From 554f2525d86f2744e095e25fcbdea858adb91d5f Mon Sep 17 00:00:00 2001
From: Sarika Sharma <quic_sarishar@quicinc.com>
Date: Thu, 14 Dec 2023 13:50:34 +0530
Subject: [PATCH] wifi: ath12k: Setup EHT radiotap fields with new mac80211

Currently EHT radiotap headers structure data length is 6, but now
structure got changed and data length is 9.
Hence, add changes to fill data up to data 9 to match with updated
structure.

While at it also changed headers definition to match with current
mac80211.

Signed-off-by: Sarika Sharma <quic_sarishar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_mon.c | 593 +++++++++++------------
 drivers/net/wireless/ath/ath12k/hal_rx.h |  92 +---
 2 files changed, 292 insertions(+), 393 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -10,6 +10,12 @@
 #include "dp_tx.h"
 #include "peer.h"
 
+#define ATH12K_LE32_DEC_ENC(value, decode_bits, encode_bits) \
+	le32_encode_bits(le32_get_bits(value, decode_bits), encode_bits)
+
+#define ATH12K_LE64_DEC_ENC(value, decode_bits, encode_bits) \
+	le64_encode_bits(le64_get_bits(value, decode_bits), encode_bits)
+
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
 extern int g_bonded_interface_model;
 #endif
@@ -580,51 +586,36 @@ ath12k_dp_mon_hal_rx_parse_u_sig_cmn(u8
 {
 	struct hal_mon_usig_hdr *usig = (struct hal_mon_usig_hdr *)rx_tlv;
 	struct hal_mon_usig_cmn *usig_1 = &usig->usig_1;
-	u32 phy_version, bandwidth, ul_dl, bss_color, txop;
-	u8 bad_usig_crc;
 
-	bad_usig_crc = u32_get_bits(__le32_to_cpu(usig->usig_2.tb.info0),
-				    HAL_RX_USIG_TB_INFO0_RX_INTEG_CHECK_PASS);
 	ppdu_info->usig_common |=
-			USIG_PHY_VERSION_KNOWN |
-			USIG_BW_KNOWN |
-			USIG_UL_DL_KNOWN |
-			USIG_BSS_COLOR_KNOWN |
-			USIG_TXOP_KNOWN;
-
-	phy_version = u32_get_bits(__le32_to_cpu(usig_1->info0),
-				   HAL_RX_USIG_CMN_INFO0_PHY_VERSION);
-	ppdu_info->usig_common |= (phy_version << USIG_PHY_VERSION_SHIFT);
-
-	bandwidth = u32_get_bits(__le32_to_cpu(usig_1->info0),
-				 HAL_RX_USIG_CMN_INFO0_BW);
-	ppdu_info->usig_common |= (bandwidth << USIG_BW_SHIFT);
-
-	ul_dl = u32_get_bits(__le32_to_cpu(usig_1->info0),
-			     HAL_RX_USIG_CMN_INFO0_UL_DL);
-	ppdu_info->usig_common |= (ul_dl << USIG_UL_DL_SHIFT);
-
-	bss_color = u32_get_bits(__le32_to_cpu(usig_1->info0),
-				 HAL_RX_USIG_CMN_INFO0_BSS_COLOR);
-	ppdu_info->usig_common |= (bss_color << USIG_BSS_COLOR_SHIFT);
-
-	txop = u32_get_bits(__le32_to_cpu(usig_1->info0),
-			    HAL_RX_USIG_CMN_INFO0_TXOP);
-
-	ppdu_info->usig_common |= (txop << USIG_TXOP_SHIFT);
-	ppdu_info->usig_common |= bad_usig_crc;
-	ppdu_info->u_sig_info.ul_dl = ul_dl;
-	ppdu_info->u_sig_info.bw = bandwidth;
-
-	switch(bandwidth) {
-		case HAL_EHT_BW_320_2:
-		case HAL_EHT_BW_320_1:
-			ppdu_info->bw = ATH12K_BW_320;
-			break;
-		default:
-			ppdu_info->bw = bandwidth;
-			break;
-	}
+			IEEE80211_RADIOTAP_EHT_USIG_COMMON_PHY_VER_KNOWN |
+			IEEE80211_RADIOTAP_EHT_USIG_COMMON_BW_KNOWN |
+			IEEE80211_RADIOTAP_EHT_USIG_COMMON_UL_DL_KNOWN |
+			IEEE80211_RADIOTAP_EHT_USIG_COMMON_BSS_COLOR_KNOWN |
+			IEEE80211_RADIOTAP_EHT_USIG_COMMON_TXOP_KNOWN |
+			ATH12K_LE32_DEC_ENC(usig->usig_2.tb.info0,
+				     HAL_RX_USIG_TB_INFO0_RX_INTEG_CHECK_PASS,
+				     IEEE80211_RADIOTAP_EHT_USIG_COMMON_BAD_USIG_CRC) |
+			ATH12K_LE32_DEC_ENC(usig_1->info0,
+				     HAL_RX_USIG_CMN_INFO0_PHY_VERSION,
+				     IEEE80211_RADIOTAP_EHT_USIG_COMMON_PHY_VER) |
+			ATH12K_LE32_DEC_ENC(usig_1->info0,
+				     HAL_RX_USIG_CMN_INFO0_BW,
+				     IEEE80211_RADIOTAP_EHT_USIG_COMMON_BW) |
+			ATH12K_LE32_DEC_ENC(usig_1->info0,
+				     HAL_RX_USIG_CMN_INFO0_UL_DL,
+				     IEEE80211_RADIOTAP_EHT_USIG_COMMON_UL_DL) |
+			ATH12K_LE32_DEC_ENC(usig_1->info0,
+				     HAL_RX_USIG_CMN_INFO0_BSS_COLOR,
+				     IEEE80211_RADIOTAP_EHT_USIG_COMMON_BSS_COLOR) |
+			ATH12K_LE32_DEC_ENC(usig_1->info0,
+				     HAL_RX_USIG_CMN_INFO0_TXOP,
+				     IEEE80211_RADIOTAP_EHT_USIG_COMMON_TXOP);
+
+	ppdu_info->u_sig_info.bw = le32_get_bits(usig_1->info0,
+						 HAL_RX_USIG_CMN_INFO0_BW);
+
+	ppdu_info->bw = ppdu_info->u_sig_info.bw;
 
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
@@ -634,44 +625,30 @@ ath12k_dp_mon_hal_rx_parse_u_sig_tb(u8 *
 {
 	struct hal_mon_usig_hdr *usig = (struct hal_mon_usig_hdr *)rx_tlv;
 	struct hal_mon_usig_tb *usig_tb = &usig->usig_2.tb;
-	u32 ppdu_type_comp_mode, spatial_reuse_1, spatial_reuse_2, crc, tail;
 
 	ppdu_info->usig_mask |=
-			USIG_DISREGARD_KNOWN |
-			USIG_PPDU_TYPE_N_COMP_MODE_KNOWN |
-			USIG_VALIDATE_KNOWN |
-			USIG_TB_SPATIAL_REUSE_1_KNOWN |
-			USIG_TB_SPATIAL_REUSE_2_KNOWN |
-			USIG_TB_DISREGARD1_KNOWN |
-			USIG_CRC_KNOWN |
-			USIG_TAIL_KNOWN;
-
-	ppdu_info->usig_value |= (0x3F << USIG_DISREGARD_SHIFT);
-	ppdu_type_comp_mode = u32_get_bits(__le32_to_cpu(usig_tb->info0),
-					   HAL_RX_USIG_TB_INFO0_PPDU_TYPE_COMP_MODE);
-	ppdu_info->usig_value |=
-		(ppdu_type_comp_mode << USIG_PPDU_TYPE_N_COMP_MODE_SHIFT);
-
-	ppdu_info->usig_value |= (0x1 << USIG_VALIDATE_SHIFT);
-	spatial_reuse_1 = u32_get_bits(__le32_to_cpu(usig_tb->info0),
-				       HAL_RX_USIG_TB_INFO0_SPATIAL_REUSE_1);
-	ppdu_info->usig_value |=
-		(spatial_reuse_1 << USIG_TB_SPATIAL_REUSE_1_SHIFT);
-
-	spatial_reuse_2 = u32_get_bits(__le32_to_cpu(usig_tb->info0),
-				       HAL_RX_USIG_TB_INFO0_SPATIAL_REUSE_2);
-	ppdu_info->usig_value |=
-		(spatial_reuse_2 << USIG_TB_SPATIAL_REUSE_2_SHIFT);
-
-	ppdu_info->usig_value |= (0x1F << USIG_TB_DISREGARD1_SHIFT);
-	crc = u32_get_bits(__le32_to_cpu(usig_tb->info0),
-			   HAL_RX_USIG_TB_INFO0_CRC);
-	ppdu_info->usig_value |= (crc << USIG_CRC_SHIFT);
-	tail = u32_get_bits(__le32_to_cpu(usig_tb->info0),
-			    HAL_RX_USIG_TB_INFO0_TAIL);
-	ppdu_info->usig_value |= (tail << USIG_TAIL_SHIFT);
-
-	ppdu_info->u_sig_info.ppdu_type_comp_mode = ppdu_type_comp_mode;
+			IEEE80211_RADIOTAP_EHT_USIG1_TB_B20_B25_DISREGARD |
+			ATH12K_LE32_DEC_ENC(usig_tb->info0,
+				     HAL_RX_USIG_TB_INFO0_PPDU_TYPE_COMP_MODE,
+				     IEEE80211_RADIOTAP_EHT_USIG2_TB_B0_B1_PPDU_TYPE) |
+			IEEE80211_RADIOTAP_EHT_USIG2_TB_B2_VALIDATE |
+			ATH12K_LE32_DEC_ENC(usig_tb->info0,
+				     HAL_RX_USIG_TB_INFO0_SPATIAL_REUSE_1,
+				     IEEE80211_RADIOTAP_EHT_USIG2_TB_B3_B6_SPATIAL_REUSE_1) |
+			ATH12K_LE32_DEC_ENC(usig_tb->info0,
+				     HAL_RX_USIG_TB_INFO0_SPATIAL_REUSE_2,
+				     IEEE80211_RADIOTAP_EHT_USIG2_TB_B7_B10_SPATIAL_REUSE_2) |
+			IEEE80211_RADIOTAP_EHT_USIG2_TB_B11_B15_DISREGARD |
+			ATH12K_LE32_DEC_ENC(usig_tb->info0,
+				     HAL_RX_USIG_TB_INFO0_CRC,
+				     IEEE80211_RADIOTAP_EHT_USIG2_TB_B16_B19_CRC) |
+			ATH12K_LE32_DEC_ENC(usig_tb->info0,
+				     HAL_RX_USIG_TB_INFO0_TAIL,
+				     IEEE80211_RADIOTAP_EHT_USIG2_TB_B20_B25_TAIL);
+
+	ppdu_info->u_sig_info.ppdu_type_comp_mode =
+		le32_get_bits(usig_tb->info0,
+			      HAL_RX_USIG_TB_INFO0_PPDU_TYPE_COMP_MODE);
 
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
@@ -681,50 +658,40 @@ ath12k_dp_mon_hal_rx_parse_u_sig_mu(u8 *
 {
 	struct hal_mon_usig_hdr *usig = (struct hal_mon_usig_hdr *)rx_tlv;
 	struct hal_mon_usig_mu *usig_mu = &usig->usig_2.mu;
-	u32 ppdu_type_comp_mode, punc_ch_info, eht_sig_mcs, num_eht_sig_sym, crc, tail;
 
 	ppdu_info->usig_mask |=
-		USIG_DISREGARD_KNOWN |
-		USIG_PPDU_TYPE_N_COMP_MODE_KNOWN |
-		USIG_VALIDATE_KNOWN |
-		USIG_MU_VALIDATE1_SHIFT |
-		USIG_MU_PUNCTURE_CH_INFO_KNOWN |
-		USIG_MU_VALIDATE2_SHIFT |
-		USIG_MU_EHT_SIG_MCS_KNOWN |
-		USIG_MU_NUM_EHT_SIG_SYM_KNOWN |
-		USIG_CRC_KNOWN |
-		USIG_TAIL_KNOWN;
-
-	ppdu_info->usig_value |= (0x1F << USIG_DISREGARD_SHIFT);
-	ppdu_info->usig_value |= (0x1 << USIG_MU_VALIDATE1_SHIFT);
-
-	ppdu_type_comp_mode = u32_get_bits(__le32_to_cpu(usig_mu->info0),
-					   HAL_RX_USIG_MU_INFO0_PPDU_TYPE_COMP_MODE);
-	ppdu_info->usig_value |=
-		(ppdu_type_comp_mode << USIG_PPDU_TYPE_N_COMP_MODE_SHIFT);
-	ppdu_info->usig_value |= (0x1 << USIG_VALIDATE_SHIFT);
-
-	punc_ch_info = u32_get_bits(__le32_to_cpu(usig_mu->info0),
-				    HAL_RX_USIG_MU_INFO0_PUNC_CH_INFO);
-	ppdu_info->usig_value |= (punc_ch_info << USIG_MU_PUNCTURE_CH_INFO_SHIFT);
-	ppdu_info->usig_value |= (0x1 << USIG_MU_VALIDATE2_SHIFT);
-
-	eht_sig_mcs = u32_get_bits(__le32_to_cpu(usig_mu->info0),
-				   HAL_RX_USIG_MU_INFO0_EHT_SIG_MCS);
-	ppdu_info->usig_value |= (eht_sig_mcs << USIG_MU_EHT_SIG_MCS_SHIFT);
-
-	num_eht_sig_sym = u32_get_bits(__le32_to_cpu(usig_mu->info0),
-				       HAL_RX_USIG_MU_INFO0_NUM_EHT_SIG_SYM);
-	ppdu_info->usig_value |= (num_eht_sig_sym << USIG_MU_NUM_EHT_SIG_SYM_SHIFT);
-
-	crc = u32_get_bits(__le32_to_cpu(usig_mu->info0), HAL_RX_USIG_MU_INFO0_CRC);
-	ppdu_info->usig_value |= (crc << USIG_CRC_SHIFT);
-
-	tail = u32_get_bits(__le32_to_cpu(usig_mu->info0), HAL_RX_USIG_MU_INFO0_TAIL);
-	ppdu_info->usig_value |= (tail << USIG_TAIL_SHIFT);
-	ppdu_info->u_sig_info.ppdu_type_comp_mode = ppdu_type_comp_mode;
-	ppdu_info->u_sig_info.eht_sig_mcs = eht_sig_mcs;
-	ppdu_info->u_sig_info.num_eht_sig_sym = num_eht_sig_sym;
+			IEEE80211_RADIOTAP_EHT_USIG1_MU_B20_B24_DISREGARD |
+			IEEE80211_RADIOTAP_EHT_USIG1_MU_B25_VALIDATE |
+			ATH12K_LE32_DEC_ENC(usig_mu->info0,
+				     HAL_RX_USIG_MU_INFO0_PPDU_TYPE_COMP_MODE,
+				     IEEE80211_RADIOTAP_EHT_USIG2_MU_B0_B1_PPDU_TYPE) |
+			IEEE80211_RADIOTAP_EHT_USIG2_MU_B2_VALIDATE |
+			ATH12K_LE32_DEC_ENC(usig_mu->info0,
+				     HAL_RX_USIG_MU_INFO0_PUNC_CH_INFO,
+				     IEEE80211_RADIOTAP_EHT_USIG2_MU_B3_B7_PUNCTURED_INFO) |
+			IEEE80211_RADIOTAP_EHT_USIG2_MU_B8_VALIDATE |
+			ATH12K_LE32_DEC_ENC(usig_mu->info0,
+				     HAL_RX_USIG_MU_INFO0_EHT_SIG_MCS,
+				     IEEE80211_RADIOTAP_EHT_USIG2_MU_B9_B10_SIG_MCS) |
+			ATH12K_LE32_DEC_ENC(usig_mu->info0,
+				     HAL_RX_USIG_MU_INFO0_NUM_EHT_SIG_SYM,
+				     IEEE80211_RADIOTAP_EHT_USIG2_MU_B11_B15_EHT_SIG_SYMBOLS) |
+			ATH12K_LE32_DEC_ENC(usig_mu->info0,
+				     HAL_RX_USIG_MU_INFO0_CRC,
+				     IEEE80211_RADIOTAP_EHT_USIG2_MU_B16_B19_CRC) |
+			ATH12K_LE32_DEC_ENC(usig_mu->info0,
+				     HAL_RX_USIG_TB_INFO0_TAIL,
+				     IEEE80211_RADIOTAP_EHT_USIG2_MU_B20_B25_TAIL);
+
+	ppdu_info->u_sig_info.ppdu_type_comp_mode =
+		le32_get_bits(usig_mu->info0,
+			      HAL_RX_USIG_TB_INFO0_PPDU_TYPE_COMP_MODE);
+	ppdu_info->u_sig_info.eht_sig_mcs =
+		le32_get_bits(usig_mu->info0,
+			      HAL_RX_USIG_MU_INFO0_EHT_SIG_MCS);
+	ppdu_info->u_sig_info.num_eht_sig_sym =
+		le32_get_bits(usig_mu->info0,
+			      HAL_RX_USIG_MU_INFO0_NUM_EHT_SIG_SYM);
 
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
@@ -815,41 +782,50 @@ ath12k_dp_mon_hal_rx_parse_eht_sig_ndp(u
 {
         struct hal_eht_sig_ndp_cmn_eb *eht_sig_ndp =
 				(struct hal_eht_sig_ndp_cmn_eb *)tlv;
-	u32 spatial_reuse, num_ltf_sym, nss, beamformed, crc;
 
         ppdu_info->eht_known |=
-		EHT_SPATIAL_REUSE_KNOWN |
-		EHT_EHT_LTF_KNOWN |
-		EHT_NDP_NSS_KNOWN |
-		EHT_NDP_BEAMFORMED_KNOWN |
-		EHT_NDP_DISREGARD_KNOWN |
-		EHT_CRC1_KNOWN |
-		EHT_TAIL1_KNOWN;
-
-	spatial_reuse = u32_get_bits(__le32_to_cpu(eht_sig_ndp->info0),
-				     HAL_RX_EHT_SIG_NDP_CMN_INFO0_SPATIAL_REUSE);
-	ppdu_info->eht_data[0] |= (spatial_reuse << EHT_SPATIAL_REUSE_SHIFT);
-
+		IEEE80211_RADIOTAP_EHT_KNOWN_SPATIAL_REUSE |
+		IEEE80211_RADIOTAP_EHT_KNOWN_EHT_LTF |
+		IEEE80211_RADIOTAP_EHT_KNOWN_NSS_S |
+		IEEE80211_RADIOTAP_EHT_KNOWN_BEAMFORMED_S |
+		IEEE80211_RADIOTAP_EHT_KNOWN_DISREGARD_S |
+		IEEE80211_RADIOTAP_EHT_KNOWN_CRC1 |
+		IEEE80211_RADIOTAP_EHT_KNOWN_TAIL1;
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(eht_sig_ndp->info0,
+			     HAL_RX_EHT_SIG_NDP_CMN_INFO0_SPATIAL_REUSE,
+			     IEEE80211_RADIOTAP_EHT_DATA0_SPATIAL_REUSE);
 	/*
 	 * GI and LTF size are separately indicated in radiotap header
 	 * and hence will be parsed from other TLV
 	 */
-	num_ltf_sym = u32_get_bits(__le32_to_cpu(eht_sig_ndp->info0),
-				   HAL_RX_EHT_SIG_NDP_CMN_INFO0_GI_LTF);
-	ppdu_info->eht_data[0] |= (num_ltf_sym << EHT_EHT_LTF_SHIFT);
-	ppdu_info->eht_data[0] |= (0xF << EHT_NDP_DISREGARD_SHIFT);
-
-	nss = u32_get_bits(__le32_to_cpu(eht_sig_ndp->info0),
-			   HAL_RX_EHT_SIG_NDP_CMN_INFO0_NSS);
-	ppdu_info->eht_data[4] |= (nss << EHT_NDP_NSS_SHIFT);
-
-	beamformed = u32_get_bits(__le32_to_cpu(eht_sig_ndp->info0),
-				  HAL_RX_EHT_SIG_NDP_CMN_INFO0_BEAMFORMED);
-	ppdu_info->eht_data[4] |= (beamformed << EHT_NDP_BEAMFORMED_SHIFT);
-
-	crc = u32_get_bits(__le32_to_cpu(eht_sig_ndp->info0),
-			   HAL_RX_EHT_SIG_NDP_CMN_INFO0_CRC);
-	ppdu_info->eht_data[0] |= (crc << EHT_CRC1_SHIFT);
+
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(eht_sig_ndp->info0,
+			     HAL_RX_EHT_SIG_NDP_CMN_INFO0_NUM_LTF_SYM,
+			     IEEE80211_RADIOTAP_EHT_DATA0_EHT_LTF);
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(eht_sig_ndp->info0,
+			     HAL_RX_EHT_SIG_NDP_CMN_INFO0_CRC,
+			     IEEE80211_RADIOTAP_EHT_DATA0_CRC1_O);
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(eht_sig_ndp->info0,
+			     HAL_RX_EHT_SIG_NDP_CMN_INFO0_DISREGARD,
+			     IEEE80211_RADIOTAP_EHT_DATA0_DISREGARD_S);
+
+	ppdu_info->eht_data[7] |=
+		ATH12K_LE32_DEC_ENC(eht_sig_ndp->info0,
+			     HAL_RX_EHT_SIG_NDP_CMN_INFO0_NSS,
+			     IEEE80211_RADIOTAP_EHT_DATA7_NSS_S);
+
+	ppdu_info->eht_data[7] |=
+		ATH12K_LE32_DEC_ENC(eht_sig_ndp->info0,
+			     HAL_RX_EHT_SIG_NDP_CMN_INFO0_BEAMFORMED,
+			     IEEE80211_RADIOTAP_EHT_DATA7_BEAMFORMED_S);
 
         return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
@@ -859,41 +835,48 @@ ath12k_dp_mon_hal_rx_parse_usig_overflow
 {
 	struct hal_eht_sig_cc_usig_overflow *usig_ovflow =
 		(struct hal_eht_sig_cc_usig_overflow *)tlv;
-	u32 spatial_reuse, num_ltf_sym, ldpc_extra_sym, pre_fec_pad_factor, disambiguity;
 
         ppdu_info->eht_known |=
-		EHT_SPATIAL_REUSE_KNOWN |
-		EHT_EHT_LTF_KNOWN |
-		EHT_LDPC_EXTRA_SYMBOL_SEG_KNOWN |
-		EHT_PRE_FEC_PADDING_FACTOR_KNOWN |
-		EHT_PE_DISAMBIGUITY_KNOWN |
-		EHT_DISREARD_KNOWN;
-
-	spatial_reuse = u32_get_bits(__le32_to_cpu(usig_ovflow->info0),
-				     HAL_RX_EHT_SIG_OVERFLOW_INFO0_SPATIAL_REUSE);
-	ppdu_info->eht_data[0] |= (spatial_reuse << EHT_SPATIAL_REUSE_SHIFT);
+		IEEE80211_RADIOTAP_EHT_KNOWN_SPATIAL_REUSE |
+		IEEE80211_RADIOTAP_EHT_KNOWN_EHT_LTF |
+		IEEE80211_RADIOTAP_EHT_KNOWN_LDPC_EXTRA_SYM_OM |
+		IEEE80211_RADIOTAP_EHT_KNOWN_PRE_PADD_FACOR_OM |
+		IEEE80211_RADIOTAP_EHT_KNOWN_PE_DISAMBIGUITY_OM |
+		IEEE80211_RADIOTAP_EHT_KNOWN_DISREGARD_O;
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(usig_ovflow->info0,
+			     HAL_RX_EHT_SIG_OVERFLOW_INFO0_SPATIAL_REUSE,
+			     IEEE80211_RADIOTAP_EHT_DATA0_SPATIAL_REUSE);
 
 	/*
 	 * GI and LTF size are separately indicated in radiotap header
 	 * and hence will be parsed from other TLV
 	 */
-	num_ltf_sym = u32_get_bits(__le32_to_cpu(usig_ovflow->info0),
-				   HAL_RX_EHT_SIG_OVERFLOW_INFO0_NUM_LTF_SYM);
-	ppdu_info->eht_data[0] |= (num_ltf_sym << EHT_EHT_LTF_SHIFT);
-
-	ldpc_extra_sym = u32_get_bits(__le32_to_cpu(usig_ovflow->info0),
-				      HAL_RX_EHT_SIG_OVERFLOW_INFO0_LDPC_EXTA_SYM);
-	ppdu_info->eht_data[0] |= (ldpc_extra_sym << EHT_LDPC_EXTRA_SYMBOL_SEG_SHIFT);
-
-	pre_fec_pad_factor = u32_get_bits(__le32_to_cpu(usig_ovflow->info0),
-				HAL_RX_EHT_SIG_OVERFLOW_INFO0_PRE_FEC_PAD_FACTOR);
-	ppdu_info->eht_data[0] |= (pre_fec_pad_factor <<
-				   EHT_PRE_FEC_PADDING_FACTOR_SHIFT);
-
-	disambiguity = u32_get_bits(__le32_to_cpu(usig_ovflow->info0),
-				    HAL_RX_EHT_SIG_OVERFLOW_INFO0_DISAMBIGUITY);
-	ppdu_info->eht_data[0] |= (disambiguity << EHT_PE_DISAMBIGUITY_SHIFT);
-	ppdu_info->eht_data[0] |= (0xF << EHT_DISREGARD_SHIFT);
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(usig_ovflow->info0,
+			     HAL_RX_EHT_SIG_OVERFLOW_INFO0_NUM_LTF_SYM,
+			     IEEE80211_RADIOTAP_EHT_DATA0_EHT_LTF);
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(usig_ovflow->info0,
+			     HAL_RX_EHT_SIG_OVERFLOW_INFO0_LDPC_EXTA_SYM,
+			     IEEE80211_RADIOTAP_EHT_DATA0_LDPC_EXTRA_SYM_OM);
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(usig_ovflow->info0,
+			     HAL_RX_EHT_SIG_OVERFLOW_INFO0_PRE_FEC_PAD_FACTOR,
+			     IEEE80211_RADIOTAP_EHT_DATA0_PRE_PADD_FACOR_OM);
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(usig_ovflow->info0,
+			     HAL_RX_EHT_SIG_OVERFLOW_INFO0_DISAMBIGUITY,
+			     IEEE80211_RADIOTAP_EHT_DATA0_PE_DISAMBIGUITY_OM);
+
+	ppdu_info->eht_data[0] |=
+		ATH12K_LE32_DEC_ENC(usig_ovflow->info0,
+			     HAL_RX_EHT_SIG_OVERFLOW_INFO0_DISREGARD,
+			     IEEE80211_RADIOTAP_EHT_DATA0_DISREGARD_O);
 
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
@@ -904,72 +887,88 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 	u64 *ehtsig_tlv = (u64 *)tlv;
 	struct hal_eht_sig_ofdma_cmn_eb1 *ofdma_cmn_eb1;
 	struct hal_eht_sig_ofdma_cmn_eb2 *ofdma_cmn_eb2;
-	u32 ru_allocation2_6, ru_allocation2_5, ru_allocation2_4, ru_allocation2_3;
-	u32 ru_allocation2_2, ru_allocation2_1, ru_allocation1_2, ru_allocation1_1;
-	u8 num_ru_allocation_known = 0;
 
 	ofdma_cmn_eb1 = (struct hal_eht_sig_ofdma_cmn_eb1 *)ehtsig_tlv;
 	ofdma_cmn_eb2 = (struct hal_eht_sig_ofdma_cmn_eb2 *)(ehtsig_tlv + 1);
 
+/*FIX ME to get CC2 values*/
+
 	switch (ppdu_info->u_sig_info.bw) {
 	case HAL_EHT_BW_320_2:
 	case HAL_EHT_BW_320_1:
-		num_ru_allocation_known += 4;
-		ru_allocation2_6 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_6);
-		ppdu_info->eht_data[3] |= (ru_allocation2_6 << EHT_RU_ALLOCATION2_6_SHIFT);
-
-		ru_allocation2_5 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_5);
-		ppdu_info->eht_data[3] |= (ru_allocation2_5 << EHT_RU_ALLOCATION2_5_SHIFT);
-
-		ru_allocation2_4 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_4);
-		ppdu_info->eht_data[3] |= (ru_allocation2_4 << EHT_RU_ALLOCATION2_4_SHIFT);
-
-		ru_allocation2_3 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_3);
-		ppdu_info->eht_data[2] |= (ru_allocation2_3 << EHT_RU_ALLOCATION2_3_SHIFT);
+		/* CC1 2::3 */
+		ppdu_info->eht_data[4] |=
+			IEEE80211_RADIOTAP_EHT_DATA4_RU_ALLOC_CC_1_2_3_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb2->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_3,
+				     IEEE80211_RADIOTAP_EHT_DATA4_RU_ALLOC_CC_1_2_3);
+
+		/* CC1 2::4 */
+		ppdu_info->eht_data[5] |=
+			IEEE80211_RADIOTAP_EHT_DATA5_RU_ALLOC_CC_1_2_4_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb2->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_4,
+				     IEEE80211_RADIOTAP_EHT_DATA5_RU_ALLOC_CC_1_2_4);
+
+		/* CC1 2::5 */
+		ppdu_info->eht_data[5] |=
+			IEEE80211_RADIOTAP_EHT_DATA5_RU_ALLOC_CC_1_2_5_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb2->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_5,
+				     IEEE80211_RADIOTAP_EHT_DATA5_RU_ALLOC_CC_1_2_5);
+
+		/* CC1 2::6 */
+		ppdu_info->eht_data[6] |=
+			IEEE80211_RADIOTAP_EHT_DATA6_RU_ALLOC_CC_1_2_6_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb2->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_6,
+				     IEEE80211_RADIOTAP_EHT_DATA6_RU_ALLOC_CC_1_2_6);
+
 	        /* fallthrough */
 		fallthrough;
 
 	case HAL_EHT_BW_160:
-		num_ru_allocation_known += 2;
-		ru_allocation2_2 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_2);
-		ppdu_info->eht_data[2] |=
-				(ru_allocation2_2 << EHT_RU_ALLOCATION2_2_SHIFT);
-		//ru_allocation2_1 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
-			//			HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1);
-		ppdu_info->eht_data[2] |=
-				(ru_allocation2_1 << EHT_RU_ALLOCATION2_1_SHIFT);
+		/* CC1 2::1 */
+		ppdu_info->eht_data[3] |=
+			IEEE80211_RADIOTAP_EHT_DATA3_RU_ALLOC_CC_1_2_1_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb2->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1,
+				     IEEE80211_RADIOTAP_EHT_DATA3_RU_ALLOC_CC_1_2_1);
+		/* CC1 2::2 */
+		ppdu_info->eht_data[3] |=
+			IEEE80211_RADIOTAP_EHT_DATA3_RU_ALLOC_CC_1_2_2_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb2->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_2,
+				     IEEE80211_RADIOTAP_EHT_DATA3_RU_ALLOC_CC_1_2_2);
+
 		/* fallthrough */
 		fallthrough;
 
 	case HAL_EHT_BW_80:
-		num_ru_allocation_known += 1;
-		ru_allocation1_2 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb1->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB1_RU_ALLOC_1_2);
-		ppdu_info->eht_data[1] |=
-				(ru_allocation1_2 << EHT_RU_ALLOCATION1_2_SHIFT);
+		/* CC1 1::2 */
+		ppdu_info->eht_data[2] |=
+			IEEE80211_RADIOTAP_EHT_DATA2_RU_ALLOC_CC_1_1_2_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb1->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB1_RU_ALLOC_1_2,
+				     IEEE80211_RADIOTAP_EHT_DATA2_RU_ALLOC_CC_1_1_2);
+
 		/* fallthrough */
 		fallthrough;
 
 	case HAL_EHT_BW_40:
+		fallthrough;
 	case HAL_EHT_BW_20:
-		num_ru_allocation_known += 1;
-		ru_allocation1_1 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb1->info0),
-						HAL_RX_EHT_SIG_OFDMA_EB1_RU_ALLOC_1_1);
+		/* CC1 1::1 */
 		ppdu_info->eht_data[1] |=
-				(ru_allocation1_1 << EHT_RU_ALLOCATION1_1_SHIFT);
+			IEEE80211_RADIOTAP_EHT_DATA1_RU_ALLOC_CC_1_1_1_KNOWN |
+			ATH12K_LE64_DEC_ENC(ofdma_cmn_eb1->info0,
+				     HAL_RX_EHT_SIG_OFDMA_EB1_RU_ALLOC_1_1,
+				     IEEE80211_RADIOTAP_EHT_DATA1_RU_ALLOC_CC_1_1_1);
 		break;
 	default:
 	        break;
         }
 
-        ppdu_info->eht_known |=
-		(num_ru_allocation_known << EHT_NUM_KNOWN_RU_ALLOCATIONS_SHIFT);
-
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
 
@@ -978,12 +977,12 @@ ath12k_dp_mon_hal_rx_parse_non_ofdma_use
 {
 	struct hal_eht_sig_non_ofdma_cmn_eb *non_ofdma_cmn_eb =
 	                        (struct hal_eht_sig_non_ofdma_cmn_eb *)tlv;
-	u32 num_users;
 
-	ppdu_info->eht_known |= EHT_NUM_NON_OFDMA_USERS_KNOWN;
-	num_users = u32_get_bits(__le32_to_cpu(non_ofdma_cmn_eb->info0),
-				 HAL_RX_EHT_SIG_NON_OFDMA_INFO0_NUM_USERS);
-	ppdu_info->eht_data[4] |= (num_users << EHT_NUM_NON_OFDMA_USERS_SHIFT);
+	ppdu_info->eht_known |= IEEE80211_RADIOTAP_EHT_KNOWN_NR_NON_OFDMA_USERS_M;
+	ppdu_info->eht_data[7] |=
+		ATH12K_LE32_DEC_ENC(non_ofdma_cmn_eb->info0,
+			     HAL_RX_EHT_SIG_NON_OFDMA_INFO0_NUM_USERS,
+			     IEEE80211_RADIOTAP_EHT_DATA7_NUM_OF_NON_OFDMA_USERS);
 
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
@@ -994,42 +993,34 @@ ath12k_dp_mon_hal_rx_parse_eht_sig_mumim
 {
 	struct hal_eht_sig_mu_mimo_user_info *user_info;
 	u32 user_idx = ppdu_info->num_eht_user_info_valid;
-	u32 sta_id, mcs, coding, spatial_coding, crc;
+
+	if (ppdu_info->num_eht_user_info_valid >= ARRAY_SIZE(ppdu_info->eht_user_info))
+		return HAL_TLV_STATUS_PPDU_NOT_DONE;
 
 	user_info = (struct hal_eht_sig_mu_mimo_user_info *)tlv;
 
 	ppdu_info->eht_user_info[user_idx] |=
-				EHT_USER_STA_ID_KNOWN |
-				EHT_USER_MCS_KNOWN |
-				EHT_USER_CODING_KNOWN |
-				EHT_USER_SPATIAL_CONFIG_KNOWN;
-
-	sta_id = u32_get_bits(__le32_to_cpu(user_info->info0),
-			      HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_STA_ID);
-	ppdu_info->eht_user_info[user_idx] |= (sta_id << EHT_USER_STA_ID_SHIFT);
-
-	mcs = u32_get_bits(__le32_to_cpu(user_info->info0),
-			   HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_MCS);
-	ppdu_info->eht_user_info[user_idx] |= (mcs << EHT_USER_MCS_SHIFT);
-	ppdu_info->mcs = mcs;
-
-	coding = u32_get_bits(__le32_to_cpu(user_info->info0),
-			      HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_CODING);
-	ppdu_info->eht_user_info[user_idx] |= (coding << EHT_USER_CODING_SHIFT);
+		IEEE80211_RADIOTAP_EHT_USER_INFO_STA_ID_KNOWN |
+		IEEE80211_RADIOTAP_EHT_USER_INFO_MCS_KNOWN |
+		IEEE80211_RADIOTAP_EHT_USER_INFO_CODING_KNOWN |
+		IEEE80211_RADIOTAP_EHT_USER_INFO_SPATIAL_CONFIG_KNOWN_M |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_STA_ID,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_STA_ID) |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_CODING,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_CODING) |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_MCS,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_MCS) |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_SPATIAL_CODING,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_SPATIAL_CONFIG_M);
 
-	spatial_coding = u32_get_bits(__le32_to_cpu(user_info->info0),
-				      HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_SPATIAL_CODING);
-	ppdu_info->eht_user_info[user_idx] |=
-        	              	(spatial_coding << EHT_USER_SPATIAL_CONFIG_SHIFT);
+	ppdu_info->mcs = le32_get_bits(user_info->info0,
+				       HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_MCS);
 
-	/* CRC for matched user block */
-	ppdu_info->eht_known |=
-			EHT_USER_ENC_BLOCK_CRC_KNOWN |
-			EHT_USER_ENC_BLOCK_TAIL_KNOWN;
-
-	crc = u32_get_bits(__le32_to_cpu(user_info->info0),
-			   HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_CRC);
-	ppdu_info->eht_data[4] |= (crc << EHT_USER_ENC_BLOCK_CRC_SHIFT);
+	/* FIXME: get USER_ENCODING_BLOCK_CRC */
 
 	ppdu_info->num_eht_user_info_valid++;
 
@@ -1042,49 +1033,41 @@ ath12k_dp_mon_hal_rx_parse_eht_sig_non_m
 {
 	struct hal_eht_sig_non_mu_mimo_user_info *user_info;
 	u32 user_idx = ppdu_info->num_eht_user_info_valid;
-	u32 sta_id, mcs, nss, beamformed, coding, crc;
+
+	if (ppdu_info->num_eht_user_info_valid >= ARRAY_SIZE(ppdu_info->eht_user_info))
+		return HAL_TLV_STATUS_PPDU_NOT_DONE;
 
 	user_info = (struct hal_eht_sig_non_mu_mimo_user_info *)tlv;
 
 	ppdu_info->eht_user_info[user_idx] |=
-					EHT_USER_STA_ID_KNOWN |
-					EHT_USER_MCS_KNOWN |
-					EHT_USER_CODING_KNOWN |
-					EHT_USER_NSS_KNOWN |
-					EHT_USER_BEAMFORMING_KNOWN;
-
-	sta_id = u32_get_bits(__le32_to_cpu(user_info->info0),
-			      HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_STA_ID);
-        ppdu_info->eht_user_info[user_idx] |= (sta_id << EHT_USER_STA_ID_SHIFT);
-
-	mcs = u32_get_bits(__le32_to_cpu(user_info->info0),
-			   HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_MCS);
-        ppdu_info->eht_user_info[user_idx] |= (mcs << EHT_USER_MCS_SHIFT);
-        ppdu_info->mcs = mcs;
-
-	nss = u32_get_bits(__le32_to_cpu(user_info->info0),
-			   HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_NSS);
-        ppdu_info->eht_user_info[user_idx] |= (nss << EHT_USER_NSS_SHIFT);
-        ppdu_info->nss = nss + 1;
-
-	beamformed = u32_get_bits(__le32_to_cpu(user_info->info0),
-				  HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_BEAMFORMED);
-        ppdu_info->eht_user_info[user_idx] |= (beamformed << EHT_USER_BEAMFORMING_SHIFT);
-
-	coding = u32_get_bits(__le32_to_cpu(user_info->info0),
-			      HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_CODING);
-        ppdu_info->eht_user_info[user_idx] |=
-			(coding << EHT_USER_CODING_SHIFT);
+		IEEE80211_RADIOTAP_EHT_USER_INFO_STA_ID_KNOWN |
+		IEEE80211_RADIOTAP_EHT_USER_INFO_MCS_KNOWN |
+		IEEE80211_RADIOTAP_EHT_USER_INFO_CODING_KNOWN |
+		IEEE80211_RADIOTAP_EHT_USER_INFO_NSS_KNOWN_O |
+		IEEE80211_RADIOTAP_EHT_USER_INFO_BEAMFORMING_KNOWN_O |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_STA_ID,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_STA_ID) |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_CODING,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_CODING) |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_MCS,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_MCS) |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_NSS,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_NSS_O) |
+		ATH12K_LE32_DEC_ENC(user_info->info0,
+			     HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_BEAMFORMED,
+			     IEEE80211_RADIOTAP_EHT_USER_INFO_BEAMFORMING_O);
 
-        /* CRC for matched user block */
-        ppdu_info->eht_known |=
-		EHT_USER_ENC_BLOCK_CRC_KNOWN | EHT_USER_ENC_BLOCK_TAIL_KNOWN;
+	ppdu_info->mcs = le32_get_bits(user_info->info0,
+				       HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_MCS);
 
-	crc = u32_get_bits(__le32_to_cpu(user_info->info0),
-			   HAL_RX_EHT_SIG_MUMIMO_USER_INFO0_CRC);
-        ppdu_info->eht_data[4] |= (crc << EHT_USER_ENC_BLOCK_CRC_SHIFT);
+	ppdu_info->nss = le32_get_bits(user_info->info0,
+				       HAL_RX_EHT_SIG_NON_MUMIMO_USER_INFO0_NSS) + 1;
 
-        ppdu_info->num_eht_user_info_valid++;
+	ppdu_info->num_eht_user_info_valid++;
 
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
@@ -1261,14 +1244,10 @@ ath12k_dp_mon_hal_rx_parse_receive_user_
 	u32 ru_size = 0, num_80mhz_with_ru = 0, ru_start_index_80_0;
 	u32 ru_index = HAL_EHT_RU_INVALID;
 	u32 rtap_ru_size = ATH12K_EHT_RU_INVALID;
-	u32 ru_width, reception_type, ru_type_80_0, dl_ofdma_content_channel;
+	u32 ru_width, reception_type, ru_type_80_0;
 	u32 ru_type_80_1, ru_start_index_80_1, ru_type_80_2, ru_start_index_80_2;
 	u32 ru_type_80_3, ru_start_index_80_3;
 
-	ppdu_info->eht_known |= EHT_CONTENT_CH_INDEX_KNOWN;
-	dl_ofdma_content_channel = u32_get_bits(__le32_to_cpu(rx_usr_info->info1),
-						HAL_RX_USR_INFO1_DL_OFMDA_USR_IDX);
-	ppdu_info->eht_data[0] |= dl_ofdma_content_channel << EHT_CONTENT_CH_INDEX_SHIFT;
 	reception_type = u32_get_bits(__le32_to_cpu(rx_usr_info->info0),
 				      HAL_RX_USR_INFO0_RECEPTION_TYPE);
 
@@ -1424,13 +1403,17 @@ ath12k_dp_mon_hal_rx_parse_receive_user_
 
 	rtap_ru_size = hal_rx_mon_hal_ru_size_to_ath12k_ru_size(ru_size);
 	if (rtap_ru_size != ATH12K_EHT_RU_INVALID) {
-		ppdu_info->eht_known |= EHT_RU_MRU_SIZE_KNOWN;
-		ppdu_info->eht_data[1] |= (rtap_ru_size << EHT_RU_MRU_SIZE_SHIFT);
+		ppdu_info->eht_known |= IEEE80211_RADIOTAP_EHT_KNOWN_RU_MRU_SIZE_OM;
+		ppdu_info->eht_data[1] |=
+			le32_encode_bits(rtap_ru_size,
+					 IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE);
 	}
 
 	if (ru_index != HAL_EHT_RU_INVALID) {
-		ppdu_info->eht_known |= EHT_RU_MRU_INDEX_KNOWN;
-		ppdu_info->eht_data[1] |= (ru_index << EHT_RU_MRU_INDEX_SHIFT);
+		ppdu_info->eht_known |= IEEE80211_RADIOTAP_EHT_KNOWN_RU_MRU_INDEX_OM;
+		ppdu_info->eht_data[1] |=
+			le32_encode_bits(rtap_ru_size,
+					 IEEE80211_RADIOTAP_EHT_DATA1_RU_INDEX);
 	}
 
 	if (mon_rx_user_status && ru_index != HAL_EHT_RU_INVALID &&
@@ -2054,28 +2037,16 @@ static void
 ath12k_dp_mon_rx_update_radiotap_eht(struct hal_rx_mon_ppdu_info *rx_status,
 				     u8 *rtap_buf)
 {
-	u32 rtap_len = 0, user;
+	u32 rtap_len = 0, user, i;
 
 	put_unaligned_le32(rx_status->eht_known, &rtap_buf[rtap_len]);
 	rtap_len += 4;
 
-	put_unaligned_le32(rx_status->eht_data[0], &rtap_buf[rtap_len]);
-	rtap_len += 4;
-
-	put_unaligned_le32(rx_status->eht_data[1], &rtap_buf[rtap_len]);
-	rtap_len += 4;
-
-	put_unaligned_le32(rx_status->eht_data[2], &rtap_buf[rtap_len]);
-	rtap_len += 4;
-
-	put_unaligned_le32(rx_status->eht_data[3], &rtap_buf[rtap_len]);
-	rtap_len += 4;
-
-	put_unaligned_le32(rx_status->eht_data[4], &rtap_buf[rtap_len]);
-	rtap_len += 4;
-
-	put_unaligned_le32(rx_status->eht_data[5], &rtap_buf[rtap_len]);
-	rtap_len += 4;
+	for (i = 0; i < ARRAY_SIZE(rx_status->eht_data); i++) {
+		put_unaligned_le32(rx_status->eht_data[i],
+				   &rtap_buf[rtap_len]);
+		rtap_len += 4;
+	}
 
 	if (rx_status->num_eht_user_info_valid > EHT_MAX_USER_INFO)
 		return;
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -285,7 +285,7 @@ struct hal_rx_mon_ppdu_info {
 	u32 usig_value;
 	u32 usig_mask;
 	u32 eht_known;
-	u32 eht_data[6];
+	u32 eht_data[9];
 	u32 eht_user_info[EHT_MAX_USER_INFO];
 	struct hal_rx_u_sig_info u_sig_info;
 	struct hal_rx_mon_cmn_mpdu_info cmn_mpdu_info;
@@ -1129,96 +1129,6 @@ enum ath12k_eht_ru_size {
 #define USIG_CRC_KNOWN				0x00000100
 #define USIG_TAIL_KNOWN				0x00000200
 
-/* EHT known mask */
-#define EHT_CONTENT_CH_INDEX_KNOWN		0x00000001
-#define EHT_SPATIAL_REUSE_KNOWN			0x00000002
-#define EHT_GUARD_INTERVAL_KNOWN		0x00000004
-#define EHT_LTF_KNOWN				0x00000008
-#define EHT_EHT_LTF_KNOWN			0x00000010
-#define EHT_LDPC_EXTRA_SYMBOL_SEG_KNOWN		0x00000020
-#define EHT_PRE_FEC_PADDING_FACTOR_KNOWN	0x00000040
-#define EHT_PE_DISAMBIGUITY_KNOWN		0x00000080
-#define EHT_DISREARD_KNOWN			0x00000100
-#define EHT_CRC1_KNOWN				0x00002000
-#define EHT_TAIL1_KNOWN				0x00004000
-#define EHT_CRC2_KNOWN				0x00008000
-#define EHT_TAIL2_KNOWN				0x00010000
-#define EHT_RU_MRU_SIZE_KNOWN			0x00400000
-#define EHT_RU_MRU_INDEX_KNOWN			0x00800000
-#define EHT_TB_RU_ALLOCATION_KNOWN		0x01000000
-
-#define EHT_NUM_NON_OFDMA_USERS_KNOWN		0x00080000
-#define EHT_USER_ENC_BLOCK_CRC_KNOWN		0x00100000
-#define EHT_USER_ENC_BLOCK_TAIL_KNOWN		0x00200000
-
-#define EHT_NDP_DISREGARD_KNOWN			0x00000200
-#define EHT_NDP_NSS_KNOWN			0x00020000
-#define EHT_NDP_BEAMFORMED_KNOWN		0x00040000
-
-#define EHT_NUM_KNOWN_RU_ALLOCATIONS_SHIFT	10
-
-/* EHT data0 Mask/SHIFT */
-#define EHT_CONTENT_CH_INDEX_SHIFT		0
-#define EHT_SPATIAL_REUSE_SHIFT			3
-#define EHT_GI_SHIFT				7
-#define EHT_LTF_SHIFT				9
-#define EHT_EHT_LTF_SHIFT			11
-#define EHT_LDPC_EXTRA_SYMBOL_SEG_SHIFT		14
-#define EHT_PRE_FEC_PADDING_FACTOR_SHIFT	15
-#define EHT_PE_DISAMBIGUITY_SHIFT		17
-#define EHT_NDP_DISREGARD_SHIFT			18
-#define EHT_DISREGARD_SHIFT			18
-#define EHT_CRC1_SHIFT				22
-#define EHT_TAIL1_SHIFT				26
-
-/* EHT data1 Mask/SHIFT */
-#define EHT_RU_MRU_SIZE_SHIFT			0
-#define EHT_RU_MRU_INDEX_SHIFT			5
-#define EHT_RU_ALLOCATION1_1_SHIFT		13
-#define EHT_RU_ALLOCATION1_2_SHIFT		22
-
-/* EHT data2 Mask/SHIFT */
-#define EHT_RU_ALLOCATION2_1_SHIFT		0
-#define EHT_RU_ALLOCATION2_2_SHIFT		9
-#define EHT_RU_ALLOCATION2_3_SHIFT		18
-
-/* EHT data3 Mask/SHIFT */
-#define EHT_RU_ALLOCATION2_4_SHIFT		0
-#define EHT_RU_ALLOCATION2_5_SHIFT		9
-#define EHT_RU_ALLOCATION2_6_SHIFT		18
-
-/* EHT data4 Mask/SHIFT */
-#define EHT_CRC2_SHIFT				0
-#define EHT_TAIL2_SHIFT				4
-#define EHT_NDP_NSS_SHIFT			12
-#define EHT_NDP_BEAMFORMED_SHIFT		16
-#define EHT_NUM_NON_OFDMA_USERS_SHIFT		17
-#define EHT_USER_ENC_BLOCK_CRC_SHIFT		20
-#define EHT_USER_ENC_BLOCK_TAIL_SHIFT		24
-
-/* EHT data5 Mask/SHIFT */
-#define EHT_TB_RU_PS160_SHIFT			0
-#define EHT_TB_RU_PS80_SHIFT			1
-#define EHT_TB_RU_B7_B1_SHIFT			2
-
-/* EHT user info Mask/SHIFT */
-#define EHT_USER_STA_ID_KNOWN			0x00000001
-#define EHT_USER_MCS_KNOWN			0x00000002
-#define EHT_USER_CODING_KNOWN			0x00000004
-#define EHT_USER_RESERVED_KNOWN			0x00000008
-#define EHT_USER_NSS_KNOWN			0x00000010
-#define EHT_USER_BEAMFORMING_KNOWN		0x00000020
-#define EHT_USER_SPATIAL_CONFIG_KNOWN		0x00000040
-
-#define EHT_USER_DATA_FOR_THIS_USER_SHIFT	7
-#define EHT_USER_STA_ID_SHIFT			8
-#define EHT_USER_CODING_SHIFT			19
-#define EHT_USER_MCS_SHIFT			20
-#define EHT_USER_NSS_SHIFT			24
-#define EHT_USER_RESERVED_SHIFT			28
-#define EHT_USER_BEAMFORMING_SHIFT		29
-#define EHT_USER_SPATIAL_CONFIG_SHIFT		24
-
 void ath12k_hal_reo_status_queue_stats(struct ath12k_base *ab,
 				       struct hal_tlv_64_hdr *tlv,
 				       struct hal_reo_status *status);
