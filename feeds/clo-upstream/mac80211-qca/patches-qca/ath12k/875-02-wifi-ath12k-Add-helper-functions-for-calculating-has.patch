From 7fae802901ae4edbaacd36a88e49175a8ad036a4 Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Tue, 12 Dec 2023 14:54:02 +0530
Subject: [PATCH 01/10] wifi: ath12k: Add helper functions for calculating hash

Add helper functions to create toeplitz hash and also to calculate
hash value given 5 tuple values. These functions will be used later for
Rx flow search table functionality.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.h  |   5 +-
 drivers/net/wireless/ath/ath12k/hal_rx.c | 118 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/hal_rx.h |  40 ++++++++
 3 files changed, 161 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/debug.h b/drivers/net/wireless/ath/ath12k/debug.h
index 5ed93db..0b81d3c 100644
--- a/drivers/net/wireless/ath/ath12k/debug.h
+++ b/drivers/net/wireless/ath/ath12k/debug.h
@@ -29,12 +29,13 @@ enum ath12k_debug_mask {
 	ATH12K_DBG_OFFSET	= 0x00008000,
 	ATH12K_DBG_RX_REO	= 0x00010000,
 	ATH12K_DBG_PEER		= 0x00020000,
-
-	/* keep last*/
 	ATH12K_DBG_SAWF		= 0x00040000,
 	ATH12K_DBG_PPE          = 0x00080000,
 	ATH12K_DBG_DP_UMAC_RESET = 0x00100000,
 	ATH12K_DBG_MODE1_RECOVERY = 0x00200000,
+	ATH12K_DBG_DP_FST       = 0x00400000,
+
+	/* keep last*/
 	ATH12K_DBG_ANY		= 0xffffffff,
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.c b/drivers/net/wireless/ath/ath12k/hal_rx.c
index c40eed5..49bee0d 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -949,3 +949,121 @@ void ath12k_dp_reset_rx_reo_tid_q(void *vaddr, u32 ba_window_size,
 				    HAL_DESC_REO_QUEUE_EXT_DESC,
 				    REO_QUEUE_DESC_MAGIC_DEBUG_PATTERN_3);
 }
+
+static inline void
+ath12k_key_bitwise_left_shift(u8 *key, int length, int shift)
+{
+	int i;
+	int next;
+
+	while (shift--) {
+		for (i = length - 1; i >= 0; i--) {
+			if (i > 0)
+				next = (key[i - 1] & 0x80 ? 1 : 0);
+			else
+				next = 0;
+
+			key[i] = (key[i] << 1) | next;
+		}
+	}
+}
+
+static inline void
+ath12k_reverse_key(u8 *dest, const u8 *src, int length)
+{
+	int i, j;
+
+	for (i = 0, j = length  - 1; i < length; i++, j--)
+		dest[i] = src[j];
+}
+
+static inline void
+ath12k_hal_fst_key_configure(struct hal_rx_fst *fst)
+{
+	u8 key[HAL_FST_HASH_KEY_SIZE_BYTES];
+
+	memcpy(key, fst->key, HAL_FST_HASH_KEY_SIZE_BYTES);
+
+	ath12k_key_bitwise_left_shift(key, HAL_FST_HASH_KEY_SIZE_BYTES, 5);
+	ath12k_reverse_key(fst->shifted_key, key, HAL_FST_HASH_KEY_SIZE_BYTES);
+}
+
+static inline void
+ath12k_hal_flow_toeplitz_create_cache(struct hal_rx_fst *fst)
+{
+	int bit;
+	int value;
+	int i;
+	u8 *key = fst->shifted_key;
+	u32 current_key = (key[0] << 24) | (key[1] << 16) | (key[2] << 8) |
+		key[3];
+
+	for (i = 0; i < HAL_FST_HASH_KEY_SIZE_BYTES; i++) {
+		u8 new_key;
+		u32 shifted_key[8];
+
+		if (i + 4 < HAL_FST_HASH_KEY_SIZE_BYTES)
+			new_key = key[i + 4];
+		else
+			new_key = 0;
+
+		shifted_key[0] = current_key;
+
+		for (bit = 1; bit < 8; bit++)
+			shifted_key[bit] = current_key << bit | new_key >> (8 - bit);
+
+		for (value = 0; value < (1 << 8); value++) {
+			u32 hash = 0;
+			int mask;
+
+			for (bit = 0, mask = 1 << 7; bit < 8; bit++, mask >>= 1)
+				if ((value & mask))
+					hash ^= shifted_key[bit];
+
+			fst->key_cache[i][value] = hash;
+		}
+
+		current_key = current_key << 8 | new_key;
+	}
+}
+
+u32 ath12k_hal_flow_toeplitz_hash(struct ath12k_base *ab, struct hal_rx_fst *fst,
+				  struct hal_flow_tuple_info *tuple_info)
+{
+	int i, j;
+	u32 hash = 0;
+	u32 input[HAL_FST_HASH_KEY_SIZE_WORDS] = {0};
+	u8 *tuple;
+
+	input[0] = htonl(tuple_info->src_ip_127_96);
+	input[1] = htonl(tuple_info->src_ip_95_64);
+	input[2] = htonl(tuple_info->src_ip_63_32);
+	input[3] = htonl(tuple_info->src_ip_31_0);
+	input[4] = htonl(tuple_info->dest_ip_127_96);
+	input[5] = htonl(tuple_info->dest_ip_95_64);
+	input[6] = htonl(tuple_info->dest_ip_63_32);
+	input[7] = htonl(tuple_info->dest_ip_31_0);
+	input[8] = (tuple_info->dest_port << 16) | (tuple_info->src_port);
+	input[9] = tuple_info->l4_protocol;
+
+	tuple = (u8 *)input;
+
+	for (i = 0, j = HAL_FST_HASH_DATA_SIZE - 1;
+	     i < HAL_FST_HASH_KEY_SIZE_BYTES && j >= 0; i++, j--)
+		hash ^= fst->key_cache[i][tuple[j]];
+
+	hash >>= 12;
+	hash &= (fst->max_entries - 1);
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Hash value %u\n", hash);
+
+	return hash;
+}
+
+u32 ath12k_hal_rx_get_trunc_hash(struct hal_rx_fst *fst, u32 hash)
+{
+	if (hash >= fst->max_entries)
+		hash &= (fst->max_entries - 1);
+
+	return hash;
+}
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.h b/drivers/net/wireless/ath/ath12k/hal_rx.h
index b8f6a93..7d963f1 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -1219,6 +1219,46 @@ enum ath12k_eht_ru_size {
 #define EHT_USER_BEAMFORMING_SHIFT		29
 #define EHT_USER_SPATIAL_CONFIG_SHIFT		24
 
+#define HAL_FST_HASH_KEY_SIZE_BYTES 40
+#define HAL_FST_HASH_DATA_SIZE 37
+#define HAL_FST_HASH_KEY_SIZE_WORDS 10
+#define HAL_RX_FST_MAX_SEARCH 16
+#define HAL_RX_FLOW_SEARCH_TABLE_SIZE 2048
+#define HAL_RX_FST_TOEPLITZ_KEYLEN 40
+#define HAL_RX_KEY_CACHE_SIZE 512
+
+struct hal_rx_fst {
+	struct hal_rx_fse *base_vaddr;
+	dma_addr_t base_paddr;
+	const u8 *key;
+	u8 shifted_key[HAL_FST_HASH_KEY_SIZE_BYTES];
+	u32 key_cache[HAL_FST_HASH_KEY_SIZE_BYTES][HAL_RX_KEY_CACHE_SIZE];
+	u16 max_entries;
+	u16 max_skid_length;
+	u32 fst_entry_size;
+};
+
+struct hal_flow_tuple_info {
+	u32 dest_ip_127_96;
+	u32 dest_ip_95_64;
+	u32 dest_ip_63_32;
+	u32 dest_ip_31_0;
+	u32 src_ip_127_96;
+	u32 src_ip_95_64;
+	u32 src_ip_63_32;
+	u32 src_ip_31_0;
+	u32 dest_port;
+	u32 src_port;
+	u32 l4_protocol;
+};
+
+struct hal_rx_flow {
+	struct hal_flow_tuple_info tuple_info;
+	u8 reo_destination_handler;
+	u8 reo_indication;
+	u32 fse_metadata;
+};
+
 void ath12k_hal_reo_status_queue_stats(struct ath12k_base *ab,
 				       struct hal_tlv_64_hdr *tlv,
 				       struct hal_reo_status *status);
-- 
2.34.1

