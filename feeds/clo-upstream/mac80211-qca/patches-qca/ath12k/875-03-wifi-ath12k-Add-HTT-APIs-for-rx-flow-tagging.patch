From 3a4c4d48dfad60554ff5f854755953a239b94455 Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Fri, 5 Jan 2024 10:04:41 +0530
Subject: [PATCH 02/10] wifi: ath12k: Add HTT APIs for rx flow tagging

1. Set Rx flow tagging initialization parameters to firmware using HTT
command.
2. Send RX FSE cache invalidation commands to firmware on addition of
deletion of flow entries.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Signed-off-by: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.h     |  93 ++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.c  | 151 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.h  |  14 +++
 drivers/net/wireless/ath/ath12k/hal_rx.h |   1 +
 4 files changed, 259 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/dp.h b/drivers/net/wireless/ath/ath12k/dp.h
index 72f7661..c13a041 100644
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -544,6 +544,8 @@ enum htt_h2t_msg_type {
 	HTT_H2T_MSG_TYPE_RX_RING_SELECTION_CFG	= 0xc,
 	HTT_H2T_MSG_TYPE_EXT_STATS_CFG		= 0x10,
 	HTT_H2T_MSG_TYPE_PPDU_STATS_CFG		= 0x11,
+	HTT_H2T_MSG_TYPE_RX_FSE_SETUP_CFG       = 0x12,
+	HTT_H2T_MSG_TYPE_RX_FSE_OPERATION_CFG   = 0x13,
 	HTT_H2T_MSG_TYPE_RXDMA_RXOLE_PPE_CFG	= 0x19,
 	HTT_H2T_MSG_TYPE_VDEV_TXRX_STATS_CFG	= 0x1a,
 	HTT_H2T_MSG_TYPE_TX_MONITOR_CFG		= 0x1b,
@@ -2564,6 +2566,97 @@ struct h2t_umac_hang_recovery_start_pre_reset {
 #define HTT_H2T_UMAC_RESET_IS_INITIATOR_SET	BIT(8)
 #define HTT_H2T_UMAC_RESET_IS_TARGET_RECOVERY_SET	BIT(9)
 
+/* info0 */
+#define HTT_DP_RX_FLOW_FST_SETUP_MSG_TYPE                  GENMASK(7, 0)
+#define HTT_DP_RX_FLOW_FST_SETUP_PDEV_ID                   GENMASK(15, 8)
+#define HTT_DP_RX_FLOW_FST_SETUP_RESERVED0                 GENMASK(31, 16)
+
+/* info1 */
+#define HTT_DP_RX_FLOW_FST_SETUP_NUM_RECORDS               GENMASK(19, 0)
+#define HTT_DP_RX_FLOW_FST_SETUP_MAX_SEARCH                GENMASK(27, 20)
+#define HTT_DP_RX_FLOW_FST_SETUP_IP_DA_SA                  GENMASK(29, 28)
+#define HTT_DP_RX_FLOW_FST_SETUP_RESERVED1                 GENMASK(31, 30)
+
+/* info2 */
+#define HTT_DP_RX_FLOW_FST_SETUP_TOEPLITZ                  GENMASK(26, 0)
+#define HTT_DP_RX_FLOW_FST_SETUP_RESERVED2                 GENMASK(31, 27)
+
+struct htt_rx_flow_fst_setup_cmd {
+	__le32 info0;
+	__le32 info1;
+	__le32 base_addr_lo;
+	__le32 base_addr_hi;
+	__le32 toeplitz31_0;
+	__le32 toeplitz63_32;
+	__le32 toeplitz95_64;
+	__le32 toeplitz127_96;
+	__le32 toeplitz159_128;
+	__le32 toeplitz191_160;
+	__le32 toeplitz223_192;
+	__le32 toeplitz255_224;
+	__le32 toeplitz287_256;
+	__le32 info2;
+} __packed;
+
+/* info0 */
+#define HTT_H2T_MSG_RX_FSE_MSG_TYPE                  GENMASK(7, 0)
+#define HTT_H2T_MSG_RX_FSE_PDEV_ID                   GENMASK(15, 8)
+#define HTT_H2T_MSG_RX_FSE_RESERVED0                 GENMASK(31, 16)
+
+/* info1 */
+#define HTT_H2T_MSG_RX_FSE_IPSEC_VALID               GENMASK(0, 0)
+#define HTT_H2T_MSG_RX_FSE_OPERATION                 GENMASK(7, 1)
+#define HTT_H2T_MSG_RX_FSE_RESERVED1                 GENMASK(31, 8)
+
+/* info2 */
+#define HTT_H2T_MSG_RX_FSE_SRC_PORT                  GENMASK(15, 0)
+#define HTT_H2T_MSG_RX_FSE_DEST_PORT                 GENMASK(31, 16)
+
+/* info3 */
+#define HTT_H2T_MSG_RX_FSE_L4_PROTO                  GENMASK(7, 0)
+#define HTT_H2T_MSG_RX_FSE_RESERVED2                 GENMASK(31, 8)
+
+struct htt_rx_msg_fse_operation {
+	__le32 info0;
+	__le32 info1;
+	__le32 ip_src_addr_31_0;
+	__le32 ip_src_addr_63_32;
+	__le32 ip_src_addr_95_64;
+	__le32 ip_src_addr_127_96;
+	__le32 ip_dest_addr_31_0;
+	__le32 ip_dest_addr_63_32;
+	__le32 ip_dest_addr_95_64;
+	__le32 ip_dest_addr_127_96;
+	__le32 info2;
+	__le32 info3;
+} __packed;
+
+struct htt_rx_flow_fst_setup {
+	u32 max_entries;
+	u32 max_search;
+	u32 base_addr_lo;
+	u32 base_addr_hi;
+	u32 ip_da_sa_prefix;
+	u32 hash_key_len;
+	u8 *hash_key;
+};
+
+enum dp_htt_flow_fst_operation {
+	DP_HTT_FST_CACHE_OP_NONE,
+	DP_HTT_FST_CACHE_INVALIDATE_ENTRY,
+	DP_HTT_FST_CACHE_INVALIDATE_FULL,
+	DP_HTT_FST_ENABLE,
+	DP_HTT_FST_DISABLE
+};
+
+enum htt_rx_fse_operation {
+	HTT_RX_FSE_CACHE_INVALIDATE_NONE,
+	HTT_RX_FSE_CACHE_INVALIDATE_ENTRY,
+	HTT_RX_FSE_CACHE_INVALIDATE_FULL,
+	HTT_RX_FSE_DISABLE,
+	HTT_RX_FSE_ENABLE,
+};
+
 int ath12k_dp_service_srng(struct ath12k_base *ab,
 			   struct ath12k_ext_irq_grp *irq_grp,
 			   int budget);
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 7c62e8e..d4b11d5 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -5663,3 +5663,154 @@ int ath12k_dp_rx_pktlog_stop(struct ath12k_base *ab, bool stop_timer)
 	return 0;
 }
 
+int ath12k_htt_rx_flow_fst_setup(struct ath12k_base *ab,
+				 struct htt_rx_flow_fst_setup *setup_info)
+{
+	struct sk_buff *skb;
+	struct htt_rx_flow_fst_setup_cmd *cmd;
+	int ret;
+	u32 *key;
+	int len = sizeof(*cmd);
+
+	skb = ath12k_htc_alloc_skb(ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	skb_put(skb, len);
+	cmd = (struct htt_dp_rx_flow_fst_setup_req_cmd *)skb->data;
+	memset(cmd, 0, sizeof(*cmd));
+
+	cmd->info0 = le32_encode_bits(HTT_H2T_MSG_TYPE_RX_FSE_SETUP_CFG,
+				      HTT_DP_RX_FLOW_FST_SETUP_MSG_TYPE);
+	cmd->info0 |= le32_encode_bits(0, HTT_DP_RX_FLOW_FST_SETUP_PDEV_ID);
+
+	cmd->info1 = le32_encode_bits(setup_info->max_entries,
+				      HTT_DP_RX_FLOW_FST_SETUP_NUM_RECORDS);
+	cmd->info1 |= le32_encode_bits(setup_info->max_search,
+				       HTT_DP_RX_FLOW_FST_SETUP_MAX_SEARCH);
+	cmd->info1 |= le32_encode_bits(setup_info->ip_da_sa_prefix,
+				       HTT_DP_RX_FLOW_FST_SETUP_IP_DA_SA);
+
+	cmd->base_addr_lo = setup_info->base_addr_lo;
+	cmd->base_addr_hi = setup_info->base_addr_hi;
+
+	key = (u32 *)setup_info->hash_key;
+	cmd->toeplitz31_0 = *key++;
+	cmd->toeplitz63_32 = *key++;
+	cmd->toeplitz95_64 = *key++;
+	cmd->toeplitz127_96 = *key++;
+	cmd->toeplitz159_128 = *key++;
+	cmd->toeplitz191_160 = *key++;
+	cmd->toeplitz223_192 = *key++;
+	cmd->toeplitz255_224 = *key++;
+	cmd->toeplitz287_256 = *key++;
+	cmd->info2 = le32_encode_bits(*key, HTT_DP_RX_FLOW_FST_SETUP_TOEPLITZ);
+
+	ath12k_dbg_dump(ab, ATH12K_DBG_DP_FST, NULL, "FST setup HTT message:",
+			(void *)cmd, len);
+
+	ret = ath12k_htc_send(&ab->htc, ab->dp.eid, skb);
+	if (ret) {
+		ath12k_err(ab, "DP FSE setup msg send failed ret:%d\n", ret);
+		goto err_free;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "DP FSE setup msg sent from host\n");
+
+	return 0;
+
+err_free:
+	dev_kfree_skb_any(skb);
+	return ret;
+}
+
+int ath12k_dp_rx_flow_send_fst_setup(struct ath12k_base *ab,
+				     struct dp_rx_fst *fst)
+{
+	struct htt_rx_flow_fst_setup fst_setup = {0};
+	int ret;
+
+	fst_setup.max_entries = fst->hal_rx_fst->max_entries;
+	fst_setup.max_search = fst->hal_rx_fst->max_skid_length;
+	fst_setup.base_addr_lo = lower_32_bits(fst->hal_rx_fst->base_paddr);
+	fst_setup.base_addr_hi = upper_32_bits(fst->hal_rx_fst->base_paddr);
+	fst_setup.ip_da_sa_prefix =
+		HAL_FST_IP_DA_SA_PFX_TYPE_IPV4_COMPATIBLE_IPV6;
+	fst_setup.hash_key = fst->hal_rx_fst->key;
+	fst_setup.hash_key_len = HAL_FST_HASH_KEY_SIZE_BYTES;
+
+	ret = ath12k_htt_rx_flow_fst_setup(ab, &fst_setup);
+	if (ret) {
+		ath12k_err(ab, "Failed to send Rx FSE Setup:status %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+int ath12k_htt_rx_flow_fse_operation(struct ath12k_base *ab,
+				     enum dp_htt_flow_fst_operation op_code,
+				     struct hal_flow_tuple_info *tuple_info)
+{
+	struct sk_buff *skb;
+	struct htt_rx_msg_fse_operation *cmd;
+	int ret;
+	int len = sizeof(*cmd);
+
+	skb = ath12k_htc_alloc_skb(ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	skb_put(skb, len);
+	cmd = (struct htt_h2t_msg_rx_fse_operation_t *)skb->data;
+	memset(cmd, 0, sizeof(*cmd));
+
+	cmd->info0 = le32_encode_bits(HTT_H2T_MSG_TYPE_RX_FSE_OPERATION_CFG,
+				      HTT_H2T_MSG_RX_FSE_MSG_TYPE);
+	cmd->info0 |= le32_encode_bits(0, HTT_H2T_MSG_RX_FSE_PDEV_ID);
+	cmd->info1 = le32_encode_bits(false, HTT_H2T_MSG_RX_FSE_IPSEC_VALID);
+
+	if (op_code == DP_HTT_FST_CACHE_INVALIDATE_ENTRY) {
+		cmd->info1 |= le32_encode_bits(HTT_RX_FSE_CACHE_INVALIDATE_ENTRY,
+					       HTT_H2T_MSG_RX_FSE_OPERATION);
+		cmd->ip_src_addr_31_0 = htonl(tuple_info->src_ip_31_0);
+		cmd->ip_src_addr_63_32 = htonl(tuple_info->src_ip_63_32);
+		cmd->ip_src_addr_95_64 = htonl(tuple_info->src_ip_95_64);
+		cmd->ip_src_addr_127_96 = htonl(tuple_info->src_ip_127_96);
+		cmd->ip_dest_addr_31_0 = htonl(tuple_info->dest_ip_31_0);
+		cmd->ip_dest_addr_63_32 = htonl(tuple_info->dest_ip_63_32);
+		cmd->ip_dest_addr_95_64 = htonl(tuple_info->dest_ip_95_64);
+		cmd->ip_dest_addr_127_96 = htonl(tuple_info->dest_ip_127_96);
+		cmd->info2 = le32_encode_bits(tuple_info->src_port,
+					      HTT_H2T_MSG_RX_FSE_SRC_PORT);
+		cmd->info2 |= le32_encode_bits(tuple_info->dest_port,
+					       HTT_H2T_MSG_RX_FSE_DEST_PORT);
+		cmd->info3 = le32_encode_bits(tuple_info->l4_protocol,
+					      HTT_H2T_MSG_RX_FSE_L4_PROTO);
+	} else if (op_code == DP_HTT_FST_CACHE_INVALIDATE_FULL) {
+		cmd->info1 |= le32_encode_bits(HTT_RX_FSE_CACHE_INVALIDATE_FULL,
+					       HTT_H2T_MSG_RX_FSE_OPERATION);
+	} else if (op_code == DP_HTT_FST_DISABLE) {
+		cmd->info1 |= le32_encode_bits(HTT_RX_FSE_DISABLE,
+					       HTT_H2T_MSG_RX_FSE_OPERATION);
+	} else if (op_code == DP_HTT_FST_ENABLE) {
+		cmd->info1 |= le32_encode_bits(HTT_RX_FSE_ENABLE,
+					       HTT_H2T_MSG_RX_FSE_OPERATION);
+	}
+
+	ath12k_dbg_dump(ab, ATH12K_DBG_DP_FST, NULL, "FSE HTT message:",
+			(void *)cmd, len);
+
+	ret = ath12k_htc_send(&ab->htc, ab->dp.eid, skb);
+	if (ret) {
+		ath12k_warn(ab, "DP FSE operation msg send failed ret:%d\n", ret);
+		goto err_free;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "DP FSE operation msg sent from host\n");
+	return 0;
+
+err_free:
+	dev_kfree_skb_any(skb);
+	return ret;
+}
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.h b/drivers/net/wireless/ath/ath12k/dp_rx.h
index 1e83b40..609e747 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -146,6 +146,20 @@ struct ath12k_dp_rx_info {
 	struct ieee80211_rx_status *rx_status;
 };
 
+struct dp_rx_fst {
+	u8 *base;
+	struct hal_rx_fst *hal_rx_fst;
+	u16 num_entries;
+	/* spinlock to prevent concurrent table access */
+	spinlock_t fst_lock;
+};
+
+struct rx_flow_info {
+	bool is_addr_ipv4;
+	struct hal_flow_tuple_info flow_tuple_info;
+	u16 fse_metadata;
+};
+
 static inline u32 ath12k_he_gi_to_nl80211_he_gi(u8 sgi)
 {
 	u32 ret = 0;
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.h b/drivers/net/wireless/ath/ath12k/hal_rx.h
index 7d963f1..65b1518 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -1226,6 +1226,7 @@ enum ath12k_eht_ru_size {
 #define HAL_RX_FLOW_SEARCH_TABLE_SIZE 2048
 #define HAL_RX_FST_TOEPLITZ_KEYLEN 40
 #define HAL_RX_KEY_CACHE_SIZE 512
+#define HAL_FST_IP_DA_SA_PFX_TYPE_IPV4_COMPATIBLE_IPV6 2
 
 struct hal_rx_fst {
 	struct hal_rx_fse *base_vaddr;
-- 
2.34.1

