From 3cfea25c05ad1d5858a83f09eb6e53e8cea7f2f3 Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Fri, 5 Jan 2024 10:11:28 +0530
Subject: [PATCH 03/10] wifi: ath12k: Add HAL helper functions for accessing
 flow tuple

Add HAL helper functions for accessing and dumping flow tuple.

1) ath12k_hal_rx_flow_get_tuple_info - Extract tuple information from
fse entry and also return the corresponding fse entry.

2) ath12k_hal_rx_find_flow_from_tuple - FInd flow idx from ffst table
given the 5 tuple information

3) ath12k_hal_rx_dump_fst_table - Dump all valid entries from the fst
table.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/hal_rx.c | 118 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/hal_rx.h |  46 +++++++++
 2 files changed, 164 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.c b/drivers/net/wireless/ath/ath12k/hal_rx.c
index 49bee0d..154acf0 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -1067,3 +1067,121 @@ u32 ath12k_hal_rx_get_trunc_hash(struct hal_rx_fst *fst, u32 hash)
 
 	return hash;
 }
+
+void *ath12k_hal_rx_flow_get_tuple_info(struct ath12k_base *ab,
+					struct hal_rx_fst *fst,
+					u32 hal_hash,
+					struct hal_flow_tuple_info *tuple_info)
+{
+	struct hal_rx_fse *hal_fse = &fst->base_vaddr[hal_hash];
+
+	if (!hal_fse || !tuple_info)
+		return NULL;
+
+	if (u32_get_bits(hal_fse->info2, HAL_RX_FSE_VALID) == 0)
+		return NULL;
+
+	tuple_info->src_ip_127_96 = ntohl(hal_fse->src_ip_127_96);
+	tuple_info->src_ip_95_64 = ntohl(hal_fse->src_ip_95_64);
+	tuple_info->src_ip_63_32 = ntohl(hal_fse->src_ip_63_32);
+	tuple_info->src_ip_31_0 = ntohl(hal_fse->src_ip_31_0);
+	tuple_info->dest_ip_127_96 = ntohl(hal_fse->dest_ip_127_96);
+	tuple_info->dest_ip_95_64 = ntohl(hal_fse->dest_ip_95_64);
+	tuple_info->dest_ip_63_32 = ntohl(hal_fse->dest_ip_63_32);
+	tuple_info->dest_ip_31_0 = ntohl(hal_fse->dest_ip_31_0);
+	tuple_info->dest_port =
+		u32_get_bits(hal_fse->info1, HAL_RX_FSE_DEST_PORT);
+	tuple_info->src_port =
+		u32_get_bits(hal_fse->info1, HAL_RX_FSE_SRC_PORT);
+	tuple_info->l4_protocol =
+		u32_get_bits(hal_fse->info2, HAL_RX_FSE_L4_PROTOCOL);
+
+	return hal_fse;
+}
+
+int ath12k_hal_rx_find_flow_from_tuple(struct ath12k_base *ab,
+				       struct hal_rx_fst *fst,
+				       u32 flow_hash,
+				       void *flow_tuple_info,
+				       u32 *flow_idx)
+{
+	int i;
+	void *hal_fse = NULL;
+	u32 hal_hash = 0;
+	struct hal_flow_tuple_info hal_tuple_info = { 0 };
+
+	for (i = 0; i < fst->max_skid_length; i++) {
+		hal_hash = ath12k_hal_rx_get_trunc_hash(fst, (flow_hash + i));
+
+		hal_fse = ath12k_hal_rx_flow_get_tuple_info(ab, fst, hal_hash,
+							    &hal_tuple_info);
+		if (!hal_fse)
+			continue;
+
+		/* Find the matching flow entry in HW FST */
+		if (!memcmp(&hal_tuple_info, flow_tuple_info,
+			    sizeof(struct hal_flow_tuple_info)))
+			break;
+	}
+
+	if (i == fst->max_skid_length) {
+		ath12k_err(ab, "Max skid length reached for hash %u", flow_hash);
+		return -ERANGE;
+	}
+
+	*flow_idx = hal_hash;
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST,
+		   "flow_hash = %u, skid_entry = %d, flow_addr = %pK flow_idx = %d",
+		   flow_hash, i, hal_fse, *flow_idx);
+
+	return 0;
+}
+
+ssize_t ath12k_hal_rx_dump_fst_table(struct hal_rx_fst *fst, char *buf, int size)
+{
+	int i;
+	struct hal_rx_fse *hal_fse;
+	int len = 0;
+
+	if (!fst) {
+		ath12k_warn(NULL, "FST table is NULL\n");
+		return -ENODEV;
+	}
+
+	for (i = 0; i < fst->max_entries; i++) {
+		hal_fse = &fst->base_vaddr[i];
+
+		if (!u32_get_bits(hal_fse->info2, HAL_RX_FSE_VALID))
+			continue;
+
+		len += scnprintf(buf + len, size - len, "Index: %d\n", i);
+		len += scnprintf(buf + len, size - len,
+				 "src_ip: 0x%x 0x%x 0x%x 0x%x\n",
+				 hal_fse->src_ip_127_96,
+				 hal_fse->src_ip_95_64,
+				 hal_fse->src_ip_63_32,
+				 hal_fse->src_ip_31_0);
+		len += scnprintf(buf + len, size - len,
+				 "dest_ip: 0x%x 0x%x 0x%x 0x%x\n",
+				 hal_fse->dest_ip_127_96,
+				 hal_fse->dest_ip_95_64,
+				 hal_fse->dest_ip_63_32,
+				 hal_fse->dest_ip_31_0);
+		len += scnprintf(buf + len, size - len,
+				 "src_port: 0x%x dest port: 0x%x\n",
+				 u32_get_bits(hal_fse->info1, HAL_RX_FSE_SRC_PORT),
+				 u32_get_bits(hal_fse->info1, HAL_RX_FSE_DEST_PORT));
+		len += scnprintf(buf + len, size - len,
+				"protocol: 0x%x\n",
+				u32_get_bits(hal_fse->info2, HAL_RX_FSE_L4_PROTOCOL));
+		len += scnprintf(buf + len, size - len,
+				"reo_indication: 0x%x reo_handler: 0x%x\n",
+				u32_get_bits(hal_fse->info2, HAL_RX_FSE_REO_INDICATION),
+				u32_get_bits(hal_fse->info2,
+					     HAL_RX_FSE_REO_DESTINATION_HANDLER));
+		len += scnprintf(buf + len, size - len, "metadata: 0x%x\n\n",
+				 hal_fse->metadata);
+	}
+
+	return len;
+}
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.h b/drivers/net/wireless/ath/ath12k/hal_rx.h
index 65b1518..98ef8d1 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -1227,6 +1227,8 @@ enum ath12k_eht_ru_size {
 #define HAL_RX_FST_TOEPLITZ_KEYLEN 40
 #define HAL_RX_KEY_CACHE_SIZE 512
 #define HAL_FST_IP_DA_SA_PFX_TYPE_IPV4_COMPATIBLE_IPV6 2
+#define NUM_OF_DWORDS_RX_FLOW_SEARCH_ENTRY 16
+#define HAL_RX_FST_ENTRY_SIZE (NUM_OF_DWORDS_RX_FLOW_SEARCH_ENTRY * 4)
 
 struct hal_rx_fst {
 	struct hal_rx_fse *base_vaddr;
@@ -1260,6 +1262,50 @@ struct hal_rx_flow {
 	u32 fse_metadata;
 };
 
+/* info1 subfields */
+#define HAL_RX_FSE_SRC_PORT			GENMASK(15, 0)
+#define HAL_RX_FSE_DEST_PORT			GENMASK(31, 16)
+
+/* info2 subfields */
+#define HAL_RX_FSE_L4_PROTOCOL			GENMASK(7, 0)
+#define HAL_RX_FSE_VALID			GENMASK(8, 8)
+#define HAL_RX_FSE_RESERVED			GENMASK(12, 9)
+#define HAL_RX_FSE_SERVICE_CODE			GENMASK(21, 13)
+#define HAL_RX_FSE_PRIORITY_VALID		GENMASK(22, 22)
+#define HAL_RX_FSE_USE_PPE			GENMASK(23, 23)
+#define HAL_RX_FSE_REO_INDICATION		GENMASK(28, 24)
+#define HAL_RX_FSE_MSDU_DROP			GENMASK(29, 29)
+#define HAL_RX_FSE_REO_DESTINATION_HANDLER	GENMASK(31, 30)
+
+/* info 3 subfields */
+#define HAL_RX_FSE_AGGREGATION_COUNT		GENMASK(15, 0)
+#define HAL_RX_FSE_LRO_ELIGIBLE			GENMASK(31, 16)
+#define HAL_RX_FSE_MSDU_COUNT			GENMASK(31, 16)
+
+/* info4 subfields */
+#define HAL_RX_FSE_CUMULATIVE_IP_LEN1		GENMASK(15, 0)
+#define HAL_RX_FSE_CUMULATIVE_IP_LEN		GENMASK(31, 16)
+
+/* This structure should not be modified as it is shared with HW */
+struct hal_rx_fse {
+	u32 src_ip_127_96;
+	u32 src_ip_95_64;
+	u32 src_ip_63_32;
+	u32 src_ip_31_0;
+	u32 dest_ip_127_96;
+	u32 dest_ip_95_64;
+	u32 dest_ip_63_32;
+	u32 dest_ip_31_0;
+	u32 info1;
+	u32 info2;
+	u32 metadata;
+	u32 info3;
+	u32 msdu_byte_count;
+	u32 timestamp;
+	u32 info4;
+	u32 tcp_sequence_number;
+};
+
 void ath12k_hal_reo_status_queue_stats(struct ath12k_base *ab,
 				       struct hal_tlv_64_hdr *tlv,
 				       struct hal_reo_status *status);
-- 
2.34.1

