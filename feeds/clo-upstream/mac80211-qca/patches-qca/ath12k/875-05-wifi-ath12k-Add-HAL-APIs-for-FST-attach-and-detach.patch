From 4f388ac61acf129faf1a03202d1ad098dc18e8f6 Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Wed, 10 Jan 2024 10:37:53 +0530
Subject: [PATCH 04/10] wifi: ath12k: Add HAL APIs for FST attach and detach

Add HAL APIs for attaching and detaching FST table.

1) ath12k_hal_rx_fst_attach - Initialize memory for FST table that will
be programmed later into the Hardware

2) ath12k_hal_rx_fst_detach - Free the memory allocated for FSt table.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/hal_rx.c | 59 ++++++++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.c b/drivers/net/wireless/ath/ath12k/hal_rx.c
index 154acf0..70726d8 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -1185,3 +1185,62 @@ ssize_t ath12k_hal_rx_dump_fst_table(struct hal_rx_fst *fst, char *buf, int size
 
 	return len;
 }
+
+static const u8 ath12k_hal_rx_fst_toeplitz_key[HAL_RX_FST_TOEPLITZ_KEYLEN] = {
+	0x6d, 0x5a, 0x56, 0xda, 0x25, 0x5b, 0x0e, 0xc2,
+	0x41, 0x67, 0x25, 0x3d, 0x43, 0xa3, 0x8f, 0xb0,
+	0xd0, 0xca, 0x2b, 0xcb, 0xae, 0x7b, 0x30, 0xb4,
+	0x77, 0xcb, 0x2d, 0xa3, 0x80, 0x30, 0xf2, 0x0c,
+	0x6a, 0x42, 0xb7, 0x3b, 0xbe, 0xac, 0x01, 0xfa
+};
+
+struct hal_rx_fst *
+ath12k_hal_rx_fst_attach(struct ath12k_base *ab)
+{
+	struct hal_rx_fst *fst;
+	u32 alloc_size;
+
+	fst = kzalloc(sizeof(*fst), GFP_KERNEL);
+	if (!fst)
+		return NULL;
+
+	fst->key = (u8 *)ath12k_hal_rx_fst_toeplitz_key;
+	fst->max_skid_length = HAL_RX_FST_MAX_SEARCH;
+	fst->max_entries = HAL_RX_FLOW_SEARCH_TABLE_SIZE;
+	fst->fst_entry_size = HAL_RX_FST_ENTRY_SIZE;
+	alloc_size = fst->max_entries * fst->fst_entry_size;
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "HAL FST allocation %pK entries %u entry size %u alloc_size %u\n",
+		   fst, fst->max_entries, fst->fst_entry_size, alloc_size);
+
+	fst->base_vaddr = dma_alloc_coherent(ab->dev, alloc_size,
+					     &fst->base_paddr, GFP_KERNEL);
+	if (!fst->base_vaddr) {
+		kfree(fst);
+		return NULL;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "hal_rx_fst base address 0x%pK",
+		   (void *)fst->base_paddr);
+
+	ath12k_dbg_dump(ab, ATH12K_DBG_DP_FST, NULL, "FST Key: ",
+			(void *)fst->key, HAL_FST_HASH_KEY_SIZE_BYTES);
+
+	memset((u8 *)fst->base_vaddr, 0, alloc_size);
+	ath12k_hal_fst_key_configure(fst);
+	ath12k_hal_flow_toeplitz_create_cache(fst);
+
+	return fst;
+}
+
+void ath12k_hal_rx_fst_detach(struct ath12k_base *ab, struct hal_rx_fst *fst)
+{
+	if (!fst)
+		return;
+
+	if (fst->base_vaddr)
+		dma_free_coherent(ab->dev,
+				  (fst->max_entries * fst->fst_entry_size),
+				  fst->base_vaddr, fst->base_paddr);
+	kfree(fst);
+}
-- 
2.34.1

