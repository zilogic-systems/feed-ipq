From e7049c5bad4a2ac2e5bf153522825e79df1bc965 Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Sat, 13 Jan 2024 12:03:46 +0530
Subject: [PATCH 08/10] wifi: ath12k: Add DP changes for flow addition and
 deletion

Add Data path changes to add and delete a flow entry into FST table

1) ath12k_dp_rx_flow_add_entry - Allocates a flow entry and inserts into
HAL FSE table. Calls HTT API to invaidate the cache entry.

2) ath12k_dp_rx_flow_delete_entry - Finds the flow entry with the tuple
information. Calls HAL API to mark the entry as invalid and calls
HTT API to invalidate the cache entry.

3) ath12k_dp_rx_flow_delete_all_entries - Delete all the entries in
the flow table.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.h     |   8 +
 drivers/net/wireless/ath/ath12k/dp_rx.c  | 258 +++++++++++++++++++++--
 drivers/net/wireless/ath/ath12k/dp_rx.h  |  11 +-
 drivers/net/wireless/ath/ath12k/hal_rx.h |   8 +
 4 files changed, 270 insertions(+), 15 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp.h b/drivers/net/wireless/ath/ath12k/dp.h
index c13a041..956d239 100644
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -398,6 +398,13 @@ struct ath12k_dp_ppe_vp_profile {
 };
 #endif
 
+struct dp_fst_config {
+	u32 fst_core_mask;
+	u8 fst_core_map[4];
+	u8 fst_num_cores;
+	u8 core_idx;
+};
+
 struct ath12k_dp {
 	struct ath12k_base *ab;
 	u8 num_bank_profiles;
@@ -476,6 +483,7 @@ struct ath12k_dp {
 	struct dp_rxdma_ring tx_mon_buf_ring;
 	struct ath12k_reo_q_addr_lut reoq_lut;
 	struct ath12k_reo_q_addr_lut ml_reoq_lut;
+	struct dp_fst_config fst_config;
 	unsigned long ppeds_service_running;
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index a23cd77..072edda 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -5862,22 +5862,22 @@ void ath12k_dp_rx_fst_detach(struct ath12k_base *ab, struct dp_rx_fst *fst)
 
 void ath12k_dp_rx_flow_dump_flow_entry(struct ath12k_base *ab,
 				       struct dp_rx_fst *fst,
-				       struct rx_flow_info *flow_info)
+				       struct hal_flow_tuple_info *tuple_info)
 {
 	ath12k_info(ab, "Dest IP address %x:%x:%x:%x",
-		    flow_info->flow_tuple_info.dest_ip_127_96,
-		    flow_info->flow_tuple_info.dest_ip_95_64,
-		    flow_info->flow_tuple_info.dest_ip_63_32,
-		    flow_info->flow_tuple_info.dest_ip_31_0);
+		    tuple_info->dest_ip_127_96,
+		    tuple_info->dest_ip_95_64,
+		    tuple_info->dest_ip_63_32,
+		    tuple_info->dest_ip_31_0);
 	ath12k_info(ab, "Source IP address %x:%x:%x:%x",
-		    flow_info->flow_tuple_info.src_ip_127_96,
-		    flow_info->flow_tuple_info.src_ip_95_64,
-		    flow_info->flow_tuple_info.src_ip_63_32,
-		    flow_info->flow_tuple_info.src_ip_31_0);
+		    tuple_info->src_ip_127_96,
+		    tuple_info->src_ip_95_64,
+		    tuple_info->src_ip_63_32,
+		    tuple_info->src_ip_31_0);
 	ath12k_info(ab, "Dest port %u, Src Port %u, Protocol %u",
-		    flow_info->flow_tuple_info.dest_port,
-		    flow_info->flow_tuple_info.src_port,
-		    flow_info->flow_tuple_info.l4_protocol);
+		    tuple_info->dest_port,
+		    tuple_info->src_port,
+		    tuple_info->l4_protocol);
 }
 
 u32 ath12k_dp_rx_flow_compute_flow_hash(struct ath12k_base *ab,
@@ -5919,7 +5919,7 @@ ath12k_dp_rx_flow_find_entry_by_tuple(struct ath12k_base *ab,
 						    &flow_idx);
 	if (status != 0) {
 		ath12k_err(ab, "Could not find tuple with hash %u", flow_hash);
-		ath12k_dp_rx_flow_dump_flow_entry(ab, fst, flow_info);
+		ath12k_dp_rx_flow_dump_flow_entry(ab, fst, &flow_info->flow_tuple_info);
 		return NULL;
 	}
 
@@ -5942,3 +5942,235 @@ ssize_t ath12k_dp_dump_fst_table(struct ath12k_base *ab, char *buf, int size)
 
 	return len;
 }
+
+struct dp_rx_fse *
+ath12k_dp_rx_flow_alloc_entry(struct ath12k_base *ab,
+			      struct dp_rx_fst *fst,
+			      struct rx_flow_info *flow_info,
+			      struct hal_rx_flow *flow)
+{
+	struct dp_rx_fse *fse;
+	u32 flow_hash;
+	u32 flow_idx;
+	int status;
+
+	flow_hash = ath12k_dp_rx_flow_compute_flow_hash(ab, fst, flow_info, flow);
+
+	status = ath12k_hal_rx_insert_flow_entry(ab, fst->hal_rx_fst, flow_hash,
+						 &flow_info->flow_tuple_info,
+						 &flow_idx);
+	if (status != 0) {
+		ath12k_err(ab, "Add entry failed with status %d for tuple with hash %u",
+			   status, flow_hash);
+		return NULL;
+	}
+
+	fse = ath12k_dp_rx_flow_get_fse(fst, flow_idx);
+	fse->flow_hash = flow_hash;
+	fse->flow_id = flow_idx;
+	fse->is_valid = true;
+
+	return fse;
+}
+
+int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
+				struct rx_flow_info *flow_info)
+{
+	struct hal_rx_flow flow = { 0 };
+	struct dp_rx_fse *fse;
+	struct dp_rx_fst *fst = ab->ag->fst;
+	int i;
+	int ret;
+
+	if (!fst) {
+		ath12k_warn(ab, "FST table is NULL\n");
+		return -ENODEV;
+	}
+
+	/* lock the FST table to prevent concurrent access */
+	spin_lock_bh(&fst->fst_lock);
+
+	/* Allocate entry in DP FST */
+	fse = ath12k_dp_rx_flow_alloc_entry(ab, fst, flow_info, &flow);
+	if (!fse) {
+		ath12k_err(ab, "RX FSE alloc failed");
+		ath12k_dp_rx_flow_dump_flow_entry(ab, fst, &flow_info->flow_tuple_info);
+		spin_unlock_bh(&fst->fst_lock);
+		return -ENOMEM;
+	}
+
+	flow.reo_indication = 1;
+	fse->reo_indication = flow.reo_indication;
+	flow.reo_destination_handler = HAL_RX_FSE_REO_DEST_FT;
+	flow.fse_metadata = flow_info->fse_metadata;
+	fse->hal_fse = ath12k_hal_rx_flow_setup_fse(ab, fst->hal_rx_fst,
+						    fse->flow_id, &flow);
+	if (!fse->hal_fse) {
+		ath12k_err(ab, "Unable to alloc FSE entry");
+		ath12k_dp_rx_flow_dump_flow_entry(ab, fst, &flow_info->flow_tuple_info);
+		fse->is_valid = false;
+		spin_unlock_bh(&fst->fst_lock);
+		return -EEXIST;
+	}
+
+	for (i = 0; i < ab->ag->num_chip; i++) {
+		struct ath12k_base *partner_ab = ab->ag->ab[i];
+
+		if (!partner_ab)
+			continue;
+
+		ret = ath12k_htt_rx_flow_fse_operation(partner_ab,
+						       DP_HTT_FST_CACHE_INVALIDATE_ENTRY,
+						       &flow_info->flow_tuple_info);
+		if (ret) {
+			ath12k_err(partner_ab, "Unable to invalidate cache entry ret %d",
+				   ret);
+			ath12k_dp_rx_flow_dump_flow_entry(partner_ab, fst,
+							  &flow_info->flow_tuple_info);
+			ath12k_hal_rx_flow_delete_entry(partner_ab, fse->hal_fse);
+			fse->is_valid = false;
+			spin_unlock_bh(&fst->fst_lock);
+			return ret;
+		}
+	}
+
+	fst->num_entries++;
+
+	spin_unlock_bh(&fst->fst_lock);
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST,
+		   "FST num_entries = %d, reo_dest_ind = %d, reo_dest_hand = %u",
+		   fst->num_entries, flow.reo_indication,
+		   flow.reo_destination_handler);
+
+	fst->flows_per_reo[fse->reo_indication - 1]++;
+	if (flow_info->is_addr_ipv4)
+		fst->ipv4_fse_rule_cnt++;
+	else
+		fst->ipv6_fse_rule_cnt++;
+
+	return 0;
+}
+
+int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
+				   struct rx_flow_info *flow_info)
+{
+	struct hal_rx_flow flow = { 0 };
+	struct dp_rx_fse *fse;
+	struct dp_rx_fst *fst = ab->ag->fst;
+	int i;
+	int ret;
+
+	if (!fst) {
+		ath12k_warn(ab, "FST table is NULL\n");
+		return -ENODEV;
+	}
+
+	/* lock the FST table to prevent concurrent access */
+	spin_lock_bh(&fst->fst_lock);
+
+	fse = ath12k_dp_rx_flow_find_entry_by_tuple(ab, fst, flow_info, &flow);
+	if (!fse || !fse->is_valid) {
+		ath12k_err(ab, "RX flow delete entry failed");
+		ath12k_dp_rx_flow_dump_flow_entry(ab, fst, &flow_info->flow_tuple_info);
+		spin_unlock_bh(&fst->fst_lock);
+		return -EINVAL;
+	}
+
+	/* Delete the FSE in HW FST */
+	ath12k_hal_rx_flow_delete_entry(ab, fse->hal_fse);
+
+	/* mark the FSE entry as invalid */
+	fse->is_valid = false;
+
+	/* Decrement number of valid entries in table */
+	fst->num_entries--;
+
+	for (i = 0; i < ab->ag->num_chip; i++) {
+		struct ath12k_base *partner_ab = ab->ag->ab[i];
+
+		if (!partner_ab)
+			continue;
+
+		ret = ath12k_htt_rx_flow_fse_operation(partner_ab,
+						       DP_HTT_FST_CACHE_INVALIDATE_ENTRY,
+						       &flow_info->flow_tuple_info);
+		if (ret) {
+			ath12k_err(partner_ab, "Unable to invalidate cache entry ret %d",
+				   ret);
+			ath12k_dp_rx_flow_dump_flow_entry(partner_ab, fst,
+							  &flow_info->flow_tuple_info);
+			/* Do not add entry back in DP FSE and HAL FSE */
+			spin_unlock_bh(&fst->fst_lock);
+			return ret;
+		}
+	}
+
+	spin_unlock_bh(&fst->fst_lock);
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST,
+		   "FST num_entries = %d", fst->num_entries);
+
+	fst->flows_per_reo[fse->reo_indication - 1]--;
+	if (flow_info->is_addr_ipv4)
+		fst->ipv4_fse_rule_cnt--;
+	else
+		fst->ipv6_fse_rule_cnt--;
+
+	return 0;
+}
+
+int ath12k_dp_rx_flow_delete_all_entries(struct ath12k_base *ab)
+{
+	int i;
+	struct dp_rx_fst *fst = ab->ag->fst;
+	struct dp_rx_fse *fse;
+	int ret;
+
+	spin_lock_bh(&fst->fst_lock);
+
+	fse = fst->base;
+	if (!fse) {
+		spin_unlock_bh(&fst->fst_lock);
+		return -ENODEV;
+	}
+
+	for (i = 0; i < fst->hal_rx_fst->max_entries; i++, fse++) {
+		if (!fse->is_valid)
+			continue;
+
+		ath12k_hal_rx_flow_delete_entry(ab, fse->hal_fse);
+
+		fse->is_valid = false;
+
+		fst->num_entries--;
+		fst->flows_per_reo[fse->reo_indication - 1]--;
+	}
+
+	for (i = 0; i < ab->ag->num_chip; i++) {
+		struct ath12k_base *partner_ab = ab->ag->ab[i];
+
+		if (!partner_ab)
+			continue;
+
+		ret = ath12k_htt_rx_flow_fse_operation(partner_ab,
+						       DP_HTT_FST_CACHE_INVALIDATE_FULL,
+						       NULL);
+		if (ret) {
+			ath12k_err(partner_ab, "Unable to invalidate the entire cache ret %d",
+				   ret);
+			spin_unlock_bh(&fst->fst_lock);
+			return ret;
+		}
+	}
+
+	spin_unlock_bh(&fst->fst_lock);
+
+	fst->ipv4_fse_rule_cnt = 0;
+	fst->ipv6_fse_rule_cnt = 0;
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST,
+		   "FST num_entries = %d", fst->num_entries);
+
+	return 0;
+}
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.h b/drivers/net/wireless/ath/ath12k/dp_rx.h
index 90fb731..88a13cb 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -150,6 +150,9 @@ struct dp_rx_fst {
 	u8 *base;
 	struct hal_rx_fst *hal_rx_fst;
 	u16 num_entries;
+	u16 ipv4_fse_rule_cnt;
+	u16 ipv6_fse_rule_cnt;
+	u16 flows_per_reo[4];
 	/* spinlock to prevent concurrent table access */
 	spinlock_t fst_lock;
 };
@@ -164,9 +167,8 @@ struct dp_rx_fse {
 	struct hal_rx_fse *hal_fse;
 	u32 flow_hash;
 	u32 flow_id;
-	u32 msdu_count;
 	u8 reo_indication;
-	u8 is_valid;
+	bool is_valid;
 };
 
 static inline u32 ath12k_he_gi_to_nl80211_he_gi(u8 sgi)
@@ -260,4 +262,9 @@ void ath12k_dp_peer_reo_tid_setup(struct ath12k_base *ab, struct ath12k_link_sta
 void ath12k_dp_tid_setup(void *data, struct ieee80211_sta *sta);
 void ath12k_dp_reset_rx_reo_tid_q(void *vaddr, u32 ba_window_size,
 				  u8 tid);
+int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
+				struct rx_flow_info *flow_info);
+int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
+				   struct rx_flow_info *flow_info);
+int ath12k_dp_rx_flow_delete_all_entries(struct ath12k_base *ab);
 #endif /* ATH12K_DP_RX_H */
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.h b/drivers/net/wireless/ath/ath12k/hal_rx.h
index b0aba6b..c44a86f 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -1229,6 +1229,7 @@ enum ath12k_eht_ru_size {
 #define HAL_FST_IP_DA_SA_PFX_TYPE_IPV4_COMPATIBLE_IPV6 2
 #define NUM_OF_DWORDS_RX_FLOW_SEARCH_ENTRY 16
 #define HAL_RX_FST_ENTRY_SIZE (NUM_OF_DWORDS_RX_FLOW_SEARCH_ENTRY * 4)
+#define HAL_RX_FSE_REO_DEST_FT 0
 
 struct hal_rx_fst {
 	struct hal_rx_fse *base_vaddr;
@@ -1359,4 +1360,11 @@ int ath12k_hal_rx_find_flow_from_tuple(struct ath12k_base *ab,
 				       u32 *flow_idx);
 ssize_t ath12k_hal_rx_dump_fst_table(struct hal_rx_fst *fst, char *buf,
 				     int size);
+int ath12k_hal_rx_insert_flow_entry(struct ath12k_base *ab, struct hal_rx_fst *fst,
+				    u32 flow_hash, void *flow_tuple_info,
+				    u32 *flow_idx);
+void *ath12k_hal_rx_flow_setup_fse(struct ath12k_base *ab, struct hal_rx_fst *fst,
+				   u32 table_offset, struct hal_rx_flow *flow);
+void ath12k_hal_rx_flow_delete_entry(struct ath12k_base *ab,
+				     struct hal_rx_fse *hal_fse);
 #endif
-- 
2.34.1

