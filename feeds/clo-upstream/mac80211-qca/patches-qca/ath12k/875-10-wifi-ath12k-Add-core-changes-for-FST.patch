From b096c77bd0b1bc0ebc1498807997cddeb191328e Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Wed, 20 Dec 2023 13:20:51 +0530
Subject: [PATCH 09/10] wifi: ath12k: Add core changes for FST

Add core changes for FST by calling FST attach and detach APIs
during core_start and core_stop. Introduced an argument called
fst_core_map which will decide how many cores the rx traffic will
use. Based on the core mask, reo rings are assigned in round robin
fashion for each succesive flow.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c  | 10 ++++-
 drivers/net/wireless/ath/ath12k/dp_rx.c | 56 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/dp_rx.h |  3 ++
 3 files changed, 67 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 5f465da..1c8dca9 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -139,8 +139,10 @@ void ath12k_core_put_hw_group(struct ath12k_base *ab)
 
 	mutex_unlock(&ag->mutex_lock);
 
-	if (!num_probed)
+	if (!num_probed) {
+		ath12k_dp_rx_fst_detach(ab, ag->fst);
 		ath12k_core_hw_group_free(ag);
+	}
 
 }
 
@@ -269,6 +271,11 @@ again:
 
 	ab->chip_id = ag->num_probed;
 	ag->ab[ag->num_probed++] = ab;
+
+	/* Call FST attach only for the first probed chip */
+	if (ag->num_probed == 1)
+		ag->fst = ath12k_dp_rx_fst_attach(ab);
+
 	ab->ag = ag;
 	return ag;
 }
@@ -1416,6 +1423,7 @@ static int ath12k_core_start(struct ath12k_base *ab,
 		goto err_reo_cleanup;
 	}
 
+	ath12k_dp_rx_fst_init(ab);
 	/* Indicate the core start in the appropriate group */
 	ab->ag->num_started++;
 
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 072edda..a2246c5 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -5973,6 +5973,17 @@ ath12k_dp_rx_flow_alloc_entry(struct ath12k_base *ab,
 	return fse;
 }
 
+static inline int ath12k_dp_fst_get_reo_indication(struct ath12k_base *ab)
+{
+	u8 reo_indication;
+
+	reo_indication = ab->dp.fst_config.fst_core_map[ab->dp.fst_config.core_idx] + 1;
+	ab->dp.fst_config.core_idx = (ab->dp.fst_config.core_idx + 1) %
+					ab->dp.fst_config.fst_num_cores;
+
+	return reo_indication;
+}
+
 int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 				struct rx_flow_info *flow_info)
 {
@@ -5999,7 +6010,7 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 		return -ENOMEM;
 	}
 
-	flow.reo_indication = 1;
+	flow.reo_indication = ath12k_dp_fst_get_reo_indication(ab);
 	fse->reo_indication = flow.reo_indication;
 	flow.reo_destination_handler = HAL_RX_FSE_REO_DEST_FT;
 	flow.fse_metadata = flow_info->fse_metadata;
@@ -6174,3 +6185,46 @@ int ath12k_dp_rx_flow_delete_all_entries(struct ath12k_base *ab)
 
 	return 0;
 }
+
+void ath12k_dp_fst_core_map_init(struct ath12k_base *ab)
+{
+	u32 fst_core_mask = ab->dp.fst_config.fst_core_mask;
+	int i;
+	int core_map_index = 0;
+
+	for (i = 0; i < 4; i++) {
+		ab->dp.fst_config.fst_core_map[i] = 0xf;
+		if ((fst_core_mask >> i) & 0x1) {
+			ab->dp.fst_config.fst_core_map[core_map_index] = i;
+			core_map_index++;
+		}
+	}
+
+	ab->dp.fst_config.fst_num_cores = core_map_index;
+	ab->dp.fst_config.core_idx = 0;
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "FST core_mask %x num_cores %d\n",
+		   ab->dp.fst_config.fst_core_mask, ab->dp.fst_config.fst_num_cores);
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "FST core map %x %x %x %x\n",
+		   ab->dp.fst_config.fst_core_map[0],
+		   ab->dp.fst_config.fst_core_map[1],
+		   ab->dp.fst_config.fst_core_map[2],
+		   ab->dp.fst_config.fst_core_map[3]);
+}
+
+void ath12k_dp_rx_fst_init(struct ath12k_base *ab)
+{
+	if (!ab->ag->fst) {
+		ath12k_warn(ab, "FST table is NULL\n");
+		return;
+	}
+
+	ab->ag->fst->ipv4_fse_rule_cnt = 0;
+	ab->ag->fst->ipv6_fse_rule_cnt = 0;
+	ab->dp.fst_config.fst_core_mask = 0x7;
+	ab->dp.fst_config.fst_num_cores = 0;
+
+	ath12k_dp_fst_core_map_init(ab);
+	ath12k_dp_rx_flow_send_fst_setup(ab, ab->ag->fst);
+}
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.h b/drivers/net/wireless/ath/ath12k/dp_rx.h
index 88a13cb..ac8b582 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -267,4 +267,7 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
 				   struct rx_flow_info *flow_info);
 int ath12k_dp_rx_flow_delete_all_entries(struct ath12k_base *ab);
+void ath12k_dp_rx_fst_detach(struct ath12k_base *ab, struct dp_rx_fst *fst);
+struct dp_rx_fst *ath12k_dp_rx_fst_attach(struct ath12k_base *ab);
+void ath12k_dp_rx_fst_init(struct ath12k_base *ab);
 #endif /* ATH12K_DP_RX_H */
-- 
2.34.1

