From 0e6786f58234e7f03e0a50f1d15fa6f166b97074 Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Fri, 5 Jan 2024 11:02:19 +0530
Subject: [PATCH 10/10] wifi: ath12k: Add debugfs entry for fst stats

Add debugfs entries to record flow level stats and to dump
fst table. Also introduce a debugfs entry for changing the fst
core mask.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 156 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.h   |   5 +
 2 files changed, 161 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2409,6 +2409,160 @@ static const struct file_operations fops
 	.write = ath12k_write_rx_hash_ix3,
 };
 
+static ssize_t ath12k_read_fst_core_mask(struct file *file,
+					 char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	char *buf;
+	const int size = 256;
+	int len = 0, retval;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	len = scnprintf(buf + len, size - len,
+			"\nFST core mask: %u\n",
+			ab->dp.fst_config.fst_core_mask);
+
+	retval = simple_read_from_buffer(user_buf, count, ppos, buf, len);
+	kfree(buf);
+
+	return retval;
+}
+
+static ssize_t ath12k_write_fst_core_mask(struct file *file,
+					  const char __user *ubuf,
+					  size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	struct ath12k_pdev *pdev;
+	u32 fst_core_mask;
+	int ret, i;
+	bool radioup = false;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		if (pdev && pdev->ar) {
+			radioup = true;
+			break;
+		}
+	}
+
+	if (!radioup) {
+		ath12k_err(ab, "radio is not up\n");
+		return -ENETDOWN;
+	}
+
+	ret = kstrtou32_from_user(ubuf, count, 0, &fst_core_mask);
+	if (ret)
+		return -EINVAL;
+
+	if (!ab->ag->fst) {
+		ath12k_err(ab, "FST table is NULL\n");
+		return -EINVAL;
+	}
+
+	if (fst_core_mask < ATH12K_DP_MIN_FST_CORE_MASK ||
+	    fst_core_mask > ATH12K_DP_MAX_FST_CORE_MASK) {
+		ath12k_err(ab, "Invalid FST core mask:0x%x\n",
+			   fst_core_mask);
+		return -EINVAL;
+	}
+
+	ab->dp.fst_config.fst_core_mask = fst_core_mask;
+	if (fst_core_mask)
+		ath12k_dp_fst_core_map_init(ab);
+
+	ret = count;
+	return ret;
+}
+
+static ssize_t ath12k_dump_fst_flow_stats(struct file *file,
+					  char __user *user_buf,
+					  size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	char *buf;
+	const int size = 1024;
+	int len = 0, retval;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	len += scnprintf(buf + len, size - len,
+			"\nNo of IPv4 Flow entries inserted: %u\n",
+			ab->ag->fst->ipv4_fse_rule_cnt);
+
+	len += scnprintf(buf + len, size - len,
+			"\nNo of IPv6 Flow entries inserted: %u\n",
+			ab->ag->fst->ipv6_fse_rule_cnt);
+
+	len += scnprintf(buf + len, size - len,
+			"\nNo of Flows per reo:\n0:%u\t1:%u\t2:%u\t3:%u\n",
+			ab->ag->fst->flows_per_reo[0],
+			ab->ag->fst->flows_per_reo[1],
+			ab->ag->fst->flows_per_reo[2],
+			ab->ag->fst->flows_per_reo[3]);
+
+	retval = simple_read_from_buffer(user_buf, count, ppos, buf, len);
+	kfree(buf);
+
+	return retval;
+}
+
+static ssize_t ath12k_dump_fst_dump_table(struct file *file,
+					  char __user *user_buf,
+					  size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	char *buf;
+	const int size = 256 * 2048;
+	int len = 0, retval;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	len = ath12k_dp_dump_fst_table(ab, buf + len, size - len);
+
+	retval = simple_read_from_buffer(user_buf, count, ppos, buf, len);
+	kfree(buf);
+
+	return retval;
+}
+
+static const struct file_operations fops_fst_core_mask = {
+	.open = simple_open,
+	.read = ath12k_read_fst_core_mask,
+	.write = ath12k_write_fst_core_mask,
+};
+
+static const struct file_operations fops_fst_dp_stats = {
+	.open = simple_open,
+	.read = ath12k_dump_fst_flow_stats,
+};
+
+static const struct file_operations fops_fst_dump_table = {
+	.open = simple_open,
+	.read = ath12k_dump_fst_dump_table,
+};
+
+void ath12k_fst_debugfs_init(struct ath12k_base *ab)
+{
+	struct dentry *fsestats_dir = debugfs_create_dir("fst_config", ab->debugfs_soc);
+
+	debugfs_create_file("fst_core_mask", 0600, fsestats_dir, ab,
+			    &fops_fst_core_mask);
+
+	debugfs_create_file("fst_dp_stats", 0400, fsestats_dir, ab,
+			    &fops_fst_dp_stats);
+
+	debugfs_create_file("fst_dump_table", 0400, fsestats_dir, ab,
+			    &fops_fst_dump_table);
+}
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 static ssize_t ath12k_debugfs_dump_ppeds_stats(struct file *file,
@@ -2532,6 +2686,8 @@ int ath12k_debugfs_pdev_create(struct at
 	debugfs_create_file("fw_reset_stats", 0400, ab->debugfs_soc, ab,
 			    &fops_fw_reset_stats);
 
+	ath12k_fst_debugfs_init(ab);
+
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	if (test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
 		debugfs_create_file("ppeds_stats", 0600, ab->debugfs_soc, ab,
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -149,6 +149,9 @@ struct ath12k_dp_rx_info {
 	struct ieee80211_rx_status *rx_status;
 };
 
+#define ATH12K_DP_MIN_FST_CORE_MASK 0x1
+#define ATH12K_DP_MAX_FST_CORE_MASK 0xf
+
 struct dp_rx_fst {
 	u8 *base;
 	struct hal_rx_fst *hal_rx_fst;
@@ -273,4 +276,6 @@ int ath12k_dp_rx_flow_delete_all_entries
 void ath12k_dp_rx_fst_detach(struct ath12k_base *ab, struct dp_rx_fst *fst);
 struct dp_rx_fst *ath12k_dp_rx_fst_attach(struct ath12k_base *ab);
 void ath12k_dp_rx_fst_init(struct ath12k_base *ab);
+ssize_t ath12k_dp_dump_fst_table(struct ath12k_base *ab, char *buf, int size);
+void ath12k_dp_fst_core_map_init(struct ath12k_base *ab);
 #endif /* ATH12K_DP_RX_H */
