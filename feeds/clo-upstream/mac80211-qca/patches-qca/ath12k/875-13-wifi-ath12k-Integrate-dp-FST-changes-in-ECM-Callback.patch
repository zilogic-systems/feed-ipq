From edc98070943a9445d6380acef4baefb873582a10 Mon Sep 17 00:00:00 2001
From: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
Date: Sun, 28 Jan 2024 12:37:19 +0530
Subject: [PATCH] wifi: ath12k: Integrate dp FST APIs in ECM Changes

Integrate the ECM callback with fst changes. When the flow is
detected, ECM-nss module will call ath12k_fse_add_rule, which calls
datapath function ath12k_dp_rx_flow_add_entry(). Similarly for the flow
delete, datapath function ath12k_sfe_delete_flow_entry() will be called.
Also enable support_fse to enable the feature.

Signed-off-by: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/fse.c | 70 ++++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/fse.h |  2 +-
 drivers/net/wireless/ath/ath12k/hw.c  | 10 ++--
 drivers/net/wireless/ath/ath_fse.c    | 49 ++++---------------
 4 files changed, 77 insertions(+), 54 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/fse.c b/drivers/net/wireless/ath/ath12k/fse.c
index 08bd743..bb29683 100644
--- a/drivers/net/wireless/ath/ath12k/fse.c
+++ b/drivers/net/wireless/ath/ath12k/fse.c
@@ -5,10 +5,11 @@
 
 #include "debug.h"
 #include "fse.h"
+#include "dp_rx.h"
 #include "peer.h"
 #include <linux/module.h>
 
-bool ath12k_fse_enable;
+bool ath12k_fse_enable = true;
 module_param_named(fse, ath12k_fse_enable, bool, 0444);
 MODULE_PARM_DESC(fse, "Enable FSE feature (Default: false)");
 
@@ -58,7 +59,7 @@ void *ath12k_fse_get_ab_from_netdev(struct net_device *dev,
 
 	wdev = dev->ieee80211_ptr;
 
-	vif = wdev_to_ieee80211_vif(wdev);
+	vif = wdev_to_ieee80211_vif_vlan(wdev);
 	if (!vif)
 		return NULL;
 
@@ -90,9 +91,36 @@ int ath12k_sfe_add_flow_entry(struct ath12k_base *ab,
 			      u8 protocol, u8 version)
 
 {
-	int ret = 0;
-	/*TODO:integrate with dp fst changes*/
-	return ret;
+	struct rx_flow_info flow_info = {0};
+
+	if (!ath12k_fse_enable)
+		return -EINVAL;
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "ADD S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,Ver:%d",
+		   src_ip[0], src_ip[1], src_ip[2], src_ip[3], src_port, dest_ip[0],
+		   dest_ip[1], dest_ip[2], dest_ip[3], dest_port, protocol, version);
+
+	flow_info.flow_tuple_info.src_port = src_port;
+	flow_info.flow_tuple_info.dest_port = dest_port;
+	flow_info.flow_tuple_info.l4_protocol = protocol;
+
+	flow_info.fse_metadata = ATH12K_RX_FSE_FLOW_MATCH_SFE;
+
+	if (version == 4) {
+		flow_info.is_addr_ipv4 = 1;
+		flow_info.flow_tuple_info.src_ip_31_0 = src_ip[0];
+		flow_info.flow_tuple_info.dest_ip_31_0 = dest_ip[0];
+	} else if (version == 6) {
+		flow_info.flow_tuple_info.src_ip_31_0 = src_ip[3];
+		flow_info.flow_tuple_info.src_ip_63_32 = src_ip[2];
+		flow_info.flow_tuple_info.src_ip_95_64 = src_ip[1];
+		flow_info.flow_tuple_info.src_ip_127_96 = src_ip[0];
+		flow_info.flow_tuple_info.dest_ip_31_0 = dest_ip[3];
+		flow_info.flow_tuple_info.dest_ip_63_32 = dest_ip[2];
+		flow_info.flow_tuple_info.dest_ip_95_64 = dest_ip[1];
+		flow_info.flow_tuple_info.dest_ip_127_96 = dest_ip[0];
+	}
+	return ath12k_dp_rx_flow_add_entry(ab, &flow_info);
 }
 
 int ath12k_sfe_delete_flow_entry(struct ath12k_base *ab,
@@ -100,7 +128,33 @@ int ath12k_sfe_delete_flow_entry(struct ath12k_base *ab,
 				 u32 *dest_ip, u32 dest_port,
 				 u8 protocol, u8 version)
 {
-	int ret = 0;
-	/*TODO:integrate with dp fst changes*/
-	return ret;
+	struct rx_flow_info flow_info = {0};
+
+	if (!ath12k_fse_enable)
+		return -EINVAL;
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "DEL S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,Ver:%d",
+		   src_ip[0], src_ip[1], src_ip[2], src_ip[3], src_port, dest_ip[0],
+		   dest_ip[1], dest_ip[2], dest_ip[3], dest_port, protocol, version);
+
+	flow_info.flow_tuple_info.src_port = src_port;
+	flow_info.flow_tuple_info.dest_port = dest_port;
+	flow_info.flow_tuple_info.l4_protocol = protocol;
+
+	if (version == 4) {
+		flow_info.is_addr_ipv4 = 1;
+		flow_info.flow_tuple_info.src_ip_31_0 = src_ip[0];
+		flow_info.flow_tuple_info.dest_ip_31_0 = dest_ip[0];
+	} else if (version == 6) {
+		flow_info.flow_tuple_info.src_ip_31_0 = src_ip[3];
+		flow_info.flow_tuple_info.src_ip_63_32 = src_ip[2];
+		flow_info.flow_tuple_info.src_ip_95_64 = src_ip[1];
+		flow_info.flow_tuple_info.src_ip_127_96 = src_ip[0];
+
+		flow_info.flow_tuple_info.dest_ip_31_0 = dest_ip[3];
+		flow_info.flow_tuple_info.dest_ip_63_32 = dest_ip[2];
+		flow_info.flow_tuple_info.dest_ip_95_64 = dest_ip[1];
+		flow_info.flow_tuple_info.dest_ip_127_96 = dest_ip[0];
+	}
+	return ath12k_dp_rx_flow_delete_entry(ab, &flow_info);
 }
diff --git a/drivers/net/wireless/ath/ath12k/fse.h b/drivers/net/wireless/ath/ath12k/fse.h
index 9dc923f..bf0802d 100644
--- a/drivers/net/wireless/ath/ath12k/fse.h
+++ b/drivers/net/wireless/ath/ath12k/fse.h
@@ -8,7 +8,7 @@
 
 #include <ath/ath_fse.h>
 
-#define ATH_RX_FSE_FLOW_MATCH_SFE 0xAAAA
+#define ATH12K_RX_FSE_FLOW_MATCH_SFE 0xAAAA
 void ath12k_fse_init(struct ath12k_base *ab);
 void ath12k_fse_deinit(struct ath12k_base *ab);
 void *ath12k_fse_get_ab_from_netdev(struct net_device *dev,
diff --git a/drivers/net/wireless/ath/ath12k/hw.c b/drivers/net/wireless/ath/ath12k/hw.c
index 0573b1e..88d0418 100644
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1595,7 +1595,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
 		.is_plink_preferable = true,
-		.support_fse = false,
+		.support_fse = true,
 	},
 	{
 		.name = "wcn7850 hw2.0",
@@ -1668,7 +1668,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
 		.is_plink_preferable = true,
-		.support_fse = false,
+		.support_fse = true,
 	},
 	{
 		.name = "qcn9274 hw2.0",
@@ -1754,7 +1754,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
 		.is_plink_preferable = true,
-		.support_fse = false,
+		.support_fse = true,
 	},
 	{
 		.name = "ipq5332 hw1.0",
@@ -1844,7 +1844,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
 		.is_plink_preferable = false,
-		.support_fse = false,
+		.support_fse = true,
 	},
 	{
 		.name = "qcn6432 hw1.0",
@@ -1927,7 +1927,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.en_qdsslog = true,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
 		.is_plink_preferable = true,
-		.support_fse = false,
+		.support_fse = true,
 	},
 };
 
diff --git a/drivers/net/wireless/ath/ath_fse.c b/drivers/net/wireless/ath/ath_fse.c
index bdac23a..bae038e 100644
--- a/drivers/net/wireless/ath/ath_fse.c
+++ b/drivers/net/wireless/ath/ath_fse.c
@@ -39,7 +39,9 @@ bool ath_fse_add_rule(struct ath_fse_flow_info *fse_info)
 		return false;
 	}
 	if (!fse_info->src_dev->ieee80211_ptr && !fse_info->dest_dev->ieee80211_ptr) {
-		pr_warn("Not a wlan traffic for FSE rule push\n");
+		pr_debug("Not a wlan traffic for FSE rule push:sdev:%s ddev:%s\n",
+			 netdev_name(fse_info->src_dev),
+			 netdev_name(fse_info->dest_dev));
 		return false;
 	}
 	/* Based on src_dev / dest_dev is a VAP, get the 5 tuple info
@@ -55,15 +57,6 @@ bool ath_fse_add_rule(struct ath_fse_flow_info *fse_info)
 			       netdev_name(fse_info->src_dev));
 			return false;
 		}
-
-		pr_info("ADD S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,Ver:%d",
-			fse_info->src_ip[0], fse_info->src_ip[1],
-			fse_info->src_ip[2], fse_info->src_ip[3], fse_info->src_port,
-			fse_info->dest_ip[0], fse_info->dest_ip[1],
-			fse_info->dest_ip[2], fse_info->dest_ip[3],
-			fse_info->dest_port, fse_info->protocol,
-			fse_info->version);
-
 		ret = fse_cb->fse_rule_add(ab,
 					   fse_info->src_ip, fse_info->src_port,
 					   fse_info->dest_ip, fse_info->dest_port,
@@ -81,14 +74,6 @@ bool ath_fse_add_rule(struct ath_fse_flow_info *fse_info)
 			       netdev_name(fse_info->dest_dev));
 			return false;
 		}
-		pr_info("ADD S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,Ver:%d",
-			fse_info->src_ip[0], fse_info->src_ip[1],
-			fse_info->src_ip[2], fse_info->src_ip[3], fse_info->src_port,
-			fse_info->dest_ip[0], fse_info->dest_ip[1],
-			fse_info->dest_ip[2], fse_info->dest_ip[3],
-			fse_info->dest_port, fse_info->protocol,
-			fse_info->version);
-
 		ret = fse_cb->fse_rule_add(ab,
 					   fse_info->dest_ip, fse_info->dest_port,
 					   fse_info->src_ip, fse_info->src_port,
@@ -123,11 +108,13 @@ bool ath_fse_delete_rule(struct ath_fse_flow_info *fse_info)
 		return false;
 
 	if (!fse_info->src_dev || !fse_info->dest_dev) {
-		pr_info("Unable to find dev for FSE rule delete");
+		pr_warn("Unable to find dev for FSE rule delete");
 		return false;
 	}
 	if (!fse_info->src_dev->ieee80211_ptr && !fse_info->dest_dev->ieee80211_ptr) {
-		pr_info("Not a wlan traffic for FSE rule delete");
+		pr_debug("Not a wlan traffic for FSE rule delete:sdev:%s ddev:%s\n",
+			 netdev_name(fse_info->src_dev),
+			 netdev_name(fse_info->dest_dev));
 		return false;
 	}
 	/* Based on src_dev / dest_dev is a VAP, get the 5 tuple info
@@ -142,16 +129,7 @@ bool ath_fse_delete_rule(struct ath_fse_flow_info *fse_info)
 			pr_err("Failed to delete a rule in FST<ab NULL>");
 			return false;
 		}
-
-		pr_info("DEL S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,Ver:%d",
-			fse_info->src_ip[0], fse_info->src_ip[1],
-			fse_info->src_ip[2], fse_info->src_ip[3], fse_info->src_port,
-			fse_info->dest_ip[0], fse_info->dest_ip[1],
-			fse_info->dest_ip[2], fse_info->dest_ip[3],
-			fse_info->dest_port, fse_info->protocol,
-			fse_info->version);
-
-		fw_ret  = fse_cb->fse_rule_delete(ab,
+		fw_ret = fse_cb->fse_rule_delete(ab,
 						  fse_info->src_ip, fse_info->src_port,
 						  fse_info->dest_ip, fse_info->dest_port,
 						  fse_info->protocol, fse_info->version);
@@ -163,16 +141,7 @@ bool ath_fse_delete_rule(struct ath_fse_flow_info *fse_info)
 			pr_err("Failed to delete a rule in FST<ab NULL>");
 			return false;
 		}
-
-		pr_info("DEL S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,Ver:%d",
-			fse_info->src_ip[0], fse_info->src_ip[1],
-			fse_info->src_ip[2], fse_info->src_ip[3], fse_info->src_port,
-			fse_info->dest_ip[0], fse_info->dest_ip[1],
-			fse_info->dest_ip[2], fse_info->dest_ip[3],
-			fse_info->dest_port, fse_info->protocol,
-			fse_info->version);
-
-		rv_ret  = fse_cb->fse_rule_delete(ab,
+		rv_ret = fse_cb->fse_rule_delete(ab,
 						  fse_info->dest_ip, fse_info->dest_port,
 						  fse_info->src_ip, fse_info->src_port,
 						  fse_info->protocol, fse_info->version);
-- 
2.17.1

