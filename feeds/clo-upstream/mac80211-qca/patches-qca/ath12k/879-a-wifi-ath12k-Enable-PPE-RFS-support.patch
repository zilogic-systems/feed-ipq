From 8d80366a00ecf0d04adc82cd740c9255e2542088 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 13 Dec 2023 11:25:32 -0800
Subject: [PATCH 1/2] wifi: ath12k: Enable PPE RFS support

This patch enables support for round-robin distribution of flows using
Receive Flow Steering (RFS) on ethernet. Currently, TX packets are
distributed by the hash-based distribution of 5-tuple flow rules when
ethernet is giving these packets to the kernel. This results in uneven
CPU load distribution due to hash collisions.

The driver initializes PPE virtual port per netdevice also specifying
core_mask to decide the CPU cores that need to be used for flows
destined to this netdevice. The PPE module then follows round-robin
flow distribution according to the core mask specified.

By default, the core mask is set to constant 0xF specifying the use of
core-0, core-1, core-2 and Core-3 as MLO can have dynamically added or
deleted. When ath12k driver is loaded without MLO capability using
mlo_capable=0 module param, core_mask will be chosen according to
band the VAP is configured to.

Module parameter to support this feature is set to be disabled by
default and can be enabled by below command.
	echo 1 > /sys/module/ath12k/parameters/ppe_rfs_support

Different core masks can be configured using module paramter
'rfs_core_mask'.
example:
   insmod ath12k.ko ppe_rfs_support=1 rfs_core_mask=0x7,0x7,0x7,0x7

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/bondif.h  |   3 -
 drivers/net/wireless/ath/ath12k/core.c    |  10 ++
 drivers/net/wireless/ath/ath12k/core.h    |   9 +-
 drivers/net/wireless/ath/ath12k/debugfs.c |  69 ++++++++++++
 drivers/net/wireless/ath/ath12k/mac.c     |  39 ++++++-
 drivers/net/wireless/ath/ath12k/ppe.c     | 125 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/ppe.h     |  23 ++++
 7 files changed, 272 insertions(+), 6 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/bondif.h
+++ b/drivers/net/wireless/ath/ath12k/bondif.h
@@ -9,9 +9,6 @@
 #define MAX_MLO_CHIPS 3
 #define MAX_PDEV_PER_SOC 3
 
-#define ATH12K_PPE_DS_2G_CORE_MASK		0x1
-#define ATH12K_PPE_DS_5G_CORE_MASK		0x2
-#define ATH12K_PPE_DS_6G_CORE_MASK		0x4
 #define ATH12K_PPE_DS_DEFAULT_CORE_MASK		0x7
 
 void ath12k_disable_ppe_for_link_netdev(struct ath12k_base *ab,
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -77,6 +77,16 @@ bool ath12k_erp_support = false;
 module_param_named(erp_support, ath12k_erp_support, bool, 0444);
 MODULE_PARM_DESC(erp_support, "ErP support (0 - disable, 1 - enable)");
 
+bool ath12k_ppe_rfs_support = true;
+module_param_named(ppe_rfs_support, ath12k_ppe_rfs_support, bool, 0644);
+MODULE_PARM_DESC(ppe_rfs_support, "Enable PPE RFS support for DL (0 - disable, 1 - enable)");
+
+unsigned int ath12k_rfs_core_mask[4] = {ATH12K_MAX_CORE_MASK, ATH12K_MAX_CORE_MASK,
+					ATH12K_MAX_CORE_MASK, ATH12K_MAX_CORE_MASK};
+module_param_array_named(rfs_core_mask, ath12k_rfs_core_mask, int, NULL, 0644);
+MODULE_PARM_DESC(rfs_core_mask, "Default RFS core mask, mask for 2G, mask for 5G,\n"
+		 "mask for 6G. One bit for one CPU core\n");
+
 static DEFINE_MUTEX(ath12k_hw_lock);
 static struct list_head ath12k_hw_groups = LIST_HEAD_INIT(ath12k_hw_groups);
 
@@ -4246,7 +4256,6 @@ static int ath12k_init(void)
 		goto error_pci;
 
 	return 0;
-
 error_pci:
 	ath12k_pci_exit();
 error_ahb:
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -51,6 +51,9 @@
 extern unsigned int ath12k_frame_mode;
 extern bool ath12k_erp_support;
 
+#define ATH12K_MAX_CORE_MASK	(0xFFFF & ((1 << NR_CPUS) - 1))
+extern unsigned int ath12k_rfs_core_mask[4];
+
 #define ATH12K_PHY_2GHZ "phy00"
 #define ATH12K_PHY_5GHZ "phy01"
 #define ATH12K_PHY_5GHZ_LOW "phy01"
@@ -507,10 +510,14 @@ struct ath12k_vif {
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_linkstats;
 	struct dentry *debugfs_primary_link;
+	struct dentry *debugfs_rfs_core_mask;
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	bool mcast_to_ucast_en;
 	bool chanctx_peer_del_done;
- };
+
+	int ppe_rfs_vp_num;
+	int ppe_rfs_core_mask;
+};
 
 struct ath12k_vif_iter {
 	u32 vdev_id;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -17,6 +17,7 @@
 #include "debugfs_htt_stats.h"
 #include "peer.h"
 #include "qmi.h"
+#include "ppe.h"
 
 static struct dentry *debugfs_ath12k;
 
@@ -5494,6 +5495,65 @@ static const struct file_operations ath1
 	.llseek = default_llseek,
 };
 
+static ssize_t ath12k_write_ppe_rfs_core_mask(struct file *file,
+					      const char __user *user_buf,
+					      size_t count, loff_t *ppos)
+{
+	struct ath12k_vif *ahvif = file->private_data;
+	struct ath12k_base *ab = ahvif->deflink.ab;
+	u32 core_mask;
+	int ret;
+
+	if (kstrtou32_from_user(user_buf, count, 0, &core_mask))
+		return -EINVAL;
+
+	if (core_mask > 0xF)
+		return -EINVAL;
+
+	mutex_lock(&ahvif->ah->conf_mutex);
+
+	if (core_mask == ahvif->ppe_rfs_core_mask) {
+		ret = count;
+		goto out;
+	}
+
+	ret = ath12k_change_core_mask_for_ppe_rfs(ab, ahvif, core_mask);
+	if (ret) {
+		ath12k_warn(ab, "failed to change core_mask\n");
+		goto out;
+	}
+
+	ret = count;
+out:
+	mutex_unlock(&ahvif->ah->conf_mutex);
+	return ret;
+}
+
+static ssize_t ath12k_read_ppe_rfs_core_mask(struct file *file,
+					     const char __user *user_buf,
+					     size_t count, loff_t *ppos)
+{
+	struct ath12k_vif *ahvif = file->private_data;
+	char buf[32] = {0};
+	int len = 0;
+
+	mutex_lock(&ahvif->ah->conf_mutex);
+	len = scnprintf(buf, sizeof(buf) - len, "%u\n",
+			ahvif->ppe_rfs_core_mask);
+
+	mutex_unlock(&ahvif->ah->conf_mutex);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static const struct file_operations ath12k_fops_rfs_core_mask = {
+	.read = ath12k_read_ppe_rfs_core_mask,
+	.write = ath12k_write_ppe_rfs_core_mask,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 void ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
@@ -5581,6 +5641,12 @@ void ath12k_debugfs_add_interface(struct
 		ahvif->debugfs_linkstats = NULL;
 	}
 
+	ahvif->debugfs_rfs_core_mask = debugfs_create_file("rfs_core_mask",
+							   0644,
+							   vif->debugfs_dir,
+							   ahvif,
+							   &ath12k_fops_rfs_core_mask);
+
 	/* Note: Add new AP mode only debugfs file before "ap_and_sta_debugfs_file" label.
 	 * Add new debugfs file for both AP and STA mode after the "ap_and_sta_debugfs_file"
 	 * label.
@@ -5611,6 +5677,9 @@ void ath12k_debugfs_remove_interface(str
 	debugfs_remove(ahvif->debugfs_primary_link);
 	ahvif->debugfs_primary_link = NULL;
 
+	debugfs_remove(ahvif->debugfs_rfs_core_mask);
+	ahvif->debugfs_rfs_core_mask = NULL;
+
 	if (ahvif->debugfs_linkstats) {
 		debugfs_remove(ahvif->debugfs_linkstats);
 		ahvif->debugfs_linkstats = NULL;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -24,6 +24,7 @@
 #include "testmode.h"
 #include "peer.h"
 #include "debugfs_sta.h"
+#include "ppe.h"
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
 #include "bondif.h"
 #endif
@@ -11241,7 +11242,7 @@ static int ath12k_mac_op_add_interface(s
 {
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_hw *ah = hw->priv;
-	int i;
+	int i, ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM, ppe_rfs_core_mask;
 
 	/* The ar in which this vif will be assigned can be determined since
 	 * it depends on the channel in which the vif is brought up.
@@ -11252,6 +11253,11 @@ static int ath12k_mac_op_add_interface(s
 	 */
 
 	mutex_lock(&ah->conf_mutex);
+	/* Reuse existing vp_num during Subsystem Recovery */
+	if (ahvif->ppe_rfs_vp_num > 0) {
+		ppe_rfs_vp_num = ahvif->ppe_rfs_vp_num;
+		ppe_rfs_core_mask = ahvif->ppe_rfs_core_mask;
+	}
 	memset(ahvif, 0, sizeof(*ahvif));
 
 	ahvif->vdev_type = vif->type;
@@ -11261,6 +11267,15 @@ static int ath12k_mac_op_add_interface(s
 	ahvif->deflink.ahvif = ahvif;
 	ahvif->deflink.link_id = 0;
 	ahvif->mcbc_gsn = 0;
+
+	if (ppe_rfs_vp_num == ATH12K_INVALID_PPE_RFS_VP_NUM) {
+		ahvif->ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
+		ath12k_enable_ppe_rfs(ahvif, NULL);
+	} else {
+		ahvif->ppe_rfs_vp_num = ppe_rfs_vp_num;
+		ahvif->ppe_rfs_core_mask = ppe_rfs_core_mask;
+	}
+
 	INIT_LIST_HEAD(&ahvif->deflink.list);
 	INIT_WORK(&ahvif->deflink.update_obss_color_notify_work,
 		  ath12k_update_obss_color_notify_work);
@@ -11456,6 +11471,9 @@ static void ath12k_mac_op_remove_interfa
 		ath12k_mac_unassign_link_vif(arvif);
 	}
 
+	/* free ppe vp allocated for RFS */
+	ath12k_disable_ppe_rfs(ahvif);
+
 	mutex_unlock(&ah->conf_mutex);
 }
 
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1269,3 +1269,129 @@ void ath12k_dp_srng_ppeds_cleanup(struct
 	ath12k_dp_srng_cleanup(ab, &dp->ppeds_comp_ring.ppe_wbm2sw_ring);
 }
 
+int ath12k_ppeds_get_core_mask(struct ath12k_vif *ahvif)
+{
+	struct ath12k_pdev *pdev;
+	struct ath12k *ar = ahvif->ah->radio;
+	int core_mask;
+
+
+	/* MLO case */
+	if (ath12k_mlo_capable)
+		return ATH12K_PPE_RFS_DEFAULT_CORE_MASK;
+
+	/* SLO case */
+	pdev = ar->pdev;
+	if (pdev->cap.supported_bands & WMI_HOST_WLAN_2G_CAP)
+		core_mask = ATH12K_PPE_RFS_2GHZ_CORE_MASK;
+	else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP &&
+		 !ar->supports_6ghz)
+		core_mask = ATH12K_PPE_RFS_5GHZ_CORE_MASK;
+	else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP &&
+		 ar->supports_6ghz)
+		core_mask = ATH12K_PPE_RFS_6GHZ_CORE_MASK;
+	else
+		core_mask = ATH12K_PPE_RFS_DEFAULT_CORE_MASK;
+
+	return core_mask;
+}
+
+/* User is expected to flush ecm entries before changing core mask */
+int ath12k_change_core_mask_for_ppe_rfs(struct ath12k_base *ab,
+					struct ath12k_vif *ahvif,
+					int core_mask)
+{
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
+	int ret;
+
+	if (!ath12k_ppe_rfs_support || wdev->bond_netdev)
+		return 0;
+
+	if (!ahvif->ppe_rfs_vp_num) {
+		ath12k_warn(ab, "No existing vp for dev %s\n",
+			    wdev->netdev->name);
+		return 0;
+	}
+
+	if (core_mask < 0) {
+		ath12k_warn(ab, "Invalid core_mask for PPE RFS\n");
+		return -EINVAL;
+	}
+
+	if (core_mask == ahvif->ppe_rfs_core_mask)
+		return 0;
+
+	ath12k_disable_ppe_rfs(ahvif);
+
+	ret = ath12k_enable_ppe_rfs(ahvif, &core_mask);
+	if (ret) {
+		ath12k_warn(ab, "error in enabling ppe vp for netdev %s\n",
+			    wdev->netdev->name);
+		return ret;
+	}
+
+	return 0;
+}
+
+void ath12k_disable_ppe_rfs(struct ath12k_vif *ahvif)
+{
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
+
+	if (!ath12k_ppe_rfs_support || wdev->bond_netdev)
+		return;
+
+	if (!ahvif->ppe_rfs_vp_num) {
+		ath12k_warn(NULL, "failed to disable vp for vif\n");
+		return;
+	}
+
+	ppe_vp_free(ahvif->ppe_rfs_vp_num);
+
+	ath12k_info(NULL,
+		    "Destroyed PASSIVE PPE VP port no:%d for dev:%s\n",
+		    ahvif->ppe_rfs_vp_num, wdev->netdev->name);
+	ahvif->ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
+}
+
+int ath12k_enable_ppe_rfs(struct ath12k_vif *ahvif,
+			  int *core_mask)
+{
+	struct ppe_vp_ai vpai;
+	int ppe_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
+
+	ahvif->ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
+	if (!ath12k_ppe_rfs_support || wdev->bond_netdev ||
+	    ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR ||
+	    !wdev->netdev)
+		return 0;
+
+	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
+
+	vpai.usr_type = PPE_VP_USER_TYPE_PASSIVE;
+	vpai.type = PPE_VP_TYPE_SW_L2;
+	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
+
+	/* user input takes highest precedence */
+	if (core_mask)
+		vpai.core_mask = *core_mask;
+	else
+		vpai.core_mask = ath12k_ppeds_get_core_mask(ahvif);
+
+	ppe_vp_num = ppe_vp_alloc(wdev->netdev, &vpai);
+	if (ppe_vp_num <= 0) {
+		ath12k_err(NULL, "Error in enabling PASSIVE VP for netdev %s\n",
+			   wdev->netdev->name);
+		return -ENOSR;
+	}
+
+	ahvif->ppe_rfs_vp_num = ppe_vp_num;
+	ahvif->ppe_rfs_core_mask = vpai.core_mask;
+
+	ath12k_info(NULL,
+		    "Enabling PASSIVE VP for ahvif %p dev %s vp_num %d core_mask 0x%x\n",
+		    ahvif, wdev->netdev->name,
+		    ahvif->ppe_rfs_vp_num, ahvif->ppe_rfs_core_mask);
+
+	return 0;
+}
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -8,6 +8,18 @@
 
 #define ATH12K_PPEDS_DEFAULT_POOL_ID 0
 
+/* TODO: This is framework to support different core masks.
+ * Actual core masks may be tuned based on requirements
+ */
+#define ATH12K_PPE_RFS_DEFAULT_CORE_MASK	ath12k_rfs_core_mask[0]
+#define ATH12K_PPE_RFS_2GHZ_CORE_MASK		ath12k_rfs_core_mask[1]
+#define ATH12K_PPE_RFS_5GHZ_CORE_MASK		ath12k_rfs_core_mask[2]
+#define ATH12K_PPE_RFS_6GHZ_CORE_MASK		ath12k_rfs_core_mask[3]
+
+#define ATH12K_INVALID_PPE_RFS_VP_NUM -1
+extern bool ath12k_ppe_rfs_support;
+extern unsigned int ath12k_mlo_capable;
+
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 
 #define ATH12K_DP_PPEDS_NAPI_DONE_BIT	1
@@ -48,4 +60,13 @@ void ath12k_dp_ppeds_interrupt_start(str
 void ath12k_ppeds_partner_link_start_queues(struct ath12k *ar);
 void ath12k_ppeds_partner_link_stop_queues(struct ath12k *ar);
 #endif
+
+int ath12k_ppeds_get_core_mask(struct ath12k_vif *ahvif);
+int ath12k_change_core_mask_for_ppe_rfs(struct ath12k_base *ab,
+					struct ath12k_vif *ahvif,
+					int core_mask);
+int ath12k_enable_ppe_rfs(struct ath12k_vif *ahvif,
+			  int *core_mask);
+void ath12k_disable_ppe_rfs(struct ath12k_vif *ahvif);
+
 #endif
