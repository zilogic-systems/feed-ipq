From 01b16b2a9aacb70922043f2f1e0944adfaf3ce89 Mon Sep 17 00:00:00 2001
From: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
Date: Thu, 8 Feb 2024 12:49:21 +0530
Subject: [PATCH] wifi: ath12k: Enhance the htt stats

Enhance the below htt stats types with new members added
in the stats struct.

Stats type added/updated are 1, 4, 9, 10, 12 and 22.

Also fixed the display issue in the stats 9 and 10.

Signed-off-by: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
---
 .../wireless/ath/ath12k/debugfs_htt_stats.c   | 235 +++++++++++++++---
 .../wireless/ath/ath12k/debugfs_htt_stats.h   | 111 ++++++++-
 2 files changed, 310 insertions(+), 36 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
@@ -36,6 +36,109 @@
 		buflen += index;							\
 	} while (0)
 
+#define CHAIN_ARRAY_TO_BUF(out, buflen, arr, len)					\
+	do {										\
+		int index = 0; u8 i;							\
+		for (i = 0; i < (len); i++) {						\
+			index += scnprintf(((out) + (buflen)) + index,			\
+			(ATH12K_HTT_STATS_BUF_SIZE - (buflen)) - index,			\
+				" %u:%d,", i, arr[i]);					\
+		}									\
+		buflen += index;							\
+	} while (0)
+
+#define PRINT_ARRAY_TO_BUF_INDEX(out, buflen, arr, str, len, idx, newline)		\
+	do {										\
+		int index = 0; u8 i; const char *str_val = str;				\
+		const char *new_line = newline;						\
+		if (str_val) {								\
+			index += scnprintf(((out) + (buflen)),				\
+				 (ATH12K_HTT_STATS_BUF_SIZE - buflen),			\
+				 "%s = ", str_val);					\
+		}									\
+		for (i = 0; i < (len); i++) {						\
+			index += scnprintf(((out) + (buflen)) + index,			\
+				 (ATH12K_HTT_STATS_BUF_SIZE - buflen) - index,		\
+				 " %u:%u,", i + (idx), arr[i]);				\
+		}									\
+		index += scnprintf(((out) + buflen) + index,				\
+			 (ATH12K_HTT_STATS_BUF_SIZE - (buflen)) - index,		\
+			 "%s", new_line);						\
+		buflen += index;							\
+	} while (0)
+
+static const char *htt_ax_tx_rx_ru_size_to_str(u8 ru_size)
+{
+	switch (ru_size) {
+	case HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_26:
+		return "26";
+	case HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_52:
+		return "52";
+	case HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_106:
+		return "106";
+	case HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_242:
+		return "242";
+	case HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_484:
+		return "484";
+	case HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_996:
+		return "996";
+	case HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_996x2:
+		return "996x2";
+	default:
+		return "unknown";
+	}
+}
+
+static const char *htt_be_tx_rx_ru_size_to_str(u8 ru_size)
+{
+	switch (ru_size) {
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_26:
+		return "26";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_52:
+		return "52";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_52_26:
+		return "52+26";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_106:
+		return "106";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_106_26:
+		return "106+26";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_242:
+		return "242";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_484:
+		return "484";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_484_242:
+		return "484+242";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996:
+		return "996";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996_484:
+		return "996+484";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996_484_242:
+		return "996+484+242";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x2:
+		return "996x2";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x2_484:
+		return "996x2+484";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x3:
+		return "996x3";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x3_484:
+		return "996x3+484";
+	case HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x4:
+		return "996x4";
+	default:
+		return "unknown";
+	}
+}
+
+static const char *htt_stats_tx_ru_size_to_str(enum htt_stats_ru_type ru_type, u8 ru_size)
+{
+	if (ru_type == HTT_STATS_RU_TYPE_SINGLE_RU_ONLY)
+		return htt_ax_tx_rx_ru_size_to_str(ru_size);
+	else if (ru_type == HTT_STATS_RU_TYPE_SINGLE_AND_MULTI_RU)
+		return htt_be_tx_rx_ru_size_to_str(ru_size);
+	else
+		return "unknown";
+}
+
 static inline void htt_print_stats_string_tlv(const void *tag_buf,
 					      u16 tag_len,
 					      struct debug_htt_stats_req *stats_req)
@@ -91,6 +194,8 @@ static inline void htt_print_tx_pdev_sta
 			 htt_stats_buf->hw_paused);
 	len += scnprintf(buf + len, buf_len - len, "hw_flush = %u\n",
 			 htt_stats_buf->hw_flush);
+	len += scnprintf(buf + len, buf_len - len, "ofdma_seq_flush = %u\n",
+					 htt_stats_buf->ofdma_seq_flush);
 	len += scnprintf(buf + len, buf_len - len, "hw_filt = %u\n",
 			 htt_stats_buf->hw_filt);
 	len += scnprintf(buf + len, buf_len - len, "tx_abort = %u\n",
@@ -139,8 +244,12 @@ static inline void htt_print_tx_pdev_sta
 			 htt_stats_buf->ul_mumimo_seq_posted);
 	len += scnprintf(buf + len, buf_len - len, "ul_mu_ofdma_seq_posted = %u\n",
 			 htt_stats_buf->ul_ofdma_seq_posted);
-	len += scnprintf(buf + len, buf_len - len, "mu_mimo_peer_blacklisted = %u\n",
-			 htt_stats_buf->num_mu_peer_blacklisted);
+	len += scnprintf(buf + len, buf_len - len, "dyn_mimo_ps_dlmumimo_sequences = %u\n",
+					 htt_stats_buf->num_dyn_mimo_ps_dlmumimo_sequences);
+	len += scnprintf(buf + len, buf_len - len, "num_su_txbf_denylisted = %u\n",
+					 htt_stats_buf->num_su_txbf_denylisted);
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_peer_denylist_count = %u\n",
+					 htt_stats_buf->num_mu_peer_blacklisted);
 	len += scnprintf(buf + len, buf_len - len, "seq_qdepth_repost_stop = %u\n",
 			 htt_stats_buf->seq_qdepth_repost_stop);
 	len += scnprintf(buf + len, buf_len - len, "seq_min_msdu_repost_stop = %u\n",
@@ -205,6 +314,20 @@ static inline void htt_print_tx_pdev_sta
 			 htt_stats_buf->tx_active_dur_us_high);
 	len += scnprintf(buf + len, buf_len - len, "fes_offsets_err_cnt = %u\n",
 			 htt_stats_buf->fes_offsets_err_cnt);
+	len += scnprintf(buf + len, buf_len - len, "thermal_suspend_cnt = %u\n",
+					 htt_stats_buf->thermal_suspend_cnt);
+	len += scnprintf(buf + len, buf_len - len, "dfs_suspend_cnt = %u\n",
+					 htt_stats_buf->dfs_suspend_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tx_abort_suspend_cnt = %u\n",
+					 htt_stats_buf->tx_abort_suspend_cnt);
+	len += scnprintf(buf + len, buf_len - len, "suspended txq mask = %u\n",
+					 htt_stats_buf->tgt_specific_opaque_txq_suspend_info);
+	len += scnprintf(buf + len, buf_len - len, "last_suspend_reason = %u\n",
+					 htt_stats_buf->last_suspend_reason);
+	len += scnprintf(buf + len, buf_len - len, "pdev_up_time_us_low = %u\n",
+					 htt_stats_buf->pdev_up_time_us_low);
+	len += scnprintf(buf + len, buf_len - len, "pdev_up_time_us_high = %u\n",
+					 htt_stats_buf->pdev_up_time_us_high);
 
 	stats_req->buf_len = len;
 }
@@ -299,8 +422,8 @@ htt_print_tx_pdev_stats_sifs_hist_tlv_v(
 	len += scnprintf(buf + len, buf_len - len,
 			 "HTT_TX_PDEV_STATS_SIFS_HIST_TLV_V:\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->sifs_hist_status,
-			   "sifs_hist_status", num_elems, "\n\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->sifs_hist_status,
+				 "sifs_hist_status", num_elems, 1, "\n\n");
 
 	stats_req->buf_len = len;
 }
@@ -343,61 +466,57 @@ void htt_print_tx_pdev_mu_ppdu_dist_stat
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	u8 max = HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST;
-	char hw_mode_prefix[][3] = {"ac", "ax"};
-	u8 j = 0, k = 0;
+	char hw_mode_prefix[][3] = {"ac", "ax", "be"};
+	u8 i = 0, j = 0, k = 0;
+	u16 index = 0;
+	char str_buf[HTT_MAX_STRING_LEN] = {0};
 
 	if (htt_stats_buf->hw_mode == HTT_STATS_HWMODE_AC) {
 		len += scnprintf(buf + len, buf_len - len,
 				 "\nHTT_TX_PDEV_MU_PPDU_DISTRIBUTION_STATS:\n");
 	} else if (htt_stats_buf->hw_mode == HTT_STATS_HWMODE_AX) {
 		k = 1;
+	} else if (htt_stats_buf->hw_mode == HTT_STATS_HWMODE_BE) {
+		k = 2;
 	} else {
 		/* hw_mode not recognized */
 		return;
 	}
 
-	len += scnprintf(buf + len, buf_len - len,
-			 htt_stats_buf->mu_mimo_num_seq_posted,
-			 "%s_mu_mimo_num_seq_posted_nr4\n", hw_mode_prefix[k]);
-	len += scnprintf(buf + len, buf_len - len,
-			 htt_stats_buf->mu_mimo_num_seq_posted,
-			 "%s_mu_mimo_num_seq_posted_nr8\n", hw_mode_prefix[k]);
-
-	for (j = 0; j < HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST; j++) {
+	for (i = 0; i < 2; i++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "%s_mu_mimo_num_ppdu_posted_per_burst_nr4 %u:%u,\n",
-				 hw_mode_prefix[k], j,
-				 htt_stats_buf->mu_mimo_num_ppdu_posted_per_burst[j]);
-		len += scnprintf(buf + len, buf_len - len,
-				 "%s_mu_mimo_num_ppdu_posted_per_burst_nr8 %u:%u,\n",
-				 hw_mode_prefix[k], j,
-				 htt_stats_buf->mu_mimo_num_ppdu_posted_per_burst
-						[max + j]);
-	}
-
-	for (j = 0; j < HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST; j++) {
-		len += scnprintf(buf + len, buf_len - len,
-				 "%s_mu_mimo_num_ppdu_completed_per_burst_nr4 %u:%u,\n",
-				 hw_mode_prefix[k], j,
-				 htt_stats_buf->mu_mimo_num_ppdu_completed_per_burst[j]);
-		len += scnprintf(buf + len, buf_len - len,
-				 "%s_mu_mimo_num_ppdu_completed_per_burst_nr8 %u:%u,\n",
-				 hw_mode_prefix[k], j,
-				 htt_stats_buf->mu_mimo_num_ppdu_completed_per_burst
-						 [max + j]);
-	}
-
-	for (j = 0; j < HTT_STATS_MAX_NUM_SCHED_STATUS; j++) {
-		len += scnprintf(buf + len, buf_len - len,
-				 "%s_mu_mimo_num_seq_term_status_nr4 %u:%u,\n",
-				 hw_mode_prefix[k], j,
-				 htt_stats_buf->mu_mimo_num_seq_term_status[j]);
+				 "%s_mu_mimo_num_seq_posted_nr%u = %u\n", hw_mode_prefix[k],
+				 ((i + 1) * 4), htt_stats_buf->mu_mimo_num_seq_posted[i]);
+		index = 0;
+		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+		for (j = 0; j < HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST ; j++) {
+			index += snprintf(&str_buf[index], HTT_MAX_STRING_LEN - index, " %u:%u,",
+					  j, htt_stats_buf->mu_mimo_num_ppdu_posted_per_burst
+					  [i * HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST + j]);
+		}
+		len += scnprintf(buf + len, buf_len - len,
+				 "%s_mu_mimo_num_ppdu_posted_per_burst_nr%u = %s\n",
+				 hw_mode_prefix[k], ((i + 1) * 4), str_buf);
+		index = 0;
+		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+		for (j = 0; j < HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST ; j++) {
+			index += snprintf(&str_buf[index], HTT_MAX_STRING_LEN - index, " %u:%u,",
+					  j, htt_stats_buf->mu_mimo_num_ppdu_completed_per_burst
+					  [i * HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST + j]);
+		}
+		len += scnprintf(buf + len, buf_len - len,
+				 "%s_mu_mimo_num_ppdu_completed_per_burst_nr%u = %s\n",
+				 hw_mode_prefix[k], ((i + 1) * 4), str_buf);
+		index = 0;
+		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+		for (j = 0; j < HTT_STATS_MAX_NUM_SCHED_STATUS ; j++) {
+			index += snprintf(&str_buf[index], HTT_MAX_STRING_LEN - index, " %u:%u,",
+					  j, htt_stats_buf->mu_mimo_num_seq_term_status
+					  [i * HTT_STATS_MAX_NUM_SCHED_STATUS + j]);
+		}
 		len += scnprintf(buf + len, buf_len - len,
-				 "%s_mu_mimo_num_seq_term_status_nr8 %u:%u,\n",
-				 hw_mode_prefix[k], j,
-				 htt_stats_buf->mu_mimo_num_seq_term_status
-						[HTT_STATS_MAX_NUM_SCHED_STATUS + j]);
+				 "%s_mu_mimo_num_seq_term_status_nr%u = %s\n\n",
+				 hw_mode_prefix[k], ((i + 1) * 4), str_buf);
 	}
 
 	stats_req->buf_len = len;
@@ -572,6 +691,37 @@ static inline void htt_print_hw_stats_pd
 			 "wal_rx_recovery_rst_phy_mac_hang_count = %u\n",
 			 htt_stats_buf->wal_rx_recovery_rst_phy_mac_hang_count);
 
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_DEST_DRAIN_STATS:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_rx_descs_leak_prevention_done = %u\n",
+			 htt_stats_buf->rx_dest_drain_rx_descs_leak_prevention_done);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_rx_descs_saved_cnt = %u\n",
+			 htt_stats_buf->rx_dest_drain_rx_descs_saved_cnt);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_rxdma2reo_leak_detected = %u\n",
+			 htt_stats_buf->rx_dest_drain_rxdma2reo_leak_detected);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_rxdma2fw_leak_detected = %u\n",
+			 htt_stats_buf->rx_dest_drain_rxdma2fw_leak_detected);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_rxdma2wbm_leak_detected = %u\n",
+			 htt_stats_buf->rx_dest_drain_rxdma2wbm_leak_detected);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_rxdma1_2sw_leak_detected = %u\n",
+			 htt_stats_buf->rx_dest_drain_rxdma1_2sw_leak_detected);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_rx_drain_ok_mac_idle = %u\n",
+			 htt_stats_buf->rx_dest_drain_rx_drain_ok_mac_idle);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_ok_mac_not_idle = %u\n",
+			 htt_stats_buf->rx_dest_drain_ok_mac_not_idle);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_prerequisite_invld = %u\n",
+			 htt_stats_buf->rx_dest_drain_prerequisite_invld);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_dest_drain_skip_for_non_lmac_reset = %u\n",
+			 htt_stats_buf->rx_dest_drain_skip_for_non_lmac_reset);
 	stats_req->buf_len = len;
 }
 
@@ -584,7 +734,7 @@ static inline void htt_print_msdu_flow_s
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	u32 drop_rule = __le32_to_cpu(htt_stats_buf->tx_flow_no__tid_num__drop_rule);
 
-	len += scnprintf(buf + len, buf_len - len, "HTT_MSDU_FLOW_STATS_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_MSDU_FLOW_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "last_update_timestamp = %u\n",
 			 htt_stats_buf->last_update_timestamp);
 	len += scnprintf(buf + len, buf_len - len, "last_add_timestamp = %u\n",
@@ -707,6 +857,25 @@ static inline void htt_print_tx_tid_stat
 			 htt_stats_buf->allow_n_flags);
 	len += scnprintf(buf + len, buf_len - len, "sendn_frms_allowed = %u\n",
 			 htt_stats_buf->sendn_frms_allowed);
+	len += scnprintf(buf + len, buf_len - len, "tid_ext_flags = 0x%x\n",
+			 htt_stats_buf->tid_ext_flags);
+	len += scnprintf(buf + len, buf_len - len, "tid_ext2_flags = 0x%x\n",
+			 htt_stats_buf->tid_ext2_flags);
+	len += scnprintf(buf + len, buf_len - len, "tid_flush_reason = 0x%x\n",
+			 htt_stats_buf->tid_flush_reason);
+	len += scnprintf(buf + len, buf_len - len, "mlo_flush_tqm_status_pending = 0x%x%x\n",
+			 htt_stats_buf->mlo_flush_tqm_status_pending_high,
+			 htt_stats_buf->mlo_flush_tqm_status_pending_low);
+	len += scnprintf(buf + len, buf_len - len, "mlo_flush_partner_info= 0x%x%x\n",
+			 htt_stats_buf->mlo_flush_partner_info_high,
+			 htt_stats_buf->mlo_flush_partner_info_low);
+	len += scnprintf(buf + len, buf_len - len, "mlo_flush_initator_info= 0x%x%x\n",
+			 htt_stats_buf->mlo_flush_initator_info_high,
+			 htt_stats_buf->mlo_flush_initator_info_low);
+	len += scnprintf(buf + len, buf_len - len, "head_msdu_tqm_timestamp_us = %u\n",
+			 htt_stats_buf->head_msdu_tqm_timestamp_us);
+	len += scnprintf(buf + len, buf_len - len, "head_msdu_tqm_latency_us = %u\n",
+			 htt_stats_buf->head_msdu_tqm_latency_us);
 
 	stats_req->buf_len = len;
 }
@@ -812,21 +981,37 @@ static inline void htt_print_ast_entry_t
 	u32 mac_addr_16 = __le32_to_cpu(htt_stats_buf->mac_addr.mac_addr_h16);
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "mac_addr : %02x:%02x:%02x:%02x:%02x:%02x | ast_index : %u | sw_peer_id : %u | pdev_id : %u | vdev_id : %u\n",
-			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_0),
+			 "ast_index : %u | mac_addr : %02x:%02x:%02x:%02x:%02x:%02x |\n",
+			 htt_stats_buf->ast_index, u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_0),
 			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_1),
 			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_2),
 			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_3),
 			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_0),
-			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_1),
-			 htt_stats_buf->ast_index, htt_stats_buf->sw_peer_id,
-			 htt_stats_buf->pdev_id, htt_stats_buf->vdev_id);
+			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_1));
+
+	if (htt_stats_buf->chip_id == 0x3) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "pdev_id   : %u | vdev_id  : %u | sw_peer_id : %u |\n",
+				 htt_stats_buf->pdev_id, htt_stats_buf->vdev_id,
+				 htt_stats_buf->sw_peer_id);
+	} else {
+		len += scnprintf(buf + len, buf_len - len,
+				 "chip_id   : %u | pdev_id  : %u | vdev_id    : %u | sw_peer_id : %u | ml_peer_id : %u |\n",
+				 htt_stats_buf->chip_id, htt_stats_buf->pdev_id,
+				 htt_stats_buf->vdev_id, htt_stats_buf->sw_peer_id,
+				 htt_stats_buf->ml_peer_id);
+	}
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "next_hop : %u | mcast : %u | monitor_direct :%u | mesh_sta : %u | mec :%u | intra_bss :%u\n",
+			 "next_hop : %u | mcast : %u | monitor_direct :%u | mesh_sta : %u | intra_bss  :  %u | mec : %u |\n",
 			 htt_stats_buf->next_hop, htt_stats_buf->mcast,
 			 htt_stats_buf->monitor_direct, htt_stats_buf->mesh_sta,
-			 htt_stats_buf->mec, htt_stats_buf->intra_bss);
+			 htt_stats_buf->intra_bss, htt_stats_buf->mec);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "onchip : %u | tx_monitor_override_sta : %u | rx_monitor_override_sta : %u |\n",
+			 htt_stats_buf->on_chip, htt_stats_buf->tx_monitor_override_sta,
+			 htt_stats_buf->rx_monitor_override_sta);
 
 	stats_req->buf_len = len;
 }
@@ -838,6 +1023,7 @@ static inline void htt_print_peer_detail
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 *htt_buf_ptr = htt_stats_buf;
 	u32 ast_idx = __le32_to_cpu(htt_stats_buf->vdev_pdev_ast_idx);
 	u32 mac_addr = __le32_to_cpu(htt_stats_buf->mac_addr.mac_addr_l32);
 	u32 mac_addr_16 = __le32_to_cpu(htt_stats_buf->mac_addr.mac_addr_h16);
@@ -866,6 +1052,24 @@ static inline void htt_print_peer_detail
 	len += scnprintf(buf + len, buf_len - len, "qpeer_flags = 0x%x\n",
 			 htt_stats_buf->qpeer_flags);
 
+	htt_buf_ptr += HTT_PEER_DETAILS_ML_PEER_OFFSET_DWORD;
+
+	len += scnprintf(buf + len, buf_len - len, "link_idx = %u\n",
+			 HTT_PEER_DETAILS_GET(*htt_buf_ptr, LINK_IDX));
+
+	if (HTT_PEER_DETAILS_GET(*htt_buf_ptr, ML_PEER_ID_VALID))
+		len += scnprintf(buf + len, buf_len - len, "ml_peer_id = %u\n",
+		HTT_PEER_DETAILS_GET(*htt_buf_ptr, ML_PEER_ID));
+	else
+		len += scnprintf(buf + len, buf_len - len, "ml_peer_id = INVALID\n");
+
+	len += scnprintf(buf + len, buf_len - len, "use_ppe = 0x%x\n",
+			 HTT_PEER_DETAILS_GET(*htt_buf_ptr, USE_PPE));
+
+	++htt_buf_ptr;
+	len += scnprintf(buf + len, buf_len - len, "src_info = 0x%x\n",
+			 HTT_PEER_DETAILS_GET(*htt_buf_ptr, SRC_INFO));
+
 	stats_req->buf_len = len;
 }
 
@@ -877,7 +1081,8 @@ static inline void htt_print_tx_peer_rat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char *tx_gi[HTT_TX_PEER_STATS_NUM_GI_COUNTERS] = {NULL};
-	u8 j;
+	u8 i, j;
+	u16 index = 0;
 
 	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++) {
 		tx_gi[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -894,25 +1099,55 @@ static inline void htt_print_tx_peer_rat
 			 htt_stats_buf->ack_rssi);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs,
-			   "tx_mcs = %s\n", HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+			   "tx_mcs", HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12:%u, 13:%u, 14:%u, 15:%u\n",
+			 htt_stats_buf->tx_mcs_ext[0], htt_stats_buf->tx_mcs_ext[1],
+			 htt_stats_buf->tx_mcs_ext_2[0], htt_stats_buf->tx_mcs_ext_2[1]);
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_su_mcs, "tx_su_mcs",
-			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12:%u, 13:%u\n",
+			 htt_stats_buf->tx_su_mcs_ext[0], htt_stats_buf->tx_su_mcs_ext[1]);
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mu_mcs, "tx_mu_mcs",
-			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_nss, "tx_nss",
-			   HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_bw, "tx_bw",
-			   HTT_TX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_stbc, "tx_stbc",
-			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12:%u, 13:%u\n",
+			 htt_stats_buf->tx_mu_mcs_ext[0], htt_stats_buf->tx_mu_mcs_ext[1]);
+	len += scnprintf(buf + len, buf_len - len, "tx_nss = ");
+	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", (j + 1),
+				 htt_stats_buf->tx_nss[j]);
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_bw, "\ntx_bw",
+			   HTT_TX_PDEV_STATS_NUM_BW_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "4:%u\n",
+			 htt_stats_buf->tx_bw_320mhz);
+	for (j = 0; j < HTT_TX_PEER_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
+		len += scnprintf(buf + len, buf_len - len, j == 0 ?
+				 "half_tx_bw = " : "quarter_tx_bw = ");
+		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->reduced_tx_bw[j], NULL,
+				   HTT_TX_PEER_STATS_NUM_BW_COUNTERS, "\n");
+	}
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_stbc, "\ntx_stbc",
+			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12:%u, 13:%u\n",
+			 htt_stats_buf->tx_stbc_ext[0], htt_stats_buf->tx_stbc_ext[1]);
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_pream, "tx_pream",
 			   HTT_TX_PDEV_STATS_NUM_PREAMBLE_TYPES, "\n");
 
 	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "tx_gi[%u] = %s ",
-				j, tx_gi[j]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_gi[j], NULL,
-				   HTT_TX_PEER_STATS_NUM_MCS_COUNTERS, "\n");
+		index = 0;
+		for (i = 0; i < HTT_TX_PEER_STATS_NUM_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i, htt_stats_buf->tx_gi[j][i]);
+
+		for (i = 0; i < HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i + HTT_TX_PEER_STATS_NUM_MCS_COUNTERS,
+					  htt_stats_buf->tx_gi_ext[j][i]);
+
+		len += scnprintf(buf + len, buf_len - len, "tx_gi[%u] = %s ", j, tx_gi[j]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_dcm, "tx_dcm",
@@ -933,6 +1168,7 @@ static inline void htt_print_rx_peer_rat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	u8 i, j;
+	u16 index = 0;
 	char *rssi_chain[HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS] = {NULL};
 	char *rx_gi[HTT_RX_PEER_STATS_NUM_GI_COUNTERS] = {NULL};
 
@@ -963,40 +1199,66 @@ static inline void htt_print_rx_peer_rat
 			 htt_stats_buf->rssi_comb);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_mcs, "rx_mcs",
-			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_nss, "rx_nss",
-			   HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_dcm, "rx_dcm",
+			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12:%u, 13:%u, 14:%u, 15:%u\n",
+			 htt_stats_buf->rx_mcs_ext[0], htt_stats_buf->rx_mcs_ext[1],
+			 htt_stats_buf->rx_mcs_ext_2[0], htt_stats_buf->rx_mcs_ext_2[1]);
+	len += scnprintf(buf + len, buf_len - len, "rx_nss = ");
+	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", (j + 1),
+				 htt_stats_buf->rx_nss[j]);
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_dcm, "\nrx_dcm",
 			   HTT_RX_PDEV_STATS_NUM_DCM_COUNTERS, "\n");
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_stbc, "rx_stbc",
-			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12:%u, 13:%u\n",
+			 htt_stats_buf->rx_stbc_ext[0], htt_stats_buf->rx_stbc_ext[1]);
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_bw, "rx_bw",
-			   HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
+			   HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "4:%u\n",
+			 htt_stats_buf->rx_bw_320mhz);
+	for (j = 0; j < HTT_RX_PEER_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
+		len += scnprintf(buf + len, buf_len - len, j == 0 ?
+				 "half_rx_bw = " : "quarter_rx_bw = ");
+		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->reduced_rx_bw[j], NULL,
+				   HTT_RX_PEER_STATS_NUM_BW_COUNTERS, "\n");
+	}
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "rssi_chain[%u] = %s\n",
-				 j, rssi_chain[j]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain[j], NULL,
-				   HTT_RX_PEER_STATS_NUM_BW_COUNTERS, "\n");
+		len += scnprintf(buf + len, buf_len - len, "rssi_chain[%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain[j],
+				   HTT_RX_PEER_STATS_NUM_BW_COUNTERS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "\nrssi_chain_ext[%u] = ", j);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain_ext[j], NULL,
-				   HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS, "\n");
+		len += scnprintf(buf + len, buf_len - len, "rssi_chain_ext[%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain_ext[j],
+				   HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "rx_gi[%u] = %s\n",
-				 j, rx_gi[j]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_gi[j], NULL,
-				   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-	}
+		memset(rx_gi[j], 0x0, HTT_MAX_STRING_LEN);
+		index = 0;
+		for (i = 0; i < HTT_RX_PEER_STATS_NUM_MCS_COUNTERS; i++)
+			index += snprintf(&rx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i, htt_stats_buf->rx_gi[j][i]);
+
+		for (i = 0; i < HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS; i++)
+			index += snprintf(&rx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i + HTT_RX_PEER_STATS_NUM_MCS_COUNTERS,
+					  htt_stats_buf->rx_gi_ext[j][i]);
 
+		len += scnprintf(buf + len, buf_len - len, "rx_gi[%u] = %s ", j, rx_gi[j]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
+	}
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_pream, "rx_pream",
 			   HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES, "\n");
 
-	len += scnprintf(buf + len, buf_len - len, "\nrx_ulofdma_non_data_ppdu = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "rx_ulofdma_non_data_ppdu = %u\n",
 			 htt_stats_buf->rx_ulofdma_non_data_ppdu);
 	len += scnprintf(buf + len, buf_len - len, "rx_ulofdma_data_ppdu = %u\n",
 			 htt_stats_buf->rx_ulofdma_data_ppdu);
@@ -1017,12 +1279,12 @@ static inline void htt_print_rx_peer_rat
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ul_fd_rssi, NULL,
 			   HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
 
-	len += scnprintf(buf + len, buf_len - len, "\nper_chain_rssi_pkt_type = %#x",
+	len += scnprintf(buf + len, buf_len - len, "per_chain_rssi_pkt_type = %#x\n",
 			 htt_stats_buf->per_chain_rssi_pkt_type);
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "\nrx_per_chain_rssi_in_dbm[%u] = ", j);
+				 "rx_per_chain_rssi_in_dbm[%u] = ", j);
 		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_BW_COUNTERS; i++)
 			len += scnprintf(buf + len,
 					 buf_len - len,
@@ -1031,6 +1293,18 @@ static inline void htt_print_rx_peer_rat
 					 htt_stats_buf->rx_per_chain_rssi_in_dbm[j][i]);
 		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
+
+	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "rx_per_chain_rssi_in_dbm_ext[%u] = ", j);
+		for (i = 0; i < HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS; i++)
+			len += scnprintf(buf + len,
+					 buf_len - len,
+					 " %u:%d,",
+					 i,
+					 htt_stats_buf->rx_per_chain_rssi_in_dbm_ext[j][i]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
+	}
 	stats_req->buf_len = len;
 
 fail:
@@ -1119,7 +1393,7 @@ htt_print_tx_hwq_stats_cmn_tlv(const voi
 	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__hwq_id__word);
 
 	/* TODO: HKDBG */
-	len += scnprintf(buf + len, buf_len - len, "HTT_TX_HWQ_STATS_CMN_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_HWQ_STATS_CMN_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
 			 u32_get_bits(mac_id_word, HTT_TX_HWQ_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "hwq_id = %u\n",
@@ -1162,7 +1436,7 @@ htt_print_tx_hwq_stats_cmn_tlv(const voi
 			 htt_stats_buf->mpdu_filt_cnt);
 	len += scnprintf(buf + len, buf_len - len, "false_mpdu_ack_count = %u\n",
 			 htt_stats_buf->false_mpdu_ack_count);
-	len += scnprintf(buf + len, buf_len - len, "txq_timeout = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "txq_timeout = %u\n\n",
 			 htt_stats_buf->txq_timeout);
 
 	stats_req->buf_len = len;
@@ -1301,6 +1575,7 @@ static inline void htt_print_tx_sounding
 						   struct debug_htt_stats_req *stats_req)
 {
 	s32 i;
+	s32 tag_len = 0;
 	const struct htt_tx_sounding_stats_tlv *htt_stats_buf = tag_buf;
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
@@ -1309,6 +1584,7 @@ static inline void htt_print_tx_sounding
 	const u32 *cbf_40 = htt_stats_buf->cbf_40;
 	const u32 *cbf_80 = htt_stats_buf->cbf_80;
 	const u32 *cbf_160 = htt_stats_buf->cbf_160;
+	const u32 *cbf_320 = htt_stats_buf->cbf_320;
 
 	if (htt_stats_buf->tx_sounding_mode == HTT_TX_AC_SOUNDING_MODE) {
 		len += scnprintf(buf + len, buf_len - len,
@@ -1392,6 +1668,219 @@ static inline void htt_print_tx_sounding
 					 htt_stats_buf->sounding[2],
 					 htt_stats_buf->sounding[3]);
 		}
+	} else if (htt_stats_buf->tx_sounding_mode == HTT_TX_BE_SOUNDING_MODE) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "\nHTT_TX_BE_SOUNDING_STATS_TLV:\n");
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_cbf_320 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_320[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_320[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_320[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_320[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_320[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS; i++) {
+			len += scnprintf(buf + len, buf_len - len,
+					 "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u, 320MHz: %u\n",
+					 i,
+					 htt_stats_buf->sounding[0],
+					 htt_stats_buf->sounding[1],
+					 htt_stats_buf->sounding[2],
+					 htt_stats_buf->sounding[3],
+					 htt_stats_buf->sounding_320[i]);
+		}
+	} else if (htt_stats_buf->tx_sounding_mode == HTT_TX_CMN_SOUNDING_MODE) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "\nCV UPLOAD HANDLER STATS:-\n");
+		len += scnprintf(buf + len, buf_len - len, "cv_nc_mismatch_err : %u\n",
+				 htt_stats_buf->cv_nc_mismatch_err);
+		len += scnprintf(buf + len, buf_len - len, "cv_fcs_err : %u\n",
+				 htt_stats_buf->cv_fcs_err);
+		len += scnprintf(buf + len, buf_len - len, "cv_frag_idx_mismatch : %u\n",
+				 htt_stats_buf->cv_frag_idx_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_invalid_peer_id : %u\n",
+				 htt_stats_buf->cv_invalid_peer_id);
+		len += scnprintf(buf + len, buf_len - len, "cv_no_txbf_setup : %u\n",
+				 htt_stats_buf->cv_no_txbf_setup);
+		len += scnprintf(buf + len, buf_len - len, "cv_expiry_in_update : %u\n",
+				 htt_stats_buf->cv_expiry_in_update);
+		len += scnprintf(buf + len, buf_len - len, "cv_pkt_bw_exceed : %u\n",
+				 htt_stats_buf->cv_pkt_bw_exceed);
+		len += scnprintf(buf + len, buf_len - len, "cv_dma_not_done_err : %u\n",
+				 htt_stats_buf->cv_dma_not_done_err);
+		len += scnprintf(buf + len, buf_len - len, "cv_update_failed : %u\n",
+				 htt_stats_buf->cv_update_failed);
+		len += scnprintf(buf + len, buf_len - len, "cv_dma_timeout_error : %u\n",
+				 htt_stats_buf->cv_dma_timeout_error);
+		len += scnprintf(buf + len, buf_len - len, "cv_buf_ibf_uploads : %u\n",
+				 htt_stats_buf->cv_buf_ibf_uploads);
+		len += scnprintf(buf + len, buf_len - len, "cv_buf_ebf_uploads : %u\n",
+				 htt_stats_buf->cv_buf_ebf_uploads);
+		len += scnprintf(buf + len, buf_len - len, "cv_buf_received : %u\n",
+				 htt_stats_buf->cv_buf_received);
+		len += scnprintf(buf + len, buf_len - len, "cv_buf_fed_back : %u\n",
+				 htt_stats_buf->cv_buf_fed_back);
+		len += scnprintf(buf + len, buf_len - len, "\nCV QUERY STATS:-\n");
+		len += scnprintf(buf + len, buf_len - len, "cv_total_query : %u\n",
+				 htt_stats_buf->cv_total_query);
+		len += scnprintf(buf + len, buf_len - len, "cv_total_pattern_query : %u\n",
+				 htt_stats_buf->cv_total_pattern_query);
+		len += scnprintf(buf + len, buf_len - len, "cv_total_bw_query : %u\n",
+				 htt_stats_buf->cv_total_bw_query);
+		len += scnprintf(buf + len, buf_len - len, "cv_invalid_bw_coding : %u\n",
+				 htt_stats_buf->cv_invalid_bw_coding);
+		len += scnprintf(buf + len, buf_len - len, "cv_forced_sounding : %u\n",
+				 htt_stats_buf->cv_forced_sounding);
+		len += scnprintf(buf + len, buf_len - len, "cv_standalone_sounding : %u\n",
+				 htt_stats_buf->cv_standalone_sounding);
+		len += scnprintf(buf + len, buf_len - len, "cv_nc_mismatch : %u\n",
+				 htt_stats_buf->cv_nc_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_fb_type_mismatch : %u\n",
+				 htt_stats_buf->cv_fb_type_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_ofdma_bw_mismatch : %u\n",
+				 htt_stats_buf->cv_ofdma_bw_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_bw_mismatch : %u\n",
+				 htt_stats_buf->cv_bw_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_pattern_mismatch : %u\n",
+				 htt_stats_buf->cv_pattern_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_preamble_mismatch : %u\n",
+				 htt_stats_buf->cv_preamble_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_nr_mismatch : %u\n",
+				 htt_stats_buf->cv_nr_mismatch);
+		len += scnprintf(buf + len, buf_len - len, "cv_in_use_cnt_exceeded : %u\n",
+				 htt_stats_buf->cv_in_use_cnt_exceeded);
+		len += scnprintf(buf + len, buf_len - len, "cv_ntbr_sounding : %u\n",
+				 htt_stats_buf->cv_ntbr_sounding);
+		len += scnprintf(buf + len, buf_len - len, "cv_found_upload_in_progress : %u\n",
+				 htt_stats_buf->cv_found_upload_in_progress);
+		len += scnprintf(buf + len, buf_len - len, "cv_expired_during_query : %u\n",
+				 htt_stats_buf->cv_expired_during_query);
+		len += scnprintf(buf + len, buf_len - len, "cv_found : %u\n",
+				 htt_stats_buf->cv_found);
+		len += scnprintf(buf + len, buf_len - len, "cv_not_found : %u\n",
+				 htt_stats_buf->cv_not_found);
+		len += scnprintf(buf + len, buf_len - len, "cv_total_query_ibf : %u\n",
+				 htt_stats_buf->cv_total_query_ibf);
+		len += scnprintf(buf + len, buf_len - len, "cv_found_ibf : %u\n",
+				 htt_stats_buf->cv_found_ibf);
+		len += scnprintf(buf + len, buf_len - len, "cv_not_found_ibf : %u\n",
+				 htt_stats_buf->cv_not_found_ibf);
+		len += scnprintf(buf + len, buf_len - len, "cv_expired_during_query_ibf : %u\n",
+				 htt_stats_buf->cv_expired_during_query_ibf);
+		len += scnprintf(buf + len, buf_len - len, "adaptive_snd_total_query : %u\n",
+				 htt_stats_buf->adaptive_snd_total_query);
+
+		tag_len = (HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS +
+				HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
+
+		len += scnprintf(buf + len, buf_len - len, "adaptive_snd_total_mcs_drop: ");
+		for (i = 0; i < tag_len; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %u:%u ",
+					 i, htt_stats_buf->adaptive_snd_total_mcs_drop[i]);
+
+		len += scnprintf(buf + len, buf_len - len, "\nadaptive_snd_kicked_in : %u\n",
+				 htt_stats_buf->adaptive_snd_kicked_in);
+		len += scnprintf(buf + len, buf_len - len, "adaptive_snd_back_to_default : %u\n",
+				 htt_stats_buf->adaptive_snd_back_to_default);
+
+	} else if (htt_stats_buf->tx_sounding_mode == HTT_TX_CV_CORR_MODE) {
+		len += scnprintf(buf + len, buf_len - len, "\nCV CORRELATION TRIGGER STATS:-\n");
+		len += scnprintf(buf + len, buf_len - len, "cv_corr_trigger_online_mode : %u\n",
+				 htt_stats_buf->cv_corr_trigger_online_mode);
+		len += scnprintf(buf + len, buf_len - len, "cv_corr_trigger_offline_mode : %u\n",
+				 htt_stats_buf->cv_corr_trigger_offline_mode);
+		len += scnprintf(buf + len, buf_len - len, "cv_corr_trigger_hybrid_mode : %u\n",
+				 htt_stats_buf->cv_corr_trigger_hybrid_mode);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_trigger_computation_level_0 : %u\n",
+				 htt_stats_buf->cv_corr_trigger_computation_level_0);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_trigger_computation_level_1 : %u\n",
+				 htt_stats_buf->cv_corr_trigger_computation_level_1);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_trigger_computation_level_2 : %u\n",
+				 htt_stats_buf->cv_corr_trigger_computation_level_2);
+
+		len += scnprintf(buf + len, buf_len - len, "cv_corr_trigger_num_users : ");
+		for (i = 0; i < HTT_TX_CV_CORR_MAX_NUM_COLUMNS; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %u_user: %u ",
+					 (i + 1), htt_stats_buf->cv_corr_trigger_num_users[i]);
+
+		len += scnprintf(buf + len, buf_len - len, "\ncv_corr_trigger_num_streams : ");
+		for (i = 0; i < HTT_TX_CV_CORR_MAX_NUM_COLUMNS; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %u_stream: %u ",
+					 (i + 1), htt_stats_buf->cv_corr_trigger_num_streams[i]);
+
+		len += scnprintf(buf + len, buf_len - len, "\n\nCV CORRELATION UPLOAD STATS:-\n");
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_total_buf_received : %u\n",
+				 htt_stats_buf->cv_corr_upload_total_buf_received);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_total_buf_fed_back : %u\n",
+				 htt_stats_buf->cv_corr_upload_total_buf_fed_back);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_total_processing_failed : %u\n",
+				 htt_stats_buf->cv_corr_upload_total_processing_failed);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_failed_total_users_zero : %u\n",
+				 htt_stats_buf->cv_corr_upload_failed_total_users_zero);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_failed_total_users_exceeded : %u\n",
+				 htt_stats_buf->cv_corr_upload_failed_total_users_exceeded);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_failed_peer_not_found : %u\n",
+				 htt_stats_buf->cv_corr_upload_failed_peer_not_found);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_user_nss_exceeded : %u\n",
+				 htt_stats_buf->cv_corr_upload_user_nss_exceeded);
+		len += scnprintf(buf + len, buf_len - len,
+				 "cv_corr_upload_invalid_lookup_index : %u\n",
+				 htt_stats_buf->cv_corr_upload_invalid_lookup_index);
+
+		len += scnprintf(buf + len, buf_len - len, "cv_corr_upload_total_num_users : ");
+		for (i = 0; i < HTT_TX_CV_CORR_MAX_NUM_COLUMNS; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %u_user: %u ", (i + 1),
+					 htt_stats_buf->cv_corr_upload_total_num_users[i]);
+
+		len += scnprintf(buf + len, buf_len - len, "\ncv_corr_upload_total_num_streams : ");
+		for (i = 0; i < HTT_TX_CV_CORR_MAX_NUM_COLUMNS; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %u_stream: %u ", (i + 1),
+					 htt_stats_buf->cv_corr_upload_total_num_streams[i]);
+
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	stats_req->buf_len = len;
@@ -1446,6 +1935,9 @@ htt_print_tx_selfgen_cmn_stats_tlv(const
 			 htt_stats_buf->su_sw_rts_flushed);
 	len += scnprintf(buf + len, buf_len - len, "su_sw_rts_rcvd_cts_diff_bw = %u\n",
 			 htt_stats_buf->su_sw_rts_rcvd_cts_diff_bw);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->smart_basic_trig_sch_histogram,
+			   "smart_basic_trig_sch_histogram",
+			   HTT_MAX_NUM_SBT_INTR, "\n");
 
 	stats_req->buf_len = len;
 }
@@ -1462,27 +1954,27 @@ htt_print_tx_selfgen_ac_stats_tlv(const
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_queued = %u\n",
 			   htt_stats_buf->ac_su_ndpa_queued);
-	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_tried = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_tried = %u\n",
 			   htt_stats_buf->ac_su_ndpa);
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_queued = %u\n",
 			   htt_stats_buf->ac_su_ndp_queued);
-	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_tried = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_tried = %u\n",
 			   htt_stats_buf->ac_su_ndp);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_queued = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndpa_queued);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_tried = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_tried = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndpa);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_queued = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndp_queued);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_tried = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_tried = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndp);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1_queued = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_1_queued);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1_tried = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1_tried = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_1);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2_queued = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_2_queued);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2_tried = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2_tried = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_2);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3_queued = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_3_queued);
@@ -1500,6 +1992,7 @@ htt_print_tx_selfgen_ax_stats_tlv(const
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u8 i;
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa_queued = %u\n",
@@ -1518,25 +2011,67 @@ htt_print_tx_selfgen_ax_stats_tlv(const
 			 htt_stats_buf->ax_mu_mimo_ndp_queued);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_tried = %u\n",
 			 htt_stats_buf->ax_mu_mimo_ndp);
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brpoll_queued,
-			   "ax_mu_mimo_brpollX_queued",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brpoll,
-			   "ax_mu_mimo_brpollX_tried",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpollX_queued = ");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", i + 1, htt_stats_buf->ax_mu_mimo_brpoll_queued[i]);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_ul_mumimo_trigger,
-			   "ax_ul_mumimo_trigger",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
-	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "\nax_mu_mimo_brpollX_tried = ");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", i + 1, htt_stats_buf->ax_mu_mimo_brpoll[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\nax_ul_mumimo_trigger = ");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", i + 1, htt_stats_buf->ax_ul_mumimo_trigger[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\nax_basic_trigger = %u\n",
 			 htt_stats_buf->ax_basic_trigger);
+	len += scnprintf(buf + len, buf_len - len, "ax_ulmumimo_total_trigger = %u\n",
+			 htt_stats_buf->ax_ulmumimo_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger = %u\n",
 			 htt_stats_buf->ax_bsr_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_bar_trigger = %u\n",
 			 htt_stats_buf->ax_mu_bar_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_rts_trigger = %u\n",
 			 htt_stats_buf->ax_mu_rts_trigger);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->combined_ax_bsr_trigger_tried,
+			   "combined_ax_bsr_trigger_tried",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->combined_ax_bsr_trigger_err,
+			   "combined_ax_bsr_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->standalone_ax_bsr_trigger_tried,
+			   "standalone_ax_bsr_trigger_tried",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->standalone_ax_bsr_trigger_err,
+			   "standalone_ax_bsr_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_ax_su_ulofdma_basic_trigger,
+			   "manual_ax_su_ulofdma_basic_trigger",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_ax_su_ulofdma_basic_trigger_err,
+			   "manual_ax_su_ulofdma_basic_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_ax_mu_ulofdma_basic_trigger,
+			   "manual_ax_mu_ulofdma_basic_trigger",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_ax_mu_ulofdma_basic_trigger_err,
+			   "manual_ax_mu_ulofdma_basic_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_basic_trigger_per_ac,
+			   "ax_basic_trigger_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_basic_trigger_errors_per_ac,
+			   "ax_basic_trigger_errors_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_bar_trigger_per_ac,
+			   "ax_mu_bar_trigger_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_bar_trigger_errors_per_ac,
+			   "ax_mu_bar_trigger_errors_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
 
 	stats_req->buf_len = len;
 }
@@ -1610,30 +2145,38 @@ htt_print_tx_selfgen_ax_err_stats_tlv(co
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_flushed = %u\n",
 			 htt_stats_buf->ax_mu_mimo_ndp_flushed);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brp_err,
-			   "ax_mu_mimo_brpX_err",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brpoll_flushed,
-			   "ax_mu_mimo_brpollX_flushed",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_mimo_brp_err,
+				 "ax_mu_mimo_brpX_err",
+				 HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_mimo_brpoll_flushed,
+				 "ax_mu_mimo_brpollX_flushed",
+				 HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, 1, "\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brp_err_num_cbf_received,
 			   "ax_mu_mimo_num_cbf_rcvd_on_brp_err",
 			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_ul_mumimo_trigger_err,
-			   "ax_ul_mumimo_trigger_err",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_ul_mumimo_trigger_err,
+				 "ax_ul_mumimo_trigger_err",
+				 HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, 1, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger_err = %u\n",
 			 htt_stats_buf->ax_basic_trigger_err);
+	len += scnprintf(buf + len, buf_len - len, "ax_ulmumimo_total_trigger_err = %u\n",
+			 htt_stats_buf->ax_ulmumimo_trigger_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger_err = %u\n",
 			 htt_stats_buf->ax_bsr_trigger_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_bar_trigger_err = %u\n",
 			 htt_stats_buf->ax_mu_bar_trigger_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_rts_trigger_err = %u\n",
 			 htt_stats_buf->ax_mu_rts_trigger_err);
+	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger_partial_resp = %u\n",
+			 htt_stats_buf->ax_basic_trigger_partial_resp);
+	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger_partial_resp = %u\n",
+			 htt_stats_buf->ax_bsr_trigger_partial_resp);
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_bar_trigger_partial_resp = %u\n",
+			 htt_stats_buf->ax_mu_bar_trigger_partial_resp);
 
 	stats_req->buf_len = len;
 }
@@ -1648,32 +2191,32 @@ void htt_print_tx_selfgen_ac_sched_statu
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "HTT_TX_SELFGEN_AC_SCHED_STATUS_STATS_TLV:");
+			 "HTT_TX_SELFGEN_AC_SCHED_STATUS_STATS_TLV:\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_su_ndpa_sch_status,
-			   "ac_su_ndpa_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_su_ndp_sch_status,
-			   "ac_su_ndp_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_ndpa_sch_status,
-			   "ac_mu_mimo_ndpa_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_ndp_sch_status,
-			   "ac_mu_mimo_ndp_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_brp_sch_status,
-			   "ac_mu_mimo_brp_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_su_ndp_sch_flag_err,
-			   "ac_su_ndp_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_ndp_sch_flag_err,
-			   "ac_mu_mimo_ndp_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_brp_sch_flag_err,
-			   "ac_mu_mimo_brp_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_su_ndpa_sch_status,
+				 "ac_su_ndpa_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_su_ndp_sch_status,
+				 "ac_su_ndp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_mu_mimo_ndpa_sch_status,
+				 "ac_mu_mimo_ndpa_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_mu_mimo_ndp_sch_status,
+				 "ac_mu_mimo_ndp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_mu_mimo_brp_sch_status,
+				 "ac_mu_mimo_brp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_su_ndp_sch_flag_err,
+				 "ac_su_ndp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_mu_mimo_ndp_sch_flag_err,
+				 "ac_mu_mimo_ndp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_mu_mimo_brp_sch_flag_err,
+				 "ac_mu_mimo_brp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
 
 	stats_req->buf_len = len;
 }
@@ -1688,44 +2231,44 @@ htt_print_tx_selfgen_ax_sched_status_sta
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "HTT_TX_SELFGEN_AX_SCHED_STATUS_STATS_TLV:");
+			 "HTT_TX_SELFGEN_AX_SCHED_STATUS_STATS_TLV:\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_su_ndpa_sch_status,
-			   "ax_su_ndpa_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_su_ndp_sch_status,
-			   "ax_su_ndp_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_ndpa_sch_status,
-			   "ax_mu_mimo_ndpa_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_ndp_sch_status,
-			   "ax_mu_mimo_ndp_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_brp_sch_status,
-			   "ax_mu_brp_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_bar_sch_status,
-			   "ax_mu_bar_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_basic_trig_sch_status,
-			   "ax_basic_trig_sch_status = %s ",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_su_ndp_sch_flag_err,
-			   "ax_su_ndp_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_ndp_sch_flag_err,
-			   "ax_mu_mimo_ndp_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_brp_sch_flag_err,
-			   "ax_mu_brp_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_bar_sch_flag_err,
-			   "ax_mu_bar_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_basic_trig_sch_flag_err,
-			   "ax_basic_trig_sch_flag_err = %s ",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_su_ndpa_sch_status,
+				 "ax_su_ndpa_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_su_ndp_sch_status,
+				 "ax_su_ndp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_mimo_ndpa_sch_status,
+				 "ax_mu_mimo_ndpa_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_mimo_ndp_sch_status,
+				 "ax_mu_mimo_ndp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_brp_sch_status,
+				 "ax_mu_brp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_bar_sch_status,
+				 "ax_mu_bar_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_basic_trig_sch_status,
+				 "ax_basic_trig_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_su_ndp_sch_flag_err,
+				 "ax_su_ndp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_mimo_ndp_sch_flag_err,
+				 "ax_mu_mimo_ndp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_brp_sch_flag_err,
+				 "ax_mu_brp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_bar_sch_flag_err,
+				 "ax_mu_bar_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_basic_trig_sch_flag_err,
+				 "ax_basic_trig_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
 
 	stats_req->buf_len = len;
 }
@@ -1782,14 +2325,17 @@ htt_print_tx_pdev_ul_mu_mimo_sch_stats_t
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u8 i;
 
-	len += scnprintf(buf + len, buf_len - len, "11ax UL MU_MIMO SCH STATS:\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_ul_mu_mimo_basic_sch_nusers,
-			   "ax_ul_mu_mimo_basic_sch_nusers",
-			   HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_ul_mu_mimo_brp_sch_nusers,
-			   "ax_ul_mu_mimo_brp_sch_nusers",
-			   HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "\n11ax UL MU_MIMO SCH STATS:\n");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS; i++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "ax_ul_mu_mimo_basic_sch_nusers_%u = %u\n", i,
+				 htt_stats_buf->ax_ul_mu_mimo_basic_sch_nusers[i]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "ax_ul_mu_mimo_brp_sch_nusers_%u = %u\n", i,
+				 htt_stats_buf->ax_ul_mu_mimo_brp_sch_nusers[i]);
+	}
 
 	stats_req->buf_len = len;
 }
@@ -1802,6 +2348,7 @@ htt_print_tx_pdev_dl_mu_mimo_sch_stats_t
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u8 i;
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "HTT_TX_PDEV_MU_MIMO_SCH_STATS_TLV:\n");
@@ -1812,22 +2359,45 @@ htt_print_tx_pdev_dl_mu_mimo_sch_stats_t
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
 			 htt_stats_buf->mu_mimo_ppdu_posted);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_sch_posted_per_grp_sz,
-			   "ac_mu_mimo_sch_posted_per_group_index",
-			   HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_sch_posted_per_grp_sz,
-			   "ax_mu_mimo_sch_posted_per_group_index",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "ac_mu_mimo_sch_posted_per_group_index %u = %u,\n",
+				 i, htt_stats_buf->ac_mu_mimo_sch_posted_per_grp_sz[i]);
 
-	len += scnprintf(buf + len, buf_len - len, "11ac DL MU_MIMO SCH STATS:\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_sch_nusers,
-			   "ac_mu_mimo_sch_nusers",
-			   HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS, "\n");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "ac_mu_mimo_sch_posted_per_group_index %u = %u,\n",
+				 i + HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS,
+				 htt_stats_buf->ac_mu_mimo_sch_posted_per_grp_sz_ext[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "ax_mu_mimo_sch_posted_per_group_index %u = %u,\n",
+				 i, htt_stats_buf->ax_mu_mimo_sch_posted_per_grp_sz[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_mu_mimo_sch_posted_per_group_index %u = %u,\n",
+				 i, htt_stats_buf->be_mu_mimo_sch_posted_per_grp_sz[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n11ac DL MU_MIMO SCH STATS:\n");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_sch_nusers_%u = %u\n", i,
+				 htt_stats_buf->ac_mu_mimo_sch_nusers[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\n11ax DL MU_MIMO SCH STATS:\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_sch_nusers,
-			   "ax_mu_mimo_sch_nusers",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_sch_nusers_%u = %u\n", i,
+				 htt_stats_buf->ax_mu_mimo_sch_nusers[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n11be DL MU_MIMO SCH STATS:\n");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_sch_nusers_%u = %u\n", i,
+				 htt_stats_buf->be_mu_mimo_sch_nusers[i]);
 
 	stats_req->buf_len = len;
 }
@@ -1925,10 +2495,11 @@ htt_print_tx_pdev_mu_mimo_sch_stats_tlv(
 		len += scnprintf(buf + len, buf_len - len,
 				 "ax_ul_ofdma_brp_sch_nusers_%u = %u\n",
 				 i, htt_stats_buf->ax_ul_ofdma_brp_sch_nusers[i]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "\n11ax UL MUMIMO SCH STATS:");
+			 "\n11ax UL MUMIMO SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS; i++) {
 		len += scnprintf(buf + len, buf_len - len,
@@ -1950,17 +2521,22 @@ void htt_print_tx_pdev_mumimo_grp_stats_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	int j;
+	int i, j;
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "HTT_TX_PDEV_MUMIMO_GRP_STATS:\n");
+			 "\nHTT_TX_PDEV_MUMIMO_GRP_STATS:\n\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->dl_mumimo_grp_best_grp_size,
 			   "dl_mumimo_grp_best_grp_size", HTT_STATS_MAX_MUMIMO_GRP_SZ,
 			   "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->dl_mumimo_grp_best_num_usrs,
-			   "dl_mumimo_grp_best_num_usrs",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "dl_mumimo_grp_best_num_usrs = ");
+	for (i = 1; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ",
+				 i, htt_stats_buf->dl_mumimo_grp_best_num_usrs[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->dl_mumimo_grp_tputs,
 			   "dl_mumimo_grp_tputs_observed (per bin = 300 mbps)",
 			   HTT_STATS_MUMIMO_TPUT_NUM_BINS, "\n");
@@ -1968,6 +2544,8 @@ void htt_print_tx_pdev_mumimo_grp_stats_
 			   "dl_mumimo_grp eligible", HTT_STATS_MAX_MUMIMO_GRP_SZ, "\n");
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->dl_mumimo_grp_ineligible,
 			   "dl_mumimo_grp_ineligible", HTT_STATS_MAX_MUMIMO_GRP_SZ, "\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "dl_mumimo_grp_invalid:\n");
 	for (j = 0; j < HTT_STATS_MAX_MUMIMO_GRP_SZ; j++) {
 		len += scnprintf(buf + len, buf_len - len, "grp_id = %u", j);
 		PRINT_ARRAY_TO_BUF(buf, len,
@@ -1978,9 +2556,14 @@ void htt_print_tx_pdev_mumimo_grp_stats_
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_mumimo_grp_best_grp_size,
 			   "ul_mumimo_grp_best_grp_size", HTT_STATS_MAX_MUMIMO_GRP_SZ,
 			   "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_mumimo_grp_best_num_usrs,
-			   "ul_mumimo_grp_best_num_usrs",
-			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "ul_mumimo_grp_best_num_usrs = ");
+	for (i = 1; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ",
+				 i, htt_stats_buf->ul_mumimo_grp_best_num_usrs[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_mumimo_grp_tputs,
 			   "ul_mumimo_grp_tputs_observed (per bin = 300 mbps)",
 			   HTT_STATS_MUMIMO_TPUT_NUM_BINS, "\n");
@@ -2000,7 +2583,7 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_MIMO_AC) {
 		if (!htt_stats_buf->user_index)
 			len += scnprintf(buf + len, buf_len - len,
-					 "HTT_TX_PDEV_MU_MIMO_AC_MPDU_STATS:\n");
+					 "\nHTT_TX_PDEV_MU_MIMO_AC_MPDU_STATS:\n\n");
 
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS) {
@@ -2032,13 +2615,14 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 					 "ac_mu_mimo_ampdu_underrun_usr_%u = %u\n",
 					 htt_stats_buf->user_index,
 					 htt_stats_buf->ampdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len, "\n");
 		}
 	}
 
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_MIMO_AX) {
 		if (!htt_stats_buf->user_index)
 			len += scnprintf(buf + len, buf_len - len,
-					 "HTT_TX_PDEV_MU_MIMO_AX_MPDU_STATS:\n");
+					 "HTT_TX_PDEV_MU_MIMO_AX_MPDU_STATS:\n\n");
 
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS) {
@@ -2070,13 +2654,53 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 					 "ax_mu_mimo_ampdu_underrun_usr_%u = %u\n",
 					 htt_stats_buf->user_index,
 					 htt_stats_buf->ampdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len, "\n");
+		}
+	}
+
+	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_MIMO_BE) {
+		if (!htt_stats_buf->user_index)
+			len += scnprintf(buf + len, buf_len - len,
+					 "HTT_TX_PDEV_MU_MIMO_BE_MPDU_STATS:\n\n");
+
+		if (htt_stats_buf->user_index <
+		    HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS) {
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_mimo_mpdus_queued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_queued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_mimo_mpdus_tried_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_tried_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_mimo_mpdus_failed_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_failed_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_mimo_mpdus_requeued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_requeued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_mimo_err_no_ba_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->err_no_ba_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_mimo_mpdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_mimo_ampdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->ampdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len, "\n");
 		}
 	}
 
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_OFDMA_AX) {
 		if (!htt_stats_buf->user_index)
 			len += scnprintf(buf + len, buf_len - len,
-					 "HTT_TX_PDEV_AX_MU_OFDMA_MPDU_STATS:\n");
+					 "HTT_TX_PDEV_AX_MU_OFDMA_MPDU_STATS:\n\n");
 
 		if (htt_stats_buf->user_index < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS) {
 			len += scnprintf(buf + len, buf_len - len,
@@ -2107,6 +2731,46 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 					 "ax_mu_ofdma_ampdu_underrun_usr_%u = %u\n",
 					 htt_stats_buf->user_index,
 					 htt_stats_buf->ampdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len, "\n");
+		}
+	}
+
+	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_OFDMA_BE) {
+		if (!htt_stats_buf->user_index)
+			len += scnprintf(buf + len, buf_len - len,
+					 "HTT_TX_PDEV_BE_MU_OFDMA_MPDU_STATS:\n\n");
+
+		if (htt_stats_buf->user_index <
+		    HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS) {
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_ofdma_mpdus_queued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_queued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_ofdma_mpdus_tried_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_tried_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_ofdma_mpdus_failed_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_failed_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_ofdma_mpdus_requeued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_requeued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_ofdma_err_no_ba_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->err_no_ba_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_ofdma_mpdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "be_mu_ofdma_ampdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->ampdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len, "\n");
 		}
 	}
 
@@ -2122,7 +2786,7 @@ htt_print_sched_txq_cmd_posted_tlv_v(con
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	u16 num_elements = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_SCHED_TX_MODE_MAX);
+	u16 num_elements = tag_len >> 2;
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_POSTED_TLV_V:\n");
 
@@ -2141,7 +2805,7 @@ htt_print_sched_txq_cmd_reaped_tlv_v(con
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	u16 num_elements = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_SCHED_TX_MODE_MAX);
+	u16 num_elements = tag_len >> 2;
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_REAPED_TLV_V:\n");
 
@@ -2301,8 +2965,7 @@ htt_print_tx_tqm_gen_mpdu_stats_tlv_v(co
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	u16 num_elements = min_t(u16, (tag_len >> 2),
-				 HTT_TX_TQM_MAX_LIST_MPDU_END_REASON);
+	u16 num_elements = tag_len >> 2;
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_GEN_MPDU_STATS_TLV_V:\n");
 
@@ -2459,6 +3122,22 @@ htt_print_tx_tqm_cmn_stats_tlv(const voi
 			 htt_stats_buf->hwsch_tqm_invalid_status);
 	len += scnprintf(buf + len, buf_len - len, "missed_tqm_gen_mpdus = %u\n",
 			 htt_stats_buf->missed_tqm_gen_mpdus);
+	len += scnprintf(buf + len, buf_len - len, "total_msduq_timestamp_updates = %u\n",
+			 htt_stats_buf->total_msduq_timestamp_updates);
+	len += scnprintf(buf + len, buf_len - len,
+			 "total_msduq_timestamp_updates_by_get_mpdu_head_info_cmd = %u\n",
+			 htt_stats_buf->total_msduq_timestamp_updates_by_get_mpdu_head_info_cmd);
+	len += scnprintf(buf + len, buf_len - len,
+			 "total_msduq_timestamp_updates_by_empty_to_nonempty_status = %u\n",
+			 htt_stats_buf->total_msduq_timestamp_updates_by_empty_to_nonempty_status);
+	len += scnprintf(buf + len, buf_len - len,
+			 "total_get_mpdu_head_info_cmds_by_sched_algo_la_query = %u\n",
+			 htt_stats_buf->total_get_mpdu_head_info_cmds_by_sched_algo_la_query);
+	len += scnprintf(buf + len, buf_len - len, "total_get_mpdu_head_info_cmds_by_tac = %u\n",
+			 htt_stats_buf->total_get_mpdu_head_info_cmds_by_tac);
+	len += scnprintf(buf + len, buf_len - len,
+			 "total_gen_mpdu_cmds_by_sched_algo_la_query = %u\n",
+			 htt_stats_buf->total_gen_mpdu_cmds_by_sched_algo_la_query);
 
 	if (tag_len > (offsetof(struct htt_tx_tqm_cmn_stats_tlv, tqm_active_tids) -
 		       offsetof(struct htt_tx_tqm_cmn_stats_tlv, mac_id__word))) {
@@ -2471,6 +3150,9 @@ htt_print_tx_tqm_cmn_stats_tlv(const voi
 				 htt_stats_buf->tqm_active_msduq_flows);
 	}
 
+	len += scnprintf(buf + len, buf_len - len, "hi_prio_q_not_empty = %u\n",
+			 htt_stats_buf->high_prio_q_not_empty);
+
 	stats_req->buf_len = len;
 }
 
@@ -2930,6 +3612,8 @@ htt_print_tx_de_cmn_stats_tlv(const void
 			 htt_stats_buf->invalid_vdev);
 	len += scnprintf(buf + len, buf_len - len, "invalid_tcl_exp_frame_desc = %u\n",
 			 htt_stats_buf->invalid_tcl_exp_frame_desc);
+	len += scnprintf(buf + len, buf_len - len, "vdev_id_mismatch_count = %u\n",
+			 htt_stats_buf->vdev_id_mismatch_cnt);
 
 	stats_req->buf_len = len;
 }
@@ -3153,10 +3837,11 @@ static inline void htt_print_tx_pdev_rat
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	u8 j;
+	u8 i, j;
 	char *tx_gi[HTT_TX_PEER_STATS_NUM_GI_COUNTERS] = {NULL};
 	u32 tx_bw[HTT_TX_PDEV_STATS_NUM_BW_COUNTERS + 1] = { 0 };
 	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
+	u16 index = 0;
 
 	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++) {
 		tx_gi[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -3181,6 +3866,8 @@ static inline void htt_print_tx_pdev_rat
 			 htt_stats_buf->rts_success);
 	len += scnprintf(buf + len, buf_len - len, "ack_rssi = %u\n",
 			 htt_stats_buf->ack_rssi);
+	len += scnprintf(buf + len, buf_len - len, "tx_11ax_su_ext = %u\n",
+			 htt_stats_buf->tx_11ax_su_ext);
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "Legacy CCK Rates: 1 Mbps: %u, 2 Mbps: %u, 5.5 Mbps: %u, 11 Mbps: %u\n",
@@ -3201,40 +3888,47 @@ static inline void htt_print_tx_pdev_rat
 			 htt_stats_buf->tx_legacy_ofdm_rate[6],
 			 htt_stats_buf->tx_legacy_ofdm_rate[7]);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs, "tx_mcs",
-			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs_ext, "tx_mcs_ext",
-			   HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "tx_mcs = -2:%u, -1:%u,",
+			 htt_stats_buf->tx_mcs_ext_2[0], htt_stats_buf->tx_mcs_ext_2[1]);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs, NULL,
+			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12: %u, 13: %u\n",
+			 htt_stats_buf->tx_mcs_ext[0], htt_stats_buf->tx_mcs_ext[1]);
+
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_mcs,
-			   "ac_mu_mimo_tx_mcs", HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_mcs_ext,
-			   "ac_mu_mimo_tx_mcs_ext",
-			   HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+			   "ac_mu_mimo_tx_mcs", HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12: %u, 13: %u\n",
+			 htt_stats_buf->ax_mu_mimo_tx_mcs_ext[0],
+			 htt_stats_buf->ax_mu_mimo_tx_mcs_ext[1]);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_mcs,
-			   "ax_mu_mimo_tx_mcs", HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+			   "ax_mu_mimo_tx_mcs", HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_mcs_ext,
-			   "ax_mu_mimo_tx_mcs_ext",
-			   HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "12: %u, 13: %u\n",
+			 htt_stats_buf->ax_mu_mimo_tx_mcs_ext[0],
+			 htt_stats_buf->ax_mu_mimo_tx_mcs_ext[1]);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_mcs, "ofdma_tx_mcs",
-			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_mcs_ext,
-			   "ofdma_tx_mcs_ext",
-			   HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "12: %u, 13: %u\n",
+			 htt_stats_buf->ofdma_tx_mcs_ext[0],
+			 htt_stats_buf->ofdma_tx_mcs_ext[1]);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_nss, "tx_nss",
-			   HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_nss,
-			   "ac_mu_mimo_tx_nss",
-			   HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_nss,
-			   "ax_mu_mimo_tx_nss",
-			   HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_nss, "ofdma_tx_nss",
-			   HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_he_sig_b_mcs,
+			   "ofdma_he_sig_b_mcs",
+			   HTT_TX_PDEV_STATS_NUM_HE_SIG_B_MCS_COUNTERS, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->tx_nss, "tx_nss",
+				 HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ac_mu_mimo_tx_nss,
+				 "ac_mu_mimo_tx_nss",
+				 HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ax_mu_mimo_tx_nss,
+				 "ax_mu_mimo_tx_nss",
+				 HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, 1, "\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->ofdma_tx_nss, "ofdma_tx_nss",
+				 HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, 1, "\n");
 
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; j++) {
 		tx_bw[j] = htt_stats_buf->tx_bw[j];
@@ -3251,7 +3945,10 @@ static inline void htt_print_tx_pdev_rat
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_bw, "ofdma_tx_bw",
 			   HTT_TX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_stbc, "tx_stbc",
-			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12: %u, 13: %u\n",
+			 htt_stats_buf->tx_stbc_ext[0],
+			 htt_stats_buf->tx_stbc_ext[1]);
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_pream, "tx_pream",
 			   HTT_TX_PDEV_STATS_NUM_PREAMBLE_TYPES, "\n");
 
@@ -3260,57 +3957,82 @@ static inline void htt_print_tx_pdev_rat
 			 htt_stats_buf->tx_he_ltf[2],
 			 htt_stats_buf->tx_he_ltf[3]);
 
+	len += scnprintf(buf + len, buf_len - len, "Extra LTF: %u\n", htt_stats_buf->extra_eht_ltf);
+
 	/* SU GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "tx_gi[%u] = %s\n",
-				 j, tx_gi[j]);
-		len += scnprintf(buf + len, buf_len - len, " -2:%u,-1:%u,",
-				 htt_stats_buf->tx_gi_ext_2[j][0],
-				 htt_stats_buf->tx_gi_ext_2[j][1]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_gi[j], NULL,
-				   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_gi_ext[j], NULL,
-				   HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+		index = 0;
+		index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index, " -2:%u,-1:%u,",
+				  htt_stats_buf->tx_gi_ext_2[j][0],
+				  htt_stats_buf->tx_gi_ext_2[j][1]);
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i, htt_stats_buf->tx_gi[j][i]);
+
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i + HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS,
+					  htt_stats_buf->tx_gi_ext[j][i]);
 
+		len += scnprintf(buf + len, buf_len - len, "tx_gi[%u] = %s\n", j, tx_gi[j]);
 	}
 
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
 	/* AC MU-MIMO GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len,
-				 "ac_mu_mimo_tx_gi[%u] = %s\n",
+		index = 0;
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i, htt_stats_buf->ac_mu_mimo_tx_gi[j][i]);
+
+		len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_tx_gi[%u] = %s\n",
 				 j, tx_gi[j]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_gi[j],
-				   NULL, HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_gi_ext[j],
-				   NULL, HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
 	}
 
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
 	/* AX MU-MIMO GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len,
-				 "ax_mu_mimo_tx_gi[%u] = %s\n",
+		index = 0;
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i, htt_stats_buf->ax_mu_mimo_tx_gi[j][i]);
+
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i + HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS,
+					  htt_stats_buf->ax_mu_mimo_tx_gi_ext[j][i]);
+
+		len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_tx_gi[%u] = %s\n",
 				 j, tx_gi[j]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_gi[j],
-				   NULL, HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_gi_ext[j],
-				   NULL, HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
 	}
 
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
 	/* DL OFDMA GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "ofdma_tx_gi[%u] = %s\n",
-				 j, tx_gi[j]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_gi[j], NULL,
-				   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_gi_ext[j],
-				   NULL, HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+		index = 0;
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i, htt_stats_buf->ofdma_tx_gi[j][i]);
+
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i + HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS,
+					  htt_stats_buf->ofdma_tx_gi_ext[j][i]);
+
+		len += scnprintf(buf + len, buf_len - len, "ofdma_tx_gi[%u] = %s\n", j, tx_gi[j]);
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_ru_size,
-			   "ofdma_tx_ru_size",
-			   HTT_TX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "\n");
+	len += scnprintf(buf + len, buf_len - len, "ofdma_tx_ru_size = ");
+	for (j = 0; j < HTT_TX_RX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS; j++)
+		len += scnprintf(buf + len, buf_len - len, " %s:%u ",
+				 htt_ax_tx_rx_ru_size_to_str(j),
+				 htt_stats_buf->ofdma_tx_ru_size[j]);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_dcm, "tx_dcm",
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_dcm, "\ntx_dcm",
 			   HTT_TX_PDEV_STATS_NUM_DCM_COUNTERS, "\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_su_punctured_mode,
@@ -3345,10 +4067,6 @@ static inline void htt_print_tx_pdev_rat
 				   HTT_TX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_he_sig_b_mcs,
-			   "ofdma_he_sig_b_mcs",
-			   HTT_TX_PDEV_STATS_NUM_HE_SIG_B_MCS_COUNTERS, "\n");
-
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->trigger_type_11ax,
 			   "11ax_trigger_type",
 			   HTT_TX_PDEV_STATS_NUM_11AX_TRIGGER_TYPES, "\n");
@@ -3383,6 +4101,7 @@ static inline void htt_print_rx_pdev_rat
 	char *rx_gi[HTT_RX_PDEV_STATS_NUM_GI_COUNTERS] = {NULL};
 	char *rx_pilot_evm_db[HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS] = {NULL};
 	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
+	char str_buf[HTT_MAX_STRING_LEN] = {0};
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		rssi_chain[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -3421,9 +4140,20 @@ static inline void htt_print_rx_pdev_rat
 			 htt_stats_buf->rssi_in_dbm);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_mcs, "rx_mcs",
-			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_nss, "rx_nss",
-			   HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
+			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, " ");
+	len += scnprintf(buf + len, buf_len - len, "12: %u, 13: %u\n",
+			 htt_stats_buf->rx_mcs_ext[0],
+			 htt_stats_buf->rx_mcs_ext[1]);
+
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0, j = 0; i < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
+		j += snprintf(&str_buf[j],
+			      HTT_MAX_STRING_LEN - j,
+			      " %u:%u,", i + 1,
+			      htt_stats_buf->rx_nss[i]);
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_nss = %s\n", str_buf);
+
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_dcm, "rx_dcm",
 			   HTT_RX_PDEV_STATS_NUM_DCM_COUNTERS, "\n");
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_stbc, "rx_stbc",
@@ -3488,6 +4218,21 @@ static inline void htt_print_rx_pdev_rat
 	len += scnprintf(buf + len, buf_len - len, "txbf = %u\n",
 			 htt_stats_buf->txbf);
 
+	len += scnprintf(buf + len, buf_len - len, "rx_su_ndpa = %u\n",
+			 htt_stats_buf->rx_su_ndpa);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_11ax_su_txbf_mcs,
+			   "rx_11ax_su_txbf_mcs", HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS,
+			   "\n");
+
+	len += scnprintf(buf + len, buf_len - len, "rx_mu_ndpa = %u\n",
+			 htt_stats_buf->rx_mu_ndpa);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_11ax_mu_txbf_mcs,
+			   "rx_11ax_mu_txbf_mcs", HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS,
+			   "\n");
+
+	len += scnprintf(buf + len, buf_len - len, "rx_br_poll = %u\n",
+			 htt_stats_buf->rx_br_poll);
+
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_legacy_cck_rate,
 			   "rx_legacy_cck_rate",
 			   HTT_RX_PDEV_STATS_NUM_LEGACY_CCK_STATS, "\n");
@@ -3508,16 +4253,21 @@ static inline void htt_print_rx_pdev_rat
 			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_gi[%u] = %s\n",
+		len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_gi[%u] = %s",
 				 j, rx_gi[j]);
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_gi[j], NULL,
 				   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
 
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_nss,
-			   "ul_ofdma_rx_nss",
-			   HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0, j = 0; i < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
+		j += snprintf(&str_buf[j],
+			      HTT_MAX_STRING_LEN - j,
+			      " %u:%u,", i + 1,
+			      htt_stats_buf->ul_ofdma_rx_nss[i]);
+	len += scnprintf(buf + len, buf_len - len,
+			 "ul_ofdma_rx_nss = %s\n", str_buf);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_bw, "ul_ofdma_rx_bw",
 			   HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
@@ -3540,6 +4290,15 @@ static inline void htt_print_rx_pdev_rat
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_mpdu_fail,
 			   "rx_ulofdma_mpdu_fail", HTT_RX_PDEV_MAX_OFDMA_NUM_USER, "\n");
 
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulmumimo_non_data_ppdu,
+			   "rx_ulmumimo_non_data_ppdu", HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulmumimo_data_ppdu,
+			   "rx_ulmumimo_data_ppdu", HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulmumimo_mpdu_ok,
+			   "rx_ulmumimo_mpdu_ok", HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulmumimo_mpdu_fail,
+			   "rx_ulmumimo_mpdu_fail", HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER, "\n");
+
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
 				 "rx_ul_fd_rssi: nss[%u] = ", j);
@@ -3596,17 +4355,6 @@ fail:
 		kfree(rx_gi[i]);
 }
 
-#define CHAIN_ARRAY_TO_BUF(out, buflen, arr, len)                         \
-	do {                                       \
-		int index = 0; u8 i;                           \
-		for (i = 0; i < len; i++) {                    \
-			index += scnprintf((out + buflen) + index,         \
-			(ATH12K_HTT_STATS_BUF_SIZE - buflen) - index,  \
-				" %u:%d,", i, arr[i]);           \
-		}                                  \
-		buflen += index;                           \
-	} while (0)
-
 static inline void htt_print_rx_pdev_rate_ext_stats_tlv(const void *tag_buf,
 						       struct debug_htt_stats_req *stats_req)
 {
@@ -3615,6 +4363,9 @@ static inline void htt_print_rx_pdev_rat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	u8 j=0, i;
+	u16 index;
+	char str_buf[HTT_MAX_STRING_LEN] = {0};
+
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_RATE_EXT_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "rssi_mcast_in_dbm = %d\n",
@@ -3623,38 +4374,70 @@ static inline void htt_print_rx_pdev_rat
 			 htt_stats_buf->rssi_mgmt_in_dbm);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
-		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS; i++)
-			len += scnprintf(buf + len,
-					 buf_len - len,
-					 " %u:%d,",
-					 i,
-					 htt_stats_buf->rx_per_chain_rssi_ext_in_dbm[j][i]);
-		len += scnprintf(buf + len, buf_len - len, "\nrssi_chain_ext[%u] = ", j);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain_ext[j],
-				   NULL, HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS, "\n");
+		len += scnprintf(buf + len, buf_len - len, "rssi_chain_ext[%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain_ext[j],
+				   HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "\nrx_per_chain_rssi_ext_in_dbm[%u] = ", j);
+				 "rx_per_chain_rssi_ext_in_dbm[%u] = ", j);
 		CHAIN_ARRAY_TO_BUF(buf, len,
 				   htt_stats_buf->rx_per_chain_rssi_ext_in_dbm[j],
 				   HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS);
 		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_mcs_ext,
-			   "rx_mcs_ext", HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT, "\n");
+	index = 0;
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+
+	index += snprintf(&str_buf[index], HTT_MAX_STRING_LEN - index, " -2:%u,-1:%u",
+			  htt_stats_buf->rx_mcs_ext_2[0],
+			  htt_stats_buf->rx_mcs_ext_2[1]);
+	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT; i++)
+		index += snprintf(&str_buf[index],
+				  HTT_MAX_STRING_LEN - index, " %u:%u,", i,
+				  htt_stats_buf->rx_mcs_ext[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "rx_mcs_ext = %s\n", str_buf);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_stbc_ext,
 			   "rx_stbc_ext", HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT, "\n");
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "rx_gi_ext[%u] = ", j);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_gi_ext[j],
-				   NULL, HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT, "\n");
+		index = 0;
+		memset(&str_buf[index], 0x0, HTT_MAX_STRING_LEN);
+		index += snprintf(&str_buf[index], HTT_MAX_STRING_LEN - index, " -2:%u,-1:%u",
+				  htt_stats_buf->rx_gi_ext_2[j][0],
+				  htt_stats_buf->rx_gi_ext_2[j][1]);
+		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT; i++)
+			index += snprintf(&str_buf[index],
+					  HTT_MAX_STRING_LEN - index, " %u:%u,", i,
+					  htt_stats_buf->rx_gi_ext[j][i]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "rx_gi_ext[%u] = %s\n", j, str_buf);
 	}
 
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_bw_ext,
+			   "rx_bw_ext",
+			   HTT_RX_PDEV_STATS_NUM_BW_EXT2_COUNTERS, "\n");
+
+	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
+		len += scnprintf(buf + len, buf_len - len, j == 0 ?
+				 "half_rx_bw = " :
+				 "quarter_rx_bw = ");
+		PRINT_ARRAY_TO_BUF(buf, len,
+				   htt_stats_buf->reduced_rx_bw[j],
+				   NULL, HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
+	}
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_su_punctured_mode,
+			   "rx_su_punctured_mode",
+			   HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_COUNTERS, "\n");
+
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_mcs_ext,
 			   "ul_ofdma_rx_mcs_ext",
 			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT, "\n");
@@ -3678,23 +4461,6 @@ static inline void htt_print_rx_pdev_rat
 			   "rx_11ax_dl_ofdma_mcs_ext",
 			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT, "\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_bw_ext,
-			   "rx_bw_ext",
-			   HTT_RX_PDEV_STATS_NUM_BW_EXT2_COUNTERS, "\n");
-
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
-		len += scnprintf(buf + len, buf_len - len, j == 0 ?
-				 "half_rx_bw = " :
-				 "quarter_rx_bw = ");
-		PRINT_ARRAY_TO_BUF(buf, len,
-				   htt_stats_buf->reduced_rx_bw[j],
-				   NULL, HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
-	}
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_su_punctured_mode,
-			   "rx_su_punctured_mode",
-			   HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_COUNTERS, "\n");
-
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
 				 "rssi_chain_ext_2[%u] = ",j);
@@ -3703,7 +4469,7 @@ static inline void htt_print_rx_pdev_rat
 				   NULL, HTT_RX_PDEV_STATS_NUM_BW_EXT_2_COUNTERS, "\n");
 	}
 
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
+	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
 				 "rx_per_chain_rssi_ext_2_in_dbm[%u] = ", j);
 		CHAIN_ARRAY_TO_BUF(buf, len,
@@ -3899,6 +4665,10 @@ static inline void htt_print_rx_pdev_fw_
 			 htt_stats_buf->other_msdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_mpdu_ind = %u\n",
 			 htt_stats_buf->fw_ring_mpdu_ind);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->fw_ring_mgmt_subtype,
+			   "fw_ring_mgmt_subtype", HTT_STATS_SUBTYPE_MAX, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->fw_ring_ctrl_subtype,
+			   "fw_ring_ctrl_subtype", HTT_STATS_SUBTYPE_MAX, "\n");
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_mcast_data_msdu = %u\n",
 			 htt_stats_buf->fw_ring_mcast_data_msdu);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_bcast_data_msdu = %u\n",
@@ -4055,9 +4825,9 @@ htt_print_pdev_cca_stats_hist_tlv(const
 			 htt_stats_buf->collection_interval);
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "HTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)\n");
+			 "\nHTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)\n");
 	len += scnprintf(buf + len, buf_len - len,
-			 "|  tx_frame|   rx_frame|   rx_clear| my_rx_frame|        cnt| med_rx_idle| med_tx_idle_global|   cca_obss|");
+			 "|  tx_frame|   rx_frame|   rx_clear| my_rx_frame|pre_rx_frame|        cnt| med_rx_idle| med_tx_idle_global|   cca_obss|\n");
 
 	stats_req->buf_len = len;
 }
@@ -4072,11 +4842,12 @@ htt_print_pdev_stats_cca_counters_tlv(co
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|\n",
+			 "|%10u| %10u| %10u| %11u|%12u| %10u| %11u| %18u| %10u|\n",
 			 htt_stats_buf->tx_frame_usec,
 			 htt_stats_buf->rx_frame_usec,
 			 htt_stats_buf->rx_clear_usec,
 			 htt_stats_buf->my_rx_frame_usec,
+			 htt_stats_buf->pre_rx_frame_usec,
 			 htt_stats_buf->usec_cnt,
 			 htt_stats_buf->med_rx_idle_usec,
 			 htt_stats_buf->med_tx_idle_global_usec,
@@ -4186,6 +4957,12 @@ htt_print_pdev_obss_pd_stats_tlv_v(const
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	char *access_cat_names[HTT_NUM_AC_WMM] = {
+		"best effort",
+		"background",
+		"video",
+		"voice",
+	};
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_OBSS_PD_STATS_TLV:\n");
 	/*
@@ -4203,12 +4980,37 @@ htt_print_pdev_obss_pd_stats_tlv_v(const
 			 htt_stats_buf->num_non_srg_ppdu_tried);
 	len += scnprintf(buf + len, buf_len - len, "num_non_srg_ppdu_success = %u\n",
 			 htt_stats_buf->num_non_srg_ppdu_success);
+	len += scnprintf(buf + len, buf_len - len, "num_srg_opportunities = %u\n",
+			 htt_stats_buf->num_srg_opportunities);
+	len += scnprintf(buf + len, buf_len - len, "num_srg_ppdu_tried = %u\n",
+			 htt_stats_buf->num_srg_ppdu_tried);
+	len += scnprintf(buf + len, buf_len - len, "num_srg_ppdu_success = %u\n",
+			 htt_stats_buf->num_srg_ppdu_success);
 	len += scnprintf(buf + len, buf_len - len, "num_psr_opportunities = %u\n",
 			 htt_stats_buf->num_psr_opportunities);
 	len += scnprintf(buf + len, buf_len - len, "num_psr_ppdu_tried = %u\n",
 			 htt_stats_buf->num_psr_ppdu_tried);
 	len += scnprintf(buf + len, buf_len - len, "num_psr_ppdu_success = %u\n",
 			 htt_stats_buf->num_psr_ppdu_success);
+	len += scnprintf(buf + len, buf_len - len, "min_duration_check_flush_cnt = %u\n",
+			 htt_stats_buf->num_obss_min_duration_check_flush_cnt);
+	len += scnprintf(buf + len, buf_len - len, "sr_ppdu_abort_flush_cnt = %u\n",
+			 htt_stats_buf->num_sr_ppdu_abort_flush_cnt);
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_OBSS_PD_PER_AC_STATS:\n");
+
+	for (u8 i = 0; i < HTT_NUM_AC_WMM; i++) {
+		len += scnprintf(buf + len, buf_len - len, "Access Category %u (%s)\n",
+				 i, access_cat_names[i]);
+		len += scnprintf(buf + len, buf_len - len, "num_non_srg_ppdu_tried = %u\n",
+				 htt_stats_buf->num_non_srg_ppdu_tried_per_ac[i]);
+		len += scnprintf(buf + len, buf_len - len, "num_non_srg_ppdu_success = %u\n",
+				 htt_stats_buf->num_non_srg_ppdu_success_per_ac[i]);
+		len += scnprintf(buf + len, buf_len - len, "num_srg_ppdu_tried = %u\n",
+				 htt_stats_buf->num_srg_ppdu_tried_per_ac[i]);
+		len += scnprintf(buf + len, buf_len - len, "num_srg_ppdu_success = %u\n",
+				 htt_stats_buf->num_srg_ppdu_success_per_ac[i]);
+	}
 
 	stats_req->buf_len = len;
 }
@@ -4262,6 +5064,7 @@ htt_print_tx_selfgen_be_stats_tlv(const
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u8 i;
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "HTT_TX_SELFGEN_BE_STATS_TLV:\n");
@@ -4286,20 +5089,23 @@ htt_print_tx_selfgen_be_stats_tlv(const
 			 "be_mu_mimo_ndp_tried = %u\n",
 			 htt_stats_buf->be_mu_mimo_ndp);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_brpoll_queued,
-			   "be_mu_mimo_brpollX_queued",
-			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1, "\n\n");
+	len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_brpollX_queued = ");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", i + 1, htt_stats_buf->be_mu_mimo_brpoll_queued[i]);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_brpoll,
-			   "be_mu_mimo_brpollX_tried",
-			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1, "\n\n");
+	len += scnprintf(buf + len, buf_len - len, "\nbe_mu_mimo_brpollX_tried = ");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", i + 1, htt_stats_buf->be_mu_mimo_brpoll[i]);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_ul_mumimo_trigger,
-			   "be_ul_mumimo_trigger",
-			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS, "\n\n");
+	len += scnprintf(buf + len, buf_len - len, "\nbe_ul_mumimo_trigger = ");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", i + 1, htt_stats_buf->be_ul_mumimo_trigger[i]);
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "be_basic_trigger = %u\n",
+			 "\nbe_basic_trigger = %u\n",
 			 htt_stats_buf->be_basic_trigger);
 	len += scnprintf(buf + len, buf_len - len,
 			 "be_ulmumimo_total_trigger = %u\n",
@@ -4310,6 +5116,42 @@ htt_print_tx_selfgen_be_stats_tlv(const
 			 htt_stats_buf->be_mu_bar_trigger);
 	len += scnprintf(buf + len, buf_len - len, "be_mu_rts_trigger = %u\n",
 			 htt_stats_buf->be_mu_rts_trigger);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->combined_be_bsr_trigger_tried,
+			   "combined_be_bsr_trigger_tried",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->combined_be_bsr_trigger_err,
+			   "combined_be_bsr_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->standalone_be_bsr_trigger_tried,
+			   "standalone_be_bsr_trigger_tried",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->standalone_be_bsr_trigger_err,
+			   "standalone_be_bsr_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_be_su_ulofdma_basic_trigger,
+			   "manual_be_su_ulofdma_basic_trigger",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_be_su_ulofdma_basic_trigger_err,
+			   "manual_be_su_ulofdma_basic_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_be_mu_ulofdma_basic_trigger,
+			   "manual_be_mu_ulofdma_basic_trigger",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->manual_be_mu_ulofdma_basic_trigger_err,
+			   "manual_be_mu_ulofdma_basic_trigger_err",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_basic_trigger_per_ac,
+			   "be_basic_trigger_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_basic_trigger_errors_per_ac,
+			   "be_basic_trigger_errors_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_bar_trigger_per_ac,
+			   "be_mu_bar_trigger_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_bar_trigger_errors_per_ac,
+			   "be_mu_bar_trigger_errors_per_ac",
+			   HTT_NUM_AC_WMM, "\n");
 
 	stats_req->buf_len = len;
 }
@@ -4326,53 +5168,53 @@ htt_print_tx_selfgen_be_sched_status_sta
 	len += scnprintf(buf + len, buf_len - len,
 			 "HTT_TX_SELFGEN_BE_SCHED_STATUS_STATS_TLV:\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_su_ndpa_sch_status,
-			   "be_su_ndpa_sch_status",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_su_ndp_sch_status,
-			   "be_su_ndp_sch_status",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_ndpa_sch_status,
-			   "be_mu_mimo_ndpa_sch_status",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_ndp_sch_status,
-			   "be_mu_mimo_ndp_sch_status",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_brp_sch_status,
-			   "be_mu_brp_sch_status",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_bar_sch_status,
-			   "be_mu_bar_sch_status",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_basic_trig_sch_status,
-			   "be_basic_trig_sch_status",
-			   HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_su_ndp_sch_flag_err,
-			   "be_su_ndp_sch_flag_er",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_ndp_sch_flag_err,
-			   "be_mu_mimo_ndp_sch_flag_err",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_brp_sch_flag_err,
-			   "be_mu_brp_sch_flag_err",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_bar_sch_flag_err,
-			   "be_mu_bar_sch_flag_err",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_basic_trig_sch_flag_err,
-			   "be_basic_trig_sch_flag_err",
-			   HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, "\n\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_su_ndpa_sch_status,
+				 "be_su_ndpa_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_su_ndp_sch_status,
+				 "be_su_ndp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_mimo_ndpa_sch_status,
+				 "be_mu_mimo_ndpa_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_mimo_ndp_sch_status,
+				 "be_mu_mimo_ndp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_brp_sch_status,
+				 "be_mu_brp_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_bar_sch_status,
+				 "be_mu_bar_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_basic_trig_sch_status,
+				 "be_basic_trig_sch_status",
+				 HTT_TX_PDEV_STATS_NUM_TX_ERR_STATUS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_su_ndp_sch_flag_err,
+				 "be_su_ndp_sch_flag_er",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_mimo_ndp_sch_flag_err,
+				 "be_mu_mimo_ndp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_brp_sch_flag_err,
+				 "be_mu_brp_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_bar_sch_flag_err,
+				 "be_mu_bar_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_basic_trig_sch_flag_err,
+				 "be_basic_trig_sch_flag_err",
+				 HTT_TX_SELFGEN_NUM_SCH_TSFLAG_ERROR_STATS, 1, "\n");
 
 
 	stats_req->buf_len = len;
@@ -4412,6 +5254,7 @@ htt_print_tx_pdev_be_rate_stats_tlv(cons
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u16 index = 0;
 
 	for (i = 0; i < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; i++) {
 		tx_gi[i] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -4421,31 +5264,35 @@ htt_print_tx_pdev_be_rate_stats_tlv(cons
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "HTT_TX_PDEV_BE_RATE_STATS_TLV:\n");
-	len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_tx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_tx_ldpc = %u\n",
 			 htt_stats_buf->be_mu_mimo_tx_ldpc);
 
 	/* MCS -2 and -1 will be printed first */
-	len += scnprintf(buf + len, buf_len - len, " -2:%u,-1:%u,",
-		htt_stats_buf->be_mu_mimo_tx_mcs[HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS-2],
-		htt_stats_buf->be_mu_mimo_tx_mcs[HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS-1]);
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_tx_mcs,
-			   "be_mu_mimo_tx_mcs",
-			   HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS, "\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_tx_nss,
-			   "be_mu_mimo_tx_nss",
-			   HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_tx_mcs = -2:%u, -1:%u,",
+			 htt_stats_buf->be_mu_mimo_tx_mcs
+			 [HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 2],
+			 htt_stats_buf->be_mu_mimo_tx_mcs
+			 [HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 1]);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_tx_mcs, NULL,
+			   HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 2, "\n");
+
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_mimo_tx_nss,
+				 "be_mu_mimo_tx_nss",
+				 HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, 1, "\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_tx_bw,
 			   "be_mu_mimo_tx_bw",
 			   HTT_TX_PDEV_STATS_NUM_BE_BW_COUNTERS, "\n");
 
+	/* BE MU-MIMO GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len,
-				 "be_mu_mimo_tx_gi[%u] = %s ", j, tx_gi[j]);
-		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_tx_gi[j],
-				   NULL, HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS, "\n");
+		index = 0;
+		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS; i++)
+			index += snprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					  " %u:%u,", i, htt_stats_buf->be_mu_mimo_tx_gi[j][i]);
+
+		len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_tx_gi[%u] = %s\n",
+				 j, tx_gi[j]);
 	}
 
 	if (len >= buf_len)
@@ -4495,13 +5342,15 @@ static inline void
 htt_print_ul_mumimo_trig_be_stats(const void *tag_buf,
 				  struct debug_htt_stats_req *stats_req)
 {
-	const struct htt_rx_pdev_ul_mumimo_trig_be_stats_tlv *htt_ul_mumimo_trig_be_stats_buf = tag_buf;
+	const struct htt_rx_pdev_ul_mumimo_trig_be_stats_tlv *htt_ulmimo_tri_be_stat_buf = tag_buf;
 	char *rx_gi[HTT_RX_PDEV_STATS_NUM_GI_COUNTERS];
 	u8 i, j;
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	u32 mac_id_word = __le32_to_cpu(htt_ul_mumimo_trig_be_stats_buf->mac_id__word);
+	u32 mac_id_word = __le32_to_cpu(htt_ulmimo_tri_be_stat_buf->mac_id__word);
+	u16 index;
+	char str_buf[HTT_MAX_STRING_LEN] = {0};
 
 	for (i = 0; i < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; i++) {
 		rx_gi[i] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -4515,82 +5364,107 @@ htt_print_ul_mumimo_trig_be_stats(const
 			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 
 	len += scnprintf(buf + len, buf_len - len, "rx_11be_ul_mumimo = %u\n",
-			 htt_ul_mumimo_trig_be_stats_buf->rx_11be_ul_mumimo);
+			 htt_ulmimo_tri_be_stat_buf->rx_11be_ul_mumimo);
 
 	/* TODO: Check if enough space is present before writing BE MCS Counters */
 	/* MCS -2 and -1 will be printed first */
 
-	len += scnprintf(buf + len, buf_len - len, " -2:%u,-1:%u\n",
-		htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_mcs[HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS-2],
-		htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_mcs[HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS-1]);
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_mcs,
-			   "be_ul_mumimo_rx_mcs",
-			   HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 2, "\n\n");
+	index = 0;
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, " -2:%u,-1:%u\n",
-			htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_gi[j][HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS-2],
-			htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_gi[j][HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS-1]);
+	index += snprintf(&str_buf[index], HTT_MAX_STRING_LEN - index, " -2:%u,-1:%u",
+			  htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_mcs
+			  [HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 2],
+			  htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_mcs
+			  [HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 1]);
+	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 2; i++)
+		index += snprintf(&str_buf[index],
+				  HTT_MAX_STRING_LEN - index, " %u:%u,", i,
+				  htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_mcs[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ul_mumimo_rx_mcs = %s\n", str_buf);
 
-		PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_gi[j],
-				   NULL, HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS-2, "\n\n");
+	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
+		index = 0;
+		memset(&str_buf[index], 0x0, HTT_MAX_STRING_LEN);
+		index += snprintf(&str_buf[index], HTT_MAX_STRING_LEN - index, " -2:%u,-1:%u",
+				  htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_gi[j]
+				  [HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 2],
+				  htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_gi[j]
+				  [HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 1]);
+		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS - 2; i++)
+			index += snprintf(&str_buf[index],
+					  HTT_MAX_STRING_LEN - index, " %u:%u,", i,
+					  htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_gi[j][i]);
 
 		len += scnprintf(buf + len, buf_len - len,
-				 "be_ul_mumimo_rx_gi[%u] = %s ", j, rx_gi[j]);
+				 "be_ul_mumimo_rx_gi[%u] = %s\n", j, str_buf);
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_nss,
-			   "be_ul_mumimo_rx_nss",
-			   HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS, "\n\n");
+	index = 0;
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0; i < HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS; i++)
+		index += snprintf(&str_buf[index],
+				  HTT_MAX_STRING_LEN - index, " %u:%u,", i + 1,
+				  htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_nss[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ul_mumimo_rx_nss = %s\n", str_buf);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_bw,
+	PRINT_ARRAY_TO_BUF(buf, len, htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_bw,
 			   "be_ul_mumimo_rx_bw",
-			   HTT_RX_PDEV_STATS_NUM_BE_BW_COUNTERS, "\n\n");
+			   HTT_RX_PDEV_STATS_NUM_BE_BW_COUNTERS, "\n");
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "be_ul_mumimo_rx_stbc = %u\n",
-			 htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_stbc);
+			 htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_stbc);
 	len += scnprintf(buf + len, buf_len - len,
 			 "be_ul_mumimo_rx_ldpc = %u\n",
-			 htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_ldpc);
+			 htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_rx_ldpc);
 
-	for (i = 0; i < HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS; i++) {
-		PRINT_ARRAY_TO_BUF(buf, len,
-				   htt_ul_mumimo_trig_be_stats_buf->be_rx_ul_mumimo_chain_rssi_in_dbm[i],
-				   NULL, HTT_RX_PDEV_STATS_NUM_BE_BW_COUNTERS, "\n\n");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_ulmimo_tri_be_stat_buf->rx_ul_mumimo_punctured_mode,
+			   "rx_ul_mumimo_punctured_mode",
+			   HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_COUNTERS, "\n");
+
+	for (j = 0; j < HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "be_rx_ul_mumimo_rssi_in_dbm: chain[%u] = %s ",
-				 i, htt_ul_mumimo_trig_be_stats_buf->be_rx_ul_mumimo_chain_rssi_in_dbm[i]);
+				 "be_rx_ul_mumimo_rssi_in_dbm: chain[%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
+				   htt_ulmimo_tri_be_stat_buf->be_rx_ul_mumimo_chain_rssi_in_dbm[j],
+				   HTT_RX_PDEV_STATS_NUM_BE_BW_COUNTERS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
-	for (i = 0; i < HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER; i++) {
-		PRINT_ARRAY_TO_BUF(buf, len,
-				   htt_ul_mumimo_trig_be_stats_buf->be_rx_ul_mumimo_target_rssi[i],
-				   NULL, HTT_RX_PDEV_STATS_NUM_BE_BW_COUNTERS, "\n\n");
+	for (j = 0; j < HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "be_rx_ul_mumimo_target_rssi: user[%u] = %s ",
-				 i, htt_ul_mumimo_trig_be_stats_buf->be_rx_ul_mumimo_target_rssi[i]);
+				 "be_rx_ul_mumimo_target_rssi: user[%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
+				   htt_ulmimo_tri_be_stat_buf->be_rx_ul_mumimo_target_rssi[j],
+				   HTT_RX_PDEV_STATS_NUM_BE_BW_COUNTERS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
-	for (i = 0; i < HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER; i++) {
-		PRINT_ARRAY_TO_BUF(buf, len,
-				htt_ul_mumimo_trig_be_stats_buf->be_rx_ul_mumimo_fd_rssi[i],
-				NULL, HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS, "\n\n");
+	for (j = 0; j < HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "be_rx_ul_mumimo_fd_rssi: user[%u] = %s ",
-				 i, htt_ul_mumimo_trig_be_stats_buf->be_rx_ul_mumimo_fd_rssi[i]);
+				 "be_rx_ul_mumimo_fd_rssi: user[%u] =  ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
+				   htt_ulmimo_tri_be_stat_buf->be_rx_ul_mumimo_fd_rssi[j],
+				   HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
-	for (i = 0; i < HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER; i++) {
-		PRINT_ARRAY_TO_BUF(buf, len,
-				htt_ul_mumimo_trig_be_stats_buf->be_rx_ulmumimo_pilot_evm_dB_mean[i],
-				NULL, HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS, "\n\n");
+	for (j = 0; j < HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "be_rx_ulmumimo_pilot_evm_dB_mean: user [%u] = %s ",
-				 i, htt_ul_mumimo_trig_be_stats_buf->be_rx_ulmumimo_pilot_evm_dB_mean[i]);
+				 "be_rx_ulmumimo_pilot_evm_dB_mean: user [%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
+				   htt_ulmimo_tri_be_stat_buf->be_rx_ulmumimo_pilot_evm_dB_mean[j],
+				   HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
-	len += scnprintf(buf + len, buf_len - len, "\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ul_mumimo_basic_trigger_rx_qos_null_only = %u\n",
+			 htt_ulmimo_tri_be_stat_buf->be_ul_mumimo_basic_trigger_rx_qos_null_only);
 
 	stats_req->buf_len = len;
 fail:
@@ -4599,6 +5473,78 @@ fail:
 }
 
 static inline void
+htt_print_rx_fw_ring_stats(const void *tag_buf,
+			   struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_stats_rx_ring_stats_tlv *htt_ring_stats_buf = tag_buf;
+	u8 *buf =  stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_FW_RING_STATUS_TLV_V:\n");
+
+	len += scnprintf(buf + len, buf_len - len, "SW2RXDMA\n");
+	len += scnprintf(buf + len, buf_len - len, "max_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_SIZE_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_sw2rxdma));
+	len += scnprintf(buf + len, buf_len - len, "curr_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_CURR_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_sw2rxdma));
+
+	len += scnprintf(buf + len, buf_len - len, "RXDMA2REO\n");
+	len += scnprintf(buf + len, buf_len - len, "max_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_SIZE_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_rxdma2reo));
+	len += scnprintf(buf + len, buf_len - len, "curr_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_CURR_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_rxdma2reo));
+
+	len += scnprintf(buf + len, buf_len - len, "REO2SW1");
+	len += scnprintf(buf + len, buf_len - len, "max_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_SIZE_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_reo2sw1));
+	len += scnprintf(buf + len, buf_len - len, "curr_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_CURR_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_reo2sw1));
+
+	len += scnprintf(buf + len, buf_len - len, "REO2SW4");
+	len += scnprintf(buf + len, buf_len - len, "max_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_SIZE_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_reo2sw4));
+	len += scnprintf(buf + len, buf_len - len, "curr_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_CURR_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_reo2sw4));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "BackPressure Histogram: 0ms to 250ms = %u, 250ms to 500ms = %u, Above 500ms = %u\n",
+			 htt_ring_stats_buf->reo2sw4ringipa_backpress_hist[0],
+			 htt_ring_stats_buf->reo2sw4ringipa_backpress_hist[1],
+			 htt_ring_stats_buf->reo2sw4ringipa_backpress_hist[2]);
+
+	len += scnprintf(buf + len, buf_len - len, "REFILLRINGIPA\n");
+	len += scnprintf(buf + len, buf_len - len, "max_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_SIZE_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_refillringipa));
+	len += scnprintf(buf + len, buf_len - len, "curr_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_CURR_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_refillringipa));
+	len += scnprintf(buf + len, buf_len - len, "avg_entries = %u\n",
+			 htt_ring_stats_buf->datarate_refillringipa);
+
+	len += scnprintf(buf + len, buf_len - len, "REFILLRINGHOST\n");
+	len += scnprintf(buf + len, buf_len - len, "max_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_SIZE_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_refillringhost));
+	len += scnprintf(buf + len, buf_len - len, "curr_num_entries = %u\n",
+			 HTT_STATS_RX_FW_RING_CURR_NUM_ENTRIES
+			 (htt_ring_stats_buf->entry_status_refillringhost));
+	len += scnprintf(buf + len, buf_len - len, "avg_entries = %u\n",
+			 htt_ring_stats_buf->datarate_refillringhost);
+
+	stats_req->buf_len = len;
+}
+
+static inline void
 htt_print_be_ul_ofdma_trigger_stats(const void *tag_buf,
 				    struct debug_htt_stats_req *stats_req)
 {
@@ -4609,6 +5555,7 @@ htt_print_be_ul_ofdma_trigger_stats(cons
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	u32 mac_id_word = __le32_to_cpu(htt_trigger_stats_buf->mac_id__word);
+	char str_buf[HTT_MAX_STRING_LEN] = {0};
 
 	for (i = 0; i < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; i++) {
 		rx_gi[i] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -4630,33 +5577,49 @@ htt_print_be_ul_ofdma_trigger_stats(cons
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
 				 "be_ul_ofdma_rx_gi[%u] = %s ", j, rx_gi[j]);
-		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS; i++) {
+		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_BE_MCS_COUNTERS; i++)
 			len += scnprintf(buf + len, buf_len - len, " %u:%u", i,
 					 htt_trigger_stats_buf->be_ul_ofdma_rx_gi[j][i]);
-		}
+
 		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->be_ul_ofdma_rx_nss,
-			   "be_ul_ofdma_rx_nss",
-			   HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0, j = 0; i < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
+		j += snprintf(&str_buf[j],
+			      HTT_MAX_STRING_LEN - j,
+			      " %u:%u,", i + 1,
+			      htt_trigger_stats_buf->be_ul_ofdma_rx_nss[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ul_ofdma_rx_nss = %s\n", str_buf);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->be_ul_ofdma_rx_bw,
 			   "be_ul_ofdma_rx_bw",
 			   HTT_RX_PDEV_STATS_NUM_BE_BW_COUNTERS, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "be_ul_ofdma_rx_stbc = %u\n",
-			htt_trigger_stats_buf->be_ul_ofdma_rx_stbc);
+			 htt_trigger_stats_buf->be_ul_ofdma_rx_stbc);
 	len += scnprintf(buf + len, buf_len - len, "be_ul_ofdma_rx_ldpc = %u\n",
-			htt_trigger_stats_buf->be_ul_ofdma_rx_ldpc);
+			 htt_trigger_stats_buf->be_ul_ofdma_rx_ldpc);
+
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0, j = 0; i < HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS; i++)
+		j += snprintf(&str_buf[j], HTT_MAX_STRING_LEN - j,
+			      " %s:%u,", htt_be_tx_rx_ru_size_to_str(i),
+			      htt_trigger_stats_buf->be_rx_ulofdma_data_ru_size_ppdu[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_data_ru_size_ppdu = %s\n", str_buf);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->be_rx_ulofdma_data_ru_size_ppdu,
-			   "be_rx_ulofdma_data_ru_size_ppdu",
-			   HTT_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS, "\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->be_rx_ulofdma_non_data_ru_size_ppdu,
-			   "be_rx_ulofdma_non_data_ru_size_ppdu",
-			   HTT_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS, "\n");
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0, j = 0; i < HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS; i++)
+		j += snprintf(&str_buf[j], HTT_MAX_STRING_LEN - j,
+			      " %s:%u,", htt_be_tx_rx_ru_size_to_str(i),
+			      htt_trigger_stats_buf->be_rx_ulofdma_non_data_ru_size_ppdu[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_non_data_ru_size_ppdu = %s\n", str_buf);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->be_uplink_sta_aid,
 			   "be_rx_rssi_track_sta_aid",
@@ -4673,7 +5636,19 @@ htt_print_be_ul_ofdma_trigger_stats(cons
 	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->be_uplink_sta_power_headroom,
 			   "be_rx_sta_power_headroom",
 			   HTT_RX_UL_MAX_UPLINK_RSSI_TRACK, "\n");
-
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ul_ofdma_basic_trigger_rx_qos_null_only = %u\n",
+			 htt_trigger_stats_buf->be_ul_ofdma_basic_trigger_rx_qos_null_only);
+	len += scnprintf(buf + len, buf_len - len, "ul_mlo_send_qdepth_params_count = %u\n",
+			 htt_trigger_stats_buf->ul_mlo_send_qdepth_params_count);
+	len += scnprintf(buf + len, buf_len - len, "ul_mlo_proc_qdepth_params_count = %u\n",
+			 htt_trigger_stats_buf->ul_mlo_proc_qdepth_params_count);
+	len += scnprintf(buf + len, buf_len - len,
+			 "ul_mlo_proc_accepted_qdepth_params_count = %u\n",
+			 htt_trigger_stats_buf->ul_mlo_proc_accepted_qdepth_params_count);
+	len += scnprintf(buf + len, buf_len - len,
+			 "ul_mlo_proc_discarded_qdepth_params_count = %u\n",
+			 htt_trigger_stats_buf->ul_mlo_proc_discarded_qdepth_params_count);
 	len += scnprintf(buf + len, buf_len - len, "\n");
 
 	stats_req->buf_len = len;
@@ -4744,6 +5719,7 @@ htt_print_tx_pdev_rate_stats_be_ofdma_tl
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u16 index = 0;
 
 	for (i = 0; i < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; i++) {
 		tx_gi[i] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -4763,30 +5739,36 @@ htt_print_tx_pdev_rate_stats_be_ofdma_tl
 			   "be_ofdma_tx_mcs",
 			   HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS, "\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_ofdma_tx_nss,
-			   "be_ofdma_tx_nss",
-			   HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_ofdma_tx_bw,
-			   "be_ofdma_tx_bw",
-			   HTT_TX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
-
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_ofdma_eht_sig_mcs,
 			   "be_ofdma_eht_sig_mcs",
 			   HTT_TX_PDEV_STATS_NUM_EHT_SIG_MCS_COUNTERS, "\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_ofdma_tx_ru_size,
-			   "be_ofdma_tx_ru_size",
-			   HTT_TX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "be_ofdma_tx_ru_size = ");
+	for (i = 0; i < HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %s:%u ", htt_be_tx_rx_ru_size_to_str(i),
+				 htt_stats_buf->be_ofdma_tx_ru_size[i]);
 
-	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
+	len += scnprintf(buf + len, buf_len - len, "\nbe_ofdma_tx_nss = ");
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "be_ofdma_tx_gi[%u] = %s ", j, tx_gi[j]);
+				 " %u:%u ", i + 1, htt_stats_buf->be_ofdma_tx_nss[i]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_ofdma_tx_bw,
+			   "be_ofdma_tx_bw",
+			   HTT_TX_PDEV_STATS_NUM_BE_BW_COUNTERS, "\n");
+
+	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
+		index = 0;
 		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS; i++) {
-			len += scnprintf(buf + len, buf_len - len,
-					" %u:%u,", i,
-					htt_stats_buf->be_ofdma_tx_gi[j][i]);
+			index += scnprintf(&tx_gi[j][index], HTT_MAX_STRING_LEN - index,
+					   " %u:%u,", i,
+					   htt_stats_buf->be_ofdma_tx_gi[j][i]);
 		}
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_tx_gi[%u] = %s ", j, tx_gi[j]);
 		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
@@ -4827,22 +5809,22 @@ htt_print_tx_selfgen_be_err_stats_tlv(co
 			 "be_mu_mimo_ndp_flushed = %u\n",
 			 htt_stats_buf->be_mu_mimo_ndp_flushed);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_brp_err,
-			   "be_mu_mimo_brpX_err",
-			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1, "\n\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_mimo_brp_err,
+				 "be_mu_mimo_brpX_err",
+				 HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1, 1, "\n");
 
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_brpoll_flushed,
-			   "be_mu_mimo_brpollX_flushed",
-			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1, "\n\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_mu_mimo_brpoll_flushed,
+				 "be_mu_mimo_brpollX_flushed",
+				 HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1, 1, "\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_mu_mimo_brp_err_num_cbf_received,
 			   "be_mu_mimo_num_cbf_rcvd_on_brp_err",
-			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS, "\n\n");
+			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS, "\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->be_ul_mumimo_trigger_err,
-			   "be_ul_mumimo_trigger_err",
-			   HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS, "\n\n");
+	PRINT_ARRAY_TO_BUF_INDEX(buf, len, htt_stats_buf->be_ul_mumimo_trigger_err,
+				 "be_ul_mumimo_trigger_err",
+				 HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS, 1, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "be_basic_trigger_err = %u\n",
 			 htt_stats_buf->be_basic_trigger_err);
@@ -4857,6 +5839,17 @@ htt_print_tx_selfgen_be_err_stats_tlv(co
 	len += scnprintf(buf + len, buf_len - len,
 			 "be_mu_rts_trigger_err = %u\n",
 			 htt_stats_buf->be_mu_rts_trigger_err);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_basic_trigger_partial_resp = %u\n",
+			 htt_stats_buf->be_basic_trigger_partial_resp);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_bsr_trigger_partial_resp = %u\n",
+			 htt_stats_buf->be_bsr_trigger_partial_resp);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_bar_trigger_partial_resp = %u\n",
+			 htt_stats_buf->be_mu_bar_trigger_partial_resp);
+
+	stats_req->buf_len = len;
 }
 
 static inline void htt_print_latency_prof_stats_tlv_v(const u32 *tag_buf, u8 *data)
@@ -4868,21 +5861,31 @@ static inline void htt_print_latency_pro
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 page_fault_avg = 0;
 
 	if (htt_stats_buf->print_header == 1) {
 		len += scnprintf(buf + len, buf_len - len,
-				   "HTT_STATS_LATENCY_PROF_TLV:\n");
+				 "HTT_STATS_LATENCY_PROF_TLV:\n");
 		len += scnprintf(buf + len, buf_len - len,
-				   "|  prof_name\t| cnt\t| min\t| max\t| last\t| tot\t| avg \t| hist_intvl\t| hist\t|\n");
-	}
-
-	len += scnprintf(buf + len, buf_len - len,
-			   "|%s| %8u| %8u| %8u| %8u| %8u| %8u| %8u| %4u:%4u:%4u|\n",
-			   htt_stats_buf->latency_prof_name, htt_stats_buf->cnt,
-			   htt_stats_buf->min, htt_stats_buf->max, htt_stats_buf->last,
-			   htt_stats_buf->tot, htt_stats_buf->avg,
-			   htt_stats_buf->hist_intvl, htt_stats_buf->hist[0],
-			   htt_stats_buf->hist[1], htt_stats_buf->hist[2]);
+				 "|%-32s|%8s|%15s|%8s|%8s|%8s|%8s|%15s|%26s|%8s|%8s|%8s|%10s|%17s|%6s|\n",
+				 "prof_name", "cnt", "min", "max", "last", "tot", "avg",
+				 "hist_intvl", "hist", "pf_max", "pf_avg", "pf_tot", "ignoredCnt",
+				 "intHist", "intMax");
+	}
+	if (htt_stats_buf->cnt)
+		page_fault_avg = htt_stats_buf->page_fault_total / htt_stats_buf->cnt;
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "|%-32s|%8u|%15u|%8u|%8u|%8u|%8u|%15u|%8u:%8u:%8u|%8u|%8u|%8u|%10u|%5u:%5u:%5u|%6u|\n",
+			 htt_stats_buf->latency_prof_name, htt_stats_buf->cnt,
+			 htt_stats_buf->min, htt_stats_buf->max, htt_stats_buf->last,
+			 htt_stats_buf->tot, htt_stats_buf->avg,
+			 htt_stats_buf->hist_intvl, htt_stats_buf->hist[0],
+			 htt_stats_buf->hist[1], htt_stats_buf->hist[2],
+			 htt_stats_buf->page_fault_max, page_fault_avg,
+			 htt_stats_buf->page_fault_total, htt_stats_buf->ignored_latency_count,
+			 htt_stats_buf->interrupts_hist[0], htt_stats_buf->interrupts_hist[1],
+			 htt_stats_buf->interrupts_hist[2], htt_stats_buf->interrupts_max);
 
 	stats_req->buf_len = len;
 }
@@ -4935,7 +5938,9 @@ static inline void htt_print_ul_mumimo_t
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	u32 mac_id = __le32_to_cpu(htt_ul_mumimo_trig_stats_buf->mac_id__word);
-	u8 j;
+	u8 i, j;
+	u16 index;
+	char str_buf[HTT_MAX_STRING_LEN] = {0};
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "HTT_RX_PDEV_UL_MUMIMO_TRIG_STATS_TLV:\n");
@@ -4945,72 +5950,111 @@ static inline void htt_print_ul_mumimo_t
 	len += scnprintf(buf + len, buf_len - len,
 			 "rx_11ax_ul_mumimo = %u\n",
 			 htt_ul_mumimo_trig_stats_buf->rx_11ax_ul_mumimo);
+	index = 0;
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS; i++)
+		index += snprintf(&str_buf[index],
+				  HTT_MAX_STRING_LEN - index,
+				  " %u:%u,", i, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs[i]);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs,
-			   "ul_mumimo_rx_mcs", HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-	PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs_ext,
-			   "ul_mumimo_rx_mcs_ext",
-			   HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS; i++)
+		index += snprintf(&str_buf[index],
+				  HTT_MAX_STRING_LEN - index,
+				  " %u:%u,", i + HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS,
+				  htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs_ext[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "ul_mumimo_rx_mcs = %s\n", str_buf);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		len += scnprintf(buf + len, buf_len - len, "\nul_mumimo_rx_gi[%u] = ", j);
-		PRINT_ARRAY_TO_BUF(buf, len,
-				   htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi[j],
-				   NULL, HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-		len += scnprintf(buf + len, buf_len - len, ", ");
-		PRINT_ARRAY_TO_BUF(buf, len,
-				   htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi_ext[j],
-				   NULL, HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
+		index = 0;
+		memset(&str_buf[index], 0x0, HTT_MAX_STRING_LEN);
+		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS; i++)
+			index += snprintf(&str_buf[index],
+					  HTT_MAX_STRING_LEN - index, " %u:%u,",
+					  i, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi[j][i]);
+
+		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS; i++)
+			index += snprintf(&str_buf[index],
+					  HTT_MAX_STRING_LEN - index, " %u:%u,",
+					  i + HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS,
+					  htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi_ext[j][i]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "ul_mumimo_rx_gi[%u] = %s\n", j, str_buf);
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_nss,
-			   "ul_mumimo_rx_nss",
-			   HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS, "\n");
+	index = 0;
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	for (i = 0; i < HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS; i++)
+		index += snprintf(&str_buf[index],
+				  HTT_MAX_STRING_LEN - index, " %u:%u,", i + 1,
+				  htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_nss[i]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "ul_mumimo_rx_nss = %s\n", str_buf);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_bw,
 			   "ul_mumimo_rx_bw",
 			   HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
 
-	len += scnprintf(buf + len, buf_len - len, "\nul_mumimo_rx_stbc = %u",
+	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES; i++) {
+		index = 0;
+		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+		for (j = 0; j < HTT_RX_PDEV_STATS_NUM_BW_COUNTERS; j++)
+			index += snprintf(&str_buf[index],
+					  HTT_MAX_STRING_LEN - index, " %u:%u,", j,
+					  htt_ul_mumimo_trig_stats_buf->reduced_ul_mumimo_rx_bw
+					  [i][j]);
+
+		len += scnprintf(buf + len, buf_len - len, "%s = %s\n",
+				 i == 0 ? "half_ul_mumimo_rx_bw" : "quarter_ul_mumimo_rx_bw",
+				 str_buf);
+	}
+
+	len += scnprintf(buf + len, buf_len - len, "ul_mumimo_rx_stbc = %u\n",
 			 htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_stbc);
-	len += scnprintf(buf + len, buf_len - len, "\nul_mumimo_rx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ul_mumimo_rx_ldpc = %u\n",
 			 htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_ldpc);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "\nrx_ul_mumimo_rssi_in_dbm: chain[%u] = ", j);
-		PRINT_ARRAY_TO_BUF(buf, len,
+				 "rx_ul_mumimo_rssi_in_dbm: chain[%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
 				   htt_ul_mumimo_trig_stats_buf->rx_ul_mumimo_chain_rssi_in_dbm[j],
-				   NULL, HTT_RX_PDEV_STATS_TOTAL_BW_COUNTERS, "\n");
+				   HTT_RX_PDEV_STATS_TOTAL_BW_COUNTERS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				   "\nrx_ul_mumimo_target_rssi: user[%u] = ", j);
-		PRINT_ARRAY_TO_BUF(buf, len,
+				 "rx_ul_mumimo_target_rssi: user[%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
 				   htt_ul_mumimo_trig_stats_buf->rx_ul_mumimo_target_rssi[j],
-				   NULL, HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
+				   HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "\nrx_ul_mumimo_fd_rssi: user[%u] =  ", j);
-		PRINT_ARRAY_TO_BUF(buf, len,
+				 "rx_ul_mumimo_fd_rssi: user[%u] =  ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
 				   htt_ul_mumimo_trig_stats_buf->rx_ul_mumimo_fd_rssi[j],
-				   NULL, HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS,
-				   "\n");
+				   HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
-				 "\nrx_ulmumimo_pilot_evm_db_mean: user [%u] = ", j);
-		PRINT_ARRAY_TO_BUF(buf, len,
+				 "rx_ulmumimo_pilot_evm_db_mean: user [%u] = ", j);
+		CHAIN_ARRAY_TO_BUF(buf, len,
 				   htt_ul_mumimo_trig_stats_buf->rx_ulmumimo_pilot_evm_db_mean[j],
-				   NULL, HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS,
-				   "\n");
+				   HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
-
-	len += scnprintf(buf + len, buf_len - len, "\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "ul_mumimo_basic_trigger_rx_qos_null_only = %u\n",
+			 htt_ul_mumimo_trig_stats_buf->ul_mumimo_basic_trigger_rx_qos_null_only);
 
 	stats_req->buf_len = len;
 }
@@ -5123,9 +6167,12 @@ static inline void htt_print_ul_ofdma_tr
 				   NULL, HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
 	}
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_nss,
-			   "ul_ofdma_rx_nss", HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS,
-			   "\n");
+	len += scnprintf(buf + len, buf_len - len, "\nul_ofdma_rx_nss = ");
+	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++)
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u ", j + 1, htt_trigger_stats_buf->ul_ofdma_rx_nss[j]);
+
+	len += scnprintf(buf + len, buf_len - len, "\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_bw,
 			   "ul_ofdma_rx_bw", HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
@@ -5140,31 +6187,40 @@ static inline void htt_print_ul_ofdma_tr
 	}
 	len += scnprintf(buf + len, buf_len - len, "\nul_ofdma_rx_stbc = %u",
 			 htt_trigger_stats_buf->ul_ofdma_rx_stbc);
-	len += scnprintf(buf + len, buf_len - len, "\nul_ofdma_rx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "\nul_ofdma_rx_ldpc = %u\n",
 			 htt_trigger_stats_buf->ul_ofdma_rx_ldpc);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->rx_ulofdma_data_ru_size_ppdu,
-			   "rx_ulofdma_non_data_ru_size_ppdu",
-			   HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS, "\n");
-
-	PRINT_ARRAY_TO_BUF(buf, len,
-			   htt_trigger_stats_buf->rx_ulofdma_non_data_ru_size_ppdu,
-			   "rx_ulofdma_data_ru_size_ppdu",
-			   HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS, "\n");
+	len += scnprintf(buf + len, buf_len - len, "rx_ulofdma_data_ru_size_ppdu = ");
+	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS; j++)
+		len += scnprintf(buf + len, buf_len - len, " %s:%u ",
+				 htt_ax_tx_rx_ru_size_to_str(j),
+				 htt_trigger_stats_buf->rx_ulofdma_data_ru_size_ppdu[j]);
+
+	len += scnprintf(buf + len, buf_len - len, "\nrx_ulofdma_non_data_ru_size_ppdu = ");
+	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS; j++)
+		len += scnprintf(buf + len, buf_len - len, " %s:%u ",
+				 htt_ax_tx_rx_ru_size_to_str(j),
+				 htt_trigger_stats_buf->rx_ulofdma_non_data_ru_size_ppdu[j]);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->uplink_sta_aid,
-			   "rx_rssi_track_sta_aid", HTT_RX_UL_MAX_UPLINK_RSSI_TRACK,
-			   "\n");
+			   "\nrx_rssi_track_sta_aid", HTT_RX_UL_MAX_UPLINK_RSSI_TRACK, "\n");
+
+	len += scnprintf(buf + len, buf_len - len, "rx_sta_target_rssi = ");
+	CHAIN_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->uplink_sta_target_rssi,
+			   HTT_RX_UL_MAX_UPLINK_RSSI_TRACK);
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->uplink_sta_target_rssi,
-			   "rx_sta_target_rssi", HTT_RX_UL_MAX_UPLINK_RSSI_TRACK, "\n");
+	len += scnprintf(buf + len, buf_len - len, "\n");
 
-	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->uplink_sta_fd_rssi,
-			   "rx_sta_fd_rssi", HTT_RX_UL_MAX_UPLINK_RSSI_TRACK, "\n");
+	len += scnprintf(buf + len, buf_len - len, "rx_sta_fd_rssi = ");
+	CHAIN_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->uplink_sta_fd_rssi,
+			   HTT_RX_UL_MAX_UPLINK_RSSI_TRACK);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->uplink_sta_power_headroom,
-			   "rx_sta_power_headroom", HTT_RX_UL_MAX_UPLINK_RSSI_TRACK,
-			   "\n");
+			   "\nrx_sta_power_headroom", HTT_RX_UL_MAX_UPLINK_RSSI_TRACK, "\n");
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "ul_ofdma_basic_trigger_rx_qos_null_only = %u\n",
+			 htt_trigger_stats_buf->ul_ofdma_basic_trigger_rx_qos_null_only);
 
 	len += scnprintf(buf + len, buf_len - len, "\n");
 
@@ -5291,53 +6347,53 @@ htt_print_pdev_tx_rate_txbf_stats_tlv(co
 	len += scnprintf(buf + len, buf_len - len, "tx_ol_mcs = ");
 	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_ol_mcs[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_ol_mcs[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\ntx_ibf_mcs = ");
 	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_ibf_mcs[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_ibf_mcs[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\ntx_txbf_mcs =");
 	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_txbf_mcs[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_txbf_mcs[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\ntx_ol_nss = ");
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_ol_nss[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_ol_nss[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\ntx_ibf_nss = ");
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_ibf_nss[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_ibf_nss[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\ntx_txbf_nss = ");
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_txbf_nss[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_txbf_nss[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\ntx_ol_bw = ");
 	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_ol_bw[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_ol_bw[i]);
 
 	for (j = 0; j < HTT_TX_TXBF_RATE_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
 		len += scnprintf(buf + len, buf_len - len, j == 0 ?
-				 "\nhalf_tx_ol_bw = " : "\nquarter_tx_ol_bw = ");
+				 "\nhalf_tx_ol_bw = " : "quarter_tx_ol_bw = ");
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->reduced_tx_su_ol_bw[j],
 				   NULL, HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS, "\n");
 	}
 
-	len += scnprintf(buf + len, buf_len - len, "\ntx_ibf_bw = ");
+	len += scnprintf(buf + len, buf_len - len, "tx_ibf_bw = ");
 	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_ibf_bw[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_ibf_bw[i]);
 
 	for (j = 0; j < HTT_TX_TXBF_RATE_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
 		len += scnprintf(buf + len, buf_len - len, j == 0 ?
-				 "\nhalf_tx_ibf_bw = " : "\nquarter_tx_ibf_bw = ");
+				 "\nhalf_tx_ibf_bw = " : "quarter_tx_ibf_bw = ");
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->reduced_tx_su_ibf_bw[j],
 				   NULL, HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS, "\n");
 	}
@@ -5345,16 +6401,26 @@ htt_print_pdev_tx_rate_txbf_stats_tlv(co
 	len += scnprintf(buf + len, buf_len - len, "\ntx_txbf_bw = ");
 	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				 "%d:%u,", i, htt_stats_buf->tx_su_txbf_bw[i]);
+				 "%d:%u, ", i, htt_stats_buf->tx_su_txbf_bw[i]);
 
 	for (j = 0; j < HTT_TX_TXBF_RATE_STATS_NUM_REDUCED_CHAN_TYPES; j++) {
 		len += scnprintf(buf + len, buf_len - len, j == 0 ?
-				 "\nhalf_tx_txbf_bw = " : "\nquarter_tx_txbf_bw = ");
+				 "\nhalf_tx_txbf_bw = " : "quarter_tx_txbf_bw = ");
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->reduced_tx_su_txbf_bw[j],
 				   NULL, HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS, "\n");
 	}
 
-	len += scnprintf(buf + len, buf_len - len, "\n");
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_PDEV_TXBF_FLAG_RETURN_STATS:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "TXBF_reason_code_stats: 0:%u, 1:%u, 2:%u, 3:%u, 4:%u, 5:%u, 6:%u, 7:%u\n",
+			 htt_stats_buf->txbf_flag_set_mu_mode,
+			 htt_stats_buf->txbf_flag_set_final_status,
+			 htt_stats_buf->txbf_flag_not_set_verified_txbf_mode,
+			 htt_stats_buf->txbf_flag_not_set_disable_p2p_access,
+			 htt_stats_buf->txbf_flag_not_set_max_nss_reached_in_he160,
+			 htt_stats_buf->txbf_flag_not_set_disable_ul_dl_ofdma,
+			 htt_stats_buf->txbf_flag_not_set_mcs_threshold_value,
+			 htt_stats_buf->txbf_flag_not_set_final_status);
 
 	stats_req->buf_len = len;
 }
@@ -5367,27 +6433,49 @@ htt_print_tx_per_rate_stats_tlv(const vo
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	char mode_prefix[][3] = {"su", "mu"};
+	char mode_prefix[][8] = {"su", "mu", "ofdma", "ulmu", "ulofdma"};
 	int i = 0, j = 0;
+	u32 ru_size_cnt = 0;
 
 	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_DLSU) {
 		len += scnprintf(buf + len, buf_len - len, "HTT_TX_PER_STATS:\n");
-		len += scnprintf(buf + len, buf_len - len, "PER_STATS_SU:\n");
+		len += scnprintf(buf + len, buf_len - len, "\nPER_STATS_SU:\n");
 	} else if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_DLMUMIMO) {
 		len += scnprintf(buf + len, buf_len - len, "\nPER_STATS_DL_MUMIMO:\n");
 		j = 1;
+	} else if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_DLOFDMA) {
+		len += scnprintf(buf + len, buf_len - len, "\n\nPER_STATS_DL_OFDMA:\n");
+		j = 2;
+		if (htt_stats_buf->ru_type == HTT_STATS_RU_TYPE_SINGLE_RU_ONLY)
+			ru_size_cnt = HTT_TX_RX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS;
+		else if (htt_stats_buf->ru_type == HTT_STATS_RU_TYPE_SINGLE_AND_MULTI_RU)
+			ru_size_cnt = HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS;
+	} else if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULMUMIMO) {
+		len += scnprintf(buf + len, buf_len - len, "\nHTT_RX_PER_STATS:\n");
+		len += scnprintf(buf + len, buf_len - len, "\nPER_STATS_UL_MUMIMO:\n");
+		j = 3;
+	} else if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA) {
+		len += scnprintf(buf + len, buf_len - len, "\nPER_STATS_UL_OFDMA:\n");
+		j = 4;
+		if (htt_stats_buf->ru_type == HTT_STATS_RU_TYPE_SINGLE_RU_ONLY)
+			ru_size_cnt = HTT_TX_RX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS;
+		else if (htt_stats_buf->ru_type == HTT_STATS_RU_TYPE_SINGLE_AND_MULTI_RU)
+			ru_size_cnt = HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS;
 	} else {
 		return;
 	}
 
 	len += scnprintf(buf + len, buf_len - len, "\nPER per BW:\n");
+	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULMUMIMO ||
+	    htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+		len += scnprintf(buf + len, buf_len - len, "data_ppdus_%s = ", mode_prefix[j]);
+	else
+		len += scnprintf(buf + len, buf_len - len, "ppdus_tried_%s = ", mode_prefix[j]);
 
-	len += scnprintf(buf + len, buf_len - len, "ppdus_tried_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++) {
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_bw[i].ppdus_tried);
-	}
 	/*
 	 * Now i = HTT_TX_PDEV_STATS_NUM_BW_COUNTERS.
 	 * Adding 320 MHz ppdus tried.
@@ -5395,12 +6483,17 @@ htt_print_tx_per_rate_stats_tlv(const vo
 	len += scnprintf(buf + len, buf_len - len,
 			 " %u:%u\n", i, htt_stats_buf->per_bw320.ppdus_tried);
 
-	len += scnprintf(buf + len, buf_len - len, "ppdus_ack_failed_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++) {
+	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULMUMIMO ||
+	    htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+		len += scnprintf(buf + len, buf_len - len, "non_data_ppdus_%s = ", mode_prefix[j]);
+	else
+		len += scnprintf(buf + len, buf_len - len,
+				 "ppdus_ack_failed_%s = ", mode_prefix[j]);
+
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_bw[i].ppdus_ack_failed);
-	}
 	/*
 	 * Now i = HTT_TX_PDEV_STATS_NUM_BW_COUNTERS.
 	 * Adding 320 MHz ppdus ack failed.
@@ -5408,12 +6501,11 @@ htt_print_tx_per_rate_stats_tlv(const vo
 	len += scnprintf(buf + len, buf_len - len,
 			 " %u:%u\n", i, htt_stats_buf->per_bw320.ppdus_ack_failed);
 
-	len += scnprintf(buf + len, buf_len - len, "mpdus_tried_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++) {
+	len += scnprintf(buf + len, buf_len - len, "mpdus_tried_%s = ", mode_prefix[j]);
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_bw[i].mpdus_tried);
-	}
 	/*
 	 * Now i = HTT_TX_PDEV_STATS_NUM_BW_COUNTERS.
 	 * Adding 320 MHz mpdus tried.
@@ -5422,12 +6514,11 @@ htt_print_tx_per_rate_stats_tlv(const vo
 			 " %u:%u\n", i, htt_stats_buf->per_bw320.mpdus_tried);
 
 
-	len += scnprintf(buf + len, buf_len - len, "mpdus_failed_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++) {
+	len += scnprintf(buf + len, buf_len - len, "mpdus_failed_%s = ", mode_prefix[j]);
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_BW_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_bw[i].mpdus_failed);
-	}
 	/*
 	 * Now i = HTT_TX_PDEV_STATS_NUM_BW_COUNTERS.
 	 * Adding 320 MHz mpdus failed.
@@ -5437,65 +6528,127 @@ htt_print_tx_per_rate_stats_tlv(const vo
 
 	len += scnprintf(buf + len, buf_len - len, "\nPER per NSS:\n");
 
-	len += scnprintf(buf + len, buf_len - len, "ppdus_tried_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++) {
+	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULMUMIMO ||
+	    htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+		len += scnprintf(buf + len, buf_len - len, "data_ppdus_%s = ", mode_prefix[j]);
+	else
+		len += scnprintf(buf + len, buf_len - len, "ppdus_tried_%s = ", mode_prefix[j]);
+
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_nss[i].ppdus_tried);
-	}
 
-	len += scnprintf(buf + len, buf_len - len, "\nppdus_ack_fialed_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++) {
+	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULMUMIMO ||
+	    htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+		len += scnprintf(buf + len, buf_len - len,
+				 "\nnon_data_ppdus_%s = ", mode_prefix[j]);
+	else
+		len += scnprintf(buf + len, buf_len - len,
+				 "\nppdus_ack_failed_%s = ", mode_prefix[j]);
+
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_nss[i].ppdus_ack_failed);
-	}
 
-	len += scnprintf(buf + len, buf_len - len, "\nmpdus_tried_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++) {
+	len += scnprintf(buf + len, buf_len - len, "\nmpdus_tried_%s = ", mode_prefix[j]);
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_nss[i].mpdus_tried);
-	}
 
-	len += scnprintf(buf + len, buf_len - len, "\nmpdus_failed_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++) {
+	len += scnprintf(buf + len, buf_len - len, "\nmpdus_failed_%s = ", mode_prefix[j]);
+	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_nss[i].mpdus_failed);
-	}
 
-	len += scnprintf(buf + len, buf_len - len, "\nPER per Mcs:\n");
+	len += scnprintf(buf + len, buf_len - len, "\n\nPER per Mcs:\n");
+
+	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULMUMIMO ||
+	    htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+		len += scnprintf(buf + len, buf_len - len, "data_ppdus_%s = ", mode_prefix[j]);
+	else
+		len += scnprintf(buf + len, buf_len - len, "ppdus_tried_%s = ", mode_prefix[j]);
 
-	len += scnprintf(buf + len, buf_len - len, "ppdus_tried_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++) {
+	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_mcs[i].ppdus_tried);
-	}
 
-	len += scnprintf(buf + len, buf_len - len, "\nppdus_ack_failed_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++) {
+	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULMUMIMO ||
+	    htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+		len += scnprintf(buf + len, buf_len - len,
+				 "\nnon_data_ppdus_%s = ", mode_prefix[j]);
+	else
+		len += scnprintf(buf + len, buf_len - len,
+				 "\nppdus_ack_failed_%s = ", mode_prefix[j]);
+
+	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_mcs[i].ppdus_ack_failed);
-	}
 
-	len += scnprintf(buf + len, buf_len - len, "\nmpdus_tried_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++) {
+	len += scnprintf(buf + len, buf_len - len, "\nmpdus_tried_%s = ", mode_prefix[j]);
+	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_mcs[i].mpdus_tried);
-	}
 
-	len += scnprintf(buf + len, buf_len - len, "\nmpdus_failed_%s", mode_prefix[j]);
-	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++) {
+	len += scnprintf(buf + len, buf_len - len, "\nmpdus_failed_%s = ", mode_prefix[j]);
+	for (i = 0; i < HTT_TX_TXBF_RATE_STATS_NUM_MCS_COUNTERS; i++)
 		len += scnprintf(buf + len, buf_len - len,
 				 " %u:%u ",
 				 i, htt_stats_buf->per_mcs[i].mpdus_failed);
+
+	if ((htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_DLOFDMA ||
+	     htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA) &&
+	    htt_stats_buf->ru_type != HTT_STATS_RU_TYPE_INVALID) {
+		len += scnprintf(buf + len, buf_len - len, "\n\nPER per RU:\n");
+
+		if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+			len += scnprintf(buf + len, buf_len - len,
+					 "\ndata_ppdus_%s = ", mode_prefix[j]);
+		else
+			len += scnprintf(buf + len, buf_len - len,
+					 "\nppdus_tried_%s = ", mode_prefix[j]);
+
+		for (i = 0; i < ru_size_cnt; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %s:%u ",
+					 htt_stats_tx_ru_size_to_str(htt_stats_buf->ru_type, i),
+					 htt_stats_buf->per_ru[i].ppdus_tried);
+
+		if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_ULOFDMA)
+			len += scnprintf(buf + len, buf_len - len,
+					 "\nnon_data_ppdus_%s = ", mode_prefix[j]);
+		else
+			len += scnprintf(buf + len, buf_len - len,
+					 "\nppdus_ack_failed_%s = ", mode_prefix[j]);
+
+		for (i = 0; i < ru_size_cnt; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %s:%u ",
+					 htt_stats_tx_ru_size_to_str(htt_stats_buf->ru_type, i),
+					 htt_stats_buf->per_ru[i].ppdus_ack_failed);
+
+		len += scnprintf(buf + len, buf_len - len, "\nmpdus_tried_%s = ", mode_prefix[j]);
+		for (i = 0; i < ru_size_cnt; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %s:%u ",
+					 htt_stats_tx_ru_size_to_str(htt_stats_buf->ru_type, i),
+					 htt_stats_buf->per_ru[i].mpdus_tried);
+
+		len += scnprintf(buf + len, buf_len - len, "\nmpdus_failed_%s = ", mode_prefix[j]);
+		for (i = 0; i < ru_size_cnt; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %s:%u ",
+					 htt_stats_tx_ru_size_to_str(htt_stats_buf->ru_type, i),
+					 htt_stats_buf->per_ru[i].mpdus_failed);
 	}
 
-	len += scnprintf(buf + len, buf_len - len, "\n");
+	len += scnprintf(buf + len, buf_len - len, "\n\n");
 
 	if (htt_stats_buf->rc_mode == HTT_STATS_RC_MODE_DLMUMIMO) {
 		len += scnprintf(buf + len, buf_len - len, "last_probed_bw  = %u\n",
@@ -5504,6 +6657,12 @@ htt_print_tx_per_rate_stats_tlv(const vo
 				 htt_stats_buf->last_probed_nss);
 		len += scnprintf(buf + len, buf_len - len, "last_probed_mcs = %u\n",
 				 htt_stats_buf->last_probed_mcs);
+
+		len += scnprintf(buf + len, buf_len - len, "MU Probe count per RC MODE = ");
+		for (i = 0; i < HTT_RC_MODE_2D_COUNT; i++)
+			len += scnprintf(buf + len, buf_len - len,
+					 " %u:%u ",
+					 i, htt_stats_buf->probe_cnt_per_rcmode[i]);
 	}
 
 	stats_req->buf_len = len;
@@ -6234,6 +7393,8 @@ htt_print_dmac_reset_stats_tlv(const voi
 			 htt_stats_buf->engage_time_lo_ms);
 	len += scnprintf(buf + len, buf_len - len, "disengage_count = %u\n",
 			 htt_stats_buf->disengage_count);
+	len += scnprintf(buf + len, buf_len - len, "engage_count = %u\n",
+			 htt_stats_buf->engage_count);
 	len += scnprintf(buf + len, buf_len - len, "drain_dest_ring_mask = %u\n",
 			 htt_stats_buf->drain_dest_ring_mask);
 	stats_req->buf_len = len;
@@ -6289,7 +7450,7 @@ htt_print_phy_tpc_stats_tlv(const void *
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	int i;
+	int i, j, k;
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_PHY_TPC_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len,
@@ -6359,6 +7520,40 @@ htt_print_phy_tpc_stats_tlv(const void *
 	}
 
 	len += scnprintf(buf + len, buf_len - len,
+			 "\ntpc_stats : ctl_array_gain_cap_ext2_enabled = %u",
+			 HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_GET
+			 (htt_stats_phy_tpc_stats_buf->ctl_args));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "\ntpc_stats : ctl_flag = %u",
+			 HTT_PHY_TPC_STATS_CTL_FLAG_GET
+			 (htt_stats_phy_tpc_stats_buf->ctl_args));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "\ntpc_stats : ctl_array_gain_cap_ext2_ctl_region_grp = %u",
+			 HTT_PHY_TPC_STATS_CTL_REGION_GRP_GET
+			 (htt_stats_phy_tpc_stats_buf->ctl_args));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "\ntpc_stats : ctl_sub_band_index = %u",
+			 HTT_PHY_TPC_STATS_SUB_BAND_INDEX_GET
+			 (htt_stats_phy_tpc_stats_buf->ctl_args));
+
+	i = 0;
+	j = 0;
+	for (k = 0; k < (HTT_STATS_MAX_CHAINS + 1) * HTT_STATS_MAX_CHAINS / 2; k++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "\ntpc_stats : ctl_array_gain_cap[ntx:%d][nss:%d] =%d",
+				 i + 1, j + 1,
+				 htt_stats_phy_tpc_stats_buf->array_gain_cap[k]);
+		if (j == i) {
+			i++;
+			j = 0;
+		} else {
+			j++;
+		}
+	}
+	len += scnprintf(buf + len, buf_len - len,
 			 "\n=========================================== \n");
 	stats_req->buf_len = len;
 }
@@ -6799,6 +7994,51 @@ htt_print_pdev_sched_algo_ofdma_stats_tl
 			   "chan_acc_lat_based_dlofdma_monitoring_count",
 			   HTT_NUM_AC_WMM, "\n");
 
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->downgrade_to_dl_su_ru_alloc_fail,
+			   "downgrade_to_dl_su_ru_alloc_fail",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->candidate_list_single_user_disable_ofdma,
+			   "candidate_list_single_user_disable_ofdma",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->dl_cand_list_dropped_high_ul_qos_weight,
+			   "dl_cand_list_dropped_high_ul_qos_weight",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->ax_dlofdma_disabled_due_to_pipelining,
+			   "ax_dlofdma_disabled_due_to_pipelining",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->dlofdma_disabled_su_only_eligible,
+			   "dlofdma_disabled_su_only_eligible",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->dlofdma_disabled_consec_no_mpdus_tried,
+			   "dlofdma_disabled_consec_no_mpdus_tried",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->dlofdma_disabled_consec_no_mpdus_success,
+			   "dlofdma_disabled_consec_no_mpdus_success",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->txbf_ofdma_ineligibility_stat,
+			   "sched_ofdma_txbf_ineligibility",
+			   HTT_STATS_SCHED_OFDMA_TXBF_INELIGIBILITY_MAX, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->avg_chan_acc_lat_hist,
+			   "avg_chan_acc_lat_hist",
+			   HTT_MAX_NUM_CHAN_ACC_LAT_INTR, "\n");
+
 	len += scnprintf(buf + len, buf_len - len,
 			 "=========================================== \n");
 	stats_req->buf_len = len;
@@ -6873,6 +8113,7 @@ htt_print_tx_pdev_ap_edca_params_stats_t
 			i, htt_stats_buf->ul_mumimo_highly_aggressive[i]);
 		len += scnprintf(buf + len, buf_len - len, "ul_mumimo_default_relaxed[%u] = %u\n",
 			i, htt_stats_buf->ul_mumimo_default_relaxed[i]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	len += scnprintf(buf + len, buf_len - len, "AP EDCA PARAMETERS FOR UL OFDMA:\n");
@@ -6885,6 +8126,7 @@ htt_print_tx_pdev_ap_edca_params_stats_t
 			i, htt_stats_buf->ul_muofdma_highly_aggressive[i]);
 		len += scnprintf(buf + len, buf_len - len, "ul_muofdma_default_relaxed[%u] = %u\n",
 			i, htt_stats_buf->ul_muofdma_default_relaxed[i]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 	len += scnprintf(buf + len, buf_len - len,
 			 "=========================================== \n");
@@ -6982,6 +8224,10 @@ htt_print_peer_ax_ofdma_stats(const void
 	PRINT_ARRAY_TO_BUF(buf, len,
 			   htt_stats_buf->last_updated_ul_qdepth,
 			   "last_updated_ul_qdepth", HTT_NUM_AC_WMM, "\n");
+	len += scnprintf(buf + len, buf_len - len, "ax_manual_ulofdma_trig_count = %u",
+			 htt_stats_buf->ax_manual_ulofdma_trig_count);
+	len += scnprintf(buf + len, buf_len - len, "ax_manual_ulofdma_trig_err = %u",
+			 htt_stats_buf->ax_manual_ulofdma_trig_err_count);
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "=========================================== \n");
@@ -7005,7 +8251,7 @@ htt_print_tx_pdev_mu_edca_params_stats_t
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_MU_EDCA_PARAMS_STATS_TLV:\n");
 	PRINT_ARRAY_TO_BUF(buf, len,
 			   htt_stats_buf->relaxed_mu_edca,
-			   "irelaxed_mu_edca",
+			   "relaxed_mu_edca",
 			   HTT_NUM_AC_WMM, "\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len,
@@ -7014,6 +8260,16 @@ htt_print_tx_pdev_mu_edca_params_stats_t
 			   HTT_NUM_AC_WMM, "\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->mumimo_relaxed_mu_edca,
+			   "mumimo_relaxed_mu_edca",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
+			   htt_stats_buf->muofdma_aggressive_mu_edca,
+			   "muofdma_aggressive_mu_edca",
+			   HTT_NUM_AC_WMM, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len,
 			   htt_stats_buf->muofdma_relaxed_mu_edca,
 			   "muofdma_relaxed_mu_edca",
 			   HTT_NUM_AC_WMM, "\n");
@@ -7435,6 +8691,31 @@ static inline void htt_print_phy_counter
 				 "rx_ota_err_cnt[%d] = %u\n",
 				 i, htt_stats_buf->rx_ota_err_cnt[i]);
 
+	for (i = 0; i < HTT_MAX_RX_PKT_CNT_EXT; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "rx_pkt_cnt_ext[%d] =  %u\n",
+				 i, htt_stats_buf->rx_pkt_cnt_ext[i]);
+
+	for (i = 0; i < HTT_MAX_RX_PKT_CRC_PASS_CNT_EXT; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "rx_pkt_crc_pass_cnt_ext[%d] =  %u\n",
+				 i, htt_stats_buf->rx_pkt_crc_pass_cnt_ext[i]);
+
+	for (i = 0; i < HTT_MAX_RX_PKT_MU_CNT; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "rx_pkt_mu_cnt[%d] =  %u\n",
+				 i, htt_stats_buf->rx_pkt_mu_cnt[i]);
+
+	for (i = 0; i < HTT_MAX_TX_PKT_CNT; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				"tx_pkt_cnt[%d] =  %u\n",
+				i, htt_stats_buf->tx_pkt_cnt[i]);
+
+	for (i = 0; i < HTT_MAX_PHY_TX_ABORT_CNT; i++)
+		len += scnprintf(buf + len, buf_len - len,
+				 "phy_tx_abort_cnt[%d] =  %u\n",
+				 i, htt_stats_buf->phy_tx_abort_cnt[i]);
+
 	len += scnprintf(buf + len, buf_len - len,
 			 "=================================================\n");
 
@@ -7520,6 +8801,9 @@ static inline void htt_print_phy_reset_c
 			 "reset_counts : rf_mode_switch_phy_off_cnt = %u\n",
 			 htt_stats_buf->rf_mode_switch_phy_off_cnt);
 	len += scnprintf(buf + len, buf_len - len,
+			 "reset_counts : temperature_recal_cnt = %u\n",
+			 htt_stats_buf->temperature_recal_cnt);
+	len += scnprintf(buf + len, buf_len - len,
 			 "=================================================\n");
 
 	stats_req->buf_len = len;
@@ -7614,6 +8898,36 @@ static inline void htt_print_phy_reset_s
 			 "reset_stats : rxdesense_thresh_sw = 0x%x\n",
 			 htt_stats_buf->rxdesense_thresh_sw);
 	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : phy_bw_code = %u\n",
+			 htt_stats_buf->phy_bw_code);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : phy_rate_mode = %u\n",
+			 htt_stats_buf->phy_rate_mode);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : phy_band_code = %u\n",
+			 htt_stats_buf->phy_band_code);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : phy_vreg_base = 0x%x\n",
+			 htt_stats_buf->phy_vreg_base);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : phy_vreg_base_ext = 0x%x\n",
+			 htt_stats_buf->phy_vreg_base_ext);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : cur_table_index = %u\n",
+			 htt_stats_buf->cur_table_index);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : whal_config_flag = 0x%x\n",
+			 htt_stats_buf->whal_config_flag);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : nfcal_iteration_count_home = %u\n",
+			 htt_stats_buf->nfcal_iteration_counts[0]);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : nfcal_iteration_count_scan = %u\n",
+			 htt_stats_buf->nfcal_iteration_counts[1]);
+	len += scnprintf(buf + len, buf_len - len,
+			 "reset_stats : nfcal_iteration_count_periodic = %u\n",
+			 htt_stats_buf->nfcal_iteration_counts[2]);
+	len += scnprintf(buf + len, buf_len - len,
 			 "=================================================\n");
 
 	stats_req->buf_len = len;
@@ -7681,6 +8995,16 @@ htt_print_vdev_txrx_stats_hw_tlv(const v
 			 htt_stats_buf->tx_msdu_ttl_expire_drop_cnt_hi,
 			 htt_stats_buf->tx_msdu_ttl_expire_drop_cnt_lo);
 
+	len += scnprintf(buf + len, buf_len - len,
+			 "tqm_bypass_frame_cnt = 0x%08x%08x\n",
+			 htt_stats_buf->tqm_bypass_frame_cnt_hi,
+			 htt_stats_buf->tqm_bypass_frame_cnt_lo);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "tqm_bypass_byte_cnt = 0x%08x%08x\n",
+			 htt_stats_buf->tqm_bypass_byte_cnt_hi,
+			 htt_stats_buf->tqm_bypass_byte_cnt_lo);
+
 	len += scnprintf(buf + len, buf_len - len, "===============================\n");
 
 	stats_req->buf_len = len;
@@ -7925,7 +9249,6 @@ static void htt_print_sta_ul_ofdma_stats
 			   HTT_NUM_AC_WMM, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "=============================\n");
-
 	stats_req->buf_len = len;
 }
 
@@ -8118,8 +9441,18 @@ static inline void htt_print_histogram_s
 	len += scnprintf(buf + len, buf_len - len, "su_burst_rate_drop_fail_cnt = %u\n",
 			 htt_stats_buf->su_burst_rate_drop_fail_cnt);
 
+	len += scnprintf(buf + len, buf_len - len, "rate_retry_mcs_drop_cnt = %u\n",
+			 htt_stats_buf->rate_retry_mcs_drop_cnt);
+
 	len += scnprintf(buf + len, buf_len - len, "PER_HISTOGRAM_STATS\n");
 
+	len += scnprintf(buf + len, buf_len - len, "mcs_drop_rate = -2:%u, -1:%u,",
+			 htt_stats_buf->mcs_drop_rate[HTT_TX_PDEV_STATS_NUM_MCS_DROP_COUNTERS - 2],
+			 htt_stats_buf->mcs_drop_rate
+			 [HTT_TX_PDEV_STATS_NUM_MCS_DROP_COUNTERS - 1]);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->mcs_drop_rate, NULL,
+			   HTT_TX_PDEV_STATS_NUM_MCS_DROP_COUNTERS - 2, " ");
+
 	index = 0;
 	memset(data, 0x0, HTT_HISTOGRAM_STATS_LEN);
 
@@ -8131,7 +9464,7 @@ static inline void htt_print_histogram_s
 			break;
 	}
 
-	len += scnprintf(buf + len, buf_len - len, "Per_histogram_cnt: %s\n", data);
+	len += scnprintf(buf + len, buf_len - len, "\nPer_histogram_cnt: %s\n", data);
 
 	index = 0;
 	memset(data, 0x0, HTT_HISTOGRAM_STATS_LEN);
@@ -8183,7 +9516,7 @@ static void htt_print_umac_ssr_stats_tlv
 	u32 len = stats_req->buf_len;
 	u8 *buf = stats_req->buf;
 
-	len += scnprintf(buf + len, buf_len - len, "HTT_UMAC_SSR_STATS_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_UMAC_SSR_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "total_done = %u\n",
 			 htt_stats_buf->total_done);
 	len += scnprintf(buf + len, buf_len - len, "trigger_requests_count = %u\n",
@@ -8237,6 +9570,553 @@ static void htt_print_umac_ssr_stats_tlv
 	stats_req->buf_len = len;
 }
 
+static void htt_print_peer_be_ofdma_stats(const void *tag_buf,
+					  struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_peer_be_ofdma_stats_tlv *htt_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_PEER_BE_OFDMA_STATS_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "peer_id = %u\n",
+			 htt_stats_buf->peer_id);
+	len += scnprintf(buf + len, buf_len - len, "be_manual_ulofdma_trig_count = %u\n",
+			 htt_stats_buf->be_manual_ulofdma_trig_count);
+	len += scnprintf(buf + len, buf_len - len, "be_manual_ulofdma_trig_err = %u\n",
+			 htt_stats_buf->be_manual_ulofdma_trig_err_count);
+
+	stats_req->buf_len = len;
+}
+
+static void htt_print_pdev_tdma_stats_tlv(const void *tag_buf,
+					  struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_pdev_tdma_stats_tlv *htt_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_TDMA_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 HTT_STATS_TDMA_MAC_ID_GET(htt_stats_buf->mac_id__word));
+	len += scnprintf(buf + len, buf_len - len, "num_tdma_active_schedules = %u\n",
+			 htt_stats_buf->num_tdma_active_schedules);
+	len += scnprintf(buf + len, buf_len - len, "num_tdma_reserved_schedules = %u\n",
+			 htt_stats_buf->num_tdma_reserved_schedules);
+	len += scnprintf(buf + len, buf_len - len, "num_tdma_restricted_schedules = %u\n",
+			 htt_stats_buf->num_tdma_restricted_schedules);
+	len += scnprintf(buf + len, buf_len - len, "num_tdma_unconfigured_schedules = %u\n",
+			 htt_stats_buf->num_tdma_unconfigured_schedules);
+	len += scnprintf(buf + len, buf_len - len, "num_tdma_slot_switches = %u\n",
+			 htt_stats_buf->num_tdma_slot_switches);
+	len += scnprintf(buf + len, buf_len - len, "num_tdma_edca_switches = %u\n",
+			 htt_stats_buf->num_tdma_edca_switches);
+	stats_req->buf_len = len;
+}
+
+static void htt_print_codel_svc_class_stats_tlv(const void *tag_buf,
+						struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_codel_svc_class_stats_tlv *htt_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_CODEL_SVC_CLASS_TAG:\n");
+	len += scnprintf(buf + len, buf_len - len, "svc class %u\n", htt_stats_buf->svc_class_id);
+	len += scnprintf(buf + len, buf_len - len, "%u drops, %u no-drops\n",
+			 htt_stats_buf->codel_drops, htt_stats_buf->codel_no_drops);
+	stats_req->buf_len = len;
+}
+
+static void htt_print_codel_msduq_stats_tlv(const void *tag_buf,
+					    struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_codel_msduq_stats_tlv *htt_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_CODEL_MSDUQ_TAG:\n");
+	len += scnprintf(buf + len, buf_len - len, "MSDU queue tx flow %u, svc class %u\n",
+			 HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_GET(htt_stats_buf->id__word),
+			 HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_GET(htt_stats_buf->id__word));
+	len += scnprintf(buf + len, buf_len - len, "%u drops, %u no-drops\n",
+			 HTT_CODEL_MSDUQ_STATS_DROPS_GET(htt_stats_buf->stats__word),
+			 HTT_CODEL_MSDUQ_STATS_NO_DROPS_GET(htt_stats_buf->stats__word));
+	stats_req->buf_len = len;
+}
+
+static void htt_print_mlo_sched_stats_tlv(const void *tag_buf,
+					  struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_mlo_sched_stats_tlv *htt_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_MLO_SCHED_STATS:\n");
+	len += scnprintf(buf + len, buf_len - len, "=======================================\n");
+	len += scnprintf(buf + len, buf_len - len, "num_sec_link_sched: %u\n",
+			 htt_stats_buf->pref_link_num_sec_link_sched);
+	len += scnprintf(buf + len, buf_len - len, "num_pref_link_timeout: %u\n",
+			 htt_stats_buf->pref_link_num_pref_link_timeout);
+	len += scnprintf(buf + len, buf_len - len, "num_pref_link_sch_delay_ipc: %u\n",
+			 htt_stats_buf->pref_link_num_pref_link_sch_delay_ipc);
+	len += scnprintf(buf + len, buf_len - len, "num_pref_link_timeout_ipc: %u\n",
+			 htt_stats_buf->pref_link_num_pref_link_timeout_ipc);
+	len += scnprintf(buf + len, buf_len - len, "=======================================\n");
+	stats_req->buf_len = len;
+}
+
+static void htt_print_mlo_ipc_stats_tlv(const void *tag_buf,
+					struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_pdev_mlo_ipc_stats_tlv *htt_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+	u8 i = 0, j = 0;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_MLO_IPC_STATS:\n");
+	len += scnprintf(buf + len, buf_len - len, "=======================================\n");
+	for (i = 0; i < HTT_STATS_HWMLO_MAX_LINKS; i++) {
+		len += scnprintf(buf + len, buf_len - len, "src_link: %u\n", i);
+		for (j = 0; j < HTT_STATS_MLO_MAX_IPC_RINGS; j++)
+			len += scnprintf(buf + len, buf_len - len,
+					 "mlo_ipc_ring_full_cnt[%u]: %u\n", j,
+					 htt_stats_buf->mlo_ipc_ring_full_cnt[i][j]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "=======================================\n");
+	}
+	stats_req->buf_len = len;
+}
+
+static void htt_print_pdev_rtt_resp_stats_tlv(const void *tag_buf,
+					      struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_stats_pdev_rtt_resp_stats_tlv *htt_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_RTT_RESP_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
+			 htt_stats_buf->pdev_id);
+	len += scnprintf(buf + len, buf_len - len, "tx_11mc_ftm_suc = %u\n",
+			 htt_stats_buf->tx_11mc_ftm_suc);
+	len += scnprintf(buf + len, buf_len - len, "tx_11mc_ftm_suc_retry = %u\n",
+			 htt_stats_buf->tx_11mc_ftm_suc_retry);
+	len += scnprintf(buf + len, buf_len - len, "tx_11mc_ftm_fail = %u\n",
+			 htt_stats_buf->tx_11mc_ftm_fail);
+	len += scnprintf(buf + len, buf_len - len, "rx_11mc_ftmr_cnt = %u\n",
+			 htt_stats_buf->rx_11mc_ftmr_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rx_11mc_ftmr_dup_cnt = %u\n",
+			 htt_stats_buf->rx_11mc_ftmr_dup_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rx_11mc_iftmr_cnt = %u\n",
+			 htt_stats_buf->rx_11mc_iftmr_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rx_11mc_iftmr_dup_cnt = %u\n",
+			 htt_stats_buf->rx_11mc_iftmr_dup_cnt);
+	len += scnprintf(buf + len, buf_len - len,
+			 "ftmr_drop_11mc_resp_role_not_enabled_cnt = %u\n",
+			 htt_stats_buf->ftmr_drop_11mc_resp_role_not_enabled_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tx_11az_ftm_successful = %u\n",
+			 htt_stats_buf->tx_11az_ftm_successful);
+	len += scnprintf(buf + len, buf_len - len, "tx_11az_ftm_failed = %u\n",
+			 htt_stats_buf->tx_11az_ftm_failed);
+	len += scnprintf(buf + len, buf_len - len, "rx_11az_ftmr_cnt = %u\n",
+			 htt_stats_buf->rx_11az_ftmr_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rx_11az_ftmr_dup_cnt = %u\n",
+			 htt_stats_buf->rx_11az_ftmr_dup_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rx_11az_iftmr_dup_cnt = %u\n",
+			 htt_stats_buf->rx_11az_iftmr_dup_cnt);
+	len += scnprintf(buf + len, buf_len - len, "initiator_active_responder_rejected_cnt = %u\n",
+			 htt_stats_buf->initiator_active_responder_rejected_cnt);
+	len += scnprintf(buf + len, buf_len - len, "malformed_ftmr = %u\n",
+			 htt_stats_buf->malformed_ftmr);
+	len += scnprintf(buf + len, buf_len - len, "ftmr_drop_ntb_resp_role_not_enabled_cnt = %u\n",
+			 htt_stats_buf->ftmr_drop_ntb_resp_role_not_enabled_cnt);
+	len += scnprintf(buf + len, buf_len - len, "ftmr_drop_tb_resp_role_not_enabled_cnt = %u\n",
+			 htt_stats_buf->ftmr_drop_tb_resp_role_not_enabled_cnt);
+	len += scnprintf(buf + len, buf_len - len, "responder_alloc_cnt = %u\n",
+			 htt_stats_buf->responder_alloc_cnt);
+	len += scnprintf(buf + len, buf_len - len, "responder_alloc_failure = %u\n",
+			 htt_stats_buf->responder_alloc_failure);
+	len += scnprintf(buf + len, buf_len - len, "responder_terminate_cnt = %u\n",
+			 htt_stats_buf->responder_terminate_cnt);
+	len += scnprintf(buf + len, buf_len - len, "active_rsta_open = %u\n",
+			 htt_stats_buf->active_rsta_open);
+	len += scnprintf(buf + len, buf_len - len, "active_rsta_mac = %u\n",
+			 htt_stats_buf->active_rsta_mac);
+	len += scnprintf(buf + len, buf_len - len, "active_rsta_mac_phy = %u\n",
+			 htt_stats_buf->active_rsta_mac_phy);
+	len += scnprintf(buf + len, buf_len - len, "pn_check_failure_cnt = %u\n",
+			 htt_stats_buf->pn_check_failure_cnt);
+	len += scnprintf(buf + len, buf_len - len, "num_assoc_ranging_peers = %u\n",
+			 htt_stats_buf->num_assoc_ranging_peers);
+	len += scnprintf(buf + len, buf_len - len, "num_unassoc_ranging_peers = %u\n",
+			 htt_stats_buf->num_unassoc_ranging_peers);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m1_auth_recv_cnt = %u\n",
+			 htt_stats_buf->pasn_m1_auth_recv_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m1_auth_drop_cnt = %u\n",
+			 htt_stats_buf->pasn_m1_auth_drop_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m2_auth_recv_cnt = %u\n",
+			 htt_stats_buf->pasn_m2_auth_recv_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m2_auth_tx_fail_cnt = %u\n",
+			 htt_stats_buf->pasn_m2_auth_tx_fail_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m3_auth_recv_cnt = %u\n",
+			 htt_stats_buf->pasn_m3_auth_recv_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m3_auth_drop_cnt = %u\n",
+			 htt_stats_buf->pasn_m3_auth_drop_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_peer_create_request_cnt = %u\n",
+			 htt_stats_buf->pasn_peer_create_request_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_peer_created_cnt = %u\n",
+			 htt_stats_buf->pasn_peer_created_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_peer_create_timeout_cnt = %u\n",
+			 htt_stats_buf->pasn_peer_create_timeout_cnt);
+	len += scnprintf(buf + len, buf_len - len, "sec_ranging_not_supported_mfp_not_setup = %u\n",
+			 htt_stats_buf->sec_ranging_not_supported_mfp_not_setup);
+	len += scnprintf(buf + len, buf_len - len,
+			 "non_sec_ranging_discarded_for_assoc_peer_with_mfpr_set = %u\n",
+			 htt_stats_buf->non_sec_ranging_discarded_for_assoc_peer_with_mfpr_set);
+	len += scnprintf(buf + len, buf_len - len,
+			 "open_ranging_discarded_with_URNM_MFPR_set_for_pasn_peer = %u\n",
+			 htt_stats_buf->open_ranging_discarded_with_URNM_MFPR_set_for_pasn_peer);
+	len += scnprintf(buf + len, buf_len - len,
+			 "unassoc_non_pasn_ranging_not_supported_with_URNM_MFPR = %u\n",
+			 htt_stats_buf->unassoc_non_pasn_ranging_not_supported_with_URNM_MFPR);
+	len += scnprintf(buf + len, buf_len - len, "invalid_ftm_request_params = %u\n",
+			 htt_stats_buf->invalid_ftm_request_params);
+	len += scnprintf(buf + len, buf_len - len, "requested_bw_format_not_supported = %u\n",
+			 htt_stats_buf->requested_bw_format_not_supported);
+	len += scnprintf(buf + len, buf_len - len,
+			 "ntb_unsec_unassoc_mode_ranging_peer_alloc_failed = %u\n",
+			 htt_stats_buf->ntb_unsec_unassoc_mode_ranging_peer_alloc_failed);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tb_unassoc_unsec_mode_pasn_peer_creation_failed = %u\n",
+			 htt_stats_buf->tb_unassoc_unsec_mode_pasn_peer_creation_failed);
+	len += scnprintf(buf + len, buf_len - len, "num_ranging_sequences_processed = %u\n",
+			 htt_stats_buf->num_ranging_sequences_processed);
+	len += scnprintf(buf + len, buf_len - len, "ndp_rx_cnt = %u\n",
+			 htt_stats_buf->ndp_rx_cnt);
+	len += scnprintf(buf + len, buf_len - len, "num_req_bw_20_MHz = %u\n",
+			 htt_stats_buf->num_req_bw_20_MHz);
+	len += scnprintf(buf + len, buf_len - len, "num_req_bw_40_MHz = %u\n",
+			 htt_stats_buf->num_req_bw_40_MHz);
+	len += scnprintf(buf + len, buf_len - len, "num_req_bw_80_MHz = %u\n",
+			 htt_stats_buf->num_req_bw_80_MHz);
+	len += scnprintf(buf + len, buf_len - len, "num_req_bw_160_MHz = %u\n",
+			 htt_stats_buf->num_req_bw_160_MHz);
+	len += scnprintf(buf + len, buf_len - len, "ntb_tx_ndp = %u\n",
+			 htt_stats_buf->ntb_tx_ndp);
+	len += scnprintf(buf + len, buf_len - len, "num_ntb_ranging_NDPAs_recv = %u\n",
+			 htt_stats_buf->num_ntb_ranging_NDPAs_recv);
+	len += scnprintf(buf + len, buf_len - len, "recv_lmr = %u\n",
+			 htt_stats_buf->recv_lmr);
+	len += scnprintf(buf + len, buf_len - len, "invalid_ftmr_cnt = %u\n",
+			 htt_stats_buf->invalid_ftmr_cnt);
+	len += scnprintf(buf + len, buf_len - len, "max_time_bw_meas_exp_cnt = %u\n",
+			 htt_stats_buf->max_time_bw_meas_exp_cnt);
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	stats_req->buf_len = len;
+}
+
+static void htt_print_pdev_rtt_init_stats_tlv(const void *tag_buf,
+					      struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_stats_pdev_rtt_init_stats_tlv *htt_pdev_rtt_init_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+	u8 i = 0;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_RTT_INIT_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pdev_id);
+	len += scnprintf(buf + len, buf_len - len, "tx_11mc_ftmr_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tx_11mc_ftmr_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tx_11mc_ftmr_fail = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tx_11mc_ftmr_fail);
+	len += scnprintf(buf + len, buf_len - len, "tx_11mc_ftmr_suc_retry = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tx_11mc_ftmr_suc_retry);
+	len += scnprintf(buf + len, buf_len - len, "rx_11mc_ftm_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->rx_11mc_ftm_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rx_11az_ftm_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->rx_11az_ftm_cnt);
+	len += scnprintf(buf + len, buf_len - len, "initiator_terminate_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->initiator_terminate_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tx_meas_req_count = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tx_meas_req_count);
+	len += scnprintf(buf + len, buf_len - len, "tx_11az_ftmr_start = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tx_11az_ftmr_start);
+	len += scnprintf(buf + len, buf_len - len, "tx_11az_ftmr_stop = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tx_11az_ftmr_stop);
+	len += scnprintf(buf + len, buf_len - len, "tx_11az_ftmr_fail = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tx_11az_ftmr_fail);
+	len += scnprintf(buf + len, buf_len - len, "ftmr_tx_failed_null_11az_peer = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ftmr_tx_failed_null_11az_peer);
+	len += scnprintf(buf + len, buf_len - len, "ftmr_retry_timeout = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ftmr_retry_timeout);
+	len += scnprintf(buf + len, buf_len - len, "ftm_parse_failure = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ftm_parse_failure);
+	len += scnprintf(buf + len, buf_len - len, "incompatible_ftm_params = %u\n",
+			 htt_pdev_rtt_init_stats_buf->incompatible_ftm_params);
+	len += scnprintf(buf + len, buf_len - len, "ranging_negotiation_successful_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ranging_negotiation_successful_cnt);
+	len += scnprintf(buf + len, buf_len - len, "active_ista = %u\n",
+			 htt_pdev_rtt_init_stats_buf->active_ista);
+	len += scnprintf(buf + len, buf_len - len, "init_role_not_enabled = %u\n",
+			 htt_pdev_rtt_init_stats_buf->init_role_not_enabled);
+	len += scnprintf(buf + len, buf_len - len, "invalid_preamble = %u\n",
+			 htt_pdev_rtt_init_stats_buf->invalid_preamble);
+	len += scnprintf(buf + len, buf_len - len, "invalid_chan_bw_format = %u\n",
+			 htt_pdev_rtt_init_stats_buf->invalid_chan_bw_format);
+	len += scnprintf(buf + len, buf_len - len, "mgmt_buff_alloc_fail_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->mgmt_buff_alloc_fail_cnt);
+	len += scnprintf(buf + len, buf_len - len, "sec_ranging_req_in_open_mode = %u\n",
+			 htt_pdev_rtt_init_stats_buf->sec_ranging_req_in_open_mode);
+	len += scnprintf(buf + len, buf_len - len, "max_time_bw_meas_exp_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->max_time_bw_meas_exp_cnt);
+	len += scnprintf(buf + len, buf_len - len, "num_tb_ranging_requests = %u\n",
+			 htt_pdev_rtt_init_stats_buf->num_tb_ranging_requests);
+	len += scnprintf(buf + len, buf_len - len, "tb_meas_duration_expiry_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->tb_meas_duration_expiry_cnt);
+	len += scnprintf(buf + len, buf_len - len, "ntbr_triggered_successfully = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ntbr_triggered_successfully);
+	len += scnprintf(buf + len, buf_len - len, "ntbr_trigger_failed = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ntbr_trigger_failed);
+	len += scnprintf(buf + len, buf_len - len, "invalid_or_no_vreg_idx = %u\n",
+			 htt_pdev_rtt_init_stats_buf->invalid_or_no_vreg_idx);
+	len += scnprintf(buf + len, buf_len - len, "set_vreg_params_failed = %u\n",
+			 htt_pdev_rtt_init_stats_buf->set_vreg_params_failed);
+	len += scnprintf(buf + len, buf_len - len, "sac_mismatch = %u\n",
+			 htt_pdev_rtt_init_stats_buf->sac_mismatch);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m1_auth_recv_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_m1_auth_recv_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m1_auth_tx_fail_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_m1_auth_tx_fail_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m2_auth_recv_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_m2_auth_recv_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m2_auth_drop_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_m2_auth_drop_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m3_auth_recv_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_m3_auth_recv_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_m3_auth_tx_fail_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_m3_auth_tx_fail_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_peer_create_request_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_peer_create_request_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_peer_created_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_peer_created_cnt);
+	len += scnprintf(buf + len, buf_len - len, "pasn_peer_create_timeout_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->pasn_peer_create_timeout_cnt);
+	len += scnprintf(buf + len, buf_len - len, "ntbr_ndpa_failed = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ntbr_ndpa_failed);
+	len += scnprintf(buf + len, buf_len - len, "ntbr_sequence_successful = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ntbr_sequence_successful);
+	len += scnprintf(buf + len, buf_len - len, "ntbr_ndp_failed = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ntbr_ndp_failed);
+	len += scnprintf(buf + len, buf_len - len, "num_tb_ranging_NDPAs_recv = %u\n",
+			 htt_pdev_rtt_init_stats_buf->num_tb_ranging_NDPAs_recv);
+	len += scnprintf(buf + len, buf_len - len, "ndp_rx_cnt = %u\n",
+			 htt_pdev_rtt_init_stats_buf->ndp_rx_cnt);
+	len += scnprintf(buf + len, buf_len - len, "num_trigger_frames_received = %u\n",
+			 htt_pdev_rtt_init_stats_buf->num_trigger_frames_received);
+	for (i = 0; i < (HTT_STATS_SCH_CMD_STATUS_CNT - 1); i++)
+		len += scnprintf(buf + len, buf_len - len, "num_sch_cmd_status_%d = %u\n",
+				 i, htt_pdev_rtt_init_stats_buf->sch_cmd_status_cnts[i]);
+	len += scnprintf(buf + len, buf_len - len, "num_sch_cmd_status_other_failure = %u\n",
+			 htt_pdev_rtt_init_stats_buf->sch_cmd_status_cnts
+			 [HTT_STATS_SCH_CMD_STATUS_CNT - 1]);
+	len += scnprintf(buf + len, buf_len - len, "lmr_timeout = %u\n",
+			 htt_pdev_rtt_init_stats_buf->lmr_timeout);
+	len += scnprintf(buf + len, buf_len - len, "lmr_recv = %u\n",
+			 htt_pdev_rtt_init_stats_buf->lmr_recv);
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	stats_req->buf_len = len;
+}
+
+static void htt_print_pdev_rtt_hw_stats_tlv(const void *tag_buf,
+					    struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_stats_pdev_rtt_hw_stats_tlv *htt_pdev_rtt_hw_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_PDEV_RTT_HW_STATS_TAG:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	len += scnprintf(buf + len, buf_len - len, "ista_ranging_ndpa_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->ista_ranging_ndpa_cnt);
+	len += scnprintf(buf + len, buf_len - len, "ista_ranging_ndp_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->ista_ranging_ndp_cnt);
+	len += scnprintf(buf + len, buf_len - len, "ista_ranging_i2r_lmr_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->ista_ranging_i2r_lmr_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rtsa_ranging_resp_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->rtsa_ranging_resp_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rtsa_ranging_ndp_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->rtsa_ranging_ndp_cnt);
+	len += scnprintf(buf + len, buf_len - len, "rsta_ranging_lmr_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->rsta_ranging_lmr_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tb_ranging_cts2s_rcvd_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->tb_ranging_cts2s_rcvd_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tb_ranging_ndp_rcvd_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->tb_ranging_ndp_rcvd_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tb_ranging_lmr_rcvd_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->tb_ranging_lmr_rcvd_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tb_ranging_tf_poll_resp_sent_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->tb_ranging_tf_poll_resp_sent_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tb_ranging_tf_sound_resp_sent_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->tb_ranging_tf_sound_resp_sent_cnt);
+	len += scnprintf(buf + len, buf_len - len, "tb_ranging_tf_report_resp_sent_cnt = %u\n",
+			 htt_pdev_rtt_hw_stats_buf->tb_ranging_tf_report_resp_sent_cnt);
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	stats_req->buf_len = len;
+}
+
+static void htt_print_pdev_rtt_tbr_selfgen_queued_stats_tlv(const void *tag_buf,
+							    struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_stats_pdev_rtt_tbr_selfgen_queued_stats_tlv
+			*htt_pdev_rtt_selfgen_queued_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_STATS_PDEV_RTT_TBR_SELFGEN_QUEUED_STATS_TAG:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	len += scnprintf(buf + len, buf_len - len, "SU POLL = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_su_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TF_POLL]);
+	len += scnprintf(buf + len, buf_len - len, "SU SOUND = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_su_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TF_SOUND]);
+	len += scnprintf(buf + len, buf_len - len, "SU NDPA = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_su_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TBR_NDPA]);
+	len += scnprintf(buf + len, buf_len - len, "SU NDP = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_su_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TBR_NDP]);
+	len += scnprintf(buf + len, buf_len - len, "SU LMR = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_su_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TBR_LMR]);
+	len += scnprintf(buf + len, buf_len - len, "SU TF_REPORT = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_su_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TF_REPORT]);
+	len += scnprintf(buf + len, buf_len - len, "MU POLL = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_mu_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TF_POLL]);
+	len += scnprintf(buf + len, buf_len - len, "MU SOUND = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_mu_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TF_SOUND]);
+	len += scnprintf(buf + len, buf_len - len, "MU NDPA = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_mu_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TBR_NDPA]);
+	len += scnprintf(buf + len, buf_len - len, "MU NDP = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_mu_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TBR_NDP]);
+	len += scnprintf(buf + len, buf_len - len, "MU LMR = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_mu_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TBR_LMR]);
+	len += scnprintf(buf + len, buf_len - len, "MU TF_REPORT = %u\n",
+			 htt_pdev_rtt_selfgen_queued_stats_buf->tbr_mu_ftype_queued
+			 [HTT_TXSEND_FTYPE_SGEN_TF_REPORT]);
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	stats_req->buf_len = len;
+}
+
+static void htt_print_pdev_rtt_tbr_cmd_result_stats_tlv(const void *tag_buf,
+							struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_stats_pdev_rtt_tbr_cmd_result_stats_tlv
+			*htt_pdev_rtt_cmd_result_stats_buf = tag_buf;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 len = stats_req->buf_len;
+	u8 *buf = stats_req->buf;
+	u8 j = 0;
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_STATS_PDEV_RTT_TBR_CMD_RESULT_STATS_TAG:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+
+	for (j = 0; j < htt_pdev_rtt_cmd_result_stats_buf->tbr_num_sch_cmd_result_buckets; j++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "SU frame_SGEN_TF_POLL : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_su_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TF_POLL][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "SU frame_SGEN_TF_SOUND : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_su_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TF_SOUND][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "SU frame_SGEN_TBR_NDPA : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_su_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TBR_NDPA][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "SU frame_SGEN_TBR_NDP : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_su_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TBR_NDP][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "SU frame_SGEN_TBR_LMR : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_su_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TBR_LMR][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "SU frame_SGEN_TF_REPORT : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_su_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TF_REPORT][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "MU frame_SGEN_TF_POLL : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_mu_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TF_POLL][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "MU frame_SGEN_TF_SOUND : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_mu_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TF_SOUND][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "MU frame_SGEN_TBR_NDPA : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_mu_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TBR_NDPA][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "MU frame_SGEN_TBR_NDP : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_mu_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TBR_NDP][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "MU frame_SGEN_TBR_LMR : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_mu_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TBR_LMR][j]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "MU frame_SGEN_TF_REPORT : num_sch_cmd_status_%u = %u\n", j,
+				 htt_pdev_rtt_cmd_result_stats_buf->opaque_tbr_mu_ftype_cmd_result
+				 [HTT_TXSEND_FTYPE_SGEN_TF_REPORT][j]);
+	}
+	len += scnprintf(buf + len, buf_len - len,
+			 "===============================================\n");
+	stats_req->buf_len = len;
+}
+
 static int ath12k_dbg_htt_ext_stats_parse(struct ath12k_base *ab,
 					  u16 tag, u16 len, const void *tag_buf,
 					  void *user_data)
@@ -8655,7 +10535,9 @@ static int ath12k_dbg_htt_ext_stats_pars
 	case HTT_STATS_RX_PDEV_BE_UL_MIMO_USER_STATS_TAG:
 		htt_print_be_ul_mimo_user_stats(tag_buf, stats_req);
 		break;
-
+	case HTT_STATS_RX_RING_STATS_TAG:
+		htt_print_rx_fw_ring_stats(tag_buf, stats_req);
+		break;
 	case HTT_STATS_RX_PDEV_BE_UL_TRIG_STATS_TAG:
 		htt_print_be_ul_ofdma_trigger_stats(tag_buf, stats_req);
 		break;
@@ -8871,6 +10753,39 @@ static int ath12k_dbg_htt_ext_stats_pars
 	case HTT_STATS_UMAC_SSR_TAG:
 		htt_print_umac_ssr_stats_tlv(tag_buf, stats_req);
 		break;
+	case HTT_STATS_PEER_BE_OFDMA_STATS_TAG:
+		htt_print_peer_be_ofdma_stats(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PDEV_TDMA_TAG:
+		htt_print_pdev_tdma_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_CODEL_SVC_CLASS_TAG:
+		htt_print_codel_svc_class_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_CODEL_MSDUQ_TAG:
+		htt_print_codel_msduq_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_MLO_SCHED_STATS_TAG:
+		htt_print_mlo_sched_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PDEV_MLO_IPC_STATS_TAG:
+		htt_print_mlo_ipc_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PDEV_RTT_RESP_STATS_TAG:
+		htt_print_pdev_rtt_resp_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PDEV_RTT_INIT_STATS_TAG:
+		htt_print_pdev_rtt_init_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PDEV_RTT_HW_STATS_TAG:
+		htt_print_pdev_rtt_hw_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PDEV_RTT_TBR_SELFGEN_QUEUED_STATS_TAG:
+		htt_print_pdev_rtt_tbr_selfgen_queued_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PDEV_RTT_TBR_CMD_RESULT_STATS_TAG:
+		htt_print_pdev_rtt_tbr_cmd_result_stats_tlv(tag_buf, stats_req);
+		break;
 	default:
 		break;
 	}
--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
@@ -17,6 +17,10 @@
 #define HTT_STATS_RESET_BITMAP32_BIT(_idx) (1 << HTT_STATS_RESET_BITMAP32_OFFSET(_idx))
 #define HTT_STATS_RESET_BITMAP64_BIT(_idx) (1 << HTT_STATS_RESET_BITMAP64_OFFSET(_idx))
 
+#define HTT_NUM_AC_WMM	               0x4
+#define HTT_MAX_NUM_SBT_INTR	       4
+#define HTT_TX_CV_CORR_MAX_NUM_COLUMNS 8
+
 enum htt_tlv_tag_t {
 	HTT_STATS_TX_PDEV_CMN_TAG                           = 0,
 	HTT_STATS_TX_PDEV_UNDERRUN_TAG                      = 1,
@@ -199,6 +203,26 @@ enum htt_tlv_tag_t {
 	HTT_STATS_TX_PDEV_MLO_ABORT_TAG			    = 177,
 	HTT_STATS_TX_PDEV_MLO_TXOP_ABORT_TAG		    = 178,
 	HTT_STATS_UMAC_SSR_TAG				    = 179,
+	HTT_STATS_PEER_BE_OFDMA_STATS_TAG		    = 180,
+	HTT_STATS_MLO_UMAC_SSR_TRIGGER_TAG		    = 181,
+	HTT_STATS_MLO_UMAC_SSR_CMN_TAG			    = 182,
+	HTT_STATS_MLO_UMAC_SSR_KPI_TSTMP_TAG		    = 183,
+	HTT_STATS_MLO_UMAC_SSR_DBG_TAG			    = 184,
+	HTT_STATS_MLO_UMAC_SSR_HANDSHAKE_TAG		    = 185,
+	HTT_STATS_MLO_UMAC_SSR_MLO_TAG			    = 186,
+	HTT_STATS_PDEV_TDMA_TAG				    = 187,
+	HTT_STATS_CODEL_SVC_CLASS_TAG			    = 188,
+	HTT_STATS_CODEL_MSDUQ_TAG			    = 189,
+	HTT_STATS_MLO_SCHED_STATS_TAG			    = 190,
+	HTT_STATS_PDEV_MLO_IPC_STATS_TAG		    = 191,
+	HTT_STATS_WHAL_WSI_TAG				    = 192,
+	HTT_STATS_LATENCY_PROF_CAL_DATA_TAG		    = 193,
+	HTT_STATS_PDEV_RTT_RESP_STATS_TAG		    = 194,
+	HTT_STATS_PDEV_RTT_INIT_STATS_TAG		    = 195,
+	HTT_STATS_PDEV_RTT_HW_STATS_TAG			    = 196,
+	HTT_STATS_PDEV_RTT_TBR_SELFGEN_QUEUED_STATS_TAG	    = 197,
+	HTT_STATS_PDEV_RTT_TBR_CMD_RESULT_STATS_TAG	    = 198,
+
 	HTT_STATS_MAX_TAG,
 };
 
@@ -336,6 +360,11 @@ struct htt_tx_pdev_stats_cmn_tlv {
 	u32 tx_abort_suspend_cnt;
 	u32 tgt_specific_opaque_txq_suspend_info;
 	u32 last_suspend_reason;
+	u32 num_dyn_mimo_ps_dlmumimo_sequences;
+	u32 num_su_txbf_denylisted;
+	u32 pdev_up_time_us_low;
+	u32 pdev_up_time_us_high;
+	u32 ofdma_seq_flush;
 };
 
 /* NOTE: Variable length TLV, use length spec to infer array size */
@@ -457,6 +486,17 @@ struct htt_hw_stats_pdev_errs_tlv {
 	u32    phy_warm_reset_reason_tx_hwsch_reset_war;
 	u32    phy_warm_reset_reason_hwsch_wdog_or_cca_wdog_war;
 	u32    fw_rx_rings_reset;
+	u32    rx_dest_drain_rx_descs_leak_prevention_done;
+	u32    rx_dest_drain_rx_descs_saved_cnt;
+	u32    rx_dest_drain_rxdma2reo_leak_detected;
+	u32    rx_dest_drain_rxdma2fw_leak_detected;
+	u32    rx_dest_drain_rxdma2wbm_leak_detected;
+	u32    rx_dest_drain_rxdma1_2sw_leak_detected;
+	u32    rx_dest_drain_rx_drain_ok_mac_idle;
+	u32    rx_dest_drain_ok_mac_not_idle;
+	u32    rx_dest_drain_prerequisite_invld;
+	u32    rx_dest_drain_skip_for_non_lmac_reset;
+	u32    rx_dest_drain_hw_fifo_not_empty_post_drain_wait;
 };
 
 struct htt_hw_stats_whal_tx_tlv {
@@ -545,6 +585,17 @@ struct htt_tx_tid_stats_v1_tlv {
 	u32 tid_tx_airtime;
 	u32 allow_n_flags;
 	u32 sendn_frms_allowed;
+	u32 tid_ext_flags;
+	u32 tid_ext2_flags;
+	u32 tid_flush_reason;
+	u32 mlo_flush_tqm_status_pending_low;
+	u32 mlo_flush_tqm_status_pending_high;
+	u32 mlo_flush_partner_info_low;
+	u32 mlo_flush_partner_info_high;
+	u32 mlo_flush_initator_info_low;
+	u32 mlo_flush_initator_info_high;
+	u32 head_msdu_tqm_timestamp_us;
+	u32 head_msdu_tqm_latency_us;
 };
 
 #define	HTT_RX_TID_STATS_SW_PEER_ID	GENMASK(15, 0)
@@ -593,6 +644,28 @@ struct htt_peer_stats_cmn_tlv {
 #define HTT_PEER_DETAILS_PDEV_ID	GENMASK(15, 8)
 #define HTT_PEER_DETAILS_AST_IDX	GENMASK(31, 16)
 
+#define HTT_PEER_DETAILS_ML_PEER_OFFSET_BYTES 32
+#define HTT_PEER_DETAILS_ML_PEER_OFFSET_DWORD 8
+#define HTT_PEER_DETAILS_ML_PEER_ID_VALID_M   0x00000001
+#define HTT_PEER_DETAILS_ML_PEER_ID_VALID_S   0
+#define HTT_PEER_DETAILS_ML_PEER_ID_M         0x00001ffe
+#define HTT_PEER_DETAILS_ML_PEER_ID_S         1
+#define HTT_PEER_DETAILS_LINK_IDX_M           0x001fe000
+#define HTT_PEER_DETAILS_LINK_IDX_S           13
+#define HTT_PEER_DETAILS_USE_PPE_M            0x00200000
+#define HTT_PEER_DETAILS_USE_PPE_S            21
+#define HTT_PEER_DETAILS_SRC_INFO_M           0x00000fff
+#define HTT_PEER_DETAILS_SRC_INFO_S           0
+
+#define HTT_PEER_DETAILS_SET(word, httsym, val)  \
+	do {					 \
+		HTT_CHECK_SET_VAL(HTT_PEER_DETAILS_ ## httsym, val);          \
+		(word) |= ((val) << HTT_PEER_DETAILS_ ## httsym ## _S);         \
+	} while (0)
+
+#define HTT_PEER_DETAILS_GET(word, httsym) \
+	(((word) & HTT_PEER_DETAILS_ ## httsym ## _M) >> HTT_PEER_DETAILS_ ## httsym ## _S)
+
 struct htt_peer_details_tlv {
 	u32 peer_type;
 	u32 sw_peer_id;
@@ -600,20 +673,48 @@ struct htt_peer_details_tlv {
 	struct htt_mac_addr mac_addr;
 	u32 peer_flags;
 	u32 qpeer_flags;
+
+	/* Dword 8 */
+	union {
+		u32 word__ml_peer_id_valid__ml_peer_id__link_idx__use_ppe;
+		struct {
+			u32	ml_peer_id_valid  : 1,
+				ml_peer_id        : 12,
+				link_idx          : 8,
+				use_ppe           : 1,
+				rsvd0             : 10;
+		};
+	};
+
+	/* Dword 9 */
+	union {
+		u32 word__src_info;
+		struct {
+			u32	src_info          : 12,
+				rsvd1             : 20;
+		};
+	};
 };
 
 struct htt_ast_entry_tlv {
 	u32 sw_peer_id;
 	u32 ast_index;
-	u8 pdev_id;
-	u8 vdev_id;
-	u8 next_hop;
-	u8 mcast;
-	u8 monitor_direct;
-	u8 mesh_sta;
-	u8 mec;
-	u8 intra_bss;
-	u32 reserved;
+	u32
+		pdev_id        : 2,
+		vdev_id        : 8,
+		next_hop       : 1,
+		mcast          : 1,
+		monitor_direct : 1,
+		mesh_sta       : 1,
+		mec            : 1,
+		intra_bss      : 1,
+		chip_id        : 2,
+		ml_peer_id     : 13,
+		on_chip        : 1;
+	u32
+		tx_monitor_override_sta : 1,
+		rx_monitor_override_sta : 1,
+		reserved1               : 30;
 	struct htt_mac_addr mac_addr;
 };
 
@@ -644,6 +745,7 @@ enum htt_stats_ppdu_type {
 
 #define HTT_TX_PEER_STATS_NUM_MCS_COUNTERS        12
 #define HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS   2
+#define HTT_TX_PEER_STATS_NUM_EXTRA2_MCS_COUNTERS  2
 #define HTT_TX_PEER_STATS_NUM_GI_COUNTERS          4
 #define HTT_TX_PEER_STATS_NUM_DCM_COUNTERS         5
 #define HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS      4
@@ -651,6 +753,7 @@ enum htt_stats_ppdu_type {
 #define HTT_TX_PEER_STATS_NUM_BW_COUNTERS          4
 #define HTT_TX_PEER_STATS_NUM_SPATIAL_STREAMS      8
 #define HTT_TX_PEER_STATS_NUM_PREAMBLE_TYPES       HTT_STATS_PREAM_COUNT
+#define HTT_TX_PEER_STATS_NUM_REDUCED_CHAN_TYPES   2
 
 struct htt_tx_peer_rate_stats_tlv {
 	u32 tx_ldpc;
@@ -674,16 +777,27 @@ struct htt_tx_peer_rate_stats_tlv {
 
 	/* Counters to track packets in dcm mcs (MCS 0, 1, 3, 4) */
 	u32 tx_dcm[HTT_TX_PEER_STATS_NUM_DCM_COUNTERS];
-
+	u32 tx_mcs_ext[HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 tx_su_mcs_ext[HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 tx_mu_mcs_ext[HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 tx_stbc_ext[HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 tx_gi_ext[HTT_TX_PEER_STATS_NUM_GI_COUNTERS]
+		     [HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 reduced_tx_bw[HTT_TX_PEER_STATS_NUM_REDUCED_CHAN_TYPES]
+			 [HTT_TX_PEER_STATS_NUM_BW_COUNTERS];
+	u32 tx_bw_320mhz;
+	u32 tx_mcs_ext_2[HTT_TX_PEER_STATS_NUM_EXTRA2_MCS_COUNTERS];
 };
 
 #define HTT_RX_PEER_STATS_NUM_MCS_COUNTERS        12
 #define HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS   2
+#define HTT_RX_PEER_STATS_NUM_EXTRA2_MCS_COUNTERS  2
 #define HTT_RX_PEER_STATS_NUM_GI_COUNTERS          4
 #define HTT_RX_PEER_STATS_NUM_DCM_COUNTERS         5
 #define HTT_RX_PEER_STATS_NUM_BW_COUNTERS          4
 #define HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS      8
 #define HTT_RX_PEER_STATS_NUM_PREAMBLE_TYPES       HTT_STATS_PREAM_COUNT
+#define HTT_RX_PEER_STATS_NUM_REDUCED_CHAN_TYPES   2
 
 struct htt_rx_peer_rate_stats_tlv {
 	u32 nsts;
@@ -732,6 +846,12 @@ struct htt_rx_peer_rate_stats_tlv {
 	u32 rx_stbc_ext[HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
 	u32 rx_gi_ext[HTT_RX_PEER_STATS_NUM_GI_COUNTERS]
 		     [HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 reduced_rx_bw[HTT_RX_PEER_STATS_NUM_REDUCED_CHAN_TYPES]
+			 [HTT_RX_PEER_STATS_NUM_BW_COUNTERS];
+	s8 rx_per_chain_rssi_in_dbm_ext[HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS]
+				       [HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS];
+	u32 rx_bw_320mhz;
+	u32 rx_mcs_ext_2[HTT_RX_PEER_STATS_NUM_EXTRA2_MCS_COUNTERS];
 };
 
 enum htt_peer_stats_req_mode {
@@ -886,6 +1006,7 @@ enum htt_tx_mumimo_grp_invalid_reason_co
 
 #define HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS    4
 #define HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS    8
+#define HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS    8
 #define HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS       74
 #define HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS    8
 #define HTT_STATS_MAX_MUMIMO_GRP_SZ		      8
@@ -916,6 +1037,11 @@ struct htt_tx_selfgen_cmn_stats_tlv {
 	u32 su_sw_rts_err;
 	u32 su_sw_rts_flushed;
 	u32 su_sw_rts_rcvd_cts_diff_bw;
+	u32 combined_ax_bsr_trigger_tried[HTT_NUM_AC_WMM];
+	u32 combined_ax_bsr_trigger_err[HTT_NUM_AC_WMM];
+	u32 standalone_ax_bsr_trigger_tried[HTT_NUM_AC_WMM];
+	u32 standalone_ax_bsr_trigger_err[HTT_NUM_AC_WMM];
+	u32 smart_basic_trig_sch_histogram[HTT_MAX_NUM_SBT_INTR];
 };
 
 struct htt_tx_selfgen_ac_stats_tlv {
@@ -959,12 +1085,25 @@ struct htt_tx_selfgen_ax_stats_tlv {
 	u32 ax_bsr_trigger;
 	u32 ax_mu_bar_trigger;
 	u32 ax_mu_rts_trigger;
+	u32 ax_ulmumimo_trigger;
 	u32 ax_su_ndpa_queued;
 	u32 ax_su_ndp_queued;
 	u32 ax_mu_mimo_ndpa_queued;
 	u32 ax_mu_mimo_ndp_queued;
 	u32 ax_mu_mimo_brpoll_queued[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1];
 	u32 ax_ul_mumimo_trigger[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS];
+	u32 combined_ax_bsr_trigger_tried[HTT_NUM_AC_WMM];
+	u32 combined_ax_bsr_trigger_err[HTT_NUM_AC_WMM];
+	u32 standalone_ax_bsr_trigger_tried[HTT_NUM_AC_WMM];
+	u32 standalone_ax_bsr_trigger_err[HTT_NUM_AC_WMM];
+	u32 manual_ax_su_ulofdma_basic_trigger[HTT_NUM_AC_WMM];
+	u32 manual_ax_su_ulofdma_basic_trigger_err[HTT_NUM_AC_WMM];
+	u32 manual_ax_mu_ulofdma_basic_trigger[HTT_NUM_AC_WMM];
+	u32 manual_ax_mu_ulofdma_basic_trigger_err[HTT_NUM_AC_WMM];
+	u32 ax_basic_trigger_per_ac[HTT_NUM_AC_WMM];
+	u32 ax_basic_trigger_errors_per_ac[HTT_NUM_AC_WMM];
+	u32 ax_mu_bar_trigger_per_ac[HTT_NUM_AC_WMM];
+	u32 ax_mu_bar_trigger_errors_per_ac[HTT_NUM_AC_WMM];
 };
 
 struct htt_tx_selfgen_ac_err_stats_tlv {
@@ -1016,6 +1155,9 @@ struct htt_tx_selfgen_ax_err_stats_tlv {
 	u32 ax_mu_mimo_ndp_flushed;
 	u32 ax_mu_mimo_brpoll_flushed[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1];
 	u32 ax_ul_mumimo_trigger_err[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS];
+	u32 ax_basic_trigger_partial_resp;
+	u32 ax_bsr_trigger_partial_resp;
+	u32 ax_mu_bar_trigger_partial_resp;
 };
 
 /* == TX MU STATS == */
@@ -1099,25 +1241,28 @@ struct htt_tx_pdev_mu_mimo_mpdu_stats_tl
 #define HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST 10
 #define HTT_STATS_MAX_NUM_SCHED_STATUS_WORDS \
 	(HTT_STATS_NUM_NR_BINS * HTT_STATS_MAX_NUM_SCHED_STATUS)
-#define HTT_STATS_MAX_MU_PPDU_PER_BURST_WORDS \
+#define HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST_WORDS \
 	(HTT_STATS_NUM_NR_BINS * HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST)
 
 enum htt_stats_hw_mode {
 	HTT_STATS_HWMODE_AC = 0,
 	HTT_STATS_HWMODE_AX = 1,
+	HTT_STATS_HWMODE_BE = 2,
 };
 
 struct htt_tx_pdev_mu_ppdu_dist_stats_tlv_v {
 	u32 hw_mode; /* HTT_STATS_HWMODE_xx */
-	u32 mu_mimo_num_seq_term_status[HTT_STATS_MAX_MU_PPDU_PER_BURST_WORDS];
-	u32 mu_mimo_num_ppdu_completed_per_burst[HTT_STATS_MAX_MU_PPDU_PER_BURST_WORDS];
+	u32 mu_mimo_num_seq_term_status[HTT_STATS_MAX_NUM_SCHED_STATUS_WORDS];
+	u32 mu_mimo_num_ppdu_completed_per_burst[HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST_WORDS];
 	u32 mu_mimo_num_seq_posted[HTT_STATS_NUM_NR_BINS];
-	u32 mu_mimo_num_ppdu_posted_per_burst[HTT_STATS_MAX_MU_PPDU_PER_BURST_WORDS];
+	u32 mu_mimo_num_ppdu_posted_per_burst[HTT_STATS_MAX_NUM_MU_PPDU_PER_BURST_WORDS];
 };
 
 #define HTT_STATS_TX_SCHED_MODE_MU_MIMO_AC  1
 #define HTT_STATS_TX_SCHED_MODE_MU_MIMO_AX  2
 #define HTT_STATS_TX_SCHED_MODE_MU_OFDMA_AX 3
+#define HTT_STATS_TX_SCHED_MODE_MU_OFDMA_BE 4
+#define HTT_STATS_TX_SCHED_MODE_MU_MIMO_BE 5
 
 struct htt_tx_pdev_mpdu_stats_tlv {
 	/* mpdu level stats */
@@ -1303,6 +1448,15 @@ struct htt_tx_tqm_cmn_stats_tlv {
 	u32 tqm_active_tids;
 	u32 tqm_inactive_tids;
 	u32 tqm_active_msduq_flows;
+
+	/* SAWF system delay reference timestamp updation related stats */
+	u32 total_msduq_timestamp_updates;
+	u32 total_msduq_timestamp_updates_by_get_mpdu_head_info_cmd;
+	u32 total_msduq_timestamp_updates_by_empty_to_nonempty_status;
+	u32 total_get_mpdu_head_info_cmds_by_sched_algo_la_query;
+	u32 total_get_mpdu_head_info_cmds_by_tac;
+	u32 total_gen_mpdu_cmds_by_sched_algo_la_query;
+	u32 high_prio_q_not_empty;
 };
 
 struct htt_tx_tqm_error_stats_tlv {
@@ -1487,6 +1641,43 @@ struct htt_tx_de_cmn_stats_tlv {
 	u32   tcl_res_addrx_timeout;
 	u32   invalid_vdev;
 	u32   invalid_tcl_exp_frame_desc;
+	u32   vdev_id_mismatch_cnt;
+};
+
+#define HTT_STATS_RX_FW_RING_SIZE_NUM_ENTRIES(dword) (((dword) >> 0)  & 0xffff)
+#define HTT_STATS_RX_FW_RING_CURR_NUM_ENTRIES(dword) (((dword) >> 16) & 0xffff)
+#define WAL_RX_REO2SW4_BK_HIST_COUNT 3
+
+/* Rx debug info for status rings */
+struct htt_stats_rx_ring_stats_tlv {
+	/**
+	 * BIT [15 :  0] :- max possible number of entries in respective ring
+	 *                  (size of the ring in terms of entries)
+	 * BIT [16 : 31] :- current number of entries occupied in respective ring
+	 */
+	u32 entry_status_sw2rxdma;
+	u32 entry_status_rxdma2reo;
+	u32 entry_status_reo2sw1;
+	u32 entry_status_reo2sw4;
+	u32 entry_status_refillringipa;
+	u32 entry_status_refillringhost;
+	/** datarate - Moving Average of Number of Entries */
+	u32 datarate_refillringipa;
+	u32 datarate_refillringhost;
+	/**
+	 * refillringhost_backpress_hist and refillringipa_backpress_hist are
+	 * deprecated, and will be filled with 0x0 by the target.
+	 */
+	u32 refillringhost_backpress_hist[WAL_RX_REO2SW4_BK_HIST_COUNT];
+	u32 refillringipa_backpress_hist[WAL_RX_REO2SW4_BK_HIST_COUNT];
+	/**
+	 * Number of times reo2sw4(IPA_DEST_RING) ring is back-pressured
+	 * in recent time periods
+	 * element 0: in last 0 to 250ms
+	 * element 1: 250ms to 500ms
+	 * element 2: above 500ms
+	 */
+	u32 reo2sw4ringipa_backpress_hist[WAL_RX_REO2SW4_BK_HIST_COUNT];
 };
 
 /* == RING-IF STATS == */
@@ -1640,35 +1831,35 @@ enum HTT_TX_PDEV_STATS_NUM_PUNCTURED_MOD
 #define HTT_TX_PDEV_STATS_NUM_HE_SIG_B_MCS_COUNTERS 6
 #define HTT_TX_PDEV_STATS_NUM_EHT_SIG_MCS_COUNTERS 4
 
-enum HTT_TX_PDEV_STATS_AX_RU_SIZE {
-	HTT_TX_PDEV_STATS_AX_RU_SIZE_26,
-	HTT_TX_PDEV_STATS_AX_RU_SIZE_52,
-	HTT_TX_PDEV_STATS_AX_RU_SIZE_106,
-	HTT_TX_PDEV_STATS_AX_RU_SIZE_242,
-	HTT_TX_PDEV_STATS_AX_RU_SIZE_484,
-	HTT_TX_PDEV_STATS_AX_RU_SIZE_996,
-	HTT_TX_PDEV_STATS_AX_RU_SIZE_996x2,
-	HTT_TX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS,
-};
-
-enum HTT_TX_PDEV_STATS_BE_RU_SIZE {
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_26,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_52,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_52_26,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_106,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_106_26,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_242,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_484,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_484_242,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996_484,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996_484_242,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996x2,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996x2_484,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996x3,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996x3_484,
-	HTT_TX_PDEV_STATS_BE_RU_SIZE_996x4,
-	HTT_TX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS,
+enum HTT_TX_RX_PDEV_STATS_AX_RU_SIZE {
+	HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_26,
+	HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_52,
+	HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_106,
+	HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_242,
+	HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_484,
+	HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_996,
+	HTT_TX_RX_PDEV_STATS_AX_RU_SIZE_996x2,
+	HTT_TX_RX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS,
+};
+
+enum HTT_TX_RX_PDEV_STATS_BE_RU_SIZE {
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_26,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_52,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_52_26,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_106,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_106_26,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_242,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_484,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_484_242,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996_484,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996_484_242,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x2,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x2_484,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x3,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x3_484,
+	HTT_TX_RX_PDEV_STATS_BE_RU_SIZE_996x4,
+	HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS,
 };
 
 struct htt_tx_pdev_rate_stats_tlv {
@@ -1769,7 +1960,7 @@ struct htt_tx_pdev_rate_stats_tlv {
 	/** 11AX HE DL MU OFDMA TX BW stats at reduced channel config */
 	u32 reduced_ax_mu_ofdma_tx_bw[HTT_TX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES][HTT_TX_PDEV_STATS_NUM_BW_COUNTERS];
 	/** 11AX HE DL MU OFDMA TX RU Size stats */
-	u32 ofdma_tx_ru_size[HTT_TX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS];
+	u32 ofdma_tx_ru_size[HTT_TX_RX_PDEV_STATS_NUM_AX_RU_SIZE_COUNTERS];
 	/** 11AX HE DL MU OFDMA HE-SIG-B MCS stats */
 	u32 ofdma_he_sig_b_mcs[HTT_TX_PDEV_STATS_NUM_HE_SIG_B_MCS_COUNTERS];
 	/** 11AX HE SU data + embedded trigger PPDU success stats (stats for HETP ack success PPDU cnt) */
@@ -1778,6 +1969,8 @@ struct htt_tx_pdev_rate_stats_tlv {
 	u32 ax_su_embedded_trigger_data_ppdu_err;
 	/** sta side trigger stats */
 	u32 trigger_type_11be[HTT_TX_PDEV_STATS_NUM_11BE_TRIGGER_TYPES];
+	u32 extra_eht_ltf;
+	u32 extra_eht_ltf_ofdma;
 };
 
 /* == PDEV RX RATE CTRL STATS == */
@@ -1827,26 +2020,6 @@ struct htt_tx_pdev_rate_stats_tlv {
 
 #define HTT_RX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES       2
 
-enum HTT_RX_PDEV_STATS_BE_RU_SIZE {
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_26,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_52,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_52_26,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_106,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_106_26,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_242,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_484,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_484_242,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996_484,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996_484_242,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996x2,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996x2_484,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996x3,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996x3_484,
-    HTT_RX_PDEV_STATS_BE_RU_SIZE_996x4,
-    HTT_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS,
-};
-
 /* Introduce new RX counters to support 320MHZ support and punctured modes */
 typedef enum {
 	HTT_RX_PDEV_STATS_PUNCTURED_NONE = 0,
@@ -1948,6 +2121,7 @@ struct htt_rx_pdev_rate_stats_tlv {
 	u32 rx_ulmumimo_mpdu_fail[HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER];
 	u32 rx_ulofdma_non_data_nusers[HTT_RX_PDEV_MAX_OFDMA_NUM_USER];
 	u32 rx_ulofdma_data_nusers[HTT_RX_PDEV_MAX_OFDMA_NUM_USER];
+	u32 rx_mcs_ext[HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS];
 };
 
 struct htt_rx_pdev_rate_ext_stats_tlv {
@@ -2227,6 +2401,7 @@ struct htt_pdev_stats_cca_counters_tlv {
 	u32 med_rx_idle_usec;
 	u32 med_tx_idle_global_usec;
 	u32 cca_obss_usec;
+	u32 pre_rx_frame_usec;
 };
 
 struct htt_pdev_cca_stats_hist_v1_tlv {
@@ -2312,6 +2487,9 @@ enum htt_txbf_sound_steer_modes {
 enum htt_stats_sounding_tx_mode {
 	HTT_TX_AC_SOUNDING_MODE                      = 0,
 	HTT_TX_AX_SOUNDING_MODE                      = 1,
+	HTT_TX_BE_SOUNDING_MODE                      = 2,
+	HTT_TX_CMN_SOUNDING_MODE                     = 3,
+	HTT_TX_CV_CORR_MODE                          = 4,
 };
 
 struct htt_tx_sounding_stats_tlv {
@@ -2331,6 +2509,68 @@ struct htt_tx_sounding_stats_tlv {
 	 * ... where max_bw == 4 for 160mhz
 	 */
 	u32 sounding[HTT_TX_NUM_OF_SOUNDING_STATS_WORDS];
+	u32 cv_nc_mismatch_err;
+	u32 cv_fcs_err;
+	u32 cv_frag_idx_mismatch;
+	u32 cv_invalid_peer_id;
+	u32 cv_no_txbf_setup;
+	u32 cv_expiry_in_update;
+	u32 cv_pkt_bw_exceed;
+	u32 cv_dma_not_done_err;
+	u32 cv_update_failed;
+	u32 cv_total_query;
+	u32 cv_total_pattern_query;
+	u32 cv_total_bw_query;
+	u32 cv_invalid_bw_coding;
+	u32 cv_forced_sounding;
+	u32 cv_standalone_sounding;
+	u32 cv_nc_mismatch;
+	u32 cv_fb_type_mismatch;
+	u32 cv_ofdma_bw_mismatch;
+	u32 cv_bw_mismatch;
+	u32 cv_pattern_mismatch;
+	u32 cv_preamble_mismatch;
+	u32 cv_nr_mismatch;
+	u32 cv_in_use_cnt_exceeded;
+	u32 cv_found;
+	u32 cv_not_found;
+	u32 sounding_320[HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS];
+	u32 cbf_320[HTT_TXBF_MAX_NUM_OF_MODES];
+	u32 cv_ntbr_sounding;
+	u32 cv_found_upload_in_progress;
+	u32 cv_expired_during_query;
+	u32 cv_dma_timeout_error;
+	u32 cv_buf_ibf_uploads;
+	u32 cv_buf_ebf_uploads;
+	u32 cv_buf_received;
+	u32 cv_buf_fed_back;
+	u32 cv_total_query_ibf;
+	u32 cv_found_ibf;
+	u32 cv_not_found_ibf;
+	u32 cv_expired_during_query_ibf;
+	u32 adaptive_snd_total_query;
+	u32 adaptive_snd_total_mcs_drop[HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS +
+					HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 adaptive_snd_kicked_in;
+	u32 adaptive_snd_back_to_default;
+	u32 cv_corr_trigger_online_mode;
+	u32 cv_corr_trigger_offline_mode;
+	u32 cv_corr_trigger_hybrid_mode;
+	u32 cv_corr_trigger_computation_level_0;
+	u32 cv_corr_trigger_computation_level_1;
+	u32 cv_corr_trigger_computation_level_2;
+	u32 cv_corr_trigger_num_users[HTT_TX_CV_CORR_MAX_NUM_COLUMNS];
+	u32 cv_corr_trigger_num_streams[HTT_TX_CV_CORR_MAX_NUM_COLUMNS];
+	u32 cv_corr_upload_total_buf_received;
+	u32 cv_corr_upload_total_buf_fed_back;
+	u32 cv_corr_upload_total_processing_failed;
+	u32 cv_corr_upload_failed_total_users_zero;
+	u32 cv_corr_upload_failed_total_users_exceeded;
+	u32 cv_corr_upload_failed_peer_not_found;
+	u32 cv_corr_upload_user_nss_exceeded;
+	u32 cv_corr_upload_invalid_lookup_index;
+	u32 cv_corr_upload_total_num_users[HTT_TX_CV_CORR_MAX_NUM_COLUMNS];
+	u32 cv_corr_upload_total_num_streams[HTT_TX_CV_CORR_MAX_NUM_COLUMNS];
 };
 
 struct htt_pdev_obss_pd_stats_tlv {
@@ -2347,6 +2587,12 @@ struct htt_pdev_obss_pd_stats_tlv {
 	u32 num_psr_opportunities;
 	u32 num_psr_ppdu_tried;
 	u32 num_psr_ppdu_success;
+	u32 num_non_srg_ppdu_tried_per_ac[HTT_NUM_AC_WMM];
+	u32 num_non_srg_ppdu_success_per_ac[HTT_NUM_AC_WMM];
+	u32 num_srg_ppdu_tried_per_ac[HTT_NUM_AC_WMM];
+	u32 num_srg_ppdu_success_per_ac[HTT_NUM_AC_WMM];
+	u32 num_obss_min_duration_check_flush_cnt;
+	u32 num_sr_ppdu_abort_flush_cnt;
 };
 
 struct htt_ring_backpressure_stats_tlv {
@@ -2431,6 +2677,18 @@ struct htt_tx_selfgen_be_stats_tlv {
 	u32 be_mu_mimo_ndp_queued;
 	u32 be_mu_mimo_brpoll_queued[HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1];
 	u32 be_ul_mumimo_trigger[HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS];
+	u32 combined_be_bsr_trigger_tried[HTT_NUM_AC_WMM];
+	u32 combined_be_bsr_trigger_err[HTT_NUM_AC_WMM];
+	u32 standalone_be_bsr_trigger_tried[HTT_NUM_AC_WMM];
+	u32 standalone_be_bsr_trigger_err[HTT_NUM_AC_WMM];
+	u32 manual_be_su_ulofdma_basic_trigger[HTT_NUM_AC_WMM];
+	u32 manual_be_su_ulofdma_basic_trigger_err[HTT_NUM_AC_WMM];
+	u32 manual_be_mu_ulofdma_basic_trigger[HTT_NUM_AC_WMM];
+	u32 manual_be_mu_ulofdma_basic_trigger_err[HTT_NUM_AC_WMM];
+	u32 be_basic_trigger_per_ac[HTT_NUM_AC_WMM];
+	u32 be_basic_trigger_errors_per_ac[HTT_NUM_AC_WMM];
+	u32 be_mu_bar_trigger_per_ac[HTT_NUM_AC_WMM];
+	u32 be_mu_bar_trigger_errors_per_ac[HTT_NUM_AC_WMM];
 };
 
 struct htt_tx_selfgen_be_err_stats_tlv {
@@ -2451,6 +2709,11 @@ struct htt_tx_selfgen_be_err_stats_tlv {
 	u32 be_mu_mimo_ndp_flushed;
 	u32 be_mu_mimo_brpoll_flushed[HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS - 1];
 	u32 be_ul_mumimo_trigger_err[HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS];
+	u32 be_basic_trigger_partial_resp;
+	u32 be_bsr_trigger_partial_resp;
+	u32 be_mu_bar_trigger_partial_resp;
+	u32 be_mu_rts_trigger_blocked;
+	u32 be_bsr_trigger_blocked;
 };
 
 struct htt_tx_selfgen_be_sched_status_stats_tlv {
@@ -2501,7 +2764,7 @@ struct htt_tx_pdev_rate_stats_be_ofdma_t
 	u32 be_ofdma_tx_nss[HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS];
 	u32 be_ofdma_tx_bw[HTT_TX_PDEV_STATS_NUM_BE_BW_COUNTERS];
 	u32 be_ofdma_tx_gi[HTT_TX_PDEV_STATS_NUM_GI_COUNTERS][HTT_TX_PDEV_STATS_NUM_BE_MCS_COUNTERS];
-	u32 be_ofdma_tx_ru_size[HTT_TX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS];
+	u32 be_ofdma_tx_ru_size[HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS];
 	u32 be_ofdma_eht_sig_mcs[HTT_TX_PDEV_STATS_NUM_EHT_SIG_MCS_COUNTERS];
 };
 
@@ -2523,8 +2786,8 @@ struct htt_rx_pdev_be_ul_trigger_stats_t
 	 * array offset 0 and similarly RU52 will be incremented in array offset 1
 	 */
 	/* PPDU level */
-	u32 be_rx_ulofdma_data_ru_size_ppdu[HTT_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS];
-	u32 be_rx_ulofdma_non_data_ru_size_ppdu[HTT_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS];
+	u32 be_rx_ulofdma_data_ru_size_ppdu[HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS];
+	u32 be_rx_ulofdma_non_data_ru_size_ppdu[HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS];
 
 	/*
 	 * These arrays hold Target RSSI (rx power the AP wants),
@@ -2553,6 +2816,18 @@ struct htt_rx_pdev_be_ul_trigger_stats_t
 	 * Trig power headroom for STA AID in same idx - UNIT(dB)
 	 */
 	u32 be_uplink_sta_power_headroom[HTT_RX_UL_MAX_UPLINK_RSSI_TRACK];
+
+	/**
+	 * Number of EHT UL OFDMA per-user responses containing only a QoS null in
+	 * response to basic trigger. Typically a data response is expected.
+	 */
+	u32 be_ul_ofdma_basic_trigger_rx_qos_null_only;
+
+	/* UL MLO Queue Depth Sharing Stats */
+	u32 ul_mlo_send_qdepth_params_count;
+	u32 ul_mlo_proc_qdepth_params_count;
+	u32 ul_mlo_proc_accepted_qdepth_params_count;
+	u32 ul_mlo_proc_discarded_qdepth_params_count;
 };
 
 struct htt_rx_pdev_be_ul_mimo_user_stats_tlv {
@@ -2607,6 +2882,13 @@ struct htt_rx_pdev_ul_mumimo_trig_be_sta
 	s8 be_rx_ul_mumimo_fd_rssi[HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER][HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS];
 	/* Average pilot EVM measued for RX UL TB PPDU */
 	s8 be_rx_ulmumimo_pilot_evm_dB_mean[HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER][HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS];
+	/** Number of times UL MUMIMO TB PPDUs received in a punctured mode */
+	u32 rx_ul_mumimo_punctured_mode[HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_COUNTERS];
+	/**
+	 * Number of EHT UL MU-MIMO per-user responses containing only a QoS null
+	 * in response to basic trigger. Typically a data response is expected.
+	 */
+	u32 be_ul_mumimo_basic_trigger_rx_qos_null_only;
 };
 
 #ifdef CPTCFG_ATH12K_DEBUGFS
@@ -2658,6 +2940,7 @@ struct htt_rx_pdev_ul_mumimo_trig_stats_
 					 [HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS];
 	u32 reduced_ul_mumimo_rx_bw[HTT_RX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES]
 				   [HTT_RX_PDEV_STATS_NUM_BW_COUNTERS];
+	u32 ul_mumimo_basic_trigger_rx_qos_null_only;
 };
 
 struct htt_rx_pdev_ul_mimo_user_stats_tlv {
@@ -2694,11 +2977,12 @@ struct htt_rx_pdev_ul_trigger_stats_tlv
 	u32 rx_ulofdma_non_data_ru_size_ppdu[HTT_RX_PDEV_STATS_NUM_RU_SIZE_160MHZ_CNTRS];
 
 	u32 uplink_sta_aid[HTT_RX_UL_MAX_UPLINK_RSSI_TRACK];
-	u32 uplink_sta_target_rssi[HTT_RX_UL_MAX_UPLINK_RSSI_TRACK];
-	u32 uplink_sta_fd_rssi[HTT_RX_UL_MAX_UPLINK_RSSI_TRACK];
+	s32 uplink_sta_target_rssi[HTT_RX_UL_MAX_UPLINK_RSSI_TRACK];
+	s32 uplink_sta_fd_rssi[HTT_RX_UL_MAX_UPLINK_RSSI_TRACK];
 	u32 uplink_sta_power_headroom[HTT_RX_UL_MAX_UPLINK_RSSI_TRACK];
 	u32 reduced_ul_ofdma_rx_bw[HTT_RX_PDEV_STATS_NUM_REDUCED_CHAN_TYPES]
 				  [HTT_RX_PDEV_STATS_NUM_BW_COUNTERS];
+	u32 ul_ofdma_basic_trigger_rx_qos_null_only;
 };
 
 #define HTT_LATENCY_PROFILE_MAX_HIST        3
@@ -2715,6 +2999,11 @@ struct htt_latency_prof_stats_tlv {
 	u32 avg;
 	u32 hist_intvl;
 	u32 hist[HTT_LATENCY_PROFILE_MAX_HIST];
+	u32 page_fault_max;
+	u32 page_fault_total;
+	u32 ignored_latency_count;
+	u32 interrupts_max;
+	u32 interrupts_hist[HTT_INTERRUPTS_LATENCY_PROFILE_MAX_HIST];
 };
 
 struct htt_latency_prof_ctx_tlv {
@@ -2782,6 +3071,14 @@ struct htt_pdev_txrate_txbf_stats_tlv {
 				[HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS];
 	u32 reduced_tx_su_ol_bw[HTT_TX_TXBF_RATE_STATS_NUM_REDUCED_CHAN_TYPES]
 			       [HTT_TX_TXBF_RATE_STATS_NUM_BW_COUNTERS];
+	u32 txbf_flag_set_mu_mode;
+	u32 txbf_flag_set_final_status;
+	u32 txbf_flag_not_set_verified_txbf_mode;
+	u32 txbf_flag_not_set_disable_p2p_access;
+	u32 txbf_flag_not_set_max_nss_reached_in_he160;
+	u32 txbf_flag_not_set_disable_ul_dl_ofdma;
+	u32 txbf_flag_not_set_mcs_threshold_value;
+	u32 txbf_flag_not_set_final_status;
 };
 
 struct htt_txbf_ofdma_ndpa_stats_tlv {
@@ -2974,6 +3271,11 @@ struct htt_rx_pdev_be_ul_ofdma_user_stat
 #define HTT_STATS_MAX_CHAINS 8
 #define HTT_MAX_CH_PWR_INFO_SIZE 16
 #define HTT_PUNCTURE_STATS_MAX_SUBBAND_COUNT 32
+#define HTT_MAX_RX_PKT_CNT_EXT 4
+#define HTT_MAX_RX_PKT_CRC_PASS_CNT_EXT 4
+#define HTT_MAX_RX_PKT_MU_CNT 14
+#define HTT_MAX_TX_PKT_CNT 10
+#define HTT_MAX_PHY_TX_ABORT_CNT 10
 
 #define HTT_PDEV_PUNCTURE_STATS_MAC_ID_M 0x000000ff
 #define HTT_PDEV_PUNCTURE_STATS_MAC_ID_S 0
@@ -2987,6 +3289,66 @@ struct htt_rx_pdev_be_ul_ofdma_user_stat
 		((_var) |= ((_val) << HTT_PDEV_PUNCTURE_STATS_MAC_ID_S)); \
 	} while (0)
 
+#define HTT_PHY_TPC_STATS_CTL_REGION_GRP_M    0x000000ff
+#define HTT_PHY_TPC_STATS_CTL_REGION_GRP_S    0
+
+#define HTT_PHY_TPC_STATS_CTL_REGION_GRP_GET(_var) \
+	(((_var) & HTT_PHY_TPC_STATS_CTL_REGION_GRP_M) >> \
+	  HTT_PHY_TPC_STATS_CTL_REGION_GRP_S)
+#define HTT_STATS_PHY_TPC_STATS_CTL_REGION_GRP_GET(_var) \
+	HTT_PHY_TPC_STATS_CTL_REGION_GRP_GET(_var)
+#define HTT_PHY_TPC_STATS_CTL_REGION_GRP_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_PHY_TPC_STATS_CTL_REGION_GRP, _val); \
+		((_var) &= ~(HTT_PHY_TPC_STATS_CTL_REGION_GRP_M)); \
+		((_var) |= ((_val) << HTT_PHY_TPC_STATS_CTL_REGION_GRP_S)); \
+	} while (0)
+
+#define HTT_PHY_TPC_STATS_SUB_BAND_INDEX_M    0x0000ff00
+#define HTT_PHY_TPC_STATS_SUB_BAND_INDEX_S    8
+
+#define HTT_PHY_TPC_STATS_SUB_BAND_INDEX_GET(_var) \
+	(((_var) & HTT_PHY_TPC_STATS_SUB_BAND_INDEX_M) >> \
+	  HTT_PHY_TPC_STATS_SUB_BAND_INDEX_S)
+#define HTT_STATS_PHY_TPC_STATS_SUB_BAND_INDEX_GET(_var) \
+	HTT_PHY_TPC_STATS_SUB_BAND_INDEX_GET(_var)
+#define HTT_PHY_TPC_STATS_SUB_BAND_INDEX_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_PHY_TPC_STATS_SUB_BAND_INDEX, _val); \
+		((_var) &= ~(HTT_PHY_TPC_STATS_SUB_BAND_INDEX_M)); \
+		((_var) |= ((_val) << HTT_PHY_TPC_STATS_SUB_BAND_INDEX_S)); \
+	} while (0)
+
+#define HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_M    0x00ff0000
+#define HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_S    16
+
+#define HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_GET(_var) \
+	(((_var) & HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_M) >> \
+	  HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_S)
+#define HTT_STATS_PHY_TPC_STATS_ARRAY_GAIN_CAP_EXT2_ENABLED_GET(_var) \
+	HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_GET(_var)
+#define HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED, _val); \
+		((_var) &= ~(HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_M)); \
+		((_var) |= ((_val) << HTT_PHY_TPC_STATS_AG_CAP_EXT2_ENABLED_S)); \
+	} while (0)
+
+#define HTT_PHY_TPC_STATS_CTL_FLAG_M    0xff000000
+#define HTT_PHY_TPC_STATS_CTL_FLAG_S    24
+
+#define HTT_PHY_TPC_STATS_CTL_FLAG_GET(_var) \
+	(((_var) & HTT_PHY_TPC_STATS_CTL_FLAG_M) >> \
+	  HTT_PHY_TPC_STATS_CTL_FLAG_S)
+#define HTT_STATS_PHY_TPC_STATS_CTL_FLAG_GET(_var) \
+	HTT_PHY_TPC_STATS_CTL_FLAG_GET(_var)
+#define HTT_PHY_TPC_STATS_CTL_FLAG_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_PHY_TPC_STATS_CTL_FLAG, _val); \
+		((_var) &= ~(HTT_PHY_TPC_STATS_CTL_FLAG_M)); \
+		((_var) |= ((_val) << HTT_PHY_TPC_STATS_CTL_FLAG_S)); \
+	} while (0)
+
 struct htt_phy_tpc_stats_tlv {
 	u32 pdev_id;
 	u32 tx_power_scale;
@@ -3003,6 +3365,16 @@ struct htt_phy_tpc_stats_tlv {
 	u32 power_type_6ghz;
 	u32 sub_band_cfreq[HTT_MAX_CH_PWR_INFO_SIZE];
 	u32 sub_band_txpower[HTT_MAX_CH_PWR_INFO_SIZE];
+	s32 array_gain_cap[HTT_STATS_MAX_CHAINS * ((HTT_STATS_MAX_CHAINS / 2) + 1)];
+	union {
+		struct {
+			u32 ctl_region_grp:8,
+			    sub_band_index:8,
+			    array_gain_cap_ext2_enabled:8,
+			    ctl_flag:8;
+		};
+		u32 ctl_args;
+	};
 };
 
 struct htt_pdev_puncture_stats_tlv {
@@ -3656,6 +4028,11 @@ struct htt_phy_counters_tlv {
 	u32 rx_pkt_crc_pass_cnt[HTT_MAX_RX_PKT_CRC_PASS_CNT];
 	u32 per_blk_err_cnt[HTT_MAX_PER_BLK_ERR_CNT];
 	u32 rx_ota_err_cnt[HTT_MAX_RX_OTA_ERR_CNT];
+	u32 rx_pkt_cnt_ext[HTT_MAX_RX_PKT_CNT_EXT];
+	u32 rx_pkt_crc_pass_cnt_ext[HTT_MAX_RX_PKT_CRC_PASS_CNT_EXT];
+	u32 rx_pkt_mu_cnt[HTT_MAX_RX_PKT_MU_CNT];
+	u32 tx_pkt_cnt[HTT_MAX_TX_PKT_CNT];
+	u32 phy_tx_abort_cnt[HTT_MAX_PHY_TX_ABORT_CNT];
 };
 
 struct htt_phy_stats_tlv {
@@ -3683,6 +4060,7 @@ struct htt_phy_reset_counters_tlv {
 	u32 phy_off_through_vreg_cnt;
 	u32 force_calibration_cnt;
 	u32 rf_mode_switch_phy_off_cnt;
+	u32 temperature_recal_cnt;
 };
 
 struct htt_phy_reset_stats_tlv {
@@ -3715,6 +4093,14 @@ struct htt_phy_reset_stats_tlv {
 	u32 dyn_cca_status;
 	u32 rxdesense_thresh_hw;
 	u32 rxdesense_thresh_sw;
+	u32 phy_bw_code;
+	u32 phy_rate_mode;
+	u32 phy_band_code;
+	u32 phy_vreg_base;
+	u32 phy_vreg_base_ext;
+	u32 cur_table_index;
+	u32 whal_config_flag;
+	u32 nfcal_iteration_counts[3];
 };
 
 struct htt_peer_ctrl_path_txrx_stats_tlv {
@@ -3992,6 +4378,9 @@ struct htt_tx_selfgen_ax_sched_status_st
 enum htt_stats_rc_mode {
 	HTT_STATS_RC_MODE_DLSU	   = 0,
 	HTT_STATS_RC_MODE_DLMUMIMO = 1,
+	HTT_STATS_RC_MODE_DLOFDMA  = 2,
+	HTT_STATS_RC_MODE_ULMUMIMO = 3,
+	HTT_STATS_RC_MODE_ULOFDMA  = 4,
 };
 
 struct htt_tx_rate_stats_t {
@@ -4001,6 +4390,25 @@ struct htt_tx_rate_stats_t {
 	u32 mpdus_failed;
 };
 
+enum HTT_RC_MODE {
+	HTT_RC_MODE_SU_OL,
+	HTT_RC_MODE_SU_BF,
+	HTT_RC_MODE_MU1_INTF,
+	HTT_RC_MODE_MU2_INTF,
+	HTT_RC_MODE_MU3_INTF,
+	HTT_RC_MODE_MU4_INTF,
+	HTT_RC_MODE_MU5_INTF,
+	HTT_RC_MODE_MU6_INTF,
+	HTT_RC_MODE_MU7_INTF,
+	HTT_RC_MODE_2D_COUNT,
+};
+
+enum htt_stats_ru_type {
+	HTT_STATS_RU_TYPE_INVALID,
+	HTT_STATS_RU_TYPE_SINGLE_RU_ONLY,
+	HTT_STATS_RU_TYPE_SINGLE_AND_MULTI_RU,
+};
+
 struct htt_tx_per_rate_stats_tlv {
 	u32 rc_mode;
 	u32 last_probed_mcs;
@@ -4013,6 +4421,11 @@ struct htt_tx_per_rate_stats_tlv {
 
 	/** 320MHz extension for PER */
 	struct htt_tx_rate_stats_t per_bw320;
+
+	u32 probe_cnt_per_rcmode[HTT_RC_MODE_2D_COUNT];
+	u32 ru_type;
+
+	struct htt_tx_rate_stats_t per_ru[HTT_TX_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS];
 };
 
 struct htt_tx_pdev_dl_mu_ofdma_sch_stats_tlv {
@@ -4047,6 +4460,10 @@ struct htt_t2h_vdev_txrx_stats_hw_stats_
 	u32 tx_msdu_cong_ctrl_drop_cnt_lo;
 	u32 tx_msdu_ttl_expire_drop_cnt_hi;
 	u32 tx_msdu_ttl_expire_drop_cnt_lo;
+	u32 tqm_bypass_frame_cnt_lo;
+	u32 tqm_bypass_frame_cnt_hi;
+	u32 tqm_bypass_byte_cnt_lo;
+	u32 tqm_bypass_byte_cnt_hi;
 };
 
 struct htt_tx_pdev_dl_mu_mimo_sch_stats_tlv {
@@ -4074,6 +4491,9 @@ struct htt_tx_pdev_dl_mu_mimo_sch_stats_
 	u32 ac_mu_mimo_sch_posted_per_grp_sz[HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS];
 	/* Number of 11AX DL MU MIMO schedules posted per group size */
 	u32 ax_mu_mimo_sch_posted_per_grp_sz[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS];
+	u32 be_mu_mimo_sch_nusers[HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS];
+	u32 be_mu_mimo_sch_posted_per_grp_sz[HTT_TX_PDEV_STATS_NUM_BE_MUMIMO_USER_STATS];
+	u32 ac_mu_mimo_sch_posted_per_grp_sz_ext[HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS];
 };
 
 struct htt_tx_pdev_ul_mu_mimo_sch_stats_tlv {
@@ -4100,8 +4520,6 @@ struct htt_tx_pdev_ul_mu_mimo_sch_stats_
 /* 0 - Half, 1 - Quarter */
 #define HTT_STA_UL_OFDMA_NUM_REDUCED_CHAN_TYPES 2
 
-#define HTT_NUM_AC_WMM	0x4
-
 enum HTT_STA_UL_OFDMA_RX_TRIG_TYPE {
 	HTT_ULTRIG_QBOOST_TRIGGER = 0,
 	HTT_ULTRIG_PSPOLL_TRIGGER,
@@ -4229,8 +4647,13 @@ struct htt_peer_ax_ofdma_stats_tlv {
 	/* Last updated value of DL and UL queue depths for each peer per AC */
 	u32 last_updated_dl_qdepth[HTT_NUM_AC_WMM];
 	u32 last_updated_ul_qdepth[HTT_NUM_AC_WMM];
+	u32 ax_manual_ulofdma_trig_count;
+	u32 ax_manual_ulofdma_trig_err_count;
 };
 
+#define HTT_STATS_SCHED_OFDMA_TXBF_INELIGIBILITY_MAX 8
+#define HTT_MAX_NUM_CHAN_ACC_LAT_INTR 9
+
 struct htt_pdev_sched_algo_ofdma_stats_tlv {
 	/**
 	 * BIT [ 7 :  0]   :- mac_id
@@ -4257,6 +4680,8 @@ struct htt_pdev_sched_algo_ofdma_stats_t
 	u32 dlofdma_disabled_su_only_eligible[HTT_NUM_AC_WMM];
 	u32 dlofdma_disabled_consec_no_mpdus_tried[HTT_NUM_AC_WMM];
 	u32 dlofdma_disabled_consec_no_mpdus_success[HTT_NUM_AC_WMM];
+	u32 txbf_ofdma_ineligibility_stat[HTT_STATS_SCHED_OFDMA_TXBF_INELIGIBILITY_MAX];
+	u32 avg_chan_acc_lat_hist[HTT_MAX_NUM_CHAN_ACC_LAT_INTR];
 };
 
 struct htt_umac_ssr_stats_tlv {
@@ -4285,4 +4710,283 @@ struct htt_umac_ssr_stats_tlv {
 	u32 htt_sync_do_post_reset_complete_ms;
 };
 
+struct htt_peer_be_ofdma_stats_tlv {
+	u32 peer_id;
+	u32 be_manual_ulofdma_trig_count;
+	u32 be_manual_ulofdma_trig_err_count;
+};
+
+struct htt_pdev_tdma_stats_tlv {
+	union {
+		struct {
+			u32 mac_id:8,
+			    reserved:24;
+		};
+		u32 mac_id__word;
+	};
+	u32 num_tdma_active_schedules;
+	u32 num_tdma_reserved_schedules;
+	u32 num_tdma_restricted_schedules;
+	u32 num_tdma_unconfigured_schedules;
+	u32 num_tdma_slot_switches;
+	u32 num_tdma_edca_switches;
+};
+
+#define HTT_STATS_TDMA_MAC_ID_M 0x000000ff
+#define HTT_STATS_TDMA_MAC_ID_S 0
+
+#define HTT_STATS_TDMA_MAC_ID_GET(_var) \
+	(((_var) & HTT_STATS_TDMA_MAC_ID_M) >> \
+	HTT_STATS_TDMA_MAC_ID_S)
+
+#define HTT_STATS_PDEV_TDMA_MAC_ID_GET(_var) \
+	HTT_STATS_TDMA_MAC_ID_GET(_var)
+
+struct htt_codel_svc_class_stats_tlv {
+	u32 svc_class_id;
+	u32 codel_drops;
+	u32 codel_no_drops;
+};
+
+#define HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_M 0x0000FFFF
+#define HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_S 0
+
+#define HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_GET(_var) \
+	(((_var) & HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_M) >> \
+	HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_S)
+#define HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM, _val); \
+		((_var) |= ((_val) << HTT_CODEL_MSDUQ_STATS_TX_FLOW_NUM_S)); \
+	} while (0)
+
+#define HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_M 0x00FF0000
+#define HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_S 16
+
+#define HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_GET(_var) \
+	(((_var) & HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_M) >> \
+	HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_S)
+#define HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID, _val); \
+		((_var) |= ((_val) << HTT_CODEL_MSDUQ_STATS_SVC_CLASS_ID_S)); \
+	} while (0)
+
+#define HTT_CODEL_MSDUQ_STATS_DROPS_M 0x0000FFFF
+#define HTT_CODEL_MSDUQ_STATS_DROPS_S 0
+
+#define HTT_CODEL_MSDUQ_STATS_DROPS_GET(_var) \
+	(((_var) & HTT_CODEL_MSDUQ_STATS_DROPS_M) >> \
+	HTT_CODEL_MSDUQ_STATS_DROPS_S)
+#define HTT_CODEL_MSDUQ_STATS_DROPS_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_CODEL_MSDUQ_STATS_DROPS, _val); \
+		((_var) |= ((_val) << HTT_CODEL_MSDUQ_STATS_DROPS_S)); \
+	} while (0)
+
+#define HTT_CODEL_MSDUQ_STATS_NO_DROPS_M 0xFFFF0000
+#define HTT_CODEL_MSDUQ_STATS_NO_DROPS_S 16
+
+#define HTT_CODEL_MSDUQ_STATS_NO_DROPS_GET(_var) \
+	(((_var) & HTT_CODEL_MSDUQ_STATS_NO_DROPS_M) >> \
+	HTT_CODEL_MSDUQ_STATS_NO_DROPS_S)
+#define HTT_CODEL_MSDUQ_STATS_NO_DROPS_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_CODEL_MSDUQ_STATS_NO_DROPS, _val); \
+		((_var) |= ((_val) << HTT_CODEL_MSDUQ_STATS_NO_DROPS_S)); \
+	} while (0)
+
+struct htt_codel_msduq_stats_tlv {
+	union {
+		u32 id__word;
+		struct {
+			u32 tx_flow_num:16,
+			    svc_class_id:8,
+			    reserved:8;
+		};
+	};
+	union {
+		u32 stats__word;
+		struct {
+			u32 codel_drops:16,
+			    codel_no_drops:16;
+		};
+	};
+};
+
+struct htt_mlo_sched_stats_tlv {
+	u32 pref_link_num_sec_link_sched;
+	u32 pref_link_num_pref_link_timeout;
+	u32 pref_link_num_pref_link_sch_delay_ipc;
+	u32 pref_link_num_pref_link_timeout_ipc;
+};
+
+#define HTT_STATS_HWMLO_MAX_LINKS 6
+#define HTT_STATS_MLO_MAX_IPC_RINGS 7
+
+struct htt_pdev_mlo_ipc_stats_tlv {
+	u32 mlo_ipc_ring_full_cnt[HTT_STATS_HWMLO_MAX_LINKS][HTT_STATS_MLO_MAX_IPC_RINGS];
+};
+
+struct  htt_stats_pdev_rtt_resp_stats_tlv {
+	u32 pdev_id;
+	u32 tx_11mc_ftm_suc;
+	u32 tx_11mc_ftm_suc_retry;
+	u32 tx_11mc_ftm_fail;
+	u32 rx_11mc_ftmr_cnt;
+	u32 rx_11mc_ftmr_dup_cnt;
+	u32 rx_11mc_iftmr_cnt;
+	u32 rx_11mc_iftmr_dup_cnt;
+	u32 ftmr_drop_11mc_resp_role_not_enabled_cnt;
+	u32 initiator_active_responder_rejected_cnt;
+	u32 responder_terminate_cnt;
+	u32 active_rsta_open;
+	u32 active_rsta_mac;
+	u32 active_rsta_mac_phy;
+	u32 num_assoc_ranging_peers;
+	u32 num_unassoc_ranging_peers;
+	u32 responder_alloc_cnt;
+	u32 responder_alloc_failure;
+	u32 pn_check_failure_cnt;
+	u32 pasn_m1_auth_recv_cnt;
+	u32 pasn_m1_auth_drop_cnt;
+	u32 pasn_m2_auth_recv_cnt;
+	u32 pasn_m2_auth_tx_fail_cnt;
+	u32 pasn_m3_auth_recv_cnt;
+	u32 pasn_m3_auth_drop_cnt;
+	u32 pasn_peer_create_request_cnt;
+	u32 pasn_peer_create_timeout_cnt;
+	u32 pasn_peer_created_cnt;
+	u32 sec_ranging_not_supported_mfp_not_setup;
+	u32 non_sec_ranging_discarded_for_assoc_peer_with_mfpr_set;
+	u32 open_ranging_discarded_with_URNM_MFPR_set_for_pasn_peer;
+	u32 unassoc_non_pasn_ranging_not_supported_with_URNM_MFPR;
+	u32 num_req_bw_20_MHz;
+	u32 num_req_bw_40_MHz;
+	u32 num_req_bw_80_MHz;
+	u32 num_req_bw_160_MHz;
+	u32 tx_11az_ftm_successful;
+	u32 tx_11az_ftm_failed;
+	u32 rx_11az_ftmr_cnt;
+	u32 rx_11az_ftmr_dup_cnt;
+	u32 rx_11az_iftmr_dup_cnt;
+	u32 malformed_ftmr;
+	u32 ftmr_drop_ntb_resp_role_not_enabled_cnt;
+	u32 ftmr_drop_tb_resp_role_not_enabled_cnt;
+	u32 invalid_ftm_request_params;
+	u32 requested_bw_format_not_supported;
+	u32 ntb_unsec_unassoc_mode_ranging_peer_alloc_failed;
+	u32 tb_unassoc_unsec_mode_pasn_peer_creation_failed;
+	u32 num_ranging_sequences_processed;
+	u32 ntb_tx_ndp;
+	u32 ndp_rx_cnt;
+	u32 num_ntb_ranging_NDPAs_recv;
+	u32 recv_lmr;
+	u32 invalid_ftmr_cnt;
+	u32 max_time_bw_meas_exp_cnt;
+};
+
+struct htt_stats_pdev_rtt_hw_stats_tlv {
+	u32 ista_ranging_ndpa_cnt;
+	u32 ista_ranging_ndp_cnt;
+	u32 ista_ranging_i2r_lmr_cnt;
+	u32 rtsa_ranging_resp_cnt;
+	u32 rtsa_ranging_ndp_cnt;
+	u32 rsta_ranging_lmr_cnt;
+	u32 tb_ranging_cts2s_rcvd_cnt;
+	u32 tb_ranging_ndp_rcvd_cnt;
+	u32 tb_ranging_lmr_rcvd_cnt;
+	u32 tb_ranging_tf_poll_resp_sent_cnt;
+	u32 tb_ranging_tf_sound_resp_sent_cnt;
+	u32 tb_ranging_tf_report_resp_sent_cnt;
+};
+
+#define HTT_STATS_MAX_SCH_CMD_RESULT 25
+#define HTT_STATS_SCH_CMD_STATUS_CNT 9
+
+/* TXSEND self generated frames */
+enum htt_stats_txsend_ftype_t {
+	HTT_TXSEND_FTYPE_SGEN_TF_POLL,
+	HTT_TXSEND_FTYPE_SGEN_TF_SOUND,
+	HTT_TXSEND_FTYPE_SGEN_TBR_NDPA,
+	HTT_TXSEND_FTYPE_SGEN_TBR_NDP,
+	HTT_TXSEND_FTYPE_SGEN_TBR_LMR,
+	HTT_TXSEND_FTYPE_SGEN_TF_REPORT,
+	HTT_TXSEND_FTYPE_MAX
+};
+
+struct htt_stats_pdev_rtt_tbr_selfgen_queued_stats_tlv {
+	u32 tbr_su_ftype_queued[HTT_TXSEND_FTYPE_MAX];
+	u32 tbr_mu_ftype_queued[HTT_TXSEND_FTYPE_MAX];
+};
+
+struct htt_stats_pdev_rtt_tbr_cmd_result_stats_tlv {
+	u32 tbr_num_sch_cmd_result_buckets;
+	u32 opaque_tbr_su_ftype_cmd_result[HTT_TXSEND_FTYPE_MAX][HTT_STATS_MAX_SCH_CMD_RESULT];
+	u32 opaque_tbr_mu_ftype_cmd_result[HTT_TXSEND_FTYPE_MAX][HTT_STATS_MAX_SCH_CMD_RESULT];
+};
+
+struct htt_stats_pdev_rtt_init_stats_tlv {
+	u32 pdev_id;
+	u32 tx_11mc_ftmr_cnt;
+	u32 tx_11mc_ftmr_fail;
+	u32 tx_11mc_ftmr_suc_retry;
+	u32 rx_11mc_ftm_cnt;
+	u32 tx_meas_req_count;
+	u32 init_role_not_enabled;
+	u32 initiator_terminate_cnt;
+	u32 tx_11az_ftmr_fail;
+	u32 tx_11az_ftmr_start;
+	u32 tx_11az_ftmr_stop;
+	u32 rx_11az_ftm_cnt;
+	u32 active_ista;
+	u32 invalid_preamble;
+	u32 invalid_chan_bw_format;
+	u32 mgmt_buff_alloc_fail_cnt;
+	u32 ftm_parse_failure;
+	u32 ranging_negotiation_successful_cnt;
+	u32 incompatible_ftm_params;
+	u32 sec_ranging_req_in_open_mode;
+	u32 ftmr_tx_failed_null_11az_peer;
+	u32 ftmr_retry_timeout;
+	u32 max_time_bw_meas_exp_cnt;
+	u32 tb_meas_duration_expiry_cnt;
+	u32 num_tb_ranging_requests;
+	u32 ntbr_triggered_successfully;
+	u32 ntbr_trigger_failed;
+	u32 invalid_or_no_vreg_idx;
+	u32 set_vreg_params_failed;
+	u32 sac_mismatch;
+	u32 pasn_m1_auth_recv_cnt;
+	u32 pasn_m1_auth_tx_fail_cnt;
+	u32 pasn_m2_auth_recv_cnt;
+	u32 pasn_m2_auth_drop_cnt;
+	u32 pasn_m3_auth_recv_cnt;
+	u32 pasn_m3_auth_tx_fail_cnt;
+	u32 pasn_peer_create_request_cnt;
+	u32 pasn_peer_create_timeout_cnt;
+	u32 pasn_peer_created_cnt;
+	u32 ntbr_ndpa_failed;
+	u32 ntbr_sequence_successful;
+	u32 ntbr_ndp_failed;
+	u32 sch_cmd_status_cnts[HTT_STATS_SCH_CMD_STATUS_CNT];
+	u32 lmr_timeout;
+	u32 lmr_recv;
+	u32 num_trigger_frames_received;
+	u32 num_tb_ranging_NDPAs_recv;
+	u32 ndp_rx_cnt;
+};
+
+struct htt_pdev_rtt_resp_stats_t {
+	struct htt_stats_pdev_rtt_resp_stats_tlv pdev_rtt_resp_stats;
+	struct htt_stats_pdev_rtt_hw_stats_tlv pdev_rtt_hw_stats;
+	struct htt_stats_pdev_rtt_tbr_selfgen_queued_stats_tlv pdev_rtt_tbr_selfgen_queued_stats;
+	struct htt_stats_pdev_rtt_tbr_cmd_result_stats_tlv pdev_rtt_tbr_cmd_result_stats;
+};
+
+struct htt_pdev_rtt_init_stats_t {
+	struct htt_stats_pdev_rtt_init_stats_tlv pdev_rtt_init_stats;
+	struct htt_stats_pdev_rtt_hw_stats_tlv pdev_rtt_hw_stats;
+};
+
 #endif
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -79,6 +79,18 @@ enum ath12k_dbg_htt_ext_stats_type {
 	ATH12K_DGB_HTT_DBG_EXT_STATS_PDEV_BW_MGR	    =  53,
 	ATH12K_DGB_HTT_DBG_PDEV_MBSSID_CTRL_FRAME_STATS	    =  54,
 	ATH12K_DBG_HTT_UMAC_RESET_SSR_STATS		    =  55,
+	ATH12K_DBG_HTT_MLO_UMAC_SSR_STATS		    =  56,
+	ATH12K_DBG_HTT_PDEV_TDMA_STATS			    =  57,
+	ATH12K_DBG_HTT_CODEL_STATS			    =  58,
+	ATH12K_DBG_HTT_ODD_PDEV_BE_TX_MU_OFDMA_STATS	    =  59,
+	ATH12K_DBG_HTT_ODD_UL_BE_OFDMA_STATS		    =  60,
+	ATH12K_DBG_HTT_ODD_BE_TXBF_OFDMA_STATS		    =  61,
+	ATH12K_DBG_HTT_ODD_PDEV_BE_UL_MUMIMO_TRIG_STATS	    =  62,
+	ATH12K_DBG_HTT_MLO_SCHED_STATS			    =  63,
+	ATH12K_DBG_HTT_PDEV_MLO_IPC_STATS		    =  64,
+	ATH12K_DBG_HTT_EXT_PDEV_RTT_RESP_STATS		    =  65,
+	ATH12K_DBG_HTT_EXT_PDEV_RTT_INITIATOR_STATS	    =  66,
+
 	/* keep this last */
 	ATH12K_DBG_HTT_NUM_EXT_STATS,
 };
