From c906d846ada44629f3a98b3ec5a115994df3c8cb Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Tue, 6 Feb 2024 12:00:41 +0530
Subject: [PATCH 1/1] wifi : ath12k: Bug fixes

1. In ath12k_read_wmm_stats, ath12k_write_fw_dbglog there are occurences
of calling ath12k_warn without passing ath12k_base as first argument
which will result in below warning.

note: expected 'struct ath12k_base *' but argument is of type 'char *'
__printf(2, 3) void ath12k_warn(struct ath12k_base *ab, const char *fmt, ...);
                                 ~~~~~~~~~~~~~~~~~~~~^~
Fixing it by passing appropriate ab.

2. In htt_print_tx_pdev_mu_ppdu_dist_stat scnprintf expects an arguent
const char * where as we are currently passing const u32 *. Fixing it 
by passing the format string.

3. In ath12k_dp_rx_h_verify_tkip_mi rx_status and rxs are both of type
ieee80211_rx_status * so no need to pass address of rxs.

4. In ath12k_dp_tx_htt_tx_complete_buf instead of passing hal_tx_status *
in ath12k_sawf_stats_update we are passing ath12k_dp_htt_wbm_tx_status *
fixing it by passing expected value.

5. In ath12k_mac_vif_cache_flush Instead of passing ath12k_link_sta
in ath12k_mac_set_key we are passing ieee80211_sta * fixing it by 
passing correct value.

6. Moving spin lock init from  ath12k_core_hw_group_start to 
ath12k_core_get_hw_group. This will fix the below warning.

[   54.092755] BUG: spinlock bad magic on CPU#0, kworker/u8:4/60
[   54.098128]  lock: 0xffffff80128c1128, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
[   54.104044] CPU: 0 PID: 60 Comm: kworker/u8:4 Not tainted 6.4.0test+ #85
[   54.112192] Hardware name: Freebox FBXGW9R (DT)
[   54.118960] Workqueue: ath12k_qmi_driver_event ath12k_qmi_driver_event_work [ath12k]
[   54.123217] Call trace:
[   54.131198]  dump_backtrace+0x90/0xe4
[   54.133369]  show_stack+0x14/0x1c
[   54.137188]  dump_stack_lvl+0x44/0x58
[   54.140487]  dump_stack+0x18/0x24
[   54.144132]  spin_bug+0xd8/0x140
[   54.147430]  do_raw_spin_lock+0x1b0/0x1fc
[   54.150731]  _raw_spin_lock_bh+0x40/0x50
[   54.154637]  ath12k_dp_srng_setup+0x468/0x924 [ath12k]
[   54.158631]  ath12k_dp_alloc+0x174/0xf34 [ath12k]
[   54.163578]  ath12k_core_qmi_firmware_ready+0x58/0x1418 [ath12k]
[   54.168354]  ath12k_qmi_driver_event_work+0x270/0xe10 [ath12k]
[   54.174430]  process_one_work+0x37c/0x5cc
[   54.180071]  worker_thread+0x9c/0x630
[   54.184150]  kthread+0x1b8/0x1c0
[   54.187795]  ret_from_fork+0x10/0x20

Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c         |  4 ++--
 .../net/wireless/ath/ath12k/debugfs_htt_stats.c   | 15 ++++++++-------
 drivers/net/wireless/ath/ath12k/dp_rx.c           |  2 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c           |  2 +-
 drivers/net/wireless/ath/ath12k/mac.c             |  2 +-
 5 files changed, 13 insertions(+), 12 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1452,7 +1452,7 @@ static ssize_t ath12k_read_wmm_stats(str
 
 	buf = kzalloc(size, GFP_KERNEL);
 	if (!buf) {
-		ath12k_warn("failed to allocate the buffer%s\n", __func__);
+		ath12k_warn(ar->ab,"failed to allocate the buffer%s\n", __func__);
 		return -ENOMEM;
 	}
 
@@ -2160,7 +2160,7 @@ static ssize_t ath12k_write_fw_dbglog(st
 	ab->fw_dbglog_val = value;
 	ret = ath12k_wmi_dbglog_cfg(ar, param, value);
 	if (ret) {
-		ath12k_warn(ar, "dbglog cfg failed from debugfs: %d\n",
+		ath12k_warn(ar->ab, "dbglog cfg failed from debugfs: %d\n",
 			    ret);
 		goto out;
 	}
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3805,7 +3805,7 @@ static int ath12k_dp_rx_h_verify_tkip_mi
 		return 0;
 
 	rx_info.filled = 0;
-	rx_info.rx_status = &rxs;
+	rx_info.rx_status = rxs;
 
 	hdr = (struct ieee80211_hdr *)(msdu->data + hal_rx_desc_sz);
 	hdr_len = ieee80211_hdrlen(hdr->frame_control);
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -941,7 +941,7 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 				   "dp_tx: failed to find the peer with peer_id %d\n",
 				   ts_status.peer_id);
 		else
-			ath12k_sawf_stats_update(ar, msdu, &ts, peer, timestamp);
+			ath12k_sawf_stats_update(ar, msdu, &ts_status, peer, timestamp);
 		spin_unlock_bh(&ab->base_lock);
 	}
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11150,7 +11150,7 @@ void ath12k_mac_vif_cache_flush(struct a
 			}
 
 			ret = ath12k_mac_set_key(ar, key_conf->cmd,
-					arvif, key_conf->sta,
+					arvif, arsta,
 					key_conf->key);
 			if (ret)
 				ath12k_warn(ar->ab, "unable to apply set key param to vdev %d ret %d\n",
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -241,6 +241,14 @@ again:
 		ath12k_info(ab, "Grouping of multiple SoC not done\n");
 
 		ag = ath12k_core_hw_group_alloc(group_id, 1);
+
+		if (!ag) {
+			ath12k_warn(ab, "unable to create new hw group\n");
+			return NULL;
+		}
+
+		if (ab->hw_params->support_umac_reset)
+			spin_lock_init(&ag->mlo_umac_reset.lock);
 	} else {
 		if (of_property_read_u32(mlo, "num_chip", &num_chips)) {
 			ath12k_err(ab, "num_chip is not configured\n");
@@ -266,10 +274,15 @@ again:
 		ag = ath12k_core_hw_group_find_by_id(group_id);
 		if (!ag) {
 			ag = ath12k_core_hw_group_alloc(group_id, num_chips);
+
 			if (!ag) {
 				ath12k_warn(ab, "unable to create new hw group\n");
 				return NULL;
 			}
+
+			if (ab->hw_params->support_umac_reset)
+				spin_lock_init(&ag->mlo_umac_reset.lock);
+
 		} else if (test_bit(ATH12K_FLAG_UNREGISTERING, &ag->dev_flags)) {
 			ath12k_dbg(ab, ATH12K_DBG_BOOT, "group id %d in unregister state\n",
 				   ag->id);
@@ -1535,14 +1548,9 @@ static int ath12k_core_hw_group_start(st
 	struct ath12k_base *ab = ag->ab[0];
 	int ret, i;
 	bool is_registered = false;
-	struct ath12k_mlo_dp_umac_reset *mlo_umac_reset;
 
 	lockdep_assert_held(&ag->mutex_lock);
 
-	mlo_umac_reset = &ag->mlo_umac_reset;
-	if (ab->hw_params->support_umac_reset)
-		spin_lock_init(&mlo_umac_reset->lock);
-
 	/* Check If already registered or not, since same flow
 	 * execute for HW restart case.
 	 */
