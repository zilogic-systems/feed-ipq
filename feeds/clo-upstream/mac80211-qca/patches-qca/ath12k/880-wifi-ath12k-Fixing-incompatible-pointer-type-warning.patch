From f4ff76074933f65578d257bfe5c79891365a31f4 Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Thu, 8 Feb 2024 11:27:08 +0530
Subject: [PATCH 1/1] wifi: ath12k: Fixing incompatible-pointer and int-conversion warnings

1. for_each_set_bit will use find_next_bit which expects unsigned long
so assigning sta->valid_links to links and passing it. It will fix the
below warning.

 484 |         for_each_set_bit(link_id, &sdata->vif.valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
./include/linux/find.h:494:48: note: in definition of macro 'for_each_set_bit'
  494 |         for ((bit) = 0; (bit) = find_next_bit((addr), (size), (bit)), (bit) < (size); (bit)++)
      |                                                ^~~~
./include/linux/find.h:49:50: note: expected 'const long unsigned int *' but argument is of type 'u16 *' {aka 'short unsigned int *'}

2. ath12k_core_mode1_recovery_sta_list is of return type int where as
in ieee80211_iterate_stations_atomic it is expected to be of void
return type. So changing it to void.

3. paddr is of type dma_addr_t which expects value 0 instead of NULL.
Fixes below warning.

warning: assignment to 'dma_addr_t' {aka 'long long unsigned int'} from 'void *' makes integer from pointer without a cast [-Wint-conversion]

4. ath12k_dp_tx_status_parse expects argument of hal_wbm_completion_ring_tx *.
So force casting it to hal_wbm_completion_ring_tx * , it will fix the below
warning.

warning: passing argument 2 of 'ath12k_dp_tx_status_parse' from incompatible pointer type [-Wincompatible-pointer-types]
 1157 |         ath12k_dp_tx_status_parse(ab, tx_status, &ts);
      |                                       ^~~~~~~~~
      |                                       |
      |                                       struct hal_wbm_release_ring *

5. In ath12k_ppeds_tx_completion_handler desc expects hal_wbm_completion_ring_tx *
where as the return type of ath12k_hal_srng_dst_get_next_cache_entry is u32 *,So
type casting to appropriate type.

6. In ath12k_dp_tx_completion_handler, ath12k_dp_tx_complete_msdu and
ath12k_dp_tx_completion_valid expects argument of type struct
hal_wbm_release_ring  *,So type casting it explicitly.

7. In ath12k_dp_tx_completion_valid status_desc expects htt_tx_wbm_completion *.
So, type casting it explicitly.

8. Adding const qualifier to addr argument in ath12k_peer_delete_send,
__ath12k_peer_delete, ath12k_peer_delete to fix discarded-qualifier
warnings.

Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c  | 16 +++++++++-------
 drivers/net/wireless/ath/ath12k/dp.c    |  2 +-
 drivers/net/wireless/ath/ath12k/dp_rx.c |  2 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c | 14 +++++++-------
 drivers/net/wireless/ath/ath12k/peer.c  | 13 ++++++++-----
 drivers/net/wireless/ath/ath12k/peer.h  |  4 ++--
 drivers/net/wireless/ath/ath12k/qmi.c   |  4 ++--
 7 files changed, 30 insertions(+), 25 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 6c14cc4..d20df77 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2281,7 +2281,7 @@ void ath12k_core_halt(struct ath12k *ar)
 	}
 }
 
-static int ath12k_core_mode1_recovery_sta_list(void *data,
+static void ath12k_core_mode1_recovery_sta_list(void *data,
 					       struct ieee80211_sta *sta)
 {
 	struct ath12k_link_sta *arsta;
@@ -2298,20 +2298,21 @@ static int ath12k_core_mode1_recovery_sta_list(void *data,
 	u8 link_id = arvif->link_id;
 	enum ieee80211_sta_state state, prev_state;
 	bool sta_added = false;
+	unsigned long links;
 
 	if (ahsta->ahvif != arvif->ahvif)
-		return -1;
+		return;
 
 	/* Check if there is a link sta in the vif link */
 	if (!(BIT(link_id) & ahsta->links_map))
-		return -1;
+		return;
 
 	/* From iterator, rcu_read_lock is acquired. Will be revisited
 	 * later to use local list
 	 */
 	arsta = ahsta->link[link_id];
 	if (!arsta)
-		return -1;
+		return;
 
 	key_conf = container_of((void *)sta, struct ath12k_key_conf, sta);
 
@@ -2319,7 +2320,7 @@ static int ath12k_core_mode1_recovery_sta_list(void *data,
 	    vif->type != NL80211_IFTYPE_AP_VLAN &&
 	    vif->type != NL80211_IFTYPE_STATION &&
 	    vif->type != NL80211_IFTYPE_MESH_POINT)
-		return 0;
+		return;
 
 	peer = ath12k_peer_find(ar->ab, arvif->vdev_id, arsta->addr);
 	if (peer) {
@@ -2381,7 +2382,8 @@ key_add:
 			}
 
 			if (sta->mlo) {
-				for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+				links = sta->valid_links;
+				for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
 					arvif = ahvif->link[link_id];
 					arsta = ahsta->link[link_id];
 					if (WARN_ON(!arvif || !arsta))
@@ -2422,7 +2424,7 @@ key_add:
 
 	ret = 0;
 out:
-	return ret;
+	return;
 }
 
 static void ath12k_core_iterate_sta_list(struct ath12k *ar,
diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index 89d0b4c..3a471a5 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1641,7 +1641,7 @@ void ath12k_dp_umac_txrx_desc_cleanup(struct ath12k_base *ab)
 
 			skb = desc_info[j].skb;
 			desc_info[j].skb = NULL;
-			desc_info[j].paddr = NULL;
+			desc_info[j].paddr = 0;
 			desc_info[j].in_use = false;
 			list_add_tail(&desc_info[j].list, &dp->rx_desc_free_list);
 
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 369ddff..638c026 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3605,7 +3605,7 @@ try_again:
 
 		msdu = desc_info->skb;
 		desc_info->skb = NULL;
-		desc_info->paddr = NULL;
+		desc_info->paddr = 0;
 
 		list_add_tail(&desc_info->list, &rx_desc_used_list[chip_id]);
 
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 38242f6..e312506 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1167,7 +1167,7 @@ static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
                 return;
         }
 
-	ath12k_dp_tx_status_parse(ab, tx_status, &ts);
+	ath12k_dp_tx_status_parse(ab, (struct hal_wbm_completion_ring_tx *)tx_status, &ts);
 
 	ar->wmm_stats.tx_type = ath12k_tid_to_ac(ts.tid > ATH12K_DSCP_PRIORITY ? 0:ts.tid);
 	if (ar->wmm_stats.tx_type) {
@@ -1321,7 +1321,7 @@ static inline bool ath12k_dp_tx_completion_valid(struct hal_wbm_release_ring *de
 
 	if (FIELD_GET(HAL_WBM_COMPL_TX_INFO0_REL_SRC_MODULE, desc->info0) ==
 	    HAL_WBM_REL_SRC_MODULE_FW) {
-		status_desc = ((u8 *)desc) + HTT_TX_WBM_COMP_STATUS_OFFSET;
+		status_desc = (struct htt_tx_wbm_completion *)(((u8 *)desc) + HTT_TX_WBM_COMP_STATUS_OFFSET);
 
 		/* Dont consider HTT_TX_COMP_STATUS_MEC_NOTIFY */
 		if (FIELD_GET(HTT_TX_WBM_COMP_INFO0_STATUS, status_desc->info0) ==
@@ -1345,7 +1345,7 @@ static void ath12k_ppeds_tx_update_stats(struct ath12k *ar, struct sk_buff *msdu
 	memset(&info->status, 0, sizeof(info->status));
 	info->status.rates[0].idx = -1;
 
-	ath12k_dp_tx_status_parse(ab, tx_status, &ts);
+	ath12k_dp_tx_status_parse(ab, (struct hal_wbm_completion_ring_tx *)tx_status, &ts);
 	if (ts.status == HAL_WBM_TQM_REL_REASON_FRAME_ACKED &&
 	    !(info->flags & IEEE80211_TX_CTL_NO_ACK)) {
 		info->flags |= IEEE80211_TX_STAT_ACK;
@@ -1460,7 +1460,7 @@ int ath12k_ppeds_tx_completion_handler(struct ath12k_base *ab, int budget)
 	skb_queue_head_init(&free_list_head);
 
 	while (likely(valid_entries--)) {
-		desc = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring);
+		desc = (struct hal_wbm_completion_ring_tx *)ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring);
 		if (!desc || !ath12k_dp_tx_completion_valid(desc))
 			continue;
 
@@ -1583,9 +1583,9 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 	ath12k_hal_srng_dst_invalidate_entry(ab, status_ring, valid_entries);
 	skb_queue_head_init(&free_list_head);
 
-	while (budget && (tx_status = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
+	while (budget && (tx_status = (struct hal_wbm_completion_ring_tx *)ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
 		budget--;
-		if (!ath12k_dp_tx_completion_valid(tx_status))
+		if (!ath12k_dp_tx_completion_valid((struct hal_wbm_release_ring *)tx_status))
 			continue;
 
 		if (likely(HAL_WBM_COMPL_TX_INFO0_CC_DONE & tx_status->info0)) {
@@ -1699,7 +1699,7 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 			}
 		} else {
 
-			ath12k_dp_tx_complete_msdu(ar, msdu, tx_status,
+			ath12k_dp_tx_complete_msdu(ar, msdu, (struct hal_wbm_release_ring  *)tx_status,
 						   buf_rel_source,
 						   tx_ring->tcl_data_ring_id, timestamp);
 		}
diff --git a/drivers/net/wireless/ath/ath12k/peer.c b/drivers/net/wireless/ath/ath12k/peer.c
index 014eb80..20d7c0e 100644
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -470,7 +470,7 @@ int ath12k_wait_for_peer_delete_done(struct ath12k *ar, u32 vdev_id,
 	return 0;
 }
 
-int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, u8 *addr)
+int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, const u8 *addr)
 {
 	struct ath12k_peer *peer;
 	struct ath12k_base *ab = ar->ab;
@@ -515,7 +515,7 @@ int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, u8 *addr)
 	return 0;
 }
 
-static int __ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, u8 *addr)
+static int __ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr)
 {
 	int ret;
 
@@ -532,7 +532,7 @@ static int __ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, u8 *addr)
 	return 0;
 }
 
-int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, u8 *addr)
+int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr)
 {
 	int ret;
 
@@ -556,6 +556,7 @@ int ath12k_ml_link_peers_delete(struct ath12k_vif *ahvif, struct ath12k_sta *ahs
 	int ret, err_ret = 0;
 	u8 link_id = 0;
 	struct ath12k_hw *ah = ahvif->ah;
+	unsigned long links;
 
 	lockdep_assert_held(&ah->conf_mutex);
 
@@ -567,7 +568,8 @@ int ath12k_ml_link_peers_delete(struct ath12k_vif *ahvif, struct ath12k_sta *ahs
 	/* FW expects delete of all link peers at once before waiting for reception
 	 * of peer unmap or delete responses
 	 */
-	for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+	links = sta->valid_links;
+	for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		arvif = ahvif->link[link_id];
 		arsta = ahsta->link[link_id];
 
@@ -602,7 +604,8 @@ int ath12k_ml_link_peers_delete(struct ath12k_vif *ahvif, struct ath12k_sta *ahs
 	}
 
 	/* Ensure all link peers are deleted and unmapped */
-	for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+	links = sta->valid_links;
+	for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		arvif = ahvif->link[link_id];
 		arsta = ahsta->link[link_id];
 
diff --git a/drivers/net/wireless/ath/ath12k/peer.h b/drivers/net/wireless/ath/ath12k/peer.h
index a45f059..fabeef6 100644
--- a/drivers/net/wireless/ath/ath12k/peer.h
+++ b/drivers/net/wireless/ath/ath12k/peer.h
@@ -109,7 +109,7 @@ struct ath12k_peer *ath12k_peer_find_by_id(struct ath12k_base *ab, int peer_id);
 struct ath12k_peer *ath12k_peer_find_pri_by_id(struct ath12k_base *ab, int peer_id);
 #endif
 void ath12k_peer_cleanup(struct ath12k *ar, u32 vdev_id);
-int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, u8 *addr);
+int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr);
 int ath12k_ml_link_peers_delete(struct ath12k_vif *ahvif, struct ath12k_sta *ahsta);
 int ath12k_ml_peer_create(struct ath12k_hw *ah, struct ieee80211_sta *sta);
 int ath12k_ml_peer_delete(struct ath12k_hw *ah, struct ieee80211_sta *sta);
@@ -124,7 +124,7 @@ void ath12k_peer_rhash_tbl_destroy(struct ath12k_base *ab);
 int ath12k_peer_rhash_delete(struct ath12k_base *ab, struct ath12k_peer *peer);
 void ath12k_peer_mlo_map_event(struct ath12k_base *ab, struct sk_buff *skb);
 void ath12k_peer_mlo_unmap_event(struct ath12k_base *ab, struct sk_buff *skb);
-int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, u8 *addr);
+int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, const u8 *addr);
 struct ath12k_peer *ath12k_peer_find_by_vdev_id(struct ath12k_base *ab,
 		                        int vdev_id);
 static inline
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index 346d5c1..b491b09 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3516,14 +3516,14 @@ static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 		}
 	}
 
-	mlo_chunk->paddr = NULL;
+	mlo_chunk->paddr = 0;
 	mlo_chunk->size = 0;
 
 	if (fixed_mem)
 		chunk->v.ioaddr = NULL;
 	else
 		chunk->v.addr = NULL;
-	chunk->paddr = NULL;
+	chunk->paddr = 0;
 	chunk->size = 0;
 
 	ag->mlo_mem.is_mlo_mem_avail = false;
-- 
2.34.1

