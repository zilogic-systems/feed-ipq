From 4d9131d44280fb4a0ac2a57c2a32b5592d726d30 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Mon, 11 Mar 2024 10:52:29 +0530
Subject: [PATCH] wifi: ath12k: add ethtool support for rx and tx stats

Add ethtool support for rx_errors, rx_dev_dropped, tx_errors, tx_dev_dropped.

In ideal condition the above stats should have very low value.

These stats are helpful in debugging wifi data traffic related issues.

For eg, tx_dev_dropped parameter counts the tx data frames that are not
transmitted and dropped.

rx_dev_dropped parameter counts the rx data frames that are not
sent to net layer and dropped in mac80211/ath12k driver.

tx_error parameter counts the data frames for which ack is not received.

rx_error parameter counts the rx data frames that contains errors.

Also add RX_MSDU_END in the default TLV filter to get rx_error stats.

sample output:
root@OpenWrt:/# ethtool -S wlan1
NIC statistics:
     rx_packets: 10
     rx_bytes: 408
     rx_duplicates: 0
     rx_fragments: 5
     rx_dropped: 0
     tx_packets: 6
     tx_bytes: 449
     tx_filtered: 0
     tx_retry_failed: 3
     tx_retries: 68
     sta_state: 0
     txrate: 0
     rxrate: 0
     signal: 0
     channel: 0
     noise: 18446744073709551615
     ch_time: 18446744073709551615
     ch_time_busy: 18446744073709551615
     ch_time_ext_busy: 18446744073709551615
     ch_time_rx: 18446744073709551615
     ch_time_tx: 18446744073709551615
     tx_dev_dropped: 8
     rx_dev_dropped: 0
     tx_errors: 0
     rx_errors: 0

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.c   | 55 +++++++++++++++
 drivers/net/wireless/ath/ath12k/debug.h   |  8 +++
 drivers/net/wireless/ath/ath12k/dp.h      |  3 +
 drivers/net/wireless/ath/ath12k/dp_mon.c  | 72 ++++++++++++++------
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 76 ++++++++++++++-------
 drivers/net/wireless/ath/ath12k/dp_tx.c   | 83 ++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/hal.c     |  2 +-
 drivers/net/wireless/ath/ath12k/hal_rx.h  |  2 +
 drivers/net/wireless/ath/ath12k/mac.c     |  8 ++-
 drivers/net/wireless/ath/ath12k/rx_desc.h |  5 ++
 10 files changed, 250 insertions(+), 64 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debug.c
+++ b/drivers/net/wireless/ath/ath12k/debug.c
@@ -7,6 +7,61 @@
 #include <linux/vmalloc.h>
 #include "core.h"
 #include "debug.h"
+#include <net/mac80211.h>
+
+static const char ath12k_gstrings_stats[][ETH_GSTRING_LEN] = {
+	"tx_errors",
+	"rx_errors",
+};
+
+#define ATH12K_SSTATS_LEN ARRAY_SIZE(ath12k_gstrings_stats)
+
+void ath12k_debug_get_et_strings(struct ieee80211_hw *hw,
+				 struct ieee80211_vif *vif,
+				 u32 sset, u8 *data)
+{
+	if (sset == ETH_SS_STATS)
+		memcpy(data, *ath12k_gstrings_stats,
+		       sizeof(ath12k_gstrings_stats));
+}
+
+int ath12k_debug_get_et_sset_count(struct ieee80211_hw *hw,
+				   struct ieee80211_vif *vif, int sset)
+{
+	if (sset == ETH_SS_STATS)
+		return ATH12K_SSTATS_LEN;
+
+	return 0;
+}
+
+void ath12k_debug_get_et_stats(struct ieee80211_hw *hw,
+			       struct ieee80211_vif *vif,
+			       struct ethtool_stats *stats, u64 *data)
+{
+	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
+	int i =  IEEE80211_STATS_MAX;
+	u8 link_id;
+	struct ath12k_link_vif *arvif;
+	u32 tx_errors = 0, rx_errors = 0, tx_dropped = 0, rx_dropped = 0;
+
+	for_each_set_bit(link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
+		arvif = ahvif->link[link_id];
+		if (!arvif)
+			continue;
+		tx_errors += arvif->link_stats.tx_errors;
+		rx_errors += arvif->link_stats.rx_errors;
+		tx_dropped += arvif->link_stats.tx_dropped;
+		rx_dropped += arvif->link_stats.rx_dropped;
+	}
+
+	data[i++] = tx_errors;
+	data[i++] = rx_errors;
+
+	data[IEEE80211_TX_DEV_DROPPED] += tx_dropped;
+	data[IEEE80211_RX_DEV_DROPPED] += rx_dropped;
+
+	WARN_ON(i != (ATH12K_SSTATS_LEN + IEEE80211_STATS_MAX));
+}
 
 void ath12k_info(struct ath12k_base *ab, const char *fmt, ...)
 {
--- a/drivers/net/wireless/ath/ath12k/debug.h
+++ b/drivers/net/wireless/ath/ath12k/debug.h
@@ -53,6 +53,14 @@ __printf(2, 3) void ath12k_warn(struct a
 
 extern unsigned int ath12k_debug_mask;
 extern unsigned int ath12k_ftm_mode;
+void ath12k_debug_get_et_strings(struct ieee80211_hw *hw,
+				 struct ieee80211_vif *vif,
+				 u32 sset, u8 *data);
+int ath12k_debug_get_et_sset_count(struct ieee80211_hw *hw,
+				   struct ieee80211_vif *vif, int sset);
+void ath12k_debug_get_et_stats(struct ieee80211_hw *hw,
+			       struct ieee80211_vif *vif,
+			       struct ethtool_stats *stats, u64 *data);
 
 #ifdef CPTCFG_ATH12K_DEBUG
 __printf(3, 4) void __ath12k_dbg(struct ath12k_base *ab,
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -381,6 +381,9 @@ struct host_link_stats {
 	u32 tx_encap_type[HAL_TCL_ENCAP_TYPE_MAX];
 	u32 tx_encrypt_type[HAL_ENCRYPT_TYPE_MAX];
 	u32 tx_desc_type[HAL_TCL_DESC_TYPE_MAX];
+	u32 rx_dropped;
+	u32 tx_errors;
+	u32 rx_errors;
 };
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -1428,12 +1428,38 @@ ath12k_dp_mon_hal_rx_parse_receive_user_
 	return HAL_TLV_STATUS_PPDU_NOT_DONE;
 }
 
+static void
+ath12k_dp_mon_parse_rx_msdu_end_err(u32 info, u32 *errmap) {
+
+	if (info & RX_MSDU_END_INFO13_FCS_ERR)
+		*errmap |= HAL_RX_MPDU_ERR_FCS;
+
+	if (info & RX_MSDU_END_INFO13_DECRYPT_ERR)
+		*errmap |= HAL_RX_MPDU_ERR_DECRYPT;
+
+	if (info & RX_MSDU_END_INFO13_TKIP_MIC_ERR)
+		*errmap |= HAL_RX_MPDU_ERR_TKIP_MIC;
+
+	if (info & RX_MSDU_END_INFO13_A_MSDU_ERROR)
+		*errmap |= HAL_RX_MPDU_ERR_AMSDU_ERR;
+
+	if (info & RX_MSDU_END_INFO13_OVERFLOW_ERR)
+		*errmap |= HAL_RX_MPDU_ERR_OVERFLOW;
+
+	if (info & RX_MSDU_END_INFO13_MSDU_LEN_ERR)
+		*errmap |= HAL_RX_MPDU_ERR_MSDU_LEN;
+
+	if (info & RX_MSDU_END_INFO13_MPDU_LEN_ERR)
+		*errmap |= HAL_RX_MPDU_ERR_MPDU_LEN;
+
+}
+
 static enum hal_rx_mon_status
 ath12k_dp_mon_rx_parse_status_tlv(struct ath12k_base *ab,
 				  struct hal_rx_mon_ppdu_info *ppdu_info,
 				  struct hal_tlv_parsed_hdr *tlv_parsed_hdr)
 {
-	u32 info[7];
+	u32 info[32];
 	u16 tlv_tag = tlv_parsed_hdr->tlv_tag;
 	u16 tlv_len = tlv_parsed_hdr->tlv_len;
 	u16 userid = tlv_parsed_hdr->tlv_userid;
@@ -1676,6 +1702,25 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 	case HAL_PHYRX_GENERIC_U_SIG:
 		ath12k_dp_mon_hal_rx_parse_u_sig_hdr(tlv_data, ppdu_info);
 		break;
+	case HAL_RX_MSDU_END:
+		struct rx_msdu_end_qcn9274 *msdu_end =
+					(struct rx_msdu_end_qcn9274 *)tlv_data;
+		u32 errmap = 0;
+		u32 grp_id;
+
+		info[13] = __le32_to_cpu(msdu_end->info13);
+
+		ath12k_dp_mon_parse_rx_msdu_end_err(info[13], &errmap);
+		info[0] = __le32_to_cpu(msdu_end->sw_frame_group_id);
+		grp_id = u32_get_bits(info[0], RX_MSDU_END_INFO0_SW_FRAME_GRP_ID);
+		if (grp_id == RX_MSDU_END_INFO0_SW_FRAMEGROUP_UCAST_DATA ||
+		    grp_id == RX_MSDU_END_INFO0_SW_FRAMEGROUP_MCAST_DATA) {
+			ppdu_info->errmap = errmap;
+			if (userid < HAL_MAX_UL_MU_USERS) {
+				ppdu_info->userstats[userid].errmap = errmap;
+			}
+		}
+		break;
 	case HAL_PHYRX_GENERIC_EHT_SIG: {
 		/*
 		 * Handle the case where aggregation is in progress
@@ -2295,26 +2340,7 @@ ath12k_dp_mon_parse_rx_msdu_end(u8 *tlv_
 	u32 info = __le32_to_cpu(msdu_end->info13);
 	u32 errmap = 0, mpdu_idx, msdu_idx, decap_format;
 
-	if (info & RX_MSDU_END_INFO13_FCS_ERR)
-		errmap |= HAL_RX_MPDU_ERR_FCS;
-
-	if (info & RX_MSDU_END_INFO13_DECRYPT_ERR)
-		errmap |= HAL_RX_MPDU_ERR_DECRYPT;
-
-	if (info & RX_MSDU_END_INFO13_TKIP_MIC_ERR)
-		errmap |= HAL_RX_MPDU_ERR_TKIP_MIC;
-
-	if (info & RX_MSDU_END_INFO13_A_MSDU_ERROR)
-		errmap |= HAL_RX_MPDU_ERR_AMSDU_ERR;
-
-	if (info & RX_MSDU_END_INFO13_OVERFLOW_ERR)
-		errmap |= HAL_RX_MPDU_ERR_OVERFLOW;
-
-	if (info & RX_MSDU_END_INFO13_MSDU_LEN_ERR)
-		errmap |= HAL_RX_MPDU_ERR_MSDU_LEN;
-
-	if (info & RX_MSDU_END_INFO13_MPDU_LEN_ERR)
-		errmap |= HAL_RX_MPDU_ERR_MPDU_LEN;
+	ath12k_dp_mon_parse_rx_msdu_end_err(info, &errmap);
 
 	decap_format = u32_get_bits(info, RX_MSDU_END_INFO11_DECAP_FORMAT);
 
@@ -3405,6 +3431,8 @@ static void ath12k_dp_mon_rx_update_peer
 	arsta->rssi_comb = ppdu_info->rssi_comb;
 	arsta->rx_retries  += ppdu_info->mpdu_retry;
 	ewma_avg_rssi_add(&arsta->avg_rssi, ppdu_info->rssi_comb + bw_offset);
+	if (ppdu_info->errmap)
+		arsta->arvif->link_stats.rx_errors++;
 
 	if (!ath12k_debugfs_is_extd_rx_stats_enabled(ar) || !rx_stats)
 		return;
@@ -3585,6 +3613,8 @@ ath12k_dp_mon_rx_update_user_stats(struc
 	}
 
 	arsta->rx_retries = user_stats->mpdu_retry;
+	if (user_stats->errmap)
+		arsta->arvif->link_stats.rx_errors++;
 
 	if (!ath12k_debugfs_is_extd_rx_stats_enabled(ar))
 		return;
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4613,6 +4613,7 @@ static int ath12k_dp_rx_h_null_q_desc(st
 	bool fast_rx;
 	struct ath12k_link_sta *arsta = NULL;
 	struct ath12k_peer *peer = NULL;
+	int ret = 0;
 
 	msdu_len = ath12k_dp_rx_h_msdu_len(ab, desc);
 	peer_id = ath12k_dp_rx_h_peer_id(ab, desc);
@@ -4621,21 +4622,25 @@ static int ath12k_dp_rx_h_null_q_desc(st
 		/* First buffer will be freed by the caller, so deduct it's length */
 		msdu_len = msdu_len - (DP_RX_BUFFER_SIZE - hal_rx_desc_sz);
 		ath12k_dp_rx_null_q_desc_sg_drop(ar, msdu_len, msdu_list);
-		return -EINVAL;
+		ret = -EINVAL;
+		goto exit;
 	}
 
 	/* Even after cleaning up the sg buffers in the msdu list with above check
 	 * any msdu received with continuation flag needs to be dropped as invalid.
 	 * This protects against some random err frame with continuation flag.
 	 */
-	if (rxcb->is_continuation)
-		return -EINVAL;
+	if (rxcb->is_continuation) {
+		ret = -EINVAL;
+		goto exit;
+	}
 
 	if (!ath12k_dp_rx_h_msdu_done(ab, desc)) {
 		ath12k_warn(ar->ab,
 			    "msdu_done bit not set in null_q_des processing\n");
 		__skb_queue_purge(msdu_list);
-		return -EIO;
+		ret = -EIO;
+		goto exit;
 	}
 
 	/* Handle NULL queue descriptor violations arising out a missing
@@ -4652,8 +4657,10 @@ static int ath12k_dp_rx_h_null_q_desc(st
 	} else {
 		l3pad_bytes = ath12k_dp_rx_h_l3pad(ab, desc);
 
-		if ((hal_rx_desc_sz + l3pad_bytes + msdu_len) > DP_RX_BUFFER_SIZE)
-			return -EINVAL;
+		if ((hal_rx_desc_sz + l3pad_bytes + msdu_len) > DP_RX_BUFFER_SIZE) {
+			ret = -EINVAL;
+			goto exit;
+	}
 
 		skb_put(msdu, hal_rx_desc_sz + l3pad_bytes + msdu_len);
 		skb_pull(msdu, hal_rx_desc_sz + l3pad_bytes);
@@ -4665,7 +4672,8 @@ static int ath12k_dp_rx_h_null_q_desc(st
 	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, desc, msdu,
 						 "Invalid len in Null queue\n")) {
 		WARN_ON_ONCE(1);
-		return -EINVAL;
+		ret = -EINVAL;
+		goto exit;
 	}
 
 	ath12k_dp_rx_h_ppdu(ar, rx_info);
@@ -4678,19 +4686,23 @@ static int ath12k_dp_rx_h_null_q_desc(st
 	 * rx with mac80211. Need not worry about cleaning up amsdu_list.
 	 */
 
-	if (ath12k_debugfs_is_extd_rx_stats_enabled(ar)) {
-		peer_id = ath12k_dp_rx_h_peer_id(ar->ab, desc);
-		spin_lock_bh(&ar->ab->base_lock);
-		if (peer_id)
-			peer = ath12k_peer_find_by_id(ar->ab, rxcb->peer_id);
+exit:
+	if (!ab->stats_disable) {
+		spin_lock_bh(&ab->base_lock);
+		peer = ath12k_peer_find_by_id(ab, peer_id);
 		if (peer && peer->sta)
-			arsta = ath12k_peer_get_link_sta(ar->ab, peer);
-		spin_unlock_bh(&ar->ab->base_lock);
-		if (arsta)
-			atomic_inc(&arsta->drv_rx_pkts.pkts_frm_hw);
-	}
+			arsta = ath12k_peer_get_link_sta(ab, peer);
+
+		if (ath12k_debugfs_is_extd_rx_stats_enabled(ar)) {
+			if (arsta)
+				atomic_inc(&arsta->drv_rx_pkts.pkts_frm_hw);
+		}
 
-	return 0;
+		if (arsta && ret)
+			arsta->arvif->link_stats.rx_dropped++;
+		spin_unlock_bh(&ab->base_lock);
+	}
+	return ret;
 }
 
 static bool ath12k_dp_rx_h_reo_err(struct ath12k *ar, struct sk_buff *msdu,
@@ -4738,11 +4750,14 @@ static bool ath12k_dp_rx_h_tkip_mic_err(
 					struct ath12k_dp_rx_info *rx_info)
 {
 	struct ath12k_base *ab = ar->ab;
-	u16 msdu_len;
+	u16 msdu_len, peer_id;
 	struct hal_rx_desc *desc = (struct hal_rx_desc *)msdu->data;
 	u8 l3pad_bytes;
 	struct ath12k_skb_rxcb *rxcb = ATH12K_SKB_RXCB(msdu);
 	u32 hal_rx_desc_sz = ar->ab->hw_params->hal_desc_sz;
+	bool drop = false;
+	struct ath12k_peer *peer;
+	struct ath12k_link_sta *arsta = NULL;
 
 	rxcb->is_first_msdu = ath12k_dp_rx_h_first_msdu(ab, desc);
 	rxcb->is_last_msdu = ath12k_dp_rx_h_last_msdu(ab, desc);
@@ -4754,7 +4769,8 @@ static bool ath12k_dp_rx_h_tkip_mic_err(
 		ath12k_warn(ab, "invalid msdu len in tkip mirc err %u\n", msdu_len);
 		ath12k_dbg_dump(ab, ATH12K_DBG_DATA, NULL, "", desc,
 				sizeof(struct hal_rx_desc));
-		return true;
+		drop = true;
+		goto exit;
 	}
 
 	skb_put(msdu, hal_rx_desc_sz + l3pad_bytes + msdu_len);
@@ -4764,7 +4780,8 @@ static bool ath12k_dp_rx_h_tkip_mic_err(
 	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, desc, msdu,
 						 "Invalid len in tkip mic err\n")) {
 		WARN_ON_ONCE(1);
-		return true;
+		drop = true;
+		goto exit;
 	}
 
 	ath12k_dp_rx_h_ppdu(ar, rx_info);
@@ -4774,7 +4791,20 @@ static bool ath12k_dp_rx_h_tkip_mic_err(
 
 	ath12k_dp_rx_h_undecap(ar, msdu, desc,
 			       HAL_ENCRYPT_TYPE_TKIP_MIC, rx_info->rx_status, false);
-	return false;
+
+exit:
+	if (!ab->stats_disable) {
+		peer_id = ath12k_dp_rx_h_peer_id(ab, desc);
+		spin_lock_bh(&ab->base_lock);
+		peer = ath12k_peer_find_by_id(ab, peer_id);
+		if (peer && peer->sta)
+			arsta = ath12k_peer_get_link_sta(ab, peer);
+		if (arsta && drop)
+			arsta->arvif->link_stats.rx_dropped++;
+		spin_unlock_bh(&ab->base_lock);
+	}
+
+	return drop;
 }
 
 static bool ath12k_dp_rx_h_4addr_null_frame_handler(struct ath12k *ar,
@@ -4792,12 +4822,14 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 	struct ath12k_dp_rx_rfc1042_hdr *llc;
 	bool drop = false;
 	bool fast_rx = false;
+	struct ath12k_link_sta *arsta;
+	struct ath12k_peer *peer;
 
 	msdu_len = ath12k_dp_rx_h_msdu_len(ab, rx_desc);
 	peer_id = ath12k_dp_rx_h_peer_id(ab, rx_desc);
 
 	spin_lock_bh(&ab->base_lock);
-	if(!ath12k_peer_find_by_id(ab, peer_id)) {
+	if (!ath12k_peer_find_by_id(ab, peer_id)) {
 		spin_unlock_bh(&ab->base_lock);
 		ath12k_dbg(ab, ATH12K_DBG_DATA, "invalid peer id received in wbm err pkt%d\n",
 			   peer_id);
@@ -4806,8 +4838,10 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 	spin_unlock_bh(&ab->base_lock);
 	l3pad_bytes = ath12k_dp_rx_h_l3pad(ab, rx_desc);
 
-	if ((hal_rx_desc_sz + l3pad_bytes + msdu_len) > DP_RX_BUFFER_SIZE)
-		return -EINVAL;
+	if ((hal_rx_desc_sz + l3pad_bytes + msdu_len) > DP_RX_BUFFER_SIZE) {
+		drop = true;
+		goto exit;
+	}
 
 	skb_put(msdu, hal_rx_desc_sz + l3pad_bytes + msdu_len);
 	skb_pull(msdu, hal_rx_desc_sz + l3pad_bytes);
@@ -4816,7 +4850,8 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, rx_desc, msdu,
 						 "Invalid len in 4addr Null frame\n")) {
 		WARN_ON_ONCE(1);
-		return true;
+		drop = true;
+		goto exit;
 	}
 
 	ath12k_dp_rx_h_ppdu(ar, rx_info);
@@ -4833,6 +4868,17 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 	      ieee80211_is_qos_nullfunc(hdr->frame_control)))
 		drop = true;
 
+exit:
+	if (!ab->stats_disable && drop) {
+		spin_lock_bh(&ab->base_lock);
+		peer = ath12k_peer_find_by_id(ab, peer_id);
+		if (peer && peer->sta) {
+			arsta = ath12k_peer_get_link_sta(ab, peer);
+			if (arsta)
+				arsta->arvif->link_stats.rx_dropped++;
+		}
+		spin_unlock_bh(&ab->base_lock);
+	}
 	return drop;
 }
 static bool ath12k_dp_rx_h_rxdma_err(struct ath12k *ar,  struct sk_buff *msdu,
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -403,6 +403,7 @@ fail_unmap_dma:
 
 fail_remove_tx_buf:
 	ath12k_dp_tx_release_txbuf(dp, tx_desc, ring_id);
+	arvif->link_stats.tx_dropped++;
 
 	return ret;
 }
@@ -757,8 +758,6 @@ fail_remove_tx_buf:
 	if (ti.pkt_offset)
 		skb_pull(skb, ti.pkt_offset);
 
-	arvif->link_stats.tx_dropped++;
-
 	return ret;
 }
 
@@ -1151,6 +1150,9 @@ static void ath12k_dp_tx_complete_msdu(s
 	struct ieee80211_vif *vif;
 	struct ath12k_vif *ahvif;
 	u8 flags = 0;
+	bool sawf_stats_update = false;
+	bool tx_drop = false;
+	bool tx_error = false;
 
 	skb_cb = ATH12K_SKB_CB(msdu);
 	ab->soc_stats.tx_completed[ring]++;
@@ -1210,26 +1212,52 @@ static void ath12k_dp_tx_complete_msdu(s
 
 	if (ts.status != HAL_WBM_TQM_REL_REASON_FRAME_ACKED) {
 		switch (ts.status) {
+		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_AGED_FRAMES:
+			tx_error  = true;
+			sawf_stats_update = true;
+			break;
 		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_MPDU:
 		case HAL_WBM_TQM_REL_REASON_DROP_THRESHOLD:
-		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_AGED_FRAMES:
 		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_TX:
-			if (unlikely(ath12k_debugfs_is_sawf_stats_enabled(ar))) {
-				spin_lock_bh(&ab->base_lock);
-				peer = ath12k_peer_find_pri_by_id(ab, ts.peer_id);
-				if (unlikely(!peer || !peer->sta))
-					ath12k_dbg(ab, ATH12K_DBG_DATA,
-						   "dp_tx: failed to find the peer with peer_id %d\n",
-						   ts.peer_id);
-				else
-					ath12k_sawf_stats_update(ar, msdu, &ts, peer, timestamp);
-				spin_unlock_bh(&ab->base_lock);
-			}
-			ieee80211_free_txskb(ar->ah->hw, msdu);
-			return;
+			tx_drop = true;
+			sawf_stats_update = true;
+			break;
 		default:
 			//TODO: Remove this print and add as a stats
 			ath12k_dbg(ab, ATH12K_DBG_DP_TX, "tx frame is not acked status %d\n", ts.status);
+			tx_drop = true;
+		}
+
+		if (unlikely(!ab->stats_disable)) {
+			spin_lock_bh(&ab->base_lock);
+			peer = ath12k_peer_find_by_id(ab, ts.peer_id);
+			if (unlikely(!peer || !peer->sta)) {
+				ath12k_dbg(ab, ATH12K_DBG_DATA,
+					   "dp_tx: failed to find the peer with peer_id %d\n",
+					   ts.peer_id);
+				goto unlock;
+			}
+
+			if (sawf_stats_update && unlikely(ath12k_debugfs_is_sawf_stats_enabled(ar)))
+				ath12k_sawf_stats_update(ar, msdu, &ts, peer, timestamp);
+
+			arsta = ath12k_peer_get_link_sta(ab, peer);
+			if (!arsta) {
+				ath12k_warn(ab, "link sta not found on peer %pM id %d\n",
+					    peer->addr, peer->peer_id);
+				goto unlock;
+			}
+
+			if (tx_drop)
+				arsta->arvif->link_stats.tx_dropped++;
+			else if (tx_error)
+				arsta->arvif->link_stats.tx_errors++;
+unlock:
+			spin_unlock_bh(&ab->base_lock);
+		}
+		if (unlikely(sawf_stats_update)) {
+			ieee80211_free_txskb(ar->ah->hw, msdu);
+			return;
 		}
 	}
 
@@ -1340,6 +1368,9 @@ static void ath12k_ppeds_tx_update_stats
 	struct ath12k_peer *peer;
 	struct ath12k_link_sta *arsta;
 	struct hal_tx_status ts = { 0 };
+	bool tx_drop = false;
+	bool tx_error = false;
+	bool tx_status_default = false;
 
 	info = IEEE80211_SKB_CB(msdu);
 	memset(&info->status, 0, sizeof(info->status));
@@ -1362,12 +1393,17 @@ static void ath12k_ppeds_tx_update_stats
 		switch (ts.status) {
 		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_MPDU:
 		case HAL_WBM_TQM_REL_REASON_DROP_THRESHOLD:
-		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_AGED_FRAMES:
 		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_TX:
-			return;
+			tx_drop = true;
+			break;
+		case HAL_WBM_TQM_REL_REASON_CMD_REMOVE_AGED_FRAMES:
+			tx_error = true;
+			break;
 		default:
 			//TODO: Remove this print and add as a stats
 			ath12k_dbg(ab, ATH12K_DBG_DP_TX, "tx frame is not acked status %d\n", ts.status);
+			tx_drop = true;
+			tx_status_default = true;
 		}
 	}
 
@@ -1389,6 +1425,17 @@ static void ath12k_ppeds_tx_update_stats
 		spin_unlock_bh(&ab->base_lock);
 		return;
 	}
+
+	if (tx_error)
+		arsta->arvif->link_stats.tx_errors++;
+	else if (tx_drop)
+		arsta->arvif->link_stats.tx_dropped++;
+
+	if ((ts.status != HAL_WBM_TQM_REL_REASON_FRAME_ACKED) &&
+	    !tx_status_default) {
+		spin_unlock_bh(&ab->base_lock);
+		return;
+	}
 
 	ieee80211_ppeds_tx_update_stats(ar->ah->hw, peer->sta, info, arsta->txrate,
 					peer->link_id, msdu->len);
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -543,7 +543,7 @@ static u8 ath12k_hal_qcn9274_rx_desc_get
 }
 
 #define MPDU_START_WMASK 0xFFC
-#define MSDU_END_WMASK 0x13441
+#define MSDU_END_WMASK 0x13443
 
 static inline u16 ath12k_hal_rx_mpdu_start_wmask_get(void)
 {
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -151,6 +151,7 @@ struct hal_rx_user_status {
 	u32 ampdu_id;
 	bool ampdu_present;
 	bool mpdu_retry;
+	u32 errmap;
 };
 
 struct msdu_info {
@@ -291,6 +292,7 @@ struct hal_rx_mon_ppdu_info {
 	struct hal_rx_u_sig_info u_sig_info;
 	struct hal_rx_mon_cmn_mpdu_info cmn_mpdu_info;
 	bool mpdu_retry;
+	u32 errmap;
 };
 
 #define HAL_RX_PPDU_START_INFO0_PPDU_ID		GENMASK(15, 0)
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -251,7 +251,8 @@ ath12k_phymodes[NUM_NL80211_BANDS][ATH12
 const struct htt_rx_ring_tlv_filter ath12k_mac_mon_status_filter_default = {
 	.rx_filter = HTT_RX_FILTER_TLV_FLAGS_MPDU_START |
 		     HTT_RX_FILTER_TLV_FLAGS_PPDU_END |
-		     HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE,
+		     HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE |
+		     HTT_RX_FILTER_TLV_FLAGS_MSDU_END,
 	.pkt_filter_flags0 = HTT_RX_FP_MGMT_FILTER_FLAGS0,
 	.pkt_filter_flags1 = HTT_RX_FP_MGMT_FILTER_FLAGS1,
 	.pkt_filter_flags2 = HTT_RX_FP_CTRL_FILTER_FLASG2,
@@ -9800,6 +9801,7 @@ static void ath12k_mac_op_tx(struct ieee
 			else
 				ath12k_warn(ar->ab, "failed to transmit frame %d\n", ret);
 
+			arvif->link_stats.tx_dropped++;
 			ieee80211_free_txskb(ah->hw, skb);
 		}
 		if (ath12k_debugfs_is_extd_tx_stats_enabled(ar) && ahsta) {
@@ -9889,6 +9891,7 @@ skip_peer_find:
 					ath12k_warn(ar->ab, "failed to transmit frame %d\n",
 						    ret);
 
+				tmp_arvif->link_stats.tx_dropped++;
 				ieee80211_free_txskb(ah->hw, msdu_copied);
 			}
 		}
@@ -16072,6 +16075,9 @@ static const struct ieee80211_ops ath12k
 	.get_survey			= ath12k_mac_op_get_survey,
 	.flush				= ath12k_mac_op_flush,
 	.sta_statistics			= ath12k_mac_op_sta_statistics,
+	.get_et_sset_count		= ath12k_debug_get_et_sset_count,
+	.get_et_stats			= ath12k_debug_get_et_stats,
+	.get_et_strings			= ath12k_debug_get_et_strings,
 	.change_sta_links		= ath12k_mac_op_change_sta_links,
 	CFG80211_TESTMODE_CMD(ath12k_tm_cmd)
 #ifdef CPTCFG_ATH12K_DEBUGFS
--- a/drivers/net/wireless/ath/ath12k/rx_desc.h
+++ b/drivers/net/wireless/ath/ath12k/rx_desc.h
@@ -766,8 +766,13 @@ enum rx_msdu_start_reception_type {
 #define RX_MSDU_END_INFO14_RX_BITMAP_NOT_UPDED	BIT(13)
 #define RX_MSDU_END_INFO14_MSDU_DONE		BIT(31)
 
+#define RX_MSDU_END_INFO0_SW_FRAMEGROUP_MCAST_DATA 1
+#define RX_MSDU_END_INFO0_SW_FRAMEGROUP_UCAST_DATA 2
+
 struct rx_msdu_end_qcn9274 {
 	__le64 msdu_end_tag;
+	__le32 sw_frame_group_id;
+	__le32 resvd1;
 	__le16 sa_sw_peer_id;
 	__le16 info5;
 	__le16 sa_idx;
