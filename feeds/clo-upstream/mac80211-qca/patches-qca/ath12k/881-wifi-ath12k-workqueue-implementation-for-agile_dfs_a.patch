From afd49720886f3e0886355bd8902fe2e9ec76ae3c Mon Sep 17 00:00:00 2001
From: Monika Korada <quic_koramoni@quicinc.com>
Date: Wed, 14 Feb 2024 22:07:48 +0530
Subject: [PATCH] wifi: ath12k: workqueue implementation for
 agile_dfs_abort_cmd

During the interrupt handling of agile_dfs_abort_cmd, a wmi cmd
is sent which will call might_sleep function.

Since we cannot go for sleep in interrupt context, we are moving
this command to workqueue.

Signed-off-by: Monika Korada <quic_koramoni@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  1 +
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 14 ++++---------
 drivers/net/wireless/ath/ath12k/wmi.c  | 27 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h  |  1 +
 5 files changed, 34 insertions(+), 10 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2266,6 +2266,7 @@ void ath12k_core_halt(struct ath12k *ar)
 
 	ath12k_mac_peer_cleanup_all(ar);
 	cancel_work_sync(&ar->regd_update_work);
+	cancel_work_sync(&ar->agile_cac_abort_wq);
 	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
 	
 	if(!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags)))
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1024,6 +1024,7 @@ struct ath12k {
 	struct completion bss_survey_done;
 
 	struct work_struct regd_update_work;
+	struct work_struct agile_cac_abort_wq;
 
 	struct work_struct wmi_mgmt_tx_work;
 	struct sk_buff_head wmi_mgmt_tx_queue;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -17148,6 +17148,7 @@ static int ath12k_mac_setup(struct ath12
 	INIT_WORK(&ar->scan.vdev_del_wk, ath12k_scan_vdev_del_work);
 	ar->scan.vdev_id = -1;
 	INIT_WORK(&ar->regd_update_work, ath12k_regd_update_work);
+	INIT_WORK(&ar->agile_cac_abort_wq, ath12k_agile_cac_abort_work);
 
 	INIT_WORK(&ar->wmi_mgmt_tx_work, ath12k_mgmt_over_wmi_tx_work);
 	skb_queue_head_init(&ar->wmi_mgmt_tx_queue);
@@ -17372,9 +17373,10 @@ u16 ath12k_calculate_subchannel_count(en
 	return width_num/20;
 }
 
-void ath12k_mac_background_dfs_event(struct ath12k *ar,
-				     enum ath12k_background_dfs_events ev)
+void ath12k_agile_cac_abort_work(struct work_struct *work)
 {
+	struct ath12k *ar = container_of(work, struct ath12k,
+					 agile_cac_abort_wq);
 	struct ath12k_vif *ahvif;
 	struct ath12k_link_vif *arvif;
 	bool arvif_found = false;
@@ -17390,22 +17392,34 @@ void ath12k_mac_background_dfs_event(str
 	}
 
 	if (!arvif_found)
-		return;
+		goto err;
+
+	ret = ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(ar, arvif->vdev_id);
+
+	if (!ret) {
+		memset(&ar->agile_chandef, 0, sizeof(struct cfg80211_chan_def));
+		ar->agile_chandef.chan = NULL;
+	} else
+		goto err;
+
+err:
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+			   "ADFS state can't be reset (ret=%d)\n",
+			   ret);
+}
+
+void ath12k_mac_background_dfs_event(struct ath12k *ar,
+				     enum ath12k_background_dfs_events ev)
+{
+	struct ath12k_base *ab = ar->ab;
 
 	if (ev == ATH12K_BGDFS_RADAR) {
 		cfg80211_background_radar_event(ar->ah->hw->wiphy, &ar->agile_chandef, GFP_ATOMIC);
 		lockdep_assert_held(&ar->conf_mutex);
-		ret = ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(ar, arvif->vdev_id);
+		queue_work(ab->workqueue, &ar->agile_cac_abort_wq);
 	} else if (ev == ATH12K_BGDFS_ABORT) {
 		cfg80211_background_cac_abort(ar->ah->hw->wiphy);
-	}
-
-	if (!ret) {
 		memset(&ar->agile_chandef, 0, sizeof(struct cfg80211_chan_def));
 		ar->agile_chandef.chan = NULL;
-	} else {
-		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
-			   "ADFS state can't be reset (ret=%d)\n",
-			   ret);
 	}
 }
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -209,4 +209,6 @@ void ath12k_bss_assoc(struct ath12k *ar,
 void ath12k_bss_disassoc(struct ath12k *ar, struct ath12k_link_vif *arvif,
 			 bool do_vdev_down);
 int ath12k_mac_op_set_scs(struct wireless_dev *wdev, struct ath12k_latency_params *params);
+
+void ath12k_agile_cac_abort_work(struct work_struct *work);
 #endif
