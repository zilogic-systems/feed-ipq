From 4c5d8cebead61724be3b56e5a975598b212f66f9 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Wed, 15 May 2024 11:35:05 +0530
Subject: [PATCH] wifi: ath12k: Add support for four slot PCIe by changing 
 number of MSI.

Currently 96 MSI interrupts has been supported by msi controller.
For three slot PCI 32 MSI has been used for each. To support four slot PCI,
number of MSI has to be split in below order

PCIe0 - 16,
PCIe1 - 16,
PCIe2 - 32,
PCIe3 - 32

Made changes to configure the MSI dynamically based on the DTS
property in PCI node. Based on the number of MSI corresponding
ring mask will be taken for DP grouping.

----------------------------------------------------------------
|MSI    |       Usage                                          |
| 0     | TX0, TX_MON0, WBM2SW_RELEASE                         |
| 1     | TX1, TX_MON1, WBM_REL                                |
| 2     | TX2, TX4, RX_MON0,                                   |
|       | RX_ERR, REO_STATUS                                   |
| 3     | RX0 , RX_MON1                                        |
| 4     | RX1, RX_MON2                                         |
| 5     | RX2, RX3, REO2PPE                                    |
| 6     | PPE2TCL                                              |
| 7     | UMAC_RESET                                           |
----------------------------------------------------------------

Patch-dependency: none
Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  4 ++
 drivers/net/wireless/ath/ath12k/hw.c   | 86 +++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/pci.c  | 14 ++++-
 drivers/net/wireless/ath/ath12k/pcic.h | 10 +++
 4 files changed, 110 insertions(+), 4 deletions(-)

Index: b/drivers/net/wireless/ath/ath12k/core.h
===================================================================
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -199,9 +199,13 @@ struct ath12k_ext_irq_grp {
 
 #define HE_PPET16_PPET8_SIZE            8
 
+#define ATH12K_MSI_16	16
+
 enum ath12k_msi_supported_hw {
 	ATH12K_MSI_CONFIG_PCI,
 	ATH12K_MSI_CONFIG_IPCI,
+	/* To support 16 MSI interrupts for PCI devices */
+	ATH12K_MSI_CONFIG_PCI_16,
 };
 
 /* 802.11ax PPE (PPDU packet Extension) threshold */
Index: b/drivers/net/wireless/ath/ath12k/hw.c
===================================================================
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -795,6 +795,71 @@ static const struct service_to_pipe ath1
 	},
 };
 
+/* To support 8 MSI DP grouping */
+static struct ath12k_hw_ring_mask ath12k_hw_ring_mask_qcn9274_msi8 = {
+        .tx  = {
+                ATH12K_TX_RING_MASK_0,
+                ATH12K_TX_RING_MASK_1,
+                ATH12K_TX_RING_MASK_2 | ATH12K_TX_RING_MASK_4,
+                0, 0, 0, 0, 0
+        },
+        .rx_mon_dest = {
+                0, 0,
+		ATH12K_RX_MON_RING_MASK_0,
+		ATH12K_RX_MON_RING_MASK_1,
+		ATH12K_RX_MON_RING_MASK_2,
+		0, 0, 0
+        },
+        .rx = {
+                0, 0, 0,
+                ATH12K_RX_RING_MASK_0,
+                ATH12K_RX_RING_MASK_1,
+                ATH12K_RX_RING_MASK_2 | ATH12K_RX_RING_MASK_3,
+		0, 0
+        },
+	.rx_err = {
+                0, 0,
+                ATH12K_RX_ERR_RING_MASK_0,
+                0, 0, 0, 0, 0
+        },
+        .rx_wbm_rel = {
+                0,
+                ATH12K_RX_WBM_REL_RING_MASK_0,
+                0, 0, 0, 0, 0, 0
+        },
+        .reo_status = {
+                0, 0,
+                ATH12K_REO_STATUS_RING_MASK_0,
+                0, 0, 0, 0, 0
+        },
+        .tx_mon_dest = {
+                ATH12K_TX_MON_RING_MASK_0,
+                ATH12K_TX_MON_RING_MASK_1,
+                0, 0, 0, 0, 0, 0
+        },
+        .ppe2tcl = {
+                0, 0, 0, 0, 0, 0,
+                ATH12K_PPE2TCL_RING_MASK_0,
+		0
+        },
+        .reo2ppe = {
+                0, 0, 0, 0, 0,
+                ATH12K_REO2PPE_RING_MASK_0,
+		0, 0
+        },
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+        .wbm2sw6_ppeds_tx_cmpln = {
+		ATH12K_PPE_WBM2SW_RELEASE_RING_MASK_0,
+		0, 0, 0, 0, 0, 0, 0
+        },
+#endif
+        .umac_dp_reset = {
+                0, 0, 0, 0, 0, 0, 0,
+		ATH12K_UMAC_RESET_INTR_MASK_0
+        },
+};
+
+
 static struct ath12k_hw_ring_mask ath12k_hw_ring_mask_qcn9274 = {
 	.tx  = {
 		ATH12K_TX_RING_MASK_0,
@@ -1993,6 +2058,7 @@ void ath12k_dp_restore_interrupt_mask(st
 int ath12k_hw_init(struct ath12k_base *ab)
 {
 	const struct ath12k_hw_params *hw_params = NULL;
+	struct ath12k_hw_params *hw_params_msi8 = NULL;
 	int i;
 
 	for (i = 0; i < ARRAY_SIZE(ath12k_hw_params); i++) {
@@ -2007,10 +2073,19 @@ int ath12k_hw_init(struct ath12k_base *a
 		return -EINVAL;
 	}
 
-	ab->hw_params = hw_params;
-
+	if (ab->hif.bus == ATH12K_BUS_PCI &&
+	    ab->msi.config->total_vectors == ATH12K_MSI_16) {
+		hw_params_msi8 = kzalloc(sizeof(struct ath12k_hw_params), GFP_KERNEL);
+		if (!hw_params_msi8)
+			return -ENOMEM;
+		memcpy(hw_params_msi8, hw_params, sizeof(struct ath12k_hw_params));
+		hw_params_msi8->ext_irq_grp_num_max = 6;
+		hw_params_msi8->ring_mask = &ath12k_hw_ring_mask_qcn9274_msi8;
+		ab->hw_params = hw_params_msi8;
+	} else {
+		ab->hw_params = hw_params;
+	}
 	ath12k_info(ab, "Hardware name: %s\n", ab->hw_params->name);
-
 	return 0;
 }
 
Index: b/drivers/net/wireless/ath/ath12k/pci.c
===================================================================
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -481,6 +481,10 @@ free_msi_vector:
 
 static void ath12k_pci_msi_free(struct ath12k_pci *ab_pci)
 {
+	struct ath12k_base *ab = ab_pci->ab;
+
+	if (ab->msi.config->total_vectors == ATH12K_MSI_16)
+		kfree(ab->hw_params);
 	pci_free_irq_vectors(ab_pci->pdev);
 }
 
@@ -903,6 +907,7 @@ static int ath12k_pci_probe(struct pci_d
 	struct ath12k_pci *ab_pci;
 	u32 soc_hw_version_major, soc_hw_version_minor;
 	u32 addr;
+	u32 msi = 0;
 	int ret;
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
        ath12k_bond_enable_ppe_ds();
@@ -921,6 +926,7 @@ static int ath12k_pci_probe(struct pci_d
 	ab_pci->ab = ab;
 	ab_pci->pdev = pdev;
 	ab->hif.ops = &ath12k_pci_hif_ops;
+	ab->hif.bus = ATH12K_BUS_PCI;
 	ab->fw_mode = ATH12K_FIRMWARE_MODE_NORMAL;
 	pci_set_drvdata(pdev, ab);
 	spin_lock_init(&ab_pci->window_lock);
@@ -944,7 +950,13 @@ static int ath12k_pci_probe(struct pci_d
 
 	switch (pci_dev->device) {
 	case QCN9274_DEVICE_ID:
-		ab->msi.config = &ath12k_msi_config[ATH12K_MSI_CONFIG_PCI];
+		if(!of_property_read_u32(ab->dev->of_node, "qcom,msi", &msi) &&
+		   msi == ATH12K_MSI_16) {
+			ath12k_dbg(ab, ATH12K_DBG_PCI, "ath12k supported MSI %d\n", msi);
+			ab->msi.config = &ath12k_msi_config[ATH12K_MSI_CONFIG_PCI_16];
+		} else {
+			ab->msi.config = &ath12k_msi_config[ATH12K_MSI_CONFIG_PCI];
+		}
 		ab->static_window_map = true;
 		ab_pci->pci_ops = &ath12k_pci_ops_qcn9274;
 		ath12k_pci_read_hw_version(ab, &soc_hw_version_major,
Index: b/drivers/net/wireless/ath/ath12k/pcic.h
===================================================================
--- a/drivers/net/wireless/ath/ath12k/pcic.h
+++ b/drivers/net/wireless/ath/ath12k/pcic.h
@@ -47,6 +47,16 @@ static const struct ath12k_msi_config at
 			{ .name = "DP", .num_vectors = 9, .base_vector = 6 },
 		},
 	},
+	{
+                /* MSI spec expects number of interrupts to be a power of 2 */
+                .total_vectors = 16,
+                .total_users = 3,
+                .users = (struct ath12k_msi_user[]) {
+                        { .name = "MHI", .num_vectors = 3, .base_vector = 0 },
+                        { .name = "CE", .num_vectors = 5, .base_vector = 3 },
+                        { .name = "DP", .num_vectors = 8, .base_vector = 8 },
+                },
+        },
 };
 
 int ath12k_pcic_start(struct ath12k_base *ab);
