From a30fc71adfec63251a53e1fabd82fe4f5c8f2fdc Mon Sep 17 00:00:00 2001
From: Raj Kumar Bhagat <quic_rajkbhag@quicinc.com>
Date: Wed, 21 Feb 2024 11:54:53 +0530
Subject: [PATCH] wifi: ath12k: Add support to register per hw mac address

With single-wiphy enabled, ath12k registers one ieee80211 hardware
that can have more than one underlying wifi radios (ar). Among
these multiple wifi radios only the first radio's mac-address is
registered to cfg80211 (wiphy) and is exposed to userspace via sysfs.
The mac addresses of other radios are not registered with cfg80211 and
are also not exposed to userspace.

Due to this, userspace cannot determine mac address of all the
underlying wifi radios to bring-up wifi interface.

Hence, add support to register per hardware (ar) mac address to
cfg80211. This will expose all the radios mac address to userspace
via sysfs. The userspace will be able to use these mac addresses.

Signed-off-by: Raj Kumar Bhagat <quic_rajkbhag@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -16579,6 +16579,7 @@ static void ath12k_mac_hw_unregister(str
 
 	kfree(ah->hw->wiphy->iface_combinations[0].limits);
 	kfree(ah->hw->wiphy->iface_combinations);
+	kfree(ah->hw->wiphy->addresses);
 
 	SET_IEEE80211_DEV(ah->hw, NULL);
 }
@@ -16785,6 +16786,27 @@ err_free:
 
 	return -ENOMEM;
 }
+static int ath12k_alloc_per_hw_mac_addr(struct ath12k_hw *ah)
+{
+	struct ath12k *ar;
+	struct ieee80211_hw *hw = ah->hw;
+	struct mac_address *addresses;
+	int i;
+	ar = ah->radio;
+
+	addresses = kzalloc(sizeof(*addresses) * ah->num_radio,
+			    GFP_KERNEL);
+	if(!addresses)
+		return -ENOMEM;
+
+	for (i = 0; i < ah->num_radio; i++) {
+		ether_addr_copy(&addresses[i], ar->mac_addr);
+		ar++;
+	}
+	hw->wiphy->addresses = addresses;
+	hw->wiphy->n_addresses = ah->num_radio;
+	return 0;
+}
 static int ath12k_mac_hw_register(struct ath12k_hw *ah)
 {
 	struct ieee80211_hw *hw;
@@ -16832,7 +16854,7 @@ static int ath12k_mac_hw_register(struct
 			ether_addr_copy(ar->mac_addr, pdev->mac_addr);
 		} else {
 			ether_addr_copy(ar->mac_addr, ab->mac_addr);
-			ar->mac_addr[4] += i;
+			ar->mac_addr[4] += ar->pdev_idx;
 		}
 
 		ret = __ath12k_mac_register(ar);
@@ -16880,6 +16902,9 @@ static int ath12k_mac_hw_register(struct
                 ret = ath12k_setup_per_hw_if_comb(ah);
                 if (ret)
                         goto err_cleanup;
+		ret = ath12k_alloc_per_hw_mac_addr(ah);
+		if (ret)
+			goto err_cleanup;
         }
 
 	SET_IEEE80211_PERM_ADDR(hw, mac_addr);
