From 8f43e7bae7325ed956d37cb5115bc84a0f12de5b Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Wed, 21 Feb 2024 19:17:01 +0530
Subject: wifi: ath12k: Fix incomp pointer and discarded qualifier warnings

Fixing incompatible pointer type and discarded qualifier errors.

Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h        |  4 +--
 drivers/net/wireless/ath/ath12k/debugfs.c     | 16 +++++-----
 drivers/net/wireless/ath/ath12k/debugfs_sta.c |  4 +--
 drivers/net/wireless/ath/ath12k/dp_rx.c       |  2 +-
 drivers/net/wireless/ath/ath12k/mac.c         | 31 +++++++++++++------
 drivers/net/wireless/ath/ath12k/pcic.c        |  2 +-
 drivers/net/wireless/ath/ath12k/wmi.c         | 31 +++++++++++--------
 7 files changed, 53 insertions(+), 37 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1047,8 +1047,8 @@ struct ath12k {
 	spinlock_t wmi_ctrl_path_stats_lock;
 
 	/* TODO: Add mac_filter, ampdu_aggr_size and wbm_tx_completion_stats stats*/
-	struct ath12k_btcoex_info coex;
 #endif
+	struct ath12k_btcoex_info coex;
 
 #ifdef CPTCFG_ATH12K_SPECTRAL
 	struct ath12k_spectral spectral;
@@ -1167,7 +1167,7 @@ struct ath12k_pdev_cap {
 	u32 tx_chain_mask_shift;
 	u32 rx_chain_mask_shift;
 	u32 chainmask_table_id;
-	u32 adfs_chain_mask;
+	unsigned long adfs_chain_mask;
 	struct ath12k_band_cap band[NUM_NL80211_BANDS];
 	bool nss_ratio_enabled;
 	u8 nss_ratio_info;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -148,7 +148,7 @@ static ssize_t ath12k_write_wmi_ctrl_pat
 	return ret ? ret : count;
 }
 
-int wmi_ctrl_path_pdev_stat(struct ath12k *ar, const char __user *ubuf,
+int wmi_ctrl_path_pdev_stat(struct ath12k *ar, char __user *ubuf,
 			    size_t count, loff_t *ppos)
 {
 	const int size = 2048;
@@ -225,7 +225,7 @@ int wmi_ctrl_path_pdev_stat(struct ath12
 	return ret_val;
 }
 
-int wmi_ctrl_path_cal_stat(struct ath12k *ar, const char __user *ubuf,
+int wmi_ctrl_path_cal_stat(struct ath12k *ar, char __user *ubuf,
 			   size_t count, loff_t *ppos)
 {
 	const int size = 4096;
@@ -297,7 +297,7 @@ int wmi_ctrl_path_cal_stat(struct ath12k
 	return ret_val;
 }
 
-int wmi_ctrl_path_awgn_stat(struct ath12k *ar, const char __user *ubuf,
+int wmi_ctrl_path_awgn_stat(struct ath12k *ar, char __user *ubuf,
 			    size_t count, loff_t *ppos)
 {
 	struct wmi_ctrl_path_stats_list *stats;
@@ -380,8 +380,8 @@ int wmi_ctrl_path_awgn_stat(struct ath12
 	return ret_val;
 }
 
-int wmi_ctrl_path_btcoex_stat(struct ath12k *ar, const char __user *ubuf,
-			size_t count, loff_t *ppos)
+int wmi_ctrl_path_btcoex_stat(struct ath12k *ar, char __user *ubuf,
+			      size_t count, loff_t *ppos)
 {
 	struct wmi_ctrl_path_stats_list *stats;
 	struct wmi_ctrl_path_btcoex_stats *btcoex_stats;
@@ -504,7 +504,7 @@ int wmi_ctrl_path_mem_stat(struct ath12k
 }
 
 static ssize_t ath12k_read_wmi_ctrl_path_stats(struct file *file,
-		const char __user *ubuf,
+		char __user *ubuf,
 		size_t count, loff_t *ppos)
 {
 	struct ath12k *ar = file->private_data;
@@ -2092,7 +2092,7 @@ static void ath12k_debug_multipd_wmi_pde
 }
 
 static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
-					      char __user *user_buf,
+					      const char __user *user_buf,
 					      size_t count, loff_t *ppos)
 {
 	struct ath12k_base *ab = file->private_data;
@@ -5361,7 +5361,7 @@ static ssize_t ath12k_write_twt_resume_d
 }
 
 static ssize_t ath12k_read_rts_threshold(struct file *file,
-					       const char __user *ubuf,
+					       char __user *ubuf,
 					       size_t count, loff_t *ppos)
 {
 	struct ath12k_link_vif *arvif = file->private_data;
--- a/drivers/net/wireless/ath/ath12k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_sta.c
@@ -1267,7 +1267,7 @@ static const struct file_operations fops
 
 static ssize_t
 ath12k_dbg_sta_dump_driver_tx_pkts_flow(struct file *file,
-					const char __user *user_buf,
+					char __user *user_buf,
 					size_t count, loff_t *ppos)
 {
 	struct ieee80211_sta *sta = file->private_data;
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -5039,7 +5039,8 @@ int ath12k_dp_rx_process_wbm_err(struct
 		rxcb->rx_desc = (struct hal_rx_desc *)msdu->data;
 
 		if (!err_info.continuation) {
-			hw_link_id = ath12k_dp_rx_get_msdu_src_link(src_ab, msdu->data);
+			hw_link_id = ath12k_dp_rx_get_msdu_src_link(src_ab, (struct hal_rx_desc *)
+								    msdu->data);
 			if (hw_link_id >= ATH12K_GROUP_MAX_RADIO) {
 				if (ath12k_debug_critical) {
 					ath12k_err(ab, "WBM Err: invalid hw link id %d\n",
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1809,7 +1809,8 @@ static bool ath12k_mac_setup_bcn_tmpl_no
 		profile = &ies[3];
 
 		while (mbssid_len) {
-			u8 profile_len, nie_len, *nie;
+			u8 profile_len, nie_len;
+			const u8 *nie;
 
 			profile_len = profile[1];
 			next_profile = profile + (2 + profile_len);
@@ -3226,6 +3227,7 @@ static void ath12k_peer_assoc_h_mlo(stru
 	struct ath12k_link_sta *arsta_p;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	unsigned long links;
 	struct peer_assoc_mlo_params *ml = &arg->ml;
 	u8 i = 0, link_id;
 
@@ -3250,8 +3252,9 @@ static void ath12k_peer_assoc_h_mlo(stru
 	ml->num_partner_links = 0;
 	/*emlsr */
 	ml->eml_caps = sta->eml_cap;
+	links = sta->valid_links;
 
-	for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+	for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
 	       if (i >= ATH12K_WMI_MLO_MAX_LINKS)
 		       break;
 	       arsta_p = ahsta->link[link_id];
@@ -3659,8 +3662,8 @@ static void ath12k_peer_assoc_h_eht(stru
 	struct ieee80211_sta *sta;
 	struct ieee80211_bss_conf* link_conf;
 	struct ieee80211_link_sta *link_sta;
-	struct ieee80211_sta_eht_cap *own_eht_cap;
-	struct ieee80211_eht_mcs_nss_supp *own_eht_mcs_nss_supp;
+	const struct ieee80211_sta_eht_cap *own_eht_cap;
+	const struct ieee80211_eht_mcs_nss_supp *own_eht_mcs_nss_supp;
 	enum ieee80211_sta_rx_bandwidth radio_max_bw_caps;
 
 	link_conf = ath12k_get_link_bss_conf(arvif);
@@ -6012,6 +6015,7 @@ static int ath12k_mac_op_set_key(struct
 	struct ath12k_link_vif *arvif;
 	struct ath12k_link_sta *arsta = NULL;
 	struct ath12k_sta *ahsta;
+	unsigned long links;
 	int ret = -ENOLINK;
 	u8 link_id;
 
@@ -6036,6 +6040,7 @@ static int ath12k_mac_op_set_key(struct
 	if (sta) {
 		ahsta = ath12k_sta_to_ahsta(sta);
 		if (sta->mlo) {
+			links = sta->valid_links;
 			for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 				arvif = ahvif->link[link_id];
 				arsta = ahsta->link[link_id];
@@ -7477,6 +7482,7 @@ static void ath12k_mac_ml_station_remove
  	struct ath12k_link_vif *arvif;
  	struct ath12k_link_sta *arsta;
 	struct ath12k *ar;
+	unsigned long links;
 	u8 link_id;
 
 	lockdep_assert_held(&ah->conf_mutex);
@@ -7486,7 +7492,8 @@ static void ath12k_mac_ml_station_remove
 	ath12k_ml_link_peers_delete(ahvif, ahsta);
 
 	/* validate link station removal and clear arsta links */
-	for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+	links = sta->valid_links;
+	for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		arvif = ahvif->link[link_id];
 		arsta = ahsta->link[link_id];
 
@@ -7720,6 +7727,7 @@ int ath12k_mac_update_sta_state(struct i
 	struct ath12k_link_sta *arsta;
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_sta *ahsta = ath12k_sta_to_ahsta(sta);
+	unsigned long links;
 	int ret = 0;
 	u8 link_id = 0, link;
 
@@ -7836,8 +7844,9 @@ int ath12k_mac_update_sta_state(struct i
 		if (ahsta->use_4addr_set)
 			ieee80211_queue_work(ah->hw, &ahsta->set_4addr_wk);
 	}
+	links = sta->valid_links;
 
-	for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+	for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		arvif = ahvif->link[link_id];
 		arsta = ahsta->link[link_id];
 
@@ -10711,10 +10720,12 @@ static void ath12k_mac_op_update_vif_off
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_link_vif *arvif;
 	int link_id;
+	unsigned long links;
 
 	mutex_lock(&ah->conf_mutex);
 	if (vif->valid_links) {
-		for_each_set_bit(link_id, &vif->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+		links = vif->valid_links;
+		for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
 			arvif = ahvif->link[link_id];
 			if (!(arvif && arvif->ar))
 				continue;
@@ -11855,7 +11866,8 @@ ath12k_mac_vdev_config_after_start(struc
 	if (ret)
 		ath12k_warn(ab, "failed to set 6G non-ht dup conf for vdev %d: %d\n",
 		            arvif->vdev_id, ret);
-	 /* In case of ADFS, we have to abort ongoing backgrorund CAC */
+
+	/* In case of ADFS, we have to abort ongoing backgrorund CAC */
 	if ((ar->pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP) &&
 	    test_bit(ar->cfg_rx_chainmask, &ar->pdev->cap.adfs_chain_mask) &&
 	    ar->agile_chandef.chan) {
@@ -16670,7 +16682,7 @@ static void ath12k_mac_hw_unregister(str
 
 void ath12k_mac_unregister(struct ath12k_hw_group *ag)
 {
-	struct ath12k_hw *ah = ag->ah;
+	struct ath12k_hw *ah;
 	int i;
 
 	for (i = ag->num_hw - 1; i >= 0; i--) {
--- a/drivers/net/wireless/ath/ath12k/pcic.c
+++ b/drivers/net/wireless/ath/ath12k/pcic.c
@@ -827,8 +827,7 @@ static int ath12k_pci_ext_irq_config(str
 			u8 bus_id = pci_domain_nr(ar_pci->pdev->bus);
 
 			if (bus_id > ATH12K_MAX_PCI_DOMAINS) {
-				ath12k_warn(ab, ATH12K_DBG_PCI, "bus_id:%d\n",
-					    bus_id);
+				ath12k_warn(ab, "bus_id:%d\n", bus_id);
 				bus_id = ATH12K_MAX_PCI_DOMAINS;
 			}
 
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -936,12 +936,13 @@ static void ath12k_wmi_event_teardown_co
 		complete(&ag->umac_reset_complete);
 }
 
-static void ath12k_wmi_process_mvr_event(struct ath12k *ab, u32 *vdev_id_bm,
+static void ath12k_wmi_process_mvr_event(struct ath12k_base *ab, u32 *vdev_id_bm,
 					 u32 num_vdev_bm)
 {
 	struct ath12k *ar = NULL;
 	struct ath12k_link_vif *arvif = NULL;
-	u32 vdev_bitmap, bit_pos;
+	u32 bit_pos;
+	unsigned long vdev_bitmap;
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI,
 		   "wmi mvr resp num_vdev_bm %d vdev_id_bm[0]=0x%x vdev_id_bm[1]=0x%x\n",
@@ -3174,7 +3175,7 @@ static void ath12k_wmi_copy_peer_flags(s
 }
 
 static int ath12k_wmi_get_emlsr_pad_delay(u8 emlsr_pad_delay,
-					  u16 *emlsr_pad_delay_us)
+					  u32 *emlsr_pad_delay_us)
 {
 	u16 pad_delay_us[EMLSR_DELAY_MAX] = {0, 32, 64, 128, 256};
 
@@ -3189,7 +3190,7 @@ static int ath12k_wmi_get_emlsr_pad_dela
 }
 
 static int ath12k_get_emlsr_tran_delay(u8 emlsr_trans_delay,
-				       u16 *emlsr_trans_delay_us)
+				       u32 *emlsr_trans_delay_us)
 {
 	u16 delay_us[EMLSR_TRANS_DELAY_MAX] = {0, 16, 32, 64, 128, 256};
 
@@ -6321,7 +6322,7 @@ static int ath12k_wmi_tlv_mac_phy_chainm
                         if (cmask_table->cap_list[j].supported_caps & WMI_SUPPORT_CHAIN_MASK_ADFS)
 				pdev_cap->adfs_chain_mask |= (1 << cmask_table->cap_list[j].chainmask);
 		}
-		ath12k_dbg(soc, ATH12K_DBG_WMI, "updated adfs chain mask %x for pdev %d",
+		ath12k_dbg(soc, ATH12K_DBG_WMI, "updated adfs chain mask %lx for pdev %d",
 			   pdev_cap->adfs_chain_mask, i);
 	}
 	return 0;
@@ -7172,23 +7173,23 @@ static const char *ath12k_sub_reg_6g_to_
         }
 }
 
-static void ath12k_print_reg_rule(struct ath12k_base *ab, char *prev,
-                                 u32 num_reg_rules,
-                                 struct ath12k_reg_rule *reg_rule_ptr)
-{
-       struct ath12k_reg_rule *reg_rule = reg_rule_ptr;
-       u32 count;
-
-       ath12k_dbg(ab, ATH12K_DBG_WMI, "%s reg rules number %d\n", prev, num_reg_rules);
-
-       for (count = 0; count < num_reg_rules; count++) {
-               ath12k_dbg(ab, ATH12K_DBG_WMI,
-                          "reg rule %d: (%d - %d @ %d) (%d, %d) (FLAGS %d) (psd flag %d EIRP %d dB/MHz)\n",
-                          count + 1, reg_rule->start_freq, reg_rule->end_freq,
-                          reg_rule->max_bw, reg_rule->ant_gain, reg_rule->reg_power,
-                          reg_rule->flags, reg_rule->psd_flag, reg_rule->psd_eirp);
-               reg_rule++;
-       }
+static void ath12k_print_reg_rule(struct ath12k_base *ab, const char *prev,
+				  u32 num_reg_rules,
+				  const struct ath12k_reg_rule *reg_rule_ptr)
+{
+	const struct ath12k_reg_rule *reg_rule = reg_rule_ptr;
+	u32 count;
+
+	ath12k_dbg(ab, ATH12K_DBG_WMI, "%s reg rules number %d\n", prev, num_reg_rules);
+
+	for (count = 0; count < num_reg_rules; count++) {
+		ath12k_dbg(ab, ATH12K_DBG_WMI,
+			   "reg rule %d: (%d - %d @ %d) (%d, %d) (FLAGS %d) (psd flag %d EIRP %d dB/MHz)\n",
+			   count + 1, reg_rule->start_freq, reg_rule->end_freq,
+			   reg_rule->max_bw, reg_rule->ant_gain, reg_rule->reg_power,
+			   reg_rule->flags, reg_rule->psd_flag, reg_rule->psd_eirp);
+		reg_rule++;
+	}
 }
 
 static u8
@@ -11512,7 +11513,7 @@ ath12k_mgmt_rx_reo_list_ageout_timer_han
 	struct mgmt_rx_reo_list_entry *cur_entry;
 	u64 cur_ts;
 	int status;
-	struct mgmt_rx_reo_context *reo_context = &ab->ag->rx_reo;
+	struct ath12k_mgmt_rx_reo_context *reo_context = &ab->ag->rx_reo;
 	/**
 	 * Stores the pointer to the entry in reorder list for the latest aged
 	 * out frame. Latest aged out frame is the aged out frame in reorder
@@ -13127,6 +13128,7 @@ ath12k_wmi_pdev_dfs_radar_detected_event
 	if (!ar) {
 		ath12k_warn(ab, "radar detected in invalid pdev %d\n",
 			    ev->pdev_id);
+		rcu_read_unlock();
 		return;
 	}
 
@@ -13141,6 +13143,7 @@ ath12k_wmi_pdev_dfs_radar_detected_event
 	rcu_read_unlock();
 }
 
+#ifdef CPTCFG_ATH12K_PKTLOG
 static void
 ath12k_wmi_pktlog_decode_info(struct ath12k_base *ab,
                                   struct sk_buff *skb)
@@ -13199,6 +13202,7 @@ ath12k_wmi_pktlog_decode_info(struct ath
                    "pktlog new magic_num: 0x%x\n", pktlog->buf->bufhdr.magic_num);
 	kfree(tb);
 }
+#endif
 
 static int
 ath12k_wmi_rssi_dbm_conv_subtlv_parser(struct ath12k_base *ab,
@@ -13391,26 +13395,27 @@ ath12k_wmi_pdev_temperature_event(struct
 	struct ath12k *ar;
 	const void **tb;
 	int ret;
-	struct wmi_pdev_temperature_event *ev;
-
+	const struct wmi_pdev_temperature_event *ev;
 
 	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
+
 	if (IS_ERR(tb)) {
-	       ret = PTR_ERR(tb);
-	   ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
-	   return;
+		ret = PTR_ERR(tb);
+		ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
+		return;
 	}
 
 	ev = tb[WMI_TAG_PDEV_TEMPERATURE_EVENT];
+
 	if (!ev) {
-	    ath12k_warn(ab, "failed to fetch pdev temp ev");
-	    kfree(tb);
-	    return;
+		ath12k_warn(ab, "failed to fetch pdev temp ev");
+		kfree(tb);
+		return;
 	}
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI,
-		   "pdev temperature ev temp %d pdev_id %d\n", ev->temp,
-		    ev->pdev_id);
+			"pdev temperature ev temp %d pdev_id %d\n", ev->temp,
+			ev->pdev_id);
 
 
 	rcu_read_lock();
@@ -13418,7 +13423,7 @@ ath12k_wmi_pdev_temperature_event(struct
 	ar = ath12k_mac_get_ar_by_pdev_id(ab, le32_to_cpu(ev->pdev_id));
 	if (!ar) {
 		ath12k_warn(ab, "invalid pdev id in pdev temperature ev %d",
-			 ev->pdev_id);
+					ev->pdev_id);
 		goto exit;
 	}
 
@@ -14084,7 +14089,7 @@ int ath12k_wmi_dbglog_cfg(struct ath12k
 			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
 	cmd->dbg_log_param = param;
 
-	tlv = (u8 *) cmd + sizeof(*cmd);
+	tlv = (struct wmi_tlv *)((u8 *)cmd + sizeof(*cmd));
 	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_UINT32) |
 		      FIELD_PREP(WMI_TLV_LEN, sizeof(u32));
 
@@ -14667,7 +14672,9 @@ static void ath12k_wmi_op_rx(struct ath1
                 ath12k_wmi_dcs_awgn_interference_event(ab, skb);
                 break;
 	case WMI_PDEV_PKTLOG_DECODE_INFO_EVENTID:
+#ifdef CPTCFG_ATH12K_PKTLOG
 		ath12k_wmi_pktlog_decode_info(ab, skb);
+#endif
 		break;
 	case WMI_CTRL_PATH_STATS_EVENTID:
 		ath12k_wmi_ctrl_path_stats_event(ab, skb);
