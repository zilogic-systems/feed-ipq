From 9aac203036d5ce4ec8ba7420629c5427d9a279b8 Mon Sep 17 00:00:00 2001
From: Narendhar Reddy <quic_nare@quicinc.com>
Date: Tue, 5 Mar 2024 14:21:59 +0530
Subject: [PATCH] wifi: ath12k: Add support for wide-band radio

wide-band radio can operate either in 5GHz or in 6GHz at a time.
In RDP486, QCN6432 is a wide-band radio. Add support to configure
band either 5GHz or 6GHz with dts property in uboot.

sample config for 5GHz:
setenv fdtedit0 '/soc@0/wifi1@c0000000/%qcom,wide_band%1'
setenv fdteditnum 0

Signed-off-by: Narendhar Reddy <quic_nare@quicinc.com>
Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  7 +++
 drivers/net/wireless/ath/ath12k/core.h |  7 +++
 drivers/net/wireless/ath/ath12k/mac.c  | 64 +++++++++++++++-----------
 3 files changed, 51 insertions(+), 27 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -3804,6 +3804,7 @@ int ath12k_core_init(struct ath12k_base
 	bool is_ready = false;
 	u8 num_ab;
 	int ret;
+	u32 wide_band = ATH12K_WIDE_BAND_NONE;
 
 	/* Register a notifier after core init
 	 * to be called on fw crash
@@ -3820,6 +3821,11 @@ int ath12k_core_init(struct ath12k_base
 		return ret;
 	}
 
+	if (of_property_read_u32(ab->dev->of_node, "qcom,wide_band", &wide_band))
+		ath12k_dbg(ab, ATH12K_DBG_BOOT, "Wide band property not present");
+
+	ab->wide_band = wide_band;
+
 	ret = ath12k_debugfs_soc_create(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to create debugfs\n");
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -247,6 +247,12 @@ enum ath12k_scan_state {
 	ATH12K_SCAN_ABORTING,
 };
 
+enum wide_band_cap {
+	ATH12K_WIDE_BAND_NONE,
+	ATH12K_WIDE_BAND_5GHZ,
+	ATH12K_WIDE_BAND_6GHZ,
+};
+
 enum ath12k_dev_flags {
 	ATH12K_CAC_RUNNING,
 	ATH12K_FLAG_CORE_REGISTERED,
@@ -1608,6 +1614,7 @@ struct ath12k_base {
 	u32 max_msduq_per_tid;
 	u32 default_msduq_per_tid;
 	bool in_panic;
+	enum wide_band_cap wide_band;
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	ppe_ds_wlan_handle_t *ppeds_handle;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -16291,38 +16291,48 @@ static int ath12k_mac_setup_channels_rat
 
 	if (supported_bands & WMI_HOST_WLAN_5G_CAP) {
 		/* If 5g end and 6g start overlaps, decide band based on
-                 * the difference between target limit and ATH12K_5G_MAX_CENTER.
-                 */
-                if ((reg_cap->low_5ghz_chan >= ATH12K_MIN_5G_FREQ) &&
-                    ((reg_cap->high_5ghz_chan < ATH12K_MAX_5G_FREQ) ||
-                    ((reg_cap->high_5ghz_chan - ATH12K_5G_MAX_CENTER) < (ATH12K_HALF_20MHZ_BW * 2)))) {
-                        channels = kmemdup(ath12k_5ghz_channels,
-                                           sizeof(ath12k_5ghz_channels),
-                                           GFP_KERNEL);
-                        if (!channels) {
-                                kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
+		 * the difference between target limit and ATH12K_5G_MAX_CENTER.
+		 */
+		if (ab->wide_band && (reg_cap->low_5ghz_chan < ATH12K_MIN_6G_FREQ &&
+				      reg_cap->high_5ghz_chan > ATH12K_MAX_5G_FREQ)) {
+			/* Wide band radio can operate in either 5GHz or 6GHz, configuring the
+			 * band in which the radio has to operate, default band is set to 5GHz
+			 */
+			if (ab->wide_band == ATH12K_WIDE_BAND_6GHZ) {
+				reg_cap->low_5ghz_chan = ATH12K_MIN_6G_FREQ;
+				ath12k_info(ab, "Wide band radio coming up in 6GHz band");
+			} else {
+				reg_cap->high_5ghz_chan = ATH12K_MAX_5G_FREQ;
+				ath12k_info(ab, "Wide band radio coming up in 5GHz band");
+			}
+		}
+		if ((reg_cap->low_5ghz_chan >= ATH12K_MIN_5G_FREQ) &&
+		    ((reg_cap->high_5ghz_chan < ATH12K_MAX_5G_FREQ) ||
+		    ((reg_cap->high_5ghz_chan - ATH12K_5G_MAX_CENTER) <
+		    (ATH12K_HALF_20MHZ_BW * 2)))) {
+			channels = kmemdup(ath12k_5ghz_channels, sizeof(ath12k_5ghz_channels),
+					   GFP_KERNEL);
+			if (!channels) {
+				kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
 				ar->mac.sbands[NL80211_BAND_2GHZ].channels = NULL;
-                                for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+				for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
 					kfree(ar->mac.sbands[NL80211_BAND_6GHZ].chan_6g[i]);
 					ar->mac.sbands[NL80211_BAND_6GHZ].chan_6g[i] = NULL;
 				}
-                                return -ENOMEM;
-                        }
-
-                        band = &ar->mac.sbands[NL80211_BAND_5GHZ];
-                        band->band = NL80211_BAND_5GHZ;
-                        band->n_channels = ARRAY_SIZE(ath12k_5ghz_channels);
-                        band->channels = channels;
-                        band->n_bitrates = ath12k_a_rates_size;
-                        band->bitrates = ath12k_a_rates;
-
-                        if (ar->ab->hw_params->single_pdev_only) {
-                                phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_5G_CAP);
+				return -ENOMEM;
+			}
+			band = &ar->mac.sbands[NL80211_BAND_5GHZ];
+			band->band = NL80211_BAND_5GHZ;
+			band->n_channels = ARRAY_SIZE(ath12k_5ghz_channels);
+			band->channels = channels;
+			band->n_bitrates = ath12k_a_rates_size;
+			band->bitrates = ath12k_a_rates;
+			if (ar->ab->hw_params->single_pdev_only) {
+				phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_5G_CAP);
 				temp_reg_cap = &ab->hal_reg_cap[phy_id];
-                        }
-			ath12k_mac_update_ch_list(ar, band,
-                                                  temp_reg_cap->low_5ghz_chan,
-                                                  temp_reg_cap->high_5ghz_chan);
+			}
+			ath12k_mac_update_ch_list(ar, band, temp_reg_cap->low_5ghz_chan,
+						  temp_reg_cap->high_5ghz_chan);
 
 			ath12k_mac_update_5_9_ch_list(ar, band);
 
