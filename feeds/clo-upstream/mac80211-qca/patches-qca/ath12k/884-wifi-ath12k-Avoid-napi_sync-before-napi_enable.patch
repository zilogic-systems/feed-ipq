From 6ec9b905d6ba3d20e6e0264d6af5d10e25e19cf1 Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Wed, 14 Feb 2024 13:23:53 +0530
Subject: [PATCH 1/1] wifi: ath12k: Avoid napi_sync before napi_enable.

In case of MHI error a reset work will be queued which will try 
napi_disable after napi_synchronize.

As the napi will be only enabled after qmi_firmware_ready event
trying napi_synchronize before napi_enable will result in indefinite
sleep in case of a firmware crash in QMI init sequence.

To avoid this make use of the napi_enabled flag to check if napi is
enabled or not before calling napi_synchronize.

Also adding null check for ar in ath12k_fw_hang_cmd to avoid kernel
panic in issue scenario.

Removing duplicate ath12k_hal_dump_srng_stats() call in MHI_CB_EE_RDDM
case.

Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/pcic.c | 14 ++++++++++----
 drivers/net/wireless/ath/ath12k/wmi.c  |  6 +++++-
 2 files changed, 15 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/pcic.c
+++ b/drivers/net/wireless/ath/ath12k/pcic.c
@@ -277,9 +277,11 @@ static void __ath12k_pcic_ext_irq_disabl
 		struct ath12k_ext_irq_grp *irq_grp = &sc->ext_irq_grp[i];
 
 		ath12k_pcic_ext_grp_disable(irq_grp);
-
-		napi_synchronize(&irq_grp->napi);
-		napi_disable(&irq_grp->napi);
+		if (irq_grp->napi_enabled) {
+			napi_synchronize(&irq_grp->napi);
+			napi_disable(&irq_grp->napi);
+			irq_grp->napi_enabled = false;
+		}
 	}
 }
 
@@ -721,7 +723,11 @@ void ath12k_pcic_ext_irq_enable(struct a
 	for (i = 0; i < ATH12K_EXT_IRQ_GRP_NUM_MAX(ab); i++) {
 		struct ath12k_ext_irq_grp *irq_grp = &ab->ext_irq_grp[i];
 
-		napi_enable(&irq_grp->napi);
+		if (!irq_grp->napi_enabled) {
+			napi_enable(&irq_grp->napi);
+			irq_grp->napi_enabled = true;
+		}
+
 		ath12k_pcic_ext_grp_enable(irq_grp);
 	}
 }
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -2593,13 +2593,17 @@ int ath12k_wmi_set_sta_ps_param(struct a
 
 int ath12k_wmi_force_fw_hang_cmd(struct ath12k *ar, u32 type, u32 delay_time_ms, bool nowait)
 {
-	struct ath12k_wmi_pdev *wmi = ar->wmi;
+	struct ath12k_wmi_pdev *wmi;
 	struct wmi_force_fw_hang_cmd *cmd;
 	struct sk_buff *skb;
 	int ret = 0, len;
 
 	len = sizeof(*cmd);
 
+	if (!ar)
+		return -EINVAL;
+
+	wmi = ar->wmi;
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
 	if (!skb)
 		return -ENOMEM;
--- a/drivers/net/wireless/ath/ath12k/mhi.c
+++ b/drivers/net/wireless/ath/ath12k/mhi.c
@@ -392,7 +392,6 @@ static void ath12k_mhi_op_status_cb(stru
 		} else {
 			BUG_ON(1);
 		}
-		ath12k_hal_dump_srng_stats(ab);
 		break;
 	default:
 		break;
