From 47f0ba4a0f35dbed372f64aaeb2c66c0af6ff2cc Mon Sep 17 00:00:00 2001
From: Saravanakumar Duraisamy <quic_saradura@quicinc.com>
Date: Fri, 8 Mar 2024 18:46:13 +0530
Subject: [PATCH] wifi: ath12k: cleanup io mapped memory for varies region

Currently during rmmod and coldboot usecase, io-mapped
memory regions are not getting unmapped. This leads to
leak in virtual memory causing starvation of virtual
address during continuous insmod & rmmod on 32bit system.
Fix the leak by proper unmap of io-mapped memory.

Below memory regions are properly unmapped
1. After coldboot memory being io-mapped for various regions like
DDR,CALDB,M3 DUMP,MLO,BDF.
2. Memory mapped for QDSS.
3. Memory mapped for cmem and pmm.
4. Memory mapped for qmi device info (ab->mem).
5. Move clean up of target memory from pci power down to ssr path
to make it generic.

depends on:
710-001-ath12k-Add-AHB-driver-support-for-ipq5332.patch
654-ath12k-Fix-memory-free-during-pci-power-down.patch
670-ath12k-Add-support-for-cold-boot-calibartion.patch

Signed-off-by: Saravanakumar Duraisamy <quic_saradura@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c  | 14 ++++++++++-
 drivers/net/wireless/ath/ath12k/core.c |  1 +
 drivers/net/wireless/ath/ath12k/pci.c  |  4 +--
 drivers/net/wireless/ath/ath12k/qmi.c  | 34 ++++++++++++++++----------
 4 files changed, 36 insertions(+), 17 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/ahb.c b/drivers/net/wireless/ath/ath12k/ahb.c
index 6cd5924..d156c04 100644
--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -1216,8 +1216,20 @@ static void ath12k_ahb_free_resources(struct ath12k_base *ab)
 	ath12k_ahb_fw_resource_deinit(ab);
 	ath12k_ce_free_pipes(ab);
 
-	if (ab->hw_params->ce_remap)
+	if (ab->mem_ce) {
 		iounmap(ab->mem_ce);
+		ab->mem_ce = NULL;
+	}
+
+	if (ab->mem_cmem) {
+		iounmap(ab->mem_cmem);
+		ab->mem_cmem = NULL;
+	}
+
+	if (ab->mem_pmm) {
+		iounmap(ab->mem_pmm);
+		ab->mem_pmm = NULL;
+	}
 
 	ath12k_core_free(ab);
 	platform_set_drvdata(pdev, NULL);
diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 9cec9cf..56ea226 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -3694,6 +3694,7 @@ static void ath12k_core_reset(struct work_struct *work)
 	if (ab->fw_recovery_support) {
 		if (ab->hif.bus == ATH12K_BUS_PCI) {
 			ath12k_hif_power_down(ab);
+			ath12k_qmi_free_target_mem_chunk(ab);
 			ath12k_hif_power_up(ab);
 		} else if (ab->hif.bus == ATH12K_BUS_AHB ||
 			   ab->hif.bus == ATH12K_BUS_HYBRID) {
diff --git a/drivers/net/wireless/ath/ath12k/pci.c b/drivers/net/wireless/ath/ath12k/pci.c
index 484f2d7..c6dabee 100644
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -838,9 +838,7 @@ void ath12k_pci_power_down(struct ath12k_base *ab)
 			reinit_completion(&ab->rddm_reset_done);
 		}
 	}
-	if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->dev_flags))) {
-		ath12k_qmi_free_target_mem_chunk(ab);
-	}
+
 	/* restore aspm in case firmware bootup fails */
 	ath12k_pci_aspm_restore(ab_pci);
 
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index 059da6e..2e3e80a 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3542,6 +3542,19 @@ static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 	return;
 }
 
+static void ath12k_qmi_qdss_mem_free(struct ath12k_qmi *qmi)
+{
+	struct ath12k_base *ab = qmi->ab;
+	int i;
+
+	for (i = 0; i < ab->qmi.qdss_mem_seg_len; i++) {
+		if (ab->qmi.qdss_mem[i].v.ioaddr) {
+			iounmap(ab->qmi.qdss_mem[i].v.ioaddr);
+			ab->qmi.qdss_mem[i].v.ioaddr = NULL;
+		}
+	}
+}
+
 void ath12k_qmi_free_target_mem_chunk(struct ath12k_base *ab)
 {
 	struct ath12k_hw_group *ag = ab->ag;
@@ -3571,11 +3584,18 @@ void ath12k_qmi_free_target_mem_chunk(struct ath12k_base *ab)
 		}
 	}
 
+	ath12k_qmi_qdss_mem_free(&ab->qmi);
+
 	if (!ag->num_started && ag->mlo_mem.init_done) {
 		memset(ag->mlo_mem.chunk, 0, sizeof(ag->mlo_mem.chunk));
 		ag->mlo_mem.rsv = NULL;
 		ag->mlo_mem.init_done = false;
 	}
+
+	if (ab->mem && ab->hif.bus == ATH12K_BUS_HYBRID) {
+		iounmap(ab->mem);
+		ab->mem = NULL;
+	}
 }
 
 static int ath12k_qmi_alloc_chunk(struct ath12k_base *ab,
@@ -5312,6 +5332,7 @@ int ath12k_qmi_fwreset_from_cold_boot(struct ath12k_base *ab)
 	ath12k_info(ab, "power down to restart firmware in mission mode\n");
 	ath12k_qmi_firmware_stop(ab);
 	ath12k_hif_power_down(ab);
+	ath12k_qmi_free_target_mem_chunk(ab);
 	ath12k_info(ab, "power up to restart firmware in mission mode\n");
 	/* reset host fixed mem off to zero */
 	ab->host_ddr_fixed_mem_off = 0;
@@ -5386,19 +5407,6 @@ static void ath12k_qmi_event_m3_dump_upload_req(struct ath12k_qmi *qmi,
 	ath12k_coredump_m3_dump(ab, event_data);
 }
 
-static void ath12k_qmi_qdss_mem_free(struct ath12k_qmi *qmi)
-{
-	struct ath12k_base *ab = qmi->ab;
-	int i;
-
-	for (i = 0; i < ab->qmi.qdss_mem_seg_len; i++) {
-		if (ab->qmi.qdss_mem[i].v.ioaddr) {
-			iounmap(ab->qmi.qdss_mem[i].v.ioaddr);
-			ab->qmi.qdss_mem[i].v.ioaddr = NULL;
-		}
-	}
-}
-
 static void ath12k_qmi_event_qdss_trace_save_hdlr(struct ath12k_qmi *qmi,
 						  void *data)
 {
-- 
2.17.1

