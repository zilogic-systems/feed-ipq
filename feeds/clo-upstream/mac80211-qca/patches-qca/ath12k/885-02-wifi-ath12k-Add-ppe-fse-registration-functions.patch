From 3caf2ac086adbb592e71d16784a579374427592d Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Wed, 20 Mar 2024 10:09:05 +0530
Subject: [PATCH 2/3] wifi: ath12k: Add ppe fse registration functions

Add ppe registration functions which will be called by ppe driver
to add or delete a FSE entry

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ppe.c | 134 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/ppe.h |   3 +
 2 files changed, 137 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/ppe.c b/drivers/net/wireless/ath/ath12k/ppe.c
index 1af02b2..100393a 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -12,15 +12,18 @@
 #include <ppe_ds_wlan.h>
 #include <ppe_vp_public.h>
 #include <ppe_drv_sc.h>
+#include <ppe_drv.h>
 #include <linux/dma-mapping.h>
 #include <asm/cacheflush.h>
 #include <net/bonding.h>
 #include "hif.h"
 #include "ppe.h"
+#include "fse.h"
 
 #ifdef CPTCFG_MAC80211_BONDED_SUPPORT
 extern int g_bonded_interface_model;
 #endif
+extern bool ath12k_fse_enable;
 
 static atomic_t num_ppeds_nodes;
 
@@ -1407,3 +1410,134 @@ int ath12k_enable_ppe_rfs(struct ath12k_vif *ahvif,
 
 	return 0;
 }
+
+void *ath12k_fse_get_ab_from_link_netdev(struct net_device *link_ndev)
+{
+	struct ath12k_link_vif_pvt *arvif_pvt = NULL;
+
+	if (link_ndev) {
+		arvif_pvt = netdev_priv(link_ndev);
+		if (arvif_pvt && arvif_pvt->ab)
+			ath12k_dbg(arvif_pvt->ab, ATH12K_DBG_DP_FST,
+				   "Get core AB:%pV of Link ndev:%s\n",
+				   arvif_pvt->ab->dev, link_ndev->name);
+	}
+
+	return arvif_pvt ? arvif_pvt->ab : NULL;
+}
+
+static void ath12k_dp_rx_ppe_update_flow_info(struct ath12k_base *ab,
+					      struct rx_flow_info *flow_info,
+					      struct ppe_drv_fse_rule_info *ppe_flow_info,
+					      int operation)
+{
+	struct hal_flow_tuple_info *tuple_info = &flow_info->flow_tuple_info;
+	struct ppe_drv_fse_tuple *ppe_tuple = &ppe_flow_info->tuple;
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "%s S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,flags:%d",
+		   fse_state_to_string(operation),
+		   ppe_tuple->src_ip[0], ppe_tuple->src_ip[1],
+		   ppe_tuple->src_ip[2], ppe_tuple->src_ip[3],
+		   ppe_tuple->src_port,
+		   ppe_tuple->dest_ip[0], ppe_tuple->dest_ip[1],
+		   ppe_tuple->dest_ip[2], ppe_tuple->dest_ip[3],
+		   ppe_tuple->dest_port,
+		   ppe_tuple->protocol,
+		   ppe_flow_info->flags);
+
+	tuple_info->src_port = ppe_tuple->src_port;
+	tuple_info->dest_port = ppe_tuple->dest_port;
+	tuple_info->l4_protocol = ppe_tuple->protocol;
+	flow_info->fse_metadata = ATH12K_RX_FSE_FLOW_MATCH_PPE;
+
+	if (ppe_flow_info->flags & PPE_DRV_FSE_IPV4) {
+		flow_info->is_addr_ipv4 = 1;
+		tuple_info->src_ip_31_0 = ntohl(ppe_tuple->src_ip[0]);
+		tuple_info->dest_ip_31_0 = ntohl(ppe_tuple->dest_ip[0]);
+	} else if (ppe_flow_info->flags & PPE_DRV_FSE_IPV6) {
+		tuple_info->src_ip_31_0 = ntohl(ppe_tuple->src_ip[3]);
+		tuple_info->src_ip_63_32 = ntohl(ppe_tuple->src_ip[2]);
+		tuple_info->src_ip_95_64 = ntohl(ppe_tuple->src_ip[1]);
+		tuple_info->src_ip_127_96 = ntohl(ppe_tuple->src_ip[0]);
+
+		tuple_info->dest_ip_31_0 = ntohl(ppe_tuple->dest_ip[3]);
+		tuple_info->dest_ip_63_32 = ntohl(ppe_tuple->dest_ip[2]);
+		tuple_info->dest_ip_95_64 = ntohl(ppe_tuple->dest_ip[1]);
+		tuple_info->dest_ip_127_96 = ntohl(ppe_tuple->dest_ip[0]);
+	}
+
+	if (ppe_flow_info->flags & PPE_DRV_FSE_DS)
+		flow_info->use_ppe = 1;
+}
+
+bool
+ath12k_dp_rx_ppe_add_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_info)
+{
+	struct ath12k_base *ab;
+	struct rx_flow_info flow_info = { 0 };
+
+	if (!ath12k_fse_enable)
+		return false;
+
+	if (!ppe_flow_info->dev)
+		return false;
+
+	ab = ath12k_fse_get_ab_from_link_netdev(ppe_flow_info->dev);
+	if (!ab)
+		return false;
+
+	ath12k_dp_rx_ppe_update_flow_info(ab, &flow_info, ppe_flow_info, FSE_RULE_ADD);
+
+	return ath12k_dp_rx_flow_add_entry(ab, &flow_info);
+}
+
+bool
+ath12k_dp_rx_ppe_del_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_info)
+{
+	struct ath12k_base *ab;
+	struct rx_flow_info flow_info = { 0 };
+
+	if (!ath12k_fse_enable)
+		return false;
+
+	if (!ppe_flow_info->dev)
+		return false;
+
+	ab = ath12k_fse_get_ab_from_link_netdev(ppe_flow_info->dev);
+	if (!ab)
+		return false;
+
+	/* Skip deleting entries during rmmod and SSR */
+	if (ppe_flow_info->dev->reg_state >= NETREG_UNREGISTERING ||
+	    netif_queue_stopped(ppe_flow_info->dev))
+		return false;
+
+	ath12k_dp_rx_ppe_update_flow_info(ab, &flow_info, ppe_flow_info,
+					  FSE_RULE_DELETE);
+
+	return ath12k_dp_rx_flow_delete_entry(ab, &flow_info);
+}
+
+void ath12k_dp_rx_ppe_fse_register(void)
+{
+	struct ppe_drv_fse_ops ppe_fse_ops;
+	bool ret;
+
+	if (!ath12k_fse_enable)
+		return;
+
+	ppe_fse_ops.create_fse_rule = ath12k_dp_rx_ppe_add_flow_entry;
+	ppe_fse_ops.destroy_fse_rule = ath12k_dp_rx_ppe_del_flow_entry;
+
+	ret = ppe_drv_fse_ops_register(&ppe_fse_ops);
+	if (!ret)
+		ath12k_err(NULL, "failed to register FSE callback with PPE driver\n");
+}
+
+void ath12k_dp_rx_ppe_fse_unregister(void)
+{
+	if (!ath12k_fse_enable)
+		return;
+
+	ppe_drv_fse_ops_unregister();
+}
diff --git a/drivers/net/wireless/ath/ath12k/ppe.h b/drivers/net/wireless/ath/ath12k/ppe.h
index 1be9879..e6ab3fb 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -24,6 +24,7 @@ extern unsigned int ath12k_mlo_capable;
 
 #define ATH12K_DP_PPEDS_NAPI_DONE_BIT	1
 #define ATH12K_DP_PPEDS_TX_COMP_NAPI_BIT	2
+#define ATH12K_RX_FSE_FLOW_MATCH_PPE 0xCCCC
 
 struct dp_ppe_ds_idxs {
 	u32 ppe2tcl_start_idx;
@@ -60,6 +61,8 @@ void ath12k_dp_ppeds_stop(struct ath12k_base *ab);
 void ath12k_dp_ppeds_interrupt_start(struct ath12k_base *ab);
 void ath12k_ppeds_partner_link_start_queues(struct ath12k *ar);
 void ath12k_ppeds_partner_link_stop_queues(struct ath12k *ar);
+void ath12k_dp_rx_ppe_fse_register(void);
+void ath12k_dp_rx_ppe_fse_unregister(void);
 #endif
 
 int ath12k_ppeds_get_core_mask(struct ath12k_vif *ahvif);
-- 
2.34.1

