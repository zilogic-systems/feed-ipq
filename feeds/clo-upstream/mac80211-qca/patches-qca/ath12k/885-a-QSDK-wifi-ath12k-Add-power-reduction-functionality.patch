From dc8db5fe769c28587421eb17c0b88dabcecf221f Mon Sep 17 00:00:00 2001
From: Harish Rachakonda <quic_rachakon@quicinc.com>
Date: Mon, 18 Mar 2024 19:25:35 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Add power reduction functionality

Add power reduction functionality based on active ethernet ports
and active pdevs.

dBm power reduction and eth power reduction are user configured
using debugfs.Add power reduction support in ath12k driver, trigger
power reduction when atleast two radios are up, connected with peers
and active ethernet ports are more than 3. Power redection dBm is
calculated based on the number of ethernet ports active and number
of pdevs active.

Patch-dependency:
885-b-QSDK-wifi-ath12k-Add-support-to-fetch-active-ethernet-por.patch

Signed-off-by: Harish Rachakonda <quic_rachakon@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c    |   6 +
 drivers/net/wireless/ath/ath12k/core.h    |   2 +
 drivers/net/wireless/ath/ath12k/debugfs.c |  84 ++++++++++++++
 drivers/net/wireless/ath/ath12k/mac.c     |   4 +
 drivers/net/wireless/ath/ath12k/thermal.c | 131 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/thermal.h |  29 +++++
 drivers/net/wireless/ath/ath12k/wmi.h     |   1 +
 7 files changed, 257 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -31,6 +31,10 @@
 #include "bondif.h"
 #endif
 
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+extern struct ath12k_ps_context ath12k_global_ps_ctx;
+#endif
+
 unsigned int ath12k_debug_mask;
 module_param_named(debug_mask, ath12k_debug_mask, uint, 0644);
 MODULE_PARM_DESC(debug_mask, "Debugging mask");
@@ -199,6 +203,10 @@ ath12k_core_hw_group_alloc(u8 id, u8 max
 	ag->id = id;
 	ag->num_chip = max_chip;
 	ag->mlo_capable = !!ath12k_mlo_capable;
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+	ag->dbs_power_reduction = ATH12K_DEFAULT_POWER_REDUCTION;
+	ag->eth_power_reduction = ATH12K_DEFAULT_POWER_REDUCTION;
+#endif
 	atomic_set(&ag->num_dp_tx_pending, 0);
 	list_add(&ag->list, &ath12k_hw_groups);
 	mutex_init(&ag->mutex_lock);
@@ -207,6 +215,10 @@ ath12k_core_hw_group_alloc(u8 id, u8 max
 	ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 	INIT_WORK(&ag->reset_work, ath12k_core_hw_group_reset);
 
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+	ath12k_global_ps_ctx.ag = ag;
+#endif
+
 	return ag;
 }
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1397,6 +1397,10 @@ struct ath12k_mlo_dp_umac_reset {
 struct ath12k_hw_group {
 	/* Keep this always as first member */
 	struct list_head list;
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+	u8 dbs_power_reduction;
+	u8 eth_power_reduction;
+#endif
 	u8 id;
 	u8 num_chip;
 	u8 num_probed;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2185,6 +2185,92 @@ static const struct file_operations fops
 	.open = simple_open,
 };
 
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+static ssize_t ath12k_debug_write_dbs_power_reduction(struct file *file,
+						      char __user *user_buf,
+						      size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	struct ath12k_hw_group *ag;
+	unsigned int value;
+
+	if (kstrtouint_from_user(user_buf, count, 0, &value))
+		return -EINVAL;
+
+	ag = ab->ag;
+
+	if (value > 15) {
+		ath12k_warn(ab, "Dual band power reduction value should be between 0 - 15 dBm");
+		return -EINVAL;
+	}
+
+	ag->dbs_power_reduction = value;
+
+	return count;
+}
+
+static ssize_t ath12k_debug_read_dbs_power_reduction(struct file *file,
+						     char __user *user_buf,
+						     size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	char buf[ATH12K_BUF_SIZE_32];
+	size_t len;
+
+	len = scnprintf(buf, sizeof(buf), "%u\n", ab->ag->dbs_power_reduction);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static const struct file_operations dbs_power_reduction = {
+	.read = ath12k_debug_read_dbs_power_reduction,
+	.write = ath12k_debug_write_dbs_power_reduction,
+	.open = simple_open,
+};
+
+static ssize_t ath12k_debug_write_eth_power_reduction(struct file *file,
+						      char __user *user_buf,
+						      size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	struct ath12k_hw_group *ag;
+	unsigned int value;
+
+	if (kstrtouint_from_user(user_buf, count, 0, &value))
+		return -EINVAL;
+
+	ag = ab->ag;
+
+	if (value > 15) {
+		ath12k_warn(ab, "Ethernet power reduction value should be between 0 - 15 dBm");
+		return -EINVAL;
+	}
+
+	ag->eth_power_reduction = value;
+
+	return count;
+}
+
+static ssize_t ath12k_debug_read_eth_power_reduction(struct file *file,
+						     char __user *user_buf,
+						     size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	char buf[ATH12K_BUF_SIZE_32];
+	size_t len;
+
+	len = scnprintf(buf, sizeof(buf), "%u\n", ab->ag->eth_power_reduction);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static const struct file_operations eth_power_reduction = {
+	.read = ath12k_debug_read_eth_power_reduction,
+	.write = ath12k_debug_write_eth_power_reduction,
+	.open = simple_open,
+};
+#endif
+
 static ssize_t ath12k_read_fw_dbglog(struct file *file,
 				     char __user *user_buf,
 				     size_t count, loff_t *ppos)
@@ -2809,6 +2895,14 @@ int ath12k_debugfs_pdev_create(struct at
 	debugfs_create_file("set_fw_recovery", 0600, ab->debugfs_soc, ab,
 			    &fops_fw_recovery);
 
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+	debugfs_create_file("dbs_power_reduction", 0600, ab->debugfs_soc, ab,
+			    &dbs_power_reduction);
+
+	debugfs_create_file("eth_power_reduction", 0600, ab->debugfs_soc, ab,
+			    &eth_power_reduction);
+#endif
+
 	debugfs_create_file("simulate_fw_crash", 0600, ab->debugfs_soc, ab,
 			    &fops_simulate_fw_crash);
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1255,6 +1255,10 @@ static void ath12k_mac_dec_num_stations(
 		return;
 
 	ar->num_stations--;
+
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+	ath12k_ath_update_active_pdev_count(ar);
+#endif
 }
 
 int ath12k_mac_partner_peer_cleanup(struct ath12k_base *ab)
@@ -6672,6 +6676,10 @@ static int ath12k_station_authorize(stru
 				    arsta->addr, arvif->vdev_id, ret);
 	}
 
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+	ath12k_ath_update_active_pdev_count(ar);
+#endif
+
 	return ret;
 }
 
--- a/drivers/net/wireless/ath/ath12k/thermal.c
+++ b/drivers/net/wireless/ath/ath12k/thermal.c
@@ -11,6 +11,162 @@
 #include <linux/hwmon-sysfs.h>
 #include "core.h"
 #include "debug.h"
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+#include <soc/qcom/eawtp.h>
+#endif
+
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+struct ath12k_ps_context ath12k_global_ps_ctx;
+
+static void
+ath12k_pdev_notify_power_save_metric(u8 count, u8 idx_map,
+				     enum ath12k_ps_metric_change metric)
+{
+	u8 idx, idx_i;
+	u8 update_ps_change = 0;
+	u8 power_reduction_dbm = 0;
+	struct ath12k *tmp_ar;
+	struct ath12k_base *tmp_ab;
+	struct ath12k_hw_group *ag = ath12k_global_ps_ctx.ag;
+	struct ath12k_pdev *pdev;
+
+	if (ag->eth_power_reduction == ATH12K_DEFAULT_POWER_REDUCTION ||
+	    ag->dbs_power_reduction == ATH12K_DEFAULT_POWER_REDUCTION) {
+		ath12k_dbg(NULL, ATH12K_DBG_WMI,
+			   "Power and Thermal optimization: dbs_power_reduction and eth_power_reduction values are not set\n");
+		return;
+	}
+
+	switch (metric) {
+	case PS_WLAN_DBS_CHANGE:
+		ath12k_dbg(NULL, ATH12K_DBG_WMI,
+			   "Power and Thermal optimization: Change in active pdevs active_pdevs:%u\n",
+			   count);
+		/* Update to FW about Power Reduction value only when there
+		 * is a change in DBS status:
+		 * 1. If DBS in, Get Ethernet Port count and check
+		 *    a. If Ethernet Port count is lower than TH,
+		 *       send dbs_pwr_reduction_dbm to FW
+		 *    b. If Ethernet Port count is greter than the TH,
+		 *       send dbs_pwr_reduction_dbm + eth_pwr_reduction_dbm
+		 *       to FW
+		 * 2. If DBS out, update power reduction dbm to 0
+		 */
+		if (ath12k_global_ps_ctx.num_active_pdev != count) {
+			if (count >= ACTIVE_PDEV_TH) {
+				/* Set ath12k_global_ps_ctx.num_active_port */
+				power_reduction_dbm = ag->dbs_power_reduction;
+				if (ath12k_global_ps_ctx.num_active_port > ETH_PORT_COUNT)
+					power_reduction_dbm += ag->eth_power_reduction;
+				update_ps_change |= (1 << metric);
+				ath12k_global_ps_ctx.dbs_state = DBS_IN;
+			} else if ((count < ACTIVE_PDEV_TH) &&
+				   (ath12k_global_ps_ctx.num_active_pdev >= ACTIVE_PDEV_TH)) {
+				update_ps_change |= (1 << metric);
+				ath12k_global_ps_ctx.dbs_state = DBS_OUT;
+			}
+			ath12k_global_ps_ctx.num_active_pdev = count;
+		}
+		break;
+	case PS_ETH_PORT_CHANGE:
+		ath12k_dbg(NULL, ATH12K_DBG_WMI,
+			   "Power and Thermal optimization: Change in active ethernet ports active_eth_ports:%u\n",
+			   count);
+		/* Update Power Reduction value to FW only for DBS IN state
+		 * when there is a change in active ethernet port count:
+		 * 1. If DBS IN state,
+		 *     a. If Ethernet Port count is crossing the TH,
+		 *        send dbs_pwr_reduction_dbm + eth_pwr_reduction_dbm
+		 *        from ini to FW
+		 *     b. If Ethernet Port count is coming below the TH,
+		 *        send dbs_pwr_reduction_dbm to FW
+		 * 2. If DBS OUT state, No Update
+		 */
+		if (ath12k_global_ps_ctx.num_active_port != count &&
+		    ath12k_global_ps_ctx.dbs_state == DBS_IN) {
+			if (ath12k_global_ps_ctx.num_active_port <= ETH_PORT_COUNT &&
+			    count > ETH_PORT_COUNT) {
+				power_reduction_dbm = ag->eth_power_reduction +
+						      ag->dbs_power_reduction;
+				update_ps_change |= (1 << metric);
+			} else if (ath12k_global_ps_ctx.num_active_port > ETH_PORT_COUNT &&
+				   count <= ETH_PORT_COUNT) {
+				power_reduction_dbm = ag->dbs_power_reduction;
+				update_ps_change |= (1 << metric);
+			}
+		}
+		ath12k_global_ps_ctx.num_active_port = count;
+		break;
+	default:
+		break;
+	}
+
+	if (update_ps_change) {
+		for (idx = 0; idx < ag->num_chip; idx++) {
+			tmp_ab = ag->ab[idx];
+			if (!tmp_ab)
+				continue;
+			for (idx_i = 0; idx_i < tmp_ab->num_radios; idx_i++) {
+				if (ath12k_global_ps_ctx.dbs_state == DBS_IN &&
+				    !(idx_map & (1 << idx)))
+					continue;
+				rcu_read_lock();
+				pdev = rcu_dereference(tmp_ab->pdevs_active[idx_i]);
+				if (!pdev) {
+					rcu_read_unlock();
+					continue;
+				}
+				tmp_ar = pdev->ar;
+				if (tmp_ar && tmp_ar->num_stations) {
+					ath12k_dbg(tmp_ab, ATH12K_DBG_WMI,
+						   "Power and Thermal optimization sending WMI command to reduces power power_reduction_dbm:%u\n",
+						   power_reduction_dbm);
+					ath12k_wmi_pdev_set_param(tmp_ar,
+								  WMI_PDEV_PARAM_PWR_REDUCTION_IN_QUARTER_DB,
+								  power_reduction_dbm,
+								  tmp_ar->pdev->pdev_id);
+				}
+				rcu_read_unlock();
+			}
+		}
+	}
+}
+
+void ath12k_ath_update_active_pdev_count(struct ath12k *ar)
+{
+	struct ath12k_hw_group *ag;
+	u8 idx, idx_i, active_pdev = 0, idx_map = 0;
+	struct ath12k_base *ab, *ab_tmp;
+	struct ath12k_pdev *pdev;
+
+	ab = ar->ab;
+
+	if (!ab)
+		ath12k_dbg(NULL, ATH12K_DBG_WMI, "Power and thermal optimization: ab is NULL");
+
+	ag = ab->ag;
+
+	if (!ag)
+		return;
+
+	for (idx = 0; idx < ag->num_chip; idx++) {
+		ab_tmp = ag->ab[idx];
+		if (!ab_tmp)
+			continue;
+		for (idx_i = 0; idx_i < ab_tmp->num_radios; idx_i++) {
+			rcu_read_lock();
+			pdev = rcu_dereference(ab_tmp->pdevs_active[idx_i]);
+			if (pdev && pdev->ar && pdev->ar->num_stations) {
+				active_pdev++;
+				idx_map |= (1 << idx);
+			}
+			rcu_read_unlock();
+		}
+	}
+
+	ath12k_pdev_notify_power_save_metric(active_pdev, idx_map, PS_WLAN_DBS_CHANGE);
+}
+#endif
 
 static int
 ath12k_thermal_get_max_throttle_state(struct thermal_cooling_device *cdev,
--- a/drivers/net/wireless/ath/ath12k/thermal.h
+++ b/drivers/net/wireless/ath/ath12k/thermal.h
@@ -3,6 +3,10 @@
  * Copyright (c) 2020-2021 The Linux Foundation. All rights reserved.
  * Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
  */
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+#include <soc/qcom/eawtp.h>
+#include "core.h"
+#endif
 
 #ifndef _ATH12K_THERMAL_
 #define _ATH12K_THERMAL_
@@ -15,6 +19,13 @@
 #define ATH12K_THERMAL_SYNC_TIMEOUT_HZ (5 * HZ)
 
 #define THERMAL_LEVELS  1
+
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+#define ETH_PORT_COUNT 3
+#define ATH12K_DEFAULT_POWER_REDUCTION 0xFF
+#define ACTIVE_PDEV_TH 2
+#endif
+
 struct thermal_mitigation_params {
 	u32 pdev_id;
 	u32 enable;
@@ -36,6 +47,29 @@ struct ath12k_thermal {
 	int temperature;
 };
 
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+/* Enum to indicate DBS states */
+enum ath12k_dbs_in_out_state {
+	DBS_OUT,
+	DBS_IN,
+};
+
+struct ath12k_ps_context {
+	u8 num_active_pdev;
+	u8 num_active_port;
+	struct ath12k_hw_group *ag;
+	enum ath12k_dbs_in_out_state dbs_state;
+};
+
+enum ath12k_ps_metric_change {
+	PS_WLAN_DBS_CHANGE = 0,
+	PS_ETH_PORT_CHANGE = 1,
+	PS_METRIC_CHANGE_MAX,
+};
+#endif
+
+void ath12k_ath_update_active_pdev_count(struct ath12k *ar);
+
 #if IS_REACHABLE(CONFIG_THERMAL)
 int ath12k_thermal_register(struct ath12k_base *sc);
 void ath12k_thermal_unregister(struct ath12k_base *sc);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -1233,6 +1233,9 @@ enum wmi_tlv_pdev_param {
 	WMI_PDEV_PARAM_SET_CMD_OBSS_PD_PER_AC = 0xbe,
 	WMI_PDEV_PARAM_ENABLE_SR_PROHIBIT = 0xc6,
 	WMI_PDEV_PARAM_MPD_USERPD_SSR = 0xce,
+#ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
+	WMI_PDEV_PARAM_PWR_REDUCTION_IN_QUARTER_DB = 0xf1,
+#endif
 };
 
 enum wmi_tlv_vdev_param {
--- a/local-symbols
+++ b/local-symbols
@@ -189,6 +189,7 @@ ATH12K_SPECTRAL=
 ATH12K_PKTLOG=
 ATH12K_MEM_PROFILE_512M=
 ATH12K_SAWF=
+ATH12K_POWER_OPTIMIZATION=
 WLAN_VENDOR_ATMEL=
 ATMEL=
 PCI_ATMEL=
--- a/drivers/net/wireless/ath/ath12k/Kconfig
+++ b/drivers/net/wireless/ath/ath12k/Kconfig
@@ -98,3 +98,10 @@ config ATH12K_SAWF
 	help
 	  Enable ath12k SAWF and telemetry support
 	  Say Y to enable. If unsure, say N.
+
+config ATH12K_POWER_OPTIMIZATION
+	bool "ath12k Power and Thermal Optimization support"
+	depends on ATH12K
+	help
+	  Enable ath12k Power Reduction support
+	  Say Y to enable. If unsure, say N.
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -21,6 +21,8 @@
 #define ATH12K_UDP_TCP_END_PORT 65535
 #define ATH12K_RX_FSE_FLOW_MATCH_DEBUGFS 0xBBBB
 
+#define ATH12K_BUF_SIZE_32 32
+
 /* htt_dbg_ext_stats_type */
 enum ath12k_dbg_htt_ext_stats_type {
 	ATH12K_DBG_HTT_EXT_STATS_RESET                      =  0,
