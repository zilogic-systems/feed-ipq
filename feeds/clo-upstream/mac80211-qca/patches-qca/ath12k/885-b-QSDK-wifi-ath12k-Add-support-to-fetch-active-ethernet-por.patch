From fa6c577465133787ea1e96ed48ce59874b7d3f96 Mon Sep 17 00:00:00 2001
From: Harish Rachakonda <quic_rachakon@quicinc.com>
Date: Mon, 18 Mar 2024 21:36:19 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Add support to fetch active ethernet ports

Support to fetch active ethernet ports from eawtp module,
ath12k will be upated whenever there is a change in the active
ethernet ports count.

When there is a change in the active ethernet ports, ath12k
sends the WMI command to FW for power reduction based on dBm
power reduction and eth power reduction configured.

Patch-dependency:
885-a-QSDK-wifi-ath12k-Add-power-reduction-functionality.patch

Signed-off-by: Harish Rachakonda <quic_rachakon@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/thermal.c | 73 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/thermal.h |  1 +
 2 files changed, 74 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/thermal.c
+++ b/drivers/net/wireless/ath/ath12k/thermal.c
@@ -15,6 +15,16 @@
 
 struct ath12k_ps_context ath12k_global_ps_ctx;
 
+uint8_t ath12k_get_number_of_active_eth_ports(void)
+{
+	struct eawtp_port_info pact_info = {0};
+
+	if (ath12k_global_ps_ctx.get_actv_eth_ports_cb)
+		ath12k_global_ps_ctx.get_actv_eth_ports_cb(0, &pact_info);
+
+	return pact_info.num_active_port;
+}
+
 static void
 ath12k_pdev_notify_power_save_metric(u8 count, u8 idx_map,
 				     enum ath12k_ps_metric_change metric)
@@ -121,6 +131,71 @@ ath12k_pdev_notify_power_save_metric(u8
 	}
 }
 
+static int
+netstandby_eawtp_wifi_notify_active_eth_ports(void *app_data,
+					      struct eawtp_port_info *ntfy_info)
+{
+	struct ath12k *tmp_ar;
+	u8 idx, idx_i, active_eth_ports = 0, idx_map = 0;
+	struct ath12k_base *ab_tmp;
+	struct ath12k_pdev *pdev;
+	struct ath12k_hw_group *ag = ath12k_global_ps_ctx.ag;
+
+	if (!ntfy_info) {
+		ath12k_info(NULL, "WIFI-Netstandby: Invalid Port Info!");
+		return -EINVAL;
+	}
+
+	active_eth_ports = ntfy_info->num_active_port;
+
+	for (idx = 0; idx < ag->num_chip; idx++) {
+		ab_tmp = ag->ab[idx];
+
+		if (!ab_tmp)
+			continue;
+
+		for (idx_i = 0; idx_i < ab_tmp->num_radios; idx_i++) {
+			rcu_read_lock();
+			pdev = rcu_dereference(ab_tmp->pdevs_active[idx_i]);
+			if (pdev && pdev->ar) {
+				tmp_ar = ab_tmp->pdevs_active[idx_i]->ar;
+				if (tmp_ar && tmp_ar->num_stations)
+					idx_map |= (1 << idx);
+			}
+			rcu_read_unlock();
+		}
+	}
+
+	ath12k_pdev_notify_power_save_metric(active_eth_ports, idx_map, PS_ETH_PORT_CHANGE);
+
+	return 0;
+}
+
+int eawtp_wifi_get_and_register_cb(struct eawtp_reg_info *info)
+{
+	if (!info)
+		return -1;
+
+	ath12k_global_ps_ctx.get_actv_eth_ports_cb = info->get_active_ports_cb;
+	ath12k_get_number_of_active_eth_ports();
+	info->ntfy_port_status_to_wifi_cb = netstandby_eawtp_wifi_notify_active_eth_ports;
+
+	ath12k_info(NULL, "WIFI-Netstandby_eawtp: WIFI registration complete");
+
+	return 0;
+}
+EXPORT_SYMBOL(eawtp_wifi_get_and_register_cb);
+
+int eawtp_wifi_unregister_cb(void)
+{
+	ath12k_global_ps_ctx.get_actv_eth_ports_cb = NULL;
+
+	ath12k_info(NULL, "WIFI-Netstandby_eawtp: WIFI unregistered");
+
+	return 0;
+}
+EXPORT_SYMBOL(eawtp_wifi_unregister_cb);
+
 void ath12k_ath_update_active_pdev_count(struct ath12k *ar)
 {
 	struct ath12k *tmp_ar;
--- a/drivers/net/wireless/ath/ath12k/thermal.h
+++ b/drivers/net/wireless/ath/ath12k/thermal.h
@@ -54,6 +54,7 @@ struct ath12k_ps_context {
 	u8 num_active_port;
 	struct ath12k_hw_group *ag;
 	enum ath12k_dbs_in_out_state dbs_state;
+	eawtp_get_num_active_ports_cb_t get_actv_eth_ports_cb;
 };
 
 enum ath12k_ps_metric_change {
