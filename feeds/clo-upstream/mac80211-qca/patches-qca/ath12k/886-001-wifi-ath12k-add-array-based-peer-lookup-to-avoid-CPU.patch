From e2ed2ff4377e78f5171c1bb4537e06f3c17fd74b Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 3 Apr 2024 12:47:06 +0530
Subject: [PATCH 1/2] wifi: ath12k: add array based peer lookup to avoid CPU
 overhead

Since rhash based peer lookup consumes more CPU cycles to compute the
hash key, add support for array based peer lookup to avoid CPU overhead.
Also array based peer lookup consumes less memory compared to the rhash
based peer lookup.

Array based peer lookup system utilizes the peer ID directly as the index
of the peer array. This change eliminates the need for rhash key
generation and reduces the CPU cycles required for peer retrieval.
Firmware advertises the max peer id list size during firmware ready event
through the parameters like num_extra_peers and num_total_peers.

Patch-depdendency: 676-03-ath12k-changes-for-handling-multi-link-sta.patch

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h   |   6 +-
 drivers/net/wireless/ath/ath12k/dp_mon.c |   8 +-
 drivers/net/wireless/ath/ath12k/dp_rx.c  |  29 ++---
 drivers/net/wireless/ath/ath12k/dp_rx.h  |   2 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c  |  12 +-
 drivers/net/wireless/ath/ath12k/mac.c    |  50 +++++++-
 drivers/net/wireless/ath/ath12k/peer.c   | 147 +++++++++++++++++------
 drivers/net/wireless/ath/ath12k/peer.h   |   2 +
 drivers/net/wireless/ath/ath12k/wmi.c    |   4 +
 9 files changed, 196 insertions(+), 64 deletions(-)
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -2201,7 +2201,7 @@ static void ath12k_dp_mon_rx_deliver_msd
 	if (!(status->flag & RX_FLAG_ONLY_MONITOR))
 		decap = ppduinfo->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_info[0].decap_format;
 	spin_lock_bh(&ar->ab->base_lock);
-	peer = ath12k_peer_find_by_id(ar->ab, ppduinfo->peer_id);
+	peer = ath12k_peer_find_by_peer_list_index(ar, ppduinfo->peer_id);
 	if (peer && peer->sta) {
 		pubsta = peer->sta;
 		if (pubsta->valid_links) {
@@ -3595,11 +3595,8 @@ ath12k_dp_mon_rx_update_user_stats(struc
 		return;
 
 	peer = ath12k_peer_find_by_ast(ar->ab, user_stats->ast_index);
-	if (!peer) {
-		ath12k_warn(ar->ab, "peer with peer id %d can't be found\n",
-			    ppdu_info->peer_id);
+	if (!peer)
 		return;
-	}
 
 	arsta = ath12k_peer_get_link_sta(ar->ab, peer);
 	if (!arsta) {
@@ -3863,7 +3860,7 @@ move_next:
 
 		rcu_read_lock();
 		spin_lock_bh(&ab->base_lock);
-		peer = ath12k_peer_find_by_id(ab, ppdu_info->peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, ppdu_info->peer_id);
 		if (!peer || !peer->sta) {
 			ath12k_dbg(ab, ATH12K_DBG_DATA,
 				   "failed to find the peer with link id %d peer_id %d\n",
@@ -4040,7 +4037,7 @@ move_next:
 
 		rcu_read_lock();
 		spin_lock_bh(&ab->base_lock);
-		peer = ath12k_peer_find_by_id(ab, ppdu_info->peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, ppdu_info->peer_id);
 		if (!list_empty(&ab->neighbor_peers)) {
 			if (peer && !peer->sta) {
 				list_for_each_entry_safe(nrp, tmp, &ab->neighbor_peers, list) {
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1766,8 +1766,8 @@ ath12k_update_per_peer_tx_stats(struct a
 
 	rcu_read_lock();
 	spin_lock_bh(&ab->base_lock);
-	peer = ath12k_peer_find_by_id(ab, usr_stats->peer_id);
 
+	peer = ath12k_peer_find_by_peer_list_index(ar, usr_stats->peer_id);
 	if (!peer || !peer->sta) {
 		spin_unlock_bh(&ab->base_lock);
 		rcu_read_unlock();
@@ -1997,7 +1997,7 @@ static int ath12k_htt_pull_ppdu_stats(st
 		for (i = 0; i < ppdu_info->ppdu_stats.common.num_users; i++) {
 			peer_id = ppdu_info->ppdu_stats.user_stats[i].peer_id;
 			spin_lock_bh(&ab->base_lock);
-			peer = ath12k_peer_find_by_id(ab, peer_id);
+			peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 			if (!peer) {
 				spin_unlock_bh(&ab->base_lock);
 				continue;
@@ -2016,7 +2016,7 @@ static int ath12k_htt_pull_ppdu_stats(st
 		for (i = 0; i < ppdu_info->bar_num_users; i++) {
 			peer_id = ppdu_info->ppdu_stats.user_stats[i].peer_id;
 			spin_lock_bh(&ab->base_lock);
-			peer = ath12k_peer_find_by_id(ab, peer_id);
+			peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 			if (!peer) {
 				spin_unlock_bh(&ab->base_lock);
 				continue;
@@ -2826,9 +2826,10 @@ static void ath12k_dp_rx_h_undecap(struc
 }
 
 struct ath12k_peer *
-ath12k_dp_rx_h_find_peer(struct ath12k_base *ab, struct sk_buff *msdu,
+ath12k_dp_rx_h_find_peer(struct ath12k *ar, struct sk_buff *msdu,
 			 struct ath12k_dp_rx_info *rx_info)
 {
+	struct ath12k_base *ab = ar->ab;
 	struct ath12k_skb_rxcb *rxcb = ATH12K_SKB_RXCB(msdu);
 	struct hal_rx_desc *rx_desc = rxcb->rx_desc;
 	struct ath12k_peer *peer = NULL;
@@ -2836,7 +2837,7 @@ ath12k_dp_rx_h_find_peer(struct ath12k_b
 	lockdep_assert_held(&ab->base_lock);
 
 	if (rxcb->peer_id)
-		peer = ath12k_peer_find_by_id(ab, rxcb->peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, rxcb->peer_id);
 
 	if (peer)
 		return peer;
@@ -2945,7 +2946,7 @@ static void ath12k_dp_rx_h_mpdu(struct a
 
 	spin_lock_bh(&ar->ab->base_lock);
 
-	peer = ath12k_dp_rx_h_find_peer(ar->ab, msdu, rx_info);
+	peer = ath12k_dp_rx_h_find_peer(ar, msdu, rx_info);
 	if (peer) {
 		/* If the pkt is a valid IP packet and peer supports
 		 * fast rx, deliver directly to net, also note that
@@ -3249,7 +3250,7 @@ static void ath12k_dp_rx_deliver_msdu(st
 
 	spin_lock_bh(&ab->base_lock);
 	if (rxcb->peer_id)
-		peer = ath12k_peer_find_by_id(ab, rxcb->peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, rxcb->peer_id);
 	if (!peer && (rx_info->filled & BIT_ULL(ATH12K_RX_INFO_ADDR2)))
 		peer = ath12k_peer_find_by_addr(ab, rx_info->addr2);
 
@@ -3667,7 +3668,7 @@ try_again:
 		if (ath12k_debugfs_is_extd_rx_stats_enabled(ar) && rxcb->peer_id) {
 			rcu_read_lock();
 			spin_lock_bh(&src_ab->base_lock);
-			peer = ath12k_peer_find_by_id(src_ab, rxcb->peer_id);
+			peer = ath12k_peer_find_by_peer_list_index(ar, rxcb->peer_id);
 			if (peer && peer->sta)
 				arsta = ath12k_peer_get_link_sta(src_ab, peer);
 			spin_unlock_bh(&src_ab->base_lock);
@@ -4234,7 +4235,7 @@ static int ath12k_dp_rx_frag_h_mpdu(stru
 		return -EINVAL;
 
 	spin_lock_bh(&ab->base_lock);
-	peer = ath12k_peer_find_by_id(ab, peer_id);
+	peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 	if (!peer) {
 		ath12k_warn(ab, "failed to find the peer to de-fragment received fragment peer_id %d\n",
 			    peer_id);
@@ -4297,7 +4298,7 @@ static int ath12k_dp_rx_frag_h_mpdu(stru
 	del_timer_sync(&rx_tid->frag_timer);
 	spin_lock_bh(&ab->base_lock);
 
-	peer = ath12k_peer_find_by_id(ab, peer_id);
+	peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 	if (!peer)
 		goto err_frags_cleanup;
 
@@ -4713,7 +4714,7 @@ static int ath12k_dp_rx_h_null_q_desc(st
 exit:
 	if (!ab->stats_disable) {
 		spin_lock_bh(&ab->base_lock);
-		peer = ath12k_peer_find_by_id(ab, peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, rxcb->peer_id);
 		if (peer && peer->sta)
 			arsta = ath12k_peer_get_link_sta(ab, peer);
 
@@ -4820,7 +4821,7 @@ exit:
 	if (!ab->stats_disable) {
 		peer_id = ath12k_dp_rx_h_peer_id(ab, desc);
 		spin_lock_bh(&ab->base_lock);
-		peer = ath12k_peer_find_by_id(ab, peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 		if (peer && peer->sta)
 			arsta = ath12k_peer_get_link_sta(ab, peer);
 		if (arsta && drop)
@@ -4853,7 +4854,7 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 	peer_id = ath12k_dp_rx_h_peer_id(ab, rx_desc);
 
 	spin_lock_bh(&ab->base_lock);
-	if (!ath12k_peer_find_by_id(ab, peer_id)) {
+	if (!ath12k_peer_find_by_peer_list_index(ar, peer_id)) {
 		spin_unlock_bh(&ab->base_lock);
 		ath12k_dbg(ab, ATH12K_DBG_DATA, "invalid peer id received in wbm err pkt%d\n",
 			   peer_id);
@@ -4895,7 +4896,7 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 exit:
 	if (!ab->stats_disable && drop) {
 		spin_lock_bh(&ab->base_lock);
-		peer = ath12k_peer_find_by_id(ab, peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 		if (peer && peer->sta) {
 			arsta = ath12k_peer_get_link_sta(ab, peer);
 			if (arsta)
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -264,7 +264,7 @@ int ath12k_dp_rx_pktlog_stop(struct ath1
 u8 ath12k_dp_rx_h_l3pad(struct ath12k_base *ab,
 			struct hal_rx_desc *desc);
 struct ath12k_peer *
-ath12k_dp_rx_h_find_peer(struct ath12k_base *ab, struct sk_buff *msdu,
+ath12k_dp_rx_h_find_peer(struct ath12k *ar, struct sk_buff *msdu,
 			 struct ath12k_dp_rx_info *rx_info);
 u8 ath12k_dp_rx_h_decap_type(struct ath12k_base *ab,
 			     struct hal_rx_desc *desc);
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -372,7 +372,7 @@ int ath12k_dp_tx_direct(struct ath12k_li
 			u16 peer_id = u32_get_bits(skb->mark, SAWF_PEER_ID);
 			u32 len = skb_headlen(skb);
 			spin_lock_bh(&ab->base_lock);
-			peer = ath12k_peer_find_by_id(ab, peer_id);
+			peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 			if (unlikely(!peer || !peer->sta))
 				ath12k_dbg(ab, ATH12K_DBG_SAWF,
 					   "peer_id %u not found \n", peer_id);
@@ -472,7 +472,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 		spin_lock_bh(&ab->base_lock);
 		peer_id = FIELD_GET(HTT_TCL_META_DATA_PEER_ID_MISSION,
 				    ti.meta_data_flags);
-		peer = ath12k_peer_find_by_id(ab, peer_id);
+		peer = ath12k_peer_find_by_peer_list_index(ar, peer_id);
 		if (!peer || !peer->sta) {
 			spin_unlock_bh(&ab->base_lock);
 			ath12k_dbg(ab, ATH12K_DBG_DP_TX,
@@ -1039,7 +1039,7 @@ void ath12k_dp_tx_update_txcompl(struct
 	int ret;
 
 	spin_lock_bh(&ab->base_lock);
-	peer = ath12k_peer_find_by_id(ab, ts->peer_id);
+	peer = ath12k_peer_find_by_peer_list_index(ar, ts->peer_id);
 	if (!peer || !peer->sta) {
 		ath12k_dbg(ab, ATH12K_DBG_DP_TX,
 			   "failed to find the peer by id %u\n", ts->peer_id);
@@ -1235,7 +1235,7 @@ static void ath12k_dp_tx_complete_msdu(s
 
 		if (unlikely(!ab->stats_disable)) {
 			spin_lock_bh(&ab->base_lock);
-			peer = ath12k_peer_find_by_id(ab, ts.peer_id);
+			peer = ath12k_peer_find_by_peer_list_index(ar, ts.peer_id);
 			if (unlikely(!peer || !peer->sta)) {
 				ath12k_dbg(ab, ATH12K_DBG_DATA,
 					   "dp_tx: failed to find the peer with peer_id %d\n",
@@ -1291,7 +1291,7 @@ unlock:
 	}
 
 	spin_lock_bh(&ab->base_lock);
-	peer = ath12k_peer_find_by_id(ab, ts.peer_id);
+	peer = ath12k_peer_find_by_peer_list_index(ar, ts.peer_id);
 	if (unlikely(!peer || !peer->sta)) {
 		ath12k_dbg(ab, ATH12K_DBG_DATA,
 			   "dp_tx: failed to find the peer with peer_id %d\n",
@@ -1414,7 +1414,7 @@ static void ath12k_ppeds_tx_update_stats
 
 	spin_lock_bh(&ab->base_lock);
 
-	peer = ath12k_peer_find_by_id(ab, ts.peer_id);
+	peer = ath12k_peer_find_by_peer_list_index(ar, ts.peer_id);
 	if (unlikely(!peer || !peer->sta)) {
 		ath12k_dbg(ab, ATH12K_DBG_DATA,
 			   "dp_tx: failed to find the peer with peer_id %d\n",
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1335,12 +1335,16 @@ void ath12k_mac_peer_cleanup_all(struct
 	struct ath12k_base *ab = ar->ab;
 	struct ath12k_hw_group *ag = ab->ag;
 	struct ath12k_link_vif *arvif, *tmp_vif;
+	u16 peer_id, ml_peer_id;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
 	mutex_lock(&ab->tbl_mtx_lock);
 	spin_lock_bh(&ab->base_lock);
+
 	list_for_each_entry_safe(peer, tmp, &ab->peers, list) {
+		peer_id = peer->peer_id;
+		ml_peer_id = peer->ml_peer_id & ~ATH12K_ML_PEER_ID_VALID;
 		ath12k_dp_rx_peer_tid_cleanup(ar, peer);
 		ath12k_peer_rhash_delete(ab, peer);
 		list_del(&peer->list);
@@ -1348,6 +1352,11 @@ void ath12k_mac_peer_cleanup_all(struct
 	if (peer->sawf_ctx_peer.telemetry_peer_ctx)
 		ath12k_telemetry_peer_ctx_free(peer->sawf_ctx_peer.telemetry_peer_ctx);
 #endif
+		ab->peer_list[peer_id] = NULL;
+
+		if (peer->mlo)
+			ab->ml_peer_list[ml_peer_id][peer->pdev_idx] = NULL;
+
 		kfree(peer);
 	}
 	spin_unlock_bh(&ab->base_lock);
@@ -7124,11 +7133,13 @@ static void ath12k_mac_station_post_remo
 					   struct ath12k_link_vif *arvif,
 					   struct ath12k_link_sta *arsta)
 {
+	struct ath12k_base *ab = ar->ab;
 	struct ath12k_peer *peer;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_vif *vif = ahvif->vif;
+	u16 peer_id, ml_peer_id;
 	bool skip_peer_delete;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
@@ -7146,6 +7157,8 @@ static void ath12k_mac_station_post_remo
 	} else if (peer && peer->sta == sta) {
 		ath12k_warn(ar->ab, "Found peer entry %pM n vdev %i after it was supposedly removed\n",
 			    arsta->addr, arvif->vdev_id);
+		peer_id = peer->peer_id;
+		ml_peer_id = peer->ml_peer_id & ~ATH12K_ML_PEER_ID_VALID;
 		ath12k_peer_rhash_delete(ar->ab, peer);
 		peer->sta = NULL;
 		list_del(&peer->list);
@@ -7153,6 +7166,11 @@ static void ath12k_mac_station_post_remo
 		if (peer->sawf_ctx_peer.telemetry_peer_ctx)
 			ath12k_telemetry_peer_ctx_free(peer->sawf_ctx_peer.telemetry_peer_ctx);
 #endif
+		ab->peer_list[peer_id] = NULL;
+
+		if (peer->mlo)
+			ab->ml_peer_list[ml_peer_id][peer->pdev_idx] = NULL;
+
 		kfree(peer);
 		ar->num_peers--;
 	}
@@ -17328,7 +17346,7 @@ int ath12k_mac_allocate(struct ath12k_hw
 	struct ath12k_hw *ah;
 	struct ieee80211_ops *ops;
 	size_t len;
-	int i, j, total_radio, num_radios, ret;
+	int i, j, k, total_radio, num_radios, ret;
 	int mac_id, chip_id;
 	u8 link_id, num_hw;
 	struct ath12k_pdev *pdev;
@@ -17439,6 +17457,35 @@ int ath12k_mac_allocate(struct ath12k_hw
 				spin_lock_bh(&ab->base_lock);
 				ab->free_vdev_map = (1LL << (ab->num_radios * TARGET_NUM_VDEVS)) - 1;
 				spin_unlock_bh(&ab->base_lock);
+
+				ab->peer_list = kcalloc(ab->peer_list_size,
+							sizeof(ab->peer_list[0]),
+							GFP_KERNEL);
+				if (!ab->peer_list) {
+					ret = -ENOMEM;
+					goto err_mac_destroy;
+				}
+
+				ab->ml_peer_list_size = ab->hw_params->max_mlo_peer;
+				ab->ml_peer_list = kcalloc(ab->ml_peer_list_size,
+							   sizeof(ab->ml_peer_list[0]),
+							   GFP_KERNEL);
+				if (!ab->ml_peer_list) {
+					ret = -ENOMEM;
+					goto err_mac_destroy;
+				}
+
+				for (k = 0; k < ab->ml_peer_list_size; k++) {
+					ab->ml_peer_list[k] =
+						kcalloc(ab->num_radios,
+							sizeof(ab->ml_peer_list[k][0]),
+							GFP_KERNEL);
+					if (!ab->ml_peer_list[k]) {
+						ret = -ENOMEM;
+						goto err_mac_destroy;
+					}
+				}
+
 				ret = ath12k_peer_rhash_tbl_init(ab);
 				if (ret)
 					goto err_mac_destroy;
@@ -17491,7 +17538,14 @@ void ath12k_mac_destroy(struct ath12k_hw
 				continue;
 
 			pdev->ar = NULL;
+			spin_lock_bh(&ab->base_lock);
+			kfree(ab->ml_peer_list[j]);
+			spin_unlock_bh(&ab->base_lock);
 		}
+
+		spin_lock_bh(&ab->base_lock);
+		kfree(ab->peer_list);
+		spin_unlock_bh(&ab->base_lock);
 		ath12k_peer_rhash_tbl_destroy(ab);
 	}
 
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -113,25 +113,49 @@ struct ath12k_peer *ath12k_peer_find_lis
 	}
 }
 
-struct ath12k_peer *ath12k_peer_find_by_id(struct ath12k_base *ab,
-					    int peer_id)
+static inline struct ath12k_peer *
+ath12k_peer_find_by_link_peerid(struct ath12k_base *ab,
+				int peer_id)
+{
+	if (unlikely(peer_id >= ab->peer_list_size))
+		return NULL;
+
+	return ab->peer_list[peer_id];
+}
+
+struct ath12k_peer *
+ath12k_peer_find_by_peer_list_index(struct ath12k *ar,
+				   int peer_id)
 {
+	struct ath12k_base *ab = ar->ab;
+
 	lockdep_assert_held(&ab->base_lock);
 
-	if (peer_id == ATH12K_PEER_ID_INVALID)
+	if (unlikely(peer_id == ATH12K_PEER_ID_INVALID))
 		return NULL;
 
 	if (peer_id & ATH12K_ML_PEER_ID_VALID) {
-		return ath12k_peer_find_by_ml_id(ab, peer_id);
-	} else {
-		if (!ab->rhead_peer_id)
+		peer_id &= ~ATH12K_ML_PEER_ID_VALID;
+		if (unlikely(peer_id >= ab->ml_peer_list_size))
 			return NULL;
 
-		return rhashtable_lookup_fast(ab->rhead_peer_id, &peer_id,
-		  			      ab->rhash_peer_id_param);
+		return ab->ml_peer_list[peer_id][ar->pdev_idx];
+	} else {
+		return ath12k_peer_find_by_link_peerid(ab, peer_id);
 	}
 }
 
+struct ath12k_peer *ath12k_peer_find_by_id(struct ath12k_base *ab,
+					    int peer_id)
+{
+	lockdep_assert_held(&ab->base_lock);
+
+	if (unlikely(peer_id == ATH12K_PEER_ID_INVALID))
+		return NULL;
+
+	return ath12k_peer_find_by_link_peerid(ab, peer_id);
+}
+
 struct ath12k_peer *ath12k_peer_find_by_ast(struct ath12k_base *ab,
 					    int ast_hash)
 {
@@ -208,11 +232,10 @@ struct ath12k_peer *ath12k_peer_find_pri
 	if (peer_id & ATH12K_ML_PEER_ID_VALID) {
 		return ath12k_peer_find_pri_by_ml_id(ab, peer_id);
 	} else {
-		if (!ab->rhead_peer_id)
+		if (unlikely(peer_id >= ab->peer_list_size))
 			return NULL;
 
-		return rhashtable_lookup_fast(ab->rhead_peer_id, &peer_id,
-					      ab->rhash_peer_id_param);
+		return ab->peer_list[peer_id];
 	}
 }
 #endif
@@ -223,6 +246,13 @@ void ath12k_peer_unmap_event(struct ath1
 
 	spin_lock_bh(&ab->base_lock);
 
+	if (peer_id >= ab->peer_list_size) {
+		ath12k_warn(ab,
+			    "peer-unmap-event: peer_id %u exceeds peer list size\n",
+			    peer_id);
+		goto exit;
+	}
+
 	peer = ath12k_peer_find_list_by_id(ab, peer_id);
 	if (!peer) {
 		ath12k_warn(ab, "peer-unmap-event: unknown peer id %d\n",
@@ -238,6 +268,7 @@ void ath12k_peer_unmap_event(struct ath1
 	if (peer->sawf_ctx_peer.telemetry_peer_ctx)
 		ath12k_telemetry_peer_ctx_free(peer->sawf_ctx_peer.telemetry_peer_ctx);
 #endif
+	ab->peer_list[peer_id] = NULL;
 	kfree(peer);
 	wake_up(&ab->peer_mapping_wq);
 
@@ -253,6 +284,13 @@ void ath12k_peer_map_event(struct ath12k
 	spin_lock_bh(&ab->base_lock);
 	peer = ath12k_peer_find(ab, vdev_id, mac_addr);
 	if (!peer) {
+		if (peer_id >= ab->peer_list_size) {
+			ath12k_warn(ab,
+				    "peer-map-event: peer_id %u exceeds peer list size\n",
+				    peer_id);
+			goto exit;
+		}
+
 		peer = kzalloc(sizeof(*peer), GFP_ATOMIC);
 		if (!peer)
 			goto exit;
@@ -262,6 +300,7 @@ void ath12k_peer_map_event(struct ath12k
 		peer->ast_hash = ast_hash;
 		peer->hw_peer_id = hw_peer_id;
 		ether_addr_copy(peer->addr, mac_addr);
+		ab->peer_list[peer_id] = peer;
 #ifdef CPTCFG_ATH12K_SAWF
 		if (ath12k_sawf_enable)
 			ath12k_sdwf_fill_hbucket_type(peer);
@@ -321,11 +360,26 @@ void ath12k_peer_mlo_unmap_event(struct
 {
 	struct ath11k_htt_mlo_peer_unmap_msg *msg;
 	u16 ml_peer_id;
+	u8 i;
 
 	msg = (struct ath11k_htt_mlo_peer_unmap_msg *)skb->data;
 
 	ml_peer_id = FIELD_GET(ATH12K_HTT_MLO_PEER_UNMAP_PEER_ID, msg->info0);
 
+	if (ml_peer_id >= ab->ml_peer_list_size) {
+		ath12k_warn(ab,
+			    "peer mlo unmap event: ml_peer_id %u exceeds max size\n",
+			    ml_peer_id);
+		return;
+	}
+
+	spin_lock_bh(&ab->base_lock);
+
+	for (i = 0; i < ab->num_radios; i++)
+		ab->ml_peer_list[ml_peer_id][i] = NULL;
+
+	spin_unlock_bh(&ab->base_lock);
+
 	ml_peer_id |= ATH12K_ML_PEER_ID_VALID;
 
 	ath12k_dbg(ab, ATH12K_DBG_PEER, "htt MLO peer unmap peer ml id %d\n", ml_peer_id);
@@ -431,6 +485,7 @@ void ath12k_peer_cleanup(struct ath12k *
 {
 	struct ath12k_peer *peer, *tmp;
 	struct ath12k_base *ab = ar->ab;
+	u16 peer_id, ml_peer_id;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -440,6 +495,8 @@ void ath12k_peer_cleanup(struct ath12k *
 		if (peer->vdev_id != vdev_id)
 			continue;
 
+		peer_id = peer->peer_id;
+		ml_peer_id = peer->ml_peer_id & ~ATH12K_ML_PEER_ID_VALID;
 		ath12k_warn(ab, "removing stale peer %pM from vdev_id %d\n",
 			    peer->addr, vdev_id);
 		ath12k_peer_rhash_delete(ab, peer);
@@ -448,6 +505,11 @@ void ath12k_peer_cleanup(struct ath12k *
 		if (peer->sawf_ctx_peer.telemetry_peer_ctx)
 			ath12k_telemetry_peer_ctx_free(peer->sawf_ctx_peer.telemetry_peer_ctx);
 #endif
+		ab->peer_list[peer_id] = NULL;
+
+		if (peer->mlo)
+			ab->ml_peer_list[ml_peer_id][ar->pdev_idx] = NULL;
+
 		kfree(peer);
 		ar->num_peers--;
 	}
@@ -658,6 +720,7 @@ int ath12k_peer_create(struct ath12k *ar
 		       struct ieee80211_sta *sta,
 		       struct ath12k_wmi_peer_create_arg *arg)
 {
+	struct ath12k_base *ab = ar->ab;
 	struct ath12k_peer *peer;
 	struct ath12k_sta *ahsta;
 	struct ath12k_link_sta *arsta;
@@ -665,6 +728,7 @@ int ath12k_peer_create(struct ath12k *ar
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct ath12k_ml_peer *ml_peer;
 	int ret, fbret;
+	u16 ml_peer_id;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -683,7 +747,7 @@ int ath12k_peer_create(struct ath12k *ar
 		ml_peer = ath12k_ml_peer_find(ar->ah, arg->peer_addr);
 		if (ml_peer && (!sta->mlo || ml_peer->id != ahsta->ml_peer_id)) {
 			spin_unlock_bh(&ar->ah->data_lock);
-			ath12k_warn(ar->ab,
+			ath12k_warn(ab,
 				    "failed to create link peer %pM due to conflicting address with already associated ML peer %pM with ml peer id %d\n",
 				    arg->peer_addr, ml_peer->addr,
 				    ml_peer->id);
@@ -692,14 +756,14 @@ int ath12k_peer_create(struct ath12k *ar
 		spin_unlock_bh(&ar->ah->data_lock);
 	}
 
-	mutex_lock(&ar->ab->tbl_mtx_lock);
-	spin_lock_bh(&ar->ab->base_lock);
- 	peer = ath12k_peer_find_by_pdev_idx(ar->ab, ar->pdev_idx, arg->peer_addr);
+	mutex_lock(&ab->tbl_mtx_lock);
+	spin_lock_bh(&ab->base_lock);
+ 	peer = ath12k_peer_find_by_pdev_idx(ab, ar->pdev_idx, arg->peer_addr);
 	if (peer) {
-		ath12k_warn(ar->ab, "Peer %pM already found in pdev_idx %d vdev %d\n",
+		ath12k_warn(ab, "Peer %pM already found in pdev_idx %d vdev %d\n",
 			    arg->peer_addr, ar->pdev_idx, peer->vdev_id);
-		spin_unlock_bh(&ar->ab->base_lock);
-		mutex_unlock(&ar->ab->tbl_mtx_lock);
+		spin_unlock_bh(&ab->base_lock);
+		mutex_unlock(&ab->tbl_mtx_lock);
 		return -EINVAL;
 	}
 
@@ -708,16 +772,16 @@ int ath12k_peer_create(struct ath12k *ar
 	 * table. In that case update the rhash table if peer is
 	 * already present
 	 */
-	peer = ath12k_peer_find_by_addr(ar->ab, arg->peer_addr);
+	peer = ath12k_peer_find_by_addr(ab, arg->peer_addr);
 	if (peer)
-		ath12k_peer_rhash_delete(ar->ab, peer);
+		ath12k_peer_rhash_delete(ab, peer);
 
-	spin_unlock_bh(&ar->ab->base_lock);
-	mutex_unlock(&ar->ab->tbl_mtx_lock);
+	spin_unlock_bh(&ab->base_lock);
+	mutex_unlock(&ab->tbl_mtx_lock);
 
 	ret = ath12k_wmi_send_peer_create_cmd(ar, arg);
 	if (ret) {
-		ath12k_warn(ar->ab,
+		ath12k_warn(ab,
 			    "failed to send peer create vdev_id %d ret %d\n",
 			    arg->vdev_id, ret);
 		return ret;
@@ -728,22 +792,22 @@ int ath12k_peer_create(struct ath12k *ar
 	if (ret)
 		return ret;
 
-	mutex_lock(&ar->ab->tbl_mtx_lock);
-	spin_lock_bh(&ar->ab->base_lock);
+	mutex_lock(&ab->tbl_mtx_lock);
+	spin_lock_bh(&ab->base_lock);
 
-	peer = ath12k_peer_find(ar->ab, arg->vdev_id, arg->peer_addr);
+	peer = ath12k_peer_find(ab, arg->vdev_id, arg->peer_addr);
 	if (!peer) {
-		spin_unlock_bh(&ar->ab->base_lock);
-		mutex_unlock(&ar->ab->tbl_mtx_lock);
-		ath12k_warn(ar->ab, "failed to find peer %pM on vdev %i after creation\n",
+		spin_unlock_bh(&ab->base_lock);
+		mutex_unlock(&ab->tbl_mtx_lock);
+		ath12k_warn(ab, "failed to find peer %pM on vdev %i after creation\n",
 			    arg->peer_addr, arg->vdev_id);
 
 		goto cleanup;
 	}
-	ret = ath12k_peer_rhash_add(ar->ab, peer);
+	ret = ath12k_peer_rhash_add(ab, peer);
 	if (ret) {
-		spin_unlock_bh(&ar->ab->base_lock);
-		mutex_unlock(&ar->ab->tbl_mtx_lock);
+		spin_unlock_bh(&ab->base_lock);
+		mutex_unlock(&ab->tbl_mtx_lock);
 		goto cleanup;
         }
 
@@ -785,9 +849,21 @@ int ath12k_peer_create(struct ath12k *ar
 
 		/* Fill ML info into created peer */
 		if (sta->mlo) {
-			peer->ml_peer_id = ahsta->ml_peer_id | ATH12K_ML_PEER_ID_VALID;
+			ml_peer_id = ahsta->ml_peer_id;
+			peer->ml_peer_id = ml_peer_id | ATH12K_ML_PEER_ID_VALID;
 			ether_addr_copy(peer->ml_addr, sta->addr);
 			peer->mlo = true;
+			if (ahsta->ml_peer_id >= ab->ml_peer_list_size) {
+				ath12k_warn(ab,
+					    "peer create: ml_peer_id %u exceeds max size\n",
+					    ml_peer_id);
+				ret = -EINVAL;
+				spin_unlock_bh(&ab->base_lock);
+				mutex_unlock(&ab->tbl_mtx_lock);
+				goto cleanup;
+			}
+
+			ab->ml_peer_list[ml_peer_id][ar->pdev_idx] = peer;
 		} else {
 			peer->ml_peer_id = ATH12K_MLO_PEER_ID_INVALID;
 			peer->mlo = false;
@@ -796,17 +872,17 @@ int ath12k_peer_create(struct ath12k *ar
 
 	ar->num_peers++;
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_PEER, "peer created %pM\n", arg->peer_addr);
+	ath12k_dbg(ab, ATH12K_DBG_PEER, "peer created %pM\n", arg->peer_addr);
 
-	spin_unlock_bh(&ar->ab->base_lock);
-	mutex_unlock(&ar->ab->tbl_mtx_lock);
+	spin_unlock_bh(&ab->base_lock);
+	mutex_unlock(&ab->tbl_mtx_lock);
 
 	return 0;
 
 cleanup:
 	fbret = __ath12k_peer_delete(ar, arg->vdev_id, arg->peer_addr);
 	if (fbret)
-		ath12k_warn(ar->ab, "failed peer %pM delete vdev_id %d fallback ret %d\n",
+		ath12k_warn(ab, "failed peer %pM delete vdev_id %d fallback ret %d\n",
 			    arg->peer_addr, arg->vdev_id, fbret);
 
 	return ret;
--- a/drivers/net/wireless/ath/ath12k/peer.h
+++ b/drivers/net/wireless/ath/ath12k/peer.h
@@ -103,6 +103,8 @@ struct ath12k_peer *ath12k_peer_find_lis
 struct ath12k_peer *ath12k_peer_find_by_addr(struct ath12k_base *ab,
 					     const u8 *addr);
 struct ath12k_peer *ath12k_peer_find_by_id(struct ath12k_base *ab, int peer_id);
+struct ath12k_peer *
+ath12k_peer_find_by_peer_list_index(struct ath12k *ar, int peer_id);
 struct ath12k_peer *ath12k_peer_find_by_ast(struct ath12k_base *ab, int ast_hash);
 #ifdef CPTCFG_ATH12K_SAWF
 struct ath12k_peer *ath12k_peer_find_pri_by_id(struct ath12k_base *ab, int peer_id);
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -9280,6 +9280,8 @@ static int ath12k_wmi_rdy_parse(struct a
 				fixed_param.ready_event_min.mac_addr.addr);
 		ab->pktlog_defs_checksum = fixed_param.pktlog_defs_checksum;
 		ab->wmi_ready = true;
+		ab->peer_list_size = fixed_param.ready_event_min.num_total_peers +
+				     fixed_param.ready_event_min.num_extra_peers;
 		break;
 	case WMI_TAG_ARRAY_FIXED_STRUCT:
 		addr_list = (struct ath12k_wmi_mac_addr_params *)ptr;
@@ -9298,6 +9300,8 @@ static int ath12k_wmi_rdy_parse(struct a
 		break;
 	}
 
+	ath12k_dbg(ab, ATH12K_DBG_WMI, "wmi ready parse tag: %u peer_list_size %u",
+		   tag, ab->peer_list_size);
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1476,9 +1476,12 @@ struct ath12k_base {
 	struct ath12k_hal hal;
 	/* To synchronize core_start/core_stop */
 	struct mutex core_lock;
-	/* Protects data like peers */
+	/* Protects data like peers and peer list*/
 	spinlock_t base_lock;
-
+	u32 peer_list_size;
+	struct ath12k_peer **peer_list;
+	u32 ml_peer_list_size;
+	struct ath12k_peer ***ml_peer_list;
 	/* Single pdev device (struct ath12k_hw_params::single_pdev_only):
 	 *
 	 * Firmware maintains data for all bands but advertises a single
