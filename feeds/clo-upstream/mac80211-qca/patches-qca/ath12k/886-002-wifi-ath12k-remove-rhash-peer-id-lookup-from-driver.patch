From dcfb9926a9ff788ba1ece6eb2a49c68ce72f4834 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 3 Apr 2024 17:32:42 +0530
Subject: [PATCH 2/2] wifi: ath12k: remove rhash peer id lookup from driver

Current driver's peer_id lookup mechanism uses rhash-based lookup, which
incurs some overhead in generating the rhash key for each peer. This
results in a performance hit due to the time spent on the rhash key
calculation and storing hash table consumes more memory compare to array
based lookup. Since previous patch add changes for moving to array based
peer id lookup, remove the rhash peer id lookup related functions from
the driver.

Patch-depdendency: 886-001-wifi-ath12k-add-array-based-peer-lookup-to-avoid-CPU.patch

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |   4 -
 drivers/net/wireless/ath/ath12k/peer.c | 110 ++-----------------------
 drivers/net/wireless/ath/ath12k/peer.h |   2 -
 3 files changed, 6 insertions(+), 110 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index ecfef6e..22b5386 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1478,10 +1478,6 @@ struct ath12k_base {
 	struct rhashtable *rhead_peer_addr;
 	struct rhashtable_params rhash_peer_addr_param;
 
-	/* The rhashtable containing struct ath12k_peer keyed by id  */
-	struct rhashtable *rhead_peer_id;
-	struct rhashtable_params rhash_peer_id_param;
-
 	struct list_head peers;
 	wait_queue_head_t peer_mapping_wq;
 	u8 mac_addr[ETH_ALEN];
diff --git a/drivers/net/wireless/ath/ath12k/peer.c b/drivers/net/wireless/ath/ath12k/peer.c
index be8744a..e0dfdb7 100644
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -449,35 +449,21 @@ static int ath12k_peer_rhash_add(struct ath12k_base *ab, struct ath12k_peer *pee
 	lockdep_assert_held(&ab->base_lock);
 	lockdep_assert_held(&ab->tbl_mtx_lock);
 
-	if (!ab->rhead_peer_id || !ab->rhead_peer_addr)
+	if (!ab->rhead_peer_addr)
 		return -EPERM;
 
 	if (peer->rhash_done)
 		return 0;
 
-	ret = ath12k_peer_rhash_insert(ab, ab->rhead_peer_id, &peer->rhash_id,
-                                       &ab->rhash_peer_id_param, &peer->peer_id);
-	if (ret) {
-                ath12k_warn(ab, "failed to add peer %pM with id %d in rhash_id ret %d\n",
-                            peer->addr, peer->peer_id, ret);
-                return ret;
-        }
-
         ret = ath12k_peer_rhash_insert(ab, ab->rhead_peer_addr, &peer->rhash_addr,
                                        &ab->rhash_peer_addr_param, &peer->addr);
         if (ret) {
                 ath12k_warn(ab, "failed to add peer %pM with id %d in rhash_addr ret %d\n",
                             peer->addr, peer->peer_id, ret);
-                goto err_clean;
         }
 
 	peer->rhash_done = true;
         return 0;
-
-err_clean:
-        ath12k_peer_rhash_remove(ab, ab->rhead_peer_id, &peer->rhash_id,
-                                 &ab->rhash_peer_id_param);
-	return ret;
 }
 
 
@@ -991,7 +977,7 @@ int ath12k_peer_rhash_delete(struct ath12k_base *ab, struct ath12k_peer *peer)
 	lockdep_assert_held(&ab->base_lock);
 	lockdep_assert_held(&ab->tbl_mtx_lock);
 
-	if (!ab->rhead_peer_id || !ab->rhead_peer_addr)
+	if (!ab->rhead_peer_addr)
 		return -EPERM;
 
 	if (!peer->rhash_done)
@@ -1005,74 +991,11 @@ int ath12k_peer_rhash_delete(struct ath12k_base *ab, struct ath12k_peer *peer)
 		return ret;
 	}
 
-	ret = ath12k_peer_rhash_remove(ab, ab->rhead_peer_id, &peer->rhash_id,
-				       &ab->rhash_peer_id_param);
-	if (ret) {
-		ath12k_warn(ab, "failed to remove peer %pM id %d in rhash_id ret %d\n",
-			    peer->addr, peer->peer_id, ret);
-		return ret;
-	}
-
 	peer->rhash_done = false;
 
 	return 0;
 }
 
-static int ath12k_peer_rhash_id_tbl_init(struct ath12k_base *ab)
-{
-	struct rhashtable_params *param;
-	struct rhashtable *rhash_id_tbl;
-	int ret;
-	size_t size;
-
-	lockdep_assert_held(&ab->tbl_mtx_lock);
-
-	if (ab->rhead_peer_id)
-		return 0;
-
-	size = sizeof(*ab->rhead_peer_id);
-	rhash_id_tbl = kzalloc(size, GFP_KERNEL);
-	if (!rhash_id_tbl) {
-		ath12k_warn(ab, "failed to init rhash id table due to no mem (size %zu)\n",
-			    size);
-		return -ENOMEM;
-	}
-
-	param = &ab->rhash_peer_id_param;
-
-	param->key_offset = offsetof(struct ath12k_peer, peer_id);
-	param->head_offset = offsetof(struct ath12k_peer, rhash_id);
-	param->key_len = sizeof_field(struct ath12k_peer, peer_id);
-	param->automatic_shrinking = true;
-	param->nelem_hint = ab->num_radios * TARGET_NUM_PEERS_PDEV;
-
-	ret = rhashtable_init(rhash_id_tbl, param);
-	if (ret) {
-		ath12k_warn(ab, "failed to init peer id rhash table %d\n", ret);
-		goto err_free;
-	}
-
-	spin_lock_bh(&ab->base_lock);
-
-	if (!ab->rhead_peer_id) {
-		ab->rhead_peer_id = rhash_id_tbl;
-	} else {
-		spin_unlock_bh(&ab->base_lock);
-		goto cleanup_tbl;
-	}
-
-	spin_unlock_bh(&ab->base_lock);
-
-	return 0;
-
-cleanup_tbl:
-	rhashtable_destroy(rhash_id_tbl);
-err_free:
-	kfree(rhash_id_tbl);
-
-	return ret;
-}
-
 static int ath12k_peer_rhash_addr_tbl_init(struct ath12k_base *ab)
 {
 	struct rhashtable_params *param;
@@ -1128,18 +1051,6 @@ err_free:
 	return ret;
 }
 
-static inline void ath12k_peer_rhash_id_tbl_destroy(struct ath12k_base *ab)
-{
-	lockdep_assert_held(&ab->tbl_mtx_lock);
-
-	if (!ab->rhead_peer_id)
-		return;
-
-	rhashtable_destroy(ab->rhead_peer_id);
-	kfree(ab->rhead_peer_id);
-	ab->rhead_peer_id = NULL;
-}
-
 static inline void ath12k_peer_rhash_addr_tbl_destroy(struct ath12k_base *ab)
 {
 	lockdep_assert_held(&ab->tbl_mtx_lock);
@@ -1158,23 +1069,15 @@ int ath12k_peer_rhash_tbl_init(struct ath12k_base *ab)
 
 	mutex_lock(&ab->tbl_mtx_lock);
 
-	ret = ath12k_peer_rhash_id_tbl_init(ab);
-	if (ret)
-		goto out;
-
 	ret = ath12k_peer_rhash_addr_tbl_init(ab);
-	if (ret)
-		goto cleanup_tbl;
+	if (ret) {
+		mutex_unlock(&ab->tbl_mtx_lock);
+		return ret;
+	}
 
 	mutex_unlock(&ab->tbl_mtx_lock);
 
 	return 0;
-
-cleanup_tbl:
-	ath12k_peer_rhash_id_tbl_destroy(ab);
-out:
-	mutex_unlock(&ab->tbl_mtx_lock);
-	return ret;
 }
 
 void ath12k_peer_rhash_tbl_destroy(struct ath12k_base *ab)
@@ -1182,7 +1085,6 @@ void ath12k_peer_rhash_tbl_destroy(struct ath12k_base *ab)
 	mutex_lock(&ab->tbl_mtx_lock);
 
 	ath12k_peer_rhash_addr_tbl_destroy(ab);
-	ath12k_peer_rhash_id_tbl_destroy(ab);
 
 	mutex_unlock(&ab->tbl_mtx_lock);
 }
diff --git a/drivers/net/wireless/ath/ath12k/peer.h b/drivers/net/wireless/ath/ath12k/peer.h
index ad6b252..35916d9 100644
--- a/drivers/net/wireless/ath/ath12k/peer.h
+++ b/drivers/net/wireless/ath/ath12k/peer.h
@@ -45,8 +45,6 @@ struct ath12k_peer {
 	 */
 	struct ath12k_dp_rx_tid rx_tid[IEEE80211_NUM_TIDS + 1];
 
-	/* peer id based rhashtable list pointer */
-	struct rhash_head rhash_id;
 	/* peer addr based rhashtable list pointer */
 	struct rhash_head rhash_addr;
 
-- 
2.34.1

