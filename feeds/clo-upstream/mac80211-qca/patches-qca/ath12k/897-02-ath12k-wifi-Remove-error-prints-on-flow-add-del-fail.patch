From 704639f38d4eba8b3b4155fc83e364f8d47373ad Mon Sep 17 00:00:00 2001
From: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
Date: Sun, 5 May 2024 17:42:36 +0530
Subject: [PATCH] ath12k: wifi: Remove error prints on flow add/del failure

Remove error prints on flow addition or deletion failure and record
them via stats in the fst table. This is required to avoid console
flooding when very high number of flows are added. Also, remove the
warn_on() when ab is NULL. This is required when ECM module detects
the flow on ath11k and calls the fse rule addition in ath12k.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Signed-off-by: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c |  8 +++++
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 42 +++++++++++++----------
 drivers/net/wireless/ath/ath12k/dp_rx.h   |  2 ++
 drivers/net/wireless/ath/ath12k/fse.c     |  2 +-
 drivers/net/wireless/ath/ath12k/hal_rx.c  |  6 ++--
 drivers/net/wireless/ath/ath_fse.c        | 22 ++++++------
 6 files changed, 50 insertions(+), 32 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 3ca856d..e14a7a2 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2568,6 +2568,14 @@ static ssize_t ath12k_dump_fst_flow_stats(struct file *file,
 			"\nNo of IPv6 Flow entries inserted: %u\n",
 			ab->ag->fst->ipv6_fse_rule_cnt);
 
+	len += scnprintf(buf + len, size - len,
+			"\nFlow addition failure: %u\n",
+			ab->ag->fst->flow_add_fail);
+
+	len += scnprintf(buf + len, size - len,
+			"\nFlow deletion failure: %u\n",
+			ab->ag->fst->flow_del_fail);
+
 	len += scnprintf(buf + len, size - len,
 			"\nNo of Flows per reo:\n0:%u\t1:%u\t2:%u\t3:%u\n",
 			ab->ag->fst->flows_per_reo[0],
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 3f08fd3..e1f271b 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -5882,20 +5882,20 @@ void ath12k_dp_rx_fst_detach(struct ath12k_base *ab, struct dp_rx_fst *fst)
 static void ath12k_dp_rx_flow_dump_flow_entry(struct ath12k_base *ab,
 					      struct hal_flow_tuple_info *tuple_info)
 {
-	ath12k_info(ab, "Dest IP address %x:%x:%x:%x",
-		    tuple_info->dest_ip_127_96,
-		    tuple_info->dest_ip_95_64,
-		    tuple_info->dest_ip_63_32,
-		    tuple_info->dest_ip_31_0);
-	ath12k_info(ab, "Source IP address %x:%x:%x:%x",
-		    tuple_info->src_ip_127_96,
-		    tuple_info->src_ip_95_64,
-		    tuple_info->src_ip_63_32,
-		    tuple_info->src_ip_31_0);
-	ath12k_info(ab, "Dest port %u, Src Port %u, Protocol %u",
-		    tuple_info->dest_port,
-		    tuple_info->src_port,
-		    tuple_info->l4_protocol);
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Dest IP address %x:%x:%x:%x",
+		   tuple_info->dest_ip_127_96,
+		   tuple_info->dest_ip_95_64,
+		   tuple_info->dest_ip_63_32,
+		   tuple_info->dest_ip_31_0);
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Source IP address %x:%x:%x:%x",
+		   tuple_info->src_ip_127_96,
+		   tuple_info->src_ip_95_64,
+		   tuple_info->src_ip_63_32,
+		   tuple_info->src_ip_31_0);
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Dest port %u, Src Port %u, Protocol %u",
+		   tuple_info->dest_port,
+		   tuple_info->src_port,
+		   tuple_info->l4_protocol);
 }
 
 u32 ath12k_dp_rx_flow_compute_flow_hash(struct ath12k_base *ab,
@@ -5936,7 +5936,8 @@ ath12k_dp_rx_flow_find_entry_by_tuple(struct ath12k_base *ab,
 						    &flow_info->flow_tuple_info,
 						    &flow_idx);
 	if (status != 0) {
-		ath12k_err(ab, "Could not find tuple with hash %u", flow_hash);
+		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Could not find tuple with hash %u",
+			   flow_hash);
 		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
 		return NULL;
 	}
@@ -5978,7 +5979,7 @@ ath12k_dp_rx_flow_alloc_entry(struct ath12k_base *ab,
 						 &flow_info->flow_tuple_info,
 						 &flow_idx);
 	if (status != 0) {
-		ath12k_err(ab, "Add entry failed with status %d for tuple with hash %u",
+		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Add entry failed with status %d for tuple with hash %u",
 			   status, flow_hash);
 		return NULL;
 	}
@@ -6050,8 +6051,9 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 	/* Allocate entry in DP FST */
 	fse = ath12k_dp_rx_flow_alloc_entry(ab, fst, flow_info, &flow);
 	if (!fse) {
-		ath12k_err(ab, "RX FSE alloc failed");
+		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "RX FSE alloc failed");
 		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		fst->flow_add_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return -ENOMEM;
 	}
@@ -6079,6 +6081,7 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 		ath12k_err(ab, "Unable to alloc FSE entry");
 		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
 		fse->is_valid = false;
+		fst->flow_add_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return -EEXIST;
 	}
@@ -6090,6 +6093,7 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
 		ath12k_hal_rx_flow_delete_entry(ab, fse->hal_fse);
 		fse->is_valid = false;
+		fst->flow_add_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return ret;
 	}
@@ -6130,8 +6134,9 @@ int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
 
 	fse = ath12k_dp_rx_flow_find_entry_by_tuple(ab, fst, flow_info, &flow);
 	if (!fse || !fse->is_valid) {
-		ath12k_err(ab, "RX flow delete entry failed");
+		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "RX flow delete entry failed");
 		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		fst->flow_del_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return -EINVAL;
 	}
@@ -6150,6 +6155,7 @@ int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
 	if (ret) {
 		ath12k_err(ab, "Unable to invalidate cache entry ret %d", ret);
 		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		fst->flow_del_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return ret;
 	}
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.h b/drivers/net/wireless/ath/ath12k/dp_rx.h
index aa0c2cf..53c0f5b 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -159,6 +159,8 @@ struct dp_rx_fst {
 	u16 ipv4_fse_rule_cnt;
 	u16 ipv6_fse_rule_cnt;
 	u16 flows_per_reo[4];
+	u32 flow_add_fail;
+	u32 flow_del_fail;
 	/* spinlock to prevent concurrent table access */
 	spinlock_t fst_lock;
 };
diff --git a/drivers/net/wireless/ath/ath12k/fse.c b/drivers/net/wireless/ath/ath12k/fse.c
index 3da304a..4e115d3 100644
--- a/drivers/net/wireless/ath/ath12k/fse.c
+++ b/drivers/net/wireless/ath/ath12k/fse.c
@@ -67,7 +67,7 @@ void *ath12k_fse_get_ab_from_netdev(struct net_device *dev,
 	for_each_set_bit(link_id, &ahvif->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
 		arvif = ahvif->link[link_id];
 
-		if (WARN_ON(!arvif))
+		if (!arvif)
 			continue;
 		ar = arvif->ar;
 		if (!ar)
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.c b/drivers/net/wireless/ath/ath12k/hal_rx.c
index c346cd3..370f15b 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -1125,7 +1125,8 @@ int ath12k_hal_rx_find_flow_from_tuple(struct ath12k_base *ab,
 	}
 
 	if (i == fst->max_skid_length) {
-		ath12k_err(ab, "Max skid length reached for hash %u", flow_hash);
+		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Max skid length reached for hash %u",
+			   flow_hash);
 		return -ERANGE;
 	}
 
@@ -1277,7 +1278,8 @@ int ath12k_hal_rx_insert_flow_entry(struct ath12k_base *ab, struct hal_rx_fst *f
 	}
 
 	if (i == fst->max_skid_length) {
-		ath12k_err(ab, "Max skid length reached for hash %u", flow_hash);
+		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Max skid length reached for hash %u",
+			   flow_hash);
 		return -ERANGE;
 	}
 
diff --git a/drivers/net/wireless/ath/ath_fse.c b/drivers/net/wireless/ath/ath_fse.c
index bae038e..7dbef93 100644
--- a/drivers/net/wireless/ath/ath_fse.c
+++ b/drivers/net/wireless/ath/ath_fse.c
@@ -53,8 +53,8 @@ bool ath_fse_add_rule(struct ath_fse_flow_info *fse_info)
 	if (fse_info->src_dev->ieee80211_ptr) {
 		ab = fse_cb->fse_get_ab(fse_info->src_dev, fse_info->src_mac);
 		if (!ab) {
-			pr_err("%s: Failed to add a rule in FST<ab NULL>",
-			       netdev_name(fse_info->src_dev));
+			pr_debug("%s: Failed to add a rule in FST<ab NULL>",
+				 netdev_name(fse_info->src_dev));
 			return false;
 		}
 		ret = fse_cb->fse_rule_add(ab,
@@ -62,16 +62,16 @@ bool ath_fse_add_rule(struct ath_fse_flow_info *fse_info)
 					   fse_info->dest_ip, fse_info->dest_port,
 					   fse_info->protocol, fse_info->version);
 		if (ret) {
-			pr_err("%s: Failed to add a rule in FST",
-			       netdev_name(fse_info->src_dev));
+			pr_debug("%s: Failed to add a rule in FST",
+				 netdev_name(fse_info->src_dev));
 			return false;
 		}
 	}
 	if (fse_info->dest_dev->ieee80211_ptr) {
 		ab = fse_cb->fse_get_ab(fse_info->dest_dev, fse_info->dest_mac);
 		if (!ab) {
-			pr_err("%s: Failed to add a rule in FST<ab NULL>",
-			       netdev_name(fse_info->dest_dev));
+			pr_debug("%s: Failed to add a rule in FST<ab NULL>",
+				 netdev_name(fse_info->dest_dev));
 			return false;
 		}
 		ret = fse_cb->fse_rule_add(ab,
@@ -89,8 +89,8 @@ bool ath_fse_add_rule(struct ath_fse_flow_info *fse_info)
 						fse_info->dest_ip, fse_info->dest_port,
 						fse_info->protocol, fse_info->version);
 			}
-			pr_err("%s: Failed to add a rule in FST",
-			       netdev_name(fse_info->dest_dev));
+			pr_debug("%s: Failed to add a rule in FST",
+				 netdev_name(fse_info->dest_dev));
 			return false;
 		}
 	}
@@ -126,7 +126,7 @@ bool ath_fse_delete_rule(struct ath_fse_flow_info *fse_info)
 	if (fse_info->src_dev->ieee80211_ptr) {
 		ab = fse_cb->fse_get_ab(fse_info->src_dev, fse_info->src_mac);
 		if (!ab) {
-			pr_err("Failed to delete a rule in FST<ab NULL>");
+			pr_debug("Failed to delete a rule in FST<ab NULL>");
 			return false;
 		}
 		fw_ret = fse_cb->fse_rule_delete(ab,
@@ -138,7 +138,7 @@ bool ath_fse_delete_rule(struct ath_fse_flow_info *fse_info)
 	if (fse_info->dest_dev->ieee80211_ptr) {
 		ab = fse_cb->fse_get_ab(fse_info->dest_dev, fse_info->dest_mac);
 		if (!ab) {
-			pr_err("Failed to delete a rule in FST<ab NULL>");
+			pr_debug("Failed to delete a rule in FST<ab NULL>");
 			return false;
 		}
 		rv_ret = fse_cb->fse_rule_delete(ab,
@@ -149,7 +149,7 @@ bool ath_fse_delete_rule(struct ath_fse_flow_info *fse_info)
 	if (!fw_ret && !rv_ret)
 		return true;
 
-	pr_err("Failed to delete a rule in FST");
+	pr_debug("Failed to delete a rule in FST");
 	return false;
 }
 EXPORT_SYMBOL(ath_fse_delete_rule);
-- 
2.17.1

