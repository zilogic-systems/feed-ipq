From e0218ff295befffa91e866c4deb5fef847e8150e Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Fri, 26 Apr 2024 17:07:56 +0530
Subject: [PATCH] wifi: ath: Maintain common header testmode_i.h for ath FTM support

User space application expects same enum values between ath
drivers. To ensure all ath drivers uses same testmode interfaces common
testmode_i.h is maintained

Patch-work: https://patchwork.kernel.org/project/linux-wireless/list/?series=798587&state=*

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/testmode.c   |  84 ++++++++--------
 drivers/net/wireless/ath/ath11k/testmode_i.h |  69 -------------
 drivers/net/wireless/ath/ath12k/testmode.c   | 100 +++++++++----------
 drivers/net/wireless/ath/ath12k/testmode_i.h |  68 -------------
 drivers/net/wireless/ath/testmode_i.h        |  71 +++++++++++++
 5 files changed, 162 insertions(+), 230 deletions(-)
 delete mode 100644 drivers/net/wireless/ath/ath11k/testmode_i.h
 delete mode 100644 drivers/net/wireless/ath/ath12k/testmode_i.h
 create mode 100644 drivers/net/wireless/ath/testmode_i.h

--- a/drivers/net/wireless/ath/ath11k/testmode.c
+++ b/drivers/net/wireless/ath/ath11k/testmode.c
@@ -10,20 +10,20 @@
 #include "wmi.h"
 #include "hw.h"
 #include "core.h"
-#include "testmode_i.h"
+#include "../testmode_i.h"
 
 #define ATH11K_FTM_SEGHDR_CURRENT_SEQ		GENMASK(3, 0)
 #define ATH11K_FTM_SEGHDR_TOTAL_SEGMENTS	GENMASK(7, 4)
 
-static const struct nla_policy ath11k_tm_policy[ATH11K_TM_ATTR_MAX + 1] = {
-	[ATH11K_TM_ATTR_CMD]		= { .type = NLA_U32 },
-	[ATH11K_TM_ATTR_DATA]		= { .type = NLA_BINARY,
-					    .len = ATH11K_TM_DATA_MAX_LEN },
-	[ATH11K_TM_ATTR_WMI_CMDID]	= { .type = NLA_U32 },
-	[ATH11K_TM_ATTR_VERSION_MAJOR]	= { .type = NLA_U32 },
-	[ATH11K_TM_ATTR_VERSION_MINOR]	= { .type = NLA_U32 },
-	[ATH11K_TM_ATTR_FWLOG]          = { .type = NLA_BINARY,
-					    .len = ATH11K_FWLOG_MAX_LEN },
+static const struct nla_policy ath11k_tm_policy[ATH_TM_ATTR_MAX + 1] = {
+	[ATH_TM_ATTR_CMD]		= { .type = NLA_U32 },
+	[ATH_TM_ATTR_DATA]		= { .type = NLA_BINARY,
+					    .len = ATH_TM_DATA_MAX_LEN },
+	[ATH_TM_ATTR_WMI_CMDID]		= { .type = NLA_U32 },
+	[ATH_TM_ATTR_VERSION_MAJOR]	= { .type = NLA_U32 },
+	[ATH_TM_ATTR_VERSION_MINOR]	= { .type = NLA_U32 },
+	[ATH_TM_ATTR_FWLOG]          	= { .type = NLA_BINARY,
+					    .len = ATH_FWLOG_MAX_LEN },
 };
 
 void ath11k_fwlog_write(struct ath11k_base *ab,  u8 *data, int len)
@@ -52,7 +52,7 @@ void ath11k_fwlog_write(struct ath11k_ba
 		return;
 	}
 
-	ret = nla_put(nl_skb, ATH11K_TM_ATTR_FWLOG, len, data);
+	ret = nla_put(nl_skb, ATH_TM_ATTR_FWLOG, len, data);
 	if (ret) {
 		ath11k_warn(ab,
 			    "failed to to put fwlog wmi event to nl: %d\n",
@@ -113,9 +113,9 @@ static void ath11k_tm_wmi_event_unsegmen
 		goto out;
 	}
 
-	if (nla_put_u32(nl_skb, ATH11K_TM_ATTR_CMD, ATH11K_TM_CMD_WMI) ||
-	    nla_put_u32(nl_skb, ATH11K_TM_ATTR_WMI_CMDID, cmd_id) ||
-	    nla_put(nl_skb, ATH11K_TM_ATTR_DATA, skb->len, skb->data)) {
+	if (nla_put_u32(nl_skb, ATH_TM_ATTR_CMD, ATH_TM_CMD_WMI) ||
+	    nla_put_u32(nl_skb, ATH_TM_ATTR_WMI_CMDID, cmd_id) ||
+	    nla_put(nl_skb, ATH_TM_ATTR_DATA, skb->len, skb->data)) {
 		ath11k_warn(ab, "failed to populate testmode unsegmented event\n");
 		kfree_skb(nl_skb);
 		goto out;
@@ -180,7 +180,7 @@ static int ath11k_tm_process_event(struc
 
 	data_pos = ab->testmode.data_pos;
 
-	if ((data_pos + datalen) > ATH11K_FTM_EVENT_MAX_BUF_LENGTH) {
+	if ((data_pos + datalen) > ATH_FTM_EVENT_MAX_BUF_LENGTH) {
 		ath11k_warn(ab, "Invalid ftm event length at %d: %d\n",
 			    data_pos, datalen);
 		ret = -EINVAL;
@@ -212,10 +212,10 @@ static int ath11k_tm_process_event(struc
 		goto out;
 	}
 
-	if (nla_put_u32(nl_skb, ATH11K_TM_ATTR_CMD,
-			ATH11K_TM_CMD_WMI_FTM) ||
-	    nla_put_u32(nl_skb, ATH11K_TM_ATTR_WMI_CMDID, cmd_id) ||
-	    nla_put(nl_skb, ATH11K_TM_ATTR_DATA, data_pos,
+	if (nla_put_u32(nl_skb, ATH_TM_ATTR_CMD,
+			ATH_TM_CMD_WMI_FTM) ||
+	    nla_put_u32(nl_skb, ATH_TM_ATTR_WMI_CMDID, cmd_id) ||
+	    nla_put(nl_skb, ATH_TM_ATTR_DATA, data_pos,
 		    &ab->testmode.eventdata[0])) {
 		ath11k_warn(ab, "failed to populate segmented testmode event");
 		kfree_skb(nl_skb);
@@ -275,23 +275,23 @@ static int ath11k_tm_cmd_get_version(str
 
 	ath11k_dbg(ar->ab, ATH11K_DBG_TESTMODE,
 		   "cmd get version_major %d version_minor %d\n",
-		   ATH11K_TESTMODE_VERSION_MAJOR,
-		   ATH11K_TESTMODE_VERSION_MINOR);
+		   ATH_TESTMODE_VERSION_MAJOR,
+		   ATH_TESTMODE_VERSION_MINOR);
 
 	skb = cfg80211_testmode_alloc_reply_skb(ar->hw->wiphy,
 						nla_total_size(sizeof(u32)));
 	if (!skb)
 		return -ENOMEM;
 
-	ret = nla_put_u32(skb, ATH11K_TM_ATTR_VERSION_MAJOR,
-			  ATH11K_TESTMODE_VERSION_MAJOR);
+	ret = nla_put_u32(skb, ATH_TM_ATTR_VERSION_MAJOR,
+			  ATH_TESTMODE_VERSION_MAJOR);
 	if (ret) {
 		kfree_skb(skb);
 		return ret;
 	}
 
-	ret = nla_put_u32(skb, ATH11K_TM_ATTR_VERSION_MINOR,
-			  ATH11K_TESTMODE_VERSION_MINOR);
+	ret = nla_put_u32(skb, ATH_TM_ATTR_VERSION_MINOR,
+			  ATH_TESTMODE_VERSION_MINOR);
 	if (ret) {
 		kfree_skb(skb);
 		return ret;
@@ -317,7 +317,7 @@ static int ath11k_tm_cmd_testmode_start(
 		goto err;
 	}
 
-	ar->ab->testmode.eventdata = kzalloc(ATH11K_FTM_EVENT_MAX_BUF_LENGTH,
+	ar->ab->testmode.eventdata = kzalloc(ATH_FTM_EVENT_MAX_BUF_LENGTH,
 					     GFP_KERNEL);
 	if (!ar->ab->testmode.eventdata) {
 		ret = -ENOMEM;
@@ -350,25 +350,25 @@ static int ath11k_tm_cmd_wmi(struct ath1
 
 	mutex_lock(&ar->conf_mutex);
 
-	if (!tb[ATH11K_TM_ATTR_DATA]) {
+	if (!tb[ATH_TM_ATTR_DATA]) {
 		ret = -EINVAL;
 		goto out;
 	}
 
-	if (!tb[ATH11K_TM_ATTR_WMI_CMDID]) {
+	if (!tb[ATH_TM_ATTR_WMI_CMDID]) {
 		ret = -EINVAL;
 		goto out;
 	}
 
-	buf = nla_data(tb[ATH11K_TM_ATTR_DATA]);
-	buf_len = nla_len(tb[ATH11K_TM_ATTR_DATA]);
+	buf = nla_data(tb[ATH_TM_ATTR_DATA]);
+	buf_len = nla_len(tb[ATH_TM_ATTR_DATA]);
 	if (!buf_len) {
 		ath11k_warn(ar->ab, "No data present in testmode wmi command\n");
 		ret = -EINVAL;
 		goto out;
 	}
 
-	cmd_id = nla_get_u32(tb[ATH11K_TM_ATTR_WMI_CMDID]);
+	cmd_id = nla_get_u32(tb[ATH_TM_ATTR_WMI_CMDID]);
 
 	/* Make sure that the buffer length is long enough to
 	 * hold TLV and pdev/vdev id.
@@ -449,13 +449,13 @@ static int ath11k_tm_cmd_wmi_ftm(struct
 		goto out;
 	}
 
-	if (!tb[ATH11K_TM_ATTR_DATA]) {
+	if (!tb[ATH_TM_ATTR_DATA]) {
 		ret = -EINVAL;
 		goto out;
 	}
 
-	buf = nla_data(tb[ATH11K_TM_ATTR_DATA]);
-	buf_len = nla_len(tb[ATH11K_TM_ATTR_DATA]);
+	buf = nla_data(tb[ATH_TM_ATTR_DATA]);
+	buf_len = nla_len(tb[ATH_TM_ATTR_DATA]);
 	cmd_id = WMI_PDEV_UTF_CMDID;
 
 	ath11k_dbg(ar->ab, ATH11K_DBG_TESTMODE,
@@ -516,26 +516,26 @@ int ath11k_tm_cmd(struct ieee80211_hw *h
 		  u8 link_id, void *data, int len)
 {
 	struct ath11k *ar = hw->priv;
-	struct nlattr *tb[ATH11K_TM_ATTR_MAX + 1];
+	struct nlattr *tb[ATH_TM_ATTR_MAX + 1];
 	int ret;
 
-	ret = nla_parse(tb, ATH11K_TM_ATTR_MAX, data, len, ath11k_tm_policy,
+	ret = nla_parse(tb, ATH_TM_ATTR_MAX, data, len, ath11k_tm_policy,
 			NULL);
 
 	if (ret)
 		return ret;
 
-	if (!tb[ATH11K_TM_ATTR_CMD])
+	if (!tb[ATH_TM_ATTR_CMD])
 		return -EINVAL;
 
-	switch (nla_get_u32(tb[ATH11K_TM_ATTR_CMD])) {
-	case ATH11K_TM_CMD_GET_VERSION:
+	switch (nla_get_u32(tb[ATH_TM_ATTR_CMD])) {
+	case ATH_TM_CMD_GET_VERSION:
 		return ath11k_tm_cmd_get_version(ar, tb);
-	case ATH11K_TM_CMD_WMI:
+	case ATH_TM_CMD_WMI:
 		return ath11k_tm_cmd_wmi(ar, tb, vif);
-	case ATH11K_TM_CMD_TESTMODE_START:
+	case ATH_TM_CMD_TESTMODE_START:
 		return ath11k_tm_cmd_testmode_start(ar, tb);
-	case ATH11K_TM_CMD_WMI_FTM:
+	case ATH_TM_CMD_WMI_FTM:
 		return ath11k_tm_cmd_wmi_ftm(ar, tb);
 	default:
 		return -EOPNOTSUPP;
--- a/drivers/net/wireless/ath/ath11k/testmode_i.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause-Clear */
-/*
- * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.
- * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
- */
-
-/* "API" level of the ath11k testmode interface. Bump it after every
- * incompatible interface change.
- */
-#define ATH11K_TESTMODE_VERSION_MAJOR 1
-
-/* Bump this after every _compatible_ interface change, for example
- * addition of a new command or an attribute.
- */
-#define ATH11K_TESTMODE_VERSION_MINOR 1
-
-#define ATH11K_TM_DATA_MAX_LEN		5000
-#define ATH11K_FTM_EVENT_MAX_BUF_LENGTH 2048
-
-#define ATH11K_FWLOG_MAX_LEN		2048
-
-enum ath11k_tm_attr {
-	__ATH11K_TM_ATTR_INVALID		= 0,
-	ATH11K_TM_ATTR_CMD			= 1,
-	ATH11K_TM_ATTR_DATA			= 2,
-	ATH11K_TM_ATTR_WMI_CMDID		= 3,
-	ATH11K_TM_ATTR_VERSION_MAJOR		= 4,
-	ATH11K_TM_ATTR_VERSION_MINOR		= 5,
-	ATH11K_TM_ATTR_WMI_OP_VERSION		= 6,
-	ATH11K_TM_ATTR_FWLOG			= 7,
-
-	/* keep last */
-	__ATH11K_TM_ATTR_AFTER_LAST,
-	ATH11K_TM_ATTR_MAX		= __ATH11K_TM_ATTR_AFTER_LAST - 1,
-};
-
-/* All ath11k testmode interface commands specified in
- * ATH11K_TM_ATTR_CMD
- */
-enum ath11k_tm_cmd {
-	/* Returns the supported ath11k testmode interface version in
-	 * ATH11K_TM_ATTR_VERSION. Always guaranteed to work. User space
-	 * uses this to verify it's using the correct version of the
-	 * testmode interface
-	 */
-	ATH11K_TM_CMD_GET_VERSION = 0,
-
-	/* The command used to transmit a WMI command to the firmware and
-	 * the event to receive WMI events from the firmware. Without
-	 * struct wmi_cmd_hdr header, only the WMI payload. Command id is
-	 * provided with ATH11K_TM_ATTR_WMI_CMDID and payload in
-	 * ATH11K_TM_ATTR_DATA.
-	 */
-	ATH11K_TM_CMD_WMI = 1,
-
-	/* Boots the UTF firmware, the netdev interface must be down at the
-	 * time.
-	 */
-	ATH11K_TM_CMD_TESTMODE_START = 2,
-
-	/* The command used to transmit a FTM WMI command to the firmware
-	 * and the event to receive WMI events from the firmware. The data
-	 * received only contain the payload, need to add the tlv header
-	 * and send the cmd to firmware with command id WMI_PDEV_UTF_CMDID.
-	 * The data payload size could be large and the driver needs to
-	 * send segmented data to firmware.
-	 */
-	ATH11K_TM_CMD_WMI_FTM = 3,
-};
--- a/drivers/net/wireless/ath/ath12k/testmode.c
+++ b/drivers/net/wireless/ath/ath12k/testmode.c
@@ -11,22 +11,22 @@
 #include "hw.h"
 #include "core.h"
 #include "hif.h"
-#include "testmode_i.h"
+#include "../testmode_i.h"
 
 #define ATH12K_FTM_SEGHDR_CURRENT_SEQ		GENMASK(3, 0)
 #define ATH12K_FTM_SEGHDR_TOTAL_SEGMENTS	GENMASK(7, 4)
 
-static const struct nla_policy ath12k_tm_policy[ATH12K_TM_ATTR_MAX + 1] = {
-	[ATH12K_TM_ATTR_CMD]		= { .type = NLA_U32 },
-	[ATH12K_TM_ATTR_DATA]		= { .type = NLA_BINARY,
-					    .len = ATH12K_TM_DATA_MAX_LEN },
-	[ATH12K_TM_ATTR_WMI_CMDID]	= { .type = NLA_U32 },
-	[ATH12K_TM_ATTR_VERSION_MAJOR]	= { .type = NLA_U32 },
-	[ATH12K_TM_ATTR_VERSION_MINOR]	= { .type = NLA_U32 },
-	[ATH12K_TM_ATTR_FWLOG]		= { .type = NLA_BINARY,
+static const struct nla_policy ath12k_tm_policy[ATH_TM_ATTR_MAX + 1] = {
+	[ATH_TM_ATTR_CMD]		= { .type = NLA_U32 },
+	[ATH_TM_ATTR_DATA]		= { .type = NLA_BINARY,
+					    .len = ATH_TM_DATA_MAX_LEN },
+	[ATH_TM_ATTR_WMI_CMDID]		= { .type = NLA_U32 },
+	[ATH_TM_ATTR_VERSION_MAJOR]	= { .type = NLA_U32 },
+	[ATH_TM_ATTR_VERSION_MINOR]	= { .type = NLA_U32 },
+	[ATH_TM_ATTR_FWLOG]		= { .type = NLA_BINARY,
 					    .len = 2048 },
-	[ATH12K_TM_ATTR_LINK_IDX]		= { .type = NLA_U8 },
-	[ATH12K_TM_ATTR_DUAL_MAC]               = { .type = NLA_U8 },
+	[ATH_TM_ATTR_LINK_IDX]		= { .type = NLA_U8 },
+	[ATH_TM_ATTR_DUAL_MAC]		= { .type = NLA_U8 },
 };
 
 void ath12k_fwlog_write(struct ath12k_base *ab, u8 *data, int len)
@@ -54,7 +54,7 @@ void ath12k_fwlog_write(struct ath12k_ba
 		return;
 	}
 
-	ret = nla_put(nl_skb, ATH12K_TM_ATTR_FWLOG, len, data);
+	ret = nla_put(nl_skb, ATH_TM_ATTR_FWLOG, len, data);
 	if (ret) {
 		ath12k_warn(ab, "failed to put fwlog wmi event to nl: %d\n", ret);
 		kfree_skb(nl_skb);
@@ -62,7 +62,7 @@ void ath12k_fwlog_write(struct ath12k_ba
 	}
 
 	if (ab->ag->mlo_capable) {
-		ret = nla_put_u8(nl_skb, ATH12K_TM_ATTR_LINK_IDX, ar->link_idx);
+		ret = nla_put_u8(nl_skb, ATH_TM_ATTR_LINK_IDX, ar->link_idx);
 		if (ret) {
 			ath12k_warn(ab, "failed to put link idx wmi event to nl: %d\n", ret);
 			kfree_skb(nl_skb);
@@ -71,7 +71,7 @@ void ath12k_fwlog_write(struct ath12k_ba
 	}
 
 	if (ab->num_radios == 2)
-		ret = nla_put_u8(nl_skb, ATH12K_TM_ATTR_DUAL_MAC, ab->num_radios);
+		ret = nla_put_u8(nl_skb, ATH_TM_ATTR_DUAL_MAC, ab->num_radios);
 
 	if (ret) {
 		ath12k_warn(ab, "failed to put dual mac wmi event to nl: %d\n", ret);
@@ -133,9 +133,9 @@ void ath12k_tm_wmi_event_unsegmented(str
 			    "failed to allocate skb for testmode wmi event\n");
 		goto out;
 	}
-	if (nla_put_u32(nl_skb, ATH12K_TM_ATTR_CMD, ATH12K_TM_CMD_WMI) ||
-	    nla_put_u32(nl_skb, ATH12K_TM_ATTR_WMI_CMDID, cmd_id) ||
-	    nla_put(nl_skb, ATH12K_TM_ATTR_DATA, skb->len, skb->data)) {
+	if (nla_put_u32(nl_skb, ATH_TM_ATTR_CMD, ATH_TM_CMD_WMI) ||
+	    nla_put_u32(nl_skb, ATH_TM_ATTR_WMI_CMDID, cmd_id) ||
+	    nla_put(nl_skb, ATH_TM_ATTR_DATA, skb->len, skb->data)) {
 		ath12k_warn(ab, "failed to populate testmode unsegmented event\n");
 		kfree_skb(nl_skb);
 		goto out;
@@ -200,7 +200,7 @@ int ath12k_tm_process_event(struct ath12
 
 	data_pos = ab->ftm_event_obj.data_pos;
 
-	if ((data_pos + datalen) > ATH12K_FTM_EVENT_MAX_BUF_LENGTH) {
+	if ((data_pos + datalen) > ATH_FTM_EVENT_MAX_BUF_LENGTH) {
 		ath12k_warn(ab,
 			     "Invalid event length date_pos[%d] datalen[%d]\n",
 			      data_pos, datalen);
@@ -231,10 +231,10 @@ int ath12k_tm_process_event(struct ath12
 		goto out;
 	}
 
-	if (nla_put_u32(nl_skb, ATH12K_TM_ATTR_CMD,
-			ATH12K_TM_CMD_WMI_FTM) ||
-	    nla_put_u32(nl_skb, ATH12K_TM_ATTR_WMI_CMDID, cmd_id) ||
-	    nla_put(nl_skb, ATH12K_TM_ATTR_DATA, data_pos,
+	if (nla_put_u32(nl_skb, ATH_TM_ATTR_CMD,
+			ATH_TM_CMD_WMI_FTM) ||
+	    nla_put_u32(nl_skb, ATH_TM_ATTR_WMI_CMDID, cmd_id) ||
+	    nla_put(nl_skb, ATH_TM_ATTR_DATA, data_pos,
 		    &ab->ftm_event_obj.eventdata[0])) {
 		ath12k_warn(ab, "failed to populate testmode event");
 		kfree_skb(nl_skb);
@@ -254,16 +254,16 @@ static int ath12k_tm_cmd_get_version(str
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
 		   "testmode cmd get version_major %d version_minor %d\n",
-		   ATH12K_TESTMODE_VERSION_MAJOR,
-		   ATH12K_TESTMODE_VERSION_MINOR);
+		   ATH_TESTMODE_VERSION_MAJOR,
+		   ATH_TESTMODE_VERSION_MINOR);
 
 	skb = cfg80211_testmode_alloc_reply_skb(ar->ah->hw->wiphy,
 						nla_total_size(sizeof(u32)));
 	if (!skb)
 		return -ENOMEM;
 
-	ret = nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MAJOR, ATH12K_TESTMODE_VERSION_MAJOR) ||
-	      nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MINOR, ATH12K_TESTMODE_VERSION_MINOR);
+	ret = nla_put_u32(skb, ATH_TM_ATTR_VERSION_MAJOR, ATH_TESTMODE_VERSION_MAJOR) ||
+	      nla_put_u32(skb, ATH_TM_ATTR_VERSION_MINOR, ATH_TESTMODE_VERSION_MINOR);
 	if (ret) {
 		kfree_skb(skb);
 		return ret;
@@ -290,7 +290,7 @@ static int ath12k_tm_cmd_testmode_start(
 	}
 
 	ar->ab->ftm_event_obj.eventdata =
-		kzalloc(ATH12K_FTM_EVENT_MAX_BUF_LENGTH, GFP_KERNEL);
+		kzalloc(ATH_FTM_EVENT_MAX_BUF_LENGTH, GFP_KERNEL);
 	if (!ar->ab->ftm_event_obj.eventdata) {
 		ret = -ENOMEM;
 		goto err;
@@ -321,24 +321,24 @@ static int ath12k_tm_cmd_wmi(struct ath1
 
 	mutex_lock(&ar->conf_mutex);
 
-	if (!tb[ATH12K_TM_ATTR_DATA]) {
+	if (!tb[ATH_TM_ATTR_DATA]) {
 		ret = -EINVAL;
 		goto out;
 	}
 
-	if (!tb[ATH12K_TM_ATTR_WMI_CMDID]) {
+	if (!tb[ATH_TM_ATTR_WMI_CMDID]) {
 		ret = -EINVAL;
 		goto out;
 	}
 
-	buf = nla_data(tb[ATH12K_TM_ATTR_DATA]);
-	buf_len = nla_len(tb[ATH12K_TM_ATTR_DATA]);
+	buf = nla_data(tb[ATH_TM_ATTR_DATA]);
+	buf_len = nla_len(tb[ATH_TM_ATTR_DATA]);
 	if (!buf_len) {
 		ath12k_warn(ar->ab, "No data present in testmode command\n");
 		ret = -EINVAL;
 		goto out;
 	}
-	cmd_id = nla_get_u32(tb[ATH12K_TM_ATTR_WMI_CMDID]);
+	cmd_id = nla_get_u32(tb[ATH_TM_ATTR_WMI_CMDID]);
 
 	ptr = (u32 *)buf;
 	tag = FIELD_GET(WMI_TLV_TAG, *ptr);
@@ -419,13 +419,13 @@ static int ath12k_tm_cmd_process_ftm(str
 		goto out;
 	}
 
-	if (!tb[ATH12K_TM_ATTR_DATA]) {
+	if (!tb[ATH_TM_ATTR_DATA]) {
 		ret = -EINVAL;
 		goto out;
 	}
 
-	buf = nla_data(tb[ATH12K_TM_ATTR_DATA]);
-	buf_len = nla_len(tb[ATH12K_TM_ATTR_DATA]);
+	buf = nla_data(tb[ATH_TM_ATTR_DATA]);
+	buf_len = nla_len(tb[ATH_TM_ATTR_DATA]);
 	cmd_id = WMI_PDEV_UTF_CMDID;
 	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
 		"testmode cmd wmi cmd_id %d buf %pK buf_len %d\n",
@@ -484,25 +484,25 @@ int ath12k_tm_cmd(struct ieee80211_hw *h
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar = NULL;
 	struct ath12k_base *ab;
-	struct nlattr *tb[ATH12K_TM_ATTR_MAX + 1];
-	enum ath12k_tm_cmd cmd_type;
+	struct nlattr *tb[ATH_TM_ATTR_MAX + 1];
+	enum ath_tm_cmd cmd_type;
 	int ret = 0;
 
 
-	ret = nla_parse(tb, ATH12K_TM_ATTR_MAX, data, len, ath12k_tm_policy,
+	ret = nla_parse(tb, ATH_TM_ATTR_MAX, data, len, ath12k_tm_policy,
 			NULL);
 	if (ret)
 		return ret;
 
-	if (!tb[ATH12K_TM_ATTR_CMD])
+	if (!tb[ATH_TM_ATTR_CMD])
 		return -EINVAL;
 
-	cmd_type = nla_get_u32(tb[ATH12K_TM_ATTR_CMD]);
+	cmd_type = nla_get_u32(tb[ATH_TM_ATTR_CMD]);
 	mutex_lock(&ah->conf_mutex);
 
-	if (vif == NULL && (cmd_type == ATH12K_TM_CMD_WMI_FTM ||
-	    cmd_type == ATH12K_TM_CMD_TESTMODE_START ||
-	    cmd_type == ATH12K_TM_CMD_WMI)) {
+	if (vif == NULL && (cmd_type == ATH_TM_CMD_WMI_FTM ||
+	    cmd_type == ATH_TM_CMD_TESTMODE_START ||
+	    cmd_type == ATH_TM_CMD_WMI)) {
 		if (ah->num_radio)
 			ar = ah->radio;
 	} else {
@@ -526,17 +526,15 @@ int ath12k_tm_cmd(struct ieee80211_hw *h
 	mutex_unlock(&ah->conf_mutex);
 
 	switch (cmd_type) {
-	case ATH12K_TM_CMD_WMI:
+	case ATH_TM_CMD_WMI:
 		return ath12k_tm_cmd_wmi(ar, tb, vif, link_id);
-	case ATH12K_TM_CMD_TESTMODE_START:
+	case ATH_TM_CMD_TESTMODE_START:
 		return ath12k_tm_cmd_testmode_start(ar, tb);
-	case ATH12K_TM_CMD_GET_VERSION:
+	case ATH_TM_CMD_GET_VERSION:
 		return ath12k_tm_cmd_get_version(ar, tb);
-	case ATH12K_TM_CMD_WMI_FTM:
+	case ATH_TM_CMD_WMI_FTM:
 		set_bit(ATH12K_FLAG_FTM_SEGMENTED, &ab->dev_flags);
 		return ath12k_tm_cmd_process_ftm(ar, tb);
-	case ATH12K_TM_CMD_TESTMODE_STOP:
-		return 0;
 	default:
 		return -EOPNOTSUPP;
 	}
--- a/drivers/net/wireless/ath/ath12k/testmode_i.h
+++ /dev/null
@@ -1,68 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause-Clear */
-/*
- * Copyright (c) 2018-2021 The Linux Foundation. All rights reserved.
- * Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
- */
-
-/* "API" level of the ath12k testmode interface. Bump it after every
- * incompatible interface change.
- */
-#define ATH12K_TESTMODE_VERSION_MAJOR 1
-
-/* Bump this after every _compatible_ interface change, for example
- * addition of a new command or an attribute.
- */
-#define ATH12K_TESTMODE_VERSION_MINOR 0
-
-#define ATH12K_TM_DATA_MAX_LEN		5000
-#define ATH12K_FTM_EVENT_MAX_BUF_LENGTH 2048
-
-enum ath12k_tm_attr {
-	__ATH12K_TM_ATTR_INVALID		= 0,
-	ATH12K_TM_ATTR_CMD			= 1,
-	ATH12K_TM_ATTR_DATA			= 2,
-	ATH12K_TM_ATTR_WMI_CMDID		= 3,
-	ATH12K_TM_ATTR_VERSION_MAJOR		= 4,
-	ATH12K_TM_ATTR_VERSION_MINOR		= 5,
-	ATH12K_TM_ATTR_WMI_OP_VERSION		= 6,
-	ATH12K_TM_ATTR_FWLOG                    = 7,
-	ATH12K_TM_ATTR_LINK_IDX			= 8,
-	ATH12K_TM_ATTR_DUAL_MAC			= 9,
-
-	/* keep last */
-	__ATH12K_TM_ATTR_AFTER_LAST,
-	ATH12K_TM_ATTR_MAX		= __ATH12K_TM_ATTR_AFTER_LAST - 1,
-};
-
-/* All ath12k testmode interface commands specified in
- * ATH12K_TM_ATTR_CMD
- */
-enum ath12k_tm_cmd {
-	/* Returns the supported ath12k testmode interface version in
-	 * ATH12K_TM_ATTR_VERSION. Always guaranteed to work. User space
-	 * uses this to verify it's using the correct version of the
-	 * testmode interface
-	 */
-	ATH12K_TM_CMD_GET_VERSION = 0,
-
-	/* Boots the UTF firmware, the netdev interface must be down at thetime. */
-	ATH12K_TM_CMD_TESTMODE_START = 1,
-
-	/* Shuts down the UTF firmware and puts the driver back into OFFstate.*/
-	ATH12K_TM_CMD_TESTMODE_STOP = 2,
-
-	/* The command used to transmit a WMI command to the firmware and
-	 * the event to receive WMI events from the firmware. Without
-	 * struct wmi_cmd_hdr header, only the WMI payload. Command id is
-	 * provided with ATH12K_TM_ATTR_WMI_CMDID and payload in
-	 * ATH12K_TM_ATTR_DATA.
-	 */
-	ATH12K_TM_CMD_WMI = 3,
-
-	/* The command used to transmit a FTM WMI command to the firmware
-	* and the event to receive WMI events from the firmware.The data
-	* received  only contain the payload, Need to add the tlv
-	* header and send the cmd to fw with commandid WMI_PDEV_UTF_CMDID.
-	*/
-	ATH12K_TM_CMD_WMI_FTM = 4,
-};
--- /dev/null
+++ b/drivers/net/wireless/ath/testmode_i.h
@@ -0,0 +1,71 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2018-2021 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021-2024 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+/* "API" level of the ath testmode interface. Bump it after every
+ * incompatible interface change.
+ */
+#define ATH_TESTMODE_VERSION_MAJOR 1
+
+/* Bump this after every _compatible_ interface change, for example
+ * addition of a new command or an attribute.
+ */
+#define ATH_TESTMODE_VERSION_MINOR 0
+
+#define ATH_TM_DATA_MAX_LEN		5000
+#define ATH_FTM_EVENT_MAX_BUF_LENGTH 2048
+
+#define ATH_FWLOG_MAX_LEN           2048
+
+enum ath_tm_attr {
+	__ATH_TM_ATTR_INVALID		= 0,
+	ATH_TM_ATTR_CMD			= 1,
+	ATH_TM_ATTR_DATA		= 2,
+	ATH_TM_ATTR_WMI_CMDID		= 3,
+	ATH_TM_ATTR_VERSION_MAJOR	= 4,
+	ATH_TM_ATTR_VERSION_MINOR	= 5,
+	ATH_TM_ATTR_WMI_OP_VERSION	= 6,
+	ATH_TM_ATTR_FWLOG               = 7,
+	ATH_TM_ATTR_LINK_IDX		= 8,
+	ATH_TM_ATTR_DUAL_MAC		= 9,
+
+	/* keep last */
+	__ATH_TM_ATTR_AFTER_LAST,
+	ATH_TM_ATTR_MAX		= __ATH_TM_ATTR_AFTER_LAST - 1,
+};
+
+/* All ath testmode interface commands specified in
+ * ATH_TM_ATTR_CMD
+ */
+enum ath_tm_cmd {
+	/* Returns the supported ath testmode interface version in
+	 * ATH_TM_ATTR_VERSION. Always guaranteed to work. User space
+	 * uses this to verify it's using the correct version of the
+	 * testmode interface
+	 */
+	ATH_TM_CMD_GET_VERSION = 0,
+
+	/* The command used to transmit a WMI command to the firmware and
+	 * the event to receive WMI events from the firmware. Without
+	 * struct wmi_cmd_hdr header, only the WMI payload. Command id is
+	 * provided with ATH_TM_ATTR_WMI_CMDID and payload in
+	 * ATH_TM_ATTR_DATA.
+	 */
+	ATH_TM_CMD_WMI = 1,
+
+	/* Boots the UTF firmware, the netdev interface must be down at the
+	 * time.
+	 */
+	ATH_TM_CMD_TESTMODE_START = 2,
+
+	/* The command used to transmit a FTM WMI command to the firmware
+	 * and the event to receive WMI events from the firmware. The data
+	 * received only contain the payload, need to add the tlv header
+	 * and send the cmd to firmware with command id WMI_PDEV_UTF_CMDID.
+	 * The data payload size could be large and the driver needs to
+	 * send segmented data to firmware.
+	 */
+	ATH_TM_CMD_WMI_FTM = 3,
+};
