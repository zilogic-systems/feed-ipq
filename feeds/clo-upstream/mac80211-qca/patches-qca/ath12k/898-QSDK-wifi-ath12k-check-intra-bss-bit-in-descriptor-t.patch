From cd7d5ffc48b6d56f0ace56b4095b8c98b6d248a3 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Thu, 18 Apr 2024 17:44:35 +0530
Subject: [PATCH] QSDK: wifi: ath12k: check intra-bss bit in descriptor to
 avoid peer lookup

Current implementation of the fast rx path involves performing a peer
lookup for each descriptor to determine whether an MSDU belongs to
our own BSS. This process consumes excessive CPU cycles.

Optimise the fast rx path by making use of the intra-BSS bit set in
the MSDU end descriptor for own BSS packets. This obviates the need
for peer lookups, resulting in a reduction in CPU overhead. Additionally,
modify the word mask of the MSDU end subscription to accommodate this
change in the HAL RX descriptor. This improves throughput by 30-50mbps
in IPQ5322 platform.

Patch-depdendency: 653-002-ath12k-Allow-fast-rx-by-bypassing-stats-update.patch

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 9 +--------
 drivers/net/wireless/ath/ath12k/dp_rx.h   | 1 +
 drivers/net/wireless/ath/ath12k/hal.c     | 4 +++-
 drivers/net/wireless/ath/ath12k/rx_desc.h | 2 ++
 4 files changed, 7 insertions(+), 9 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2844,7 +2844,6 @@ static bool ath12k_dp_rx_check_fast_rx(s
 				       struct ath12k_dp_rx_info *rx_info)
 {
 	struct ethhdr *ehdr;
-	struct ath12k_peer *f_peer;
 	struct ath12k_skb_rxcb *rxcb;
 	u8 decap;
 	bool ip_is_valid;
@@ -2880,14 +2879,8 @@ static bool ath12k_dp_rx_check_fast_rx(s
 	if (is_multicast_ether_addr(ehdr->h_dest))
 	        return false;
 
-	/* TODO: make use of hw assisted intra-bss bit in msdu_end
-	 * to skip peer lookup and forward frames directly.
-	 */
-
 	/* check if the msdu needs to be bridged to our connected peer */
-	f_peer = ath12k_peer_find_by_addr(ar->ab, ehdr->h_dest);
-
-	if (f_peer && f_peer != peer)
+	if (unlikely(rx_info->is_intra_bss))
 		return false;
 
 	/* allow direct rx */
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -146,6 +146,7 @@ struct ath12k_dp_rx_info {
 	bool msdu_done;
 	bool is_first_msdu;
 	bool is_last_msdu;
+	bool is_intra_bss;
 	struct ieee80211_rx_status *rx_status;
 };
 
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -543,7 +543,7 @@ static u8 ath12k_hal_qcn9274_rx_desc_get
 }
 
 #define MPDU_START_WMASK 0xFFC
-#define MSDU_END_WMASK 0x13443
+#define MSDU_END_WMASK 0x13643
 
 static inline u16 ath12k_hal_rx_mpdu_start_wmask_get(void)
 {
@@ -835,6 +835,8 @@ static void ath12k_hw_qcn9274_get_rx_des
 					 RX_MPDU_START_SW_PEER_ID_PEER);
 	rx_info->tid = le16_get_bits(desc->u.qcn9274.msdu_end.info5,
 				     RX_MSDU_END_INFO5_TID);
+	rx_info->is_intra_bss = !!le32_get_bits(desc->u.qcn9274.msdu_end.info9,
+						RX_MSDU_END_INFO9_INTRA_BSS);
 }
 
 const struct hal_ops hal_qcn9274_ops = {
--- a/drivers/net/wireless/ath/ath12k/rx_desc.h
+++ b/drivers/net/wireless/ath/ath12k/rx_desc.h
@@ -777,6 +777,8 @@ struct rx_msdu_end_qcn9274 {
 	__le16 info5;
 	__le16 sa_idx;
 	__le16 da_idx_or_sw_peer_id;
+	__le32 info8;
+	__le32 info9;
 	__le32 info10;
 	__le32 info11;
 	__le32 info12;
