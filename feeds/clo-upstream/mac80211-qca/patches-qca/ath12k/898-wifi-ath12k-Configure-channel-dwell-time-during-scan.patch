From 21f1eabc3c92fb1643c8a89f85ae255babfa6a0d Mon Sep 17 00:00:00 2001
From: Rohit Nair <quic_rohitnai@quicinc.com>
Date: Fri, 19 Apr 2024 12:08:59 +0530
Subject: [PATCH] wifi: ath12k: Configure channel dwell time during scan

Configure channel dwell time from duration of the scan request
received from mac80211 when the duration is non-zero. When the
scan request does not have a duration then use the max scan time
which is initialized to a default value of 20000ms.

Corresponding flag NL80211_EXT_FEATURE_SET_SCAN_DWELL is
advertised.

Signed-off-by: Rohit Nair <quic_rohitnai@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 29 +++++++++++++++++++++++----
 1 file changed, 25 insertions(+), 4 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index aa06ca3..1e16dd2 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -267,6 +267,8 @@ const struct htt_rx_ring_tlv_filter ath12k_mac_mon_status_filter_default = {
 #define ath12k_a_rates_size (ARRAY_SIZE(ath12k_legacy_rates) - 4)
 
 #define ATH12K_MAC_SCAN_TIMEOUT_MSECS 200 /* in msecs */
+/* Overhead due to the processing of channel switch events from FW */
+#define ATH12K_SCAN_CHANNEL_SWITCH_WMI_EVT_OVERHEAD	10 /* in msecs */
 
 static const u32 ath12k_smps_map[] = {
 	[WLAN_HT_CAP_SM_PS_STATIC] = WMI_PEER_SMPS_STATIC,
@@ -5623,8 +5625,8 @@ static int ath12k_mac_op_hw_scan(struct ieee80211_hw *hw,
 	struct ath12k_wmi_scan_req_arg arg = {};
 	int ret;
 	int i, link_id;
-    bool create = true;
-
+	bool create = true;
+	u32 scan_timeout;
 	mutex_lock(&ah->conf_mutex);
 
 	/* Since the targeted scan device could depend on the frequency
@@ -5756,6 +5758,23 @@ static int ath12k_mac_op_hw_scan(struct ieee80211_hw *hw,
 		for (i = 0; i < arg.num_chan; i++)
 			arg.chan_list[i] = req->channels[i]->center_freq;
 	}
+	/* if duration is set, default dwell times will be overwritten */
+	if (req->duration) {
+		arg.dwell_time_active = req->duration;
+		arg.dwell_time_active_2g = req->duration;
+		arg.dwell_time_active_6g = req->duration;
+		arg.dwell_time_passive = req->duration;
+		arg.dwell_time_passive_6g = req->duration;
+		arg.burst_duration = req->duration;
+		scan_timeout = min_t(u32, arg.max_rest_time *
+				    (arg.num_chan - 1) + (req->duration +
+				    ATH12K_SCAN_CHANNEL_SWITCH_WMI_EVT_OVERHEAD) *
+				    arg.num_chan, arg.max_scan_time);
+	} else {
+		scan_timeout = arg.max_scan_time;
+	}
+	/* Add a margin to account for event/command processing */
+	scan_timeout = scan_timeout + ATH12K_MAC_SCAN_TIMEOUT_MSECS;
 
 	ret = ath12k_start_scan(ar, &arg);
 	if (ret) {
@@ -5775,8 +5794,7 @@ static int ath12k_mac_op_hw_scan(struct ieee80211_hw *hw,
 
 	/* Add a margin to account for event/command processing */
 	ieee80211_queue_delayed_work(ar->ah->hw, &ar->scan.timeout,
-				     msecs_to_jiffies(arg.max_scan_time +
-						      ATH12K_MAC_SCAN_TIMEOUT_MSECS));
+				     msecs_to_jiffies(scan_timeout));
 
 exit:
 	kfree(arg.chan_list);
@@ -16842,6 +16860,9 @@ static int __ath12k_mac_register(struct ath12k *ar)
 				      NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP);
 	}
 
+	wiphy_ext_feature_set(hw->wiphy,
+			      NL80211_EXT_FEATURE_SET_SCAN_DWELL);
+
 	if (ar->pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP) {
 		if (test_bit(ar->cfg_rx_chainmask, &cap->adfs_chain_mask)) {
 			wiphy_ext_feature_set(hw->wiphy,
-- 
2.34.1

