From e00a4566543eec43696461f5489891872b729805 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Date: Wed, 27 Mar 2024 15:56:08 +0530
Subject: [PATCH] ath12k: Add support for WDS offload enable

Below changes done to enable the WDS offload support for
ethernet offload case

* Avoid disabling hardware WDS Learning support
* Set WMI_VDEV_PARAM_AP_ENABLE_NAWDS param for the vdev
  whenver 4addr station is connected. This param needs to be
  set for 4addr multicast traffic support.
* Set peer based htt meta data flags for the 4addr multicast
  traffic.

Patch-dependency: 641-0001-ath12k-fix-4-addr-tx-failure-for-AP-and-STA-modes.patch
                  641-0002-ath12k-handle-4addr-NULL-EAPOL-frame-from-wbm-err-path.patch

Signed-off-by: Sarika Sharma <quic_sarishar@quicinc.com>
Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 .built                                  |  0
 drivers/net/wireless/ath/ath12k/dp.h    |  1 +
 drivers/net/wireless/ath/ath12k/dp_tx.c | 44 ++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/mac.c   | 12 +++++++
 drivers/net/wireless/ath/ath12k/wmi.c   |  4 ++-
 5 files changed, 56 insertions(+), 5 deletions(-)
 delete mode 100644 .built

--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -522,6 +522,9 @@ struct ath12k_dp {
 
 #define HTT_TX_WBM_COMP_STATUS_OFFSET 8
 
+/* Peer based meta data flag */
+#define HTT_TCL_META_DATA_TYPE_PEER_BASED		0
+
 /* Global sequence number */
 #define HTT_TCL_META_DATA_TYPE_GLOBAL_SEQ_NUM		3
 #define HTT_TCL_META_DATA_GLOBAL_SEQ_HOST_INSPECTED	BIT(2)
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -420,6 +420,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	struct ath12k_base *ab = ar->ab;
 	struct ath12k_hw_group *ag = ab->ag;
 	struct ath12k_dp *dp = &ab->dp;
+	struct ath12k_link_sta *arsta;
 	struct ath12k_peer *peer;
 	struct hal_tx_info ti = {0};
 	struct ath12k_tx_desc_info *tx_desc;
@@ -434,12 +435,15 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	struct ieee80211_hdr *hdr = (void *)skb->data;
 	struct dp_tx_ring *tx_ring;
 	struct hal_tcl_data_cmd *tcl_cmd;
+	struct ethhdr *eth = NULL;
 	u8 hal_ring_id;
 	int ret;
 	u16 peer_id;
 	bool msdu_ext_desc = false;
-	bool is_diff_encap = false, is_qos_null = false;
+	bool is_diff_encap = false, is_null = false;
+	bool skip_meta_data_flag = false;
 	bool add_htt_metadata = false;
+	u32 info4 = arvif->desc.info4;;
 
 	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)) ||
 	    unlikely(test_bit(ATH12K_FLAG_UMAC_PRERESET_START, &ab->dev_flags)))
@@ -449,6 +453,9 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	    !ieee80211_is_data(hdr->frame_control)))
 		return -ENOTSUPP;
 
+	if (skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP)
+		eth = (struct ethhdr *)skb->data;
+
 	ti.ring_id =
 		ab->hw_params->hw_ops->get_ring_selector(skb);
 
@@ -462,15 +469,30 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 
 	ti.bank_id = arvif->bank_id;
 
-	if (ieee80211_has_a4(hdr->frame_control) &&
+	if (eth && is_multicast_ether_addr(eth->h_dest) && ahsta && ahsta->use_4addr_set) {
+		arsta = ahsta->link[skb_cb->link_id];
+		if (unlikely(!arsta)) {
+			ath12k_err(ab, "failed to find arsta with primary link id %d",
+				   ahsta->primary_link_id);
+			ret = -EINVAL;
+			goto fail_remove_tx_buf;
+		}
+		ti.meta_data_flags = arsta->tcl_metadata;
+		peer_id = u16_get_bits(ti.meta_data_flags, HTT_TCL_META_DATA_PEER_ID_MISSION);
+		info4 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_IDX_LOOKUP_OVERRIDE, 1);
+		info4 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_SEARCH_INDEX, peer_id);
+		info4 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_CACHE_SET_NUM,
+					(arsta->ast_hash & 0xF));
+		skip_meta_data_flag = true;
+	} else if (ieee80211_has_a4(hdr->frame_control) &&
 	    is_multicast_ether_addr(hdr->addr3) && ahsta &&
 	    ahsta->use_4addr_set) {
-		if (unlikely(!ahsta->link[ahsta->primary_link_id])) {
+		if (unlikely(!ahsta->link[skb_cb->link_id])) {
 			ath12k_err(ab, "arsta not found on primary link");
 			ret = -EINVAL;
 			goto fail_remove_tx_buf;
 		}
-		ti.meta_data_flags = ahsta->link[ahsta->primary_link_id]->tcl_metadata;
+		ti.meta_data_flags = ahsta->link[skb_cb->link_id]->tcl_metadata;
 		ti.flags0 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_TO_FW, 1);
 		spin_lock_bh(&ab->base_lock);
 		peer_id = FIELD_GET(HTT_TCL_META_DATA_PEER_ID_MISSION,
@@ -500,9 +522,9 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 			ti.meta_data_flags =
 				ath12k_sawf_get_tcl_metadata_update(skb->mark);
 		}
-	} else if (gsn_valid) {
+	} else if (gsn_valid && !skip_meta_data_flag) {
 #else
-	if (gsn_valid) {
+	if (gsn_valid && !skip_meta_data_flag) {
 #endif /* CPTCFG_ATH12K_SAWF */
 		ti.meta_data_flags = u32_encode_bits(HTT_TCL_META_DATA_TYPE_GLOBAL_SEQ_NUM,
 						     HTT_TCL_META_DATA_TYPE_MISSION) |
@@ -527,7 +549,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	case HAL_TCL_ENCAP_TYPE_NATIVE_WIFI:
 		if ((ahvif->vif->offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED) &&
 		    (skb->protocol == cpu_to_be16(ETH_P_PAE) ||
-		     (is_qos_null = ieee80211_is_qos_nullfunc(hdr->frame_control))))
+		     (is_null = ieee80211_is_nullfunc(hdr->frame_control))))
 			is_diff_encap = true;
 		else
 			ath12k_dp_tx_encap_nwifi(skb);
@@ -582,7 +604,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	     !(skb_cb->flags & ATH12K_SKB_CIPHER_SET) &&
 	     ieee80211_has_protected(hdr->frame_control)) ||
 	     is_diff_encap) {
-		if (is_qos_null && msdu_ext_desc)
+		if (is_null && msdu_ext_desc)
 			goto skip_htt_meta;
 
 		/* Add metadata for sw encrypted vlan group traffic */
@@ -686,7 +708,7 @@ skip_htt_meta:
 	 * LSH 24 times to add updated vdev_id to info3
 	 */
 	tcl_cmd->info3 = (ti.vdev_id << 24) | arvif->desc.info3;
-	tcl_cmd->info4 = arvif->desc.info4;
+	tcl_cmd->info4 = info4;
 	tcl_cmd->info5 = 0;
 
 #ifdef CPTCFG_ATH12K_SAWF
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -7198,6 +7198,7 @@ static void ath12k_sta_set_4addr_wk(stru
 	struct ath12k *ar;
 	struct ath12k_link_vif *arvif;
 	struct ath12k_sta *ahsta;
+	struct ath12k_vif *ahvif;
 	struct ath12k_link_sta *arsta;
 	struct ieee80211_sta *sta;
 	int ret = 0;
@@ -7209,6 +7210,7 @@ static void ath12k_sta_set_4addr_wk(stru
 	for_each_set_bit(link_id, &ahsta->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
 		arsta = ahsta->link[link_id];
 		arvif = arsta->arvif;
+		ahvif = arvif->ahvif;
 		ar = arvif->ar;
 
 		ath12k_dbg(ar->ab, ATH12K_DBG_PEER,
@@ -7216,10 +7218,21 @@ static void ath12k_sta_set_4addr_wk(stru
 
 		ret = ath12k_wmi_set_peer_param(ar, arsta->addr,
 						arvif->vdev_id,
-						WMI_PEER_USE_4ADDR, 1);
+						WMI_PEER_USE_4ADDR,
+						WMI_PEER_4ADDR_ALLOW_EAPOL_DATA_FRAME);
 		if (ret)
 			ath12k_warn(ar->ab, "failed to set peer %pM 4addr capability: %d\n",
 				    arsta->addr, ret);
+
+		if (ahvif->tx_encap_type != ATH12K_HW_TXRX_ETHERNET)
+			continue;
+
+		ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+						    WMI_VDEV_PARAM_AP_ENABLE_NAWDS,
+						    WDS_EXT_ENABLE);
+		if (ret)
+			ath12k_warn(ar->ab, "failed to set vdev %d nawds parameter: %d\n",
+				    arvif->vdev_id, ret);
 	}
 }
 
@@ -9809,7 +9822,7 @@ static void ath12k_mac_op_tx(struct ieee
 	struct ath12k_peer *peer;
 	u32 info_flags;
 	bool is_prb_rsp;
-	bool is_mcast = false;
+	bool is_mcast = false, is_eth = false;
 	u16 frm_type = 0;
 	u8 link_id;
 	u16 mcbc_gsn;
@@ -9896,6 +9909,7 @@ static void ath12k_mac_op_tx(struct ieee
 	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP) {
 		skb_cb->flags |= ATH12K_SKB_HW_80211_ENCAP;
 		is_mcast = is_multicast_ether_addr(eth->h_dest);
+		is_eth = true;
 	} else if (ieee80211_is_mgmt(hdr->frame_control)) {
 		frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, hdr->frame_control);
 		is_prb_rsp = ieee80211_is_probe_resp(hdr->frame_control);
@@ -9931,7 +9945,10 @@ static void ath12k_mac_op_tx(struct ieee
 	    test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		skb_cb->flags |= ATH12K_SKB_TX_STATUS;
 
-	if (!vif->valid_links || !is_mcast ||
+	/* TODO: With this flag "is_eth". the eth mcast will be sent directly
+	 * to hw. When supporting eth mc, Need to handle mlo mc with mcbc_gsn
+	 */
+	if (!vif->valid_links || !is_mcast || is_eth ||
 	    test_bit(ATH12K_FLAG_RAW_MODE, &ar->ab->ag->dev_flags)) {
 		ret = ath12k_mac_tx_check_max_limit(ar, skb);
 		if (ret) {
@@ -10018,7 +10035,7 @@ static void ath12k_mac_op_tx(struct ieee
 			}
 
 			key = peer->keys[peer->mcast_keyidx];
-			if (key) {
+			if (key && !(skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP)) {
 				skb_cb->cipher = key->cipher;
 				skb_cb->flags |= ATH12K_SKB_CIPHER_SET;
 
@@ -11472,6 +11489,9 @@ static int ath12k_mac_op_add_interface(s
 	for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++)
 		INIT_LIST_HEAD(&ahvif->cache[i].key_conf.list);
 
+	if (ath12k_frame_mode == ATH12K_HW_TXRX_ETHERNET)
+		vif->offload_flags |= IEEE80211_OFFLOAD_ENCAP_4ADDR;
+
 	vif->driver_flags |= IEEE80211_VIF_SUPPORTS_UAPSD;
 	mutex_unlock(&ah->conf_mutex);
 	return 0;
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -5841,9 +5841,13 @@ ath12k_wmi_copy_resource_config(struct a
 	wmi_cfg->twt_ap_pdev_count = cpu_to_le32(tg_cfg->twt_ap_pdev_count);
 	wmi_cfg->twt_ap_sta_count = cpu_to_le32(tg_cfg->twt_ap_sta_count);
 	wmi_cfg->flags2 = WMI_RSRC_CFG_FLAGS2_CALC_NEXT_DTIM_COUNT_SET |
-			  WMI_RSRC_CFG_FLAGS2_INTRABSS_MEC_WDS_LEARNING_DISABLE |
 			  u32_encode_bits(tg_cfg->dp_peer_meta_data_ver,
 					  WMI_RSRC_CFG_FLAGS2_RX_PEER_METADATA_VERSION);
+	if (ath12k_frame_mode != ATH12K_HW_TXRX_ETHERNET)
+		wmi_cfg->flags2 |= WMI_RSRC_CFG_FLAGS2_INTRABSS_MEC_WDS_LEARNING_DISABLE;
+	else
+		wmi_cfg->flags2 |= WMI_RSRC_CFG_FLAGS2_FW_AST_INDICATION_DISABLE;
+
 #ifdef CPTCFG_ATH12K_SAWF
 	wmi_cfg->flags2 |= (tg_cfg->sawf & ath12k_sawf_enable) ?
 			   (WMI_RSRC_CFG_FLAGS2_SAWF_CONFIG_ENABLE_SET) : (0);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2513,6 +2513,18 @@ enum wmi_preamble {
 	WMI_VDEV_PREAMBLE_SHORT = 2,
 };
 
+/* This will be used to set for  WMI_VDEV_PARAM_AP_ENABLE_NAWDS
+ * whenever 4addr station connects in wds offload case.
+ * This is for enabling multicast to unicast conversion support in
+ * firmware
+ */
+#define WDS_EXT_ENABLE 1
+
+enum wmi_peer_4addr_allow_frame {
+	WMI_PEER_4ADDR_ALLOW_DATA_FRAME = 1,
+	WMI_PEER_4ADDR_ALLOW_EAPOL_DATA_FRAME = 2,
+};
+
 /** 6GHZ params **/
 /* Control to enable/disable beacon tx in non-HT duplicate */
 #define WMI_VDEV_6GHZ_BITMAP_NON_HT_DUPLICATE_BEACON		        BIT(0)
@@ -2801,12 +2813,20 @@ struct wmi_init_cmd {
 	__le32 num_host_mem_chunks;
 } __packed;
 
+/* WMI_RSRC_CFG_FLAGS2_FW_AST_INDICATION_DISABLE - Flag to indicate
+ * whether the WDS peer map/unmap event should be processed or
+ * ignored by FW.
+ * 0 - leave the WDS peer map/unmap event enabled
+ * 1 - disable the WDS peer map/unmap event
+ */
+
 #define WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT 4
 #define WMI_RSRC_CFG_HOST_SVC_FLAG_REO_QREF_SUPPORT_BIT   12
 #define WMI_RSRC_CFG_HOST_SVC_FLAG_FULL_BW_NOL_SUPPORT_BIT 14
 #define WMI_RSRC_CFG_FLAGS2_RX_PEER_METADATA_VERSION GENMASK(5,4)
 #define WMI_RSRC_CFG_FLAGS2_CALC_NEXT_DTIM_COUNT_SET      BIT(9)
 #define WMI_RSRC_CFG_FLAGS2_INTRABSS_MEC_WDS_LEARNING_DISABLE	BIT(15)
+#define WMI_RSRC_CFG_FLAGS2_FW_AST_INDICATION_DISABLE		BIT(18)
 #define WMI_RSRC_CFG_FLAG1_THREE_WAY_COEX_CONFIG_OVERRIDE_SUPPORT BIT(25)
 #define WMI_RSRC_CFG_FLAG1_BSS_CHANNEL_INFO_64	BIT(5)
 #define WMI_RSRC_CFG_FLAGS2_SAWF_CONFIG_ENABLE_SET	  BIT(13)
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -738,6 +738,8 @@ struct ath12k_link_sta {
 	struct ath12k_per_peer_cfr_capture cfr_capture;
 #endif
 	u32 rx_retries;
+	u16 ast_hash;
+	u16 ast_idx;
 };
 
 struct ath12k_sta {
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -832,6 +832,8 @@ int ath12k_peer_create(struct ath12k *ar
 
 		/* set HTT extension valid bit to 0 by default */
 		arsta->tcl_metadata &= ~HTT_TCL_META_DATA_VALID_HTT;
+		arsta->ast_hash = peer->ast_hash;
+		arsta->ast_idx = peer->hw_peer_id;
 
 		/* Fill ML info into created peer */
 		if (sta->mlo) {
