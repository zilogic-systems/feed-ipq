From 2d91aea6c2fbc2d5ee045908573193d99d4a8c06 Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Thu, 9 May 2024 13:19:23 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Ignore Peer assoc for GI and LTF configuration

In general , When user tries to push LTF and GI values using
the bitrate command, MCS resets and starts incrementing from
basic rate(MCS - 6).

Bitrate command always computes the MCS bitrate mask along with
GI and LTF configuration. It initiates a PEER_ASSOC command to
intimate all station associated. Due to this, FW resets
the MCS the basic rate.

When there is a change in bit rate mask, all the stations bitrate
mask has to be updated which is done through FEER_ASSOC command.
We can skip the PEER_ASSOC command when configuring
GI and LTF alone.

Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 mac.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)


--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -14871,6 +14871,20 @@ ath12k_mac_check_fixed_rate_settings_for
 	 return true;
 }
 
+int ath12k_is_mcs_rate_changed(enum nl80211_band band,
+			       const struct cfg80211_bitrate_mask *user_mask)
+{
+	if (user_mask->control[band].legacy_mcs_changed ||
+	    user_mask->control[band].ht_mcs_changed ||
+	    user_mask->control[band].vht_mcs_changed ||
+	    user_mask->control[band].he_mcs_changed ||
+	    user_mask->control[band].he_ul_mcs_changed ||
+	    user_mask->control[band].eht_mcs_changed)
+		return 1;
+
+	return 0;
+}
+
 static int
 ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
 			       struct ieee80211_vif *vif, unsigned int link_id,
@@ -14982,6 +14996,10 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 				    arvif->vdev_id, ret);
 			goto out;
 		}
+
+		if(!ath12k_is_mcs_rate_changed(band, mask))
+			goto skip_mcs_set;
+
 		ieee80211_iterate_stations_atomic(hw,
 						  ath12k_mac_disable_peer_fixed_rate,
 						  arvif);
@@ -14991,6 +15009,12 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 		nss = single_nss;
 		mutex_lock(&ar->conf_mutex);
 		arvif->bitrate_mask = *mask;
+
+		if(!ath12k_is_mcs_rate_changed(band, mask)) {
+			mutex_unlock(&ar->conf_mutex);
+			goto skip_mcs_set;
+		}
+
 		ieee80211_iterate_stations_atomic(hw,
 						  ath12k_mac_set_bitrate_mask_iter,
 						  arvif);
@@ -15072,6 +15096,9 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 			goto out;
 		}
 
+		if(!ath12k_is_mcs_rate_changed(band, mask))
+			goto skip_mcs_set;
+
 		mutex_lock(&ar->conf_mutex);
 		ieee80211_iterate_stations_atomic(hw,
 						  ath12k_mac_disable_peer_fixed_rate,
@@ -15085,6 +15112,7 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 		mutex_unlock(&ar->conf_mutex);
 	}
 
+skip_mcs_set:
 	mutex_lock(&ar->conf_mutex);
 
 	ret = ath12k_mac_set_rate_params(arvif, rate, nss, sgi, ldpc, he_gi,
