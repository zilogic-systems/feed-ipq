From 0af3327b8760e3d3f44eb4c4b802ef873fa96f53 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Mon, 8 Apr 2024 10:33:07 -0700
Subject: [PATCH 2/2] wifi: ath12k: create stub functions for PPE DS

Crate Stub functions for PPE DS apis. This is useful when
new DS design support gets added in subsequent gerrits.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  14 +--
 drivers/net/wireless/ath/ath12k/core.h |   3 +-
 drivers/net/wireless/ath/ath12k/dp.c   |  21 ++--
 drivers/net/wireless/ath/ath12k/hif.h  |  21 ++++
 drivers/net/wireless/ath/ath12k/pci.c  |  10 +-
 drivers/net/wireless/ath/ath12k/pcic.c |  14 +--
 drivers/net/wireless/ath/ath12k/ppe.c  |  13 +--
 drivers/net/wireless/ath/ath12k/ppe.h  | 131 +++++++++++++++++++++++++
 8 files changed, 182 insertions(+), 45 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 297549d2411c..63f10ab99aa4 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1292,19 +1292,16 @@ static int ath12k_core_pdev_init(struct ath12k_base *ab)
 	ath12k_telemetry_init(ab);
 	ath12k_fse_init(ab);
 
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	ret = ath12k_dp_ppeds_start(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to start DP PPEDS \n");
 		goto err_dp_ppeds_stop;
 	}
-#endif
+
 	return 0;
 
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 err_dp_ppeds_stop:
 	ath12k_dp_ppeds_stop(ab);
-#endif
 err_spectral_deinit:
 	ath12k_spectral_deinit(ab);
 err_thermal_unregister:
@@ -1314,9 +1311,7 @@ err_thermal_unregister:
 
 static void ath12k_core_pdev_deinit(struct ath12k_base *ab)
 {
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	ath12k_dp_ppeds_stop(ab);
-#endif
 	ath12k_cfr_deinit(ab);
 	ath12k_spectral_deinit(ab);
 	ath12k_thermal_unregister(ab);
@@ -1618,11 +1613,10 @@ static int ath12k_core_hw_group_start(struct ath12k_hw_group *ag)
 			goto pdev_cleanup;
 		}
 		ath12k_hif_irq_enable(ab);
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 		ath12k_hif_ppeds_irq_enable(ab, PPEDS_IRQ_PPE2TCL);
 		ath12k_hif_ppeds_irq_enable(ab, PPEDS_IRQ_REO2PPE);
 		ath12k_hif_ppeds_irq_enable(ab, PPEDS_IRQ_PPE_WBM2SW_REL);
-#endif
+
 		if (ab->hw_params->en_qdsslog) {
 			ath12k_info(ab, "QDSS trace enabled\n");
 			ath12k_config_qdss(ab);
@@ -3435,7 +3429,6 @@ static void ath12k_core_reset(struct work_struct *work)
 		ath12k_info(ab, "Recovery is initiated with Mode%s\n",
 			   (ag->recovery_mode == ATH12K_MLO_RECOVERY_MODE0 ? "0" : "1"));
 
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	if (!ab->is_reset) {
 		/* TODO: DS: revisit for DS SSR
 		 * As net device still exists and part of the bridge,
@@ -3444,7 +3437,6 @@ static void ath12k_core_reset(struct work_struct *work)
 		ath12k_hif_ppeds_irq_disable(ab, PPEDS_IRQ_REO2PPE);
 		ath12k_hif_ppeds_irq_disable(ab, PPEDS_IRQ_PPE_WBM2SW_REL);
 	}
-#endif
 
 	/* Sometimes the recovery will fail and then the next all recovery fail,
 	 * this is to avoid infinite recovery since it can not recovery success.
@@ -3971,7 +3963,7 @@ struct ath12k_base *ath12k_core_alloc(struct device *dev, size_t priv_size,
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* Used for tracking the order of per ab's DS node in bringup sequence
 	 * for the purposes of affinity settings */
-	ab->ppeds_node_idx = -1;
+	ab->ppeds_soc_idx = -1;
 #endif
 	return ab;
 
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 74f87ca8ad3c..f81a50c2cd8f 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -510,6 +510,7 @@ struct ath12k_vif {
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	bool chanctx_peer_del_done;
 
+	/* TODO: DS: remove seperate vp_num for rfs after DS implementation */
 	int ppe_rfs_vp_num;
 	int ppe_rfs_core_mask;
 
@@ -1589,7 +1590,7 @@ struct ath12k_base {
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	ppe_ds_wlan_handle_t *ppeds_handle;
 	/* used for per node enumeration*/
-	int ppeds_node_idx;
+	int ppeds_soc_idx;
 	int ppe_vp_tbl_registered[PPE_VP_ENTRIES_MAX];
 	int ppe_vp_search_idx_tbl_set[PPE_VP_ENTRIES_MAX];
 	struct ath12k_ppeds_napi ppeds_napi_ctxt;
diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index 8b6a68a1bcb6..8050d31c6e62 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -13,9 +13,7 @@
 #include "dp_rx.h"
 #include "peer.h"
 #include "dp_mon.h"
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 #include "ppe.h"
-#endif
 
 #define ATH12K_DP_LMAC_PEER_ID_LEGACY	2
 #define ATH12K_DP_LMAC_PEER_ID_MLO	3
@@ -62,9 +60,7 @@ int ath12k_dp_peer_default_route_setup(struct ath12k *ar, struct ath12k_link_vif
 	u32 reo_dest, param_value;
 	u32 lmac_peer_routing_id = ATH12K_DP_LMAC_PEER_ID_LEGACY;
 	int ret;
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	struct ath12k_vif *ahvif = arvif->ahvif;
-#endif
 
 	sta = container_of((void *)arsta->ahsta, struct ieee80211_sta, drv_priv);
 
@@ -90,11 +86,13 @@ int ath12k_dp_peer_default_route_setup(struct ath12k *ar, struct ath12k_link_vif
 	ath12k_dbg(ab, ATH12K_DBG_DP_RX, "peer %pM set def route id %d sta_link %d\n",
 		   arsta->addr, lmac_peer_routing_id,
 		   hweight16(sta->valid_links));
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+
 	/* keep last - override any PPE DS specific routing config */
-	if ((ahvif->vdev_type == WMI_VDEV_TYPE_AP) && !((ahvif->vdev_type == WMI_VDEV_TYPE_AP) && (ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S)))
+	/* TODO: DS: revisit this . can this be removed completely? */
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
+	    !(ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
+	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S))
 		ath12k_dp_peer_ppeds_route_setup(ar, arvif, arsta);
-#endif
 
 	return 0;
 }
@@ -322,13 +320,11 @@ static void ath12k_dp_srng_msi_setup(struct ath12k_base *ab,
 
 	vector = msi_irq_start  + (msi_group_number % msi_data_count);
 
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* Interrupt will not be freed for non-asserted chips
 	 * during UMAC reset
 	 */
 	if (!ath12k_dp_umac_reset_in_progress(ab))
 		ath12k_hif_ppeds_register_interrupts(ab, type, vector, ring_num);
-#endif
 }
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
@@ -764,9 +760,8 @@ void ath12k_dp_tx_update_bank_profile(struct ath12k_link_vif *arvif)
 	arvif->bank_id = ath12k_dp_tx_get_bank_profile(ab, arvif, dp);
 	arvif->desc.info0 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_BANK_ID,
 				       arvif->bank_id);
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+
 	ath12k_dp_ppeds_update_vp_entry(arvif->ar, arvif);
-#endif
 }
 
 static void ath12k_dp_deinit_bank_profiles(struct ath12k_base *ab)
@@ -859,9 +854,7 @@ static void ath12k_dp_srng_common_cleanup(struct ath12k_base *ab)
 	}
 	ath12k_dp_srng_cleanup(ab, &dp->wbm_desc_rel_ring);
 
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	ath12k_dp_srng_ppeds_cleanup(ab);
-#endif
 }
 
 static int ath12k_dp_srng_common_setup(struct ath12k_base *ab)
@@ -969,13 +962,11 @@ static int ath12k_dp_srng_common_setup(struct ath12k_base *ab)
 	ath12k_hal_reo_hw_setup(ab, ring_hash_map);
 
 skip_reo_setup:
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	ret = ath12k_dp_srng_ppeds_setup(ab);
 	if (ret) {
 		ath12k_warn(ab, "failed to set up ppe-ds srngs :%d\n", ret);
 		goto err;
 	}
-#endif
 
 	return 0;
 
diff --git a/drivers/net/wireless/ath/ath12k/hif.h b/drivers/net/wireless/ath/ath12k/hif.h
index fea6d786dff5..67e0fe88b581 100644
--- a/drivers/net/wireless/ath/ath12k/hif.h
+++ b/drivers/net/wireless/ath/ath12k/hif.h
@@ -90,6 +90,27 @@ static inline void ath12k_hif_ppeds_irq_disable(struct ath12k_base *ab, enum ppe
 	if (ab->hif.ops->ppeds_irq_disable)
 		ab->hif.ops->ppeds_irq_disable(ab, type);
 }
+#else
+static inline int ath12k_hif_ppeds_register_interrupts(struct ath12k_base *ab, int type, int vector,
+						       int ring_num)
+{
+	return 0;
+}
+
+static inline void ath12k_hif_ppeds_free_interrupts(struct ath12k_base *ab)
+{
+	return;
+}
+
+static inline void ath12k_hif_ppeds_irq_enable(struct ath12k_base *ab, enum ppeds_irq_type type)
+{
+	return;
+}
+
+static inline void ath12k_hif_ppeds_irq_disable(struct ath12k_base *ab, enum ppeds_irq_type type)
+{
+	return;
+}
 #endif
 
 static inline int ath12k_hif_map_service_to_pipe(struct ath12k_base *ab, u16 service_id,
diff --git a/drivers/net/wireless/ath/ath12k/pci.c b/drivers/net/wireless/ath/ath12k/pci.c
index 438cfd0a0d4f..b7fcfcf5684b 100644
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -250,8 +250,8 @@ int ath12k_pci_ppeds_register_interrupts(struct ath12k_base *ab, int type, int v
 	u8 bus_id = pci_domain_nr(ar_pci->pdev->bus);
 	int ret;
 
-	if (ab->ppeds_node_idx == -1) {
-		ath12k_err(ab, "invalid ppeds_node_idx in ppeds_register_interrupts\n");
+	if (ab->ppeds_soc_idx == -1) {
+		ath12k_err(ab, "invalid ppeds_soc_idx in ppeds_register_interrupts\n");
 		return -EINVAL;
 	}
 
@@ -260,7 +260,7 @@ int ath12k_pci_ppeds_register_interrupts(struct ath12k_base *ab, int type, int v
 	irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
 	if (type == HAL_PPE2TCL) {
 		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL], sizeof(ab->dp.ppeds_irq_name),
-			 "pci%d_ppe2tcl_%d", bus_id, ab->ppeds_node_idx);
+			 "pci%d_ppe2tcl_%d", bus_id, ab->ppeds_soc_idx);
 		ret = request_irq(irq,  ath12k_ds_ppe2tcl_irq_handler,
 				  IRQF_SHARED,
 			    ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL], (void *)ath12k_dp_get_ppe_ds_ctxt(ab));
@@ -269,7 +269,7 @@ int ath12k_pci_ppeds_register_interrupts(struct ath12k_base *ab, int type, int v
 		ab->dp.ppeds_irq[PPEDS_IRQ_PPE2TCL] = irq;
 	} else if (type == HAL_REO2PPE) {
 		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE], sizeof(ab->dp.ppeds_irq_name),
-			 "pci%d_reo2ppe_%d", bus_id, ab->ppeds_node_idx);
+			 "pci%d_reo2ppe_%d", bus_id, ab->ppeds_soc_idx);
 		ret = request_irq(irq,  ath12k_ds_reo2ppe_irq_handler,
 				  IRQF_SHARED,
 				  ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE], (void *)ath12k_dp_get_ppe_ds_ctxt(ab));
@@ -278,7 +278,7 @@ int ath12k_pci_ppeds_register_interrupts(struct ath12k_base *ab, int type, int v
 		ab->dp.ppeds_irq[PPEDS_IRQ_REO2PPE] = irq;
 	} else if (type == HAL_WBM2SW_RELEASE && ring_num == HAL_WBM2SW_PPEDS_TX_CMPLN_RING_NUM) {
 		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL], sizeof(ab->dp.ppeds_irq_name),
-			 "pci%d_ppe_wbm_rel_%d", bus_id, ab->ppeds_node_idx);
+			 "pci%d_ppe_wbm_rel_%d", bus_id, ab->ppeds_soc_idx);
 		ret = request_irq(irq,  ath12k_dp_ppeds_handle_tx_comp,
 				  IRQF_SHARED,
 				  ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL],(void *)ab);
diff --git a/drivers/net/wireless/ath/ath12k/pcic.c b/drivers/net/wireless/ath/ath12k/pcic.c
index c92f5a50ba87..3fd1d9a80f70 100644
--- a/drivers/net/wireless/ath/ath12k/pcic.c
+++ b/drivers/net/wireless/ath/ath12k/pcic.c
@@ -391,11 +391,11 @@ static int ath12k_pcic_ext_config_gic_msi_irq(struct ath12k_base *ab,
 	    ab->hw_params->ring_mask->rx_wbm_rel[i] ||
 	    ab->hw_params->ring_mask->reo_status[i] ||
 	    ab->hw_params->ring_mask->host2rxdma[i] ||
-	    ab->hw_params->ring_mask->ppe2tcl[i] ||
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	    ab->hw_params->ring_mask->ppe2tcl[i] ||
 	    ab->hw_params->ring_mask->wbm2sw6_ppeds_tx_cmpln[i] ||
-#endif
 	    ab->hw_params->ring_mask->reo2ppe[i] ||
+#endif
 	    ab->hw_params->ring_mask->rx_mon_dest[i]) {
 		num_irq = 1;
 	}
@@ -598,8 +598,8 @@ int ath12k_pcic_ppeds_register_interrupts(struct ath12k_base *ab, int type, int
 	u8 bus_id = ab->userpd_id;
 	struct platform_device *pdev = ab->pdev;
 
-	if (ab->ppeds_node_idx == -1) {
-		ath12k_err(ab, "invalid ppeds_node_idx in ppeds_register_interrupts\n");
+	if (ab->ppeds_soc_idx == -1) {
+		ath12k_err(ab, "invalid ppeds_soc_idx in ppeds_register_interrupts\n");
 		return -EINVAL;
 	}
 
@@ -609,7 +609,7 @@ int ath12k_pcic_ppeds_register_interrupts(struct ath12k_base *ab, int type, int
 			goto irq_fail;
 		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
 		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL], sizeof(ab->dp.ppeds_irq_name),
-			 "pcic%d_ppe2tcl_%d", bus_id, ab->ppeds_node_idx);
+			 "pcic%d_ppe2tcl_%d", bus_id, ab->ppeds_soc_idx);
 		ret = devm_request_irq(&pdev->dev, irq,  ath12k_ds_ppe2tcl_irq_handler,
 				  IRQF_SHARED,
 			    ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL], (void *)ath12k_dp_get_ppe_ds_ctxt(ab));
@@ -622,7 +622,7 @@ int ath12k_pcic_ppeds_register_interrupts(struct ath12k_base *ab, int type, int
 			goto irq_fail;
 		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
 		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE], sizeof(ab->dp.ppeds_irq_name),
-			 "pcic%d_reo2ppe_%d", bus_id, ab->ppeds_node_idx);
+			 "pcic%d_reo2ppe_%d", bus_id, ab->ppeds_soc_idx);
 		ret = devm_request_irq(&pdev->dev, irq,  ath12k_ds_reo2ppe_irq_handler,
 				  IRQF_SHARED,
 				  ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE], (void *)ath12k_dp_get_ppe_ds_ctxt(ab));
@@ -635,7 +635,7 @@ int ath12k_pcic_ppeds_register_interrupts(struct ath12k_base *ab, int type, int
 			goto irq_fail;
 		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
 		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL], sizeof(ab->dp.ppeds_irq_name),
-			 "pcic%d_ppe_wbm_rel_%d", bus_id, ab->ppeds_node_idx);
+			 "pcic%d_ppe_wbm_rel_%d", bus_id, ab->ppeds_soc_idx);
 		ret = devm_request_irq(&pdev->dev, irq,  ath12k_dp_ppeds_handle_tx_comp,
 				  IRQF_SHARED,
 				  ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL],(void *)ab);
diff --git a/drivers/net/wireless/ath/ath12k/ppe.c b/drivers/net/wireless/ath/ath12k/ppe.c
index 07978a8a545a..b20103d543d8 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -814,6 +814,7 @@ int ath12k_ppeds_attach_vdev(struct ath12k_link_vif *arvif,
 		return -EINVAL;
 	}
 
+	/* TODO: DS: revisit this */
 	if (arvif->ahvif->vif->type != NL80211_IFTYPE_AP) {
 		return -EINVAL;
 	}
@@ -960,13 +961,13 @@ skip_vp_reset:
 	if (ret)
 		return ret;
 
-	WARN_ON(ab->ppeds_node_idx != -1);
-	/* dec ppeds_node_idx to start from 0 */
-	ab->ppeds_node_idx = atomic_inc_return(&num_ppeds_nodes) - 1;
+	WARN_ON(ab->ppeds_soc_idx != -1);
+	/* dec ppeds_soc_idx to start from 0 */
+	ab->ppeds_soc_idx = atomic_inc_return(&num_ppeds_nodes) - 1;
 
 	ath12k_dbg(ab, ATH12K_DBG_PPE,
-		   "PPEDS attach ab %px ppeds_handle %px ppeds_node_idx %d num_ppeds_nodes %d\n",
-		   ab, ab->ppeds_handle, ab->ppeds_node_idx, atomic_read(&num_ppeds_nodes));
+		   "PPEDS attach ab %px ppeds_handle %px ppeds_soc_idx %d num_ppeds_nodes %d\n",
+		   ab, ab->ppeds_handle, ab->ppeds_soc_idx, atomic_read(&num_ppeds_nodes));
 	ret = ath12k_dp_ppeds_add_napi_ctxt(ab);
 	if (ret)
 		return -ENOSR;
@@ -1015,7 +1016,7 @@ int ath12k_ppeds_detach(struct ath12k_base *ab)
 	ath12k_hif_ppeds_free_interrupts(ab);
 	ppe_ds_wlan_inst_free(ab->ppeds_handle);
 	ab->ppeds_handle = NULL;
-	ab->ppeds_node_idx = -1;
+	ab->ppeds_soc_idx = -1;
 	atomic_dec(&num_ppeds_nodes);
 
 	for (i = 0; i < PPE_VP_ENTRIES_MAX; i++) {
diff --git a/drivers/net/wireless/ath/ath12k/ppe.h b/drivers/net/wireless/ath/ath12k/ppe.h
index 0f9b7c54e3cd..1dcfc800e993 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -71,7 +71,138 @@ void ath12k_ppeds_partner_link_start_queues(struct ath12k *ar);
 void ath12k_ppeds_partner_link_stop_queues(struct ath12k *ar);
 void ath12k_dp_rx_ppe_fse_register(void);
 void ath12k_dp_rx_ppe_fse_unregister(void);
+#else
+void ath12k_dp_srng_ppeds_cleanup(struct ath12k_base *ab)
+{
+	return 0;
+}
 
+int ath12k_dp_srng_ppeds_setup(struct ath12k_base *ab)
+{
+	return 0;
+}
+
+int ath12k_dp_ppeds_register_soc(struct ath12k_dp *dp,
+				 struct dp_ppe_ds_idxs *idx)
+{
+	return 0;
+}
+
+void ath12k_dp_ppeds_stop(struct ath12k_base *ab)
+{
+	return 0;
+}
+
+int ath12k_dp_ppeds_start(struct ath12k_base *ab)
+{
+	return 0;
+}
+
+int ath12k_ppeds_detach( struct ath12k_base *ab)
+{
+	return 0;
+}
+
+int ath12k_ppeds_attach( struct ath12k_base *ab)
+{
+	return 0;
+}
+
+int ath12k_ppeds_attach_vdev(struct ath12k_link_vif *arvif,
+			     void *vp_arg, int *ppe_vp_num,
+			     struct ieee80211_ppe_vp_ds_params *vp_params)
+{
+	return 0;
+}
+
+void ath12k_ppeds_detach_vdev(struct ath12k_link_vif *arvif,
+			      struct ieee80211_ppe_vp_ds_params *vp_params)
+{
+	return;
+}
+
+void ath12k_dp_peer_ppeds_route_setup(struct ath12k *ar, struct ath12k_link_vif *arvif,
+				      struct ath12k_link_sta *arsta)
+{
+	return;
+}
+
+int ath12k_ppeds_get_handle(struct ath12k_base *ab)
+{
+	return;
+}
+
+void *ath12k_dp_get_ppe_ds_ctxt(struct ath12k_base *ab)
+{
+	return;
+}
+
+irqreturn_t ath12k_ds_ppe2tcl_irq_handler(int irq, void *ctxt)
+{
+	return IRQ_HANDLED;
+}
+
+irqreturn_t ath12k_ds_reo2ppe_irq_handler(int irq, void *ctxt)
+{
+	return IRQ_HANDLED;
+}
+
+irqreturn_t ath12k_dp_ppeds_handle_tx_comp(int irq, void *ctxt)
+{
+	return IRQ_HANDLED;
+}
+
+void ath12k_dp_ppeds_service_enable_disable(struct ath12k_base *ab,
+					    bool enable)
+{
+	return;
+}
+
+void ath12k_dp_ppeds_interrupt_stop(struct ath12k_base *ab)
+{
+	return;
+}
+
+void ath12k_dp_ppeds_stop(struct ath12k_base *ab)
+{
+	return;
+}
+
+void ath12k_dp_ppeds_interrupt_start(struct ath12k_base *ab)
+{
+	return;
+}
+
+void ath12k_ppeds_partner_link_start_queues(struct ath12k *ar)
+{
+	return;
+}
+
+void ath12k_ppeds_partner_link_stop_queues(struct ath12k *ar)
+{
+	return;
+}
+
+void ath12k_dp_rx_ppe_fse_register(void)
+{
+	return;
+}
+
+void ath12k_dp_rx_ppe_fse_unregister(void)
+{
+	return;
+}
+
+void ath12k_dp_peer_ppeds_route_setup(struct ath12k *ar, struct ath12k_link_vif *arvif,
+				      struct ath12k_link_sta *arsta)
+{
+	return;
+}
+void ath12k_dp_ppeds_update_vp_entry(struct ath12k *ar,
+				     struct ath12k_link_vif *arvif)
+{
+	return;
+}
 #endif /* CPTCFG_ATH12K_PPE_DS_SUPPORT */
 
 #endif
-- 
2.17.1

