From 1444bfb6be03b393e3944097c2bf7d66716422af Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Mon, 22 Apr 2024 19:12:57 +0530
Subject: [PATCH 1/2] wifi: ath12k: refactor peer find logic in rx path

Currently ath12k_dp_rx_h_find_peer tries to find peer with the given
peer id from peer array index. When it fails to find the corresponding
peer for the given peer_id, it goes for ath12k_peer_find_by_addr. In the
followup patch peer array index based search gets changed to rcu
pointer and spinlock will be converted into rcu lock. Hence moving
common code to the function and update the common parameters there.

Patch-depdendency: 886-001-wifi-ath12k-add-array-based-peer-lookup-to-avoid-CPU.patch

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 59 ++++++++++++++++---------
 1 file changed, 37 insertions(+), 22 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 2ff0fdf..3ecf932 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2810,12 +2810,6 @@ ath12k_dp_rx_h_find_peer(struct ath12k *ar, struct sk_buff *msdu,
 
 	lockdep_assert_held(&ab->base_lock);
 
-	if (rxcb->peer_id)
-		peer = ath12k_peer_find_by_peer_list_index(ar, rxcb->peer_id);
-
-	if (peer)
-		return peer;
-
 	if (!(rx_info->filled & BIT_ULL(ATH12K_RX_INFO_ADDR2))) {
 		if (rx_desc && ath12k_dp_rxdesc_mac_addr2_valid(ab, rx_desc)) {
 			ether_addr_copy(rx_info->addr2,
@@ -2881,6 +2875,30 @@ static bool ath12k_dp_rx_check_fast_rx(struct ath12k *ar,
 	return true;
 }
 
+static enum hal_encrypt_type
+ath12k_dp_rx_update_peer_dependent_param(struct ath12k *ar, struct sk_buff *msdu,
+					 struct ath12k_dp_rx_info *rx_info,
+					 struct ath12k_peer *peer)
+{
+	struct ath12k_dp_rx_tid *rx_tid;
+	enum hal_encrypt_type enctype;
+	struct ath12k_skb_rxcb *rxcb;
+	u8 tid;
+
+	tid = rx_info->tid;
+	rx_tid = &peer->rx_tid[tid];
+	ar->wmm_stats.rx_type =
+		ath12k_tid_to_ac(rx_tid->tid > ATH12K_DSCP_PRIORITY ? 0 : rx_tid->tid);
+	ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
+	rxcb = ATH12K_SKB_RXCB(msdu);
+	if (rxcb->is_mcbc)
+		enctype = peer->sec_type_grp;
+	else
+		enctype = peer->sec_type;
+
+	return enctype;
+}
+
 static void ath12k_dp_rx_h_mpdu(struct ath12k *ar,
 				struct sk_buff *msdu,
 				struct hal_rx_desc *rx_desc,
@@ -2896,8 +2914,6 @@ static void ath12k_dp_rx_h_mpdu(struct ath12k *ar,
 	struct ath12k_peer *peer;
 	struct ieee80211_rx_status *rx_status = rx_info->rx_status;
 	u32 err_bitmap;
-	struct ath12k_dp_rx_tid *rx_tid;
-	u8 tid;
 #if defined(CPTCFG_MAC80211_PPE_SUPPORT) || defined(CPTCFG_ATH12K_PPE_DS_SUPPORT)
 	int vp;
 #endif
@@ -2916,8 +2932,8 @@ static void ath12k_dp_rx_h_mpdu(struct ath12k *ar,
 	if (ar->erp_trigger_set)
 		queue_work(ar->ab->workqueue, &ar->erp_handle_trigger_work);
 
-	peer = ath12k_dp_rx_h_find_peer(ar, msdu, rx_info);
-	if (peer) {
+	peer = ath12k_peer_find_by_peer_list_index(ar, rxcb->peer_id);
+	if (likely(peer)) {
 		/* If the pkt is a valid IP packet and peer supports
 		 * fast rx, deliver directly to net, also note that
 		 * pkts with crypto error are not expected to arrive in this
@@ -2944,19 +2960,18 @@ static void ath12k_dp_rx_h_mpdu(struct ath12k *ar,
 				return;
 		        }
 		}
-
-		tid = rx_info->tid;
-		rx_tid = &peer->rx_tid[tid];
-		ar->wmm_stats.rx_type =
-			ath12k_tid_to_ac(rx_tid->tid > ATH12K_DSCP_PRIORITY ? 0: rx_tid->tid);
-		ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
-
-		if (rxcb->is_mcbc)
-			enctype = peer->sec_type_grp;
-		else
-			enctype = peer->sec_type;
+		enctype =
+			ath12k_dp_rx_update_peer_dependent_param(ar, msdu,
+								 rx_info, peer);
 	} else {
-		enctype = HAL_ENCRYPT_TYPE_OPEN;
+		peer = ath12k_dp_rx_h_find_peer(ar, msdu, rx_info);
+		if (peer) {
+			enctype =
+				ath12k_dp_rx_update_peer_dependent_param(ar, msdu,
+									 rx_info, peer);
+		} else {
+			enctype = HAL_ENCRYPT_TYPE_OPEN;
+		}
 	}
 	spin_unlock_bh(&ar->ab->base_lock);
 
-- 
2.34.1

