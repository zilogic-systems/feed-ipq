From 7751030544a4698930f1ae069a62a505a8182081 Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Tue, 23 Apr 2024 14:57:44 +0530
Subject: wifi: ath12k: Enable umac reset for QCN6432

As the Q6 of ipq5332 is shared between all the radios of qcn6432
the umac reset interrupt line needs to be resetted for qcn6432
every time after receiving the interrupt so that the next interrupt
can be raised for that reason writing the value 0x00000100 into a pci
slot specific address.

Currently for qcn6432 MSI based interrupts are being used but as per the
design one interrupt line is reserved for umac_reset interrupt so adding
support to parse it from the dts.

Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c        | 32 +++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/ahb.h        |  1 +
 drivers/net/wireless/ath/ath12k/core.c       |  1 -
 drivers/net/wireless/ath/ath12k/core.h       |  3 ++
 drivers/net/wireless/ath/ath12k/hif.h        |  7 +++++
 drivers/net/wireless/ath/ath12k/hw.c         |  2 +-
 drivers/net/wireless/ath/ath12k/pcic.c       |  2 +-
 drivers/net/wireless/ath/ath12k/umac_reset.c | 20 +++++++-----
 8 files changed, 57 insertions(+), 11 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -574,10 +574,13 @@ static int ath12k_ahb_config_ext_irq(str
 	return 0;
 }
 
-static int ath12k_dp_umac_ahb_config_irq(struct ath12k_base *ab)
+static int ath12k_ahb_dp_umac_config_irq(struct ath12k_base *ab)
 {
 	struct ath12k_dp_umac_reset *umac_reset = &ab->dp_umac_reset;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	struct device *dev = ab->dev;
 	int irq, ret;
+	u32 interrupt_reset_addr;
 
 	irq = platform_get_irq_byname(ab->pdev, "umac_reset");
 
@@ -588,6 +591,19 @@ static int ath12k_dp_umac_ahb_config_irq
 
 	umac_reset->irq_num = irq;
 
+	if (ab->hw_params->umac_irq_line_reset) {
+		if (of_property_read_u32(dev->of_node, "qcom,umac-irq-reset-addr", &interrupt_reset_addr)) {
+			ath12k_err(ab, "qcom,umac-irq-reset-addr is not found in dts\n");
+			return -ENXIO;
+		}
+
+		ab_ahb->interrupt_reset_base_addr = ioremap(interrupt_reset_addr, PCIE_MEM_SIZE);
+		if (!ab_ahb->interrupt_reset_base_addr) {
+			ath12k_err(ab, "Not requesting irq %d for umac dp reset Due to I/O remap failure\n", irq);
+			return -ENOMEM;
+		}
+	}
+
 	tasklet_setup(&umac_reset->intr_tq, ath12k_umac_reset_tasklet_handler);
 
 	ret = request_irq(irq, ath12k_umac_reset_interrupt_handler,
@@ -603,6 +619,38 @@ static int ath12k_dp_umac_ahb_config_irq
 	return 0;
 }
 
+static void ath12k_ahb_dp_umac_reset_enable_irq(struct ath12k_base *ab)
+{
+	struct ath12k_dp_umac_reset *umac_reset = &ab->dp_umac_reset;
+
+	enable_irq(umac_reset->irq_num);
+}
+
+static void ath12k_ahb_dp_umac_reset_free_irq(struct ath12k_base *ab)
+{
+	struct ath12k_dp_umac_reset *umac_reset = &ab->dp_umac_reset;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+
+	if (ab->hw_params->umac_irq_line_reset) {
+		iounmap(ab_ahb->interrupt_reset_base_addr);
+		ab_ahb->interrupt_reset_base_addr = NULL;
+	}
+
+	disable_irq_nosync(umac_reset->irq_num);
+	free_irq(umac_reset->irq_num, ab);
+}
+
+void ath12k_ahb_umac_intr_line_reset(struct ath12k_base *ab)
+{
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+
+	if (!ab_ahb->interrupt_reset_base_addr) {
+		ath12k_err(ab, "Base address is NULL\n");
+		return;
+	}
+	writel_relaxed(ATH12K_UMAC_INTR_LINE_RESET_VAL, ab_ahb->interrupt_reset_base_addr);
+}
+
 static int ath12k_ahb_config_irq(struct ath12k_base *ab)
 {
 	int irq, irq_idx, i;
@@ -705,9 +753,9 @@ static const struct ath12k_hif_ops ath12
 	.power_up = ath12k_ahb_power_up,
 	.ssr_notifier_reg = ath12k_ahb_ssr_notifier_reg,
 	.ssr_notifier_unreg = ath12k_ahb_ssr_notifier_unreg,
-	.dp_umac_reset_irq_config = ath12k_dp_umac_ahb_config_irq,
-	.dp_umac_reset_enable_irq = ath12k_pcic_dp_umac_reset_enable_irq,
-	.dp_umac_reset_free_irq = ath12k_dp_umac_reset_free_irq,
+	.dp_umac_reset_irq_config = ath12k_ahb_dp_umac_config_irq,
+	.dp_umac_reset_enable_irq = ath12k_ahb_dp_umac_reset_enable_irq,
+	.dp_umac_reset_free_irq = ath12k_ahb_dp_umac_reset_free_irq,
 };
 
 static const struct ath12k_hif_ops ath12k_ahb_hif_ops_qcn6432 = {
@@ -734,6 +782,10 @@ static const struct ath12k_hif_ops ath12
 	.ppeds_irq_enable = ath12k_pcic_ppeds_irq_enable,
 	.ppeds_irq_disable = ath12k_pcic_ppeds_irq_disable,
 #endif
+	.dp_umac_intr_line_reset = ath12k_ahb_umac_intr_line_reset,
+	.dp_umac_reset_irq_config = ath12k_ahb_dp_umac_config_irq,
+	.dp_umac_reset_enable_irq = ath12k_ahb_dp_umac_reset_enable_irq,
+	.dp_umac_reset_free_irq = ath12k_ahb_dp_umac_reset_free_irq,
 };
 
 static struct rproc *ath12k_core_get_parent_of_rproc_node(struct rproc *rproc)
--- a/drivers/net/wireless/ath/ath12k/ahb.h
+++ b/drivers/net/wireless/ath/ath12k/ahb.h
@@ -22,6 +22,11 @@
 #define ATH12K_PCI_CE_WAKE_IRQ	2
 #define ATH12K_PCI_IRQ_CE0_OFFSET	3
 
+/* Here PCIE_MEM_SIZE is of size 4 Bytes*/
+#define PCIE_MEM_SIZE 4
+
+#define ATH12K_UMAC_INTR_LINE_RESET_VAL 0x00000100
+
 enum ath12k_ahb_smp2p_msg_id {
 	ATH12K_AHB_POWER_SAVE_ENTER = 1,
 	ATH12K_AHB_POWER_SAVE_EXIT,
@@ -33,6 +38,7 @@ struct ath12k_ahb {
 	struct rproc *tgt_rproc, *tgt_text_rproc, *tgt_rrproc;
 	enum ath12k_core_crash_type crash_type;
 	bool collect_dump;
+	void *interrupt_reset_base_addr;
 	struct {
 		struct device *dev;
 		struct iommu_domain *iommu_domain;
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1388,7 +1388,6 @@ struct ath12k_mlo_dp_umac_reset {
         u8 initiator_chip;
 };
 
-#define ATH12K_UMAC_RESET_IPC	451
 #define ATH12K_IS_UMAC_RESET_IN_PROGRESS	BIT(0)
 
 /* Holds info on the group of SOCs that are registered as a single wiphy
--- a/drivers/net/wireless/ath/ath12k/hif.h
+++ b/drivers/net/wireless/ath/ath12k/hif.h
@@ -46,6 +46,7 @@ struct ath12k_hif_ops {
 	void (*ppeds_irq_enable)(struct ath12k_base *ab, enum ppeds_irq_type type);
 	void (*ppeds_irq_disable)(struct ath12k_base *ab, enum ppeds_irq_type type);
 #endif
+	void (*dp_umac_intr_line_reset)(struct ath12k_base *ab);
 	int (*dp_umac_reset_irq_config)(struct ath12k_base *ab);
 	void (*dp_umac_reset_enable_irq)(struct ath12k_base *ab);
 	void (*dp_umac_reset_free_irq)(struct ath12k_base *ab);
@@ -271,6 +272,12 @@ static inline int ath12k_hif_get_msi_irq
 	return ab->hif.ops->get_msi_irq(ab, vector);
 }
 
+static inline void ath12k_hif_dp_umac_intr_line_reset(struct ath12k_base *ab)
+{
+	if (ab->hif.ops->dp_umac_intr_line_reset)
+		ab->hif.ops->dp_umac_intr_line_reset(ab);
+}
+
 static inline int ath12k_hif_dp_umac_reset_irq_config(struct ath12k_base *ab)
 {
 	if (ab->hif.ops->dp_umac_reset_irq_config)
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -267,7 +267,6 @@ static const struct ath12k_hw_ops ipq533
 	.fill_cfr_hdr_info = ath12k_hw_ipq5332_fill_cfr_hdr_info,
 };
 
-
 #define ATH12K_TX_RING_MASK_0 0x1
 #define ATH12K_TX_RING_MASK_1 0x2
 #define ATH12K_TX_RING_MASK_2 0x4
@@ -1800,6 +1799,8 @@ static struct ath12k_hw_params ath12k_hw
 		.send_platform_model = false,
 		.en_fwlog = true,
 		.support_umac_reset = false,
+		.umac_irq_line_reset = false,
+		.umac_reset_ipc = 0,
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
@@ -1883,6 +1884,8 @@ static struct ath12k_hw_params ath12k_hw
 		.send_platform_model = false,
 		.en_fwlog = true,
 		.support_umac_reset = false,
+		.umac_irq_line_reset = false,
+		.umac_reset_ipc = 0,
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
@@ -1979,6 +1982,8 @@ static struct ath12k_hw_params ath12k_hw
 		.send_platform_model = false,
 		.en_fwlog = true,
 		.support_umac_reset = true,
+		.umac_irq_line_reset = false,
+		.umac_reset_ipc = 0,
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
@@ -2077,7 +2082,9 @@ static struct ath12k_hw_params ath12k_hw
 		.pmm_remap = &ath12k_pmm_ipq5332,
 		.send_platform_model = true,
 		.en_fwlog = true,
-		.support_umac_reset = false,
+		.support_umac_reset = true,
+		.umac_irq_line_reset = false,
+		.umac_reset_ipc = ATH12K_UMAC_RESET_IPC_IPQ5332,
 		.support_ce_manual_poll=true,
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
@@ -2172,7 +2179,9 @@ static struct ath12k_hw_params ath12k_hw
 		.compact_rx_tlv = true,
 		.send_platform_model = true,
 		.en_fwlog = false,
-		.support_umac_reset = false,
+		.support_umac_reset = true,
+		.umac_irq_line_reset = true,
+		.umac_reset_ipc = ATH12K_UMAC_RESET_IPC_QCN6432,
 		.en_qdsslog = true,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
 		.is_plink_preferable = true,
--- a/drivers/net/wireless/ath/ath12k/pcic.c
+++ b/drivers/net/wireless/ath/ath12k/pcic.c
@@ -293,7 +293,7 @@ static void __ath12k_pcic_ext_irq_disabl
 	}
 }
 
-static void ath12k_pcic_ext_grp_enable(struct ath12k_ext_irq_grp *irq_grp)
+void ath12k_pcic_ext_grp_enable(struct ath12k_ext_irq_grp *irq_grp)
 {
 	int i;
 
@@ -748,13 +748,6 @@ void ath12k_pcic_ext_irq_disable(struct
 		ath12k_pcic_sync_ext_irqs(ab);
 }
 
-void ath12k_pcic_dp_umac_reset_enable_irq(struct ath12k_base *ab)
-{
-	struct ath12k_dp_umac_reset *umac_reset = &ab->dp_umac_reset;
-
-	enable_irq(umac_reset->irq_num);
-}
-
 void ath12k_pcic_stop(struct ath12k_base *ab)
 {
 	ath12k_pcic_ce_irq_disable_sync(ab);
--- a/drivers/net/wireless/ath/ath12k/umac_reset.c
+++ b/drivers/net/wireless/ath/ath12k/umac_reset.c
@@ -110,13 +110,21 @@ int ath12k_htt_umac_reset_setup_cmd(stru
 	struct ath12k_dp_umac_reset *umac_reset = &ab->dp_umac_reset;
 
 	intr_ctxt = ath12k_get_umac_reset_intr_offset(ab);
-	ret = ath12k_hif_get_user_msi_vector(ab, "DP",
-					     &msi_data_count, &msi_data_start,
-					     &msi_irq_start);
-	if (ret)
-		params.msi_data = ATH12K_UMAC_RESET_IPC;
-	else
+
+	if (!ab->hw_params->umac_reset_ipc) {
+		ret = ath12k_hif_get_user_msi_vector(ab, "DP",
+						     &msi_data_count, &msi_data_start,
+						     &msi_irq_start);
+		if (ret) {
+			ath12k_err(ab, "Failed to fill msi_data\n");
+			return ret;
+		}
+
 		params.msi_data = (intr_ctxt % msi_data_count) + msi_data_start;
+	} else {
+		params.msi_data = ab->hw_params->umac_reset_ipc;
+	}
+
 	params.addr_lo = umac_reset->shmem_paddr_aligned & HAL_ADDR_LSB_REG_MASK;
 	params.addr_hi = (u64)umac_reset->shmem_paddr_aligned >> HAL_ADDR_MSB_REG_SHIFT;
 
@@ -492,6 +500,7 @@ void ath12k_umac_reset_tasklet_handler(s
 	struct ath12k_dp_umac_reset *umac_reset = from_tasklet(umac_reset, umac_cntxt, intr_tq);
 	struct ath12k_base *ab = container_of(umac_reset, struct ath12k_base, dp_umac_reset);
 
+	ath12k_hif_dp_umac_intr_line_reset(ab);
 	ath12k_dp_umac_reset_handle(ab);
 	enable_irq(umac_reset->irq_num);
 }
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -327,7 +327,7 @@ int ath12k_pci_get_msi_irq(struct ath12k
 	return pci_irq_vector(pci_dev, vector);
 }
 
-int ath12k_dp_umac_pci_config_irq(struct ath12k_base *ab)
+static int ath12k_dp_umac_pci_config_irq(struct ath12k_base *ab)
 {
         u32 msi_data_start, msi_data_count, msi_irq_start;
         unsigned int msi_data;
@@ -357,7 +357,14 @@ int ath12k_dp_umac_pci_config_irq(struct
 	return 0;
 }
 
-void ath12k_dp_umac_reset_free_irq(struct ath12k_base *ab)
+static void ath12k_pci_dp_umac_reset_enable_irq(struct ath12k_base *ab)
+{
+	struct ath12k_dp_umac_reset *umac_reset = &ab->dp_umac_reset;
+
+	enable_irq(umac_reset->irq_num);
+}
+
+static void ath12k_pci_dp_umac_reset_free_irq(struct ath12k_base *ab)
 {
 	struct ath12k_dp_umac_reset *umac_reset = &ab->dp_umac_reset;
 
@@ -851,8 +858,8 @@ static const struct ath12k_hif_ops ath12
 	.ppeds_irq_disable = ath12k_pci_ppeds_irq_disable,
 #endif
 	.dp_umac_reset_irq_config = ath12k_dp_umac_pci_config_irq,
-	.dp_umac_reset_enable_irq = ath12k_pcic_dp_umac_reset_enable_irq,
-	.dp_umac_reset_free_irq = ath12k_dp_umac_reset_free_irq,
+	.dp_umac_reset_enable_irq = ath12k_pci_dp_umac_reset_enable_irq,
+	.dp_umac_reset_free_irq = ath12k_pci_dp_umac_reset_free_irq,
 	.get_msi_irq =  ath12k_pci_get_msi_irq,
 };
 
--- a/drivers/net/wireless/ath/ath12k/pcic.h
+++ b/drivers/net/wireless/ath/ath12k/pcic.h
@@ -77,7 +77,6 @@ void ath12k_pcic_cmem_write32(struct ath
 u32 ath12k_pcic_cmem_read32(struct ath12k_base *ab, u32 addr);
 void ath12k_pcic_ext_irq_enable(struct ath12k_base *ab);
 void ath12k_pcic_ext_irq_disable(struct ath12k_base *ab);
-void ath12k_pcic_dp_umac_reset_enable_irq(struct ath12k_base *ab);
 u32 ath12k_pcic_get_window_start(struct ath12k_base *ab, u32 offset);
 void ath12k_pcic_ce_irqs_enable(struct ath12k_base *ab);
 void ath12k_pcic_ce_irq_disable_sync(struct ath12k_base *ab);
--- a/drivers/net/wireless/ath/ath12k/pci.h
+++ b/drivers/net/wireless/ath/ath12k/pci.h
@@ -156,6 +156,4 @@ struct pci_dev *ath12k_pci_get_dev_by_ab
 void ath12k_pci_ppeds_irq_enable(struct ath12k_base *ab, enum ppeds_irq_type type);
 void ath12k_pci_ppeds_irq_disable(struct ath12k_base *ab, enum ppeds_irq_type type);
 #endif
-int ath12k_dp_umac_pci_config_irq(struct ath12k_base *ab);
-void ath12k_dp_umac_reset_free_irq(struct ath12k_base *ab);
 #endif /* ATH12K_PCI_H */
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -106,6 +106,9 @@ struct ath12k_cfr_peer_tx_param;
 #define ATH12K_DEFAULT_ID		255
 #define ATH12K_FW_CFG_FILE		"firmware.dat"
 
+#define ATH12K_UMAC_RESET_IPC_IPQ5332	451
+#define ATH12K_UMAC_RESET_IPC_QCN6432	7
+
 enum ath12k_hw_rate_cck {
 	ATH12K_HW_RATE_CCK_LP_11M = 0,
 	ATH12K_HW_RATE_CCK_LP_5_5M,
@@ -255,6 +258,8 @@ struct ath12k_hw_params {
 	bool support_ce_manual_poll;
 	const struct pmm_remap *pmm_remap;
 	bool support_umac_reset;
+	bool umac_irq_line_reset;
+	u16 umac_reset_ipc;
 	int fw_mem_mode;
 	bool is_plink_preferable;
 	bool support_fse;
