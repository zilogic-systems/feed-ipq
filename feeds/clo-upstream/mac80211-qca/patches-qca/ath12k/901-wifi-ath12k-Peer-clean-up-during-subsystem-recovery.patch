From 54a8c165b256304c13f2c55d6c04f3d16d704435 Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Fri, 29 Mar 2024 18:52:04 -0700
Subject: [PATCH] wifi: ath12k: Subsystem recovery improvement

Currently, hostapd is not aware of the recovery operation. There are
some instances where hostapd can trigger an operation related to peers
or radios for which recovery in progress. 

The change reports a low ack to upper layer to disassoc existing sta to
cleanup the peers from driver. 

Change list:
	- Add support to report low ack to free the sta info.
        
Patch-depdendency:none
Patch-work:none

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  65 ++++++++++-
 drivers/net/wireless/ath/ath12k/core.h |   5 +
 drivers/net/wireless/ath/ath12k/mac.c  | 147 +++++++++++++++++++++----
 drivers/net/wireless/ath/ath12k/mhi.c  |   1 +
 4 files changed, 191 insertions(+), 27 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2259,6 +2259,51 @@ static void ath12k_core_post_reconfigure
 	}
 }
 
+static void ath12k_mac_peer_ab_disassoc(struct ath12k_base *ab)
+{
+	struct ath12k_peer *peer, *tmp;
+	struct ath12k_sta *ahsta;
+	struct ieee80211_sta *sta;
+
+	spin_lock_bh(&ab->base_lock);
+	list_for_each_entry_safe(peer, tmp, &ab->peers, list) {
+
+		if (!peer->vif)
+			continue;
+
+		/* In case of STA Vif type,
+		 * report disconnect will be sent during sta_restart work.
+		 */
+		if (peer->vif->type == NL80211_IFTYPE_STATION)
+			continue;
+
+		sta = peer->sta;
+		if (!sta)
+			continue;
+
+		ahsta = (struct ath12k_sta *)sta->drv_priv;
+		if (!ahsta->low_ack_sent) {
+			ath12k_dbg(ab, ATH12K_DBG_MAC,
+				   "sending low ack event during recovery to clean "
+				   "up peers (STA:%pM)\n", sta->addr);
+
+			/* Sending low ack event to hostapd to remove (free) the
+			 * existing STAs since FW is crashed and recovering at the momemt.
+			 * After recovery, FW comes up with no information about peers.
+			 * To stop any operation related to peers coming from upper
+			 * layers.
+			 * Here, 0xFFFF is used to differentiate between low ack event
+			 * sent during recovery versus normal low ack event. In normal,
+			 * low ack event, num_packets is not expected to be 0xFFFF.
+			 */
+			ieee80211_report_low_ack(sta,
+						 ATH12K_REPORT_LOW_ACK_NUM_PKT_SSR);
+			ahsta->low_ack_sent = true;
+		}
+	}
+	spin_unlock_bh(&ab->base_lock);
+}
+
 void ath12k_core_halt(struct ath12k *ar)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -2269,6 +2314,19 @@ void ath12k_core_halt(struct ath12k *ar)
 	ar->num_created_vdevs = 0;
 	ar->allocated_vdev_map = 0;
 
+	/* Send low ack disassoc to hostapd to free the peers from host
+	 * to associate fresh after recovery. It is expected that, this
+	 * low ack event to hostapd must free the stas from hostapd and
+	 * kernel before new association process starts.
+	 *
+	 * And also during ieee80211_reconfig, it should not add back the
+	 * existing stas as it is already freed from host due to low ack
+	 * event.
+	 */
+
+	if (ag->recovery_mode == ATH12K_MLO_RECOVERY_MODE0)
+		ath12k_mac_peer_ab_disassoc(ab);
+
 	ath12k_mac_peer_cleanup_all(ar);
 	cancel_work_sync(&ar->regd_update_work);
 	cancel_work_sync(&ar->agile_cac_abort_wq);
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -736,6 +736,8 @@ struct ath12k_link_sta {
 	u16 ast_idx;
 };
 
+#define ATH12K_REPORT_LOW_ACK_NUM_PKT_SSR 0xFFFF
+
 struct ath12k_sta {
 	struct ath12k_vif *ahvif;
  #ifdef CPTCFG_MAC80211_DEBUGFS
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1337,9 +1337,14 @@ void ath12k_mac_peer_cleanup_all(struct
 	list_for_each_entry_safe(peer, tmp, &ab->peers, list) {
 		ml_peer_id = peer->ml_peer_id & ~ATH12K_ML_PEER_ID_VALID;
 		rcu_assign_pointer(ab->peer_list[peer->peer_id], NULL);
-		if (peer->mlo)
+		ath12k_dbg(ab, ATH12K_DBG_PEER, "peer: %pM un-assigned from peer list[%d]\n",
+			   peer->addr, peer->peer_id);
+		if (peer->mlo) {
 			rcu_assign_pointer(ab->ml_peer_list[ml_peer_id][peer->pdev_idx],
 					   NULL);
+			ath12k_dbg(ab, ATH12K_DBG_PEER, "peer: %pM un-assigned from ML peer list[%d]\n",
+				   peer->addr, ml_peer_id);
+		}
 	}
 	spin_unlock_bh(&ab->base_lock);
 
@@ -1350,6 +1355,7 @@ void ath12k_mac_peer_cleanup_all(struct
 		peer_id = peer->peer_id;
 		ath12k_dp_rx_peer_tid_cleanup(ar, peer);
 		ath12k_peer_rhash_delete(ab, peer);
+		peer->sta = NULL;
 		list_del(&peer->list);
 #ifdef CPTCFG_ATH12K_SAWF
 	if (peer->sawf_ctx_peer.telemetry_peer_ctx)
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -455,9 +455,14 @@ void ath12k_peer_cleanup(struct ath12k *
 			continue;
 		ml_peer_id = peer->ml_peer_id & ~ATH12K_ML_PEER_ID_VALID;
 		rcu_assign_pointer(ab->peer_list[peer->peer_id], NULL);
-		if (peer->mlo)
+		ath12k_dbg(ab, ATH12K_DBG_PEER, "peer: %pM un-assigned from peer list[%d]\n",
+			   peer->addr, peer->peer_id);
+		if (peer->mlo) {
 			rcu_assign_pointer(ab->ml_peer_list[ml_peer_id][ar->pdev_idx],
 					   NULL);
+			ath12k_dbg(ab, ATH12K_DBG_PEER, "peer: %pM un-assigned from ML peer list[%d]\n",
+				   peer->addr, ml_peer_id);
+		}
 	}
 	spin_unlock_bh(&ab->base_lock);
 
@@ -544,10 +549,14 @@ int ath12k_peer_delete_send(struct ath12
 	}
 
 	rcu_assign_pointer(ab->peer_list[peer->peer_id], NULL);
+	ath12k_dbg(ab, ATH12K_DBG_PEER, "peer: %pM un-assigned from peer list[%d]\n",
+		   peer->addr, peer->peer_id);
 	if (peer->mlo) {
 		ml_peer_id = peer->ml_peer_id & ~ATH12K_ML_PEER_ID_VALID;
 		rcu_assign_pointer(ab->ml_peer_list[ml_peer_id][peer->pdev_idx],
 				   NULL);
+		ath12k_dbg(ab, ATH12K_DBG_PEER, "peer: %pM un-assigned from ML peer list[%d]\n",
+			   peer->addr, ml_peer_id);
 	}
 
 	spin_unlock_bh(&ab->base_lock);
@@ -559,6 +568,13 @@ int ath12k_peer_delete_send(struct ath12
 
 	reinit_completion(&ar->peer_delete_done);
 
+	if (test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags)) {
+		ath12k_warn(ab, "skipped peer delete cmd for vdev_id %d addr %pM during recovery ret:%d\n",
+			    vdev_id, addr, -EHOSTDOWN);
+
+		return -EHOSTDOWN;
+	}
+
 	ret = ath12k_wmi_send_peer_delete_cmd(ar, addr, vdev_id);
 	if (ret) {
 		ath12k_warn(ab,
@@ -637,12 +653,6 @@ int ath12k_ml_link_peers_delete(struct a
 			continue;
 		cancel_work_sync(&arsta->update_wk);
 
-		if (test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags) ||
-		    test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags) ||
-		    test_bit(ATH12K_FLAG_UMAC_RECOVERY_START, &ar->ab->dev_flags))
-			continue;
-
-		cancel_work_sync(&arsta->update_wk);
 		mutex_lock(&ar->conf_mutex);
 		ath12k_dp_peer_cleanup(ar, arvif->vdev_id, arsta->addr);
 
@@ -857,6 +867,8 @@ int ath12k_peer_create(struct ath12k *ar
 
 			rcu_assign_pointer(ab->ml_peer_list[ml_peer_id][ar->pdev_idx],
 					   peer);
+			ath12k_dbg(ab, ATH12K_DBG_PEER, "ML peer: %pM assigned to ML peer list[%d]\n",
+				   peer->addr, peer->ml_peer_id);
 		} else {
 			peer->ml_peer_id = ATH12K_MLO_PEER_ID_INVALID;
 			peer->mlo = false;
@@ -864,6 +876,8 @@ int ath12k_peer_create(struct ath12k *ar
 	}
 
 	rcu_assign_pointer(ab->peer_list[peer_id], peer);
+	ath12k_dbg(ab, ATH12K_DBG_PEER, "peer: %pM assigned to peer list[%d]\n",
+		   peer->addr, peer->peer_id);
 
 	ar->num_peers++;
 
