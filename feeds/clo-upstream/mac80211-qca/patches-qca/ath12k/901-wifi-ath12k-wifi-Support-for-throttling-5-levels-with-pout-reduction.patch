From 70e829394a9fa9165c1e786f9f895eccc84b34b0 Mon Sep 17 00:00:00 2001
From: Harish Rachakonda <quic_rachakon@quicinc.com>
Date: Tue, 23 Apr 2024 10:21:39 +0530
Subject: [PATCH] wifi: ath12k: Support for throttling 5 levels with pout
reduction

A new parameter pout reduction is introduced in thermal throttling to
reduce txpower for each level and the new level introduced. Pout reduction
and new level will be enabled if FW populates the service bit
wmi_service_enh_thermal_throttle_support.

Configure temperature, duty cycle and pout reduction values for each level.

Signed-off-by: Harish Rachakonda <quic_rachakon@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/thermal.c | 69 ++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/thermal.h | 23 ++++++++
 drivers/net/wireless/ath/ath12k/wmi.c     | 56 +++++++++++++-----
 drivers/net/wireless/ath/ath12k/wmi.h     |  6 +-
 4 files changed, 131 insertions(+), 23 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/thermal.c
+++ b/drivers/net/wireless/ath/ath12k/thermal.c
@@ -141,29 +141,6 @@ ath12k_pdev_notify_power_save_metric(u8
 	}
 }
 
-static struct tt_level_config tt_level_configs[THERMAL_LEVELS] = {
-		{ /* Level 0 */
-			ATH12K_THERMAL_LVL0_TEMP_LOW_MARK,
-			ATH12K_THERMAL_LVL0_TEMP_HIGH_MARK,
-			ATH12K_THERMAL_LVL0_DUTY_CYCLE, 0
-		},
-		{ /* Level 1 */
-			ATH12K_THERMAL_LVL1_TEMP_LOW_MARK,
-			ATH12K_THERMAL_LVL1_TEMP_HIGH_MARK,
-			ATH12K_THERMAL_LVL1_DUTY_CYCLE, 0
-		},
-		{ /* Level 2 */
-			ATH12K_THERMAL_LVL2_TEMP_LOW_MARK,
-			ATH12K_THERMAL_LVL2_TEMP_HIGH_MARK,
-			ATH12K_THERMAL_LVL2_DUTY_CYCLE, 0
-		},
-		{ /* Level 3 */
-			ATH12K_THERMAL_LVL3_TEMP_LOW_MARK,
-			ATH12K_THERMAL_LVL3_TEMP_HIGH_MARK,
-			ATH12K_THERMAL_LVL3_DUTY_CYCLE, 0
-		}
-};
-
 static int
 netstandby_eawtp_wifi_notify_active_eth_ports(void *app_data,
 					      struct eawtp_port_info *ntfy_info)
@@ -263,6 +240,63 @@ void ath12k_ath_update_active_pdev_count
 }
 #endif
 
+static struct tt_level_config tt_level_configs[ATH12K_THERMAL_LEVELS][ENHANCED_THERMAL_LEVELS] = {
+	{
+		{ /* Level 0 */
+			ATH12K_THERMAL_LVL0_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL0_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL0_DUTY_CYCLE, 0
+		},
+		{ /* Level 1 */
+			ATH12K_THERMAL_LVL1_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL1_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL1_DUTY_CYCLE, 0
+		},
+		{ /* Level 2 */
+			ATH12K_THERMAL_LVL2_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL2_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL2_DUTY_CYCLE, 0
+		},
+		{ /* Level 3 */
+			ATH12K_THERMAL_LVL3_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL3_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL3_DUTY_CYCLE, 0
+		}
+	},
+	{
+		{ /* Level 0 */
+			ATH12K_THERMAL_LVL0_V2_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL0_V2_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL0_V2_DUTY_CYCLE, 0,
+			THERMAL_CONFIG_POUT0
+		},
+		{ /* Level 1 */
+			ATH12K_THERMAL_LVL1_V2_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL1_V2_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL1_V2_DUTY_CYCLE, 0,
+			THERMAL_CONFIG_POUT1
+		},
+		{ /* Level 2 */
+			ATH12K_THERMAL_LVL2_V2_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL2_V2_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL2_V2_DUTY_CYCLE, 0,
+			THERMAL_CONFIG_POUT2,
+		},
+		{ /* Level 3 */
+			ATH12K_THERMAL_LVL3_V2_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL3_V2_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL3_V2_DUTY_CYCLE, 0,
+			THERMAL_CONFIG_POUT3,
+		},
+		{ /* Level 4 */
+			ATH12K_THERMAL_LVL4_V2_TEMP_LOW_MARK,
+			ATH12K_THERMAL_LVL4_V2_TEMP_HIGH_MARK,
+			ATH12K_THERMAL_LVL4_V2_DUTY_CYCLE, 0,
+			THERMAL_CONFIG_POUT4
+		}
+	}
+};
+
 static int
 ath12k_thermal_get_max_throttle_state(struct thermal_cooling_device *cdev,
 				      unsigned long *state)
@@ -366,11 +400,19 @@ void ath12k_thermal_event_temperature(st
 
 void ath12k_thermal_event_throt_level(struct ath12k *ar, int curr_level)
 {
-	if (curr_level >= THERMAL_LEVELS)
+	if (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map) &&
+	    curr_level >= ENHANCED_THERMAL_LEVELS)
+		return;
+	else if (curr_level >= THERMAL_LEVELS)
 		return;
 
 	spin_lock_bh(&ar->data_lock);
-	ar->thermal.throttle_state = tt_level_configs[curr_level].dcoffpercent;
+	if (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map))
+		ar->thermal.throttle_state =
+			tt_level_configs[ATH12K_ENHANCED_THERMAL_LEVEL][curr_level].dcoffpercent;
+	else
+		ar->thermal.throttle_state =
+			tt_level_configs[ATH12K_DEFAULT_THERMAL_LEVEL][curr_level].dcoffpercent;
 	spin_unlock_bh(&ar->data_lock);
 }
 
@@ -401,12 +443,32 @@ int ath12k_thermal_set_throttling(struct
 	/* After how many duty cycles the FW sends stats to host */
 	param.dc_per_event = 0x2;
 
-	tt_level_configs[0].dcoffpercent = throttle_state;
-	for (level = 0; level < THERMAL_LEVELS; level++) {
-		param.levelconf[level].tmplwm = tt_level_configs[level].tmplwm;
-		param.levelconf[level].tmphwm = tt_level_configs[level].tmphwm;
-		param.levelconf[level].dcoffpercent = tt_level_configs[level].dcoffpercent;
-		param.levelconf[level].priority = 0; /* disable all data tx queues */
+	if (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map)) {
+		tt_level_configs[ATH12K_ENHANCED_THERMAL_LEVEL][0].dcoffpercent = throttle_state;
+		for (level = 0; level < ENHANCED_THERMAL_LEVELS; level++) {
+			param.levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][level].tmplwm =
+				tt_level_configs[ATH12K_ENHANCED_THERMAL_LEVEL][level].tmplwm;
+			param.levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][level].tmphwm =
+				tt_level_configs[ATH12K_ENHANCED_THERMAL_LEVEL][level].tmphwm;
+			param.levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][level].dcoffpercent =
+				tt_level_configs[ATH12K_ENHANCED_THERMAL_LEVEL][level].dcoffpercent;
+			/* disable all data tx queues */
+			param.levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][level].priority = 0;
+			param.levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][level].pout_reduction_db =
+				tt_level_configs[ATH12K_ENHANCED_THERMAL_LEVEL][level].pout_reduction_db;
+		}
+	} else {
+		tt_level_configs[ATH12K_DEFAULT_THERMAL_LEVEL][0].dcoffpercent = throttle_state;
+		for (level = 0; level < THERMAL_LEVELS; level++) {
+			param.levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][level].tmplwm =
+				tt_level_configs[ATH12K_DEFAULT_THERMAL_LEVEL][level].tmplwm;
+			param.levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][level].tmphwm =
+				tt_level_configs[ATH12K_DEFAULT_THERMAL_LEVEL][level].tmphwm;
+			param.levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][level].dcoffpercent =
+				tt_level_configs[ATH12K_DEFAULT_THERMAL_LEVEL][level].dcoffpercent;
+			/* disable all data tx queues */
+			param.levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][level].priority = 0;
+		}
 	}
 
 	ret = ath12k_wmi_send_thermal_mitigation_cmd(ar, &param);
--- a/drivers/net/wireless/ath/ath12k/thermal.h
+++ b/drivers/net/wireless/ath/ath12k/thermal.h
@@ -21,11 +21,37 @@
 #define ATH12K_THERMAL_LVL3_TEMP_LOW_MARK 105
 #define ATH12K_THERMAL_LVL3_TEMP_HIGH_MARK 120
 
+#define ATH12K_THERMAL_LVL0_V2_TEMP_LOW_MARK -100
+#define ATH12K_THERMAL_LVL0_V2_TEMP_HIGH_MARK 95
+#define ATH12K_THERMAL_LVL1_V2_TEMP_LOW_MARK 90
+#define ATH12K_THERMAL_LVL1_V2_TEMP_HIGH_MARK 100
+#define ATH12K_THERMAL_LVL2_V2_TEMP_LOW_MARK 95
+#define ATH12K_THERMAL_LVL2_V2_TEMP_HIGH_MARK 105
+#define ATH12K_THERMAL_LVL3_V2_TEMP_LOW_MARK 100
+#define ATH12K_THERMAL_LVL3_V2_TEMP_HIGH_MARK 110
+#define ATH12K_THERMAL_LVL4_V2_TEMP_LOW_MARK 105
+#define ATH12K_THERMAL_LVL4_V2_TEMP_HIGH_MARK 120
+
 #define ATH12K_THERMAL_LVL0_DUTY_CYCLE 0
 #define ATH12K_THERMAL_LVL1_DUTY_CYCLE 50
 #define ATH12K_THERMAL_LVL2_DUTY_CYCLE 90
 #define ATH12K_THERMAL_LVL3_DUTY_CYCLE 100
 
+#define ATH12K_THERMAL_LVL0_V2_DUTY_CYCLE ATH12K_THERMAL_LVL0_DUTY_CYCLE
+#define ATH12K_THERMAL_LVL1_V2_DUTY_CYCLE ATH12K_THERMAL_LVL0_DUTY_CYCLE
+#define ATH12K_THERMAL_LVL2_V2_DUTY_CYCLE ATH12K_THERMAL_LVL1_DUTY_CYCLE
+#define ATH12K_THERMAL_LVL3_V2_DUTY_CYCLE ATH12K_THERMAL_LVL2_DUTY_CYCLE
+#define ATH12K_THERMAL_LVL4_V2_DUTY_CYCLE ATH12K_THERMAL_LVL3_DUTY_CYCLE
+
+#define THERMAL_CONFIG_POUT0                        0
+#define THERMAL_CONFIG_POUT1                        12
+#define THERMAL_CONFIG_POUT2                        12
+#define THERMAL_CONFIG_POUT3                        12
+#define THERMAL_CONFIG_POUT4                        12
+
+#define ATH12K_DEFAULT_THERMAL_LEVEL 0
+#define ATH12K_ENHANCED_THERMAL_LEVEL 1
+
 #define ATH12K_FW_THERMAL_THROTTLING_ENABLE  1
 #define ATH12K_THERMAL_THROTTLE_MAX     100
 #define ATH12K_THERMAL_DEFAULT_DUTY_CYCLE 100
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -4461,7 +4461,10 @@ ath12k_wmi_send_thermal_mitigation_cmd(s
 	struct sk_buff *skb;
 	int i, ret, len;
 
-	len = sizeof(*cmd) + TLV_HDR_SIZE + THERMAL_LEVELS * sizeof(*lvl_conf);
+	if (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map))
+		len = sizeof(*cmd) + TLV_HDR_SIZE + ENHANCED_THERMAL_LEVELS * sizeof(*lvl_conf);
+	else
+		len = sizeof(*cmd) + TLV_HDR_SIZE + THERMAL_LEVELS * sizeof(*lvl_conf);
 
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
 	if (!skb)
@@ -4476,25 +4479,53 @@ ath12k_wmi_send_thermal_mitigation_cmd(s
 	cmd->enable = cpu_to_le32(arg->enable);
 	cmd->dc = cpu_to_le32(arg->dc);
 	cmd->dc_per_event = cpu_to_le32(arg->dc_per_event);
-	cmd->therm_throt_levels = cpu_to_le32(THERMAL_LEVELS);
+	if (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map))
+		cmd->therm_throt_levels = cpu_to_le32(ENHANCED_THERMAL_LEVELS);
+	else
+		cmd->therm_throt_levels = cpu_to_le32(THERMAL_LEVELS);
 
 	tlv = (struct wmi_tlv *)(skb->data + sizeof(*cmd));
-	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT,
-					 THERMAL_LEVELS * sizeof(*lvl_conf));
+	if (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map))
+		tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT,
+						 ENHANCED_THERMAL_LEVELS * sizeof(*lvl_conf));
+	else
+		tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT,
+						 THERMAL_LEVELS * sizeof(*lvl_conf));
 
 	lvl_conf = (struct wmi_therm_throt_level_config_info *)(skb->data +
 								sizeof(*cmd) +
 								TLV_HDR_SIZE);
-	for (i = 0; i < THERMAL_LEVELS; i++) {
-		lvl_conf->tlv_header =
-			ath12k_wmi_tlv_cmd_hdr(WMI_TAG_THERM_THROT_LEVEL_CONFIG_INFO,
-					       sizeof(*lvl_conf));
-
-		lvl_conf->temp_lwm = arg->levelconf[i].tmplwm;
-		lvl_conf->temp_hwm = arg->levelconf[i].tmphwm;
-		lvl_conf->dc_off_percent = arg->levelconf[i].dcoffpercent;
-		lvl_conf->prio = arg->levelconf[i].priority;
-		lvl_conf++;
+
+	if (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map)) {
+		for (i = 0; i < ENHANCED_THERMAL_LEVELS; i++) {
+			lvl_conf->tlv_header =
+				ath12k_wmi_tlv_cmd_hdr(WMI_TAG_THERM_THROT_LEVEL_CONFIG_INFO,
+						       sizeof(*lvl_conf));
+
+			lvl_conf->temp_lwm =
+				arg->levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][i].tmplwm;
+			lvl_conf->temp_hwm =
+				arg->levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][i].tmphwm;
+			lvl_conf->dc_off_percent =
+				arg->levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][i].dcoffpercent;
+			lvl_conf->prio = arg->levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][i].priority;
+			lvl_conf->pout_reduction_25db =
+				arg->levelconf[ATH12K_ENHANCED_THERMAL_LEVEL][i].pout_reduction_db;
+			lvl_conf++;
+		}
+	} else {
+		for (i = 0; i < THERMAL_LEVELS; i++) {
+			lvl_conf->tlv_header =
+				ath12k_wmi_tlv_cmd_hdr(WMI_TAG_THERM_THROT_LEVEL_CONFIG_INFO,
+						       sizeof(*lvl_conf));
+
+			lvl_conf->temp_lwm = arg->levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][i].tmplwm;
+			lvl_conf->temp_hwm = arg->levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][i].tmphwm;
+			lvl_conf->dc_off_percent =
+				arg->levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][i].dcoffpercent;
+			lvl_conf->prio = arg->levelconf[ATH12K_DEFAULT_THERMAL_LEVEL][i].priority;
+			lvl_conf++;
+		}
 	}
 
 	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_THERM_THROT_SET_CONF_CMDID);
@@ -4506,7 +4537,9 @@ ath12k_wmi_send_thermal_mitigation_cmd(s
 	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
 		   "WMI vdev set thermal throt pdev_id %d enable %d dc %d dc_per_event %x levels %d\n",
 		   ar->pdev->pdev_id, arg->enable, arg->dc,
-		   arg->dc_per_event, THERMAL_LEVELS);
+		   arg->dc_per_event,
+		   (test_bit(WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION, ar->ab->wmi_ab.svc_map) ?
+		   ENHANCED_THERMAL_LEVELS : THERMAL_LEVELS));
 
 	return ret;
 }
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2454,6 +2454,7 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_PEER_METADATA_V1A_V1B_SUPPORT = 365,
 	WMI_TLV_SERVICE_RADAR_FLAGS_SUPPORT = 390,
 	WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT = 395,
+	WMI_TLV_SERVICE_THERM_THROT_POUT_REDUCTION = 410,
 	WMI_MAX_EXT2_SERVICE,
 };
 
@@ -4830,11 +4831,14 @@ struct wmi_init_country_cmd {
 } __packed;
 
 #define THERMAL_LEVELS  4
+#define ENHANCED_THERMAL_LEVELS  5
+#define ATH12K_THERMAL_LEVELS 2
 struct tt_level_config {
 	u32 tmplwm;
 	u32 tmphwm;
 	u32 dcoffpercent;
 	u32 priority;
+	u32 pout_reduction_db;
 };
 
 struct wmi_therm_throt_stats_event {
@@ -4849,7 +4853,7 @@ struct ath12k_wmi_thermal_mitigation_arg
 	u32 enable;
 	u32 dc;
 	u32 dc_per_event;
-	struct tt_level_config levelconf[THERMAL_LEVELS];
+	struct tt_level_config levelconf[ATH12K_THERMAL_LEVELS][ENHANCED_THERMAL_LEVELS];
 };
 
 struct wmi_therm_throt_config_request_cmd {
@@ -4867,6 +4871,7 @@ struct wmi_therm_throt_level_config_info
 	__le32 temp_hwm;
 	__le32 dc_off_percent;
 	__le32 prio;
+	__le32 pout_reduction_25db;
 } __packed;
 
 struct wmi_delba_send_cmd {
