From 3d6c7c13a3a0ec991928bb0da5a09a870c13a6ed Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Mon, 8 Jan 2024 21:33:38 +0530
Subject: [PATCH] wifi: ath12k: add critical update changes for ML link
 addition

Addition of new link to existing MLD qualifies as a Critical
update (IEEE P802.11be/D5.1-35.3.10).

Current CU update logic lacks CU category 2 handling for non-tx
BSS'es whereas link addition is categorized under critical update
category 2 in FW.
Add changes update the CU vdev bitmap to FW during beacon set,
based on link's elemid added/modified flag for non-tx BSS also.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 59 ++++++++++++++-------------
 1 file changed, 31 insertions(+), 28 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 95c3c27..7dbdc7a 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -2864,42 +2864,53 @@ int ath12k_wmi_send_bcn_offload_control_cmd(struct ath12k *ar,
 }
 
 static void ath12k_wmi_bcn_fill_ml_info(struct ath12k_link_vif *arvif,
-					struct wmi_bcn_tmpl_ml_info *ml_info,
-					u64 non_tx_ml_vdev_bmap)
+					struct wmi_bcn_tmpl_ml_info *ml_info)
 {
 	struct ath12k_base *ab = arvif->ar->ab;
-	struct ieee80211_bss_conf *link_conf;
+	struct ieee80211_bss_conf *link_conf, *tx_link_conf;
+	struct ath12k_link_vif *arvif_iter;
 	u32 vdev_id = arvif->vdev_id;
 	u64 vdev_map_cat1 = 0;
 	u64 vdev_map_cat2 = 0;
 
 	rcu_read_lock();
 
-	link_conf = ath12k_get_link_bss_conf(arvif);
-	if (!link_conf) {
+	tx_link_conf = ath12k_get_link_bss_conf(arvif);
+	if (!tx_link_conf) {
 		rcu_read_unlock();
 		goto err_fill_ml_info;
 	}
-
-	rcu_read_unlock();
+	/* Fill CU flags for non-tx vdevs while setting tx vdev beacon.
+	 */
+	list_for_each_entry(arvif_iter, &arvif->ar->arvifs, list) {
+		if (arvif_iter != arvif && arvif_iter->tx_vdev_id == arvif->vdev_id &&
+		    ath12k_mac_is_ml_arvif(arvif_iter)) {
+			link_conf = ath12k_get_link_bss_conf(arvif_iter);
+			if (!link_conf) {
+				rcu_read_unlock();
+				goto err_fill_ml_info;
+			}
+			/* If this is cu cat 1 for tx vdev, then it applies
+			 * to non-tx vdev as well.
+			 */
+			if (link_conf->elemid_added || tx_link_conf->elemid_added)
+				set_bit(arvif_iter->vdev_id, &vdev_map_cat1);
+			if (link_conf->elemid_modified)
+				set_bit(arvif_iter->vdev_id, &vdev_map_cat2);
+		}
+	}
 
 	ml_info->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_BCN_TMPL_ML_INFO_CMD,
 						     sizeof(*ml_info));
 	ml_info->hw_link_id = cpu_to_le32(arvif->ar->pdev->hw_link_id);
 
-	/* if this is cu cat 1 for tx vdev, then it applies to all
-	 * non-tx vdevs as well set all non-tx mld's vdev id in bitmap
-	 */
-	if (link_conf->elemid_added) {
+	if (tx_link_conf->elemid_added)
 		set_bit(vdev_id, &vdev_map_cat1);
-		vdev_map_cat1 |= non_tx_ml_vdev_bmap;
-	}
 
-	if (link_conf->elemid_modified) {
+	if (tx_link_conf->elemid_modified)
 		set_bit(vdev_id, &vdev_map_cat2);
-		vdev_map_cat2 |= non_tx_ml_vdev_bmap;
-	}
 
+	rcu_read_unlock();
 err_fill_ml_info:
 	ml_info->cu_vdev_map_cat1_lo =
 			   cpu_to_le32(ATH12K_GET_LOWER_32_BITS(vdev_map_cat1));
@@ -2911,29 +2922,21 @@ err_fill_ml_info:
 			   cpu_to_le32(ATH12K_GET_UPPER_32_BITS(vdev_map_cat2));
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI,
-		   "wmi CU filled ml info cat1_lo=0x%x cat1_hi=0x%x cat2_lo=0x%x cat2_hi=0x%x non_tx_ml_bmap=%llu\n",
+		   "wmi CU filled ml info cat1_lo=0x%x cat1_hi=0x%x cat2_lo=0x%x cat2_hi=0x%x\n",
 		   ml_info->cu_vdev_map_cat1_lo, ml_info->cu_vdev_map_cat1_hi,
-		   ml_info->cu_vdev_map_cat2_lo, ml_info->cu_vdev_map_cat2_hi,
-		   non_tx_ml_vdev_bmap);
+		   ml_info->cu_vdev_map_cat2_lo, ml_info->cu_vdev_map_cat2_hi);
 }
 
 static void ath12k_wmi_fill_cu_arg(struct ath12k_link_vif *arvif,
 				   struct wmi_critical_update_arg *cu_arg)
 {
 	struct ath12k_base *ab = arvif->ar->ab;
-	struct ath12k_link_vif *arvif_iter;
 	struct wmi_bcn_tmpl_ml_info *ml_info;
 	int i;
-	u64 non_tx_ml_vdev_bmap = 0;
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_prb_resp_tmpl_ml_info *ar_ml_info;
 
-	list_for_each_entry(arvif_iter, &arvif->ar->arvifs, list) {
-		if (arvif_iter != arvif && arvif_iter->tx_vdev_id == arvif->vdev_id &&
-		    ath12k_mac_is_ml_arvif(arvif_iter))
-			set_bit(arvif_iter->vdev_id, &non_tx_ml_vdev_bmap);
-	}
-	if (!ath12k_mac_is_ml_arvif(arvif) && !non_tx_ml_vdev_bmap)
+	if (!ath12k_mac_is_ml_arvif(arvif))
 		return;
 
 	/* Fill ML params
@@ -2956,7 +2959,7 @@ static void ath12k_wmi_fill_cu_arg(struct ath12k_link_vif *arvif,
 	} else {
 		for (i = 0; i < cu_arg->num_ml_info; i++) {
 			ml_info = &cu_arg->ml_info[i];
-			ath12k_wmi_bcn_fill_ml_info(arvif, ml_info, non_tx_ml_vdev_bmap);
+			ath12k_wmi_bcn_fill_ml_info(arvif, ml_info);
 			/* Retain copy of CU vdev bitmap. Which are used to
 			 * update cu_vdev_map in 20TU probe response template.
 			 */
-- 
2.34.1

