From 36e24c8f6fab0dce810b4c17538b11e2562985bc Mon Sep 17 00:00:00 2001
From: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
Date: Mon, 6 May 2024 13:12:28 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Remove dma map and unmap of skb data in DL

Remove dma map and unmap of skb data in DL path. Replace it
by virt_to_phys which gives improvement of 50-70 mbps.

Patch Dependency : 720-c-ath12k-Optimize-the-tx-completion-routine-by-avoid-a.patch
		   751-wifi-ath12k-avoid-dma-sync-cpu-during-dp_tx.patch

Signed-off-by: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 64 +++++--------------------
 1 file changed, 12 insertions(+), 52 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -272,7 +272,6 @@ int ath12k_dp_tx_direct(struct ath12k_li
 	struct ath12k_tx_desc_info *tx_desc = NULL;
 	struct ath12k_skb_cb *skb_cb = ATH12K_SKB_CB(skb);
 	struct hal_srng *tcl_ring;
-	struct device *dev = arvif->dev;
 	void *hal_tcl_desc;
 	struct hal_tcl_data_cmd tcl_desc;
 	u8 hal_ring_id, ring_id;
@@ -301,14 +300,7 @@ int ath12k_dp_tx_direct(struct ath12k_li
 	}
 
 	dmac_clean_range_no_dsb(skb->data, skb->data + len);
-	paddr = dma_map_single_attrs(dev, skb->data, len,
-				     DMA_TO_DEVICE, DMA_ATTR_SKIP_CPU_SYNC);
-	if (unlikely(dma_mapping_error(dev, paddr))) {
-		atomic_inc(&ab->soc_stats.tx_err.misc_fail);
-		ath12k_warn(ab, "failed to DMA map data Tx buffer\n");
-		ret = -ENOMEM;
-		goto fail_remove_tx_buf;
-	}
+	paddr = (dma_addr_t)virt_to_phys(skb->data);
 
 	tx_desc->skb = skb;
 	tx_desc->mac_id = arvif->pdev_idx;
@@ -386,7 +378,7 @@ int ath12k_dp_tx_direct(struct ath12k_li
 		spin_unlock_bh(&tcl_ring->lock);
 		ab->soc_stats.tx_err.desc_na[ring_id]++;
 		ret = -ENOMEM;
-		goto fail_unmap_dma;
+		goto fail_remove_tx_buf;
 	}
 
 	ab->soc_stats.tx_enqueued[ring_id]++;
@@ -401,9 +393,6 @@ int ath12k_dp_tx_direct(struct ath12k_li
 
 	return 0;
 
-fail_unmap_dma:
-	dma_unmap_single(ab->dev, skb_cb->paddr, 256, DMA_TO_DEVICE);
-
 fail_remove_tx_buf:
 	ath12k_dp_tx_release_txbuf(dp, tx_desc, ring_id);
 	arvif->link_stats.tx_dropped++;
@@ -617,13 +606,9 @@ skip_htt_meta:
 		ti.encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
 	}
 
-	ti.paddr = dma_map_single(ab->dev, skb->data, skb->len, DMA_TO_DEVICE);
-	if (unlikely(dma_mapping_error(ab->dev, ti.paddr))) {
-		atomic_inc(&ab->soc_stats.tx_err.misc_fail);
-		ath12k_warn(ab, "failed to DMA map data Tx buffer\n");
-		ret = -ENOMEM;
-		goto fail_remove_tx_buf;
-	}
+
+	dmac_clean_range_no_dsb(skb->data, skb->data + skb->len);
+	ti.paddr = (dma_addr_t)virt_to_phys(skb->data);
 
 	tx_desc->skb = skb;
 	tx_desc->mac_id = ar->pdev_idx;
@@ -638,7 +623,7 @@ skip_htt_meta:
 		skb_ext_desc = dev_alloc_skb(sizeof(struct hal_tx_msdu_ext_desc));
 		if (!skb_ext_desc) {
 			ret = -ENOMEM;
-			goto fail_unmap_dma;
+			goto fail_remove_tx_buf;
 		}
 
 		skb_put(skb_ext_desc, sizeof(struct hal_tx_msdu_ext_desc));
@@ -652,19 +637,13 @@ skip_htt_meta:
 			if (ret < 0) {
 				ath12k_dbg(ab, ATH12K_DBG_DP_TX,
 					"Failed to add HTT meta data, dropping packet\n");
-				goto fail_unmap_dma;
+				goto fail_remove_ext_desc;
 			}
 		}
 
-		ti.paddr = dma_map_single(ab->dev, skb_ext_desc->data,
-					  skb_ext_desc->len, DMA_TO_DEVICE);
-		ret = dma_mapping_error(ab->dev, ti.paddr);
-		if (ret) {
-			atomic_inc(&ab->soc_stats.tx_err.misc_fail);
-			ath12k_warn(ab, "Failed to DMA map data Tx buffer\n");
-			dev_kfree_skb_any(skb_ext_desc);
-			goto fail_unmap_dma;
-		}
+
+		dmac_clean_range_no_dsb(skb_ext_desc->data, skb_ext_desc->data + skb_ext_desc->len);
+		ti.paddr = (dma_addr_t)virt_to_phys(skb_ext_desc->data);
 
 		ti.data_len = skb_ext_desc->len;
 		ti.type = HAL_TCL_DESC_TYPE_EXT_DESC;
@@ -687,7 +666,7 @@ skip_htt_meta:
 		ab->soc_stats.tx_err.desc_na[ti.ring_id]++;
 		ret = -ENOMEM;
 
-		goto fail_unmap_dma_ext_desc;
+		goto fail_remove_ext_desc;
 	}
 
 	ab->soc_stats.tx_enqueued[ti.ring_id]++;
@@ -759,21 +738,11 @@ skip_htt_meta:
 
 	return 0;
 
-fail_unmap_dma_ext_desc:
+fail_remove_ext_desc:
 	if (unlikely(msdu_ext_desc)) {
-	       dma_unmap_single(ab->dev, ti.paddr,
-				skb_ext_desc->len, DMA_TO_DEVICE);
 	       dev_kfree_skb_any(skb_ext_desc);
 	}
 
-fail_unmap_dma:
-	dma_unmap_single(ab->dev, skb_cb->paddr, skb->len, DMA_TO_DEVICE);
-
-	if (skb_cb->paddr_ext_desc)
-		dma_unmap_single(ab->dev, skb_cb->paddr_ext_desc,
-				 sizeof(struct hal_tx_msdu_ext_desc),
-				 DMA_TO_DEVICE);
-
 fail_remove_tx_buf:
 	ath12k_dp_tx_release_txbuf(dp, tx_desc, ti.ring_id);
 
@@ -804,12 +773,7 @@ static void ath12k_dp_tx_free_txbuf(stru
 	ar = ab->pdevs[mac_id].ar;
 	flags = skb_cb->flags;
 
-	dma_unmap_single_attrs(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE,
-			     DMA_ATTR_SKIP_CPU_SYNC);
 	if (unlikely(skb_ext_desc)) {
-		dma_unmap_single_attrs(ab->dev, skb_cb->paddr_ext_desc,
-				       skb_ext_desc->len,
-				       DMA_TO_DEVICE, DMA_ATTR_SKIP_CPU_SYNC);
 		dev_kfree_skb_any(skb_ext_desc);
 	}
 	if (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS))
@@ -887,11 +851,7 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	if (drop_disable)
 		attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 
-	dma_unmap_single_attrs(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE, attrs);
-
 	if (unlikely(skb_ext_desc)) {
-		dma_unmap_single_attrs(ab->dev, skb_cb->paddr_ext_desc,
-				       skb_ext_desc->len, DMA_TO_DEVICE, attrs);
 		dev_kfree_skb_any(skb_ext_desc);
 	}
 
@@ -1736,12 +1696,7 @@ int ath12k_dp_tx_completion_handler(stru
 
 		skb_cb =  (struct ath12k_skb_cb *)&IEEE80211_SKB_CB(msdu)->driver_data;
 		flags = skb_cb->flags;
-		dma_unmap_single_attrs(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE,
-				     DMA_ATTR_SKIP_CPU_SYNC);
 		if (unlikely(skb_ext_desc)) {
-			dma_unmap_single_attrs(ab->dev, skb_cb->paddr_ext_desc,
-					       skb_ext_desc->len,
-					       DMA_TO_DEVICE, DMA_ATTR_SKIP_CPU_SYNC);
 			dev_kfree_skb_any(skb_ext_desc);
 		}
 		/* Free skb here if stats is disabled */
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1658,11 +1658,7 @@ void ath12k_dp_umac_txrx_desc_cleanup(st
 				tx_desc_info[k].skb_ext_desc = NULL;
 				tx_desc_info[k].in_use = false;
 				list_add_tail(&tx_desc_info[k].list, &dp->tx_desc_free_list[i]);
-				dma_unmap_single(ab->dev, ATH12K_SKB_CB(skb)->paddr,
-						 skb->len, DMA_TO_DEVICE);
 				if (tx_desc_info[k].skb_ext_desc) {
-					dma_unmap_single(ab->dev, ATH12K_SKB_CB(skb)->paddr_ext_desc,
-							 tx_desc_info[k].skb_ext_desc->len, DMA_TO_DEVICE);
 					dev_kfree_skb_any(tx_desc_info[k].skb_ext_desc);
 				}
 				dev_kfree_skb_any(skb);
@@ -1734,12 +1730,8 @@ static void ath12k_dp_cc_cleanup(struct
 					continue;
 
 				tx_desc_info[k].skb = NULL;
-				dma_unmap_single(ab->dev, ATH12K_SKB_CB(skb)->paddr,
-						 skb->len, DMA_TO_DEVICE);
 
 				if (tx_desc_info[k].skb_ext_desc) {
-					dma_unmap_single(ab->dev, ATH12K_SKB_CB(skb)->paddr_ext_desc,
-							 tx_desc_info[k].skb_ext_desc->len, DMA_TO_DEVICE);
 					dev_kfree_skb_any(tx_desc_info[k].skb_ext_desc);
 				}
 				dev_kfree_skb_any(skb);
