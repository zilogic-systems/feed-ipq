From e2abd5a6361f676298583e6d17a364906ae5dd26 Mon Sep 17 00:00:00 2001
From: Sarika Sharma <quic_sarishar@quicinc.com>
Date: Thu, 16 May 2024 15:00:22 +0530
Subject: [PATCH] wifi: ath12k: Add support to process WDS null frame with
 4addr

Currently all the NULL frame packets are consumed by hardware or
firmware and not handed over to host for any processing. In WDS mode
station would be sending 4address NULL frame during assoc succes case
and AP uses that frame to create AP_VLAN interface.
Since firmware consumes the frame driver triggers AP_VLAN creation
using EAPOL M2 frame from station with 4address.

But for open mode M2 does not exist so AP_VLAN will not be created.
Hence, firmware added support to handover the NULL frame over WMI mgmt
rx path and added below change to handle the 4address NULL frame
in the WMI mgmt rx path.

* Currently peer is find using addr1 or addr3 for mgmt packets
  but the peer info need to be find using addr2 or addr4 for the
  4address null frame. Hence, find peer using addr2 or addr4 during
  4address null frame.

Patch-dependency: 641-0001-ath12k-fix-4-addr-tx-failure-for-AP-and-STA-
modes.patch

Signed-off-by: Sarika Sharma <quic_sarishar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 31 +++++++++++++++++++--------
 1 file changed, 22 insertions(+), 9 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -11799,6 +11799,8 @@ static void ath12k_mgmt_rx_event(struct
 	struct ath12k_mgmt_frame_stats *mgmt_stats;
 	u16 frm_type = 0;
 	struct ath12k_mgmt_rx_reo_frame_descriptor desc = {0};
+	struct ieee80211_sta *pubsta = NULL;
+	bool is_4addr_null_pkt = false;
 	bool is_queued = false;
 	int ret;
 
@@ -11877,15 +11879,40 @@ static void ath12k_mgmt_rx_event(struct
 	hdr = (struct ieee80211_hdr *)skb->data;
 	fc = le16_to_cpu(hdr->frame_control);
 	frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, fc);
+	is_4addr_null_pkt = ieee80211_is_nullfunc(hdr->frame_control) &&
+			    ieee80211_has_a4(hdr->frame_control);
 
-	spin_lock_bh(&ab->base_lock);
-
-	peer = ath12k_peer_find_by_addr(ab, hdr->addr1);
-	if(!peer)
-		peer = ath12k_peer_find_by_addr(ab, hdr->addr3);
-	if (!peer) {
+	if (ieee80211_is_data(hdr->frame_control) && !is_4addr_null_pkt) {
+		dev_kfree_skb(skb);
+		goto exit;
+	}
+	if (is_4addr_null_pkt) {
+		spin_lock_bh(&ab->base_lock);
+		peer = ath12k_peer_find_by_addr(ab, hdr->addr2);
+		if (!peer)
+			peer = ath12k_peer_find_by_addr(ab, hdr->addr4);
+		if (!peer) {
+			spin_unlock_bh(&ab->base_lock);
+			dev_kfree_skb(skb);
+			goto exit;
+		}
+		pubsta = peer->sta;
+		if (pubsta && peer->sta->valid_links) {
+			status->link_valid = 1;
+			status->link_id = peer->link_id;
+		}
 		spin_unlock_bh(&ab->base_lock);
-		goto skip_mgmt_stats;
+		ieee80211_rx_napi(ar->ah->hw, pubsta, skb, NULL);
+		goto exit;
+	} else {
+		spin_lock_bh(&ab->base_lock);
+		peer = ath12k_peer_find_by_addr(ab, hdr->addr1);
+		if (!peer)
+			peer = ath12k_peer_find_by_addr(ab, hdr->addr3);
+		if (!peer) {
+			spin_unlock_bh(&ab->base_lock);
+			goto skip_mgmt_stats;
+		}
 	}
 
 	vif = peer->vif;
