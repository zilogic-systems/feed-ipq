From 404109dc7eefe54d1e7a4e70cf99861ba7acb60e Mon Sep 17 00:00:00 2001
From: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
Date: Mon, 17 Jun 2024 23:55:22 +0530
Subject: [PATCH] wifi: ath12k: Optimize tx completion routine

Avoid repeated pointer deference and unnecessary initialization
to improve CPU effiency and throughtput.

Patch-Dependency: 716-a-ath12k-Add-tx-datapath-related-soc-and-link-stats.patch

Signed-off-by: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 72 ++++++++++++-------------
 1 file changed, 35 insertions(+), 37 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -818,8 +818,7 @@ static inline void ath12k_dp_tx_status_p
 static void
 ath12k_dp_tx_htt_tx_complete_buf(struct ath12k_base *ab,
 				 struct sk_buff *msdu,
-				 struct dp_tx_ring *tx_ring,
-				 struct ath12k_dp_htt_wbm_tx_status *ts,
+				 int tcl_data_ring_id, int htt_status,
 				 struct sk_buff *skb_ext_desc, u8 mac_id,
 				 void *desc, ktime_t timestamp)
 {
@@ -830,15 +829,18 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	struct ath12k_vif *ahvif;
 	struct ath12k_peer *peer;
 	struct hal_tx_status ts_status = { 0 };
+	struct htt_tx_wbm_completion *status_desc;
 	unsigned long attrs = 0;
+	int ack_rssi;
 	u8 flags = 0;
+	u8 link_id;
 	bool drop_disable = false;
 
 	skb_cb = ATH12K_SKB_CB(msdu);
 	info = IEEE80211_SKB_CB(msdu);
 
 	ar = ab->pdevs[mac_id].ar;
-	ab->soc_stats.tx_completed[tx_ring->tcl_data_ring_id]++;
+	ab->soc_stats.tx_completed[tcl_data_ring_id]++;
 
 	ath12k_dp_tx_decrement(ar);
 
@@ -872,7 +874,7 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 
 		if (msdu->destructor) {
 			msdu->wifi_acked_valid = 1;
-			msdu->wifi_acked = ts->acked;
+			msdu->wifi_acked = htt_status;
 		}
 		if (skb_has_frag_list(msdu)) {
 			kfree_skb_list(skb_shinfo(msdu)->frag_list);
@@ -889,23 +891,28 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 
 	vif = skb_cb->vif;
 	ahvif = (void *)vif->drv_priv;
-	if (ahvif->links_map & BIT(skb_cb->link_id)) {
-		if (ahvif->link[skb_cb->link_id])
-			ahvif->link[skb_cb->link_id]->link_stats.tx_completed++;
+	link_id = skb_cb->link_id;
+	if (ahvif->links_map & BIT(link_id)) {
+		if (ahvif->link[link_id])
+			ahvif->link[link_id]->link_stats.tx_completed++;
 	} else {
 		ath12k_warn(ab,
 			    "invalid linkid 0x%X in htt tx complete buf linkmap %lu\n",
-			    skb_cb->link_id,
+			    link_id,
 			    ahvif->links_map);
 	}
 
 	memset(&info->status, 0, sizeof(info->status));
 
-	if (ts->acked) {
+	if (htt_status == HAL_WBM_REL_HTT_TX_COMP_STATUS_OK) {
 		if (!(info->flags & IEEE80211_TX_CTL_NO_ACK)) {
 			info->flags |= IEEE80211_TX_STAT_ACK;
+			status_desc = (struct htt_tx_wbm_completion *)(((u8 *)desc) +
+				      HTT_TX_WBM_COMP_STATUS_OFFSET);
+			ack_rssi = le32_get_bits(status_desc->info2,
+						 HTT_TX_WBM_COMP_INFO2_ACK_RSSI);
 			info->status.ack_signal = ar->rssi_offsets.rssi_offset +
-						  ts->ack_rssi;
+						  ack_rssi;
 			info->status.flags = IEEE80211_TX_STATUS_ACK_SIGNAL_VALID;
 		} else {
 			info->flags |= IEEE80211_TX_STAT_NOACK_TRANSMITTED;
@@ -935,26 +942,15 @@ static void
 ath12k_dp_tx_process_htt_tx_complete(struct ath12k_base *ab,
 				     void *desc, u8 mac_id,
 				     struct sk_buff *msdu,
-				     struct dp_tx_ring *tx_ring,
+				     int data_ring_id,
 				     struct sk_buff *skb_ext_desc,
 				     ktime_t timestamp, int htt_status)
 {
-	struct htt_tx_wbm_completion *status_desc;
-	struct ath12k_dp_htt_wbm_tx_status ts = {0};
-
-	status_desc = desc + HTT_TX_WBM_COMP_STATUS_OFFSET;
-
-	htt_status = le32_get_bits(status_desc->info0,
-				   HTT_TX_WBM_COMP_INFO0_STATUS);
-
-	ab->soc_stats.fw_tx_status[htt_status]++;
 
 	switch (htt_status) {
 	case HAL_WBM_REL_HTT_TX_COMP_STATUS_OK:
-		ts.acked = (htt_status == HAL_WBM_REL_HTT_TX_COMP_STATUS_OK);
-		ts.ack_rssi = le32_get_bits(status_desc->info2,
-					    HTT_TX_WBM_COMP_INFO2_ACK_RSSI);
-		ath12k_dp_tx_htt_tx_complete_buf(ab, msdu, tx_ring, &ts, skb_ext_desc, mac_id, desc, timestamp);
+		ath12k_dp_tx_htt_tx_complete_buf(ab, msdu, data_ring_id, htt_status,
+						 skb_ext_desc, mac_id, desc, timestamp);
 
 		break;
 	case HAL_WBM_REL_HTT_TX_COMP_STATUS_DROP:
@@ -1109,7 +1105,7 @@ err_out:
 
 static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
 				       struct sk_buff *msdu,
-				       struct hal_wbm_release_ring *tx_status,
+				       struct hal_wbm_completion_ring_tx *tx_status,
 				       enum hal_wbm_rel_src_module buf_rel_source,
 				       int ring, ktime_t timestamp, int wbm_status)
 {
@@ -1125,6 +1121,7 @@ static void ath12k_dp_tx_complete_msdu(s
 	struct ieee80211_vif *vif;
 	struct ath12k_vif *ahvif;
 	u8 flags = 0;
+	u8 link_id;
 	bool sawf_stats_update = false;
 	bool tx_drop = false;
 	bool tx_error = false;
@@ -1145,7 +1142,7 @@ static void ath12k_dp_tx_complete_msdu(s
         }
 
 	ts.buf_rel_source = buf_rel_source;
-	ath12k_dp_tx_status_parse(ab, (struct hal_wbm_completion_ring_tx *)tx_status, &ts);
+	ath12k_dp_tx_status_parse(ab, tx_status, &ts);
 
 	ar->wmm_stats.tx_type = ath12k_tid_to_ac(ts.tid > ATH12K_DSCP_PRIORITY ? 0:ts.tid);
 	if (ar->wmm_stats.tx_type) {
@@ -1155,13 +1152,14 @@ static void ath12k_dp_tx_complete_msdu(s
 
 	vif = skb_cb->vif;
 	ahvif = (void *)vif->drv_priv;
-	if (ahvif->links_map & BIT(skb_cb->link_id)) {
-		if (ahvif->link[skb_cb->link_id])
-			ahvif->link[skb_cb->link_id]->link_stats.tx_completed++;
+	link_id = skb_cb->link_id;
+	if (ahvif->links_map & BIT(link_id)) {
+		if (ahvif->link[link_id])
+			ahvif->link[link_id]->link_stats.tx_completed++;
 	} else {
 		ath12k_warn(ar->ab,
 			    "invalid linkid 0x%X in tx complete msdu linkmap %lu\n",
-			    skb_cb->link_id,
+			    link_id,
 			    ahvif->links_map);
 	}
 
@@ -1574,13 +1572,14 @@ int ath12k_dp_tx_completion_handler(stru
 {
 	struct ath12k *ar;
 	struct ath12k_dp *dp = &ab->dp;
-	int hal_ring_id = dp->tx_ring[ring_id].tcl_comp_ring.ring_id;
+	struct dp_tx_ring *tx_ring = &dp->tx_ring[ring_id];
+	int hal_ring_id = tx_ring->tcl_comp_ring.ring_id;
+	int data_ring_id = tx_ring->tcl_data_ring_id;
 	struct hal_srng *status_ring = &ab->hal.srng_list[hal_ring_id];
 	struct ath12k_tx_desc_info *tx_desc = NULL;
 	struct list_head desc_free_list, *cur;
 	struct sk_buff *msdu, *skb_ext_desc;
 	struct ath12k_skb_cb *skb_cb;
-	struct dp_tx_ring *tx_ring = &dp->tx_ring[ring_id];
 	u8 mac_id;
 	u64 desc_va;
 	struct ath12k_vif *ahvif;
@@ -1624,6 +1623,7 @@ int ath12k_dp_tx_completion_handler(stru
 		htt_status = FIELD_GET(HTT_TX_WBM_COMP_INFO0_STATUS, status_desc->info0);
 
 		if (buf_rel_source == HAL_WBM_REL_SRC_MODULE_FW) {
+			ab->soc_stats.fw_tx_status[htt_status]++;
 			/* Dont consider HTT_TX_COMP_STATUS_MEC_NOTIFY */
 			if (htt_status == HAL_WBM_REL_HTT_TX_COMP_STATUS_MEC_NOTIFY)
 				continue;
@@ -1661,7 +1661,7 @@ int ath12k_dp_tx_completion_handler(stru
 		list_add_tail(&tx_desc->list, &desc_free_list);
 
 		if (unlikely(!msdu)) {
-			ab->soc_stats.null_tx_complete[tx_ring->tcl_data_ring_id]++;
+			ab->soc_stats.null_tx_complete[data_ring_id]++;
 
 			ath12k_err_dump(ab, "Null msdu\n", "Tx compl Desc: ", tx_status,
 					sizeof(*tx_status), NULL);
@@ -1679,7 +1679,7 @@ int ath12k_dp_tx_completion_handler(stru
 			ath12k_dp_tx_process_htt_tx_complete(ab,
 							     (void *)tx_status,
 							     mac_id, msdu,
-							     tx_ring,
+							     data_ring_id,
 							     skb_ext_desc,
 							     timestamp, htt_status);
 			continue;
@@ -1730,9 +1730,8 @@ int ath12k_dp_tx_completion_handler(stru
 			}
 		} else {
 
-			ath12k_dp_tx_complete_msdu(ar, msdu, (struct hal_wbm_release_ring  *)tx_status,
-						   buf_rel_source,
-						   tx_ring->tcl_data_ring_id, timestamp, htt_status);
+			ath12k_dp_tx_complete_msdu(ar, msdu, tx_status, buf_rel_source,
+						   data_ring_id, timestamp, htt_status);
 		}
 	}
 
--- a/drivers/net/wireless/ath/ath12k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.h
@@ -10,11 +10,6 @@
 #include "core.h"
 #include "hal_tx.h"
 
-struct ath12k_dp_htt_wbm_tx_status {
-	bool acked;
-	int ack_rssi;
-};
-
 /* htt_tx_msdu_desc_ext
  *
  * valid_pwr
