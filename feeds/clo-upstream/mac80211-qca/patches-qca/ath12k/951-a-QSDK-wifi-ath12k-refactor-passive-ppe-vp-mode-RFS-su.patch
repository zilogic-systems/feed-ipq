From 9342e8c537d8d0c8f4217284400ca5870d417859 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Fri, 12 Apr 2024 12:23:46 -0700
Subject: QSDK: wifi: ath12k: refactor passive ppe vp mode (RFS)
 support

Rename PASSIVE PPE mode (RFS) support to represent generic
PPE mode. This will be useful when adding support for other
PPE modes like Direct Switching (DS) and Active VP mode
(Active) in subsequent patches.

Patch-depdendency: 879-a-wifi-ath12k-Enable-PPE-RFS-support.patch

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  7 ---
 drivers/net/wireless/ath/ath12k/debugfs.c |  8 ++-
 drivers/net/wireless/ath/ath12k/mac.c     | 41 +++++++++------
 drivers/net/wireless/ath/ath12k/ppe.c     | 63 +++++++++++------------
 drivers/net/wireless/ath/ath12k/ppe.h     | 14 +++--
 5 files changed, 64 insertions(+), 69 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -513,16 +513,9 @@ struct ath12k_vif {
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	bool chanctx_peer_del_done;
 
-	/* TODO: DS: remove seperate vp_num for rfs after DS implementation */
-	int ppe_rfs_vp_num;
-	int ppe_rfs_core_mask;
-
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	/* TODO: DS: Placeholder for new DS implementation */
 	int ppe_vp_num;
 	int ppe_core_mask;
 	int ppe_vp_type;
-#endif
 };
 
 struct ath12k_vif_iter {
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -5556,10 +5556,8 @@ static ssize_t ath12k_write_ppe_rfs_core
 
 	mutex_lock(&ahvif->ah->conf_mutex);
 
-	if (core_mask == ahvif->ppe_rfs_core_mask) {
-		ret = count;
+	if (core_mask == ahvif->ppe_core_mask)
 		goto out;
-	}
 
 	ret = ath12k_change_core_mask_for_ppe_rfs(ab, ahvif, core_mask);
 	if (ret) {
@@ -5567,8 +5565,8 @@ static ssize_t ath12k_write_ppe_rfs_core
 		goto out;
 	}
 
-	ret = count;
 out:
+	ret = count;
 	mutex_unlock(&ahvif->ah->conf_mutex);
 	return ret;
 }
@@ -5583,7 +5581,7 @@ static ssize_t ath12k_read_ppe_rfs_core_
 
 	mutex_lock(&ahvif->ah->conf_mutex);
 	len = scnprintf(buf, sizeof(buf) - len, "%u\n",
-			ahvif->ppe_rfs_core_mask);
+			ahvif->ppe_core_mask);
 
 	mutex_unlock(&ahvif->ah->conf_mutex);
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11421,7 +11421,8 @@ static int ath12k_mac_op_add_interface(s
 {
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_hw *ah = hw->priv;
-	int i, ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM, ppe_rfs_core_mask;
+	int ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM, ppe_core_mask;
+	int i, ppe_vp_type = ATH12K_INVALID_PPE_VP_TYPE;
 
 	/* The ar in which this vif will be assigned can be determined since
 	 * it depends on the channel in which the vif is brought up.
@@ -11433,10 +11434,12 @@ static int ath12k_mac_op_add_interface(s
 
 	mutex_lock(&ah->conf_mutex);
 	/* Reuse existing vp_num during Subsystem Recovery */
-	if (ahvif->ppe_rfs_vp_num > 0) {
-		ppe_rfs_vp_num = ahvif->ppe_rfs_vp_num;
-		ppe_rfs_core_mask = ahvif->ppe_rfs_core_mask;
+	if (ahvif->ppe_vp_num > 0) {
+		ppe_vp_num = ahvif->ppe_vp_num;
+		ppe_core_mask = ahvif->ppe_core_mask;
+		ppe_vp_type = ahvif->ppe_vp_type;
 	}
+
 	memset(ahvif, 0, sizeof(*ahvif));
 
 	ahvif->vdev_type = vif->type;
@@ -11447,19 +11450,23 @@ static int ath12k_mac_op_add_interface(s
 	ahvif->deflink.link_id = 0;
 	ahvif->mcbc_gsn = 0;
 
-	if (ppe_rfs_vp_num == ATH12K_INVALID_PPE_RFS_VP_NUM) {
-		ahvif->ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
-		ath12k_enable_ppe_rfs(ahvif, NULL);
-	} else {
-		ahvif->ppe_rfs_vp_num = ppe_rfs_vp_num;
-		ahvif->ppe_rfs_core_mask = ppe_rfs_core_mask;
-	}
+	/* TODO: DS: ppe_vp allocation for AP_VLAN mode is done in ieee80211_do_open()
+	 * and ppe_vp_num is maintained in sdata. Cleanup this with DS enablement in
+	 * WDS mode.
+	 */
+	if (ath12k_ppe_rfs_support && vif->type != NL80211_IFTYPE_AP_VLAN)
+		ppe_vp_type = PPE_VP_USER_TYPE_PASSIVE;
 
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	/* TODO: DS: revisit for new DS design*/
-	ahvif->ppe_vp_num = -1;
-	ahvif->ppe_vp_type = -1;
-#endif
+	if (ppe_vp_type != ATH12K_INVALID_PPE_VP_TYPE) {
+		if (ppe_vp_num == ATH12K_INVALID_PPE_VP_NUM) {
+			ahvif->ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
+			ath12k_vif_alloc_vp(ahvif, ppe_vp_type, NULL);
+		} else {
+			ahvif->ppe_vp_num = ppe_vp_num;
+			ahvif->ppe_core_mask = ppe_core_mask;
+			ahvif->ppe_vp_type = ppe_vp_type;
+		}
+	}
 
 	INIT_LIST_HEAD(&ahvif->deflink.list);
 	INIT_DELAYED_WORK(&ahvif->deflink.connection_loss_work,
@@ -11663,7 +11670,7 @@ static void ath12k_mac_op_remove_interfa
 	}
 
 	/* free ppe vp allocated for RFS */
-	ath12k_disable_ppe_rfs(ahvif);
+	ath12k_vif_free_vp(ahvif);
 
 	mutex_unlock(&ah->conf_mutex);
 }
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1233,10 +1233,9 @@ int ath12k_ppe_rfs_get_core_mask(struct
 	struct ath12k *ar = ahvif->ah->radio;
 	int core_mask;
 
-
 	/* MLO case */
 	if (ath12k_mlo_capable)
-		return ATH12K_PPE_RFS_DEFAULT_CORE_MASK;
+		return ATH12K_PPE_DEFAULT_CORE_MASK;
 
 	/* SLO case */
 	pdev = ar->pdev;
@@ -1249,7 +1248,7 @@ int ath12k_ppe_rfs_get_core_mask(struct
 		 ar->supports_6ghz)
 		core_mask = ATH12K_PPE_RFS_6GHZ_CORE_MASK;
 	else
-		core_mask = ATH12K_PPE_RFS_DEFAULT_CORE_MASK;
+		core_mask = ATH12K_PPE_DEFAULT_CORE_MASK;
 
 	return core_mask;
 }
@@ -1262,10 +1261,13 @@ int ath12k_change_core_mask_for_ppe_rfs(
 	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
 	int ret;
 
+	if (!wdev)
+		return -ENODEV;
+
 	if (!ath12k_ppe_rfs_support)
 		return 0;
 
-	if (!ahvif->ppe_rfs_vp_num) {
+	if (!ahvif->ppe_vp_num) {
 		ath12k_warn(ab, "No existing vp for dev %s\n",
 			    wdev->netdev->name);
 		return 0;
@@ -1276,12 +1278,12 @@ int ath12k_change_core_mask_for_ppe_rfs(
 		return -EINVAL;
 	}
 
-	if (core_mask == ahvif->ppe_rfs_core_mask)
+	if (core_mask == ahvif->ppe_core_mask)
 		return 0;
 
-	ath12k_disable_ppe_rfs(ahvif);
+	ath12k_vif_free_vp(ahvif);
 
-	ret = ath12k_enable_ppe_rfs(ahvif, &core_mask);
+	ret = ath12k_vif_alloc_vp(ahvif, PPE_VP_USER_TYPE_PASSIVE, &core_mask);
 	if (ret) {
 		ath12k_warn(ab, "error in enabling ppe vp for netdev %s\n",
 			    wdev->netdev->name);
@@ -1291,45 +1293,50 @@ int ath12k_change_core_mask_for_ppe_rfs(
 	return 0;
 }
 
-void ath12k_disable_ppe_rfs(struct ath12k_vif *ahvif)
+void ath12k_vif_free_vp(struct ath12k_vif *ahvif)
 {
 	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
 
-	if (!ath12k_ppe_rfs_support)
+	if (!wdev)
 		return;
 
-	if (!ahvif->ppe_rfs_vp_num) {
-		ath12k_warn(NULL, "failed to disable vp for vif\n");
+	if (ahvif->ppe_vp_num == ATH12K_INVALID_PPE_VP_NUM)
 		return;
-	}
 
-	ppe_vp_free(ahvif->ppe_rfs_vp_num);
+	ppe_vp_free(ahvif->ppe_vp_num);
 
 	ath12k_info(NULL,
-		    "Destroyed PASSIVE PPE VP port no:%d for dev:%s\n",
-		    ahvif->ppe_rfs_vp_num, wdev->netdev->name);
-	ahvif->ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
+		    "Destroyed PPE VP port no:%d for dev:%s vdev type %d subtype %d\n",
+		    ahvif->ppe_vp_num, wdev->netdev->name,
+		    ahvif->vdev_type, ahvif->vdev_subtype);
+	ahvif->ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
 }
 
-int ath12k_enable_ppe_rfs(struct ath12k_vif *ahvif,
-			  int *core_mask)
+int ath12k_vif_alloc_vp(struct ath12k_vif *ahvif, int ppe_vp_type, int *core_mask)
 {
-	struct ppe_vp_ai vpai;
-	int ppe_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
 	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
+	int ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
+	struct ppe_vp_ai vpai;
 
-	ahvif->ppe_rfs_vp_num = ATH12K_INVALID_PPE_RFS_VP_NUM;
-	if (!ath12k_ppe_rfs_support ||
-	    ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR ||
+	if (!wdev)
+		return -ENODEV;
+
+	if (ppe_vp_type == PPE_VP_USER_TYPE_PASSIVE && !ath12k_ppe_rfs_support)
+		return 0;
+
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR ||
 	    !wdev->netdev)
 		return 0;
 
-	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
+	ahvif->ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
 
-	vpai.usr_type = PPE_VP_USER_TYPE_PASSIVE;
+	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
 	vpai.type = PPE_VP_TYPE_SW_L2;
 	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
 
+	/* RFS */
+	vpai.usr_type = ppe_vp_type;
+
 	/* user input takes highest precedence */
 	if (core_mask)
 		vpai.core_mask = *core_mask;
@@ -1343,13 +1350,14 @@ int ath12k_enable_ppe_rfs(struct ath12k_
 		return -ENOSR;
 	}
 
-	ahvif->ppe_rfs_vp_num = ppe_vp_num;
-	ahvif->ppe_rfs_core_mask = vpai.core_mask;
+	ahvif->ppe_vp_num = ppe_vp_num;
+	ahvif->ppe_vp_type = ppe_vp_type;
+	ahvif->ppe_core_mask = vpai.core_mask;
 
 	ath12k_info(NULL,
-		    "Enabling PASSIVE VP for ahvif %p dev %s vp_num %d core_mask 0x%x\n",
-		    ahvif, wdev->netdev->name,
-		    ahvif->ppe_rfs_vp_num, ahvif->ppe_rfs_core_mask);
+		    "Enabling PPE VP type %d for dev %s vp_num %d core_mask 0x%x\n",
+		    ppe_vp_type, wdev->netdev->name,
+		    ahvif->ppe_vp_num, ahvif->ppe_core_mask);
 
 	return 0;
 }
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -8,15 +8,14 @@
 
 #define ATH12K_PPEDS_DEFAULT_POOL_ID 0
 
-/* TODO: This is framework to support different core masks.
- * Actual core masks may be tuned based on requirements
- */
-#define ATH12K_PPE_RFS_DEFAULT_CORE_MASK	ath12k_rfs_core_mask[0]
+#define ATH12K_PPE_DEFAULT_CORE_MASK		ath12k_rfs_core_mask[0]
 #define ATH12K_PPE_RFS_2GHZ_CORE_MASK		ath12k_rfs_core_mask[1]
 #define ATH12K_PPE_RFS_5GHZ_CORE_MASK		ath12k_rfs_core_mask[2]
 #define ATH12K_PPE_RFS_6GHZ_CORE_MASK		ath12k_rfs_core_mask[3]
 
-#define ATH12K_INVALID_PPE_RFS_VP_NUM -1
+#define ATH12K_INVALID_PPE_VP_NUM -1
+#define ATH12K_INVALID_PPE_VP_TYPE -1
+
 extern bool ath12k_ppe_rfs_support;
 extern unsigned int ath12k_mlo_capable;
 
@@ -24,9 +23,8 @@ int ath12k_ppe_rfs_get_core_mask(struct
 int ath12k_change_core_mask_for_ppe_rfs(struct ath12k_base *ab,
 					struct ath12k_vif *ahvif,
 					int core_mask);
-int ath12k_enable_ppe_rfs(struct ath12k_vif *ahvif,
-			  int *core_mask);
-void ath12k_disable_ppe_rfs(struct ath12k_vif *ahvif);
+int ath12k_vif_alloc_vp(struct ath12k_vif *ahvif, int vp_type, int *core_mask);
+void ath12k_vif_free_vp(struct ath12k_vif *ahvif);
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 
