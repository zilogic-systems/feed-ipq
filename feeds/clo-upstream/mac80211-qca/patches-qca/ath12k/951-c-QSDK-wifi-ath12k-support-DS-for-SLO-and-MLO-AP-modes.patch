From ee02069f9fb9adb06b6d4d44310fe37b65a5556c Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Mon, 15 Apr 2024 16:41:26 -0700
Subject: QSDK: wifi: ath12k: support DS for SLO and MLO AP modes

With single netdevice model, add support for Direct Switching(DS).
The changes include:
1. alloc and free ppe vp at the time of ath12k_mac_op_add_interface
2. FSE support for DS single netdevice model
3. per link (arvif) vp profile allocation and cleanups
4. fetching per link node_id from PPE driver and storing it per ab

SSR, stats support for DS will be added in future.

Patch-depdendency: 763-b-wifi-ath12k-add-framework-to-support-PPE-DS.patch

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c   |   2 +-
 drivers/net/wireless/ath/ath12k/core.h   |   3 +-
 drivers/net/wireless/ath/ath12k/dp.c     |   3 +-
 drivers/net/wireless/ath/ath12k/dp_mon.c |   6 +-
 drivers/net/wireless/ath/ath12k/dp_rx.c  |   4 +
 drivers/net/wireless/ath/ath12k/mac.c    |  17 +-
 drivers/net/wireless/ath/ath12k/mac.h    |   1 +
 drivers/net/wireless/ath/ath12k/peer.c   |   4 +-
 drivers/net/wireless/ath/ath12k/ppe.c    | 274 ++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/ppe.h    |  14 +-
 drivers/net/wireless/ath/ath12k/vendor.c |   3 +-
 drivers/net/wireless/ath/ath12k/wmi.h    |   1 -
 12 files changed, 255 insertions(+), 77 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1763,7 +1763,7 @@ int ath12k_core_qmi_firmware_ready(struc
 	}
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	/* TODO: DS: revisit this for new DS design */
+	/* TODO: DS: revisit this for new DS design in WDS mode */
 	if (ath12k_ppe_ds_enabled) {
 		if (ath12k_frame_mode != ATH12K_HW_TXRX_ETHERNET) {
 			ath12k_warn(ab,
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -463,8 +463,8 @@ struct ath12k_link_vif {
 	struct ath12k_prb_resp_tmpl_ml_info ml_info;
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	/* TODO: DS: Placeholder for new DS implementation */
 	int ppe_vp_profile_idx;
+	/* Add per link DS specific information here */
 #endif
 
 };
@@ -514,6 +514,7 @@ struct ath12k_vif {
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	bool chanctx_peer_del_done;
 
+	/* PPE mode independent variables */
 	int ppe_vp_num;
 	int ppe_core_mask;
 	int ppe_vp_type;
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -88,8 +88,7 @@ int ath12k_dp_peer_default_route_setup(s
 		   hweight16(sta->valid_links));
 
 	/* keep last - override any PPE DS specific routing config */
-	/* TODO: DS: revisit this . can this be removed completely? */
-	if (ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
+	if (ahvif->vdev_type != WMI_VDEV_TYPE_MONITOR &&
 	    !(ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
 	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S))
 		ath12k_dp_peer_ppeds_route_setup(ar, arvif, arsta);
@@ -1460,7 +1459,7 @@ static int ath12k_dp_ppe_rxole_rxdma_cfg
 	param.multi_buffer_msdu_override_en = 0;
 
 	/* Override use_ppe to 0 in RxOLE for the following cases */
-	param.intra_bss_override = 1;
+	param.intra_bss_override = 0;
 	param.decap_raw_override = 1;
 	param.decap_nwifi_override = 1;
 	param.ip_frag_override = 1;
@@ -1595,10 +1594,6 @@ void ath12k_dp_vdev_tx_attach(struct ath
 		ath12k_err(ar->ab, "Failed to initialize DP TX Banks");
 		return;
 	}
-
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	ath12k_dp_ppeds_update_vp_entry(ar, arvif);
-#endif
 }
 
 void ath12k_dp_umac_txrx_desc_cleanup(struct ath12k_base *ab)
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -3357,9 +3357,11 @@ static void ath12k_dp_mon_rx_update_peer
 	struct ieee80211_rx_status status;
 	struct ath12k_base *ab = ar->ab;
 	struct ieee80211_sta *sta;
+	struct ath12k_link_vif *arvif;
+	struct ath12k_vif *ahvif;
 	u32 uid;
 
-	/* TODO: DS: how to disable/enable stats per vap support ?? */
+	/* TODO: DS: Revisit this for DS stats support */
 	if (ar->ab->stats_disable ||
 	    !test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
 		return;
@@ -3368,10 +3370,16 @@ static void ath12k_dp_mon_rx_update_peer
 
 	lockdep_assert_held(&ar->ab->base_lock);
 	if (arsta) { // SU stats
-		/* TODO: DS: is this still needed. assuming ahvif holds ppe_vp_num*/
-		if (arsta->arvif && (arsta->arvif->ahvif->ppe_vp_num == -1 ||
-		    (arsta->arvif->ahvif &&
-		     hweight16(arsta->arvif->ahvif->links_map) <= 1)))
+		arvif = arsta->arvif;
+		if (!arvif)
+			return;
+
+		ahvif = arvif->ahvif;
+		if (!ahvif)
+			return;
+
+		if (ahvif->ppe_vp_num == ATH12K_INVALID_PPE_VP_NUM ||
+		    ahvif->ppe_vp_type != PPE_VP_USER_TYPE_DS)
 			return;
 
 		if (!rx_status) {
@@ -3407,10 +3415,16 @@ static void ath12k_dp_mon_rx_update_peer
 			continue;
 		}
 
-		/*TODO: DS: revisit this for new DS design */
-		if (arsta->arvif && arsta->arvif->ahvif &&
-		    (arsta->arvif->ahvif->ppe_vp_num == -1 ||
-		    hweight16(arsta->arvif->ahvif->links_map) <= 1))
+		arvif = arsta->arvif;
+		if (!arvif)
+			continue;
+
+		ahvif = arvif->ahvif;
+		if (!ahvif)
+			continue;
+
+		if (ahvif->ppe_vp_num == ATH12K_INVALID_PPE_VP_NUM ||
+		    ahvif->ppe_vp_type != PPE_VP_USER_TYPE_DS)
 			continue;
 
 		if (!rx_status) {
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10867,7 +10867,7 @@ static void ath12k_mac_update_vif_offloa
 					IEEE80211_OFFLOAD_DECAP_ENABLED);
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	/* TODO: DS: revisit this */
+	/* TODO: DS: revisit this for DS support in WDS mode */
 	if (test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags) &&
 	    vif->type == NL80211_IFTYPE_AP)
 		vif->offload_flags |= (IEEE80211_OFFLOAD_ENCAP_ENABLED |
@@ -11449,8 +11449,14 @@ static int ath12k_mac_op_add_interface(s
 	 * and ppe_vp_num is maintained in sdata. Cleanup this with DS enablement in
 	 * WDS mode.
 	 */
-	if (ath12k_ppe_rfs_support && vif->type != NL80211_IFTYPE_AP_VLAN)
+	/* Priotitize DS over RFS until per vap configuration support */
+	if (ath12k_ppe_ds_enabled &&
+	    vif->type == NL80211_IFTYPE_AP &&
+	    ath12k_frame_mode == ATH12K_HW_TXRX_ETHERNET) {
+		ppe_vp_type = PPE_VP_USER_TYPE_DS;
+	} else if (ath12k_ppe_rfs_support && vif->type != NL80211_IFTYPE_AP_VLAN) {
 		ppe_vp_type = PPE_VP_USER_TYPE_PASSIVE;
+	}
 
 	if (ppe_vp_type != ATH12K_INVALID_PPE_VP_TYPE) {
 		if (ppe_vp_num == ATH12K_INVALID_PPE_VP_NUM) {
@@ -13703,6 +13709,10 @@ ath12k_mac_op_assign_vif_chanctx(struct
 
 	ab = ar->ab;
 
+	ret = ath12k_ppeds_attach_link_vif(arvif);
+	if (ret)
+		ath12k_info(ab, "Unable to attach ppe ds node for arvif\n");
+
 	mutex_lock(&ar->conf_mutex);
 
 	ath12k_dbg(ab, ATH12K_DBG_MAC,
@@ -14028,6 +14038,9 @@ stop_primary:
 	}
 
 	mutex_unlock(&ar->conf_mutex);
+
+	ath12k_ppeds_detach_link_vif(arvif);
+
 	ath12k_mac_remove_link_interface(hw, arvif);
 	ath12k_mac_unassign_link_vif(arvif);
 	goto unassign_exit;
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -10,6 +10,7 @@
 #include <net/mac80211.h>
 #include <net/cfg80211.h>
 
+extern unsigned int ath12k_ppe_ds_enabled;
 struct ath12k;
 struct ath12k_base;
 struct ath12k_hw;
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -835,8 +835,8 @@ int ath12k_peer_create(struct ath12k *ar
 		peer->ppe_vp_num = peer->vif->ppe_vp_num;
 #endif
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	/* TODO: DS: assuming ahvif holds ppe_vp_num. revisit after new design*/
-	peer->ppe_vp_num = arvif->ahvif->ppe_vp_num;
+	if (arvif->ahvif->ppe_vp_type == PPE_VP_USER_TYPE_DS)
+		peer->ppe_vp_num = arvif->ahvif->ppe_vp_num;
 #endif
 
 	if (sta) {
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -510,15 +510,13 @@ void ath12k_dp_peer_ppeds_route_setup(st
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
 
-	/* TODO: DS: revisit this function for miami 2G case.
- 	 * introduce ast based DS checks and skip this function
- 	 */
 	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
 		return;
 
 	if (ahvif->ppe_vp_num == -1 ||
 	    ahvif->ppe_vp_type != PPE_VP_USER_TYPE_DS) {
-		ath12k_info(ab, "DS is disabled for peer %pM\n", arsta->addr);
+		ath12k_dbg(ab, ATH12K_DBG_PPE, "DS is disabled for peer %pM\n",
+			   arsta->addr);
 		return;
 	}
 
@@ -544,7 +542,7 @@ void ath12k_dp_peer_ppeds_route_setup(st
 
 		if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED,
 		    &primary_link_arvif->ab->dev_flags)) {
-			ath12k_info(ab,
+			ath12k_dbg(ab, ATH12K_DBG_PPE,
 				    "Primary link %d does not support DS "
 				    "Disabling DS routing on RX for peer %pM\n",
 				    ahsta->primary_link_id, arsta->addr);
@@ -761,8 +759,8 @@ void ath12k_dp_ppeds_update_vp_entry(str
 	struct ath12k_dp_ppe_vp_profile *vp_profile;
 	int ppe_vp_profile_idx;
 
-	/*TODO: DS: revisit this function */
-	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
+	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags) ||
+	    arvif->ahvif->ppe_vp_type != PPE_VP_USER_TYPE_DS)
 		return;
 
 	if (!ab->ppe.ppeds_handle) {
@@ -780,36 +778,35 @@ void ath12k_dp_ppeds_update_vp_entry(str
 	ath12k_dp_ppeds_setup_vp_entry(ab, arvif->ar, arvif, vp_profile);
 }
 
-/* TODO: DS: revisit ath12k_ppeds_attach_vdev and ath12k_ppeds_detach_vdev */
-int ath12k_ppeds_attach_vdev(struct ath12k_link_vif *arvif,
-				void *vp_arg, int *ppe_vp_num,
-				struct ieee80211_ppe_vp_ds_params *vp_params)
+int ath12k_ppeds_attach_link_vif(struct ath12k_link_vif *arvif)
 {
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_base *ab = ar->ab;
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_dp_ppe_vp_profile *vp_profile = NULL;
-	int ppe_vp_profile_idx, ppe_vp_tbl_idx, vp_num;
+	int ppe_vp_profile_idx, ppe_vp_tbl_idx;
 	int ppe_vp_search_tbl_idx = -1;
 	int vdev_id = arvif->vdev_id;
+	int vp_num = ahvif->ppe_vp_num;
 	int ret;
 
 	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
-		return -ENOSR;
+		return 0;
+
+	if (vp_num <= 0 || ahvif->ppe_vp_type != PPE_VP_USER_TYPE_DS)
+		return 0;
 
 	if (!ab->ppe.ppeds_handle) {
-		ath12k_err(ab, "DS not enabled on this chip\n");
-		return -EINVAL;
+		ath12k_dbg(ab, ATH12K_DBG_PPE, "DS not enabled on this chip\n");
+		return 0;
 	}
 
-	/* TODO: DS: revisit this */
-	if (arvif->ahvif->vif->type != NL80211_IFTYPE_AP) {
-		return -EINVAL;
+	if (ahvif->vif->type != NL80211_IFTYPE_AP) {
+		ath12k_dbg(ab, ATH12K_DBG_PPE,
+			   "DS is not supported for vap type %d \n", ahvif->vif->type);
+		return 0;
 	}
 
-	/* No Need to allocate another vp here */
-	vp_num = ahvif->ppe_vp_num;
-
 	/*Allocate a ppe vp profile for a vap */
 	ppe_vp_profile_idx = ath12k_dp_ppeds_alloc_ppe_vp_profile(ab, &vp_profile);
 	if (!vp_profile) {
@@ -846,12 +843,12 @@ int ath12k_ppeds_attach_vdev(struct ath1
 	/* For the sta mode fill up the index reg number */
 	ath12k_dp_ppeds_setup_vp_entry(ab, ar, arvif, vp_profile);
 
-	vp_params->ppe_vp_profile_idx = ppe_vp_profile_idx;
-	*ppe_vp_num = vp_num;
-	ath12k_info(ab,
-		   "PPEDS vdev attach success chip_id %d vdev_id %d vpnum %d ppe_vp_profile_idx %d"
+	arvif->ppe_vp_profile_idx = ppe_vp_profile_idx;
+
+	ath12k_dbg(ab, ATH12K_DBG_PPE,
+		   "PPEDS vdev attach success chip_id %d soc_idx %d ds_node_id %d vdev_id %d vpnum %d ppe_vp_profile_idx %d "
 		   "ppe_vp_tbl_idx %d to_fw %d int_pri %d prec_en %d search_idx_reg_num %d\n",
-		   ab->chip_id, vdev_id, vp_num, ppe_vp_profile_idx, ppe_vp_tbl_idx, vp_profile->to_fw,
+		   ab->chip_id, ab->ppe.ppeds_soc_idx, ab->ppe.ds_node_id, vdev_id, vp_num, ppe_vp_profile_idx, ppe_vp_tbl_idx, vp_profile->to_fw,
 		   vp_profile->use_ppe_int_pri, vp_profile->drop_prec_enable,
 		   vp_profile->search_idx_reg_num);
 
@@ -867,18 +864,19 @@ vp_free:
 	return ret;
 }
 
-void ath12k_ppeds_detach_vdev(struct ath12k_link_vif *arvif,
-				     struct ieee80211_ppe_vp_ds_params *vp_params)
+void ath12k_ppeds_detach_link_vif(struct ath12k_link_vif *arvif)
 {
 	struct ath12k *ar = arvif->ar;
+	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_base *ab = ar->ab;
 	struct ath12k_dp_ppe_vp_profile *vp_profile;
-	int ppe_vp_profile_idx = -1;
+	int ppe_vp_profile_idx = arvif->ppe_vp_profile_idx;
 
 	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
 		return;
 
-	ppe_vp_profile_idx = vp_params->ppe_vp_profile_idx;
+	if (ahvif->ppe_vp_num <= 0 || ahvif->ppe_vp_type != PPE_VP_USER_TYPE_DS)
+		return;
 
 	vp_profile = &ab->dp.ppe_vp_profile[ppe_vp_profile_idx];
 	if (!vp_profile->is_configured) {
@@ -887,9 +885,6 @@ void ath12k_ppeds_detach_vdev(struct ath
 		return;
 	}
 
-	ppe_ds_wlan_vp_free(ab->ppe.ppeds_handle, vp_profile->vp_num);
-	ath12k_dbg(ab, ATH12K_DBG_PPE, "ppe_ds_wlan_vp_free\n");
-
 	/* For STA mode ast index table reg also needs to be cleaned */
 	if (arvif->ahvif->vif->type == NL80211_IFTYPE_STATION)
 		ath12k_dp_ppeds_dealloc_vp_search_idx_tbl_entry(ab, vp_profile->search_idx_reg_num);
@@ -1066,7 +1061,8 @@ int ath12k_dp_ppeds_start(struct ath12k_
 	}
 	ab->ppe.ds_node_id = ds_node_id;
 
-	ath12k_dbg(ab, ATH12K_DBG_PPE, "PPEDS start success chip_id %d ds_node_id %d ppeds_soc_idx %d", ab->chip_id, ab->ppe.ds_node_id, ab->ppe.ppeds_soc_idx);
+	ath12k_dbg(ab, ATH12K_DBG_PPE, "PPEDS start success chip_id %d ds_node_id %d ppeds_soc_idx %d",
+		   ab->chip_id, ab->ppe.ds_node_id, ab->ppe.ppeds_soc_idx);
 	return 0;
 }
 
@@ -1270,10 +1266,9 @@ int ath12k_change_core_mask_for_ppe_rfs(
 	if (!ath12k_ppe_rfs_support)
 		return 0;
 
-	if (!ahvif->ppe_vp_num) {
-		ath12k_warn(ab, "No existing vp for dev %s\n",
-			    wdev->netdev->name);
-		return 0;
+	if (ahvif->ppe_vp_num <= 0 || ahvif->ppe_vp_type != PPE_VP_USER_TYPE_PASSIVE) {
+		ath12k_warn(ab, "invalid vp for dev %s\n", wdev->netdev->name);
+		return -EINVAL;
 	}
 
 	if (core_mask < 0) {
@@ -1296,6 +1291,30 @@ int ath12k_change_core_mask_for_ppe_rfs(
 	return 0;
 }
 
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+static bool ath12k_stats_update_ppe_vp(struct net_device *dev, ppe_vp_hw_stats_t *vp_stats)
+{
+	struct pcpu_sw_netstats *tstats = this_cpu_ptr(netdev_tstats(dev));
+	u64_stats_update_begin(&tstats->syncp);
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+	tstats->tx_packets += vp_stats->tx_pkt_cnt;
+	tstats->tx_bytes += vp_stats->tx_byte_cnt;
+	tstats->rx_packets += vp_stats->rx_pkt_cnt;
+	tstats->rx_bytes += vp_stats->rx_byte_cnt;
+#else
+	u64_stats_add(&tstats->tx_packets, vp_stats->tx_pkt_cnt);
+	u64_stats_add(&tstats->tx_bytes, vp_stats->tx_byte_cnt);
+	u64_stats_add(&tstats->rx_packets, vp_stats->rx_pkt_cnt);
+	u64_stats_add(&tstats->rx_bytes, vp_stats->rx_byte_cnt);
+#endif
+	u64_stats_update_end(&tstats->syncp);
+
+	return true;
+}
+#endif
+
+
 void ath12k_vif_free_vp(struct ath12k_vif *ahvif)
 {
 	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
@@ -1327,10 +1346,22 @@ int ath12k_vif_alloc_vp(struct ath12k_vi
 	if (ppe_vp_type == PPE_VP_USER_TYPE_PASSIVE && !ath12k_ppe_rfs_support)
 		return 0;
 
-	if (ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR ||
-	    !wdev->netdev)
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR || !wdev->netdev)
+		return 0;
+
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	if (ppe_vp_type == PPE_VP_USER_TYPE_DS && !ath12k_ppe_ds_enabled)
 		return 0;
 
+	if (ppe_vp_type == PPE_VP_USER_TYPE_DS &&
+	    (ahvif->vif->type != NL80211_IFTYPE_AP &&
+	     ahvif->vif->type != NL80211_IFTYPE_AP_VLAN &&
+	     ahvif->vif->type != NL80211_IFTYPE_STATION)) {
+		ath12k_err(NULL, "invalid vif type %d for DS\n", ahvif->vif->type);
+		return -EINVAL;
+	}
+#endif
+
 	ahvif->ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
 
 	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
@@ -1338,18 +1369,32 @@ int ath12k_vif_alloc_vp(struct ath12k_vi
 	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
 
 	/* RFS */
-	vpai.usr_type = ppe_vp_type;
+	if (ppe_vp_type == PPE_VP_USER_TYPE_PASSIVE) {
+		vpai.usr_type = PPE_VP_USER_TYPE_PASSIVE;
 
-	/* user input takes highest precedence */
-	if (core_mask)
-		vpai.core_mask = *core_mask;
-	else
-		vpai.core_mask = ath12k_ppe_rfs_get_core_mask(ahvif);
+		/* user input takes highest precedence */
+		if (core_mask)
+			vpai.core_mask = *core_mask;
+		else
+			vpai.core_mask = ath12k_ppe_rfs_get_core_mask(ahvif);
+
+		ppe_vp_num = ppe_vp_alloc(wdev->netdev, &vpai);
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	/* Direct Switching */
+	} else if (ppe_vp_type == PPE_VP_USER_TYPE_DS) {
+		vpai.stats_cb = ath12k_stats_update_ppe_vp;
+		vpai.queue_num = 0;
+		vpai.core_mask = ATH12K_PPE_DEFAULT_CORE_MASK;
+		vpai.usr_type = PPE_VP_USER_TYPE_DS;
+		vpai.net_dev_flags = PPE_VP_NET_DEV_FLAG_IS_MLD;
+
+		ppe_vp_num = ppe_ds_wlan_vp_alloc(NULL, wdev->netdev, &vpai);
+#endif
+	}
 
-	ppe_vp_num = ppe_vp_alloc(wdev->netdev, &vpai);
 	if (ppe_vp_num <= 0) {
-		ath12k_err(NULL, "Error in enabling PASSIVE VP for netdev %s\n",
-			   wdev->netdev->name);
+		ath12k_err(NULL, "Error in enabling PPE VP type %d for netdev %s\n",
+			   vpai.usr_type, wdev->netdev->name);
 		return -ENOSR;
 	}
 
@@ -1365,20 +1410,143 @@ int ath12k_vif_alloc_vp(struct ath12k_vi
 	return 0;
 }
 
-/* TODO: DS: FSE needs to be reworked for DS with single netdevice model */
+static void
+ath12k_dp_rx_ppeds_fse_update_flow_info(struct ath12k_base *ab,
+					struct rx_flow_info *flow_info,
+					struct ppe_drv_fse_rule_info *ppe_flow_info,
+					int operation)
+{
+	struct hal_flow_tuple_info *tuple_info = &flow_info->flow_tuple_info;
+	struct ppe_drv_fse_tuple *ppe_tuple = &ppe_flow_info->tuple;
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "%s S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,flags:%d",
+		   fse_state_to_string(operation),
+		   ppe_tuple->src_ip[0], ppe_tuple->src_ip[1],
+		   ppe_tuple->src_ip[2], ppe_tuple->src_ip[3],
+		   ppe_tuple->src_port,
+		   ppe_tuple->dest_ip[0], ppe_tuple->dest_ip[1],
+		   ppe_tuple->dest_ip[2], ppe_tuple->dest_ip[3],
+		   ppe_tuple->dest_port,
+		   ppe_tuple->protocol,
+		   ppe_flow_info->flags);
+
+	tuple_info->src_port = ppe_tuple->src_port;
+	tuple_info->dest_port = ppe_tuple->dest_port;
+	tuple_info->l4_protocol = ppe_tuple->protocol;
+	flow_info->fse_metadata = ATH12K_RX_FSE_FLOW_MATCH_PPE;
+
+	if (ppe_flow_info->flags & PPE_DRV_FSE_IPV4) {
+		flow_info->is_addr_ipv4 = 1;
+		tuple_info->src_ip_31_0 = ntohl(ppe_tuple->src_ip[0]);
+		tuple_info->dest_ip_31_0 = ntohl(ppe_tuple->dest_ip[0]);
+	} else if (ppe_flow_info->flags & PPE_DRV_FSE_IPV6) {
+		tuple_info->src_ip_31_0 = ntohl(ppe_tuple->src_ip[3]);
+		tuple_info->src_ip_63_32 = ntohl(ppe_tuple->src_ip[2]);
+		tuple_info->src_ip_95_64 = ntohl(ppe_tuple->src_ip[1]);
+		tuple_info->src_ip_127_96 = ntohl(ppe_tuple->src_ip[0]);
+
+		tuple_info->dest_ip_31_0 = ntohl(ppe_tuple->dest_ip[3]);
+		tuple_info->dest_ip_63_32 = ntohl(ppe_tuple->dest_ip[2]);
+		tuple_info->dest_ip_95_64 = ntohl(ppe_tuple->dest_ip[1]);
+		tuple_info->dest_ip_127_96 = ntohl(ppe_tuple->dest_ip[0]);
+	}
+
+	if (ppe_flow_info->flags & PPE_DRV_FSE_DS)
+		flow_info->use_ppe = 1;
+}
+
 bool
-ath12k_dp_rx_ppe_add_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_info)
+ath12k_dp_rx_ppeds_fse_add_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_info)
 {
-	/* TODO: DS: Revisit for  in single netdev model */
-	return false;
+	struct rx_flow_info flow_info = { 0 };
+	struct wireless_dev *wdev;
+	struct ieee80211_vif *vif;
+	struct ath12k_base *ab = NULL;
+	struct ath12k *ar;
+	struct ath12k_vif *ahvif;
+	struct ath12k_link_vif *arvif;
+	struct net_device *dev = ppe_flow_info->dev;
+
+	if (!ath12k_fse_enable)
+		return false;
+
+	if (!dev)
+		return false;
+
+	wdev = dev->ieee80211_ptr;
+
+	vif = wdev_to_ieee80211_vif_vlan(wdev);
+	if (!vif)
+		return false;
+
+	ahvif = ath12k_vif_to_ahvif(vif);
+
+	/* FST rules are maintained at ag. Always chose default deflink's ab */
+	arvif = (vif->valid_links) ? (ahvif->link[0]) : (&ahvif->deflink);
+	if (WARN_ON(!arvif))
+		return false;
+
+	ar = arvif->ar;
+	if (!ar)
+		return false;
+
+	ab = ar->ab;
+	if (!ab)
+		return false;
+
+	ath12k_dp_rx_ppeds_fse_update_flow_info(ab, &flow_info, ppe_flow_info, FSE_RULE_ADD);
+
+	return ath12k_dp_rx_flow_add_entry(ab, &flow_info);
 }
 
 bool
-ath12k_dp_rx_ppe_del_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_info)
+ath12k_dp_rx_ppeds_fse_del_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_info)
 {
-	/* TODO: DS: Revisit for  in single netdev model */
-	return false;
+	struct rx_flow_info flow_info = { 0 };
+	struct wireless_dev *wdev;
+	struct ieee80211_vif *vif;
+	struct ath12k_base *ab = NULL;
+	struct ath12k *ar;
+	struct ath12k_vif *ahvif;
+	struct ath12k_link_vif *arvif;
+	struct net_device *dev = ppe_flow_info->dev;
+
+	if (!ath12k_fse_enable)
+		return false;
+
+	if (!dev)
+		return false;
+
+	wdev = dev->ieee80211_ptr;
+
+	vif = wdev_to_ieee80211_vif_vlan(wdev);
+	if (!vif)
+		return false;
+
+	ahvif = ath12k_vif_to_ahvif(vif);
+
+	/* FST rules are maintained at ag. Always chose default deflink's ab */
+	arvif = (vif->valid_links) ? (ahvif->link[0]) : (&ahvif->deflink);
+	if (WARN_ON(!arvif))
+		return false;
+
+	ar = arvif->ar;
+	if (!ar)
+		return false;
+
+	ab = ar->ab;
+	if (!ab)
+		return false;
+
+	/* Skip deleting entries during rmmod and SSR */
+	if (ppe_flow_info->dev->reg_state >= NETREG_UNREGISTERING ||
+	    netif_queue_stopped(ppe_flow_info->dev))
+		return false;
+
+	ath12k_dp_rx_ppeds_fse_update_flow_info(ab, &flow_info, ppe_flow_info,
+						FSE_RULE_DELETE);
 
+	return ath12k_dp_rx_flow_delete_entry(ab, &flow_info);
 }
 
 void ath12k_dp_rx_ppe_fse_register(void)
@@ -1389,8 +1557,8 @@ void ath12k_dp_rx_ppe_fse_register(void)
 	if (!ath12k_fse_enable)
 		return;
 
-	ppe_fse_ops.create_fse_rule = ath12k_dp_rx_ppe_add_flow_entry;
-	ppe_fse_ops.destroy_fse_rule = ath12k_dp_rx_ppe_del_flow_entry;
+	ppe_fse_ops.create_fse_rule = ath12k_dp_rx_ppeds_fse_add_flow_entry;
+	ppe_fse_ops.destroy_fse_rule = ath12k_dp_rx_ppeds_fse_del_flow_entry;
 
 	ret = ppe_drv_fse_ops_register(&ppe_fse_ops);
 	if (!ret)
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -50,6 +50,7 @@ struct ath12k_ppeds_stats {
 	u32 release_rx_desc_cnt;
 	u32 num_rx_desc_freed;
 	u32 num_rx_desc_realloc;
+	u32 tqm_rel_reason[HAL_WBM_TQM_REL_REASON_MAX];
 };
 
 struct ath12k_ppeds_napi {
@@ -94,11 +95,8 @@ void ath12k_dp_ppeds_stop(struct ath12k_
 int ath12k_dp_ppeds_start(struct ath12k_base *ab);
 int ath12k_ppeds_detach( struct ath12k_base *ab);
 int ath12k_ppeds_attach( struct ath12k_base *ab);
-int ath12k_ppeds_attach_vdev(struct ath12k_link_vif *arvif,
-                                void *vp_arg, int *ppe_vp_num,
-                                struct ieee80211_ppe_vp_ds_params *vp_params);
-void ath12k_ppeds_detach_vdev(struct ath12k_link_vif *arvif,
-                                     struct ieee80211_ppe_vp_ds_params *vp_params);
+int ath12k_ppeds_attach_link_vif(struct ath12k_link_vif *arvif);
+void ath12k_ppeds_detach_link_vif(struct ath12k_link_vif *arvif);
 void ath12k_dp_peer_ppeds_route_setup(struct ath12k *ar, struct ath12k_link_vif *arvif,
 				      struct ath12k_link_sta *arsta);
 int ath12k_ppeds_get_handle(struct ath12k_base *ab);
@@ -154,15 +152,12 @@ int ath12k_ppeds_attach( struct ath12k_b
 	return 0;
 }
 
-int ath12k_ppeds_attach_vdev(struct ath12k_link_vif *arvif,
-			     void *vp_arg, int *ppe_vp_num,
-			     struct ieee80211_ppe_vp_ds_params *vp_params)
+int ath12k_ppeds_attach_link_vif(struct ath12k_link_vif *arvif)
 {
 	return 0;
 }
 
-void ath12k_ppeds_detach_vdev(struct ath12k_link_vif *arvif,
-			      struct ieee80211_ppe_vp_ds_params *vp_params)
+void ath12k_ppeds_detach_link_vif(struct ath12k_link_vif *arvif)
 {
 	return;
 }
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -1003,7 +1003,8 @@ static int ath12k_vendor_ds_handler(stru
 	int ml_netdev = 0;
 
 	/* TODO: DS: This function to be reused for per VAP PPE VP
-	 * config support */
+	 * config support
+	 */
 	if (!ath12k_ppe_ds_enabled)
 		return 0;
 
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3934,7 +3934,6 @@ struct wmi_peer_set_param_cmd {
 } __packed;
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-/* TODO: DS: HW still need to mark the frames as intra bss to make SW job easier. */
 struct wmi_peer_set_intra_bss_cmd {
 	__le32 tlv_header;
 	struct wmi_mac_addr peer_macaddr;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2777,17 +2777,96 @@ void ath12k_fst_debugfs_init(struct ath1
 			    &fops_fse);
 }
 
+static inline char *get_ppe_str(int ppe_vp_type)
+{
+	char *type = NULL;
+
+	switch (ppe_vp_type) {
+	case PPE_VP_USER_TYPE_PASSIVE:
+		type = "passive";
+		break;
+	case PPE_VP_USER_TYPE_ACTIVE:
+		type = "active";
+		break;
+	case PPE_VP_USER_TYPE_DS:
+		type = "ds";
+		break;
+	default:
+		type = "unassigned";
+		break;
+	}
+	return type;
+}
+
+int ath12k_print_arvif_link_stats(struct ath12k_vif *ahvif,
+				      struct wireless_dev *wdev,
+				      struct ath12k_link_vif *arvif,
+				      struct ath12k_base *current_ab,
+				      int link_id,
+				      char *buf, int size)
+{
+	int len = 0;
+	bool is_mldev;
+
+	is_mldev = (hweight16(ahvif->vif->valid_links) > 1) ? true : false;
+
+	len += scnprintf(buf + len, size - len, "%s netdev: %s vp_num %d vptype %s core_mask 0x%x freq %d addr %pM\n",
+			is_mldev ? "ML" : "",
+			wdev->netdev->name, ahvif->ppe_vp_num,
+			get_ppe_str(ahvif->ppe_vp_type), ahvif->ppe_core_mask,
+			arvif->chanctx.def.chan->center_freq, arvif->addr);
+
+	if (is_mldev)
+		len += scnprintf(buf + len, size - len, "Link ID:  %d %s\n",
+				 link_id,
+				 (arvif->ar->ab == current_ab) ? "current band" : "other band" );
+
+	len += scnprintf(buf + len, size - len, "\ttx_dropped: %d\n",
+			arvif->link_stats.tx_dropped);
+	len += scnprintf(buf + len, size - len, "\ttx_errors: %d\n",
+			arvif->link_stats.tx_errors);
+	len += scnprintf(buf + len, size - len, "\ttx_enqueued: %d\n",
+			arvif->link_stats.tx_enqueued);
+	len += scnprintf(buf + len, size - len, "\ttx_completed: %d\n",
+			arvif->link_stats.tx_completed);
+	len += scnprintf(buf + len, size - len, "\ttx_bcast_mcast: %d\n",
+			arvif->link_stats.tx_bcast_mcast);
+	len += scnprintf(buf + len, size - len, "\ttx_encap_type: %d %d %d\n",
+			arvif->link_stats.tx_encap_type[0],
+			arvif->link_stats.tx_encap_type[1],
+			arvif->link_stats.tx_encap_type[2]);
+	len += scnprintf(buf + len, size - len, "\ttx_desc_type: %d %d\n",
+			arvif->link_stats.tx_desc_type[0],
+			arvif->link_stats.tx_desc_type[1]);
+	len += scnprintf(buf + len, size - len, "\trx_dropped: %d\n",
+			arvif->link_stats.rx_dropped);
+	len += scnprintf(buf + len, size - len, "\trx_errors: %d\n\n",
+			arvif->link_stats.rx_errors);
+	return len;
+}
+
+
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 static ssize_t ath12k_debugfs_dump_ppeds_stats(struct file *file,
-						const char __user *user_buf,
-						size_t count, loff_t *ppos)
+					       const char __user *user_buf,
+					       size_t count, loff_t *ppos)
 {
 	struct ath12k_base *ab = file->private_data;
+	struct ath12k_dp *dp = &ab->dp;
+	struct hal_srng *srng;
+	struct ath12k_vif *ahvif;
+	struct ath12k_link_vif *arvif, *arvif_partner;
+	u8 i, j, link_id, index;
+	bool interface_found;
+	int printed_if[TARGET_NUM_VDEVS * ATH12K_MAX_SOCS], printedindex = 0;
+	struct ath12k *ar;
+	struct wireless_dev *wdev;
 	struct ath12k_ppeds_stats *ppeds_stats = &ab->ppe.ppeds_stats;
 	int len = 0,  retval;
-	const int size = 4096;
+	const int size = PAGE_SIZE;
 	char *buf;
 
+	memset(printed_if, 0, sizeof(printed_if));
 	buf = kzalloc(size, GFP_KERNEL);
 	if (!buf)
 		return -ENOMEM;
@@ -2822,6 +2901,93 @@ static ssize_t ath12k_debugfs_dump_ppeds
 			 ppeds_stats->num_rx_desc_freed);
 	len += scnprintf(buf + len, size - len, "num_rx_desc_realloc %u\n",
 			 ppeds_stats->num_rx_desc_realloc);
+	len += scnprintf(buf + len, size - len,
+			 "\ntqm_rel_reason: 0:%u 1:%u 2:%u 3:%u 4:%u 5:%u 6:%u 7:%u 8:%u 9:%u 10:%u 11:%u 12:%u 13:%u 14:%u\n",
+			 ppeds_stats->tqm_rel_reason[0],
+			 ppeds_stats->tqm_rel_reason[1],
+			 ppeds_stats->tqm_rel_reason[2],
+			 ppeds_stats->tqm_rel_reason[3],
+			 ppeds_stats->tqm_rel_reason[4],
+			 ppeds_stats->tqm_rel_reason[5],
+			 ppeds_stats->tqm_rel_reason[6],
+			 ppeds_stats->tqm_rel_reason[7],
+			 ppeds_stats->tqm_rel_reason[8],
+			 ppeds_stats->tqm_rel_reason[9],
+			 ppeds_stats->tqm_rel_reason[10],
+			 ppeds_stats->tqm_rel_reason[11],
+			 ppeds_stats->tqm_rel_reason[12],
+			 ppeds_stats->tqm_rel_reason[13],
+			 ppeds_stats->tqm_rel_reason[14]);
+
+	len += scnprintf(buf + len, size - len, "SRNG Ring index Dump:\n");
+
+	srng = &ab->hal.srng_list[dp->ppe2tcl_ring.ring_id];
+	if (srng) {
+		len += scnprintf(buf + len, size - len, "ppe2tcl hp 0x%x\n",
+				srng->u.src_ring.hp);
+		len += scnprintf(buf + len, size - len, "ppe2tcl tp 0x%x\n",
+				 *(volatile u32 *)(srng->u.src_ring.tp_addr));
+	}
+
+	srng = &ab->hal.srng_list[dp->reo2ppe_ring.ring_id];
+	if (srng) {
+		len += scnprintf(buf + len, size - len, "reo2ppe hp 0x%x\n",
+				 *(volatile u32 *)(srng->u.dst_ring.hp_addr));
+		len += scnprintf(buf + len, size - len, "reo2ppe tp 0x%x\n",
+				 srng->u.dst_ring.tp);
+	}
+
+	for (i = 0; i < ab->num_radios; i++) {
+		ar = ab->pdevs[i].ar;
+		mutex_lock(&ar->ah->conf_mutex);
+		mutex_lock(&ar->conf_mutex);
+		list_for_each_entry(arvif, &ar->arvifs, list) {
+			interface_found = false;
+			ahvif = arvif->ahvif;
+			wdev = ieee80211_vif_to_wdev(ahvif->vif);
+
+			index = wdev->netdev->ifindex;
+
+			/* Skip a netdevice if its information is already
+			 * printed
+			 */
+			for (j = 0; j < printedindex; j++) {
+				if (index == printed_if[j])
+					interface_found = true;
+			}
+
+			if (interface_found)
+				continue;
+
+			printed_if[printedindex++] = index;
+			if (hweight16(ahvif->vif->valid_links) <= 1)  {
+				len += ath12k_print_arvif_link_stats(ahvif, wdev, arvif,
+								     ab, 0, buf + len, size - len);
+			} else {
+				for (link_id = 0; link_id < IEEE80211_MLD_MAX_NUM_LINKS; link_id++) {
+					arvif_partner = ahvif->link[link_id];
+					if (!arvif_partner)
+						continue;
+
+					if (arvif_partner->ar->ah != arvif->ar->ah) {
+						mutex_lock(&arvif_partner->ar->ah->conf_mutex);
+						mutex_lock(&arvif_partner->ar->conf_mutex);
+					}
+
+					len += ath12k_print_arvif_link_stats(ahvif, wdev, arvif_partner,
+									     ab, link_id,
+									     buf + len,
+									     size - len);
+					if (arvif_partner->ar->ah != arvif->ar->ah) {
+						mutex_unlock(&arvif_partner->ar->conf_mutex);
+						mutex_unlock(&arvif_partner->ar->ah->conf_mutex);
+					}
+				}
+			}
+		}
+		mutex_unlock(&ar->conf_mutex);
+		mutex_unlock(&ar->ah->conf_mutex);
+	}
 
 	if (len > size)
 		len = size;
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1325,6 +1325,8 @@ static void ath12k_ppeds_tx_update_stats
 					  ts.ack_rssi;
 		info->status.flags = IEEE80211_TX_STATUS_ACK_SIGNAL_VALID;
 	}
+	
+	ab->ppe.ppeds_stats.tqm_rel_reason[ts.status]++;
 
 	if (ts.status == HAL_WBM_TQM_REL_REASON_CMD_REMOVE_TX &&
 	    (info->flags & IEEE80211_TX_CTL_NO_ACK))
