From a55806af4221bd6a54a60ec2626e7e32561dc400 Mon Sep 17 00:00:00 2001
From: Pavankumar Nandeshwar <quic_pnandesh@quicinc.com>
Date: Thu, 23 May 2024 14:30:57 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Add DS node id retrieval mechanism

Add direct switch node id retrieval mechanism, which
will be used by ecm module.

Patch-depdendency: 953-QSDK-wifi-ath12k-Create-ath_dp_accel_cfg.h-file-for-.patch

Signed-off-by: Pavankumar Nandeshwar <quic_pnandesh@quicinc.com>
---
 drivers/net/wireless/ath/Makefile           |   3 +-
 drivers/net/wireless/ath/ath12k/Makefile    |   3 +-
 drivers/net/wireless/ath/ath12k/accel_cfg.c | 124 ++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/accel_cfg.h |  26 ++++
 drivers/net/wireless/ath/ath12k/core.c      |   3 +
 drivers/net/wireless/ath/ath12k/core.h      |   1 +
 drivers/net/wireless/ath/ath_accel_cfg.c    |  37 ++++++
 7 files changed, 195 insertions(+), 2 deletions(-)
 create mode 100644 drivers/net/wireless/ath/ath12k/accel_cfg.c
 create mode 100644 drivers/net/wireless/ath/ath12k/accel_cfg.h
 create mode 100644 drivers/net/wireless/ath/ath_accel_cfg.c

--- a/drivers/net/wireless/ath/Makefile
+++ b/drivers/net/wireless/ath/Makefile
@@ -20,7 +20,8 @@ ath-objs :=	main.o \
 		dfs_pattern_detector.o \
 		dfs_pri_detector.o \
 		ath_sawf.o \
-		ath_fse.o
+		ath_fse.o \
+		ath_accel_cfg.o
 
 ath-$(CPTCFG_ATH_TRACEPOINTS) += trace.o
 
--- a/drivers/net/wireless/ath/ath12k/Makefile
+++ b/drivers/net/wireless/ath/ath12k/Makefile
@@ -23,7 +23,8 @@ ath12k-y += core.o \
 	    dp_mon.o \
 	    vendor.o \
 	    umac_reset.o \
-	    fse.o
+	    fse.o \
+	    accel_cfg.o
 
 ath12k-$(CPTCFG_ATH12K_DEBUGFS) += debugfs.o debugfs_htt_stats.o debugfs_sta.o
 ath12k-$(CPTCFG_NL80211_TESTMODE) += testmode.o
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/accel_cfg.c
@@ -0,0 +1,140 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2024 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include "debug.h"
+#include "accel_cfg.h"
+#include "core.h"
+#include "peer.h"
+#include <linux/module.h>
+#include <linux/if_vlan.h>
+
+/**
+ * ath12k_ds_get_node_id() - Retrieve ds node id
+ * @ndev: pointer to corresponding net_device
+ * @peer_mac: peer mac address
+ * @node_id: Buffer to fill the node id
+ *
+ * Return: true - success, false - failure
+ */
+static bool ath12k_ds_get_node_id(struct net_device *ndev, const u8 *peer_mac,
+				  u8 *node_id)
+{
+	struct wireless_dev *wdev;
+	struct ieee80211_vif *vif;
+	struct ath12k_vif *ahvif;
+	struct ieee80211_sta *sta;
+	struct ath12k_sta *ahsta;
+	struct ath12k_link_vif *arvif;
+	struct ath12k_base *ab;
+
+	wdev = ndev->ieee80211_ptr;
+	if (!wdev) {
+		/*
+		 * If the netdev is vlan, it may not have ieee80211_ptr.
+		 * In that case fetch the ieee80211_ptr from its top most parent
+		 */
+		if (is_vlan_dev(ndev)) {
+			struct net_device *parent_ndev =
+					vlan_dev_real_dev(ndev);
+
+			if (parent_ndev)
+				wdev = parent_ndev->ieee80211_ptr;
+
+			if (!wdev)
+				return false;
+
+		} else {
+			return false;
+		}
+	}
+
+	vif = wdev_to_ieee80211_vif_vlan(wdev);
+	if (!vif)
+		return false;
+
+	ahvif = ath12k_vif_to_ahvif(vif);
+	if (!ahvif)
+		return false;
+
+	if (ahvif->ppe_vp_type != PPE_VP_USER_TYPE_DS)
+		return false;
+
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
+		arvif = ahvif->link[ahvif->primary_link_id];
+		ab = arvif->ab;
+
+		/* Update and return DS node_id only if the chipset support DS*/
+		if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
+			return false;
+
+		*node_id = ab->ppe.ds_node_id;
+		return true;
+	}
+
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
+		rcu_read_lock();
+
+		sta = ieee80211_find_sta(vif, peer_mac);
+		if (!sta) {
+			rcu_read_unlock();
+			return false;
+		}
+
+		ahsta = ath12k_sta_to_ahsta(sta);
+
+		arvif = (!sta->mlo) ? ahvif->link[ahsta->deflink.link_id] :
+				ahvif->link[ahsta->primary_link_id];
+		ab = arvif->ab;
+
+		/* Update and return DS node_id only if the chipset support DS*/
+		if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags)) {
+			rcu_read_unlock();
+			return false;
+		}
+
+		*node_id = ab->ppe.ds_node_id;
+
+		rcu_read_unlock();
+
+		return true;
+	}
+	return false;
+}
+
+static const struct ath_dp_accel_cfg_ops ath_dp_accel_cfg_ops_obj = {
+	.ppeds_get_node_id = ath12k_ds_get_node_id,
+};
+
+/**
+ * ath12k_dp_accel_cfg_init() - Initialize dp_accel_cfg context
+ * @ab: ath12k_base handle
+ *
+ * Return: None
+ */
+void ath12k_dp_accel_cfg_init(struct ath12k_base *ab)
+{
+	struct ath_dp_accel_cfg_ops *ath_dp_accel_cfg_ops_ptr;
+
+	ath_dp_accel_cfg_ops_ptr = &ath_dp_accel_cfg_ops_obj;
+
+	if (ath_dp_accel_cfg_ops_callback_register(ath_dp_accel_cfg_ops_ptr)) {
+		return;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_RX, "cfg accel context initialized\n");
+}
+
+/**
+ * ath12k_dp_accel_cfg_deinit() - Deinitialize dp_accel_cfg context
+ * @ab: ath12k_base handle
+ *
+ * Return: None
+ */
+void ath12k_dp_accel_cfg_deinit(struct ath12k_base *ab)
+{
+	ath_dp_accel_cfg_ops_callback_unregister();
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_RX, "DS context deinitialized\n");
+}
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/accel_cfg.h
@@ -0,0 +1,26 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2024 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#ifndef ACCEL_CFG_H
+#define ACCEL_CFG_H
+
+#include <ath/ath_dp_accel_cfg.h>
+
+/**
+ * ath12k_dp_accel_cfg_init() - Initialize dp_accel_cfg context
+ * @ab: ath12k_base handle
+ *
+ * Return: None
+ */
+void ath12k_dp_accel_cfg_init(struct ath12k_base *ab);
+
+/**
+ * ath12k_dp_accel_cfg_deinit() - Deinitialize dp_accel_cfg context
+ * @ab: ath12k_base handle
+ *
+ * Return: None
+ */
+void ath12k_dp_accel_cfg_deinit(struct ath12k_base *ab);
+#endif
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -21,6 +21,7 @@
 #include "hif.h"
 #include "sawf.h"
 #include "fse.h"
+#include "accel_cfg.h"
 #include "ppe.h"
 #include "ahb.h"
 #include "telemetry.h"
@@ -1294,6 +1295,7 @@ static int ath12k_core_pdev_init(struct
 	ath12k_sawf_init(ab);
 	ath12k_telemetry_init(ab);
 	ath12k_fse_init(ab);
+	ath12k_dp_accel_cfg_init(ab);
 
 	ret = ath12k_dp_ppeds_start(ab);
 	if (ret) {
@@ -1318,6 +1320,7 @@ static void ath12k_core_pdev_deinit(stru
 	ath12k_cfr_deinit(ab);
 	ath12k_spectral_deinit(ab);
 	ath12k_thermal_unregister(ab);
+	ath12k_dp_accel_cfg_deinit(ab);
 	ath12k_fse_deinit(ab);
 	ath12k_telemetry_deinit(ab);
 	ath12k_sawf_deinit(ab);
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -54,6 +54,7 @@
 
 extern unsigned int ath12k_frame_mode;
 extern bool ath12k_erp_support;
+extern unsigned int ath12k_ppe_ds_enabled;
 
 #define ATH12K_MAX_CORE_MASK	(0xFFFF & ((1 << NR_CPUS) - 1))
 extern unsigned int ath12k_rfs_core_mask[4];
--- /dev/null
+++ b/drivers/net/wireless/ath/ath_accel_cfg.c
@@ -0,0 +1,37 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2024 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include <ath/ath_dp_accel_cfg.h>
+#include <linux/module.h>
+
+struct ath_dp_accel_cfg_ops *ath_dp_accel_cfg_cb;
+
+int ath_dp_accel_cfg_ops_callback_register(const struct ath_dp_accel_cfg_ops *ath_cb)
+{
+	if (!ath_cb) {
+		pr_err("Failed to register accel cfg callbacks\n");
+		return -EINVAL;
+	}
+	ath_dp_accel_cfg_cb = ath_cb;
+	return 0;
+}
+EXPORT_SYMBOL(ath_dp_accel_cfg_ops_callback_register);
+
+void ath_dp_accel_cfg_ops_callback_unregister(void)
+{
+	ath_dp_accel_cfg_cb = NULL;
+}
+EXPORT_SYMBOL(ath_dp_accel_cfg_ops_callback_unregister);
+
+bool ath_dp_accel_cfg_fetch_ds_node_id(struct ath_dp_accel_cfg *info)
+{
+	if (!ath_dp_accel_cfg_cb)
+		return false;
+
+	return ath_dp_accel_cfg_cb->ppeds_get_node_id(info->in_dest_dev,
+						info->in_dest_mac,
+						&info->out_ppe_ds_node_id);
+}
+EXPORT_SYMBOL(ath_dp_accel_cfg_fetch_ds_node_id);
