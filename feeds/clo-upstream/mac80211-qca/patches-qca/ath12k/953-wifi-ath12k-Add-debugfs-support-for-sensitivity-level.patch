From 1b2044cbe6579a540e2be07b934f7cd2fcd661c7 Mon Sep 17 00:00:00 2001
From: Santhosh Ramesh <quic_santrame@quicinc.com>
Date: Wed, 22 May 2024 16:14:31 +0530
Subject: [PATCH] wifi: ath12k: Add debugfs support for sensitivity level control

Add support for setting the sensitivity level via debugfs.

The change allows users to adjust the sensitivity level of their
device through the debugfs interface, allowing for optimal reception
and noise mitigation. The valid range for sensitivity levels are
between -95 and -10 dBm.

Commands:

To get/set the sensitivity level,
GET - cat /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0001:01:00.0/
mac0/sensitivity_level

SET - echo N > /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0001:01:00.0/
mac0/sensitivity_level
Replace N with the desired sensitivity level. [N = -10 to -95]

Patch-dependency: [NONE]
Patch-work: [NONE]

Signed-off-by: Santhosh Ramesh <quic_santrame@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  1 +
 drivers/net/wireless/ath/ath12k/debugfs.c | 75 +++++++++++++++++++++++
 2 files changed, 76 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -4722,6 +4722,73 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t ath12k_read_sensitivity_level(struct file *file,
+					     char __user *user_buf,
+					     size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int len = 0;
+	char buf[16];
+
+	len = scnprintf(buf, sizeof(buf) - len, "%d\n", ar->sensitivity_level);
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+#define ATH12K_SENS_LEVEL_MAX    -10
+#define ATH12K_SENS_LEVEL_MIN    -95
+
+static ssize_t ath12k_write_sensitivity_level(struct file *file,
+					      const char __user *user_buf,
+					      size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int ret;
+	s32 level;
+
+	if (kstrtos32_from_user(user_buf, count, 10, &level))
+		return -EINVAL;
+
+	if (level > ATH12K_SENS_LEVEL_MAX || level < ATH12K_SENS_LEVEL_MIN) {
+		ath12k_warn(ar->ab, "invalid sensitivity level: %d (valid range: [%d, %d])\n",
+			    level, ATH12K_SENS_LEVEL_MIN, ATH12K_SENS_LEVEL_MAX);
+		return -EINVAL;
+	}
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->state != ATH12K_STATE_ON) {
+		ret = -ENETDOWN;
+		goto exit;
+	}
+
+	if (ar->sensitivity_level == level) {
+		ret = count;
+		goto exit;
+	}
+
+	ret = ath12k_wmi_pdev_set_param(ar, WMI_PDEV_PARAM_SENSITIVITY_LEVEL,
+					level, ar->pdev->pdev_id);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to set sensitivity level: %d\n", ret);
+		goto exit;
+	}
+
+	ar->sensitivity_level = level;
+	ret = count;
+
+exit:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static const struct file_operations fops_sensitivity_level = {
+	.read = ath12k_read_sensitivity_level,
+	.write = ath12k_write_sensitivity_level,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t ath12k_read_ani_poll_period(struct file *file,
 					   char __user *user_buf,
 					   size_t count, loff_t *ppos)
@@ -5071,6 +5138,8 @@ int ath12k_debugfs_register(struct ath12
 	debugfs_create_file("ani_listen_period", 0600,
 			    ar->debug.debugfs_pdev, ar,
 			    &fops_ani_listen_period);
+	debugfs_create_file("sensitivity_level", 0600, ar->debug.debugfs_pdev, ar,
+			    &fops_sensitivity_level);
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1124,6 +1124,7 @@ struct ath12k {
 	struct work_struct erp_handle_trigger_work;
 
 	u16 csa_active_cnt;
+	s32 sensitivity_level;
 };
 
 struct ath12k_hw {
