From 72c6bc57cf63155cd472d8d709bf1b6345fccc71 Mon Sep 17 00:00:00 2001
From: Neha Bisht <quic_nbisht@quicinc.com>
Date: Wed, 29 May 2024 17:20:54 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Add DS support for station mode

Current ath12k does not support Direct Switch (DS) mode for station
mode cases. With new design for ath12k driver, add DS support for
station mode.

Add support for DS profiling for station mode along with
configuring DS metadata for routing. Also, configure and create ast
override profiles for DS for station mode.

Change-Id: Ibbb20cd74b82bda10b59152810d456b335de8cd6
Signed-off-by: Neha Bisht <quic_nbisht@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c   |  5 +++--
 drivers/net/wireless/ath/ath12k/dp.h   |  2 ++
 drivers/net/wireless/ath/ath12k/hal.c  | 10 +++++++++
 drivers/net/wireless/ath/ath12k/hal.h  | 11 +++++++++
 drivers/net/wireless/ath/ath12k/mac.c  |  3 ++-
 drivers/net/wireless/ath/ath12k/peer.c | 25 ++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/ppe.c  | 31 +++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/ppe.h  | 12 ++++++----
 8 files changed, 90 insertions(+), 9 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index adffee8..8bd7a95 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -88,9 +88,10 @@ int ath12k_dp_peer_default_route_setup(struct ath12k *ar, struct ath12k_link_vif
 		   hweight16(sta->valid_links));
 
 	/* keep last - override any PPE DS specific routing config */
-	if (ahvif->vdev_type != WMI_VDEV_TYPE_MONITOR &&
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA ||
+	    (ahvif->vdev_type != WMI_VDEV_TYPE_MONITOR &&
 	    !(ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
-	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S))
+	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S)))
 		ath12k_dp_peer_ppeds_route_setup(ar, arvif, arsta);
 
 	return 0;
diff --git a/drivers/net/wireless/ath/ath12k/dp.h b/drivers/net/wireless/ath/ath12k/dp.h
index 1a61c4a..2287cfc 100644
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -2336,6 +2336,8 @@ struct ath11k_htt_mlo_link_peer_info {
 
 #define ATH12K_HTT_MLO_PEER_MAP_INFO0_PEER_ID		GENMASK(23, 8)
 #define ATH12K_HTT_MLO_PEER_MAP_MAC_ADDR_H16		GENMASK(15, 0)
+#define ATH12K_HTT_MLO_PEER_MAP_AST_IDX   		GENMASK(15, 0)
+#define ATH12K_HTT_MLO_PEER_MAP_CACHE_SET_NUM  	GENMASK(31, 28)
 
 struct ath11k_htt_mlo_peer_map_msg {
 	u32 info0;
diff --git a/drivers/net/wireless/ath/ath12k/hal.c b/drivers/net/wireless/ath/ath12k/hal.c
index 4c3eb07..2a288ea 100644
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -2781,3 +2781,13 @@ ssize_t ath12k_debugfs_hal_dump_srng_stats(struct ath12k_base *ab, char *buf, in
 
 	return len;
 }
+
+void ath12k_hal_ppeds_cfg_ast_override_map_reg(struct ath12k_base *ab, u8 idx,
+					       u32 ppeds_idx_map_val)
+{
+	u32 reg_addr;
+
+	reg_addr = HAL_TCL_PPE_INDEX_MAPPING_TABLE_n_ADDR(HAL_SEQ_WCSS_UMAC_TCL_REG, idx);
+
+	ath12k_hif_write32(ab, reg_addr, ppeds_idx_map_val);
+}
diff --git a/drivers/net/wireless/ath/ath12k/hal.h b/drivers/net/wireless/ath/ath12k/hal.h
index c563f64..50665be 100644
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -147,6 +147,12 @@ struct ath12k_dp_rx_info;
 	((ab)->hw_params->regs->hal_tcl_ppe2tcl_ring_base_lsb)
 #define HAL_TCL_PPE2TCL1_RING_HP		0x00002038
 
+#define HAL_TCL_PPE_INDEX_MAPPING_OFFSET 0x214
+#define HAL_TCL_PPE_INDEX_MAPPING_SLOT_SIZE 0x4
+#define HAL_TCL_PPE_INDEX_MAPPING_TABLE_n_ADDR(base,n) ((base) + \
+			HAL_TCL_PPE_INDEX_MAPPING_OFFSET + \
+			(HAL_TCL_PPE_INDEX_MAPPING_SLOT_SIZE * (n)))
+
 /* REO2SW(x) R0 ring configuration address */
 #define HAL_REO1_GEN_ENABLE			0x00000000
 #define HAL_REO1_MISC_CTRL_ADDR(ab) \
@@ -1139,6 +1145,9 @@ struct ath12k_hal_tcl_to_wbm_rbm_map  {
 	u8 rbm_id;
 };
 
+#define HAL_TX_PPEDS_CFG_SEARCH_IDX                GENMASK(19, 0)
+#define HAL_TX_PPEDS_CFG_CACHE_SET                 GENMASK(23, 20)
+
 struct hal_ops {
 	bool (*rx_desc_get_first_msdu)(struct hal_rx_desc *desc);
 	bool (*rx_desc_get_last_msdu)(struct hal_rx_desc *desc);
@@ -1277,6 +1286,8 @@ void ath12k_hal_reo_shared_qaddr_cache_clear(struct ath12k_base *ab);
 void ath12k_hal_srng_prefetch_desc(struct ath12k_base *ab,
 				   struct hal_srng *srng);
 void ath12k_hal_reo_config_reo2ppe_dest_info(struct ath12k_base *ab);
+void ath12k_hal_ppeds_cfg_ast_override_map_reg(struct ath12k_base *ab, u8 idx,
+					       u32 ppeds_idx_map_val);
 
 static inline
 u32 *ath12k_hal_srng_src_get_next_entry_nolock(struct ath12k_base *ab,
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 6c471d8..572a1a8 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11444,7 +11444,8 @@ static int ath12k_mac_op_add_interface(struct ieee80211_hw *hw,
 	 */
 	/* Priotitize DS over RFS until per vap configuration support */
 	if (ath12k_ppe_ds_enabled &&
-	    vif->type == NL80211_IFTYPE_AP &&
+	    (vif->type == NL80211_IFTYPE_AP ||
+	    vif->type == NL80211_IFTYPE_STATION) &&
 	    ath12k_frame_mode == ATH12K_HW_TXRX_ETHERNET) {
 		ppe_vp_type = PPE_VP_USER_TYPE_DS;
 	} else if (ath12k_ppe_rfs_support && vif->type != NL80211_IFTYPE_AP_VLAN) {
diff --git a/drivers/net/wireless/ath/ath12k/peer.c b/drivers/net/wireless/ath/ath12k/peer.c
index f80dee9..0458f98 100644
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -7,6 +7,9 @@
 #include "core.h"
 #include "peer.h"
 #include "debug.h"
+#ifdef CPTCFG_MAC80211_PPE_SUPPORT
+#include "ppe.h"
+#endif
 
 static struct ath12k_ml_peer *ath12k_ml_peer_find(struct ath12k_hw *ah,
 						  const u8 *addr)
@@ -311,6 +314,8 @@ void ath12k_peer_mlo_map_event(struct ath12k_base *ab, struct sk_buff *skb)
 	struct ath12k_peer *peer;
 	u16 mld_mac_h16;
 	u8 mld_addr[ETH_ALEN];
+	u16 ast_idx;
+	u16 cache_num;
 
 	msg = (struct ath11k_htt_mlo_peer_map_msg *)skb->data;
 
@@ -332,8 +337,13 @@ void ath12k_peer_mlo_map_event(struct ath12k_base *ab, struct sk_buff *skb)
 	}
 	mld_mac_h16 = FIELD_GET(ATH12K_HTT_MLO_PEER_MAP_MAC_ADDR_H16,
 				msg->mac_addr.mac_addr_h16);
+	ast_idx = FIELD_GET(ATH12K_HTT_MLO_PEER_MAP_AST_IDX, msg->info1);
+	cache_num = FIELD_GET(ATH12K_HTT_MLO_PEER_MAP_CACHE_SET_NUM, msg->info1);
 	ath12k_dp_get_mac_addr(msg->mac_addr.mac_addr_l32, mld_mac_h16, mld_addr);
 
+	peer->hw_peer_id = ast_idx;
+	peer->ast_hash = cache_num;
+
 	WARN_ON(memcmp(mld_addr, peer->ml_addr, ETH_ALEN));
 
 	spin_unlock_bh(&ab->base_lock);
@@ -572,7 +582,9 @@ int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, const u8 *addr)
 
 static int __ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr)
 {
-	int ret;
+	int ret = 0;
+	struct ath12k_link_vif *arvif = NULL;
+	struct ath12k_base *ab = ar->ab;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -580,6 +592,16 @@ static int __ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr)
 	if (ret)
 		return ret;
 
+	arvif = ath12k_mac_get_arvif(ar, vdev_id);
+	if (!arvif) {
+		ath12k_warn(ab,
+			    "failed to get arvif with vdev_id %d,"
+			    "skip ppeds ast override\n",
+			    vdev_id);
+	} else if (arvif->ahvif->vif->type == NL80211_IFTYPE_STATION) {
+		ath12k_dp_tx_ppeds_cfg_astidx_cache_mapping(ab, arvif, false);
+	}
+
 	ret = ath12k_wait_for_peer_delete_done(ar, vdev_id, addr);
 	if (ret)
 		return ret;
@@ -811,6 +833,7 @@ int ath12k_peer_create(struct ath12k *ar, struct ath12k_link_vif *arvif,
 		arvif->ast_idx = peer->hw_peer_id;
 		arvif->desc.info4 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_SEARCH_INDEX, arvif->ast_idx) |
 				    FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_CACHE_SET_NUM, arvif->ast_hash);
+		ath12k_dp_tx_ppeds_cfg_astidx_cache_mapping(ar->ab, arvif, true);
 	}
 
 	peer->sec_type = HAL_ENCRYPT_TYPE_OPEN;
diff --git a/drivers/net/wireless/ath/ath12k/ppe.c b/drivers/net/wireless/ath/ath12k/ppe.c
index 463b8b4..9ed6d19 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -530,6 +530,7 @@ void ath12k_dp_peer_ppeds_route_setup(struct ath12k *ar, struct ath12k_link_vif
 	/* When SLO STA is associated to AP link vif which does not have DS rings,
  	 * do not enable DS.
 	 */
+	/* Check is for handling IPQ5322 radio, Can we add IPQ5322 target specific check here */
 	if (!sta->mlo && !test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
 		return;
 
@@ -799,7 +800,7 @@ int ath12k_ppeds_attach_link_vif(struct ath12k_link_vif *arvif)
 		return 0;
 	}
 
-	if (ahvif->vif->type != NL80211_IFTYPE_AP) {
+	if (ahvif->vif->type != NL80211_IFTYPE_AP && ahvif->vif->type != NL80211_IFTYPE_STATION) {
 		ath12k_dbg(ab, ATH12K_DBG_PPE,
 			   "DS is not supported for vap type %d \n", ahvif->vif->type);
 		return 0;
@@ -862,6 +863,34 @@ vp_free:
 	return ret;
 }
 
+void ath12k_dp_tx_ppeds_cfg_astidx_cache_mapping(struct ath12k_base *ab,
+						 struct ath12k_link_vif *arvif,
+						 bool peer_map)
+{
+	u32 ppeds_idx_map_val = 0;
+	int ppe_vp_profile_idx = arvif->ppe_vp_profile_idx;
+	struct ath12k_dp_ppe_vp_profile *vp_profile;
+
+	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
+		return;
+
+	vp_profile = &ab->dp.ppe_vp_profile[ppe_vp_profile_idx];
+	if (!vp_profile->is_configured) {
+		ath12k_err(ab, "Invalid PPE VP profile for vdev_id:%d",
+				arvif->vdev_id);
+		return;
+	}
+	if (arvif->ahvif->vif->type == NL80211_IFTYPE_STATION) {
+		if (peer_map) {
+			ppeds_idx_map_val |=
+				u32_encode_bits(arvif->ast_idx, HAL_TX_PPEDS_CFG_SEARCH_IDX) |
+				u32_encode_bits(arvif->ast_hash, HAL_TX_PPEDS_CFG_CACHE_SET);
+		}
+		ath12k_hal_ppeds_cfg_ast_override_map_reg(ab, vp_profile->search_idx_reg_num,
+							  ppeds_idx_map_val);
+	}
+}
+
 void ath12k_ppeds_detach_link_vif(struct ath12k_link_vif *arvif)
 {
 	struct ath12k *ar = arvif->ar;
diff --git a/drivers/net/wireless/ath/ath12k/ppe.h b/drivers/net/wireless/ath/ath12k/ppe.h
index fd82809..4d12a99 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -114,6 +114,9 @@ void ath12k_ppeds_partner_link_start_queues(struct ath12k *ar);
 void ath12k_ppeds_partner_link_stop_queues(struct ath12k *ar);
 void ath12k_dp_rx_ppe_fse_register(void);
 void ath12k_dp_rx_ppe_fse_unregister(void);
+void ath12k_dp_tx_ppeds_cfg_astidx_cache_mapping(struct ath12k_base *ab,
+						 struct ath12k_link_vif *arvif,
+						 bool peer_map);
 #else
 void ath12k_dp_srng_ppeds_cleanup(struct ath12k_base *ab)
 {
@@ -233,13 +236,14 @@ void ath12k_dp_rx_ppe_fse_unregister(void)
 	return;
 }
 
-void ath12k_dp_peer_ppeds_route_setup(struct ath12k *ar, struct ath12k_link_vif *arvif,
-				      struct ath12k_link_sta *arsta)
+void ath12k_dp_ppeds_update_vp_entry(struct ath12k *ar,
+				     struct ath12k_link_vif *arvif)
 {
 	return;
 }
-void ath12k_dp_ppeds_update_vp_entry(struct ath12k *ar,
-				     struct ath12k_link_vif *arvif)
+void ath12k_dp_tx_ppeds_cfg_astidx_cache_mapping(struct ath12k_base *ab,
+						 struct ath12k_link_vif *arvif,
+						 bool peer_map)
 {
 	return;
 }
-- 
2.34.1

