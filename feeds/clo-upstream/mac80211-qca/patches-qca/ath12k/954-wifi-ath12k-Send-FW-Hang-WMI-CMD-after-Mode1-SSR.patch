From 7f7f2b0303daf2e41a4a95ad5c807969782353df Mon Sep 17 00:00:00 2001
From: Vignesh C <quic_vignc@quicinc.com>
Date: Sun, 26 May 2024 00:33:47 +0530
Subject: [PATCH] wifi: ath12k: Send FW Hang WMI CMD after Mode1 SSR

When mode1 SSR is successful, FW expects host to reconfigure the
recovery mode to the chipset which has recovered. This is because,
recovered chipset doesnt have the previously set recovery mode.

If they are any mismatch on recovery mode config across all the
chipsets, FW will default to Mode0. To avoid these scenario,
Send WMI_FW_HANG_CMD for all the chipsets once after target has
recovered from Mode1.

Patch-dependency: 849-wifi-ath12k-Add-support-for-Mode1-SSR-for-STATION-VI.patch
                  [depends on Mode1 SSR changes]

Signed-off-by: Vignesh C <quic_vignc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c    |  8 +++++
 drivers/net/wireless/ath/ath12k/debugfs.c | 44 +++++++++++++----------
 drivers/net/wireless/ath/ath12k/debugfs.h |  1 +
 3 files changed, 34 insertions(+), 19 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -3192,6 +3192,11 @@ int ath12k_mode1_recovery_reconfig(struc
 		}
 	}
 
+	/* Send WMI_FW_HANG_CMD to FW after target has started. This is to
+	* update the target's SSR recovery mode after it has recovered.
+	*/
+	ath12k_send_fw_hang_cmd(ab, ab->fw_recovery_support);
+
 	/* Send disassoc to MLD STA */
 	ath12k_core_peer_disassoc(ag, ab);
 	ab->recovery_start = false;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2047,32 +2047,16 @@ static void ath12k_debug_multipd_wmi_pde
 	}
 }
 
-static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
-					      const char __user *user_buf,
-					      size_t count, loff_t *ppos)
+void ath12k_send_fw_hang_cmd(struct ath12k_base *ab,
+			    unsigned int value)
 {
-	struct ath12k_base *ab = file->private_data;
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
-	struct ath12k_hw_group *ag;
-	unsigned int value;
+	struct ath12k_hw_group *ag = ab->ag;
 	enum wmi_fw_hang_recovery_mode_type recovery_mode;
 	int ret, radio_idx, radioup = 0;
 	int i;
 
-	if (kstrtouint_from_user(user_buf, count, 0, &value))
-	         return -EINVAL;
-
-	if (value < ATH12K_FW_RECOVERY_DISABLE ||
-	    value > ATH12K_FW_RECOVERY_ENABLE_MODE1_AUTO) {
-	         ath12k_warn(ab, "Please enter: 0 = Disable, 1 = Enable (auto recover),"
-		 	     "2 = Enable SSR Mode1");
-	         ret = -EINVAL;
-	         goto exit;
-	}
-
-	ag = ab->ag;
-
 	if (!value)
 		recovery_mode = ATH12K_WMI_DISABLE_FW_RECOVERY;
 	else
@@ -2120,6 +2104,28 @@ static ssize_t ath12k_debug_write_fw_rec
 						  ATH12K_FW_RECOVERY_DISABLE;
 		ath12k_debug_multipd_wmi_pdev_set_param(ab, ab->fw_recovery_support);
 	}
+}
+
+static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
+					     const char __user *user_buf,
+					     size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	unsigned int value;
+	int ret;
+
+	if (kstrtouint_from_user(user_buf, count, 0, &value))
+		return -EINVAL;
+
+	if (value < ATH12K_FW_RECOVERY_DISABLE ||
+	   value > ATH12K_FW_RECOVERY_ENABLE_MODE1_AUTO) {
+		ath12k_warn(ab, "Please enter: 0 = Disable, 1 = Enable (auto recover), "
+			    "2 = Enable SSR Mode1, 3 = Enable SSR only");
+		ret = -EINVAL;
+ 		goto exit;
+	}
+
+	ath12k_send_fw_hang_cmd(ab, value);
 
 	ret = count;
 
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -480,4 +480,5 @@ static inline unsigned int ath12k_debugf
 
 #endif
 
+void ath12k_send_fw_hang_cmd(struct ath12k_base *ab, unsigned int value);
 #endif /* _ATH12K_DEBUGFS_H_ */
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -15428,6 +15428,7 @@ ath12k_mac_reconfig_complete(struct ieee
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
+	struct ath12k_base *ab;
 	u8 restart_count = 0;
 	int i;
 
@@ -15438,6 +15439,7 @@ ath12k_mac_reconfig_complete(struct ieee
 	mutex_lock(&ah->conf_mutex);
 
 	ar = ah->radio;
+	ab = ar->ab;
 
 	if (asserted_radio) {
 		ath12k_mac_reconfig_completion(asserted_radio, &restart_count);
@@ -15449,6 +15451,7 @@ ath12k_mac_reconfig_complete(struct ieee
 		ar++;
 	}
 
+	ath12k_send_fw_hang_cmd(ab, ab->fw_recovery_support);
 out:
 	/* If is_one_radio flag is set, then assume other radios
 	* are up and running and wake queues once the reconfig is
