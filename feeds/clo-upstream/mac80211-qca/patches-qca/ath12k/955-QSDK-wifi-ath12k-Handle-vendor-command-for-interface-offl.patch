From b3206246d943a289b5ba524a61336eee56c3c565 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Thu, 13 Jun 2024 22:51:03 -0700
Subject: [PATCH] QSDK: ath12k: Handle vendor command for interface offload
 type

Add support to handle interface offload type configuration
through vendor command from userspace tools. Use the offload
type configured to allocate respective PPE VP and map it with the
netdev. This enables the PPE HW to identify the flows and handle
the frames in the respective offload datapath configured

Patch-depdendency: 951-c-QSDK-wifi-ath12k-support-DS-for-SLO-and-MLO-AP-modes.patch
                   918-QSDK-mac80211-Handle-vendor-command-for-interface-offload.patch
Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c   |  2 +-
 drivers/net/wireless/ath/ath12k/core.h   |  5 +-
 drivers/net/wireless/ath/ath12k/dp.c     |  3 +-
 drivers/net/wireless/ath/ath12k/mac.c    | 35 +++++++------
 drivers/net/wireless/ath/ath12k/ppe.c    |  5 --
 drivers/net/wireless/ath/ath12k/vendor.c | 64 +++++++++++++++---------
 drivers/net/wireless/ath/ath12k/vendor.h | 20 +++++---
 7 files changed, 81 insertions(+), 53 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -57,7 +57,7 @@ static unsigned int ath12k_en_fwlog = tr
 module_param_named(en_fwlog, ath12k_en_fwlog, uint, 0644);
 MODULE_PARM_DESC(en_fwlog, "fwlog: 0-disable, 1-enable");
 
-unsigned int ath12k_ppe_ds_enabled = false;
+unsigned int ath12k_ppe_ds_enabled = true;
 module_param_named(ppe_ds_enable, ath12k_ppe_ds_enabled, uint, 0644);
 MODULE_PARM_DESC(ppe_ds_enable, "ppe_ds_enable: 0-disable, 1-enable");
 
@@ -1779,9 +1779,8 @@ int ath12k_core_qmi_firmware_ready(struc
 			 * @ath12k_mac_update_vif_offload()
 			 * TODO: add device capability check
 			 */
-			ath12k_frame_mode = ATH12K_HW_TXRX_ETHERNET;
-		}
-		if (ab->hif.bus == ATH12K_BUS_PCI || ab->hif.bus == ATH12K_BUS_HYBRID)
+			ath12k_ppe_ds_enabled = 0;
+		} else if (ab->hif.bus == ATH12K_BUS_PCI || ab->hif.bus == ATH12K_BUS_HYBRID)
 			set_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags);
 	}
 #endif
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -515,11 +515,12 @@ struct ath12k_vif {
 	struct dentry *debugfs_rfs_core_mask;
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	bool chanctx_peer_del_done;
-
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* PPE mode independent variables */
 	int ppe_vp_num;
 	int ppe_core_mask;
-	int ppe_vp_type;
+	u8 ppe_vp_type;
+#endif
 };
 
 struct ath12k_vif_iter {
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -86,13 +86,14 @@ int ath12k_dp_peer_default_route_setup(s
 	ath12k_dbg(ab, ATH12K_DBG_DP_RX, "peer %pM set def route id %d sta_link %d\n",
 		   arsta->addr, lmac_peer_routing_id,
 		   hweight16(sta->valid_links));
-
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* keep last - override any PPE DS specific routing config */
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA ||
 	    (ahvif->vdev_type != WMI_VDEV_TYPE_MONITOR &&
 	    !(ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
 	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S)))
 		ath12k_dp_peer_ppeds_route_setup(ar, arvif, arsta);
+#endif
 
 	return 0;
 }
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11460,8 +11460,12 @@ static int ath12k_mac_op_add_interface(s
 {
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_hw *ah = hw->priv;
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+	int i;
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	int ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM, ppe_core_mask;
-	int i, ppe_vp_type = ATH12K_INVALID_PPE_VP_TYPE;
+	int ppe_vp_type = ATH12K_INVALID_PPE_VP_TYPE;
+#endif
 
 	/* The ar in which this vif will be assigned can be determined since
 	 * it depends on the channel in which the vif is brought up.
@@ -11471,17 +11475,23 @@ static int ath12k_mac_op_add_interface(s
 	 * here itself
 	 */
 
+	if (!wdev)
+		return -ENODEV;
+
 	mutex_lock(&ah->conf_mutex);
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* Reuse existing vp_num during Subsystem Recovery */
 	if (ahvif->ppe_vp_num > 0) {
 		ppe_vp_num = ahvif->ppe_vp_num;
 		ppe_core_mask = ahvif->ppe_core_mask;
 		ppe_vp_type = ahvif->ppe_vp_type;
 	}
+#endif
 
 	memset(ahvif, 0, sizeof(*ahvif));
 
 	ahvif->vdev_type = (enum wmi_vdev_type)vif->type;
+	ahvif->ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
 	ahvif->vif = vif;
 	ahvif->ah = ah;
 
@@ -11489,20 +11499,22 @@ static int ath12k_mac_op_add_interface(s
 	ahvif->deflink.link_id = 0;
 	ahvif->mcbc_gsn = 0;
 
-	/* TODO: DS: ppe_vp allocation for AP_VLAN mode is done in ieee80211_do_open()
-	 * and ppe_vp_num is maintained in sdata. Cleanup this with DS enablement in
-	 * WDS mode.
-	 */
-	/* Priotitize DS over RFS until per vap configuration support */
-	if (ath12k_ppe_ds_enabled &&
-	    (vif->type == NL80211_IFTYPE_AP ||
-	    vif->type == NL80211_IFTYPE_STATION) &&
-	    ath12k_frame_mode == ATH12K_HW_TXRX_ETHERNET) {
-		ppe_vp_type = PPE_VP_USER_TYPE_DS;
-	} else if (ath12k_ppe_rfs_support && vif->type != NL80211_IFTYPE_AP_VLAN) {
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	switch (wdev->ppe_vp_type) {
+	case PPE_VP_USER_TYPE_PASSIVE:
+	case PPE_VP_USER_TYPE_ACTIVE:
+	case PPE_VP_USER_TYPE_DS:
+		ppe_vp_type = wdev->ppe_vp_type;
+		break;
+	default:
 		ppe_vp_type = PPE_VP_USER_TYPE_PASSIVE;
+		break;
 	}
 
+	if (vif->type == NL80211_IFTYPE_MESH_POINT &&
+	    ppe_vp_type != PPE_VP_USER_TYPE_PASSIVE) {
+		ppe_vp_type = PPE_VP_USER_TYPE_PASSIVE;
+	}
 	if (ppe_vp_type != ATH12K_INVALID_PPE_VP_TYPE) {
 		if (ppe_vp_num == ATH12K_INVALID_PPE_VP_NUM) {
 			ahvif->ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
@@ -11513,7 +11525,7 @@ static int ath12k_mac_op_add_interface(s
 			ahvif->ppe_vp_type = ppe_vp_type;
 		}
 	}
-
+#endif
 	INIT_LIST_HEAD(&ahvif->deflink.list);
 	INIT_DELAYED_WORK(&ahvif->deflink.connection_loss_work,
 			ath12k_mac_vif_sta_connection_loss_work);
@@ -11717,9 +11729,10 @@ static void ath12k_mac_op_remove_interfa
 		ath12k_mac_remove_link_interface(hw, arvif);
 		ath12k_mac_unassign_link_vif(arvif);
 	}
-
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* free ppe vp allocated for RFS */
 	ath12k_vif_free_vp(ahvif);
+#endif
 
 	mutex_unlock(&ah->conf_mutex);
 }
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1293,8 +1293,6 @@ int ath12k_change_core_mask_for_ppe_rfs(
 	if (!wdev)
 		return -ENODEV;
 
-	if (!ath12k_ppe_rfs_support)
-		return 0;
 
 	if (ahvif->ppe_vp_num <= 0 || ahvif->ppe_vp_type != PPE_VP_USER_TYPE_PASSIVE) {
 		ath12k_warn(ab, "invalid vp for dev %s\n", wdev->netdev->name);
@@ -1373,9 +1371,6 @@ int ath12k_vif_alloc_vp(struct ath12k_vi
 	if (!wdev)
 		return -ENODEV;
 
-	if (ppe_vp_type == PPE_VP_USER_TYPE_PASSIVE && !ath12k_ppe_rfs_support)
-		return 0;
-
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR || !wdev->netdev)
 		return 0;
 
@@ -1423,8 +1418,8 @@ int ath12k_vif_alloc_vp(struct ath12k_vi
 	}
 
 	if (ppe_vp_num <= 0) {
-		ath12k_err(NULL, "Error in enabling PPE VP type %d for netdev %s\n",
-			   vpai.usr_type, wdev->netdev->name);
+		ath12k_err(NULL, "Error in enabling PPE VP type %d for netdev %s err %d\n",
+			   vpai.usr_type, wdev->netdev->name, ppe_vp_num);
 		return -ENOSR;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -142,8 +142,8 @@ ath12k_vendor_scs_config_policy[QCA_WLAN
 };
 
 static const struct nla_policy
-ath12k_ds_policy[QCA_WLAN_VENDOR_ATTR_DS_MAX + 1] = {
-	[QCA_WLAN_VENDOR_ATTR_CONFIG_EHT_MLO_MODE] = {.type = NLA_U8},
+ath12k_wifi_config_policy[QCA_WLAN_VENDOR_ATTR_CONFIG_MAX + 1] = {
+	[QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE] = {.type = NLA_U8},
 };
 
 static const struct netlink_range_validation
@@ -1006,34 +1006,60 @@ end_stats:
 	return ret;
 }
 
-static int ath12k_vendor_ds_handler(struct wiphy *wihpy,
-			    struct wireless_dev *wdev,
-			    const void *data,
-			    int data_len)
+static int ath12k_vendor_wifi_config_handler(struct wiphy *wihpy,
+					     struct wireless_dev *wdev,
+					     const void *data, int data_len)
 {
-	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_DS_MAX + 1];
+	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_CONFIG_MAX + 1];
 	int ret = 0;
-	int ml_netdev = 0;
-
-	/* TODO: DS: This function to be reused for per VAP PPE VP
-	 * config support
-	 */
-	if (!ath12k_ppe_ds_enabled)
-		return 0;
+	int ppe_vp_type = 0;
+	char *type = NULL;
 
-	ret = nla_parse(tb, QCA_WLAN_VENDOR_ATTR_DS_MAX, data, data_len,
-			ath12k_ds_policy, NULL);
+	ret = nla_parse(tb, QCA_WLAN_VENDOR_ATTR_CONFIG_MAX, data, data_len,
+			ath12k_wifi_config_policy, NULL);
 
 	if (ret) {
 		ath12k_err(NULL, "Invalid attribute with ds %d\n", ret);
 		return ret;
 	}
 
-	if (tb[QCA_WLAN_VENDOR_ATTR_CONFIG_EHT_MLO_MODE])
-		ml_netdev = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_CONFIG_EHT_MLO_MODE]);
+	if (tb[QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE])
+		ppe_vp_type = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE]);
+
+	if (ppe_vp_type > PPE_VP_USER_TYPE_DS) {
+		ath12k_dbg(NULL, ATH12K_DBG_PPE, "ppe_vp_type value greater than 4 (%d)(%s)\n",
+			   ppe_vp_type, wdev->netdev->name);
+		return -EINVAL;
+	}
+
+	switch (ppe_vp_type) {
+	case PPE_VP_USER_TYPE_PASSIVE:
+		type = "passive";
+		break;
+	case PPE_VP_USER_TYPE_ACTIVE:
+		type = "active";
+		break;
+	case PPE_VP_USER_TYPE_DS:
+		type = "ds";
+		break;
+	default:
+		type = "passive";
+		ppe_vp_type = 1;
+		break;
+	}
+
+	if (!ath12k_ppe_ds_enabled) {
+		type = "passive";
+		ppe_vp_type = 1;
+		ath12k_err(NULL, "Overriding offload type to passive as DS isn't enabled\n");
+	}
 
-	ath12k_dbg(NULL, ATH12K_DBG_PPE,
-		   "Marking dev [%s] as mlo netdev. %d\n", wdev->netdev->name, ml_netdev);
+	wdev->ppe_vp_type = ppe_vp_type;
+	/* TODO: Ignore if the same is reassigned and flush the existing ecm rules */
+
+	ath12k_info(NULL, "[%s] vendor cmd type [%s] %d (%s) state %d\n",
+		    current->comm,  wdev->netdev->name, wdev->ppe_vp_type,
+		    type, netif_running(wdev->netdev));
 
 	return 0;
 }
@@ -2147,9 +2173,9 @@ static struct wiphy_vendor_command ath12
 	{
 		.info.vendor_id = QCA_NL80211_VENDOR_ID,
 		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION,
-		.doit = ath12k_vendor_ds_handler,
-		.policy = ath12k_ds_policy,
-		.maxattr = QCA_WLAN_VENDOR_ATTR_DS_MAX,
+		.doit = ath12k_vendor_wifi_config_handler,
+		.policy = ath12k_wifi_config_policy,
+		.maxattr = QCA_WLAN_VENDOR_ATTR_CONFIG_MAX,
 		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
 	},
 #endif /* CPTCFG_ATH12K_SAWF */
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -544,13 +544,21 @@ struct unified_stats {
 	u_int32_t size[STATS_FEAT_MAX];
 };
 
-enum qca_wlan_vendor_attr_ds {
-	QCA_WLAN_VENDOR_ATTR_DS_INVALID = 0,
-	QCA_WLAN_VENDOR_ATTR_CONFIG_EHT_MLO_MODE = 90,
+enum qca_wlan_vendor_attr_config {
+	QCA_WLAN_VENDOR_ATTR_CONFIG_INVALID = 0,
+	/* 8-bit unsigned value to configure the interface offload type
+	 *
+	 * This attribute is used to configure the interface offload capability.
+	 * User can configure software based acceleration, hardware based
+	 * acceleration, or a combination of both using this option. More
+	 * details on each option is described under the enum definition below.
+	 * Uses enum qca_wlan_intf_offload_type for values.
+	 */
+	QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE = 120,
 	/* Keep last */
-	QCA_WLAN_VENDOR_ATTR_DS_AFTER_LAST,
-	QCA_WLAN_VENDOR_ATTR_DS_MAX =
-		QCA_WLAN_VENDOR_ATTR_DS_AFTER_LAST - 1
+	QCA_WLAN_VENDOR_ATTR_CONFIG_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_CONFIG_MAX =
+		QCA_WLAN_VENDOR_ATTR_CONFIG_AFTER_LAST - 1
 };
 
 void ath12k_vendor_telemetry_notify_breach(struct ieee80211_vif *vif, u8 *mac_addr,
