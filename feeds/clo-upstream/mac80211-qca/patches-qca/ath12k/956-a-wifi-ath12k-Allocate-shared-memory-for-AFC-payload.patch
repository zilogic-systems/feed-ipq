From cc678efb4a3482befdb41cfe54d5e38b8be081c4 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Fri, 7 Jun 2024 12:56:44 +0530
Subject: [PATCH] wifi: ath12k: Allocate shared memory for AFC payload

Allocate and assign shared memory chunk for storing AFC payload. Host
will write the AFC payload to this allocated memory and FW will be
notified to read the same.

Assign the macro ATH12K_FW_CFG_FILE with the file name fw_cfg_ini.bin
instead of firmware.dat, as AFC information is available in the
fw_cfg_ini.bin file.

Patch dependency: 333-0020-mac80211-add-support-for-6G-channels-and-regulatory.patch
Tag: 6G_REGULATORY

Signed-off-by: Amith A <quic_amitajit@quicinc.com>
Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/coredump.c |  8 +++-
 drivers/net/wireless/ath/ath12k/hw.c       |  5 ++
 drivers/net/wireless/ath/ath12k/hw.h       |  5 +-
 drivers/net/wireless/ath/ath12k/qmi.c      | 54 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/qmi.h      |  4 ++
 5 files changed, 73 insertions(+), 3 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -178,6 +178,9 @@ ath12k_coredump_get_dump_type(u32 mem_re
 	case MLO_GLOBAL_MEM_REGION_TYPE:
 		dump_type = ATH12K_FW_MLO_GLOBAL;
 		break;
+	case AFC_REGION_TYPE:
+		dump_type = ATH12K_FW_AFC;
+		break;
 	default:
 		dump_type = ATH12K_FW_DUMP_TYPE_MAX;
 		break;
@@ -273,7 +276,8 @@ void ath12k_coredump_download_rddm(struc
 		    (ab->qmi.target_mem[i].type == CALDB_MEM_REGION_TYPE && ath12k_cold_boot_cal && ab->hw_params->cold_boot_calib) ||
 		    ab->qmi.target_mem[i].type == M3_DUMP_REGION_TYPE ||
 		    ab->qmi.target_mem[i].type == PAGEABLE_MEM_REGION_TYPE ||
-		    ab->qmi.target_mem[i].type == MLO_GLOBAL_MEM_REGION_TYPE)
+		    ab->qmi.target_mem[i].type == MLO_GLOBAL_MEM_REGION_TYPE ||
+		    ab->qmi.target_mem[i].type == AFC_REGION_TYPE)
 			rem_seg_cnt++;
 	}
 
@@ -508,4 +512,4 @@ send_resp:
        ret = ath12k_qmi_m3_dump_upload_done_ind_send(ab, event_data->pdev_id, ret);
        if (ret < 0)
                ath12k_warn(ab, "qmi M3 dump upload done failed\n");
-}
\ No newline at end of file
+}
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1785,6 +1785,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.afc_mem_offset = 0,
 		.is_plink_preferable = true,
 		.support_fse = true,
 		.handle_beacon_miss = true,
@@ -1868,6 +1869,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.afc_mem_offset = 0,
 		.is_plink_preferable = true,
 		.support_fse = true,
 		.handle_beacon_miss = false,
@@ -1964,6 +1966,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.afc_mem_offset = 0,
 		.is_plink_preferable = true,
 		.support_fse = true,
 		.handle_beacon_miss = true,
@@ -2064,6 +2067,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_qdsslog = true,
 		.supports_tx_monitor = false,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.afc_mem_offset = 0,
 		.is_plink_preferable = false,
 		.support_fse = true,
 		.handle_beacon_miss = true,
@@ -2157,6 +2161,7 @@ static struct ath12k_hw_params ath12k_hw
 		.support_umac_reset = false,
 		.en_qdsslog = true,
 		.fw_mem_mode = ATH12K_QMI_TARGET_MEM_MODE,
+		.afc_mem_offset = ATH12K_HOST_AFC_QCN6432_MEM_OFFSET,
 		.is_plink_preferable = true,
 		.support_fse = true,
 		.handle_beacon_miss = true,
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -103,7 +103,9 @@ struct ath12k_cfr_peer_tx_param;
 #define ATH12K_RXGAINLUT_FILE_PREFIX	"rxgainlut.b"
 #define ATH12K_RXGAINLUT_FILE		"rxgainlut.bin"
 #define ATH12K_DEFAULT_ID		255
-#define ATH12K_FW_CFG_FILE		"firmware.dat"
+#define ATH12K_FW_CFG_FILE		"fw_ini_cfg.bin"
+
+#define ATH12K_HOST_AFC_QCN6432_MEM_OFFSET 0xD8000
 
 #define ATH12K_MAX_SOCS 4
 
@@ -257,6 +259,7 @@ struct ath12k_hw_params {
 	const struct pmm_remap *pmm_remap;
 	bool support_umac_reset;
 	int fw_mem_mode;
+	u32 afc_mem_offset;
 	bool is_plink_preferable;
 	bool support_fse;
 	bool handle_beacon_miss;
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3779,6 +3779,7 @@ static int ath12k_qmi_alloc_target_mem_c
 			break;
 		case HOST_DDR_REGION_TYPE:
 		case M3_DUMP_REGION_TYPE:
+		case AFC_REGION_TYPE:
 		case PAGEABLE_MEM_REGION_TYPE:
 		case CALDB_MEM_REGION_TYPE:
 			ret = ath12k_qmi_alloc_chunk(ab, chunk);
@@ -4452,6 +4453,7 @@ static int ath12k_qmi_assign_target_mem_
 	unsigned int bdf_location[MAX_TGT_MEM_MODES],
 		     caldb_location[MAX_TGT_MEM_MODES],
 		     caldb_size[1];
+	u32 m3_dump_size;
 
 	sz = ab->host_ddr_fixed_mem_off;
 	hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
@@ -4661,6 +4663,65 @@ skip_mlo_mem_init:
 					ab->qmi.target_mem[i].type;
 			idx++;
 			break;
+		case AFC_REGION_TYPE:
+			if (ab->qmi.target_mem[i].size > AFC_MEM_SIZE) {
+				ath12k_warn(ab, "AFC mem request size %d is larger than allowed value\n",
+					    ab->qmi.target_mem[i].size);
+				return -EINVAL;
+			}
+
+			/* For multi-pd platforms, AFC_REGION_TYPE needs
+			 * to be allocated from within the M3_DUMP_REGION.
+			 * This is because multi-pd platforms cannot access memory
+			 * regions allocated outside FW reserved memory.
+			 * AFC_REGION_TYPE is supported for 6 GHz.
+			 */
+			if (ab->hif.bus == ATH12K_BUS_HYBRID) {
+				if (ab->userpd_id == USERPD_1)
+					dev_node = of_find_node_by_name(NULL, "m3_dump_qcn6432_1");
+				else if (ab->userpd_id == USERPD_2)
+					dev_node = of_find_node_by_name(NULL, "m3_dump_qcn6432_2");
+
+				if (of_address_to_resource(dev_node, 0, &m3_dump)) {
+					ath12k_err(ab, "M3_MEM_REGION Not defined in device_tree\n");
+					ret = -EINVAL;
+					of_node_put(dev_node);
+					goto out;
+				}
+
+				m3_dump_size = resource_size(&m3_dump);
+				if (ab->qmi.target_mem[i].size >
+				    (m3_dump_size - ab->hw_params->afc_mem_offset)) {
+					ath12k_err(ab, "AFC mem request size %d is larger than M3_MEM_REGION size %u\n",
+						   ab->qmi.target_mem[i].size,
+						   m3_dump_size);
+					ret = -EINVAL;
+					of_node_put(dev_node);
+					goto out;
+				}
+
+				ab->qmi.target_mem[idx].paddr =
+					m3_dump.start + ab->hw_params->afc_mem_offset;
+				ab->qmi.target_mem[idx].v.ioaddr =
+					ioremap(ab->qmi.target_mem[idx].paddr,
+						ab->qmi.target_mem[idx].size);
+				of_node_put(dev_node);
+			} else {
+				ab->qmi.target_mem[idx].v.addr =
+					dma_alloc_coherent(ab->dev, ab->qmi.target_mem[i].size,
+							   &ab->qmi.target_mem[idx].paddr,
+							   GFP_KERNEL);
+				if (!ab->qmi.target_mem[idx].v.addr) {
+					ath12k_err(ab, "AFC mem allocation failed\n");
+					ab->qmi.target_mem[idx].paddr = 0;
+					return -ENOMEM;
+				}
+			}
+
+			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
+			idx++;
+			break;
 		default:
 			ath12k_warn(ab, "qmi ignore invalid mem req type %d\n",
 				    ab->qmi.target_mem[i].type);
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -264,6 +264,9 @@ struct qmi_wlanfw_m3_dump_upload_done_re
 #define QMI_WLANFW_MAX_PLATFORM_NAME_LEN_V01		64
 #define QMI_WLANFW_MAX_HOST_DDR_RANGE_SIZE_V01		3
 #define QDSS_ETR_MEM_REGION_TYPE                        0x6
+#define AFC_SLOT_SIZE					0x1000
+#define AFC_MAX_SLOT					2
+#define AFC_MEM_SIZE					(AFC_SLOT_SIZE * AFC_MAX_SLOT)
 
 struct qmi_wlanfw_host_ddr_range {
 	u64 start;
@@ -277,6 +280,7 @@ enum ath12k_qmi_target_mem {
 	CALDB_MEM_REGION_TYPE = 0x4,
 	MLO_GLOBAL_MEM_REGION_TYPE = 0x8,
 	PAGEABLE_MEM_REGION_TYPE = 0x9,
+	AFC_REGION_TYPE = 0xA,
 };
 
 enum qmi_wlanfw_host_build_type {
