From c69a6617238a2f575c12cc1682a21b0dcf4a0529 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Mon, 10 Jun 2024 01:09:38 +0530
Subject: [PATCH] wifi: ath12k: Build SP reg rules in ath12k_build_regd

In ath12k_build_regd, add support to build Standard power
regulatory rules. Save the sp rules in ab and update the cfg with the
sp reg rules only when AFC power event is received.

Patch dependency: 333-0020-mac80211-add-support-for-6G-channels-and-regulatory.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/reg.c | 96 +++++++++++++++++++--------
 1 file changed, 67 insertions(+), 29 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -759,12 +759,13 @@ ath12k_reg_build_regd(struct ath12k_base
 {
 	struct ieee80211_regdomain *new_regd = NULL;
 	struct ath12k_reg_rule *reg_rule, *reg_rule_6g;
-	u8 i = 0, j = 0, k = 0;
-	u8 num_rules;
 	u16 max_bw;
+	int max_elements = 0, sp_idx = 0;
+	struct ath12k_6ghz_sp_reg_rule *sp_rule = NULL;
+	u8 i = 0, j = 0, k = 0, idx = 0;
+	u8 num_rules, num_6ghz_sp_rules;
 	u32 flags = 0, reg_6g_number = 0, max_bw_6g = 0;
 	char alpha2[3];
-	int max_elements = 0;
 	bool reg_6g_itr_set = false;
 	enum nl80211_regulatory_power_modes pwr_mode;
 
@@ -775,19 +776,22 @@ ath12k_reg_build_regd(struct ath12k_base
 	 * type and client type, after complete 6G regulatory support is added.
 	 */
 	if (reg_info->is_ext_reg_event) {
-                /* All 6G APs - (LP, SP, VLP) */
-                for (i = 0; i < WMI_REG_CURRENT_MAX_AP_TYPE; i++)
-                        reg_6g_number += reg_info->num_6g_reg_rules_ap[i];
-                /* All 6G STAs - (LP_DEF, LP_SUB, SP_DEF, SP_SUB, VLP_DEF, VLP_SUB) */
-                for (i = 0; i < WMI_REG_MAX_CLIENT_TYPE; i++) {
-                        for (j = 0; j < WMI_REG_CURRENT_MAX_AP_TYPE; j++)
-                                reg_6g_number += reg_info->num_6g_reg_rules_cl
-                                                                        [j][i];
-
-               }
-       }
-	num_rules += reg_6g_number;
+		/* All 6G APs - (LP, SP, VLP) */
+		for (i = 0; i < WMI_REG_CURRENT_MAX_AP_TYPE; i++) {
+			if (i == WMI_REG_STD_POWER_AP)
+				num_6ghz_sp_rules = reg_info->num_6g_reg_rules_ap[i];
+			reg_6g_number += reg_info->num_6g_reg_rules_ap[i];
+		}
+		/* All 6G STAs - (LP_DEF, LP_SUB, SP_DEF, SP_SUB, VLP_DEF, VLP_SUB) */
+		for (i = 0; i < WMI_REG_MAX_CLIENT_TYPE; i++) {
+			for (j = 0; j < WMI_REG_CURRENT_MAX_AP_TYPE; j++)
+				reg_6g_number += reg_info->num_6g_reg_rules_cl[j][i];
+		}
+	}
 
+	ath12k_dbg(ab, ATH12K_DBG_AFC, "Number of sp rules from target %d\n",
+		   num_6ghz_sp_rules);
+	num_rules += (reg_6g_number - num_6ghz_sp_rules);
 	if (!num_rules)
 		return new_regd;
 
@@ -795,11 +799,26 @@ ath12k_reg_build_regd(struct ath12k_base
 	if (reg_info->dfs_region == ATH12K_DFS_REG_ETSI)
 		num_rules += 2;
 
+	/* 6 GHz standard power rules should not be updated to cfg
+	 * until we get afc data with valid rules. Hence save the sp
+	 * rule in ab and use this to intersect with afc rules when we get
+	 * afc power update
+	 */
+	sp_rule = kzalloc(sizeof(*sp_rule) +
+			  (num_6ghz_sp_rules * sizeof(struct ieee80211_reg_rule)),
+			  GFP_ATOMIC);
+
+	if (!sp_rule)
+		return new_regd;
+
+	sp_rule->num_6ghz_sp_rule = num_6ghz_sp_rules;
 	new_regd =  kzalloc(sizeof(*new_regd) +
 			   (num_rules * sizeof(struct ieee80211_reg_rule)),
 			   GFP_ATOMIC);
-	if (!new_regd)
+	if (!new_regd) {
+		kfree(sp_rule);
 		return new_regd;
+	}
 
 	memcpy(new_regd->alpha2, reg_info->alpha2, REG_ALPHA2_LEN + 1);
 	memcpy(alpha2, reg_info->alpha2, REG_ALPHA2_LEN + 1);
@@ -813,7 +832,7 @@ ath12k_reg_build_regd(struct ath12k_base
 	/* Update reg_rules[] below. Firmware is expected to
 	 * send these rules in order(2G rules first and then 5G)
 	 */
-	for (i = 0, j = 0; i < num_rules; i++) {
+	for (i = 0, j = 0, idx = 0; i < num_rules + num_6ghz_sp_rules ; i++) {
 		if (reg_info->num_2g_reg_rules &&
 		    (i < reg_info->num_2g_reg_rules)) {
 			reg_rule = reg_info->reg_rules_2g_ptr + i;
@@ -886,11 +905,23 @@ ath12k_reg_build_regd(struct ath12k_base
 		flags |= ath12k_map_fw_reg_flags(reg_rule->flags);
 		flags |= ath12k_map_fw_phy_flags(reg_info->phybitmap);
 
-		ath12k_reg_update_rule(new_regd->reg_rules + i,
-				       reg_rule->start_freq,
-				       reg_rule->end_freq, max_bw,
-				       reg_rule->ant_gain, reg_rule->reg_power,
-				       reg_rule->psd_eirp, flags, pwr_mode);
+		if (pwr_mode == NL80211_REG_AP_SP) {
+			ath12k_reg_update_rule(sp_rule->sp_reg_rule + sp_idx,
+					       reg_rule->start_freq,
+					       reg_rule->end_freq, max_bw,
+					       reg_rule->ant_gain, reg_rule->reg_power,
+					       reg_rule->psd_eirp, flags, pwr_mode);
+			ath12k_dbg(ab, ATH12K_DBG_AFC,
+				   "Target sp rule freq low: %d high: %d bw: %d psd: %d flag: 0x%x\n",
+				   reg_rule->start_freq, reg_rule->end_freq,
+				   max_bw, reg_rule->psd_eirp, flags);
+		} else {
+			ath12k_reg_update_rule(new_regd->reg_rules + idx,
+					       reg_rule->start_freq,
+					       reg_rule->end_freq, max_bw,
+					       reg_rule->ant_gain, reg_rule->reg_power,
+					       reg_rule->psd_eirp, flags, pwr_mode);
+		}
 
 		/* Update dfs cac timeout if the dfs domain is ETSI and the
 		 * new rule covers weather radar band.
@@ -902,28 +933,36 @@ ath12k_reg_build_regd(struct ath12k_base
 		    (reg_rule->end_freq > ETSI_WEATHER_RADAR_BAND_LOW &&
 		    reg_rule->start_freq < ETSI_WEATHER_RADAR_BAND_HIGH)){
 			ath12k_reg_update_weather_radar_band(ab, new_regd,
-							     reg_rule, &i,
+							     reg_rule, &idx,
 							     flags, max_bw);
+			idx++;
 			continue;
 		}
 
 		if (reg_info->is_ext_reg_event) {
 			ath12k_dbg(ab, ATH12K_DBG_REG, "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d) (%d, %d) (6G_POWER_MODE: %d)\n",
-				   i + 1, reg_rule->start_freq, reg_rule->end_freq,
+				   idx + 1, reg_rule->start_freq, reg_rule->end_freq,
 				   max_bw, reg_rule->ant_gain, reg_rule->reg_power,
-				   new_regd->reg_rules[i].dfs_cac_ms,
-				   flags, reg_rule->psd_flag, reg_rule->psd_eirp, new_regd->reg_rules[i].mode);
+				   new_regd->reg_rules[idx].dfs_cac_ms,
+				   flags, reg_rule->psd_flag, reg_rule->psd_eirp,
+				   new_regd->reg_rules[idx].mode);
 		} else {
 			ath12k_dbg(ab, ATH12K_DBG_REG,
 				   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
-				   i + 1, reg_rule->start_freq, reg_rule->end_freq,
+				   idx + 1, reg_rule->start_freq, reg_rule->end_freq,
 				   max_bw, reg_rule->ant_gain, reg_rule->reg_power,
-				   new_regd->reg_rules[i].dfs_cac_ms,
+				   new_regd->reg_rules[idx].dfs_cac_ms,
 				   flags);
 		}
+		if (pwr_mode == NL80211_REG_AP_SP)
+			sp_idx++;
+		else
+			idx++;
 	}
 
-	new_regd->n_reg_rules = i;
+	kfree(ab->sp_rule);
+	ab->sp_rule = sp_rule;
+	new_regd->n_reg_rules = num_rules;
 
 	return new_regd;
 }
