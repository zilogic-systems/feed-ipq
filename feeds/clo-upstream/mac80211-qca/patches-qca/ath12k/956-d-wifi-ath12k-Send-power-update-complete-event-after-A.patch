From 7807bced65c3d4a96c5cdc5797382c9cbef3a45a Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Mon, 10 Jun 2024 00:50:59 +0530
Subject: [PATCH] wifi: ath12k: Send power update complete event after AFC

After processing the AFC response data and updating the regd with
the AFC intersected reg_rules, send the AFC response data to the
application through QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT with the
type QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE.

Patch dependency: 333-0020-mac80211-add-support-for-6G-channels-and-regulatory.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/vendor.c | 263 ++++++++++++++++
 drivers/net/wireless/ath/ath12k/vendor.h | 377 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.c    |   3 +
 3 files changed, 643 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -2029,6 +2029,281 @@ out:
 	return ret;
 }
 
+#define nla_nest_end_checked(skb, start) do {           \
+	if ((skb) && (start))                           \
+		nla_nest_end(skb, start);               \
+} while (0)
+
+/**
+ * ath12k_afc_power_event_update_or_get_len() - Function to fill vendor event
+ * buffer  with AFC power update event or get required vendor buffer length
+ * @vendor_event: Pointer to vendor event SK buffer
+ * @pwr_evt: Pointer to AFC power event
+ *
+ * If vendor_event is NULL, to get vendor buffer length, otherwise
+ * to fill vendor event buffer with info
+ *
+ * Return: If get vendor buffer length, return positive value as length,
+ * If fill vendor event, 0 if success, otherwise negative error code
+ */
+static int
+ath12k_afc_power_event_update_or_get_len(struct ath12k *ar,
+					 struct sk_buff *vendor_event,
+					 struct ath12k_afc_sp_reg_info *pwr_evt)
+{
+	struct ath12k_afc_chan_obj *pow_evt_chan_info = NULL;
+	struct ath12k_chan_eirp_obj *pow_evt_eirp_info = NULL;
+	struct nlattr *nla_attr;
+	struct nlattr *freq_info;
+	struct nlattr *opclass_info;
+	struct nlattr *chan_list;
+	struct nlattr *chan_info = NULL;
+	int i, j, len = NLMSG_HDRLEN;
+
+	if (vendor_event &&
+	    nla_put_u8(vendor_event,
+		       QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE,
+		       QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE)) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+			   "AFC power update complete event type put fail");
+		goto fail;
+	} else {
+		len += nla_total_size(sizeof(u8));
+	}
+
+	if (vendor_event &&
+	    nla_put_u32(vendor_event,
+			QCA_WLAN_VENDOR_ATTR_AFC_EVENT_REQ_ID,
+			pwr_evt->resp_id)) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+			   "QCA_WLAN_VENDOR_ATTR_AFC_EVENT_REQ_ID put fail");
+		goto fail;
+	} else {
+		len += nla_total_size(sizeof(u32));
+	}
+
+	if (vendor_event &&
+	    nla_put_u8(vendor_event,
+		       QCA_WLAN_VENDOR_ATTR_AFC_EVENT_STATUS_CODE,
+		       pwr_evt->fw_status_code)) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+			   "AFC EVENT STATUS CODE put fail");
+		goto fail;
+	} else {
+		len += nla_total_size(sizeof(u8));
+	}
+
+	if (vendor_event &&
+	    nla_put_s32(vendor_event,
+			QCA_WLAN_VENDOR_ATTR_AFC_EVENT_SERVER_RESP_CODE,
+			pwr_evt->serv_resp_code)) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+			   "AFC EVENT SERVER RESP CODE put fail");
+		goto fail;
+	} else {
+		len += nla_total_size(sizeof(s32));
+	}
+
+	if (vendor_event &&
+	    nla_put_u32(vendor_event,
+			QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_DATE,
+			pwr_evt->avail_exp_time_d)) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+			   "AFC EVENT EXPIRE DATE put fail");
+		goto fail;
+	} else {
+		len += nla_total_size(sizeof(u32));
+	}
+
+	if (vendor_event &&
+	    nla_put_u32(vendor_event,
+			QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_TIME,
+			pwr_evt->avail_exp_time_t)) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+			   "AFC EVENT EXPIRE TIME put fail");
+		goto fail;
+	} else {
+		len += nla_total_size(sizeof(u32));
+	}
+
+	if (vendor_event) {
+		/* Update the Frequency and corresponding PSD info */
+		nla_attr =
+		nla_nest_start(vendor_event,
+			       QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST);
+		if (!nla_attr)
+			goto fail;
+	} else {
+		len += nla_total_size(0);
+	}
+
+	for (i = 0; i < pwr_evt->num_freq_objs; i++) {
+		if (vendor_event) {
+			freq_info = nla_nest_start(vendor_event, i);
+			if (!freq_info)
+				goto fail;
+		} else {
+			len += nla_total_size(0);
+		}
+
+		if (vendor_event &&
+		    (nla_put_u32(vendor_event,
+				 QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_START,
+				 pwr_evt->afc_freq_info[i].low_freq) ||
+		    nla_put_u32(vendor_event,
+				QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_END,
+				pwr_evt->afc_freq_info[i].high_freq) ||
+		    nla_put_u32(vendor_event,
+				QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_PSD,
+				pwr_evt->afc_freq_info[i].max_psd))) {
+			ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+				   "AFC FREQUENCY PSD INFO put failed, num %d",
+				   pwr_evt->num_freq_objs);
+			goto fail;
+		} else {
+			len += nla_total_size(sizeof(u32)) * 3;
+		}
+		nla_nest_end_checked(vendor_event, freq_info);
+	}
+	nla_nest_end_checked(vendor_event, nla_attr);
+
+	if (vendor_event) {
+		/* Update the Operating class, channel list and EIRP info */
+		nla_attr =
+		nla_nest_start(vendor_event,
+			       QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST);
+		if (!nla_attr)
+			goto fail;
+	} else {
+		len += nla_total_size(0);
+	}
+
+	pow_evt_chan_info = pwr_evt->afc_chan_info;
+
+	for (i = 0; i < pwr_evt->num_chan_objs; i++) {
+		if (vendor_event) {
+			opclass_info = nla_nest_start(vendor_event, i);
+			if (!opclass_info)
+				goto fail;
+		} else {
+			len += nla_total_size(0);
+		}
+
+		if (vendor_event &&
+		    nla_put_u8(vendor_event,
+			       QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS,
+			       pow_evt_chan_info[i].global_opclass)) {
+			ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+				   "AFC OPCLASS INFO put fail, num %d",
+				   pwr_evt->num_chan_objs);
+			goto fail;
+		} else {
+			len += nla_total_size(sizeof(u8));
+		}
+
+		if (vendor_event) {
+			chan_list =
+			nla_nest_start(vendor_event,
+				       QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST);
+			if (!chan_list)
+				goto fail;
+		} else {
+			len += nla_total_size(0);
+		}
+
+		pow_evt_eirp_info = pow_evt_chan_info[i].chan_eirp_info;
+
+		for (j = 0; j < pow_evt_chan_info[i].num_chans; j++) {
+			if (vendor_event) {
+				chan_info = nla_nest_start(vendor_event, j);
+				if (!chan_info)
+					goto fail;
+			} else {
+				len += nla_total_size(0);
+			}
+
+			if (vendor_event &&
+			    (nla_put_u8(vendor_event,
+					QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM,
+					pow_evt_eirp_info[j].cfi) ||
+			    nla_put_u32(vendor_event,
+					QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP,
+					pow_evt_eirp_info[j].eirp_power))) {
+				ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+					   "AFC CHAN EIRP_INFO put fail, num %d",
+					   pow_evt_chan_info[i].num_chans);
+				goto fail;
+			} else {
+				len += nla_total_size(sizeof(u8));
+				len += nla_total_size(sizeof(u32));
+			}
+			nla_nest_end_checked(vendor_event, chan_info);
+		}
+		nla_nest_end_checked(vendor_event, chan_list);
+		nla_nest_end_checked(vendor_event, opclass_info);
+	}
+
+	nla_nest_end_checked(vendor_event, nla_attr);
+
+	return vendor_event ? 0 : len;
+
+fail:
+	return -EINVAL;
+}
+
+int ath12k_vendor_send_power_update_complete(struct ath12k *ar)
+{
+	struct ath12k_afc_sp_reg_info *afc_reg_info = ar->afc.afc_reg_info;
+	struct ath12k_link_vif *tmp_arvif = NULL, *arvif;
+	struct sk_buff *vendor_event;
+	struct wireless_dev *wdev;
+	int vendor_buffer_len;
+
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		if (!tmp_arvif && arvif->is_started) {
+			tmp_arvif = arvif;
+			break;
+		}
+	}
+
+	if (!tmp_arvif || !tmp_arvif->ahvif)
+		return -EINVAL;
+
+	wdev = ieee80211_vif_to_wdev(tmp_arvif->ahvif->vif);
+	if (!wdev)
+		return -EINVAL;
+
+	vendor_buffer_len =
+		ath12k_afc_power_event_update_or_get_len(ar, NULL,
+							 afc_reg_info);
+
+	vendor_event =
+	cfg80211_vendor_event_alloc(ar->ah->hw->wiphy, wdev, vendor_buffer_len,
+				    QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT_INDEX,
+				    GFP_ATOMIC);
+	if (!vendor_event) {
+		ath12k_warn(ar->ab,
+			    "failed to allocate skb for afc expiry event\n");
+		return -ENOMEM;
+	}
+
+	if (ath12k_afc_power_event_update_or_get_len(ar, vendor_event,
+						     afc_reg_info)) {
+		ath12k_warn(ar->ab, "Failed to update AFC power vendor event\n");
+		goto fail;
+	}
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+		   "Sending AFC update complete event to user application");
+	cfg80211_vendor_event(vendor_event, GFP_ATOMIC);
+
+	return 0;
+
+fail:
+	kfree_skb(vendor_event);
+	return -EINVAL;
+}
+
 static struct wiphy_vendor_command ath12k_vendor_commands[] = {
 	{
 		.info.vendor_id = QCA_NL80211_VENDOR_ID,
@@ -2104,6 +2379,10 @@ static const struct nl80211_vendor_cmd_i
 		.vendor_id = QCA_NL80211_VENDOR_ID,
 		.subcmd = QCA_NL80211_VENDOR_SUBCMD_POWER_MODE_CHANGE_COMPLETED
 	},
+	[QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT_INDEX] = {
+		.vendor_id = QCA_NL80211_VENDOR_ID,
+		.subcmd = QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT
+	},
 };
 
 int ath12k_vendor_register(struct ath12k_hw *ah)
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -6,6 +6,7 @@
 #define ATH12K_VENDOR_H
 
 #define QCA_NL80211_VENDOR_ID 0x001374
+#define QCA_NL80211_AFC_REQ_RESP_BUF_MAX_SIZE		5000
 
 extern unsigned int ath12k_ppe_ds_enabled;
 
@@ -14,6 +15,7 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION = 74,
 	QCA_NL80211_VENDOR_SUBCMD_RM_GENERIC = 206,
 	QCA_NL80211_VENDOR_SUBCMD_SCS_RULE_CONFIG = 218,
+	QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT = 222,
 	QCA_NL80211_VENDOR_SUBCMD_SDWF_PHY_OPS = 235,
 	QCA_NL80211_VENDOR_SUBCMD_SDWF_DEV_OPS = 236,
 	QCA_NL80211_VENDOR_SUBCMD_SET_6GHZ_POWER_MODE = 253,
@@ -25,6 +27,7 @@ enum qca_nl80211_vendor_subcmds {
 enum qca_nl80211_vendor_events {
 	QCA_NL80211_VENDOR_SUBCMD_SDWF_DEV_OPS_INDEX = 0,
 	QCA_NL80211_VENDOR_SUBCMD_RM_GENERIC_INDEX,
+	QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT_INDEX,
 	QCA_NL80211_VENDOR_SUBCMD_6GHZ_PWR_MODE_EVT_IDX,
 };
 
@@ -773,4 +776,378 @@ enum qca_wlan_vendor_set_6ghz_power_mode
  */
 int ath12k_vendor_send_6ghz_power_mode_update_complete(struct ath12k *ar,
 						       struct wireless_dev *wdev);
+
+/**
+ * ath12k_vendor_send_power_update_complete - Send 6 GHz power update complete
+ * vendor NL event to the application.
+ *
+ * @ar - Pointer to ar
+ */
+int ath12k_vendor_send_power_update_complete(struct ath12k *ar);
+
+/**
+ * Opclass, channel and EIRP information attribute length
+ * Refer kernel doc explanation for attribute
+ * QCA_WLAN_VENDOR_ATTR_AFC_RESP_OPCLASS_CHAN_EIRP_INFO
+ * to understand the minimum length calculation.
+ */
+#define QCA_WLAN_AFC_RESP_OPCLASS_CHAN_EIRP_INFO_MIN_LEN	\
+	NLA_ALIGN((NLA_HDRLEN + sizeof(uint8_t)) +		\
+		  ((3 * NLA_HDRLEN) + sizeof(uint8_t) +		\
+		   sizeof(uint32_t)))
+
+/**
+ * Frequency/PSD information attribute length
+ * Refer kernel doc explanation for attribute
+ * QCA_WLAN_VENDOR_ATTR_AFC_RESP_FREQ_PSD_INFO
+ * to understand the minimum length calculation.
+ */
+#define QCA_WLAN_AFC_RESP_FREQ_PSD_INFO_INFO_MIN_LEN		\
+	NLA_ALIGN((3 * NLA_HDRLEN) +				\
+		  (2 * sizeof(uint16_t)) +			\
+		  sizeof(uint32_t))
+
+/* enum qca_nl_afc_resp_type: Defines the format in which user space
+ * application will send over the AFC response to driver.
+ */
+enum ath12k_nl_afc_resp_type {
+	QCA_WLAN_VENDOR_ATTR_AFC_JSON_RESP,
+	QCA_WLAN_VENDOR_ATTR_AFC_BIN_RESP,
+};
+
+enum qca_wlan_vendor_afc_response_attr {
+	QCA_WLAN_VENDOR_ATTR_AFC_RESPONSE_DATA_TYPE = 1,
+	QCA_WLAN_VENDOR_ATTR_AFC_RESPONSE_DATA,
+
+	QCA_WLAN_VENDOR_ATTR_AFC_RESPONSE_MAX,
+};
+
+enum qca_nl_afc_event_type {
+	QCA_WLAN_VENDOR_AFC_EXPIRY_EVENT,
+	QCA_WLAN_VENDOR_AFC_POWER_UPDATE_COMPLETE_EVENT,
+};
+
+/**
+ * enum qca_wlan_vendor_attr_afc_freq_psd_info: This enum is used with
+ * nested attributes QCA_WLAN_VENDOR_ATTR_AFC_RESP_FREQ_PSD_INFO and
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST to update the frequency range
+ * and PSD information.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_START: Required and type is
+ * u32. This attribute is used to indicate the start of the queried frequency
+ * range in MHz.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_END: Required and type is u32.
+ * This attribute is used to indicate the end of the queried frequency range
+ * in MHz.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_PSD: Required and type is u32.
+ * This attribute will contain the PSD information for a single range as
+ * specified by the QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_START and
+ * QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_END attributes.
+ *
+ * The PSD power info (dBm/MHz) from user space should be multiplied
+ * by a factor of 100 when sending to the driver to preserve granularity
+ * up to 2 decimal places.
+ * Example:
+ *     PSD power value: 10.21 dBm/MHz
+ *     Value to be updated in QCA_WLAN_VENDOR_ATTR_AFC_PSD_INFO: 1021.
+ *
+ * Note: QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_PSD attribute will be used only
+ * with nested attribute QCA_WLAN_VENDOR_ATTR_AFC_RESP_FREQ_PSD_INFO and with
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE.
+ *
+ * The following set of attributes will be used to exchange frequency and
+ * corresponding PSD information for AFC between the user space and the driver.
+ */
+enum qca_wlan_vendor_attr_afc_freq_psd_info {
+	QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_START = 1,
+	QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_RANGE_END = 2,
+	QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_PSD = 3,
+
+	QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_MAX =
+	QCA_WLAN_VENDOR_ATTR_AFC_FREQ_PSD_INFO_AFTER_LAST - 1,
+};
+
+/**
+ * enum qca_wlan_vendor_attr_afc_chan_eirp_info: This enum is used with
+ * nested attribute QCA_WLAN_VENDOR_ATTR_AFC_CHAN_LIST_INFO to update the
+ * channel list and corresponding EIRP information.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM: Required and type is u8.
+ * This attribute is used to indicate queried channel from
+ * the operating class indicated in QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP: Optional and type is u32.
+ * This attribute is used to configure the EIRP power info corresponding
+ * to the channel number indicated in QCA_WLAN_VENDOR_ATTR_AFC_CHAN_NUM.
+ * The EIRP power info(dBm) from user space should be multiplied
+ * by a factor of 100 when sending to Driver to preserve granularity up to
+ * 2 decimal places.
+ * Example:
+ *     EIRP power value: 34.23 dBm
+ *     Value to be updated in QCA_WLAN_VENDOR_ATTR_AFC_EIRP_INFO: 3423.
+ *
+ * Note: QCA_WLAN_VENDOR_ATTR_AFC_EIRP_INFO attribute will only be used with
+ * nested attribute QCA_WLAN_VENDOR_ATTR_AFC_RESP_OPCLASS_CHAN_EIRP_INFO and
+ * with QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE:
+ *
+ * The following set of attributes will be used to exchange Channel and
+ * corresponding EIRP information for AFC between the user space and Driver.
+ */
+enum qca_wlan_vendor_attr_afc_chan_eirp_info {
+	QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM = 1,
+	QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP = 2,
+
+	QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_MAX =
+	QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_AFTER_LAST - 1,
+};
+
+/**
+ * enum qca_wlan_vendor_attr_afc_opclass_info: This enum is used with nested
+ * attributes QCA_WLAN_VENDOR_ATTR_AFC_RESP_OPCLASS_CHAN_EIRP_INFO and
+ * QCA_WLAN_VENDOR_ATTR_AFC_REQ_OPCLASS_CHAN_INFO to update the operating class,
+ * channel, and EIRP related information.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS: Required and type is u8.
+ * This attribute is used to indicate the operating class, as listed under
+ * IEEE Std 802.11-2020 Annex E Table E-4, for the queried channel list.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST: Array of nested attributes
+ * for updating the channel number and EIRP power information.
+ * It uses the attributes defined in
+ * enum qca_wlan_vendor_attr_afc_chan_eirp_info.
+ *
+ * Operating class information packing format for
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_INFO when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE_EXPIRY.
+ *
+ * m - Total number of operating classes.
+ * n, j - Number of queried channels for the corresponding operating class.
+ *
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS[0]
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST[0]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[0]
+ *      .....
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[n - 1]
+ *  ....
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS[m]
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST[m]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[0]
+ *      ....
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[j - 1]
+ *
+ * Operating class information packing format for
+ * QCA_WLAN_VENDOR_ATTR_AFC_RESP_OPCLASS_CHAN_EIRP_INFO and
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_INFO when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE.
+ *
+ * m - Total number of operating classes.
+ * n, j - Number of channels for the corresponding operating class.
+ *
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS[0]
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST[0]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[0]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP[0]
+ *      .....
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[n - 1]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP[n - 1]
+ *  ....
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS[m]
+ *  QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST[m]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[0]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP[0]
+ *      ....
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_CHAN_NUM[j - 1]
+ *      QCA_WLAN_VENDOR_ATTR_AFC_CHAN_EIRP_INFO_EIRP[j - 1]
+ *
+ * The following set of attributes will be used to exchange operating class
+ * information for AFC between the user space and the driver.
+ */
+enum qca_wlan_vendor_attr_afc_opclass_info {
+	QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_OPCLASS = 1,
+	QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_CHAN_LIST = 2,
+
+	QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_MAX =
+	QCA_WLAN_VENDOR_ATTR_AFC_OPCLASS_INFO_AFTER_LAST - 1,
+};
+
+/**
+ * enum qca_wlan_vendor_afc_event_type: Defines values for AFC event type.
+ * Attribute used by QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE attribute.
+ *
+ * @QCA_WLAN_VENDOR_AFC_EVENT_TYPE_EXPIRY: AFC expiry event sent from the
+ * driver to userspace in order to query the new AFC power values.
+ *
+ * @QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE: Power update
+ * complete event will be sent from the driver to userspace to indicate
+ * processing of the AFC response.
+ *
+ * @QCA_WLAN_VENDOR_AFC_EVENT_TYPE_PAYLOAD_RESET: AFC payload reset event
+ * will be sent from the driver to userspace to indicate last received
+ * AFC response data has been cleared on the AP due to invalid data
+ * in the QCA_NL80211_VENDOR_SUBCMD_AFC_RESPONSE.
+ *
+ * The following enum defines the different event types that will be
+ * used by the driver to help trigger corresponding AFC functionality in user
+ * space.
+ */
+enum qca_wlan_vendor_afc_event_type {
+	QCA_WLAN_VENDOR_AFC_EVENT_TYPE_EXPIRY = 0,
+	QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE = 1,
+	QCA_WLAN_VENDOR_AFC_EVENT_TYPE_PAYLOAD_RESET = 2,
+};
+
+/**
+ * enum qca_wlan_vendor_afc_evt_status_code: Defines values AP will use to
+ * indicate AFC response status.
+ * Enum used by QCA_WLAN_VENDOR_ATTR_AFC_EVENT_STATUS_CODE attribute.
+ *
+ * @QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_SUCCESS: Success
+ *
+ * @QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_TIMEOUT: Indicates AFC indication
+ * command was not received within the expected time of the AFC expiry event
+ * being triggered.
+ *
+ * @QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_PARSING_ERROR: Indicates AFC data
+ * parsing error by the driver.
+ *
+ * @QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_LOCAL_ERROR: Indicates any other local
+ * error.
+ *
+ * The following enum defines the status codes that the driver will use to
+ * indicate whether the AFC data is valid or not.
+ */
+enum qca_wlan_vendor_afc_evt_status_code {
+	QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_SUCCESS = 0,
+	QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_TIMEOUT = 1,
+	QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_PARSING_ERROR = 2,
+	QCA_WLAN_VENDOR_AFC_EVT_STATUS_CODE_LOCAL_ERROR = 3,
+};
+
+/**
+ * enum qca_wlan_vendor_attr_afc_event: Defines attributes to be used with
+ * vendor event QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT. These attributes will
+ * support sending only a single request to the user space at a time.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE: Required u8 attribute.
+ * Used with event to notify the type of AFC event received.
+ * Valid values are defined in enum qca_wlan_vendor_afc_event_type.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_AP_DEPLOYMENT: u8 attribute. Required when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is QCA_WLAN_VENDOR_AFC_EVENT_TYPE_EXPIRY,
+ * otherwise unused.
+ *
+ * This attribute is used to indicate the AP deployment type in the AFC request.
+ * Valid values are defined in enum qca_wlan_vendor_afc_ap_deployment_type.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_REQ_ID: Required u32 attribute.
+ * Unique request identifier generated by the AFC client for every
+ * AFC expiry event trigger. See also QCA_WLAN_VENDOR_ATTR_AFC_RESP_REQ_ID.
+ * The user space application is responsible for ensuring no duplicate values
+ * are in-flight with the server, e.g., by delaying a request, should the same
+ * value be received from different radios in parallel.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_AFC_WFA_VERSION: u32 attribute. Optional.
+ * It is used when the QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_EXPIRY, otherwise unused.
+ *
+ * This attribute indicates the AFC spec version information. This will
+ * indicate the AFC version AFC client must use to query the AFC data.
+ * Bits 15:0  - Minor version
+ * Bits 31:16 - Major version
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_MIN_DES_POWER: u16 attribute. Required when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is QCA_WLAN_VENDOR_AFC_EVENT_TYPE_EXPIRY,
+ * otherwise unused.
+ * This attribute indicates the minimum desired power (in dBm) for
+ * the queried spectrum.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_STATUS_CODE: u8 attribute. Required when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE, otherwise unused.
+ *
+ * Valid values are defined in enum qca_wlan_vendor_afc_evt_status_code.
+ * This attribute is used to indicate if there were any errors parsing the
+ * AFC response.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_SERVER_RESP_CODE: s32 attribute. Required
+ * when QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE, otherwise unused.
+ *
+ * This attribute indicates the AFC response code. The AFC response codes are
+ * in the following categories:
+ * -1: General Failure.
+ * 0: Success.
+ * 100 - 199: General errors related to protocol.
+ * 300 - 399: Error events specific to message exchange
+ *            for the Available Spectrum Inquiry.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_DATE: u32 attribute. Required when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE, otherwise unused.
+ *
+ * This attribute indicates the date until which the current response is
+ * valid for in UTC format.
+ * Date format: bits 7:0   - DD (Day 1-31)
+ *              bits 15:8  - MM (Month 1-12)
+ *              bits 31:16 - YYYY (Year)
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_TIME: u32 attribute. Required when
+ * QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE, otherwise unused.
+ *
+ * This attribute indicates the time until which the current response is
+ * valid for in UTC format.
+ * Time format: bits 7:0   - SS (Seconds 0-59)
+ *              bits 15:8  - MM (Minutes 0-59)
+ *              bits 23:16 - HH (Hours 0-23)
+ *              bits 31:24 - Reserved
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST: Array of nested attributes
+ * for updating the list of frequency ranges to be queried.
+ * Required when QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_EXPIRY or
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE, otherwise unused.
+ * It uses the attributes defined in
+ * enum qca_wlan_vendor_attr_afc_freq_psd_info.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST: Array of nested attributes
+ * for updating the list of operating classes and corresponding channels to be
+ * queried.
+ * Required when QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE is
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_EXPIRY or
+ * QCA_WLAN_VENDOR_AFC_EVENT_TYPE_POWER_UPDATE_COMPLETE, otherwise unused.
+ * It uses the attributes defined in enum qca_wlan_vendor_attr_afc_opclass_info.
+ */
+enum qca_wlan_vendor_attr_afc_event {
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_TYPE = 1,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_AP_DEPLOYMENT = 2,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_REQ_ID = 3,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_AFC_WFA_VERSION = 4,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_MIN_DES_POWER = 5,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_STATUS_CODE = 6,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_SERVER_RESP_CODE = 7,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_DATE = 8,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_EXP_TIME = 9,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_FREQ_RANGE_LIST = 10,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_OPCLASS_CHAN_LIST = 11,
+
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_MAX =
+	QCA_WLAN_VENDOR_ATTR_AFC_EVENT_AFTER_LAST - 1,
+};
 #endif /* QCA_VENDOR_H */
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -7473,6 +7473,9 @@ static void ath12k_wmi_afc_event(struct
 		if (ret)
 			ath12k_warn(ab, "AFC reg rule update failed ret : %d\n",
 				    ret);
+
+		/* Update AFC application with power event update complete */
+		ath12k_vendor_send_power_update_complete(ar);
 	}
 }
 
