From 26f4b05863bca382ef71767a0bf4eb597bce6db2 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Tue, 11 Jun 2024 22:15:28 +0530
Subject: [PATCH] wifi: ath12k: Fill AFC PSD and EIRP in SET TPC for SP AP

Add an API ath12k_reg_get_afc_eirp_power_for_bw, to fetch the
EIRP from the channel object of the AFC payload with an input
frequency and bandwidth.

In the WMI_VDEV_SET_TPC_POWER_CMD, if the AP power mode is Standard power
and if AFC power event is received, fill the EIRP and PSD power
with the values received in the AFC response data.

Patch dependency: 333-0020-mac80211-add-support-for-6G-channels-and-regulatory.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c |  31 +++++++-
 drivers/net/wireless/ath/ath12k/reg.c | 110 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/reg.h |   6 ++
 3 files changed, 146 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -13400,6 +13400,8 @@ void ath12k_mac_fill_reg_tpc_info(struct
                 psd_power, tx_power = 0, eirp_power = 0;
         u16 oper_freq = 0, start_freq = 0, center_freq = 0;
 	u8 reg_6g_power_mode;
+	enum nl80211_chan_width bw;
+	int cfi;
 
 	rcu_read_lock();
 
@@ -13540,7 +13542,21 @@ void ath12k_mac_fill_reg_tpc_info(struct
                                                            &temp_chan,
                                                            &tx_power,
 							   reg_6g_power_mode);
-                                eirp_power = tx_power;
+				if (reg_6g_power_mode == IEEE80211_REG_SP_AP &&
+				    ar->afc.is_6ghz_afc_power_event_received) {
+					cfi = ieee80211_frequency_to_channel(center_freq);
+					bw = NL80211_CHAN_WIDTH_20;
+					eirp_power =
+						ath12k_reg_get_afc_eirp_power(ar, bw, cfi);
+					/* In some case channel obj for that
+					 * particular freq  might not be received
+					 */
+					if (!eirp_power)
+						eirp_power = tx_power;
+				} else {
+					eirp_power = tx_power;
+				}
+
 				if (temp_chan) {
 					psd_power = temp_chan->psd;
 					max_tx_power[pwr_lvl_idx] = psd_power;
@@ -13557,6 +13573,18 @@ void ath12k_mac_fill_reg_tpc_info(struct
                                                           &tx_power,
 							  reg_6g_power_mode);
                                 max_tx_power[pwr_lvl_idx] = tx_power;
+				min_t(s8, tx_power, reg_tpc_info->tpe[pwr_lvl_idx]);
+				if (reg_6g_power_mode == IEEE80211_REG_SP_AP &&
+				    ar->afc.is_6ghz_afc_power_event_received) {
+					ath12k_reg_get_afc_eirp_power_for_bw(ar, start_freq,
+									     &center_freq,
+									     pwr_lvl_idx,
+									     &ctx->def,
+									     &tx_power);
+					/* Override tx power only if afc response has a value */
+					if (tx_power)
+						max_tx_power[pwr_lvl_idx] = tx_power;
+				}
                         }
                 }
 
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -1014,6 +1014,116 @@ ath12k_reg_coalesce_afc_freq_info(struct
 	}
 }
 
+int ath12k_reg_get_6ghz_opclass_from_bw(int bw, int cfi)
+{
+	int opclass;
+
+	switch (bw) {
+	case NL80211_CHAN_WIDTH_20:
+		opclass = 131;
+		/* According spec Table E-4 Global operating classes */
+		if (cfi == 2)
+			opclass = 136;
+		break;
+	case NL80211_CHAN_WIDTH_40:
+		opclass = 132;
+		break;
+	case NL80211_CHAN_WIDTH_80:
+		opclass = 133;
+		break;
+	case NL80211_CHAN_WIDTH_160:
+		opclass = 134;
+		break;
+	case NL80211_CHAN_WIDTH_80P80:
+		opclass = 135;
+		break;
+	case NL80211_CHAN_WIDTH_320:
+		opclass = 137;
+		break;
+	default:
+		opclass = 0;
+	}
+
+	return opclass;
+}
+
+s8 ath12k_reg_get_afc_eirp_power(struct ath12k *ar, enum nl80211_chan_width bw, int cfi)
+{
+	u16 eirp_pwr = 0;
+	struct ath12k_afc_sp_reg_info *reg_info = ar->afc.afc_reg_info;
+	struct ath12k_afc_chan_obj *afc_chan;
+	struct ath12k_chan_eirp_obj *chan_eirp;
+	int op_class, i, j;
+
+	spin_lock_bh(&ar->data_lock);
+
+	if (!ar->afc.afc_reg_info) {
+		ath12k_warn(ar->ab, "AFC power info not found\n");
+		goto ret;
+	}
+
+	op_class = ath12k_reg_get_6ghz_opclass_from_bw(bw, cfi);
+	if (!op_class) {
+		ath12k_warn(ar->ab, "Invalid opclass for 6 GHz bw\n");
+		goto ret;
+	}
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_AFC, "Configured BW belong to op_class %d cfi %d\n",
+		   op_class, cfi);
+
+	for (i = 0;  i < reg_info->num_chan_objs; i++) {
+		afc_chan = reg_info->afc_chan_info + i;
+
+		if (afc_chan->global_opclass != op_class)
+			continue;
+
+		for (j = 0; j < afc_chan->num_chans; j++) {
+			chan_eirp = afc_chan->chan_eirp_info + j;
+			if (chan_eirp->cfi == cfi) {
+				eirp_pwr = chan_eirp->eirp_power;
+				break;
+			}
+		}
+
+		if (eirp_pwr)
+			break;
+	}
+
+	eirp_pwr = eirp_pwr / 100;
+
+ret:
+	spin_unlock_bh(&ar->data_lock);
+	return eirp_pwr;
+}
+
+void ath12k_reg_get_afc_eirp_power_for_bw(struct ath12k *ar, u16 *start_freq,
+					  u16 *center_freq, int pwr_level,
+					  struct cfg80211_chan_def *chan_def,
+					  s8 *tx_power)
+{
+	int bw, cfi;
+
+	if (chan_def->width == NL80211_CHAN_WIDTH_80P80 && pwr_level == 3)
+		*center_freq = (u16)chan_def->center_freq2;
+	else
+		*center_freq = *start_freq + (10 * (BIT(pwr_level) - 1));
+
+	/* For 20 MHz, no +10 offset is required */
+	if (pwr_level != 0)
+		*center_freq += 10;
+
+	/* power level is directly correlated to enum nl80211_chan_width
+	 * plus one as power level starts from 0
+	 */
+	if (pwr_level < 3)
+		bw = pwr_level + 1;
+	else if (pwr_level == 3)
+		bw = chan_def->width;
+
+	cfi = ieee80211_frequency_to_channel(*center_freq);
+	*tx_power = ath12k_reg_get_afc_eirp_power(ar, bw, cfi);
+}
+
 int ath12k_reg_process_afc_power_event(struct ath12k *ar)
 {
 	int new_reg_rule_cnt, num_regd_rules, num_afc_rules, num_sp_rules;
--- a/drivers/net/wireless/ath/ath12k/reg.h
+++ b/drivers/net/wireless/ath/ath12k/reg.h
@@ -312,6 +312,12 @@ int ath12k_reg_update_chan_list(struct a
 int ath12k_reg_get_num_chans_in_band(struct ath12k *ar,
 				     struct ieee80211_supported_band *band,
 			             u32 freq_low, u32 freq_high);
+s8 ath12k_reg_get_afc_eirp_power(struct ath12k *ar, enum nl80211_chan_width bw,
+				 int cfi);
+void ath12k_reg_get_afc_eirp_power_for_bw(struct ath12k *ar, u16 *start_freq,
+					  u16 *center_freq, int pwr_level,
+					  struct cfg80211_chan_def *chan_def,
+					  s8 *tx_power);
 int ath12k_reg_process_afc_power_event(struct ath12k *ar);
 int ath12k_copy_afc_response(struct ath12k *ar, char *afc_resp, u32 len);
 #endif
