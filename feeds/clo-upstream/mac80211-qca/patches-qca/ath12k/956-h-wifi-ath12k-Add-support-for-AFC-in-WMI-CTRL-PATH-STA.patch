From 11f8eedf53f078bfd0e08703dbf74d241612b92f Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Tue, 11 Jun 2024 22:03:39 +0530
Subject: [PATCH] wifi: ath12k: Add support for AFC in WMI CTRL PATH STATS

Add support for AFC in WMI control path stats.
Patch needed to be re-written while upstreaming

Usage:

echo <stats_id> <action> > /sys/kernel/debug/ath12k/pci-0000\:06

Sample:

echo 11 1 > /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0
/mac0/wmi_ctrl_stats

cat /sys/kernel/debug/ath12k/qcn9274\ hw2.0_0002:01:00.0/mac0/wm
i_ctrl_stats

Patch dependency: 333-0020-mac80211-add-support-for-6G-channels-and-regulatory.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 183 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.c     |  61 +++++++-
 drivers/net/wireless/ath/ath12k/wmi.h     |  36 +++++
 3 files changed, 278 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -380,6 +380,186 @@ int wmi_ctrl_path_awgn_stat(struct ath12
 	return ret_val;
 }
 
+static int wmi_ctrl_path_afc_stat(struct ath12k *ar, char __user *ubuf,
+				  size_t count, loff_t *ppos)
+{
+	struct wmi_ctrl_path_stats_list *stats, *tmp;
+	struct wmi_ctrl_path_afc_stats *afc_stats;
+	LIST_HEAD(wmi_stats_list);
+	const int size = 2048;
+	int len = 0, ret_val;
+	char *buf;
+
+	buf = kzalloc(size, GFP_KERNEL);
+
+	if (!buf)
+		return -ENOMEM;
+
+	if (!list_empty(&wmi_stats_list)) {
+		len += scnprintf(buf + len, size - len, "WMI_CTRL_PATH_AFC_STATS_TLV:\n");
+		len += scnprintf(buf + len, size - len, "\n");
+		len += scnprintf(buf + len, size - len, "****General AFC counters****\n");
+	}
+
+	spin_lock_bh(&ar->wmi_ctrl_path_stats_lock);
+	list_splice_tail_init(&ar->debug.wmi_list, &wmi_stats_list);
+	spin_unlock_bh(&ar->wmi_ctrl_path_stats_lock);
+	list_for_each_entry_safe(stats, tmp, &wmi_stats_list, list) {
+		if (!stats)
+			break;
+
+		afc_stats = stats->stats_ptr;
+
+		if (!afc_stats)
+			break;
+
+		len += scnprintf(buf + len, size - len,
+				 "Total request ID = %u\n",
+				 __le32_to_cpu(afc_stats->request_id_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "Total payload count = %u\n",
+				 __le32_to_cpu(afc_stats->response_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "Total invalid payload count = %u\n",
+				 __le32_to_cpu(afc_stats->invalid_response_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "Total AFC reset count = %u\n",
+				 __le32_to_cpu(afc_stats->reset_count));
+
+		len += scnprintf(buf + len, size - len, "\n");
+		len += scnprintf(buf + len, size - len,
+				 "****AFC Payload Response error counters****\n");
+
+		len += scnprintf(buf + len, size - len,
+				 "Payload id mismatch count = %u\n",
+				 __le32_to_cpu(afc_stats->id_mismatch_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "Local error code success = %u\n",
+				 __le32_to_cpu(afc_stats->local_err_code_success));
+
+		len += scnprintf(buf + len, size - len,
+				 "Local error code failure = %u\n",
+				 __le32_to_cpu(afc_stats->local_err_code_failure));
+
+		len += scnprintf(buf + len, size - len, "\n");
+		len += scnprintf(buf + len, size - len,
+				 "****AFC Server Response error counters****\n");
+
+		len += scnprintf(buf + len, size - len,
+				 "Code_100 | Version not supported = %u\n",
+				 __le32_to_cpu(afc_stats->serv_resp_code_100));
+
+		len += scnprintf(buf + len, size - len,
+				 "Code_101 | Device disallowed = %u\n",
+				 __le32_to_cpu(afc_stats->serv_resp_code_101));
+
+		len += scnprintf(buf + len, size - len,
+				 "Code_102 | Missing Param = %u\n",
+				 __le32_to_cpu(afc_stats->serv_resp_code_102));
+
+		len += scnprintf(buf + len, size - len,
+				 "Code_103 | Invalid value = %u\n",
+				 __le32_to_cpu(afc_stats->serv_resp_code_103));
+
+		len += scnprintf(buf + len, size - len,
+				 "Code_106 | Unexpected param = %u\n",
+				 __le32_to_cpu(afc_stats->serv_resp_code_106));
+
+		len += scnprintf(buf + len, size - len,
+				 "Code_300 | Unsupported spectrum = %u\n",
+				 __le32_to_cpu(afc_stats->serv_resp_code_300));
+
+		len += scnprintf(buf + len, size - len, "\n");
+		len += scnprintf(buf + len, size - len,
+				 "****AFC Compliance tracker****\n");
+
+		len += scnprintf(buf + len, size - len,
+				 "Proxy_standalone 0 = %u\n",
+				 __le32_to_cpu(afc_stats->proxy_standalone_0));
+
+		len += scnprintf(buf + len, size - len,
+				 "Proxy_standalone 1 = %u\n",
+				 __le32_to_cpu(afc_stats->proxy_standalone_1));
+
+		len += scnprintf(buf + len, size - len,
+				 "Successful power event sent count = %u\n",
+				 __le32_to_cpu(afc_stats->power_event_counter));
+
+		len += scnprintf(buf + len, size - len,
+				 "Force LPI switch count = %u\n",
+				 __le32_to_cpu(afc_stats->force_LPI_counter));
+
+		len += scnprintf(buf + len, size - len,
+				 "TPC WMI success count = %u\n",
+				 __le32_to_cpu(afc_stats->tpc_wmi_success_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "TPC WMI failure count = %u\n",
+				 __le32_to_cpu(afc_stats->tpc_wmi_failure_count));
+
+		len += scnprintf(buf + len, size - len, "\n");
+		len += scnprintf(buf + len, size - len,
+				 "****AFC Regulatory Compliance check counter****\n");
+
+		len += scnprintf(buf + len, size - len,
+				 "psd failure = %u\n",
+				 __le32_to_cpu(afc_stats->psd_failure_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "psd end freq failure = %u\n",
+				 __le32_to_cpu(afc_stats->psd_end_freq_failure_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "psd start freq failure = %u\n",
+				 __le32_to_cpu(afc_stats->psd_start_freq_failure_count));
+
+		len += scnprintf(buf + len, size - len, "eirp failure = %u\n",
+				 __le32_to_cpu(afc_stats->eirp_failure_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "centre freq failure = %u\n",
+				 __le32_to_cpu(afc_stats->cfreq_failure_count));
+
+		len += scnprintf(buf + len, size - len, "\n");
+		len += scnprintf(buf + len, size - len,
+				 "****AFC Miscellaneous stats****\n");
+
+		len += scnprintf(buf + len, size - len,
+				 "Current request ID = %u\n",
+				 __le32_to_cpu(afc_stats->request_id));
+
+		len += scnprintf(buf + len, size - len,
+				 "Grace timer count = %u\n",
+				 __le32_to_cpu(afc_stats->grace_timer_count));
+
+		len += scnprintf(buf + len, size - len,
+				 "Current TTL timer = %u seconds\n",
+				 __le32_to_cpu(afc_stats->cur_ttl_timer));
+
+		len += scnprintf(buf + len, size - len, "Deployment mode = %u (%s)\n",
+				 __le32_to_cpu(afc_stats->deployment_mode),
+				 (__le32_to_cpu(afc_stats->deployment_mode) == 1) ? "indoor" :
+				 (__le32_to_cpu(afc_stats->deployment_mode) == 2) ? "outdoor" :
+				 "(unknown)");
+
+		len += scnprintf(buf + len, size - len,
+				 "Total AFC-Response Payload clear count = %u\n",
+				 __le32_to_cpu(afc_stats->payload_clear_count));
+		kfree(stats->stats_ptr);
+		list_del(&stats->list);
+		kfree(stats);
+	}
+
+	ret_val =  simple_read_from_buffer(ubuf, count, ppos, buf, len);
+	kfree(buf);
+
+	return ret_val;
+}
+
 int wmi_ctrl_path_btcoex_stat(struct ath12k *ar, char __user *ubuf,
 			      size_t count, loff_t *ppos)
 {
@@ -529,6 +709,9 @@ static ssize_t ath12k_read_wmi_ctrl_path
 	case WMI_CTRL_PATH_MEM_STATS:
 		ret_val = wmi_ctrl_path_mem_stat(ar, ubuf, count, ppos);
 		break;
+	case WMI_CTRL_PATH_AFC_STATS:
+		ret_val = wmi_ctrl_path_afc_stat(ar, ubuf, count, ppos);
+		break;
 		/* Add case for newly wmi ctrl path added stats here */
 	default:
 		/* Unsupported tag */
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -4767,13 +4767,16 @@ ath12k_wmi_send_wmi_ctrl_stats_cmd(struc
 		stats_id = (1 << param->stats_id);
 		break;
 	case WMI_REQ_CTRL_PATH_AWGN_STAT:
+	case WMI_REQ_CTRL_PATH_AFC_STAT:
 		if (ar->supports_6ghz) {
 			pdev_id_array[0] = ar->pdev->pdev_id;
 			stats_id = (1 << param->stats_id);
 		} else {
 			ath12k_warn(ab,
-			  "Stats id %d awgn stats are only supported for 6GHz",
-			  param->stats_id);
+			  "Stats id %d %s stats are only supported for 6GHz",
+			  param->stats_id,
+			  (param->stats_id ==
+			   WMI_REQ_CTRL_PATH_AWGN_STAT) ? "AWGN" : "AFC");
 			return -EIO;
 		}
 		break;
@@ -5100,6 +5103,57 @@ int wmi_print_ctrl_path_mem_stats_tlv(st
 }
 
 
+int wmi_print_ctrl_path_afc_stats_tlv(struct ath12k_base *ab, u16 len,
+				      const void *ptr, void *data)
+{
+	struct wmi_ctrl_path_stats_ev_parse_param *stats_buff = data;
+	struct wmi_ctrl_path_afc_stats *afc_stats_skb, *afc_stats = NULL;
+	struct wmi_ctrl_path_stats_list *stats;
+	struct ath12k *ar = NULL;
+	int i;
+
+	afc_stats_skb = (struct wmi_ctrl_path_afc_stats *)ptr;
+
+	for (i = 0; i < ATH12K_GROUP_MAX_RADIO; i++) {
+		ar = ab->ag->hw_links[i];
+		if (!ar) {
+			ath12k_warn(ab, "Failed to get ar for wmi ctrl afc stats\n");
+			return -EINVAL;
+		}
+
+		if (ar->supports_6ghz)
+			break;
+	}
+
+	if (!ar->supports_6ghz) {
+		ath12k_warn(ab, "AFC stats is not supported on a non 6 GHz radio\n");
+		return -EINVAL;
+	}
+
+	stats = kzalloc(sizeof(*stats), GFP_ATOMIC);
+	if (!stats)
+		return -ENOMEM;
+
+	afc_stats = kzalloc(sizeof(*afc_stats), GFP_ATOMIC);
+
+	if (!afc_stats) {
+		kfree(stats);
+		return -ENOMEM;
+	}
+
+	memcpy(afc_stats, afc_stats_skb, sizeof(*afc_stats));
+	stats->stats_ptr = afc_stats;
+	list_add_tail(&stats->list, &stats_buff->list);
+
+	spin_lock_bh(&ar->wmi_ctrl_path_stats_lock);
+	ath12k_wmi_crl_path_stats_list_free(ar, &ar->debug.wmi_list);
+	spin_unlock_bh(&ar->wmi_ctrl_path_stats_lock);
+	ar->debug.wmi_ctrl_path_stats_tagid = WMI_CTRL_PATH_AFC_STATS;
+	stats_buff->ar = ar;
+
+	return 0;
+}
+
 static int ath12k_wmi_ctrl_stats_subtlv_parser(struct ath12k_base *ab,
 					       u16 tag, u16 len,
 					       const void *ptr, void *data)
@@ -5124,6 +5178,9 @@ static int ath12k_wmi_ctrl_stats_subtlv_
 	case WMI_CTRL_PATH_MEM_STATS:
                 ret = wmi_print_ctrl_path_mem_stats_tlv(ab, len, ptr, data);
                 break;
+	case WMI_CTRL_PATH_AFC_STATS:
+		ret = wmi_print_ctrl_path_afc_stats_tlv(ab, len, ptr, data);
+		break;
 		/* Add case for newly wmi ctrl path added stats here */
 	default:
 		ath12k_warn(ab,
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2207,6 +2207,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_RSSI_DBM_CONVERSION_PARAMS_INFO_FIXED_PARAM = 0x427,
 	WMI_TAG_RSSI_DBM_CONVERSION_PARAMS_INFO,
 	WMI_TAG_RSSI_DBM_CONVERSION_TEMP_OFFSET_INFO,
+	WMI_CTRL_PATH_AFC_STATS = 0x42A,
 	WMI_TAG_BCN_TMPL_ML_INFO_CMD = 0x436,
 	WMI_TAG_MLO_MGMT_RX_CU_PARAMS = 0x439,
 	WMI_TAG_CTRL_PATH_CMD_FIXED_PARAM = 0x442,
@@ -7692,6 +7693,40 @@ struct wmi_ctrl_path_mem_stats_params {
 	__le32 allocated_bytes;
 } __packed;
 
+struct wmi_ctrl_path_afc_stats {
+	__le32 tlv_header;
+	__le32 pdev_id;
+	__le32 request_id_count;
+	__le32 response_count;
+	__le32 invalid_response_count;
+	__le32 reset_count;
+	__le32 id_mismatch_count;
+	__le32 local_err_code_success;
+	__le32 local_err_code_failure;
+	__le32 serv_resp_code_100;
+	__le32 serv_resp_code_101;
+	__le32 serv_resp_code_102;
+	__le32 serv_resp_code_103;
+	__le32 serv_resp_code_106;
+	__le32 serv_resp_code_300;
+	__le32 proxy_standalone_0;
+	__le32 proxy_standalone_1;
+	__le32 power_event_counter;
+	__le32 force_LPI_counter;
+	__le32 tpc_wmi_success_count;
+	__le32 tpc_wmi_failure_count;
+	__le32 psd_failure_count;
+	__le32 psd_end_freq_failure_count;
+	__le32 psd_start_freq_failure_count;
+	__le32 eirp_failure_count;
+	__le32 cfreq_failure_count;
+	__le32 request_id;
+	__le32 grace_timer_count;
+	__le32 cur_ttl_timer;
+	__le32 deployment_mode;
+	__le32 payload_clear_count;
+} __packed;
+
 struct wmi_ctrl_path_stats_ev_parse_param {
 	struct list_head list;
 	struct ath12k *ar;
@@ -8229,6 +8264,7 @@ enum  wmi_ctrl_path_stats_id {
 	WMI_REQ_CTRL_PATH_CAL_STAT       = 5,
 	WMI_REQ_CTRL_PATH_AWGN_STAT	 = 7,
 	WMI_REQ_CTRL_PATH_BTCOEX_STAT    = 8,
+	WMI_REQ_CTRL_PATH_AFC_STAT       = 11,
 };
 
 enum wmi_dblog_param {
