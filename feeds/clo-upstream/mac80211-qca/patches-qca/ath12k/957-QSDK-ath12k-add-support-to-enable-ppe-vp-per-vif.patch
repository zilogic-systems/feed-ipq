From dc271ba3a9bf599769c34f5cf034355f254ce928 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Thu, 1 Aug 2024 11:23:02 +0530
Subject: [PATCH] QSDK: ath12k: add support to enable ppe vp per vif

Add support to enable ppe vp per vif.

Add support to pass the skbs that are part of accelerated flows to ppe vp path.

The rest of the rx packets take the standard linux receive path
using netif_receive_skb().

The subscription of 2 new fields(16 bytes) in msdu_end tlv in the rx descriptor
increases the size of the hal_rx_desc and the increase in size of hal_rx_desc
beyond 144 bytes leads to a throughput drop of 60-80Mbps in UDP UL.

The current size of hal_rx_desc is 144 bytes.
The size of hal_rx_desc with this patch is 160 bytes.

If 2 other fields(16 bytes) are unsubscribed, the size of hal_rx_desc will become
144 bytes again.

With 2 other fields unsubscribed(say sw_frame_group id, phy_ppdu_id) and
with this patch (i.e hal_rx_desc size retained as 144 bytes), no throughput
degradation is observed.

Patch-dependency: 955-QSDK-wifi-ath12k-Handle-vendor-command-for-interface-offl.patch

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 14 ++++++++----
 drivers/net/wireless/ath/ath12k/dp_rx.h   |  3 +++
 drivers/net/wireless/ath/ath12k/hal.c     | 17 +++++++++++++-
 drivers/net/wireless/ath/ath12k/hal.h     |  2 ++
 drivers/net/wireless/ath/ath12k/peer.c    |  4 ++--
 drivers/net/wireless/ath/ath12k/ppe.c     | 27 +++++++++++++++++++----
 drivers/net/wireless/ath/ath12k/ppe.h     |  3 ++-
 drivers/net/wireless/ath/ath12k/rx_desc.h |  7 ++++++
 8 files changed, 65 insertions(+), 12 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -26,6 +26,7 @@
 #include <ppe_vp_public.h>
 #include <ppe_vp_tx.h>
 #include "ppe.h"
+#include "fse.h"
 #include <ppe_drv_sc.h>
 #endif
 
@@ -2933,10 +2934,15 @@ static void ath12k_dp_rx_h_mpdu(struct a
 			if (likely(peer->dev)) {
 #if defined(CPTCFG_MAC80211_PPE_SUPPORT) || defined(CPTCFG_ATH12K_PPE_DS_SUPPORT)
 				if (peer->ppe_vp_num > 0) {
-					msdu->dev = peer->dev;
-					if (ppe_vp_tx_to_ppe(peer->ppe_vp_num, msdu)) {
-						rcu_read_unlock();
-						return;
+					ab->hw_params->hal_ops->rx_desc_get_fse_info(rx_desc, rx_info);
+					if (!rx_info->flow_idx_timeout &&
+					    !rx_info->flow_idx_invalid &&
+					    (rx_info->flow_metadata != ATH12K_RX_FSE_FLOW_MATCH_SFE)) {
+						msdu->dev = peer->dev;
+						if (ppe_vp_tx_to_ppe(peer->ppe_vp_num, msdu)) {
+							rcu_read_unlock();
+							return;
+						}
 					}
 				}
 #endif
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -148,6 +148,9 @@ struct ath12k_dp_rx_info {
 	bool is_last_msdu;
 	bool is_intra_bss;
 	struct ieee80211_rx_status *rx_status;
+	bool flow_idx_invalid;
+	bool flow_idx_timeout;
+	u16 flow_metadata;
 };
 
 #define ATH12K_DP_MIN_FST_CORE_MASK 0x1
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -543,7 +543,7 @@ static u8 ath12k_hal_qcn9274_rx_desc_get
 }
 
 #define MPDU_START_WMASK 0xFFC
-#define MSDU_END_WMASK 0x13643
+#define MSDU_END_WMASK 0x137C3
 
 static inline u16 ath12k_hal_rx_mpdu_start_wmask_get(void)
 {
@@ -805,6 +805,19 @@ static void ath12k_hw_qcn9274_get_rx_msd
 					      RX_MSDU_END_INFO5_L3_HDR_PADDING);
 }
 
+static void ath12k_hw_qcn9274_rx_desc_get_fse_info(struct hal_rx_desc *desc,
+						   struct ath12k_dp_rx_info *rx_info)
+{
+	__le32 flow_idx_info = desc->u.qcn9274.msdu_end.flow_idx_info;
+
+	rx_info->flow_idx_timeout = le32_get_bits(flow_idx_info,
+						  RX_MSDU_END_FLOW_IDX_TIMEOUT);
+	rx_info->flow_idx_invalid = le32_get_bits(flow_idx_info,
+						  RX_MSDU_END_FLOW_IDX_INVALID);
+	rx_info->flow_metadata = le16_get_bits(desc->u.qcn9274.msdu_end.fse_metadata,
+					       ATH12K_DP_RX_FSE_FLOW_METADATA_MASK);
+}
+
 static void ath12k_hw_qcn9274_get_rx_desc_info(struct hal_rx_desc *desc,
 					       struct ath12k_dp_rx_info *rx_info)
 {
@@ -887,6 +900,7 @@ const struct hal_ops hal_qcn9274_ops = {
 	.rx_desc_get_first_last_msdu = ath12k_hw_qcn9274_get_rx_first_last_msdu,
 	.hal_get_tsf2_scratch_reg = ath12k_hal_qcn9274_get_tsf2_scratch_reg,
 	.hal_get_tqm_scratch_reg = ath12k_hal_qcn9274_get_tqm_scratch_reg,
+	.rx_desc_get_fse_info = ath12k_hw_qcn9274_rx_desc_get_fse_info,
 };
 
 const struct hal_ops hal_qcn6432_ops = {
@@ -937,6 +951,7 @@ const struct hal_ops hal_qcn6432_ops = {
 	.rx_desc_get_first_last_msdu = ath12k_hw_qcn9274_get_rx_first_last_msdu,
 	.hal_get_tsf2_scratch_reg = ath12k_hal_qcn9274_get_tsf2_scratch_reg,
 	.hal_get_tqm_scratch_reg = ath12k_hal_qcn9274_get_tqm_scratch_reg,
+	.rx_desc_get_fse_info = ath12k_hw_qcn9274_rx_desc_get_fse_info,
 };
 
 static bool ath12k_hw_wcn7850_rx_desc_get_first_msdu(struct hal_rx_desc *desc)
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -1208,6 +1208,8 @@ struct hal_ops {
 	void (*hal_get_tsf2_scratch_reg)(struct ath12k_base *ab, u8 mac_id,
 					 u64 *value);
 	void (*hal_get_tqm_scratch_reg)(struct ath12k_base *ab, u64 *value);
+	void (*rx_desc_get_fse_info)(struct hal_rx_desc *desc,
+				     struct ath12k_dp_rx_info *info);
 };
 
 extern const struct hal_ops hal_qcn9274_ops;
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -854,8 +854,8 @@ int ath12k_peer_create(struct ath12k *ar
 	/* Do not deliver frames to PPE in fast rx incase of RFS
 	 * RFS is supported only in SFE Mode
 	 */
-	if (peer->vif->ppe_vp_type == PPE_VP_USER_TYPE_ACTIVE)
-		peer->ppe_vp_num = peer->vif->ppe_vp_num;
+	if (arvif->ahvif->ppe_vp_type == PPE_VP_USER_TYPE_ACTIVE)
+		peer->ppe_vp_num = arvif->ahvif->ppe_vp_num;
 #endif
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	if (arvif->ahvif->ppe_vp_type == PPE_VP_USER_TYPE_DS)
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1341,7 +1341,6 @@ static bool ath12k_stats_update_ppe_vp(s
 }
 #endif
 
-
 void ath12k_vif_free_vp(struct ath12k_vif *ahvif)
 {
 	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
@@ -1393,7 +1392,8 @@ int ath12k_vif_alloc_vp(struct ath12k_vi
 	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
 
 	/* RFS */
-	if (ppe_vp_type == PPE_VP_USER_TYPE_PASSIVE) {
+	switch (ppe_vp_type) {
+	case PPE_VP_USER_TYPE_PASSIVE:
 		vpai.usr_type = PPE_VP_USER_TYPE_PASSIVE;
 
 		/* user input takes highest precedence */
@@ -1403,17 +1403,23 @@ int ath12k_vif_alloc_vp(struct ath12k_vi
 			vpai.core_mask = ath12k_ppe_rfs_get_core_mask(ahvif);
 
 		ppe_vp_num = ppe_vp_alloc(wdev->netdev, &vpai);
+		break;
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	/* Direct Switching */
-	} else if (ppe_vp_type == PPE_VP_USER_TYPE_DS) {
+	case PPE_VP_USER_TYPE_DS:
 		vpai.stats_cb = ath12k_stats_update_ppe_vp;
 		vpai.queue_num = 0;
 		vpai.core_mask = ATH12K_PPE_DEFAULT_CORE_MASK;
 		vpai.usr_type = PPE_VP_USER_TYPE_DS;
 		vpai.net_dev_flags = PPE_VP_NET_DEV_FLAG_IS_MLD;
-
 		ppe_vp_num = ppe_ds_wlan_vp_alloc(NULL, wdev->netdev, &vpai);
+		break;
 #endif
+	case PPE_VP_USER_TYPE_ACTIVE:
+		vpai.usr_type = PPE_VP_USER_TYPE_ACTIVE;
+		vpai.core_mask = ATH12K_PPE_DEFAULT_CORE_MASK;
+		ppe_vp_num = ppe_vp_alloc(wdev->netdev, &vpai);
+		break;
 	}
 
 	if (ppe_vp_num <= 0) {
@@ -1457,7 +1463,7 @@ ath12k_dp_rx_ppeds_fse_update_flow_info(
 	tuple_info->src_port = ppe_tuple->src_port;
 	tuple_info->dest_port = ppe_tuple->dest_port;
 	tuple_info->l4_protocol = ppe_tuple->protocol;
-	flow_info->fse_metadata = ATH12K_RX_FSE_FLOW_MATCH_PPE;
+	flow_info->fse_metadata = ppe_flow_info->vp_num;
 
 	if (ppe_flow_info->flags & PPE_DRV_FSE_IPV4) {
 		flow_info->is_addr_ipv4 = 1;
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -79,7 +79,8 @@ struct ath12k_ppe {
 
 #define ATH12K_DP_PPEDS_NAPI_DONE_BIT	1
 #define ATH12K_DP_PPEDS_TX_COMP_NAPI_BIT	2
-#define ATH12K_RX_FSE_FLOW_MATCH_PPE 0xCCCC
+
+#define ATH12K_DP_RX_FSE_FLOW_METADATA_MASK      0xFFFF
 
 struct dp_ppe_ds_idxs {
 	u32 ppe2tcl_start_idx;
--- a/drivers/net/wireless/ath/ath12k/rx_desc.h
+++ b/drivers/net/wireless/ath/ath12k/rx_desc.h
@@ -769,6 +769,9 @@ enum rx_msdu_start_reception_type {
 #define RX_MSDU_END_INFO0_SW_FRAMEGROUP_MCAST_DATA 1
 #define RX_MSDU_END_INFO0_SW_FRAMEGROUP_UCAST_DATA 2
 
+#define RX_MSDU_END_FLOW_IDX_TIMEOUT		BIT(12)
+#define RX_MSDU_END_FLOW_IDX_INVALID		BIT(13)
+
 struct rx_msdu_end_qcn9274 {
 	__le64 msdu_end_tag;
 	__le32 sw_frame_group_id;
@@ -777,6 +780,10 @@ struct rx_msdu_end_qcn9274 {
 	__le16 info5;
 	__le16 sa_idx;
 	__le16 da_idx_or_sw_peer_id;
+	__le32 flow_idx;
+	__le32 fse_metadata;
+	__le32 info7;
+	__le32 flow_idx_info;
 	__le32 info8;
 	__le32 info9;
 	__le32 info10;
