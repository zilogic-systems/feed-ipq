From d349c5652fd0c066876f377540bb52455779f301 Mon Sep 17 00:00:00 2001
From: Vignesh C <quic_vignc@quicinc.com>
Date: Fri, 21 Jun 2024 15:10:44 +0530
Subject: [PATCH] wifi: ath12k: Set primary_link_id as middle link

In case of 3 link STA association with 4 link AP, Make sure
to select the middle device link as primary_link_id of sta
which is adjacent to other two devices.

This is applicable only for number of devices is equal to 4.

Patch-dependency:
	858-wifi-ath12k-Add-debugfs-support-to-configure-primary.patch

Signed-off-by: Vignesh C <quic_vignc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  2 +
 drivers/net/wireless/ath/ath12k/hw.h   |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 77 +++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/mac.h  |  1 +
 4 files changed, 80 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 3c82704..c8d5a2d 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -752,6 +752,8 @@ struct ath12k_sta {
 	u8 assoc_link_id;
 	u8 primary_link_id;
 	u8 num_peer;
+	/* indicates bitmap of devices where peers are created */
+	u8 device_bitmap;
 	/* Indicates whether disassoc is sent after recovery
 	 * ONLY used currently in recovery case
 	 */
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index aef190d..e6d5a4c 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -108,6 +108,7 @@ struct ath12k_cfr_peer_tx_param;
 #define ATH12K_HOST_AFC_QCN6432_MEM_OFFSET 0xD8000
 
 #define ATH12K_MAX_SOCS 4
+#define ATH12K_NLINK_SUPP_DEVICES 4
 
 enum ath12k_hw_rate_cck {
 	ATH12K_HW_RATE_CCK_LP_11M = 0,
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index f3b0332..c7049ab 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -7548,6 +7548,7 @@ static int ath12k_mac_assign_link_sta(struct ath12k_hw *ah,
 {
 	struct ieee80211_link_sta *link_sta;
 	struct ieee80211_sta *sta;
+	struct ath12k_base *ab;
 
 	lockdep_assert_held(&ah->conf_mutex);
 
@@ -7576,6 +7577,8 @@ static int ath12k_mac_assign_link_sta(struct ath12k_hw *ah,
 	ahsta->link[link_id] = arsta;
 	ahsta->links_map |= BIT(link_id);
 	arsta->arvif = ahvif->link[link_id];
+	ab = arsta->arvif->ab;
+	ahsta->device_bitmap |= BIT(ab->wsi_info.chip_idx);
 	arsta->ahsta = ahsta;
 	arsta->link_id = link_id;
 	arsta->state = IEEE80211_STA_NONE;
@@ -7587,6 +7590,9 @@ static int ath12k_mac_unassign_link_sta(struct ath12k_hw *ah,
 				       struct ath12k_sta *ahsta,
 				       u8 link_id)
 {
+	struct ath12k_link_vif *arvif = ahsta->link[link_id]->arvif;
+	struct ath12k_base *ab = arvif->ab;
+
 	lockdep_assert_held(&ah->conf_mutex);
 
 	if (link_id > IEEE80211_MLD_MAX_NUM_LINKS)
@@ -7594,6 +7600,7 @@ static int ath12k_mac_unassign_link_sta(struct ath12k_hw *ah,
 
 	ahsta->link[link_id] = NULL;
 	ahsta->links_map &= ~BIT(link_id);
+	ahsta->device_bitmap &= ~BIT(ab->wsi_info.chip_idx);
 
 	return 0;
 }
@@ -8087,6 +8094,72 @@ static int ath12k_mac_op_sta_state(struct ieee80211_hw *hw,
 					   new_state);
 }
 
+void ath12k_mac_assign_middle_link_id(struct ieee80211_sta *sta,
+				      struct ath12k_sta *ahsta,
+				      u8 num_devices)
+{
+	struct ath12k_link_sta *arsta;
+	struct ath12k_base *ab;
+	u8 link_id;
+	u8 device_bitmap = ahsta->device_bitmap;
+	u8 i, next, prev;
+	bool adjacent_found = false;
+
+	/* 4 device: In case of 3 link STA association, Make sure to select
+	 * the middle device link as primary_link_id of sta which is adjacent
+	 * to other two devices.
+	 */
+	if (!(num_devices == ATH12K_NLINK_SUPP_DEVICES &&
+	      hweight16(sta->valid_links) == ATH12K_MAX_STA_LINKS)) {
+		/* To-Do: Requirement to set primary link id for no.of devices
+		 * greater than 4 has not yet confirmed. Also, Need to revisit
+		 * here when STA association support extends more than 3.
+		 */
+		if (num_devices > ATH12K_NLINK_SUPP_DEVICES)
+			ath12k_err(NULL,
+				   "num devices %d Combination not supported yet\n",
+				   num_devices);
+		return;
+	}
+
+	for (i = 0; i < num_devices; i++) {
+		if (!(device_bitmap & BIT(i)))
+			continue;
+
+		next = (i + 1) % num_devices;
+		prev = ((i - 1) + num_devices) % num_devices;
+		if ((device_bitmap & BIT(next)) && (device_bitmap & BIT(prev))) {
+			adjacent_found = true;
+			break;
+		}
+	}
+
+	if (!adjacent_found) {
+		ath12k_err(NULL,
+			   "No common adjacent devices found for sta %pM with device bitmap 0x%x\n",
+			   sta->addr, device_bitmap);
+		return;
+	}
+
+	for_each_set_bit(link_id, &ahsta->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+		arsta = ahsta->link[link_id];
+
+		if (!arsta && !arsta->arvif)
+			continue;
+
+		ab = arsta->arvif->ab;
+		if (!ab)
+			continue;
+
+		if (ab->wsi_info.chip_idx == i) {
+			ath12k_info(ab, "Overwriting primary link_id as %d for sta %pM",
+				    link_id, sta->addr);
+			ahsta->primary_link_id = link_id;
+			break;
+		}
+	}
+}
+
 static int ath12k_mac_op_change_sta_links(struct ieee80211_hw *hw,
 					    struct ieee80211_vif *vif,
 					    struct ieee80211_sta *sta,
@@ -8099,7 +8172,7 @@ static int ath12k_mac_op_change_sta_links(struct ieee80211_hw *hw,
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_sta *ahsta = ath12k_sta_to_ahsta(sta);
 	unsigned long valid_links;
-	u8 link_id;
+	u8 link_id, num_devices = ah->ag->num_chip;
 	int ret = 0;
 
 	if (!sta->valid_links)
@@ -8173,6 +8246,8 @@ static int ath12k_mac_op_change_sta_links(struct ieee80211_hw *hw,
 		mutex_unlock(&ar->conf_mutex);
 	}
 
+	ath12k_mac_assign_middle_link_id(sta, ahsta, num_devices);
+
 	mutex_unlock(&ah->conf_mutex);
 
 	return ret;
diff --git a/drivers/net/wireless/ath/ath12k/mac.h b/drivers/net/wireless/ath/ath12k/mac.h
index bc29713..3f2add2 100644
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -62,6 +62,7 @@ struct ath12k_latency_params {
  */
 #define ATH12K_DEFAULT_SCAN_LINK	IEEE80211_MLD_MAX_NUM_LINKS
 #define ATH12K_NUM_MAX_LINKS		(IEEE80211_MLD_MAX_NUM_LINKS + 1)
+#define ATH12K_MAX_STA_LINKS		3
 
 /* number of failed packets (20 packets with 16 sw reties each) */
 #define ATH12K_KICKOUT_THRESHOLD		(20 * 16)
-- 
2.34.1

