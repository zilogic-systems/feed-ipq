From 16d506a9ebb4cbcb6d356f738bd80aff427148d8 Mon Sep 17 00:00:00 2001
From: Neha Bisht <quic_nbisht@quicinc.com>
Date: Wed, 10 Jul 2024 11:14:46 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Fix to fetch correct primary_link_id for
 STA

Currently, for sta ahvif->primary_link_id is used to get arvif which is
only updated by debugfs. This results in null arvif dereferenced due to
incorrect primary_link in cases where sta is associated with primary
link other than 0.
Hence, instead of ahvif->primary_link, use ahsta->primary_link_id for
sta mode as well.
Also, in fse_add_flow and fse_delete_flow, instead of fetching ab
through arvif, fetch ag directly from ah as SFE rules for PPE DS
is maintained at hardware group ag instead of ab. ab is
currently used only for debug prints in FSE. This helps in
avoiding a scenario of failed rule deletion when valid_links is not
updated properly arvif during ECM query.

fixes: I9dacaefcb (QSDK: wifi: ath12k: Add DS node id retrieval mechanism)
Ib3037ac47 (wifi: ath12k: Fix default link reference issue when DS enabled)

Patch dependency: 951-c-QSDK-wifi-ath12k-support-DS-for-SLO-and-MLO-AP-modes.patch
                  953-QSDK-wifi-ath12k-Add-DS-node-id-retrieval-mechanism.patch

Signed-off-by: Neha Bisht <quic_nbisht@quicinc.com>
Signed-off-by: Pavankumar Nandeshwar <quic_pnandesh@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/accel_cfg.c | 35 +++++++++++++++------
 drivers/net/wireless/ath/ath12k/ppe.c       | 14 ++++++---
 2 files changed, 35 insertions(+), 14 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/accel_cfg.c
+++ b/drivers/net/wireless/ath/ath12k/accel_cfg.c
@@ -67,14 +67,29 @@ static bool ath12k_ds_get_node_id(struct
 		return false;
 
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
-		arvif = ahvif->link[ahvif->primary_link_id];
+		rcu_read_lock();
+		sta = ieee80211_find_sta(vif,vif->cfg.ap_addr);
+
+		if (!sta) {
+			ath12k_warn(NULL, "ieee80211_sta is null");
+			goto unlock_n_fail;
+		}
+
+		ahsta = ath12k_sta_to_ahsta(sta);
+		arvif = (!sta->mlo) ? ahvif->link[ahsta->deflink.link_id] :
+				ahvif->link[ahsta->primary_link_id];
+
+		if (WARN_ON(!arvif))
+			goto unlock_n_fail;
+
 		ab = arvif->ab;
 
 		/* Update and return DS node_id only if the chipset support DS*/
 		if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
-			return false;
+			goto unlock_n_fail;
 
 		*node_id = ab->ppe.ds_node_id;
+		rcu_read_unlock();
 		return true;
 	}
 
@@ -82,10 +97,8 @@ static bool ath12k_ds_get_node_id(struct
 		rcu_read_lock();
 
 		sta = ieee80211_find_sta(vif, peer_mac);
-		if (!sta) {
-			rcu_read_unlock();
-			return false;
-		}
+		if (!sta)
+			goto unlock_n_fail;
 
 		ahsta = ath12k_sta_to_ahsta(sta);
 
@@ -94,10 +107,8 @@ static bool ath12k_ds_get_node_id(struct
 		ab = arvif->ab;
 
 		/* Update and return DS node_id only if the chipset support DS*/
-		if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags)) {
-			rcu_read_unlock();
-			return false;
-		}
+		if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
+			goto unlock_n_fail;
 
 		*node_id = ab->ppe.ds_node_id;
 
@@ -106,6 +117,10 @@ static bool ath12k_ds_get_node_id(struct
 		return true;
 	}
 	return false;
+
+unlock_n_fail:
+	rcu_read_unlock();
+	return false;
 }
 
 static const struct ath_dp_accel_cfg_ops ath_dp_accel_cfg_ops_obj = {
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1485,10 +1485,10 @@ ath12k_dp_rx_ppeds_fse_add_flow_entry(st
 	struct rx_flow_info flow_info = { 0 };
 	struct wireless_dev *wdev;
 	struct ieee80211_vif *vif;
+	struct ath12k_hw_group *ag;
+	struct ath12k_hw *ah;
 	struct ath12k_base *ab = NULL;
-	struct ath12k *ar;
 	struct ath12k_vif *ahvif;
-	struct ath12k_link_vif *arvif;
 	struct net_device *dev = ppe_flow_info->dev;
 
 	if (!ath12k_fse_enable)
@@ -1505,20 +1505,28 @@ ath12k_dp_rx_ppeds_fse_add_flow_entry(st
 
 	ahvif = ath12k_vif_to_ahvif(vif);
 
-	/* FST rules are maintained at ag. Always chose default deflink's ab */
-	arvif = (vif->valid_links) ? (ahvif->link[0]) : (&ahvif->deflink);
-	if (WARN_ON(!arvif))
+	ah = ahvif->ah;
+	if (!ah) {
+		ath12k_warn(NULL, "FSE flow rule addition failed ah = NULL \n");
 		return false;
+	}
 
-	ar = arvif->ar;
-	if (!ar)
+	ag = ah->ag;
+	if (!ag) {
+		ath12k_warn(NULL, "FSE flow rule addition failed ag = NULL \n");
 		return false;
+	}
 
-	ab = ar->ab;
-	if (!ab)
+	/* TODO: protect ag->ab[] by spin lock */
+	/* NOTE: ag->ab[0] can be any arbitirary ab but first ab is used to cover non-MLO */
+	ab = ag->ab[0];
+	if (!ab) {
+		ath12k_warn(NULL, "FSE flow rule addition failed ab = NULL \n");
 		return false;
+	}
 
-	ath12k_dp_rx_ppeds_fse_update_flow_info(ab, &flow_info, ppe_flow_info, FSE_RULE_ADD);
+	ath12k_dp_rx_ppeds_fse_update_flow_info(ab, &flow_info, ppe_flow_info,
+						FSE_RULE_ADD);
 
 	return ath12k_dp_rx_flow_add_entry(ab, &flow_info);
 }
@@ -1529,10 +1537,10 @@ ath12k_dp_rx_ppeds_fse_del_flow_entry(st
 	struct rx_flow_info flow_info = { 0 };
 	struct wireless_dev *wdev;
 	struct ieee80211_vif *vif;
+	struct ath12k_hw_group *ag;
+	struct ath12k_hw *ah;
 	struct ath12k_base *ab = NULL;
-	struct ath12k *ar;
 	struct ath12k_vif *ahvif;
-	struct ath12k_link_vif *arvif;
 	struct net_device *dev = ppe_flow_info->dev;
 
 	if (!ath12k_fse_enable)
@@ -1549,23 +1557,25 @@ ath12k_dp_rx_ppeds_fse_del_flow_entry(st
 
 	ahvif = ath12k_vif_to_ahvif(vif);
 
-	/* FST rules are maintained at ag. Always chose default deflink's ab */
-	arvif = (vif->valid_links) ? (ahvif->link[0]) : (&ahvif->deflink);
-	if (WARN_ON(!arvif))
-		return false;
-
-	ar = arvif->ar;
-	if (!ar)
+	ah = ahvif->ah;
+	if (!ah) {
+		ath12k_warn(NULL, "FSE flow rule deletion failed ah = NULL \n");
 		return false;
+	}
 
-	ab = ar->ab;
-	if (!ab)
+	ag = ah->ag;
+	if (!ag) {
+		ath12k_warn(NULL, "FSE flow rule deletion failed ag = NULL \n");
 		return false;
+	}
 
-	/* Skip deleting entries during rmmod and SSR */
-	if (ppe_flow_info->dev->reg_state >= NETREG_UNREGISTERING ||
-	    netif_queue_stopped(ppe_flow_info->dev))
+	/* TODO: protect ag->ab[] by spin lock */
+	/* NOTE: ag->ab[0] can be any arbitirary ab but first ab is used to cover non-MLO */
+	ab = ag->ab[0];
+	if (!ab) {
+		ath12k_warn(NULL, "FSE flow rule deletion failed ab = NULL \n");
 		return false;
+	}
 
 	ath12k_dp_rx_ppeds_fse_update_flow_info(ab, &flow_info, ppe_flow_info,
 						FSE_RULE_DELETE);
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -127,6 +127,11 @@ void ath12k_core_put_hw_group(struct ath
 	if (!ag)
 		return;
 
+	if (ag->fst) {
+		ath12k_dp_rx_fst_detach(ab, ag->fst);
+		ag->fst = NULL;
+	}
+
 	mutex_lock(&ag->mutex_lock);
 
 	if (chip_id >= ag->num_chip) {
@@ -154,11 +159,8 @@ void ath12k_core_put_hw_group(struct ath
 
 	mutex_unlock(&ag->mutex_lock);
 
-	if (!num_probed) {
-		ath12k_dp_rx_fst_detach(ab, ag->fst);
+	if (!num_probed)
 		ath12k_core_hw_group_free(ag);
-	}
-
 }
 
 static void ath12k_core_hw_group_reset(struct work_struct *work)
@@ -210,7 +212,7 @@ ath12k_core_hw_group_alloc(u8 id, u8 max
 	ag->hw_queues_stopped = false;
 	ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 	INIT_WORK(&ag->reset_work, ath12k_core_hw_group_reset);
-
+	ag->fst = NULL;
 #ifdef CPTCFG_ATH12K_POWER_OPTIMIZATION
 	ath12k_global_ps_ctx.ag = ag;
 #endif
@@ -351,8 +353,8 @@ again:
 	ab->chip_id = ag->num_probed;
 	ag->ab[ag->num_probed++] = ab;
 
-	/* Call FST attach only for the first probed chip */
-	if (ag->num_probed == 1)
+	/* Call FST attach only once for ag */
+	if (!ag->fst)
 		ag->fst = ath12k_dp_rx_fst_attach(ab);
 
 	ab->ag = ag;
