From 3645d4e6709e9605c2cdae8c24d666019e96021d Mon Sep 17 00:00:00 2001
From: Sarika Sharma <quic_sarishar@quicinc.com>
Date: Tue, 25 Jun 2024 12:12:17 +0530
Subject: [PATCH] wifi: ath12k: add soc_dp stats for null, eapol and mcast pkts

Currently no stats are available to check for eapol, null frame and
multicast pkts transmitted or received.

Hence, changes are done to add pkt count for eapol, null frame
and multicast in soc_dp_stats.

REO Non-Fast Rx:
Ring1: 0:0      1:98    2:0
Ring2: 0:0      1:3307  2:0
Ring3: 0:0      1:0     2:0
Ring4: 0:0      1:1309  2:0

Mcast Non-Fast Rx:
Ring1: 0:0      1:3     2:0
Ring2: 0:0      1:0     2:0
Ring3: 0:0      1:0     2:0
Ring4: 0:0      1:0     2:0

Unicast Non-Fast Rx:
Ring1: 0:0      1:94    2:0
Ring2: 0:0      1:3307  2:0
Ring3: 0:0      1:0     2:0
Ring4: 0:0      1:1309  2:0

Eapol Rx:
Ring1: 0:0      1:1     2:0
Ring2: 0:0      1:0     2:0
Ring3: 0:0      1:0     2:0
Ring4: 0:0      1:0     2:0

Null frame Rx: 1 Rx dropped: 0

tx_multicast: 0:678 1:21 2:897 3:415
tx_unicast: 0:69 1:0 2:4 3:0
tx_eapol: 0:0 1:0 2:2 3:0
tx_null_frame: 0:0 1:0 2:0 3:0

Patch-dependency : 504-ath12k-add-debugfs-support.patch

Signed-off-by: Sarika Sharma <quic_sarishar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  7 +++++++
 drivers/net/wireless/ath/ath12k/debugfs.c | 14 ++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.c   |  4 +++-
 drivers/net/wireless/ath/ath12k/dp_tx.c   | 11 +++++++++--
 drivers/net/wireless/ath/ath12k/wmi.c     |  2 ++
 5 files changed, 35 insertions(+), 3 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1314,7 +1314,9 @@ struct ath12k_soc_dp_stats {
 	u32 null_tx_complete[MAX_TCL_RING];
 	u32 reo_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
 	u32 fast_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
-	u32 non_fast_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
+	u32 non_fast_unicast_rx[DP_REO_DST_RING_MAX][ATH12K_MAX_SOCS];
+	u32 non_fast_mcast_rx[DP_REO_DST_RING_MAX][ATH12K_MAX_SOCS];
+	u32 eapol_rx[DP_REO_DST_RING_MAX][ATH12K_MAX_SOCS];
 	u32 rx_wbm_rel_source[HAL_WBM_REL_SRC_MODULE_MAX] [ATH12K_MAX_SOCS];
 
 	struct ath12k_soc_dp_tx_err_stats tx_err;
@@ -1323,6 +1325,12 @@ struct ath12k_soc_dp_stats {
 	u32 first_and_last_msdu_bit_miss;
 	u32 reo_excep_msdu_buf_type;
 	u32 free_excess_alloc_skb;
+	u32 tx_mcast[MAX_TCL_RING];
+	u32 tx_unicast[MAX_TCL_RING];
+	u32 tx_eapol[MAX_TCL_RING];
+	u32 tx_null_frame[MAX_TCL_RING];
+	u32 rx_pkt_null_frame_dropped;
+	u32 rx_pkt_null_frame_handled;
 };
 
 struct ath12k_reg_freq {
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1846,8 +1846,10 @@ static ssize_t ath12k_debugfs_dump_soc_d
 	struct ath12k_base *ab = file->private_data;
 	struct ath12k_soc_dp_stats *soc_stats = &ab->soc_stats;
 	struct ath12k *ar;
-	int len = 0, i, retval;
+	int len = 0, i, retval, j;
 	const int size = 4096;
+	int tx_enqueued[DP_TCL_NUM_RING_MAX];
+	int non_fast_rx[DP_REO_DST_RING_MAX][ATH12K_MAX_SOCS];
 	static const char *rxdma_err[HAL_REO_ENTR_RING_RXDMA_ECODE_MAX] = {
 			"Overflow", "MPDU len", "FCS", "Decrypt", "TKIP MIC",
 			"Unencrypt", "MSDU len", "MSDU limit", "WiFi parse",
@@ -1868,6 +1870,17 @@ static ssize_t ath12k_debugfs_dump_soc_d
 	if (!buf)
 		return -ENOMEM;
 
+	for (i = 0; i < DP_TCL_NUM_RING_MAX; i++)
+		tx_enqueued[i] = soc_stats->tx_mcast[i] + soc_stats->tx_unicast[i] +
+				 soc_stats->tx_eapol[i] + soc_stats->tx_null_frame[i];
+
+	for (i = 0; i < DP_REO_DST_RING_MAX; i++) {
+		for (j = 0; j < ATH12K_MAX_SOCS; j++)
+			non_fast_rx[i][j] = soc_stats->non_fast_unicast_rx[i][j] +
+					    soc_stats->non_fast_mcast_rx[i][j] +
+					    soc_stats->eapol_rx[i][j];
+	}
+
 	len += scnprintf(buf + len, size - len, "SOC RX STATS:\n\n");
 	len += scnprintf(buf + len, size - len, "err ring pkts: %u\n",
 			 soc_stats->err_ring_pkts);
@@ -1977,10 +1990,10 @@ static ssize_t ath12k_debugfs_dump_soc_d
 
 	len += scnprintf(buf + len, size - len,
 			"\ntx_enqueued: 0:%u 1:%u 2:%u 3:%u\n",
-			soc_stats->tx_enqueued[0],
-			soc_stats->tx_enqueued[1],
-			soc_stats->tx_enqueued[2],
-			soc_stats->tx_enqueued[3]);
+			tx_enqueued[0],
+			tx_enqueued[1],
+			tx_enqueued[2],
+			tx_enqueued[3]);
 
 	len += scnprintf(buf + len, size - len,
 			 "\nTx Peers Not Present: %d\n",
@@ -2036,9 +2049,40 @@ static ssize_t ath12k_debugfs_dump_soc_d
 		len += scnprintf(buf + len, size - len,
 				 "Ring%d: 0:%u\t1:%u\t2:%u\n",
 				 i + 1,
-				 soc_stats->non_fast_rx[i][0],
-				 soc_stats->non_fast_rx[i][1],
-				 soc_stats->non_fast_rx[i][2]);
+				 non_fast_rx[i][0],
+				 non_fast_rx[i][1],
+				 non_fast_rx[i][2]);
+
+	len += scnprintf(buf + len, size - len, "\nMcast Non-Fast Rx:\n");
+	for (i = 0; i < DP_REO_DST_RING_MAX; i++)
+		len += scnprintf(buf + len, size - len,
+				 "Ring%d: 0:%u\t1:%u\t2:%u\n",
+				 i + 1,
+				 soc_stats->non_fast_mcast_rx[i][0],
+				 soc_stats->non_fast_mcast_rx[i][1],
+				 soc_stats->non_fast_mcast_rx[i][2]);
+
+	len += scnprintf(buf + len, size - len, "\nUnicast Non-Fast Rx:\n");
+	for (i = 0; i < DP_REO_DST_RING_MAX; i++)
+		len += scnprintf(buf + len, size - len,
+				 "Ring%d: 0:%u\t1:%u\t2:%u\n",
+				 i + 1,
+				 soc_stats->non_fast_unicast_rx[i][0],
+				 soc_stats->non_fast_unicast_rx[i][1],
+				 soc_stats->non_fast_unicast_rx[i][2]);
+
+	len += scnprintf(buf + len, size - len, "\nEapol Rx:\n");
+	for (i = 0; i < DP_REO_DST_RING_MAX; i++)
+		len += scnprintf(buf + len, size - len,
+				 "Ring%d: 0:%u\t1:%u\t2:%u\n",
+				 i + 1,
+				 soc_stats->eapol_rx[i][0],
+				 soc_stats->eapol_rx[i][1],
+				 soc_stats->eapol_rx[i][2]);
+
+	len += scnprintf(buf + len, size - len, "\nNull frame Rx: %u Rx dropped: %u\n",
+			 soc_stats->rx_pkt_null_frame_handled,
+			 soc_stats->rx_pkt_null_frame_dropped);
 
 	len += scnprintf(buf + len, size - len, "\nRx WBM REL SRC Errors:\n");
 	for (i = 0; i < HAL_WBM_REL_SRC_MODULE_MAX; i++)
@@ -2057,6 +2101,34 @@ static ssize_t ath12k_debugfs_dump_soc_d
 			 "\nfree excess alloc skb: %u\n",
 			 soc_stats->free_excess_alloc_skb);
 
+	len += scnprintf(buf + len, size - len,
+			"\ntx_multicast: 0:%u 1:%u 2:%u 3:%u",
+			soc_stats->tx_mcast[0],
+			soc_stats->tx_mcast[1],
+			soc_stats->tx_mcast[2],
+			soc_stats->tx_mcast[3]);
+
+	len += scnprintf(buf + len, size - len,
+			"\ntx_unicast: 0:%u 1:%u 2:%u 3:%u",
+			soc_stats->tx_unicast[0],
+			soc_stats->tx_unicast[1],
+			soc_stats->tx_unicast[2],
+			soc_stats->tx_unicast[3]);
+
+	len += scnprintf(buf + len, size - len,
+			"\ntx_eapol: 0:%u 1:%u 2:%u 3:%u",
+			soc_stats->tx_eapol[0],
+			soc_stats->tx_eapol[1],
+			soc_stats->tx_eapol[2],
+			soc_stats->tx_eapol[3]);
+
+	len += scnprintf(buf + len, size - len,
+			"\ntx_null_frame: 0:%u 1:%u 2:%u 3:%u",
+			soc_stats->tx_null_frame[0],
+			soc_stats->tx_null_frame[1],
+			soc_stats->tx_null_frame[2],
+			soc_stats->tx_null_frame[3]);
+
 	len += ath12k_debugfs_dump_soc_ring_bp_stats(ab, buf + len, size - len);
 
 	if (len > size)
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3367,6 +3367,33 @@ free_out:
 	return ret;
 }
 
+static void ath12k_soc_dp_rx_stats(struct ath12k *ar, struct sk_buff *msdu,
+				   struct ath12k_dp_rx_info *rx_info,
+				   int ring_id)
+{
+	struct ieee80211_hdr *hdr;
+	struct ath12k_base *ab = ar->ab;
+	struct ath12k_dp_rx_rfc1042_hdr *llc;
+	struct ath12k_skb_rxcb *rxcb = ATH12K_SKB_RXCB(msdu);
+	struct hal_rx_desc *rx_desc = (struct hal_rx_desc *)msdu->data;
+	size_t hdr_len;
+
+	if (ab->hw_params->hal_ops->rx_desc_is_da_mcbc(rx_desc)) {
+		ab->soc_stats.non_fast_mcast_rx[ring_id][ar->ab->chip_id]++;
+	} else if (rx_info->decap_type == DP_RX_DECAP_TYPE_NATIVE_WIFI) {
+		hdr = (struct ieee80211_hdr *)msdu->data;
+		hdr_len = ieee80211_hdrlen(hdr->frame_control);
+		llc = (struct ath12k_dp_rx_rfc1042_hdr *)(msdu->data + hdr_len);
+		if (llc->snap_type == cpu_to_be16(ETH_P_PAE))
+			ab->soc_stats.eapol_rx[ring_id][ar->ab->chip_id]++;
+	} else if (rx_info->decap_type == DP_RX_DECAP_TYPE_ETHERNET2_DIX &&
+		   rxcb->is_eapol) {
+			ab->soc_stats.eapol_rx[ring_id][ar->ab->chip_id]++;
+	} else {
+		ab->soc_stats.non_fast_unicast_rx[ring_id][ar->ab->chip_id]++;
+	}
+}
+
 static void ath12k_dp_rx_process_received_packets(struct ath12k_base *ab,
 						  struct napi_struct *napi,
 						  struct sk_buff_head *msdu_list,
@@ -3431,7 +3458,8 @@ static void ath12k_dp_rx_process_receive
 		}
 
 		if (!fast_rx) {
-			ab->soc_stats.non_fast_rx[ring_id][ar->ab->chip_id]++;
+			if (!ab->stats_disable)
+				ath12k_soc_dp_rx_stats(ar, msdu, &rx_info, ring_id);
 			ath12k_dp_rx_deliver_msdu(ar, napi, msdu, &rx_info);
 		} else {
 			ab->soc_stats.fast_rx[ring_id][ar->ab->chip_id]++;
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -370,7 +370,7 @@ int ath12k_dp_tx_direct(struct ath12k_li
 		goto fail_remove_tx_buf;
 	}
 
-	ab->soc_stats.tx_enqueued[ring_id]++;
+	ab->soc_stats.tx_unicast[ring_id]++;
 
 	memcpy(hal_tcl_desc, &tcl_desc, sizeof(tcl_desc));
 	dsb(st);
@@ -392,7 +392,7 @@ EXPORT_SYMBOL(ath12k_dp_tx_direct);
 
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 		 struct ath12k_sta *ahsta, struct sk_buff *skb,
-		 bool gsn_valid, int mcbc_gsn)
+		 bool gsn_valid, int mcbc_gsn, bool is_mcast)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_base *ab = ar->ab;
@@ -524,9 +524,9 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 
 	switch (ti.encap_type) {
 	case HAL_TCL_ENCAP_TYPE_NATIVE_WIFI:
+		is_null = ieee80211_is_nullfunc(hdr->frame_control);
 		if ((ahvif->vif->offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED) &&
-		    (skb->protocol == cpu_to_be16(ETH_P_PAE) ||
-		     (is_null = ieee80211_is_nullfunc(hdr->frame_control))))
+		    (skb->protocol == cpu_to_be16(ETH_P_PAE) || is_null))
 			is_diff_encap = true;
 		else
 			ath12k_dp_tx_encap_nwifi(skb);
@@ -657,7 +657,15 @@ skip_htt_meta:
 		goto fail_remove_ext_desc;
 	}
 
-	ab->soc_stats.tx_enqueued[ti.ring_id]++;
+	if (is_mcast)
+		ab->soc_stats.tx_mcast[ti.ring_id]++;
+	else if (skb->protocol == cpu_to_be16(ETH_P_PAE))
+		ab->soc_stats.tx_eapol[ti.ring_id]++;
+	else if (is_null)
+		ab->soc_stats.tx_null_frame[ti.ring_id]++;
+	else
+		ab->soc_stats.tx_unicast[ti.ring_id]++;
+
 	arvif->link_stats.tx_encap_type[ti.encap_type]++;
 	arvif->link_stats.tx_encrypt_type[ti.encrypt_type]++;
 	arvif->link_stats.tx_desc_type[ti.type]++;
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -12408,6 +12408,7 @@ static void ath12k_mgmt_rx_event(struct
 
 	if (ieee80211_is_data(hdr->frame_control) && !is_4addr_null_pkt) {
 		dev_kfree_skb(skb);
+		ab->soc_stats.rx_pkt_null_frame_dropped++;
 		goto exit;
 	}
 	if (is_4addr_null_pkt) {
@@ -12426,6 +12427,7 @@ static void ath12k_mgmt_rx_event(struct
 			status->link_id = peer->link_id;
 		}
 		spin_unlock_bh(&ab->base_lock);
+		ab->soc_stats.rx_pkt_null_frame_handled++;
 		ieee80211_rx_napi(ar->ah->hw, pubsta, skb, NULL);
 		goto exit;
 	} else {
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10109,7 +10109,7 @@ static void ath12k_mac_op_tx(struct ieee
 			return;
 		}
 
-		ret = ath12k_dp_tx(ar, arvif, ahsta, skb, false, 0);
+		ret = ath12k_dp_tx(ar, arvif, ahsta, skb, false, 0, is_mcast);
 		if (unlikely(ret)) {
 			if (ret == -ENOMEM)
 				ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
@@ -10197,7 +10197,7 @@ static void ath12k_mac_op_tx(struct ieee
 			spin_unlock_bh(&tmp_ar->ab->base_lock);
 skip_peer_find:
 			ret = ath12k_dp_tx(tmp_ar, tmp_arvif, ahsta,
-					   msdu_copied, true, mcbc_gsn);
+					   msdu_copied, true, mcbc_gsn, is_mcast);
 
 			if (unlikely(ret)) {
 				if (ret == -ENOMEM)
--- a/drivers/net/wireless/ath/ath12k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.h
@@ -212,7 +212,7 @@ void ath12k_dp_tx_update_txcompl(struct
 int ath12k_dp_tx_htt_h2t_ver_req_msg(struct ath12k_base *ab);
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 		 struct ath12k_sta *ahsta, struct sk_buff *skb,
-		 bool gsn_valid, int mcbc_gsn);
+		 bool gsn_valid, int mcbc_gsn, bool is_mcast);
 int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 				    int tx_comp_budget);
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
