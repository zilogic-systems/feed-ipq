From 3af31433873dd3ad1f17358863c0a5ab737bd14a Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Wed, 10 Jul 2024 08:20:54 +0530
Subject: [PATCH 1/3] wifi: ath12k: n-link bridge vdev basic handling

When 4 QCN9274 devices are connected, an MLD combination with
diagonally opposite devices is not possible due to a hardware
limitation, that is a device can communicate only with its two
adjacent devices.

To address this issue, a special vdev, hereby called as bridge vdev,
will be created in the device, which is adjacent to the diagonally
opposite devices. As the name suggest this device will act as a bridge
between the two diagonally opposite devices for MLO related
communications.

The changes in the patch are as follows:
	1) In addition to the already available vdevs per radio,
	   8 bridge vdevs per radio are supported. The "free_vdev_map"
	   which is maintained in "ath12k_base" is extended to support
	   this additional 8 bridge vdevs.

	2) A new enum value "WMI_VDEV_SUBTYPE_BRIDGE" denoting the
	   bridge vdev is added in the "enum wmi_vdev_subtype".
	   Thus in an MLD, two different vdev subtype can exist.
	   So moving "vdev_subtype" from "ath12k_vif" to
	   "ath12k_link_vif".

	3) A new variable in "ath12k" structure, "num_created_bridge_vdevs"
	   will be used to track the bridge vdevs creation count,
	   meanwhile the "num_created_vdevs" which is already available
	   will count the normal vdevs creation count.

	4) Similar to normal vdev the bridge vdev will also have an
	   arvif and self peer created. The arvif will also be kept in the
	   same "ahvif->link" array and the link_id used for bridge vdev
	   will be in the range of "ATH12K_BRIDGE_LINK_MIN" and
	   "ATH12K_BRIDGE_LINK_MAX". This "ATH12K_BRIDGE_LINK_MIN"
	   continues after the "ATH12K_DEFAULT_SCAN_LINK" value.

Patch-dependency:
	955-wifi-ath12k-Add-support-for-four-link-MLO-in-AP-MLD.patch

Tag: N_LINK_MLO

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c    | 19 +++++++--
 drivers/net/wireless/ath/ath12k/core.h    |  4 +-
 drivers/net/wireless/ath/ath12k/debugfs.c |  8 +++-
 drivers/net/wireless/ath/ath12k/dp.c      |  2 +-
 drivers/net/wireless/ath/ath12k/hw.h      |  5 +++
 drivers/net/wireless/ath/ath12k/mac.c     | 51 ++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/mac.h     |  9 +++-
 drivers/net/wireless/ath/ath12k/ppe.c     |  4 +-
 drivers/net/wireless/ath/ath12k/vendor.c  |  2 +-
 drivers/net/wireless/ath/ath12k/wmi.c     |  5 ++-
 drivers/net/wireless/ath/ath12k/wmi.h     |  1 +
 11 files changed, 86 insertions(+), 24 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2123,9 +2123,72 @@ static int ath12k_core_rpd_atomic_ssr_no
 	return NOTIFY_OK;
 }
 
+u8 ath12k_core_get_total_num_vdevs(struct ath12k_base *ab)
+{
+	if (ab->ag && ab->ag->num_chip >= ATH12K_MIN_NUM_DEVICES_NLINK)
+		return TARGET_NUM_VDEVS + TARGET_NUM_BRIDGE_VDEVS;
+
+	return TARGET_NUM_VDEVS;
+}
+
+bool ath12k_core_is_vdev_limit_reached(struct ath12k *ar,
+				       bool bridge_vdev)
+{
+	struct ath12k_base *ab;
+	u32 num_created_vdevs;
+	u8 total_num_vdevs, num_created_bridge_vdevs;
+	bool ret = false;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	ab = ar->ab;
+	total_num_vdevs = ath12k_core_get_total_num_vdevs(ab);
+	num_created_vdevs = ar->num_created_vdevs;
+	num_created_bridge_vdevs = ar->num_created_bridge_vdevs;
+
+	if (total_num_vdevs == ATH12K_MAX_NUM_VDEVS_NLINK) {
+		if ((num_created_vdevs + num_created_bridge_vdevs) >
+		    (ATH12K_MAX_NUM_VDEVS_NLINK - 1)) {
+			ath12k_err(ab, "failed to create vdev, reached total max vdev limit %d[%d]\n",
+				   num_created_vdevs + num_created_bridge_vdevs,
+				   ATH12K_MAX_NUM_VDEVS_NLINK);
+			ret = true;
+			goto exit;
+		}
+
+		if (!bridge_vdev &&
+		    num_created_vdevs > (TARGET_NUM_VDEVS - 1)) {
+			ath12k_err(ab, "failed to create vdev, reached max vdev limit %d[%d]\n",
+				   num_created_vdevs,
+				   TARGET_NUM_VDEVS);
+			ret = true;
+			goto exit;
+		}
+
+		if (bridge_vdev &&
+		    num_created_bridge_vdevs > (TARGET_NUM_BRIDGE_VDEVS - 1)) {
+			ath12k_warn(ab, "failed to create bridge vdev, reached max bridge vdev limit: %d[%d]\n",
+				    num_created_bridge_vdevs, TARGET_NUM_BRIDGE_VDEVS);
+			ret = true;
+			goto exit;
+		}
+		goto exit;
+	}
+
+	if (num_created_vdevs > (TARGET_NUM_VDEVS - 1)) {
+		ath12k_err(ab, "failed to create vdev, reached max vdev limit %d [%d]\n",
+			   num_created_vdevs, TARGET_NUM_VDEVS);
+		ret = true;
+	}
+
+exit:
+	return ret;
+}
+
 static int ath12k_core_reconfigure_on_crash(struct ath12k_base *ab)
 {
 	int ret;
+	u8 total_vdevs;
 
 	mutex_lock(&ab->core_lock);
 	ath12k_core_pdev_deinit(ab);
@@ -2140,7 +2203,8 @@ static int ath12k_core_reconfigure_on_cr
 	ath12k_dp_umac_reset_deinit(ab);
 	ath12k_umac_reset_completion(ab);
 
-	ab->free_vdev_map = (1LL << (ab->num_radios * TARGET_NUM_VDEVS)) - 1;
+	total_vdevs = ath12k_core_get_total_num_vdevs(ab);
+	ab->free_vdev_map = (1LL << (ab->num_radios * total_vdevs)) - 1;
 	ab->free_vdev_stats_id_map = 0;
 	ab->num_db_cap = 0;
 
@@ -2379,6 +2443,7 @@ void ath12k_core_halt(struct ath12k *ar)
 	lockdep_assert_held(&ar->conf_mutex);
 
 	ar->num_created_vdevs = 0;
+	ar->num_created_bridge_vdevs = 0;
 	ar->allocated_vdev_map = 0;
 
 	/* Send low ack disassoc to hostapd to free the peers from host
@@ -2836,12 +2901,15 @@ static int ath12k_mlo_core_recovery_reco
 	struct ieee80211_chanctx_conf *ctx = &arvif->chanctx;
 	int ret = -1;
 	u8 link_id = link_conf->link_id;
+	bool bridge_vdev;
 
+	bridge_vdev = ath12k_mac_is_bridge_vdev(arvif);
 	ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-		   "Recovering: link_id:%d addr %pM type:%d\n",
-		   link_id, arvif->addr, vif->type);
+		   "Recovering: link_id:%d addr %pM type:%d subtype:%d\n",
+		   link_id, arvif->addr, vif->type, arvif->vdev_subtype);
 
 	mutex_lock(&ah->conf_mutex);
+	mutex_lock(&ar->conf_mutex);
 
 	if (vif->type == NL80211_IFTYPE_AP &&
 	    ar->num_peers > (ar->max_num_peers - 1)) {
@@ -2850,14 +2918,8 @@ static int ath12k_mlo_core_recovery_reco
 		goto exit;
 	}
 
-	if (ar->num_created_vdevs > (TARGET_NUM_VDEVS - 1)) {
-		ath12k_err(ab, "failed to create vdev, reached max vdev limit %d[%d]\n",
-			   ar->num_created_vdevs,
-			   TARGET_NUM_VDEVS);
+	if (ath12k_core_is_vdev_limit_reached(ar, bridge_vdev))
 		goto exit;
-	}
-
-	mutex_lock(&ar->conf_mutex);
 
 	ret = ath12k_mac_vdev_create(ar, arvif);
 	if (!ret)
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -466,7 +466,7 @@ struct ath12k_link_vif {
 	struct ath12k_peer_ch_width_switch_data *peer_ch_width_switch_data;
 	struct ieee80211_key_conf *keys[WMI_MAX_KEY_INDEX + 1];
 	struct ath12k_prb_resp_tmpl_ml_info ml_info;
-
+	enum wmi_vdev_subtype vdev_subtype;
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	int ppe_vp_profile_idx;
 	/* Add per link DS specific information here */
@@ -477,7 +477,6 @@ struct ath12k_link_vif {
 
 struct ath12k_vif {
 	enum wmi_vdev_type vdev_type;
-	enum wmi_vdev_subtype vdev_subtype;
 	struct ieee80211_vif *vif;
 	struct ath12k_hw *ah;
 	bool rsnie_present;
@@ -1026,6 +1025,7 @@ struct ath12k {
 	int max_num_peers;
 	u32 num_started_vdevs;
 	u32 num_created_vdevs;
+	u8 num_created_bridge_vdevs;
 	unsigned long long allocated_vdev_map;
 
 	struct idr txmgmt_idr;
@@ -1854,6 +1854,8 @@ int ath12k_dp_umac_reset_init(struct ath
 void ath12k_dp_umac_reset_deinit(struct ath12k_base *ab);
 void ath12k_umac_reset_completion(struct ath12k_base *ab);
 void ath12k_umac_reset_notify_pre_reset_done(struct ath12k_base *ab);
+u8 ath12k_core_get_total_num_vdevs(struct ath12k_base *ab);
+bool ath12k_core_is_vdev_limit_reached(struct ath12k *ar, bool bridge_vdev);
 
 static inline bool ath12k_hw_group_recovery_in_progress(const struct ath12k_hw_group *ag)
 {
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -4549,7 +4549,8 @@ static ssize_t ath12k_dump_mgmt_stats(st
 		if (!arvif)
 			break;
 
-		if (arvif->ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR)
+		if (arvif->ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR ||
+		    ath12k_mac_is_bridge_vdev(arvif))
 			continue;
 		mgmt_stats = &arvif->ahvif->mgmt_stats;
 		len += scnprintf(buf + len, size - len, "MGMT frame stats for vdev %u :\n", arvif->vdev_id);
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -91,7 +91,7 @@ int ath12k_dp_peer_default_route_setup(s
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA ||
 	    (ahvif->vdev_type != WMI_VDEV_TYPE_MONITOR &&
 	    !(ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
-	    ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S)))
+	    arvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S)))
 		ath12k_dp_peer_ppeds_route_setup(ar, arvif, arsta);
 #endif
 
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -20,13 +20,21 @@ struct ath12k_cfr_peer_tx_param;
 #ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
 /* Num VDEVS per radio */
 #define TARGET_NUM_VDEVS	(8 + 1)
+/* Num of Bridge vdevs per radio */
+#define TARGET_NUM_BRIDGE_VDEVS	0
+#define ATH12K_MAX_NUM_VDEVS_NLINK	TARGET_NUM_BRIDGE_VDEVS
 #define ATH12K_QMI_TARGET_MEM_MODE	ATH12K_QMI_TARGET_MEM_MODE_512M
 #else
 /* Num VDEVS per radio */
 #define TARGET_NUM_VDEVS	(16 + 1)
+/* Num of Bridge vdevs per radio */
+#define TARGET_NUM_BRIDGE_VDEVS	8
+#define ATH12K_MAX_NUM_VDEVS_NLINK	TARGET_NUM_VDEVS + \
+					TARGET_NUM_BRIDGE_VDEVS
 #define ATH12K_QMI_TARGET_MEM_MODE	ATH12K_QMI_TARGET_MEM_MODE_DEFAULT
 #endif
 
+/* ToDo: do we need to include self peer of bridge vdev also here? */
 #define TARGET_NUM_PEERS_PDEV	(TARGET_NUM_STATIONS + TARGET_NUM_VDEVS)
 
 /* Num of peers for Single Radio mode */
@@ -43,6 +51,7 @@ struct ath12k_cfr_peer_tx_param;
 
 #define TARGET_NUM_PEERS(x)	TARGET_NUM_PEERS_##x
 #define TARGET_NUM_PEER_KEYS	2
+/* Do we need to change the below */
 #define TARGET_NUM_TIDS(x)	(2 * TARGET_NUM_PEERS(x) + \
 				 4 * TARGET_NUM_VDEVS + 8)
 
@@ -111,7 +120,7 @@ struct ath12k_cfr_peer_tx_param;
 #define ATH12K_UMAC_RESET_IPC_QCN6432	7
 
 #define ATH12K_MAX_SOCS 4
-#define ATH12K_NLINK_SUPP_DEVICES 4
+#define ATH12K_MIN_NUM_DEVICES_NLINK 4
 
 enum ath12k_hw_rate_cck {
 	ATH12K_HW_RATE_CCK_LP_11M = 0,
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -693,6 +693,13 @@ static u8 ath12k_parse_mpdudensity(u8 mp
 	}
 }
 
+bool ath12k_mac_is_bridge_vdev(struct ath12k_link_vif *arvif)
+{
+	if (arvif->vdev_subtype == WMI_VDEV_SUBTYPE_BRIDGE)
+		return true;
+	return false;
+}
+
 static int ath12k_mac_vif_chan(struct ieee80211_vif *vif,
 			       struct cfg80211_chan_def *def,
 			       u8 link_id)
@@ -5269,11 +5276,14 @@ static int ath12k_mac_vdev_delete(struct
 
 	ar->allocated_vdev_map &= ~(1LL << arvif->vdev_id);
 	ar->ab->free_vdev_stats_id_map &= ~(1LL << arvif->vdev_stats_id);
-	ar->num_created_vdevs--;
+	if (!ath12k_mac_is_bridge_vdev(arvif))
+		ar->num_created_vdevs--;
+	else
+		ar->num_created_bridge_vdevs--;
 	arvif->ahvif->num_vdev_created--;
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_SET(MAC, L1), "mac vdev delete id %d type %d subtype %d map %llx\n",
-		   arvif->vdev_id, ahvif->vdev_type, ahvif->vdev_subtype,
+		   arvif->vdev_id, ahvif->vdev_type, arvif->vdev_subtype,
 		   ar->ab->free_vdev_map);
 clean_up:
 	arvif->is_created = false;
@@ -8366,13 +8376,13 @@ void ath12k_mac_assign_middle_link_id(st
 	 * the middle device link as primary_link_id of sta which is adjacent
 	 * to other two devices.
 	 */
-	if (!(num_devices == ATH12K_NLINK_SUPP_DEVICES &&
+	if (!(num_devices == ATH12K_MIN_NUM_DEVICES_NLINK &&
 	      hweight16(sta->valid_links) == ATH12K_MAX_STA_LINKS)) {
 		/* To-Do: Requirement to set primary link id for no.of devices
 		 * greater than 4 has not yet confirmed. Also, Need to revisit
 		 * here when STA association support extends more than 3.
 		 */
-		if (num_devices > ATH12K_NLINK_SUPP_DEVICES)
+		if (num_devices > ATH12K_MIN_NUM_DEVICES_NLINK)
 			ath12k_err(NULL,
 				   "num devices %d Combination not supported yet\n",
 				   num_devices);
@@ -10763,6 +10773,7 @@ int ath12k_mac_radio_start(struct ath12k
 
 	ar->num_started_vdevs = 0;
 	ar->num_created_vdevs = 0;
+	ar->num_created_bridge_vdevs = 0;
 	ar->num_peers = 0;
 	ar->allocated_vdev_map = 0;
 	ar->chan_tx_pwr = ATH12K_PDEV_TX_POWER_INVALID;
@@ -11144,7 +11155,7 @@ static int ath12k_mac_setup_vdev_create_
 
 	arg->if_id = arvif->vdev_id;
 	arg->type = ahvif->vdev_type;
-	arg->subtype = ahvif->vdev_subtype;
+	arg->subtype = arvif->vdev_subtype;
 	arg->pdev_id = pdev->pdev_id;
 	arg->mbssid_flags = 0;
 	arg->mbssid_tx_vdev_id = 0;
@@ -11403,7 +11414,7 @@ static void ath12k_update_obss_color_not
 	/* Assume it as non-mbssid initially, well overwrite it later.
 	 */
 	arvif->tx_vdev_id = vdev_id;
-	ahvif->vdev_subtype = WMI_VDEV_SUBTYPE_NONE;
+	arvif->vdev_subtype = WMI_VDEV_SUBTYPE_NONE;
 	arvif->ar = ar;
 	arvif->ab = ab;
 	arvif->dp = &ab->dp;
@@ -11416,7 +11427,7 @@ static void ath12k_update_obss_color_not
 		ahvif->vdev_type = WMI_VDEV_TYPE_STA;
 		break;
 	case NL80211_IFTYPE_MESH_POINT:
-		ahvif->vdev_subtype = WMI_VDEV_SUBTYPE_MESH_11S;
+		arvif->vdev_subtype = WMI_VDEV_SUBTYPE_MESH_11S;
 		fallthrough;
 	case NL80211_IFTYPE_AP:
 		ahvif->vdev_type = WMI_VDEV_TYPE_AP;
@@ -11431,7 +11442,7 @@ static void ath12k_update_obss_color_not
 	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_SET(MAC, L1), "mac vdev create id %d type %d subtype %d map %llx\n",
-		   arvif->vdev_id, ahvif->vdev_type, ahvif->vdev_subtype,
+		   arvif->vdev_id, ahvif->vdev_type, arvif->vdev_subtype,
 		   ab->free_vdev_map);
 
 	/* TODO Revisit this sharing of common queues across all ar's */
@@ -11459,7 +11470,10 @@ static void ath12k_update_obss_color_not
 		goto err;
 	}
 
-	ar->num_created_vdevs++;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		ar->num_created_bridge_vdevs++;
+	else
+		ar->num_created_vdevs++;
 	ahvif->num_vdev_created++;
 	arvif->is_created = true;
 	ath12k_dbg(ab, ATH12K_DBG_MAC, "vdev %pM created, vdev_id %d\n",
@@ -11601,7 +11615,10 @@ err_peer_del:
 
 err_vdev_del:
 	ath12k_wmi_vdev_delete(ar, arvif->vdev_id);
-	ar->num_created_vdevs--;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		ar->num_created_bridge_vdevs--;
+	else
+		ar->num_created_vdevs--;
 	arvif->is_created = false;
 	ar->allocated_vdev_map &= ~(1LL << arvif->vdev_id);
 	spin_lock_bh(&ar->ab->base_lock);
@@ -11690,6 +11707,7 @@ static struct ath12k *ath12k_mac_assign_
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct ath12k_link_vif *scan_arvif;
 	int ret;
+	bool bridge_vdev;
 
 	lockdep_assert_held(&ah->conf_mutex);
 
@@ -11728,9 +11746,8 @@ static struct ath12k *ath12k_mac_assign_
 		goto unlock;
 	}
 
-	if (ar->num_created_vdevs > (TARGET_NUM_VDEVS - 1)) {
-		ath12k_warn(ab, "failed to create vdev, reached max vdev limit %d\n",
-			    TARGET_NUM_VDEVS);
+	bridge_vdev = ath12k_mac_is_bridge_vdev(arvif);
+	if (ath12k_core_is_vdev_limit_reached(ar, bridge_vdev)) {
 		ret = -EBUSY;
 		goto unlock;
 	}
@@ -18014,7 +18031,7 @@ int ath12k_mac_allocate(struct ath12k_hw
 	size_t len;
 	int i, j, k, total_radio, num_radios, ret;
 	int mac_id, chip_id;
-	u8 link_id, num_hw;
+	u8 link_id, num_hw, total_vdevs;
 	struct ath12k_pdev *pdev;
 	char *mlo_phy_name;
 
@@ -18117,8 +18134,10 @@ int ath12k_mac_allocate(struct ath12k_hw
 				/* Initialize channel counters frequency value in hertz */
 				ab->cc_freq_hz = 320000;
 
+				total_vdevs = ath12k_core_get_total_num_vdevs(ab);
 				spin_lock_bh(&ab->base_lock);
-				ab->free_vdev_map = (1LL << (ab->num_radios * TARGET_NUM_VDEVS)) - 1;
+				ab->free_vdev_map =
+					(1LL << (ab->num_radios * total_vdevs)) - 1;
 				spin_unlock_bh(&ab->base_lock);
 
 				ab->peer_list = kcalloc(ab->peer_list_size,
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -61,7 +61,18 @@ struct ath12k_latency_params {
  * for driver usage purpose
  */
 #define ATH12K_DEFAULT_SCAN_LINK	IEEE80211_MLD_MAX_NUM_LINKS
-#define ATH12K_NUM_MAX_LINKS		(IEEE80211_MLD_MAX_NUM_LINKS + 1)
+#define ATH12K_MAX_NUM_BRIDGE_LINKS	2
+#define ATH12K_BRIDGE_LINK_MIN		(ATH12K_DEFAULT_SCAN_LINK + 1)
+#define ATH12K_BRIDGE_LINK_MAX		(ATH12K_DEFAULT_SCAN_LINK + \
+					ATH12K_MAX_NUM_BRIDGE_LINKS)
+#define ATH12K_NUM_MAX_LINKS		(ATH12K_DEFAULT_SCAN_LINK + \
+					1 + ATH12K_MAX_NUM_BRIDGE_LINKS)
+#define ATH12K_DEFAULT_SCAN_LINK_MASK	BIT(ATH12K_DEFAULT_SCAN_LINK)
+#define ATH12K_BRIDGE_LINKS_MASK	GENMASK(ATH12K_BRIDGE_LINK_MAX, \
+					ATH12K_BRIDGE_LINK_MIN)
+#define ATH12K_IEEE80211_MLD_MAX_LINKS_MASK	\
+					GENMASK(IEEE80211_MLD_MAX_NUM_LINKS - \
+					1, 0)
 #define ATH12K_MAX_STA_LINKS		3
 
 /* number of failed packets (20 packets with 16 sw reties each) */
@@ -218,4 +229,5 @@ void ath12k_bss_disassoc(struct ath12k *
 int ath12k_mac_op_set_scs(struct wireless_dev *wdev, struct ath12k_latency_params *params);
 
 void ath12k_agile_cac_abort_work(struct work_struct *work);
+bool ath12k_mac_is_bridge_vdev(struct ath12k_link_vif *arvif);
 #endif
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1354,9 +1354,9 @@ void ath12k_vif_free_vp(struct ath12k_vi
 	ppe_vp_free(ahvif->ppe_vp_num);
 
 	ath12k_info(NULL,
-		    "Destroyed PPE VP port no:%d for dev:%s vdev type %d subtype %d\n",
+		    "Destroyed PPE VP port no:%d for dev:%s vdev type %d\n",
 		    ahvif->ppe_vp_num, wdev->netdev->name,
-		    ahvif->vdev_type, ahvif->vdev_subtype);
+		    ahvif->vdev_type);
 	ahvif->ppe_vp_num = ATH12K_INVALID_PPE_VP_NUM;
 }
 
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -246,7 +246,7 @@ void ath12k_vendor_wlan_intf_stats(struc
 		if (arvif->ahvif->vdev_type != WMI_VDEV_TYPE_AP) {
 			disable_wlan_intf = true;
 			break;
-		} else if (arvif->ahvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S) {
+		} else if (arvif->vdev_subtype == WMI_VDEV_SUBTYPE_MESH_11S) {
 			disable_wlan_intf = true;
 			break;
 		}
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -244,8 +244,10 @@ void ath12k_wmi_init_qcn9274(struct ath1
 			     struct ath12k_wmi_resource_config_arg *config)
 {
 	struct ath12k_hw_group *ag = ab->ag;
+	u8 total_vdevs;
 
-	config->num_vdevs = ab->num_radios * TARGET_NUM_VDEVS;
+	total_vdevs = ath12k_core_get_total_num_vdevs(ab);
+	config->num_vdevs = ab->num_radios * total_vdevs;
 
 	if (ab->num_radios == 2) {
 		config->num_peers = TARGET_NUM_PEERS(DBS);
@@ -310,8 +312,10 @@ void ath12k_wmi_init_ipq5332(struct ath1
 			     struct ath12k_wmi_resource_config_arg *config)
 {
 	struct ath12k_hw_group *ag = ab->ag;
+	u8 total_vdevs;
 
-	config->num_vdevs = ab->num_radios * TARGET_NUM_VDEVS;
+	total_vdevs = ath12k_core_get_total_num_vdevs(ab);
+	config->num_vdevs = ab->num_radios * total_vdevs;
 
 	if (ab->num_radios == 2) {
 		config->num_peers = TARGET_NUM_PEERS(DBS);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -6878,6 +6878,7 @@ enum wmi_vdev_subtype {
 	WMI_VDEV_SUBTYPE_PROXY_STA,
 	WMI_VDEV_SUBTYPE_MESH_NON_11S,
 	WMI_VDEV_SUBTYPE_MESH_11S,
+	WMI_VDEV_SUBTYPE_BRIDGE = 8,
 };
 
 enum wmi_sta_powersave_param {
