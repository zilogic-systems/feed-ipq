From 872e7871b9235376a37318dabdc2d9f6ce9225aa Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Thu, 1 Aug 2024 12:05:47 +0530
Subject: [PATCH] QSDK: ath12k: add ppe vp support for mesh

Enable PPE VP support for mesh.
Enable FSE flow support for mesh.

Also add support for ppe vp in ap and sta mode when stats is enabled.

Patch-dependency: 957-QSDK-ath12k-add-support-to-enable-ppe-vp-per-vif.patch

Throughput test config :
Band and Bandwidth : 6GHz band with 320MHz
Interface mode : mesh

With this patch and 920-QSDK-mac80211-add-ppe-vp-support-for-mesh.patch
patch, the average throughput for 5 tries is 5103Mbps.

Without this patch and 961-QSDK-ath12k-add-ppe-vp-supprt-for-mesh.patch patch,
the average throughput for 5 tries is 5123Mbps.

Idle cpu %:
Without the patches :	all	core0	core1	core2	core3
			37.8	12.2	15.2	15.9	99.01

With the patches :	all	core0	core1	core2	core3
			40.22	17.5	14.2	20.4	100

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 18 ++++++++++++++++++
 drivers/net/wireless/ath/ath12k/fse.h   |  4 ++++
 drivers/net/wireless/ath/ath12k/mac.c   |  2 +-
 drivers/net/wireless/ath/ath12k/peer.c  |  1 +
 drivers/net/wireless/ath/ath12k/peer.h  |  1 +
 5 files changed, 25 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2889,6 +2889,21 @@ ath12k_dp_rx_update_peer_dependent_param
 	return enctype;
 }
 
+static inline void ath12k_dp_rx_update_fse_info(struct ath12k_base *ab,
+						struct ath12k_peer *peer,
+						struct sk_buff *msdu,
+						struct ath12k_dp_rx_info *rx_info,
+						struct hal_rx_desc *rx_desc)
+{
+	if (peer->ppe_vp_num > 0) {
+		ab->hw_params->hal_ops->rx_desc_get_fse_info(rx_desc, rx_info);
+		if (!rx_info->flow_idx_timeout && !rx_info->flow_idx_invalid &&
+		    rx_info->flow_metadata != ATH12K_RX_FSE_FLOW_MATCH_SFE)
+			msdu->mark = u32_encode_bits(ATH12K_FSE_MAGIC_NUM, ATH12K_FSE_MAGIC_NUM_MASK) |
+				     u32_encode_bits(rx_info->flow_metadata, ATH12K_PPE_VP_NUM);
+	}
+}
+
 static void ath12k_dp_rx_h_mpdu(struct ath12k *ar,
 				struct sk_buff *msdu,
 				struct hal_rx_desc *rx_desc,
@@ -2948,6 +2963,8 @@ static void ath12k_dp_rx_h_mpdu(struct a
 		enctype =
 			ath12k_dp_rx_update_peer_dependent_param(ar, msdu,
 								 rx_info, peer);
+
+		ath12k_dp_rx_update_fse_info(ab, peer, msdu, rx_info, rx_desc);
 	} else {
 		spin_lock_bh(&ab->base_lock);
 
@@ -2956,6 +2973,7 @@ static void ath12k_dp_rx_h_mpdu(struct a
 			enctype =
 				ath12k_dp_rx_update_peer_dependent_param(ar, msdu,
 									 rx_info, peer);
+			ath12k_dp_rx_update_fse_info(ab, peer, msdu, rx_info, rx_desc);
 		} else {
 			enctype = HAL_ENCRYPT_TYPE_OPEN;
 		}
--- a/drivers/net/wireless/ath/ath12k/fse.h
+++ b/drivers/net/wireless/ath/ath12k/fse.h
@@ -10,6 +10,10 @@
 
 #define ATH12K_RX_FSE_FLOW_MATCH_SFE 0xAAAA
 
+#define ATH12K_FSE_MAGIC_NUM      0xAA
+#define ATH12K_FSE_MAGIC_NUM_MASK GENMASK(7,0)
+#define ATH12K_PPE_VP_NUM         GENMASK(15, 8)
+
 enum fse_operation {
 	FSE_RULE_ADD,
 	FSE_RULE_DELETE,
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11967,7 +11967,7 @@ static int ath12k_mac_op_add_interface(s
 	}
 
 	if (vif->type == NL80211_IFTYPE_MESH_POINT &&
-	    ppe_vp_type != PPE_VP_USER_TYPE_PASSIVE) {
+	    ppe_vp_type == PPE_VP_USER_TYPE_DS) {
 		ppe_vp_type = PPE_VP_USER_TYPE_PASSIVE;
 	}
 	if (ppe_vp_type != ATH12K_INVALID_PPE_VP_TYPE) {
