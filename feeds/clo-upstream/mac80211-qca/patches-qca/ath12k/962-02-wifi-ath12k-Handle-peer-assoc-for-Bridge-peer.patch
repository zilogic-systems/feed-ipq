From c03b193c60be3128d443b23794536c5e4bb23041 Mon Sep 17 00:00:00 2001
From: Vignesh C <quic_vignc@quicinc.com>
Date: Mon, 15 Jul 2024 00:22:22 +0530
Subject: [PATCH 2/2] wifi: ath12k: Handle peer assoc for Bridge peer

For peer assoc, link_sta is mandatory to calculate various
sta capabilities (HT,VHT, HE, VHT)  which needs to be sent as
part of WMI cmd.

Allocate link_sta and fill the mandatory capabilities of sta. Free
the allocated memory once peer assoc for bridge peer is sent.
Firmware requirement is to send all the capabilities for bridge
peer like normal peer on peer assoc. Get the capabilities for bridge
peer from its own radio capability.

Patch-dependency:
	962-01-wifi-ath12k-Add-Basic-support-for-Bridge-Peer-creati.patch

Tag: N_LINK_MLO

Signed-off-by: Vignesh C <quic_vignc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 386 ++++++++++++++++++--------
 drivers/net/wireless/ath/ath12k/wmi.c |  12 +-
 drivers/net/wireless/ath/ath12k/wmi.h |   2 +
 3 files changed, 279 insertions(+), 121 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -718,6 +718,20 @@ static struct ath12k *ath12k_get_ar_by_l
 	return NULL;
 }
 
+enum nl80211_band ath12k_get_band_based_on_freq(u32 freq)
+{
+	enum nl80211_band band;
+
+	if (freq < ATH12K_MIN_5G_FREQ)
+		band = NL80211_BAND_2GHZ;
+	else if (freq < ATH12K_MIN_6G_FREQ)
+		band = NL80211_BAND_5GHZ;
+	else
+		band = NL80211_BAND_6GHZ;
+
+	return band;
+}
+
 static int ath12k_mac_vif_chan(struct ieee80211_vif *vif,
 			       struct cfg80211_chan_def *def,
 			       u8 link_id)
@@ -2344,17 +2358,21 @@ static void ath12k_peer_assoc_h_crypto(s
 
 	info = ath12k_get_link_bss_conf(arvif);
 
-	if (!info) {
+	if (!ath12k_mac_is_bridge_vdev(arvif) && !info) {
 		ath12k_warn(ar->ab, "unable to access bss link conf for peer assoc send\n");
 		return;
 	}
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
 	hw = ar->ah->hw;
-	bss = cfg80211_get_bss(hw->wiphy, def.chan, info->bssid, NULL, 0,
-			       IEEE80211_BSS_TYPE_ANY, IEEE80211_PRIVACY_ANY);
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		bss = NULL;
+	else
+		bss = cfg80211_get_bss(hw->wiphy, def.chan, info->bssid, NULL, 0,
+				       IEEE80211_BSS_TYPE_ANY, IEEE80211_PRIVACY_ANY);
 
 	if (ahvif->rsnie_present || ahvif->wpaie_present) {
 		if (sta->ft_auth)
@@ -2493,7 +2511,8 @@ ath12k_get_radio_max_bw_caps(struct ath1
 static void ath12k_peer_assoc_h_rates(struct ath12k *ar,
 				      struct ath12k_link_vif *arvif,
 				      struct ath12k_link_sta *arsta,
-				      struct ath12k_wmi_peer_assoc_arg *arg)
+				      struct ath12k_wmi_peer_assoc_arg *arg,
+				      struct ieee80211_link_sta *link_sta)
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct wmi_rate_set_arg *rateset = &arg->peer_legacy_rates;
@@ -2507,23 +2526,25 @@ static void ath12k_peer_assoc_h_rates(st
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
-	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
-	link_sta = ath12k_get_link_sta(arsta);
-
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc rate set\n");
 		return;
 	}
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	sband = ar->ah->hw->wiphy->bands[band];
 	ratemask = link_sta->supp_rates[band];
 	ratemask &= arvif->bitrate_mask.control[band].legacy;
@@ -2568,7 +2589,8 @@ ath12k_peer_assoc_h_vht_masked(const u16
 static void ath12k_peer_assoc_h_ht(struct ath12k *ar,
 				   struct ath12k_link_vif *arvif,
 				   struct ath12k_link_sta *arsta,
-				   struct ath12k_wmi_peer_assoc_arg *arg)
+				   struct ath12k_wmi_peer_assoc_arg *arg,
+				   struct ieee80211_link_sta *link_sta)
 {
 	const struct ieee80211_sta_ht_cap *ht_cap;
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
@@ -2581,12 +2603,9 @@ static void ath12k_peer_assoc_h_ht(struc
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
-	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
-	link_sta = ath12k_get_link_sta(arsta);
-
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc ht set\n");
 		return;
@@ -2596,13 +2615,18 @@ static void ath12k_peer_assoc_h_ht(struc
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
 	if (!ht_cap->ht_supported)
 		return;
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
 
 	if (ath12k_peer_assoc_h_ht_masked(ht_mcs_mask))
@@ -2779,7 +2803,8 @@ static u8 ath12k_get_nss_160mhz(struct a
 static void ath12k_peer_assoc_h_vht(struct ath12k *ar,
 				    struct ath12k_link_vif *arvif,
 				    struct ath12k_link_sta *arsta,
-				    struct ath12k_wmi_peer_assoc_arg *arg)
+				    struct ath12k_wmi_peer_assoc_arg *arg,
+				    struct ieee80211_link_sta *link_sta)
 {
 	const struct ieee80211_sta_vht_cap *vht_cap;
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
@@ -2795,25 +2820,26 @@ static void ath12k_peer_assoc_h_vht(stru
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
-	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
-	link_sta = ath12k_get_link_sta(arsta);
-
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc vht set\n");
 		return;
 	}
 	vht_cap = &link_sta->vht_cap;
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id))) {
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
-	}
 
 	if (!vht_cap->vht_supported)
 		return;
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
 
 	if (ath12k_peer_assoc_h_vht_masked(vht_mcs_mask))
@@ -2824,7 +2850,7 @@ static void ath12k_peer_assoc_h_vht(stru
 	/* TODO: similar flags required? */
 	arg->vht_capable = true;
 
-	if (def.chan->band == NL80211_BAND_2GHZ)
+	if (band == NL80211_BAND_2GHZ)
 		arg->vht_ng_flag = true;
 
 	arg->peer_vht_caps = vht_cap->cap;
@@ -2928,7 +2954,8 @@ static void ath12k_peer_assoc_h_vht(stru
 static void ath12k_peer_assoc_h_he(struct ath12k *ar,
 				   struct ath12k_link_vif *arvif,
 				   struct ath12k_link_sta *arsta,
-				   struct ath12k_wmi_peer_assoc_arg *arg)
+				   struct ath12k_wmi_peer_assoc_arg *arg,
+				   struct ieee80211_link_sta *link_sta)
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct cfg80211_chan_def def;
@@ -2948,36 +2975,41 @@ static void ath12k_peer_assoc_h_he(struc
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
 	struct ieee80211_bss_conf* link_conf;
-	struct ieee80211_link_sta *link_sta;
 	u32 peer_he_ops;
 	enum ieee80211_sta_rx_bandwidth radio_max_bw_caps;
 
 	link_conf = ath12k_get_link_bss_conf(arvif);
 
-	if (!link_conf) {
+	if (!ath12k_mac_is_bridge_vdev(arvif) && !link_conf) {
 		ath12k_warn(ar->ab, "unable to access bss link conf in peer assoc\n");
 		return;
 	}
 
-	link_sta = ath12k_get_link_sta(arsta);
-
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc he set\n");
 		return;
 	}
 
-	peer_he_ops = link_conf->he_oper.params;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		peer_he_ops = 0;
+	else
+		peer_he_ops = link_conf->he_oper.params;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 	he_cap = &link_sta->he_cap;
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
 	if (!he_cap->has_he)
 		return;
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
 	radio_max_bw_caps = ath12k_get_radio_max_bw_caps(ar, band, link_sta->bandwidth,
 						 vif->type);
@@ -3198,7 +3230,8 @@ static void ath12k_peer_assoc_h_he(struc
 static void ath12k_peer_assoc_h_he_6ghz(struct ath12k *ar,
 				        struct ath12k_link_vif *arvif,
 				        struct ath12k_link_sta *arsta,
-					struct ath12k_wmi_peer_assoc_arg *arg)
+					struct ath12k_wmi_peer_assoc_arg *arg,
+					struct ieee80211_link_sta *link_sta)
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	const struct ieee80211_sta_he_cap *he_cap;
@@ -3208,22 +3241,23 @@ static void ath12k_peer_assoc_h_he_6ghz(
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
-	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
-	link_sta = ath12k_get_link_sta(arsta);
-
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc he-6ghz set\n");
 		return;
 	}
 	he_cap = &link_sta->he_cap;
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
 
 	if (!arg->he_flag || band != NL80211_BAND_6GHZ || !link_sta->he_6ghz_capa.capa)
 		return;
@@ -3264,18 +3298,17 @@ static void ath12k_peer_assoc_h_he_6ghz(
 }
 
 static void ath12k_peer_assoc_h_smps(struct ath12k_link_sta *arsta,
-				     struct ath12k_wmi_peer_assoc_arg *arg)
+				     struct ath12k_wmi_peer_assoc_arg *arg,
+				     struct ieee80211_link_sta *link_sta)
 {
 	const struct ieee80211_sta_ht_cap *ht_cap;
 	const struct ieee80211_sta_he_cap *he_cap;
 	int smps;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
-	struct ieee80211_link_sta *link_sta;
 	struct ath12k *ar = arsta->arvif->ar;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	link_sta = ath12k_get_link_sta(arsta);
 
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc smps set\n");
@@ -3386,12 +3419,13 @@ static void ath12k_peer_assoc_h_mlo(stru
 	ml->logical_link_idx = arsta->link_idx;
 	ml->ml_peer_id = ahsta->ml_peer_id;
 	ml->ieee_link_id = arsta->link_id;
+	ml->bridge_peer = arsta->is_bridge_peer;
 	ml->num_partner_links = 0;
 	/*emlsr */
 	ml->eml_caps = sta->eml_cap;
-	links = sta->valid_links;
+	links = ahsta->links_map;
 
-	for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
+	for_each_set_bit(link_id, &links, ATH12K_NUM_MAX_LINKS) {
 	       if (i >= ATH12K_WMI_MLO_MAX_LINKS)
 		       break;
 	       arsta_p = ahsta->link[link_id];
@@ -3406,6 +3440,7 @@ static void ath12k_peer_assoc_h_mlo(stru
 	       ml->partner_info[i].vdev_id = arvif->vdev_id;
 	       ml->partner_info[i].hw_link_id = arvif->ar->pdev->hw_link_id;
 	       ml->partner_info[i].assoc_link = arsta_p->is_assoc_link;
+	       ml->partner_info[i].bridge_peer = arsta_p->is_bridge_peer;
 	       if (arsta_p->link_id == ahsta->primary_link_id)
 			   ml->partner_info[i].primary_umac = true;
 		   else
@@ -3607,9 +3642,10 @@ ath12k_peer_assoc_h_eht_masked(const u16
 }
 
 static void ath12k_peer_assoc_h_phymode(struct ath12k *ar,
-				        struct ath12k_link_vif *arvif,
-				        struct ath12k_link_sta *arsta,
-					struct ath12k_wmi_peer_assoc_arg *arg)
+					struct ath12k_link_vif *arvif,
+					struct ath12k_link_sta *arsta,
+					struct ath12k_wmi_peer_assoc_arg *arg,
+					struct ieee80211_link_sta *link_sta)
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct cfg80211_chan_def def;
@@ -3622,21 +3658,23 @@ static void ath12k_peer_assoc_h_phymode(
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
-	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
-	link_sta = ath12k_get_link_sta(arsta);
-
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc phymode set\n");
 		return;
 	}
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
 	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
@@ -3784,7 +3822,8 @@ static void ath12k_mac_set_eht_ppe_thres
 static void ath12k_peer_assoc_h_eht(struct ath12k *ar,
 				    struct ath12k_link_vif *arvif,
 				    struct ath12k_link_sta *arsta,
-				    struct ath12k_wmi_peer_assoc_arg *arg)
+				    struct ath12k_wmi_peer_assoc_arg *arg,
+				    struct ieee80211_link_sta *link_sta)
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct cfg80211_chan_def def;
@@ -3801,22 +3840,10 @@ static void ath12k_peer_assoc_h_eht(stru
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
-	struct ieee80211_bss_conf* link_conf;
-	struct ieee80211_link_sta *link_sta;
 	const struct ieee80211_sta_eht_cap *own_eht_cap;
 	const struct ieee80211_eht_mcs_nss_supp *own_eht_mcs_nss_supp;
 	enum ieee80211_sta_rx_bandwidth radio_max_bw_caps;
 
-	link_conf = ath12k_get_link_bss_conf(arvif);
-
-	if (!link_conf) {
-		ath12k_warn(ar->ab, "unable to access bss link conf in peer assoc\n");
-		return;
-	}
-
-
-	link_sta = ath12k_get_link_sta(arsta);
-
 	if (!link_sta) {
 		ath12k_warn(ar->ab, "unable to access link sta in peer assoc eht set\n");
 		return;
@@ -3826,10 +3853,15 @@ static void ath12k_peer_assoc_h_eht(stru
 
 	eht_cap = &link_sta->eht_cap;
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	eht_mcs_mask = arvif->bitrate_mask.control[band].eht_mcs;
 
 	radio_max_bw_caps = ath12k_get_radio_max_bw_caps(ar, band, link_sta->bandwidth,
@@ -3972,7 +4004,10 @@ static void ath12k_peer_assoc_h_eht(stru
 	max_nss = min(max_nss, (uint8_t)eht_nss);
 
 	arg->peer_nss = min(link_sta->rx_nss, max_nss);
-	arg->punct_bitmap = ~def.ru_punct_bitmap;
+	if (arsta->is_bridge_peer)
+		arg->punct_bitmap = ~link_sta->ru_punct_bitmap;
+	else
+		arg->punct_bitmap = ~def.ru_punct_bitmap;
 	if (ieee80211_vif_is_mesh(vif) && link_sta->ru_punct_bitmap)
 		arg->punct_bitmap = ~link_sta->ru_punct_bitmap;
 
@@ -3988,7 +4023,8 @@ static void ath12k_peer_assoc_prepare(st
 				      struct ath12k_link_vif *arvif,
 				      struct ath12k_link_sta *arsta,
 				      struct ath12k_wmi_peer_assoc_arg *arg,
-				      bool reassoc)
+				      bool reassoc,
+				      struct ieee80211_link_sta *link_sta)
 {
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -4000,15 +4036,15 @@ static void ath12k_peer_assoc_prepare(st
 
 	ath12k_peer_assoc_h_basic(ar, arvif, arsta, arg);
 	ath12k_peer_assoc_h_crypto(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_rates(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_phymode(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_ht(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_vht(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_he(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_he_6ghz(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_eht(ar, arvif, arsta, arg);
+	ath12k_peer_assoc_h_rates(ar, arvif, arsta, arg, link_sta);
+	ath12k_peer_assoc_h_phymode(ar, arvif, arsta, arg, link_sta);
+	ath12k_peer_assoc_h_ht(ar, arvif, arsta, arg, link_sta);
+	ath12k_peer_assoc_h_vht(ar, arvif, arsta, arg, link_sta);
+	ath12k_peer_assoc_h_he(ar, arvif, arsta, arg, link_sta);
+	ath12k_peer_assoc_h_he_6ghz(ar, arvif, arsta, arg, link_sta);
+	ath12k_peer_assoc_h_eht(ar, arvif, arsta, arg, link_sta);
 	ath12k_peer_assoc_h_qos(ar, arvif, arsta, arg);
-	ath12k_peer_assoc_h_smps(arsta, arg);
+	ath12k_peer_assoc_h_smps(arsta, arg, link_sta);
 	ath12k_peer_assoc_h_mlo(arsta, arg);
 
 	arsta->peer_nss = arg->peer_nss;
@@ -4126,6 +4162,7 @@ static bool ath12k_mac_vif_recalc_sta_he
 	int ret;
 	u8 link_id = arvif->link_id;
 	struct ieee80211_bss_conf* link_conf;
+	enum nl80211_band band;
 
 	rcu_read_lock();
 
@@ -4147,10 +4184,16 @@ static bool ath12k_mac_vif_recalc_sta_he
 	if (vif->type != NL80211_IFTYPE_STATION)
 		return false;
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return false;
 
-	if (def.chan->band == NL80211_BAND_2GHZ)
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
+	if (band == NL80211_BAND_2GHZ)
 		cap_band = &ar->mac.iftype[NL80211_BAND_2GHZ][vif->type].he_cap;
 	else
 		cap_band = &ar->mac.iftype[NL80211_BAND_5GHZ][vif->type].he_cap;
@@ -4301,7 +4344,7 @@ void ath12k_bss_assoc(struct ath12k *ar,
 	/* he_cap here is updated at assoc success for sta mode only */
 	he_cap = ap_sta->link[link_id]->he_cap;
 
-	ath12k_peer_assoc_prepare(ar, arvif, arsta, &peer_arg, false);
+	ath12k_peer_assoc_prepare(ar, arvif, arsta, &peer_arg, false, ap_sta->link[link_id]);
 
 	rcu_read_unlock();
 
@@ -4923,6 +4966,52 @@ bool ath12k_mac_is_bridge_required(u8 de
 	return bridge_needed;
 }
 
+static struct
+ieee80211_link_sta *ath12k_mac_inherit_radio_cap(struct ath12k *ar,
+						 struct ath12k_link_sta *arsta)
+{
+	u8 link_id = arsta->link_id;
+	struct ieee80211_link_sta *link_sta = NULL;
+	struct ieee80211_sta *sta;
+	u32 freq = ar->chan_info.low_freq;
+	struct ieee80211_supported_band *sband;
+	enum nl80211_band band;
+
+	sta = container_of((void *)arsta->ahsta, struct ieee80211_sta, drv_priv);
+
+	link_sta = (struct ieee80211_link_sta *)
+		   kzalloc(sizeof(struct ieee80211_link_sta), GFP_ATOMIC);
+
+	if (!link_sta)
+		return NULL;
+
+	memset(link_sta, 0, sizeof(*link_sta));
+
+	band = ath12k_get_band_based_on_freq(freq);
+	sband = &ar->mac.sbands[band];
+
+	link_sta->sta = sta;
+	ether_addr_copy(link_sta->addr, arsta->addr);
+	link_sta->link_id = link_id;
+	link_sta->smps_mode = IEEE80211_SMPS_AUTOMATIC;
+	link_sta->supp_rates[band] = ieee80211_mandatory_rates(sband, NL80211_BSS_CHAN_WIDTH_20);
+	link_sta->ht_cap = sband->ht_cap;
+	link_sta->vht_cap = sband->vht_cap;
+	link_sta->he_cap = sband->iftype_data->he_cap;
+	link_sta->he_6ghz_capa = sband->iftype_data->he_6ghz_capa;
+	link_sta->eht_cap = sband->iftype_data->eht_cap;
+
+	link_sta->agg = sta->deflink.agg;
+	link_sta->rx_nss = sta->deflink.rx_nss;
+
+	link_sta->bandwidth = IEEE80211_STA_RX_BW_20;
+	link_sta->sta_max_bandwidth = link_sta->bandwidth;
+	link_sta->txpwr.type = NL80211_TX_POWER_AUTOMATIC;
+	link_sta->ru_punct_bitmap = 0;
+
+	return link_sta;
+}
+
 void ath12k_mac_bss_info_changed(struct ath12k *ar,
 				 struct ath12k_link_vif *arvif,
 				 struct ieee80211_bss_conf *info,
@@ -6699,15 +6788,20 @@ ath12k_mac_set_peer_vht_fixed_rate(struc
 	}
 
 	/* Avoid updating invalid nss as fixed rate*/
-	rcu_read_lock();
-	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+	if (!arsta->is_bridge_peer) {
+		rcu_read_lock();
+		link_sta = rcu_dereference(sta->link[arsta->link_id]);
 
-	if (!link_sta || nss > link_sta->rx_nss) {
+		if (!link_sta || nss > link_sta->rx_nss) {
+			rcu_read_unlock();
+			return -EINVAL;
+		}
 		rcu_read_unlock();
-		return -EINVAL;
+	} else {
+		if (nss > sta->deflink.rx_nss)
+			return -EINVAL;
 	}
 
-	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "Setting Fixed VHT Rate for peer %pM. Device will not switch to any other selected rates",
 		   arsta->addr);
@@ -6760,15 +6854,20 @@ ath12k_mac_set_peer_he_fixed_rate(struct
 	}
 
 	/* Avoid updating invalid nss as fixed rate*/
-	rcu_read_lock();
-	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+	if (!arsta->is_bridge_peer) {
+		rcu_read_lock();
+		link_sta = rcu_dereference(sta->link[arsta->link_id]);
 
-	if (!link_sta || nss > link_sta->rx_nss) {
+		if (!link_sta || nss > link_sta->rx_nss) {
+			rcu_read_unlock();
+			return -EINVAL;
+		}
 		rcu_read_unlock();
-		return -EINVAL;
+	} else {
+		if (nss > sta->deflink.rx_nss)
+			return -EINVAL;
 	}
 
-	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "Setting Fixed HE Rate for peer %pM. Device will not switch to any other selected rates",
 		   arsta->addr);
@@ -6822,15 +6921,20 @@ ath12k_mac_set_peer_ht_fixed_rate(struct
 	}
 
 	/* Avoid updating invalid nss as fixed rate*/
-	rcu_read_lock();
-	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+	if (!arsta->is_bridge_peer) {
+		rcu_read_lock();
+		link_sta = rcu_dereference(sta->link[arsta->link_id]);
 
-	if (!link_sta || nss > link_sta->rx_nss) {
+		if (!link_sta || nss > link_sta->rx_nss) {
+			rcu_read_unlock();
+			return -EINVAL;
+		}
 		rcu_read_unlock();
-		return -EINVAL;
+	} else {
+		if (nss > sta->deflink.rx_nss)
+			return -EINVAL;
 	}
 
-	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 			"Setting Fixed HT Rate for peer %pM. Device will not switch to any other selected rates",
 		  sta->addr);
@@ -6884,15 +6988,20 @@ ath12k_mac_set_peer_eht_fixed_rate(struc
 	}
 
 	/* Avoid updating invalid nss as fixed rate*/
-	rcu_read_lock();
-	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+	if (!arsta->is_bridge_peer) {
+		rcu_read_lock();
+		link_sta = rcu_dereference(sta->link[arsta->link_id]);
 
-	if (!link_sta || nss > link_sta->rx_nss) {
+		if (!link_sta || nss > link_sta->rx_nss) {
+			rcu_read_unlock();
+			return -EINVAL;
+		}
 		rcu_read_unlock();
-		return -EINVAL;
+	} else {
+		if (nss > sta->deflink.rx_nss)
+			return -EINVAL;
 	}
 
-	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "Setting Fixed EHT Rate for peer %pM. Device will not switch to any other selected rates",
 		   arsta->addr);
@@ -6931,6 +7040,7 @@ static int ath12k_station_assoc(struct a
 	u8 link_id = arvif->link_id;
 	bool ht_supp, vht_supp, has_he, has_eht;
 	struct ieee80211_sta_ht_cap ht_cap;
+	struct ieee80211_sta_he_cap he_cap;
 	enum ieee80211_sta_rx_bandwidth bandwidth;
 	u16 he_6ghz_capa;
 
@@ -6940,15 +7050,21 @@ static int ath12k_station_assoc(struct a
 	if (!arvif)
 		return -EINVAL;
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return -EPERM;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
-	if (WARN_ON(rcu_access_pointer(sta->link[link_id]) == NULL))
+	if (!arsta->is_bridge_peer &&
+	    WARN_ON(rcu_access_pointer(sta->link[link_id]) == NULL))
 		return -EINVAL;
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	mask = &arvif->bitrate_mask;
 
 	ahsta = ath12k_sta_to_ahsta(sta);
@@ -6959,7 +7075,8 @@ static int ath12k_station_assoc(struct a
 
 	rcu_read_lock();
 
-	link_sta = ath12k_get_link_sta(arsta);
+	link_sta = arsta->is_bridge_peer ? ath12k_mac_inherit_radio_cap(ar, arsta) :
+					   ath12k_get_link_sta(arsta);
 
 	if (!link_sta) {
 		rcu_read_unlock();
@@ -6970,15 +7087,20 @@ static int ath12k_station_assoc(struct a
 	he_6ghz_capa = le16_to_cpu(link_sta->he_6ghz_capa.capa);
 	bandwidth = link_sta->bandwidth;
 	ht_cap = link_sta->ht_cap;
+	he_cap = link_sta->he_cap;
 	ht_supp = link_sta->ht_cap.ht_supported;
 	vht_supp = link_sta->vht_cap.vht_supported;
-	has_he = link_sta->he_cap.has_he;
+	has_he = he_cap.has_he;
 	has_eht = link_sta->eht_cap.has_eht;
 	bandwidth = link_sta->bandwidth;
 
-	ath12k_peer_assoc_prepare(ar, arvif, arsta, &peer_arg, reassoc);
+	ath12k_peer_assoc_prepare(ar, arvif, arsta, &peer_arg, reassoc, link_sta);
+
+	if (arsta->is_bridge_peer)
+		kfree(link_sta);
 
 	rcu_read_unlock();
+
 	if (peer_arg.peer_nss < 1) {
 		ath12k_warn(ar->ab,
 			    "invalid peer NSS %d\n", peer_arg.peer_nss);
@@ -7039,7 +7161,7 @@ static int ath12k_station_assoc(struct a
 
 	ret = ath12k_setup_peer_smps(ar, arvif, arsta->addr,
 				     &ht_cap,
-				     &link_sta->he_cap,
+				     &he_cap,
 				     he_6ghz_capa);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to setup peer SMPS for vdev %d: %d\n",
@@ -7232,13 +7354,17 @@ static int ath12k_mac_set_peer_ch_switch
 	struct cfg80211_chan_def def;
 	u16 ru_punct_bitmap;
 	int ret;
+	bool is_bridge_vdev;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
 	if (!ar->ab->chwidth_num_peer_caps)
 		return -EOPNOTSUPP;
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, arvif->link_id)))
+	is_bridge_vdev = ath12k_mac_is_bridge_vdev(arvif);
+
+	if (!is_bridge_vdev &&
+	    WARN_ON(ath12k_mac_vif_chan(vif, &def, arvif->link_id)))
 		return -EINVAL;
 
 	peer_data = arvif->peer_ch_width_switch_data;
@@ -7276,13 +7402,12 @@ static int ath12k_mac_set_peer_ch_switch
 
 	peer_arg = &peer_data->peer_arg[peer_data->count++];
 
-
 	ru_punct_bitmap = 0;
 
 	rcu_read_lock();
 	link_sta = ath12k_get_link_sta(arsta);
 
-	if (link_sta) {
+	if (!is_bridge_vdev && link_sta) {
 		if (link_sta->he_cap.has_he && link_sta->eht_cap.has_eht)
 			ru_punct_bitmap = def.ru_punct_bitmap;
 
@@ -7292,8 +7417,9 @@ static int ath12k_mac_set_peer_ch_switch
 
 	rcu_read_unlock();
 
-	if (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT, ar->ab->wmi_ab.svc_map) &&
-	    cfg80211_chandef_device_present(&def)) {
+	if (!is_bridge_vdev &&
+	    (test_bit(WMI_TLV_SERVICE_SW_PROG_DFS_SUPPORT, ar->ab->wmi_ab.svc_map) &&
+	    cfg80211_chandef_device_present(&def))) {
 		ru_punct_bitmap = ath12k_mac_set_ru_punc_bitmap_device(def.chan->center_freq,
 								       def.width_device,
 								       def.center_freq_device,
@@ -7348,10 +7474,15 @@ static void ath12k_sta_rc_update_wk(stru
 	ahvif = arvif->ahvif;
 	ar = arvif->ar;
 
-	if (WARN_ON(ath12k_mac_vif_chan(ahvif->vif, &def, arsta->link_id)))
+	if (!ath12k_mac_is_bridge_vdev(arvif) &&
+	    WARN_ON(ath12k_mac_vif_chan(ahvif->vif, &def, arsta->link_id)))
 		return;
 
-	band = def.chan->band;
+	if (ath12k_mac_is_bridge_vdev(arvif))
+		band = ath12k_get_band_based_on_freq(ar->chan_info.low_freq);
+	else
+		band = def.chan->band;
+
 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
 	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
@@ -7378,7 +7509,21 @@ static void ath12k_sta_rc_update_wk(stru
 			   ath12k_mac_max_eht_nss(eht_mcs_mask)));
 
 	if (changed & IEEE80211_RC_BW_CHANGED) {
-		ath12k_peer_assoc_h_phymode(ar, arvif, arsta, &peer_arg);
+		rcu_read_lock();
+		link_sta = arsta->is_bridge_peer ? ath12k_mac_inherit_radio_cap(ar, arsta) :
+						   ath12k_get_link_sta(arsta);
+
+		if (!link_sta) {
+			rcu_read_unlock();
+			goto err_rc_bw_changed;
+		}
+
+		ath12k_peer_assoc_h_phymode(ar, arvif, arsta, &peer_arg, link_sta);
+
+		if (arsta->is_bridge_peer)
+			kfree(link_sta);
+		rcu_read_unlock();
+
 		peer_phymode = peer_arg.peer_phymode;
 
 		err = ath12k_mac_set_peer_ch_switch_data(arvif, arsta, peer_phymode,
@@ -7489,7 +7634,8 @@ static void ath12k_sta_rc_update_wk(stru
 		 * across HT/VHT and for multiple VHT MCS support.
 		 */
 		rcu_read_lock();
-		link_sta = rcu_dereference(sta->link[arsta->link_id]);
+		link_sta = arsta->is_bridge_peer ? ath12k_mac_inherit_radio_cap(ar, arsta) :
+						   ath12k_get_link_sta(arsta);
 
 		if (!link_sta) {
 			rcu_read_unlock();
@@ -7503,7 +7649,6 @@ static void ath12k_sta_rc_update_wk(stru
 		rcu_read_unlock();
 
 		if (vht_supp && num_vht_rates == 1) {
-
 			ath12k_mac_set_peer_vht_fixed_rate(arvif, arsta, mask,
 							   band);
 		} else if (has_he && num_he_rates == 1) {
@@ -7531,10 +7676,19 @@ static void ath12k_sta_rc_update_wk(stru
 				ath12k_warn(ar->ab,
 					    "failed to disable peer fixed rate for STA %pM ret %d\n",
 					    arsta->addr, err);
+			rcu_read_lock();
+			if (!arsta->is_bridge_peer) {
+				link_sta = ath12k_get_link_sta(arsta);
+				if (!link_sta) {
+					rcu_read_unlock();
+					goto err_rc_bw_changed;
+				}
+			}
 			ath12k_peer_assoc_prepare(ar, arvif, arsta,
-						  &peer_arg, true);
+						  &peer_arg, true, link_sta);
 
 			peer_arg.is_assoc = false;
+			rcu_read_unlock();
 			err = ath12k_wmi_send_peer_assoc_cmd(ar, &peer_arg);
 			if (err)
 				ath12k_warn(ar->ab, "failed to run peer assoc for STA %pM vdev %i: %d\n",
@@ -7544,7 +7698,11 @@ static void ath12k_sta_rc_update_wk(stru
 				ath12k_warn(ar->ab, "failed to get peer assoc conf event for %pM vdev %i\n",
 					    arsta->addr, arvif->vdev_id);
 		}
+
+		if (arsta->is_bridge_peer)
+			kfree(link_sta);
 	}
+
 err_rc_bw_changed:
 	mutex_unlock(&ar->conf_mutex);
 }
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -3452,7 +3452,9 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_PEER_ID_VALID,
 				      arg->ml.peer_id_valid) |
 			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_EMLSR_SUPPORT,
-				      emlsr_support);
+				      emlsr_support) |
+			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_BRIDGE_PEER,
+				      arg->ml.bridge_peer);
 
 	ether_addr_copy(ml_params->mld_addr.addr, arg->ml.mld_addr);
 	ml_params->logical_link_idx = arg->ml.logical_link_idx;
@@ -3522,14 +3524,16 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 				      FIELD_PREP(ATH12K_WMI_FLAG_MLO_PRIMARY_UMAC,
 						 arg->ml.partner_info[i].primary_umac) |
 				      FIELD_PREP(ATH12K_WMI_FLAG_MLO_LOGICAL_LINK_IDX_VALID,
-						 arg->ml.partner_info[i].logical_link_idx_valid);
+						 arg->ml.partner_info[i].logical_link_idx_valid) |
+				      FIELD_PREP(ATH12K_WMI_FLAG_MLO_BRIDGE_PEER,
+						 arg->ml.partner_info[i].bridge_peer);
 		partner_info->logical_link_idx = arg->ml.partner_info[i].logical_link_idx;
 		ptr += sizeof(*partner_info);
 	}
 
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
-		   "wmi peer assoc vdev id %d assoc id %d peer mac %pM peer_flags %x rate_caps %x peer_caps %x listen_intval %d ht_caps %x max_mpdu %d nss %d phymode %d peer_mpdu_density %d vht_caps %x he cap_info %x he ops %x he cap_info_ext %x he phy %x %x %x peer_bw_rxnss_override %x peer_flags_ext %x eht mac_cap %x %x eht phy_cap %x %x %x eht ops %x ml flags %x mld_addr %pM logical_link_idx %u ml peer id %d ieee_link_id %u num_partner_links %d\n",
+		   "wmi peer assoc vdev id %d assoc id %d peer mac %pM peer_flags %x rate_caps %x peer_caps %x \nlisten_intval %d ht_caps %x max_mpdu %d nss %d phymode %d peer_mpdu_density %d vht_caps %x he cap_info %x he ops %x \nhe cap_info_ext %x he phy %x %x %x peer_bw_rxnss_override %x peer_flags_ext %x eht mac_cap %x %x eht phy_cap %x %x %x \neht ops %x ml flags %x mld_addr %pM logical_link_idx %u ml peer id %d is_bridge_peer %d ieee_link_id %u num_partner_links %d\n",
 		   cmd->vdev_id, cmd->peer_associd, arg->peer_mac,
 		   cmd->peer_flags, cmd->peer_rate_caps, cmd->peer_caps,
 		   cmd->peer_listen_intval, cmd->peer_ht_caps,
@@ -3545,7 +3549,7 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 		   cmd->peer_eht_cap_phy[2], cmd->peer_eht_ops,
 		   ml_params->flags, ml_params->mld_addr.addr,
 		   ml_params->logical_link_idx, ml_params->ml_peer_id,
-		   ml_params->ieee_link_id,
+		   arg->ml.bridge_peer, ml_params->ieee_link_id,
 		   arg->ml.num_partner_links);
 
 	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_PEER_ASSOC_CMDID);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3638,6 +3638,7 @@ struct wmi_ml_partner_info {
 	bool assoc_link;
 	bool primary_umac;
 	bool logical_link_idx_valid;
+	bool bridge_peer;
 	u32 logical_link_idx;
 };
 
@@ -4635,6 +4636,7 @@ struct peer_assoc_mlo_params {
 	bool primary_umac;
 	bool peer_id_valid;
 	bool logical_link_idx_valid;
+	bool bridge_peer;
 	u8 mld_addr[ETH_ALEN];
 	u32 logical_link_idx;
 	u32 ml_peer_id;
