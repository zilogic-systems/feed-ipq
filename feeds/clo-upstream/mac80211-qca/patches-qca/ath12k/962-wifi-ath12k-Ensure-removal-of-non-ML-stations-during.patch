From c53a3eaf2aa85a2b4e9edb865cbc097175402a89 Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Sun, 14 Jul 2024 14:05:37 -0700
Subject: [PATCH] wifi: ath12k: Ensure removal of non-ML stations during
 recovery

wifi: ath12k: Ensure removal of non-ML stations during recovery

In the existing code, during recovery, a low acknowledgment is reported to the
user-space for a station. This triggers a deletion operation for the station
from the user-space. However, any operation in the driver that necessitates
communication with the firmware returns -ESHUTDOWN when the
ATH12K_FLAG_CRASH_FLUSH dev_flag is set.

Remove non-ML stations when a station deletion operation is initiated
during recovery irrespective of the error code as the associated peer
object would be eliminated.

Patch-Dependency: 901-wifi-ath12k-Peer-clean-up-during-subsystem-recovery.patch
Patch-work: None

Fixes: I6a031582676 ("wifi: ath12k: Skip low ack reports for Mesh VIF")

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -7466,41 +7466,6 @@ static void ath12k_mac_station_post_remo
 	ahsta->ahvif = NULL;
 }
 
-static int ath12k_mac_station_remove(struct ath12k *ar,
-				     struct ath12k_link_vif *arvif,
-				     struct ath12k_link_sta *arsta)
-{
-	struct ath12k_sta *ahsta = arsta->ahsta;
-	struct ieee80211_sta *sta;
-	int ret = 0;
-	struct ath12k_vif *ahvif = arvif->ahvif;
-        struct ieee80211_vif *vif = ahvif->vif;
-	bool skip_peer_delete;
-
-	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-
-	lockdep_assert_held(&ar->conf_mutex);
-
-	ath12k_dp_peer_cleanup(ar, arvif->vdev_id, arsta->addr);
-
-	skip_peer_delete = ar->ab->hw_params->vdev_start_delay &&
-			   vif->type == NL80211_IFTYPE_STATION;
-
-	if (!skip_peer_delete) {
-		ret = ath12k_peer_delete(ar, arvif->vdev_id, arsta->addr);
-		if (ret)
-			ath12k_warn(ar->ab, "Failed to delete peer: %pM for VDEV: %d\n",
-				    arsta->addr, arvif->vdev_id);
-		else
-			ath12k_dbg(ar->ab, ATH12K_DBG_PEER, "Removed peer: %pM for VDEV: %d\n",
-				   arsta->addr, arvif->vdev_id);
-
-		ath12k_mac_station_post_remove(ar, arvif, arsta);
-	}
-
- 	return ret;
-}
-
 static int ath12k_mac_station_add(struct ath12k *ar,
 				  struct ath12k_link_vif *arvif,
 				  struct ath12k_link_sta *arsta)
@@ -7784,6 +7749,47 @@ static int ath12k_mac_free_unassign_link
 	return 0;
 }
 
+static int ath12k_mac_station_remove(struct ath12k *ar,
+				     struct ath12k_link_vif *arvif,
+				     struct ath12k_link_sta *arsta)
+{
+	struct ath12k_sta *ahsta = arsta->ahsta;
+	struct ieee80211_sta *sta;
+	int ret = 0;
+	struct ath12k_vif *ahvif = arvif->ahvif;
+        struct ieee80211_vif *vif = ahvif->vif;
+	bool skip_peer_delete;
+
+	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	ath12k_dp_peer_cleanup(ar, arvif->vdev_id, arsta->addr);
+
+	skip_peer_delete = ar->ab->hw_params->vdev_start_delay &&
+			   vif->type == NL80211_IFTYPE_STATION;
+
+	if (!skip_peer_delete) {
+		ret = ath12k_peer_delete(ar, arvif->vdev_id, arsta->addr);
+		if (ret)
+			ath12k_warn(ar->ab, "Failed to delete peer: %pM for VDEV: %d\n",
+				    arsta->addr, arvif->vdev_id);
+		else
+			ath12k_dbg(ar->ab, ATH12K_DBG_PEER, "Removed peer: %pM for VDEV: %d\n",
+				   arsta->addr, arvif->vdev_id);
+
+		ath12k_mac_station_post_remove(ar, arvif, arsta);
+	}
+
+	ath12k_cfr_decrement_peer_count(ar, arsta);
+
+	if (sta->valid_links)
+		ath12k_mac_free_unassign_link_sta(arvif->ahvif->ah,
+						  arsta->ahsta, arsta->link_id);
+
+ 	return ret;
+}
+
 static void ath12k_mac_ml_station_remove(struct ath12k_vif *ahvif,
 				        struct ath12k_sta *ahsta)
 {
@@ -8028,6 +8034,14 @@ exit:
 	mutex_unlock(&arvif->ar->conf_mutex);
 }
 
+/*
+ * FIXME: Refactor this function based on clean code principle
+ * mac80211 warns on any error during state transition.
+ * Currently, ath12k overwrites an error with 0 to avoid warnings during
+ * recovery.
+ * Make it highly cohesive and less coupling to ensure proper error handling
+ * for all scenarios.
+ */
 int ath12k_mac_update_sta_state(struct ieee80211_hw *hw,
 				struct ieee80211_vif *vif,
 				struct ieee80211_sta *sta,
@@ -8075,16 +8089,33 @@ int ath12k_mac_update_sta_state(struct i
 			ret = -EINVAL;
 			goto exit;
 		}
+
+		if (!arvif->ar) {
+			ath12k_warn(NULL, "vdev %d might have deleted for a STA %pM.\n",
+				    arvif->vdev_id, arsta->addr);
+			ret = -EINVAL;
+			goto exit;
+		}
+
 		if (new_state == IEEE80211_STA_NOTEXIST &&
-		    old_state == IEEE80211_STA_NONE &&
-		    ahvif->vdev_type == WMI_VDEV_TYPE_STA)
-			ath12k_vdev_stop_notify(arvif);
-
-		ret = ath12k_mac_handle_link_sta_state(hw, arvif, arsta,
-						       old_state, new_state);
-		if (arvif->ar &&
-		    test_bit(ATH12K_FLAG_RECOVERY, &arvif->ar->ab->dev_flags))
+		    old_state == IEEE80211_STA_NONE) {
+			if (ahvif->vdev_type == WMI_VDEV_TYPE_STA)
+				ath12k_vdev_stop_notify(arvif);
+
+			mutex_lock(&arvif->ar->conf_mutex);
+			ret = ath12k_mac_station_remove(arvif->ar, arvif, arsta);
+			if (ret)
+				ath12k_warn(arvif->ar->ab, "Removed STA %pM for vdev %d with an error: %d.\n",
+					    arsta->addr, arvif->vdev_id, ret);
+			mutex_unlock(&arvif->ar->conf_mutex);
+		} else
+			ret = ath12k_mac_handle_link_sta_state(hw, arvif, arsta,
+						       	       old_state, new_state);
+		if (test_bit(ATH12K_FLAG_RECOVERY, &arvif->ar->ab->dev_flags)) {
+			ath12k_warn(arvif->ar->ab, "Overwriting error with 0 during recovery after removal of non-ml STA %pM for vdev %d with an error: %d.\n",
+				    arsta->addr, arvif->vdev_id, ret);
 			ret = 0;
+		}
 
 		mutex_unlock(&ah->conf_mutex);
 		return ret;
