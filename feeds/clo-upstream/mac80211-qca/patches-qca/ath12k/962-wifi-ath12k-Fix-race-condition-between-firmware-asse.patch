From 5933d75ae3c48aad8b97c735625df3c7c10400d6 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Thu, 18 Jul 2024 07:35:23 +0530
Subject: [PATCH] wifi: ath12k: Fix race condition between firmware assert and
 reboot path

When firmware assert happened during reboot getting race condition
between recovery and reboot path. During firmware assert, mhi callback
function schedule reset work queue. By that time ATH12K_FLAG_UNREGISTERING
flag is not set as pci_shutdown not called yet.
Likewise during pci_shutdown ATH12K_FLAG_RECOVERY is not set
and proceeding with core_deinit.

But when reset workqueue is scheduled, core_deinit function already called
and mhi_ctrl->bhi is NULL while reading mhi registers.

To fix this, checking ATH12K_FLAG_UNREGISTERING flag for ag in mhi callback
function. Also checking ATH12K_FLAG_CORE_REGISTERED dev flag as it will be unset
during core_deinit path and based on that skipping reset workqueue.

Patch-dependency: 707-b-ath12k-add-support-for-MLO-SSR-Mode0.patch
Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 4 ++++
 drivers/net/wireless/ath/ath12k/mhi.c  | 2 +-
 drivers/net/wireless/ath/ath12k/qmi.c  | 2 +-
 3 files changed, 6 insertions(+), 2 deletions(-)

Index: b/drivers/net/wireless/ath/ath12k/core.c
===================================================================
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -3611,6 +3611,10 @@ static void ath12k_core_reset(struct wor
 	long time_left;
 	bool teardown = false;
 
+	if (!(test_bit(ATH12K_FLAG_CORE_REGISTERED, &ab->dev_flags))) {
+                ath12k_warn(ab, "skipping reset work due to unregister 0x%lx\n", ab->dev_flags);
+                return;
+        }
 	/* Initializing this flag to false, as this flag will be only
 	 * set true on Mode1 SSR.
 	 */
@@ -4437,6 +4441,10 @@ static void ath12k_rddm_notifier(struct
 	int i;
 
 	list_for_each_entry(ag, &ath12k_hw_groups, list) {
+		if (test_bit(ATH12K_FLAG_UNREGISTERING, &ag->dev_flags)) {
+			ath12k_warn(NULL, "Skipping coredump collection due to shutdown request\n");
+			return;
+		}
 		for (i = 0; i < ag->num_chip; i++) {
 			ab = ag->ab[i];
 			if (ab->in_panic)
Index: b/drivers/net/wireless/ath/ath12k/mhi.c
===================================================================
--- a/drivers/net/wireless/ath/ath12k/mhi.c
+++ b/drivers/net/wireless/ath/ath12k/mhi.c
@@ -383,15 +383,13 @@ static void ath12k_mhi_op_status_cb(stru
 		}
 
 		/* In-case of rddm for fatal error and ab is registered. */
-		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->dev_flags))) {
+		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
 			set_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags);
 			set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
 			set_bit(ATH12K_FLAG_RECOVERY, &ab->ag->dev_flags);
 			queue_work(ab->workqueue_aux, &ab->reset_work);
 			ath12k_dbg(ab, ATH12K_DBG_BOOT, "Schedule SSR Recovery reset work queue\n");
 			ath12k_hal_dump_srng_stats(ab);
-		} else {
-			BUG_ON(1);
 		}
 		break;
 	default:
Index: b/drivers/net/wireless/ath/ath12k/qmi.c
===================================================================
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -6559,7 +6559,7 @@ static void ath12k_qmi_driver_event_work
 		list_del(&event->list);
 		spin_unlock(&qmi->event_lock);
 
-		if (test_bit(ATH12K_FLAG_UNREGISTERING, &ab->dev_flags))
+		if (test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))
 			goto skip;
 
 		switch (event->type) {
