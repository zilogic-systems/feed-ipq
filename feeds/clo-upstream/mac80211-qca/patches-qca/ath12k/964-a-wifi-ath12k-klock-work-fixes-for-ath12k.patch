From 1b7882ab370bb23189db1c83a0f2176f0be712cc Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Tue, 4 Jun 2024 22:48:29 +0530
Subject: wifi: ath12k: KW: Klock work fixes for ath12k

Changes in qmi.c:

In case of failure in request_firmware the fw_entry will be NULL and
accessing the contents of fw_entry in these scenarios will lead to
crash. So moving the debug print after the check on ret value.

In case of memory-region entry is not found in DTS entry, control might
return an uninitialized value so initializing ret to -EINVAL before
returning.

Changes in debug.c:

ath12k_gstrings_stats is a 2-D array of char's with 2 strings of
size 32 each. So the index positions 32..63 are also valid. But
here dereferencing with *ath12k_gstrings_stats instead of passing
base address ath12k gstrings_stats because of which only first
element is being considered and it's length is 32.

So, changing *ath12k_gstrings_stats to ath12k_gstrings_stats so that
the whole array will be considered.

Changes in coredump.c:

The dump variable was never initialized and in the current flow
depending on some checks driver may or may not allocate memory for
dump and post this driver will check if dump is pointing to NULL
and return.

But because the variable was never initialized there is a chance that
it might be pointing to some invalid location and driver will end up
accessing it even if the memory is not allocated. Avoid this by
initializing dump to NULL.

Patch-depdendency: 881-wifi-ath12k-add-ethtool-support-for-rx-and-tx-stats
		   596-a-ath12k-add-WCN7850-QDSS-QMI-message.patch
		   596-b-ath12k-Add-support-for-QDSS-dump-collection.patch
		   

Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/debug.c
+++ b/drivers/net/wireless/ath/ath12k/debug.c
@@ -21,7 +21,7 @@ void ath12k_debug_get_et_strings(struct
 				 u32 sset, u8 *data)
 {
 	if (sset == ETH_SS_STATS)
-		memcpy(data, *ath12k_gstrings_stats,
+		memcpy(data, ath12k_gstrings_stats,
 		       sizeof(ath12k_gstrings_stats));
 }
 
--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -409,7 +409,7 @@ void ath12k_coredump_qdss_dump(struct at
 {
 	struct ath12k_dump_segment *segment;
 	int len, num_seg;
-	void *dump;
+	void *dump = NULL;
 
 	num_seg = event_data->mem_seg_len;
 	len = sizeof(*segment);
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3046,21 +3046,21 @@ static int ath12k_qmi_send_qdss_config(s
 		 "%s/%s/%s", ATH12K_FW_DIR, ab->hw_params->fw.dir,
 		 ATH12K_QMI_DEFAULT_QDSS_CONFIG_FILE_NAME);
 	ret = request_firmware(&fw_entry, filename, dev);
-	ath12k_dbg(ab, ATH12K_DBG_BOOT, "boot firmware request %s size %zu\n",
-		   filename, fw_entry->size);
+
 	if (ret) {
 		/* for backward compatibility */
 		snprintf(filename, sizeof(filename),
 			 "%s", ATH12K_QMI_DEFAULT_QDSS_CONFIG_FILE_NAME);
 		ret = request_firmware(&fw_entry, filename, dev);
-		ath12k_dbg(ab, ATH12K_DBG_BOOT, "boot firmware request %s size %zu\n",
-			   filename, fw_entry->size);
+
 		if (ret) {
 			ath12k_warn(ab, "qmi failed to load QDSS config: %s\n", filename);
 			return ret;
 		}
 	}
 
+	ath12k_dbg(ab, ATH12K_DBG_BOOT, "boot firmware request %s size %zu\n",
+		   filename, fw_entry->size);
 	ret = ath12k_qmi_send_qdss_trace_config_download_req(ab, fw_entry->data,
 							     fw_entry->size);
 	if (ret < 0) {
@@ -4461,7 +4461,7 @@ static int ath12k_qmi_assign_target_mem_
 	hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
 	if (!hremote_node) {
 		ath12k_warn(ab, "qmi fail to get hremote_node\n");
-		return ret;
+		return -EINVAL;
 	}
 
 	ret = of_address_to_resource(hremote_node, 0, &res);
@@ -5855,7 +5855,7 @@ int ath12k_qmi_pci_alloc_qdss_mem(struct
 		ab->hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
 		if (!ab->hremote_node) {
 			ath12k_warn(ab, "qmi fail to get hremote_node for pci device\n");
-			return ret;
+			return -EINVAL;
 		}
 
 		ret = of_address_to_resource(ab->hremote_node, 0, &res);
