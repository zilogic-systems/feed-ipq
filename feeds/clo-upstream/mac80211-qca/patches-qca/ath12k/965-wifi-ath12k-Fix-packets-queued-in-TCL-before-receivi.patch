From 33d346c76d3fbb65386fd5ad1a94f11c6e41750e Mon Sep 17 00:00:00 2001
From: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
Date: Thu, 6 Jun 2024 14:34:32 +0530
Subject: [PATCH] wifi: ath12k: Fix packets queued in TCL before receiving WMI

During mode-1 recovery, we observe packets are getting queued into
TCL ring before receiving the WMI FW ready event. Due to that, FW is
getting crashed and not able to recover. To address this, check this
flag ATH12K_FLAG_RECOVERY before queuing the packets to TCL.

Patch-dependency: None

Signed-off-by: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 7 -------
 drivers/net/wireless/ath/ath12k/mac.c   | 2 +-
 2 files changed, 1 insertion(+), 8 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 10be30e..6aba33b 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -280,9 +280,6 @@ int ath12k_dp_tx_direct(struct ath12k_link_vif *arvif, struct sk_buff *skb)
 	dma_addr_t paddr;
 	int ret;
 
-	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags)))
-		return -ESHUTDOWN;
-
 	ring_id = smp_processor_id();
 
 
@@ -423,10 +420,6 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 	bool add_htt_metadata = false;
 	u32 info4 = arvif->desc.info4;;
 
-	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags)) ||
-	    unlikely(test_bit(ATH12K_FLAG_UMAC_PRERESET_START, &ab->dev_flags)))
-		return -ESHUTDOWN;
-
 	if (unlikely(!(skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP) &&
 	    !ieee80211_is_data(hdr->frame_control)))
 		return -ENOTSUPP;
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 353fde7..418da3c 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10018,7 +10018,7 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 
 	ah = ar->ah;
 
-	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags))) {
+	if (unlikely(test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags))) {
 		ieee80211_free_txskb(ah->hw, skb);
 		return;
 	}
-- 
2.17.1

