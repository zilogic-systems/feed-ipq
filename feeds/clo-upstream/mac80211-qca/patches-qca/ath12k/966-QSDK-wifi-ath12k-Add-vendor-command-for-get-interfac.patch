From ec77c62ab54c3ea4aa76298f29e841572dcc632c Mon Sep 17 00:00:00 2001
From: Bhagavathi Perumal S <quic_bperumal@quicinc.com>
Date: Wed, 10 Jul 2024 19:35:13 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Add vendor command for get interface
 offload

This adds vendor command handler to get data path interface offlaod type.
This is usefull for user\tester to know the interface offload type.

Patch dependency: 955-QSDK-wifi-ath12k-Handle-vendor-command-for-interface-offl.patch

Signed-off-by: Bhagavathi Perumal S <quic_bperumal@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/vendor.c | 54 +++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/vendor.h |  1 +
 2 files changed, 54 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -1019,7 +1019,6 @@ static int telemetry_build_nd_send_reply
 
 		ret = cfg80211_vendor_cmd_reply(skb);
 		if (ret) {
-			kfree_skb(skb);
 			ath12k_err(NULL, "SAWF: stats msg send failed with err=%d\n", ret);
 			return ret;
 		}
@@ -1182,6 +1181,56 @@ static int ath12k_vendor_wifi_config_han
 	return 0;
 }
 
+static int ath12k_vendor_get_wifi_config_handler(struct wiphy *wiphy,
+					  struct wireless_dev *wdev,
+					  const void *data,
+					  int data_len)
+{
+	struct sk_buff *skb;
+	struct ieee80211_vif *vif;
+	struct ath12k_vif *ahvif;
+	struct ieee80211_hw *hw = wiphy_to_ieee80211_hw(wiphy);
+	struct ath12k_hw *ah = hw->priv;
+	int ret;
+
+	skb = cfg80211_vendor_cmd_alloc_reply_skb(wiphy, NLMSG_DEFAULT_SIZE);
+	if (!skb)
+		return -ENOMEM;
+
+	vif = wdev_to_ieee80211_vif_vlan(wdev, false);
+	if (!vif) {
+		ret = -EINVAL;
+		goto err;
+	}
+
+	ahvif = ath12k_vif_to_ahvif(vif);
+	if (!ahvif) {
+		ret = -EINVAL;
+		goto err;
+	}
+
+	mutex_lock(&ah->conf_mutex);
+	if (nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_IF_OFFLOAD_TYPE, ahvif->ppe_vp_type)) {
+		mutex_unlock(&ah->conf_mutex);
+		ret = -EINVAL;
+		goto err;
+	}
+	mutex_unlock(&ah->conf_mutex);
+
+	ret = cfg80211_vendor_cmd_reply(skb);
+	if (ret) {
+		ath12k_err(NULL, "offload type send failed with err=%d\n", ret);
+		return ret;
+	}
+
+	return 0;
+
+err:
+	ath12k_err(NULL, "get offload type failed with err=%d\n", ret);
+	kfree_skb(skb);
+	return ret;
+}
+
 static int ath12k_vendor_telemetry_sla_reset_stats(struct nlattr *clr_stats)
 {
 	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_SDWF_SLA_BREACH_PARAM_MAX + 1];
@@ -3026,6 +3075,14 @@ static struct wiphy_vendor_command ath12
 		.maxattr = QCA_WLAN_VENDOR_ATTR_DCS_MAX,
 		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
 	},
+	{
+		.info.vendor_id = QCA_NL80211_VENDOR_ID,
+		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_GET_WIFI_CONFIGURATION,
+		.doit = ath12k_vendor_get_wifi_config_handler,
+		.policy = ath12k_wifi_config_policy,
+		.maxattr = QCA_WLAN_VENDOR_ATTR_CONFIG_MAX,
+		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
+	},
 };
 
 static const struct nl80211_vendor_cmd_info ath12k_vendor_events[] = {
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -15,6 +15,7 @@ extern unsigned int ath12k_ppe_ds_enable
 enum qca_nl80211_vendor_subcmds {
 	/* Wi-Fi configuration subcommand */
 	QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION = 74,
+	QCA_NL80211_VENDOR_SUBCMD_GET_WIFI_CONFIGURATION = 75,
 	QCA_NL80211_VENDOR_SUBCMD_RM_GENERIC = 206,
 	QCA_NL80211_VENDOR_SUBCMD_SCS_RULE_CONFIG = 218,
 	QCA_NL80211_VENDOR_SUBCMD_AFC_EVENT = 222,
