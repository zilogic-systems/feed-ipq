From 7d3069e7a1426994bcc6541434fc91a4fdb4c8e5 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Mon, 28 Oct 2024 13:40:37 -0700
Subject: [PATCH 2/2] wifi: ath12k: Add HTT_PPDU_ENHANCED tag for link metric
 calculation

This change introduces the HTT_PPDU_ENHANCED_TAG for tx completions,
gathering specific PPDU stats for metric calculations. It is designed
for peak performance scenarios, focusing on essential stats only.
Introduce module param to ensure stat collection happens only when
a mesh standalone VAP is present.

Patch dependency: 967-a-wifi-ath12k-Use-HTT_PPDU_STATS-for-tx-completion-st.patch
                  921-wifi-mac80211-mesh-Update-ieee80211s_update_metric_p.patch

Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c    |  4 ++++
 drivers/net/wireless/ath/ath12k/debugfs.c | 13 +++++++++++++
 drivers/net/wireless/ath/ath12k/debugfs.h |  1 +
 drivers/net/wireless/ath/ath12k/dp.h      |  6 ++++++
 drivers/net/wireless/ath/ath12k/dp_tx.c   |  4 ++++
 drivers/net/wireless/ath/ath12k/mac.c     |  3 ++-
 6 files changed, 30 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -53,6 +53,10 @@ unsigned int ath12k_mlo_capable = true;
 module_param_named(mlo_capable, ath12k_mlo_capable, uint, 0644);
 MODULE_PARM_DESC(mlo_capable, "mlo capable: 0-disable, 1-enable");
 
+unsigned int ath12k_mesh_metric_offload = false;
+module_param_named(mesh_metric_offload, ath12k_mesh_metric_offload, uint, 0644);
+MODULE_PARM_DESC(mesh_metric_offload, "stats offload: 0-disable, 1-enable");
+
 static unsigned int ath12k_en_fwlog = true;
 module_param_named(en_fwlog, ath12k_en_fwlog, uint, 0644);
 MODULE_PARM_DESC(en_fwlog, "fwlog: 0-disable, 1-enable");
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2600,10 +2600,13 @@ static ssize_t ath12k_write_stats_disabl
 {
 	struct ath12k_base *ab = file->private_data;
 	struct ath12k_pdev *pdev;
+	struct ath12k *ar;
+	struct ath12k_link_vif *arvif;
 	struct ath12k_peer *peer;
 	bool disable;
 	int ret, i;
 	u32 mask = 0;
+	bool skip_htt_ppdu_stats = true;
 
 	if (kstrtobool_from_user(user_buf, count, &disable))
 		return -EINVAL;
@@ -2623,16 +2626,32 @@ static ssize_t ath12k_write_stats_disabl
 		for (i = 0; i < ab->num_radios; i++) {
 			pdev = &ab->pdevs[i];
 			if (pdev && pdev->ar) {
+				if (ath12k_mesh_metric_offload) {
+					ar = pdev->ar;
+					mutex_lock(&ar->conf_mutex);
+					list_for_each_entry(arvif, &ar->arvifs, list) {
+						if (arvif->vdev_subtype != WMI_VDEV_SUBTYPE_MESH_11S) {
+							skip_htt_ppdu_stats = true;
+							break;
+						} else if (arvif->vdev_subtype
+								== WMI_VDEV_SUBTYPE_MESH_11S)
+							skip_htt_ppdu_stats = false;
+					}
+					mutex_unlock(&ar->conf_mutex);
+				}
 				ath12k_debug_config_mon_status(pdev->ar, !disable);
 				pdev->ar->ah->hw->perf_mode = disable;
 
 				if (!disable)
 					mask = HTT_PPDU_STATS_TAG_DEFAULT;
+				else if (!skip_htt_ppdu_stats)
+					mask = HTT_PPDU_STATS_ENHANCED_TX_COMPLN;
 
+				ath12k_info(ab, "Requesting ppdu stats with mask 0x%x", mask);
 				ath12k_dp_tx_htt_h2t_ppdu_stats_req(pdev->ar, mask);
-	                }
-	        }
-	 }
+			}
+		}
+	}
 	ret = count;
 
 	return ret;
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -22,6 +22,7 @@
 #define ATH12K_RX_FSE_FLOW_MATCH_DEBUGFS 0xBBBB
 
 #define ATH12K_BUF_SIZE_32 32
+extern unsigned int ath12k_mesh_metric_offload;
 
 /* htt_dbg_ext_stats_type */
 enum ath12k_dbg_htt_ext_stats_type {
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -844,6 +844,12 @@ enum htt_ppdu_stats_tag_type {
 				   | BIT(HTT_PPDU_STATS_TAG_USR_COMPLTN_FLUSH) \
 				   | BIT(HTT_PPDU_STATS_TAG_USR_COMMON_ARRAY))
 
+#define HTT_PPDU_STATS_ENHANCED_TX_COMPLN (BIT(HTT_PPDU_STATS_TAG_COMMON) \
+				    | BIT(HTT_PPDU_STATS_TAG_USR_COMMON) \
+				    | BIT(HTT_PPDU_STATS_TAG_USR_RATE) \
+				    | BIT(HTT_PPDU_STATS_TAG_USR_COMPLTN_COMMON) \
+				    | BIT(HTT_PPDU_STATS_TAG_USR_COMPLTN_FLUSH))
+
 #define HTT_PPDU_STATS_TAG_PKTLOG  (BIT(HTT_PPDU_STATS_TAG_USR_MPDU_ENQ_BITMAP_64) | \
 				    BIT(HTT_PPDU_STATS_TAG_USR_MPDU_ENQ_BITMAP_256) | \
 				    BIT(HTT_PPDU_STATS_TAG_USR_COMPLTN_BA_BITMAP_64) | \
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1255,6 +1255,10 @@ unlock:
 	status.rates = &status_rate;
 	status.n_rates = 1;
 
+	if (ath12k_mesh_metric_offload && ab->stats_disable &&
+		ieee80211_vif_is_mesh(vif))
+		status.skip_per_packet_metric_update = true;
+
 
 	if (unlikely(ath12k_debugfs_is_extd_tx_stats_enabled(ar))) {
 		if(arsta->wbm_tx_stats && wbm_status < HAL_WBM_REL_HTT_TX_COMP_STATUS_MAX)
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10747,7 +10747,8 @@ static void ath12k_mac_op_tx(struct ieee
 				break;
 			case ATH12K_HW_TXRX_NATIVE_WIFI:
 				ath12k_dp_tx_encap_nwifi(skb);
-				if (vif->type == NL80211_IFTYPE_MESH_POINT)
+				if (!ath12k_mesh_metric_offload &&
+						vif->type == NL80211_IFTYPE_MESH_POINT)
 					skb->is_from_recycler = 0;
 				skb_cb->flags |= ATH12K_SKB_TX_STATUS;
 				ret = ath12k_dp_tx_hw_enqueue(arvif, skb);
