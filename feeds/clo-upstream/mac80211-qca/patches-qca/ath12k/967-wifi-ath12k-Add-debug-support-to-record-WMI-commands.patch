From 0003f406f857fb2997bf77e3ff6c770e853d8622 Mon Sep 17 00:00:00 2001
From: Amit Pandit <quic_pamit@quicinc.com>
Date: Sun, 31 Dec 2023 18:59:28 +0530
Subject: [PATCH] wifi : ath12k : Add debug support to record WMI commands and
 events

Support added for storing wmi commands,
wmi tx compelete commands,
wmi events received from the FW.

We would be supporting until the last 1024 commands,
on both TX and RX path of the CE.

Signed-off-by: Amit Pandit <quic_pamit@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 22 ++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h | 56 +++++++++++++++++++++++++++
 2 files changed, 76 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -698,6 +698,7 @@ static int ath12k_wmi_cmd_send_nowait(st
 
 	cmd_hdr = (struct wmi_cmd_hdr *)skb->data;
 	cmd_hdr->cmd_id = le32_encode_bits(cmd_id, WMI_CMD_HDR_CMD_ID);
+	WMI_COMMAND_RECORD(wmi, skb, cmd_id);
 
 	memset(skb_cb, 0, sizeof(*skb_cb));
 	ret = ath12k_htc_send(&ab->htc, wmi->eid, skb);
@@ -9604,11 +9605,16 @@ static void ath12k_wmi_htc_tx_complete(s
 				       struct sk_buff *skb)
 {
 	struct ath12k_wmi_pdev *wmi = NULL;
+	struct wmi_cmd_hdr *cmd_hdr;
 	u32 i;
 	u8 wmi_ep_count;
 	u8 eid;
+	enum wmi_tlv_cmd_id id;
 
 	eid = ATH12K_SKB_CB(skb)->eid;
+	skb_pull(skb, sizeof(struct ath12k_htc_hdr));
+	cmd_hdr = (struct wmi_cmd_hdr *)skb->data;
+	id = le32_get_bits(cmd_hdr->cmd_id, WMI_CMD_HDR_CMD_ID);
 	dev_kfree_skb(skb);
 
 	if (eid >= ATH12K_HTC_EP_COUNT)
@@ -9625,8 +9631,10 @@ static void ath12k_wmi_htc_tx_complete(s
 		}
 	}
 
-	if (wmi)
+	if (wmi) {
+		WMI_COMMAND_TX_CMP_RECORD(wmi, id);
 		wake_up(&wmi->tx_ce_desc_wq);
+	}
 }
 
 static int ath12k_reg_handle_chan_list(struct ath12k_base *ab,
@@ -15517,13 +15525,33 @@ static void ath12k_wmi_op_rx(struct ath1
 {
 	struct wmi_cmd_hdr *cmd_hdr;
 	enum wmi_tlv_event_id id;
+	struct ath12k_wmi_pdev *wmi = NULL;
+	u32 i;
+	u8 eid, wmi_ep_count;
 
+	eid = ATH12K_SKB_CB(skb)->eid;
 	cmd_hdr = (struct wmi_cmd_hdr *)skb->data;
 	id = le32_get_bits(cmd_hdr->cmd_id, WMI_CMD_HDR_CMD_ID);
 
+	wmi_ep_count = ab->htc.wmi_ep_count;
+
 	if (!skb_pull(skb, sizeof(struct wmi_cmd_hdr)))
 		goto out;
 
+	if (wmi_ep_count <= ab->hw_params->max_radios) {
+		for (i = 0; i < ab->htc.wmi_ep_count; i++) {
+			if (ab->wmi_ab.wmi[i].eid == eid) {
+				wmi = &ab->wmi_ab.wmi[i];
+				break;
+			}
+		}
+	}
+
+	if (wmi) {
+		if (id != WMI_DIAG_EVENTID && id != WMI_MGMT_RX_EVENTID)
+			WMI_EVENT_RX_RECORD(wmi, skb, id);
+	}
+
 	switch (id) {
 		/* Process all the WMI events here */
 	case WMI_SERVICE_READY_EVENTID:
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -8367,12 +8367,72 @@ struct wmi_dbglog_config_cmd_fixed_param
 #define WMI_SEND_TIMEOUT_HZ (3 * HZ)
 #define WMI_CTRL_STATS_READY_TIMEOUT_HZ (1 * HZ)
 
+#define WMI_CMD_EVT_DEBUG_MAX_ENTRY 1024
+#define WMI_DEBUG_ENTRY_MAX_LENGTH (16)
+
+#define WMI_COMMAND_RECORD(wmi, skb, id) {				 \
+	if (wmi->dbg_cmd_tail_idx >= WMI_CMD_EVT_DEBUG_MAX_ENTRY)	 \
+		wmi->dbg_cmd_tail_idx = 0;				 \
+	wmi->wmi_cmd_log[wmi->dbg_cmd_tail_idx].cmdid = id;		 \
+	memcpy(wmi->wmi_cmd_log[wmi->dbg_cmd_tail_idx].data, skb->data + \
+		sizeof(struct wmi_cmd_hdr), WMI_DEBUG_ENTRY_MAX_LENGTH); \
+	wmi->wmi_cmd_log[wmi->dbg_cmd_tail_idx].time = 			 \
+		ktime_to_us(ktime_get());				 \
+	wmi->dbg_cmd_tail_idx++;					 \
+}
+
+#define WMI_COMMAND_TX_CMP_RECORD(wmi, id) {		    	            \
+	if (wmi->dbg_cmd_tx_cmp_tail_idx >= WMI_CMD_EVT_DEBUG_MAX_ENTRY)    \
+		wmi->dbg_cmd_tx_cmp_tail_idx = 0;			    \
+	wmi->wmi_cmd_tx_cmp_log[wmi->dbg_cmd_tx_cmp_tail_idx].cmdid = id;   \
+	wmi->wmi_cmd_tx_cmp_log[wmi->dbg_cmd_tx_cmp_tail_idx].time = 	    \
+		ktime_to_us(ktime_get());				    \
+	wmi->dbg_cmd_tx_cmp_tail_idx++;					    \
+}
+
+#define WMI_EVENT_RX_RECORD(wmi, skb, id) {				\
+	if (wmi->dbg_evt_tail_idx >= WMI_CMD_EVT_DEBUG_MAX_ENTRY)	\
+		wmi->dbg_evt_tail_idx = 0;				\
+	wmi->wmi_evt_log[wmi->dbg_evt_tail_idx].eventid = id;		\
+	memcpy(wmi->wmi_evt_log[wmi->dbg_evt_tail_idx].data, skb->data,	\
+		WMI_DEBUG_ENTRY_MAX_LENGTH);				\
+	wmi->wmi_evt_log[wmi->dbg_evt_tail_idx].time =			\
+		ktime_to_us(ktime_get());				\
+	wmi->dbg_evt_tail_idx++;					\
+}
+
+struct wmi_cmd_debug {
+	enum wmi_tlv_cmd_id cmdid;
+	/* WMI event data excluding TLV header */
+	uint32_t data[WMI_DEBUG_ENTRY_MAX_LENGTH / sizeof(uint32_t)];
+	uint64_t time;
+};
+
+struct wmi_cmd_comp_debug {
+	enum wmi_tlv_cmd_id cmdid;
+	uint64_t time;
+};
+
+struct wmi_event_debug {
+	enum wmi_tlv_event_id eventid;
+	/* WMI event data excluding TLV header */
+	uint32_t data[WMI_DEBUG_ENTRY_MAX_LENGTH / sizeof(uint32_t)];
+	uint64_t time;
+};
+
 struct ath12k_wmi_pdev {
 	struct ath12k_wmi_base *wmi_ab;
 	enum ath12k_htc_ep_id eid;
 	const struct wmi_peer_flags_map *peer_flags;
 	u32 rx_decap_mode;
 	wait_queue_head_t tx_ce_desc_wq;
+
+	struct wmi_cmd_debug wmi_cmd_log[WMI_CMD_EVT_DEBUG_MAX_ENTRY];
+	struct wmi_cmd_comp_debug wmi_cmd_tx_cmp_log[WMI_CMD_EVT_DEBUG_MAX_ENTRY];
+	struct wmi_event_debug wmi_evt_log[WMI_CMD_EVT_DEBUG_MAX_ENTRY];
+	u16 dbg_cmd_tail_idx;
+	u16 dbg_cmd_tx_cmp_tail_idx;
+	u16 dbg_evt_tail_idx;
 };
 
 struct ath12k_wmi_base {
--- a/drivers/net/wireless/ath/ath12k/htc.c
+++ b/drivers/net/wireless/ath/ath12k/htc.c
@@ -284,6 +284,7 @@ void ath12k_htc_rx_completion_handler(st
 	size_t min_len;
 	u8 eid;
 	bool trailer_present;
+	struct ath12k_skb_cb *skb_cb;
 
 	hdr = (struct ath12k_htc_hdr *)skb->data;
 	skb_pull(skb, sizeof(*hdr));
@@ -386,6 +387,8 @@ void ath12k_htc_rx_completion_handler(st
 		goto out;
 	}
 
+	skb_cb = ATH12K_SKB_CB(skb);
+	skb_cb->eid = eid;
 	ath12k_dbg(ab, ATH12K_DBG_HTC, "htc rx completion ep %d skb %pK\n",
 		   eid, skb);
 	ep->ep_ops.ep_rx_complete(ab, skb);
