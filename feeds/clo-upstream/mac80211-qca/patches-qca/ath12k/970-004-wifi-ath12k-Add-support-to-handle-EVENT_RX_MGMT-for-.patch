From 3a755b61c81b00f5d7bdf442d797407c06b5f699 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Fri, 9 Aug 2024 16:00:31 +0530
Subject: [PATCH 4/4] wifi: ath12k: Add support to handle EVENT_RX_MGMT for
 link reconfigure

Since, in offloaded driver firmware will take care of decrementing the AP
removal timer(TBTT), there is a need to inform kernel/userspace about the
latest TBTT count whenever there is a probe request or a association request
received for that link or as a broadcast request to the MLD in which the
affected link is present. In-order to achieve this, firmware will use the
existing WMI_MGMT_RX_EVENTID along with new TLV
WMI_TAG_MLO_LINK_REMOVAL_TBTT_COUNT.

Add handlers to parse the new TLV received and update the kernel about the
newly received TBTT value.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 100 +++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h |   8 +++
 2 files changed, 107 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -134,8 +134,12 @@ struct wmi_tlv_mgmt_rx_parse {
 	struct ath12k_wmi_mgmt_rx_reo_params *reo_params;
 	struct ath12k_wmi_mgmt_rx_fw_consumed_hdr *fw_consumed_reo_params;
 	struct ath12k_mgmt_rx_cu_arg cu_params;
+	struct ath12k_wmi_mgmt_rx_mlo_link_removal_info
+		*link_removal_info[TARGET_NUM_VDEVS * ATH12K_WMI_MLO_MAX_LINKS];
+	u32 num_link_removal_info_count;
 	bool mgmt_ml_info_done;
 	bool bpcc_buf_done;
+	bool parse_link_removal_info_done;
 };
 
 static const struct ath12k_wmi_tlv_policy ath12k_wmi_tlv_policies[] = {
@@ -8301,6 +8305,12 @@ static int ath12k_wmi_mgmt_rx_sub_tlv_pa
 			le32_get_bits(rx_cu_params_tlv->cu_vdev_map_4, CU_VDEV_MAP_HB);
 		parse->mgmt_ml_info_done = true;
 		break;
+	case WMI_TAG_MLO_LINK_REMOVAL_TBTT_COUNT:
+		parse->link_removal_info[parse->num_link_removal_info_count] =
+			(struct ath12k_wmi_mgmt_rx_mlo_link_removal_info *)ptr;
+		parse->num_link_removal_info_count++;
+		parse->parse_link_removal_info_done = true;
+		break;
 	}
 	return 0;
 }
@@ -8445,6 +8455,82 @@ static void ath12k_update_cu_params(stru
 	}
 }
 
+static void
+ath12k_update_link_removal_params(struct ath12k_base *ab,
+				  const struct ath12k_mgmt_rx_mlo_link_removal_info *params,
+				  u32 num_link_removal_params)
+{
+	struct ath12k *ar;
+	struct ath12k_link_vif *arvif;
+	struct ath12k_mgmt_rx_mlo_link_removal_info *info;
+	u32 i;
+
+	/*
+	 * If a broadcast probe request is received on a given pdev, FW sends MLO link
+	 * removal information for all AP MLDs which satisfy both conditions below
+	 * 	1) The AP MLD has one APs being removed.
+	 * 	2) The AP MLD has a BSS on the pdev on which the broadcast probe request is received
+	 */
+	for (i = 0; i < num_link_removal_params; i++) {
+		info = &params[i];
+
+		if (info->hw_link_id > ATH12K_GROUP_MAX_RADIO) {
+			ath12k_warn(ab, "Wrong hw_link_id received:%d\n",
+				    info->hw_link_id);
+			continue;
+		}
+
+		rcu_read_lock();
+		ar = rcu_dereference(ab->ag->hw_links[info->hw_link_id]);
+
+		if (!ar) {
+			rcu_read_unlock();
+			ath12k_warn(ab, "Couldn't fetch hw links for hw_link_id:%d\n",
+				    info->hw_link_id);
+			continue;
+		}
+
+		arvif = ath12k_mac_get_arvif(ar, info->vdev_id);
+		if (!arvif) {
+			rcu_read_unlock();
+			ath12k_err(ab, "Error in getting arvif from vdev id:%d info link:%d\n",
+				   info->vdev_id, info->hw_link_id);
+			continue;
+		}
+		rcu_read_unlock();
+
+		/* update mac80211 only if tbtt_count is greater than 0 */
+		if (arvif->is_up && arvif->ahvif->vif->valid_links && info->tbtt_count)
+			ieee80211_link_removal_count_update(arvif->ahvif->vif,
+							    arvif->link_id,
+							    info->tbtt_count);
+	}
+}
+
+static void ath12k_wmi_update_ml_link_removal_info_count(struct ath12k_base *ab,
+							 struct ath12k_wmi_mgmt_rx_arg *hdr,
+							 struct wmi_tlv_mgmt_rx_parse *parse)
+{
+	u32 tbtt_val;
+	int idx;
+
+	hdr->num_link_removal_info = parse->num_link_removal_info_count;
+
+	for (idx = 0; idx < hdr->num_link_removal_info; idx++) {
+		tbtt_val = le32_to_cpu(parse->link_removal_info[idx]->tbtt_info);
+
+		hdr->link_removal_info[idx].vdev_id =
+			le16_get_bits(tbtt_val,
+				      WMI_MGMT_RX_MLO_LINK_REMOVAL_INFO_VDEV_ID_GET);
+		hdr->link_removal_info[idx].hw_link_id =
+			le16_get_bits(tbtt_val,
+				      WMI_MGMT_RX_MLO_LINK_REMOVAL_INFO_HW_LINK_ID_GET);
+		hdr->link_removal_info[idx].tbtt_count =
+			le32_get_bits(tbtt_val,
+				      WMI_MGMT_RX_MLO_LINK_REMOVAL_INFO_TBTT_COUNT_GET);
+	}
+}
+
 static int ath12k_pull_mgmt_rx_params_tlv(struct ath12k_base *ab,
 					  struct sk_buff *skb,
 					  struct ath12k_wmi_mgmt_rx_arg *hdr)
@@ -8522,6 +8608,10 @@ static int ath12k_pull_mgmt_rx_params_tl
 		return -EPROTO;
 	}
 
+	/* ML link removal info TLV */
+	if (parse.num_link_removal_info_count)
+		ath12k_wmi_update_ml_link_removal_info_count(ab, hdr, &parse);
+
 	/* shift the sk_buff to point to `frame` */
 	skb_trim(skb, 0);
 	skb_put(skb, frame - skb->data);
@@ -12437,7 +12527,7 @@ static void ath12k_mgmt_rx_event(struct
 		return;
 	}
 
-
+	rx_ev->num_link_removal_info = 0;
 	if (ath12k_pull_mgmt_rx_params_tlv(ab, skb, rx_ev) != 0) {
 		ath12k_warn(ab, "failed to extract mgmt rx event");
 		dev_kfree_skb(skb);
@@ -12591,6 +12681,14 @@ skip_mgmt_stats:
 	if (ieee80211_is_beacon(hdr->frame_control))
 		ath12k_mac_handle_beacon(ar, skb);
 
+	/*
+	 * RX MLO Link removal info TLV. Parse this TLV only when
+	 * num_link_removal_info is present, otherwise ignore it.
+	 */
+	if (rx_ev->num_link_removal_info)
+		ath12k_update_link_removal_params(ab, rx_ev->link_removal_info,
+						  rx_ev->num_link_removal_info);
+
 	if (!(ag->mlo_mem.is_mlo_mem_avail && ag->mgmt_rx_reorder))
 		goto pass_up;
 
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -6710,6 +6710,31 @@ struct ath12k_wmi_mlo_link_removal_event
 	struct ath12k_mlo_link_removal_tbtt_update tbtt_info;
 }__packed;
 
+/**
+ * struct ath12k_wmi_mgmt_rx_mlo_link_removal_info - MLO Link removal tbtt
+ * count
+ * @tbtt_info - Contains vdev_id, link_id and tbtt_count for each Link in which
+ * removal is scheduled.
+ */
+#define WMI_MGMT_RX_MLO_LINK_REMOVAL_INFO_VDEV_ID_GET    GENMASK(7, 0)
+#define WMI_MGMT_RX_MLO_LINK_REMOVAL_INFO_HW_LINK_ID_GET GENMASK(15, 8)
+#define WMI_MGMT_RX_MLO_LINK_REMOVAL_INFO_TBTT_COUNT_GET GENMASK(31, 16)
+
+struct ath12k_wmi_mgmt_rx_mlo_link_removal_info {
+	/*
+	 * vdev_id: Lower 0-7 bits
+	 * link_id: 8-15 bits
+	 * tbtt_count: 16-31 bits
+	 */
+	__le32 tbtt_info;
+};
+
+struct ath12k_mgmt_rx_mlo_link_removal_info {
+	__le16 vdev_id;
+	__le16 hw_link_id;
+	__le32 tbtt_count;
+}__packed;
+
 struct ath12k_wmi_mgmt_rx_arg {
 	u32 chan_freq;
 	u32 channel;
@@ -6724,6 +6749,14 @@ struct ath12k_wmi_mgmt_rx_arg {
 	u32 tsf_delta;
 	u8 pdev_id;
 	struct ath12k_mgmt_rx_reo_params reo_params;
+	u32 num_link_removal_info;
+#ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
+	struct ath12k_mgmt_rx_mlo_link_removal_info link_removal_info
+		[9 /* TARGET_NUM_VDEVS */ * ATH12K_WMI_MLO_MAX_LINKS];
+#else
+	struct ath12k_mgmt_rx_mlo_link_removal_info link_removal_info
+		[17 /* TARGET_NUM_VDEVS */ * ATH12K_WMI_MLO_MAX_LINKS];
+#endif /* CPTCFG_ATH12K_MEM_PROFILE_512M */
 };
 
 /**
