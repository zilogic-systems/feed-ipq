From 6d575281b35d7361d0fb69bc9378b22592f18d1e Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 31 Jul 2024 14:19:37 -0700
Subject: [PATCH] QSDK: wifi: ath12k: Enhance DS with VP Profile Exhaustion
 Fallback Mechanism

Currently, when available PPE VP profiles get exhausted even
for one of link VIFs, corresponding net device's PPE VP is also
freed there by not supporting any of the PPE acceleration
mechanisms (DS, Active, Passive).
Enhance this by not freeing PPE VP and instead returning
invalid node id when ECM queries DS node id using
ath12k_ds_get_node_id. This would imply
1. in MLO, DS acceleration will still be supported when primary
   link VIF(arvif) has VP profile although other links do not
   have VP profiles.
2. when flows are destined to link VIF without VP profile, ECM
   by default, uses round-robin fashion of distributing the flows
   across CPU cores using Passive PPE acceleration mechanism.

Patch-dependency: 951-c-QSDK-wifi-ath12k-support-DS-for-SLO-and-MLO-AP-modes.patch
Patch-work: None

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/accel_cfg.c |  3 ++-
 drivers/net/wireless/ath/ath12k/dp.h        |  2 +-
 drivers/net/wireless/ath/ath12k/mac.c       |  5 +++-
 drivers/net/wireless/ath/ath12k/ppe.c       | 28 ++++++++++-----------
 drivers/net/wireless/ath/ath12k/ppe.h       |  2 +-
 5 files changed, 22 insertions(+), 18 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/accel_cfg.c
+++ b/drivers/net/wireless/ath/ath12k/accel_cfg.c
@@ -94,7 +94,8 @@ static bool ath12k_ds_get_node_id(struct
 	ab = arvif->ab;
 
 	/* Update and return DS node_id only if the chipset support DS*/
-	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
+	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags) ||
+	    arvif->ppe_vp_profile_idx == ATH12K_INVALID_VP_PROFILE_IDX)
 		goto unlock_n_fail;
 
 	*node_id = ab->ppe.ds_node_id;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5740,6 +5740,11 @@ ath12k_mac_assign_link_vif(struct ath12k
 	INIT_WORK(&arvif->update_obss_color_notify_work, ath12k_update_obss_color_notify_work);
 	INIT_WORK(&arvif->update_bcn_template_work, ath12k_update_bcn_template_work);
 
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	/* Initialize per link specific PPE data */
+	arvif->ppe_vp_profile_idx = ATH12K_INVALID_VP_PROFILE_IDX;
+#endif
+
 	return arvif;
 }
 
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -644,7 +644,7 @@ static int ath12k_dp_ppeds_alloc_vp_tbl_
 	int i;
 
 	mutex_lock(&ab->ppe.ppe_vp_tbl_lock);
-	if (ab->ppe.num_ppe_vp_profiles == PPE_VP_ENTRIES_MAX) {
+	if (ab->ppe.num_ppe_vp_entries == PPE_VP_ENTRIES_MAX) {
 		mutex_unlock(&ab->ppe.ppe_vp_tbl_lock);
 		ath12k_err(ab, "Maximum ppe_vp count reached for soc\n");
 		return -ENOSR;
@@ -831,15 +831,19 @@ void ath12k_dp_ppeds_update_vp_entry(str
 static int ath12k_ppeds_attach_link_apvlan_vif(struct ath12k_link_vif *arvif, int vp_num,
 					       struct ath12k_vlan_iface *vlan_iface, int link_id)
 {
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(arvif->ahvif->vif);
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_base *ab = ar->ab;
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_dp_ppe_vp_profile *vp_profile = NULL;
-	int ppe_vp_profile_idx, ppe_vp_tbl_idx;
+	int ppe_vp_profile_idx, ppe_vp_tbl_idx = -1;
 	int ppe_vp_search_tbl_idx = -1;
 	int vdev_id = arvif->vdev_id;
 	int ret;
 
+	if (wdev == NULL)
+		return -EOPNOTSUPP;
+
 	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
 		return 0;
 
@@ -854,9 +858,10 @@ static int ath12k_ppeds_attach_link_apvl
 	/*Allocate a ppe vp profile for a vap */
 	ppe_vp_profile_idx = ath12k_dp_ppeds_alloc_ppe_vp_profile(ab, &vp_profile, vp_num);
 	if (!vp_profile) {
-		ath12k_err(ab, "Failed to allocate PPE VP idx for vdev_id:%d", vdev_id);
-		ret = -ENOSR;
-		goto vp_free;
+		ath12k_dbg(ab, ATH12K_DBG_PPE,
+			   "flows for %s link %d will use SFE RFS flow distribution",
+			   wdev->netdev->name, arvif->link_id);
+		return 0;
 	}
 
 	if (vp_profile->ref_count == 1) {
@@ -923,8 +928,6 @@ dealloc_vp_tbl_entry:
 	ath12k_dp_ppeds_dealloc_vp_tbl_entry(ab, vp_profile->ppe_vp_num_idx);
 dealloc_vp_profile:
 	ath12k_dp_ppeds_dealloc_ppe_vp_profile(ab, ppe_vp_profile_idx);
-vp_free:
-	ppe_ds_wlan_vp_free(ab->ppe.ppeds_handle, vp_num);
 
 	return ret;
 }
@@ -960,17 +963,21 @@ int ath12k_ppeds_attach_link_vif(struct
 				 int *link_ppe_vp_profile_idx,
 				 struct ieee80211_vif *vif)
 {
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(arvif->ahvif->vif);
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_base *ab = ar->ab;
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_dp_ppe_vp_profile *vp_profile = NULL;
 	struct ieee80211_sta *sta;
 	struct ath12k_sta *ahsta;
-	int ppe_vp_profile_idx, ppe_vp_tbl_idx;
+	int ppe_vp_profile_idx, ppe_vp_tbl_idx = -1;
 	int ppe_vp_search_tbl_idx = -1;
 	int vdev_id = arvif->vdev_id;
 	int ret;
 
+	if (wdev == NULL)
+		return -EOPNOTSUPP;
+
 	if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags))
 		return 0;
 
@@ -991,9 +998,10 @@ int ath12k_ppeds_attach_link_vif(struct
 	/*Allocate a ppe vp profile for a vap */
 	ppe_vp_profile_idx = ath12k_dp_ppeds_alloc_ppe_vp_profile(ab, &vp_profile, vp_num);
 	if (!vp_profile) {
-		ath12k_err(ab, "Failed to allocate PPE VP idx for vdev_id:%d", vdev_id);
-		ret = -ENOSR;
-		goto vp_free;
+		ath12k_dbg(ab, ATH12K_DBG_PPE,
+			   "flows for %s link %d will use SFE RFS flow distribution",
+			   wdev->netdev->name, arvif->link_id);
+		return 0;
 	}
 
 	if (vp_profile->ref_count == 1) {
@@ -1092,8 +1100,6 @@ dealloc_vp_tbl_entry:
 	ath12k_dp_ppeds_dealloc_vp_tbl_entry(ab, vp_profile->ppe_vp_num_idx);
 dealloc_vp_profile:
 	ath12k_dp_ppeds_dealloc_ppe_vp_profile(ab, ppe_vp_profile_idx);
-vp_free:
-	ppe_ds_wlan_vp_free(ab->ppe.ppeds_handle, vp_num);
 
 	return ret;
 }
@@ -1152,7 +1158,7 @@ void ath12k_ppeds_detach_link_apvlan_vif
 
 	ath12k_dp_ppeds_dealloc_vp_tbl_entry(ab, vp_profile->ppe_vp_num_idx);
 	ath12k_dp_ppeds_dealloc_ppe_vp_profile(ab, ppe_vp_profile_idx);
-	vlan_iface->ppe_vp_profile_idx[link_id] = ATH12k_INVALID_VP_PROFILE_IDX;
+	vlan_iface->ppe_vp_profile_idx[link_id] = ATH12K_INVALID_VP_PROFILE_IDX;
 	ath12k_dbg(ab, ATH12K_DBG_PPE,
 		   "PPEDS vdev detach success vpnum %d  ppe_vp_profile_idx %d\n",
 		   vp_profile->vp_num, ppe_vp_profile_idx);
@@ -1173,8 +1179,8 @@ void ath12k_ppeds_detach_link_vif(struct
 
 	vp_profile = &ab->dp.ppe_vp_profile[ppe_vp_profile_idx];
 	if (!vp_profile->is_configured) {
-		ath12k_err(ab, "Invalid PPE VP profile for vdev_id:%d",
-			   arvif->vdev_id);
+		ath12k_dbg(ab, ATH12K_DBG_PPE,
+			   "No PPE VP profile found for vdev_id:%d", arvif->vdev_id);
 		return;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -23,7 +23,7 @@ struct ath12k_vlan_iface;
 
 #define ATH12K_INVALID_PPE_VP_NUM -1
 #define ATH12K_INVALID_PPE_VP_TYPE -1
-#define ATH12k_INVALID_VP_PROFILE_IDX	-1
+#define ATH12K_INVALID_VP_PROFILE_IDX	-1
 
 extern bool ath12k_ppe_rfs_support;
 extern unsigned int ath12k_mlo_capable;
