From 2fa9a70a4cb2b63839714a87e2b72d44d7e9f665 Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Fri, 9 Aug 2024 12:07:25 +0530
Subject: [PATCH] wifi: ath12k: Support WMI peer create confirmation event

When Host sends peer create WMI cmd to firmware, firmware will reposnd
with peer create confirmation event with status success or reason code
upon failure. As per firmware only in case of success, HTT peer map
event will be sent by firmware.

Currently, Host is not parsing the event and hence not aware of peer
creation status. Add support to parse the peer conf event ID from
firmware and print a warning in case of failure for debuggability.

No change in design to wait for the event to continue with peer map
parsing.

Patch-dependency : None
Patch-work: None

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 49 +++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h | 22 ++++++++++++
 2 files changed, 71 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -198,6 +198,8 @@ static const struct ath12k_wmi_tlv_polic
 		.min_len = sizeof(struct wmi_6ghz_afc_channel_info) },
 	[WMI_TAG_AFC_CHAN_EIRP_POWER_INFO] = {
 		.min_len = sizeof(struct wmi_afc_chan_eirp_power_info) },
+	[WMI_TAG_PEER_CREATE_RESP_EVENT] = {
+		.min_len = sizeof(struct ath12k_wmi_peer_create_conf_ev) },
 };
 
 static const u32 eml_trans_timeout[EMLCAP_TIMEOUT_MAX] = {
@@ -15545,6 +15547,58 @@ void ath12k_wmi_event_tbttoffset_update(
 		ath12k_warn(ab, "failed to parse tbtt offset event: %d\n", ret);
 }
 
+static long int
+ath12k_pull_peer_create_conf_ev(struct ath12k_base *ab,
+				struct sk_buff *skb,
+				struct ath12k_wmi_peer_create_conf_arg *arg)
+{
+	const void **tb;
+	const struct ath12k_wmi_peer_create_conf_ev *ev;
+	long int ret;
+
+	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
+	if (IS_ERR(tb)) {
+		ret = PTR_ERR(tb);
+		ath12k_warn(ab, "failed to parse tlv: %ld\n", ret);
+		return ret;
+	}
+
+	ev = tb[WMI_TAG_PEER_CREATE_RESP_EVENT];
+	if (!ev) {
+		ath12k_warn(ab, "failed to fetch peer create response ev");
+		kfree(tb);
+		return -EPROTO;
+	}
+
+	arg->vdev_id = __le32_to_cpu(ev->vdev_id);
+	ether_addr_copy(arg->mac_addr, ev->peer_macaddr.addr);
+	arg->status = __le32_to_cpu(ev->status);
+
+	kfree(tb);
+	return 0;
+}
+
+static void ath12k_wmi_peer_create_conf_event(struct ath12k_base *ab,
+					      struct sk_buff *skb)
+{
+	struct ath12k_wmi_peer_create_conf_arg arg = {};
+
+	if (ath12k_pull_peer_create_conf_ev(ab, skb, &arg)) {
+		ath12k_warn(ab, "failed to extract peer create conf event");
+		return;
+	}
+
+	if (arg.status != ATH12K_WMI_PEER_CREATE_SUCCESS) {
+		ath12k_warn(ab, "Peer %pM creation failed due to %d",
+			    arg.mac_addr, arg.status);
+		return;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_PEER,
+		   "Peer create conf event for %pM status %d",
+		   arg.mac_addr, arg.status);
+}
+
 static void ath12k_wmi_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -15748,6 +15802,9 @@ static void ath12k_wmi_op_rx(struct ath1
 	case WMI_AFC_EVENTID:
 		ath12k_wmi_afc_event(ab, skb);
 		break;
+	case WMI_PEER_CREATE_CONF_EVENTID:
+		ath12k_wmi_peer_create_conf_event(ab, skb);
+		break;
 	/* TODO: Add remaining events */
 	default:
 		ath12k_dbg(ab, ATH12K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -944,6 +944,7 @@ enum wmi_tlv_event_id {
 	WMI_PEER_OPER_MODE_CHANGE_EVENTID,
 	WMI_PEER_TX_PN_RESPONSE_EVENTID,
 	WMI_PEER_CFR_CAPTURE_EVENTID,
+	WMI_PEER_CREATE_CONF_EVENTID,
 	WMI_MGMT_RX_EVENTID = WMI_TLV_CMD(WMI_GRP_MGMT),
 	WMI_HOST_SWBA_EVENTID,
 	WMI_TBTTOFFSET_UPDATE_EVENTID,
@@ -2159,6 +2160,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_CFR_CAPTURE_PHASE_PARAM = 0x33b,
 	WMI_TAG_SERVICE_READY_EXT2_EVENT = 0x334,
 	WMI_TAG_FILS_DISCOVERY_TMPL_CMD = 0x344,
+	WMI_TAG_PEER_CREATE_RESP_EVENT = 0x364,
 	WMI_TAG_MULTIPLE_VDEV_RESTART_RESPONSE_EVENT = 0x365,
 	WMI_TAG_MAC_PHY_CAPABILITIES_EXT = 0x36F,
 	WMI_TAG_PDEV_SRG_BSS_COLOR_BITMAP_CMD = 0x37b,
@@ -6766,6 +6768,26 @@ struct wmi_peer_sta_kickout_event {
 	__le32 rssi;
 } __packed;
 
+typedef enum {
+	ATH12K_WMI_PEER_CREATE_SUCCESS,
+	ATH12K_WMI_PEER_BSS_PEER_EXISTS,
+	ATH12K_WMI_PEER_AST_FULL,
+
+	ATH12K_WMI_PEER_CREATRE_STATUS_MAX
+} ath12k_peer_create_conf_status;
+
+struct ath12k_wmi_peer_create_conf_ev {
+	__le32 vdev_id;
+	struct ath12k_wmi_mac_addr_params peer_macaddr;
+	__le32 status;
+} __packed;
+
+struct ath12k_wmi_peer_create_conf_arg {
+	u32 vdev_id;
+	u8 mac_addr[ETH_ALEN];
+	u32 status;
+};
+
 enum wmi_roam_reason {
 	WMI_ROAM_REASON_BETTER_AP = 1,
 	WMI_ROAM_REASON_BEACON_MISS = 2,
