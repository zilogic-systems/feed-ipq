From 63805725e6653ca2f761ebd005116266189391e3 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 21 Aug 2024 11:07:32 +0530
Subject: [PATCH 5/6] QSDK: ath12k: add sfe fast rx counter

Add SoC DP statistics to track packets going via the simple fast RX
path.

Patch dependency: None

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  3 ++-
 drivers/net/wireless/ath/ath12k/debugfs.c | 17 +++++++++++++----
 drivers/net/wireless/ath/ath12k/dp_rx.c   |  4 ++--
 3 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 9d8a2ce..71ae292 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1340,7 +1340,8 @@ struct ath12k_soc_dp_stats {
 	u32 tx_completed[MAX_TCL_RING];
 	u32 null_tx_complete[MAX_TCL_RING];
 	u32 reo_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
-	u32 fast_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
+	u32 ppe_vp_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
+	u32 sfe_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
 	u32 non_fast_unicast_rx[DP_REO_DST_RING_MAX][ATH12K_MAX_SOCS];
 	u32 non_fast_mcast_rx[DP_REO_DST_RING_MAX][ATH12K_MAX_SOCS];
 	u32 eapol_rx[DP_REO_DST_RING_MAX][ATH12K_MAX_SOCS];
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 9b9f306..e59edd1 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2035,14 +2035,23 @@ static ssize_t ath12k_debugfs_dump_soc_dp_stats(struct file *file,
 				 soc_stats->reo_rx[i][1],
 				 soc_stats->reo_rx[i][2]);
 
-	len += scnprintf(buf + len, size - len, "\nREO Fast Rx:\n");
+	len += scnprintf(buf + len, size - len, "\nREO SFE Rx:\n");
 	for (i = 0; i < DP_REO_DST_RING_MAX; i++)
 		len += scnprintf(buf + len, size - len,
 				 "Ring%d: 0:%u\t1:%u\t2:%u\n",
 				 i + 1,
-				 soc_stats->fast_rx[i][0],
-				 soc_stats->fast_rx[i][1],
-				 soc_stats->fast_rx[i][2]);
+				 soc_stats->sfe_rx[i][0],
+				 soc_stats->sfe_rx[i][1],
+				 soc_stats->sfe_rx[i][2]);
+
+	len += scnprintf(buf + len, size - len, "\nREO PPE VP Rx:\n");
+	for (i = 0; i < DP_REO_DST_RING_MAX; i++)
+		len += scnprintf(buf + len, size - len,
+				 "Ring%d: 0:%u\t1:%u\t2:%u\n",
+				 i + 1,
+				 soc_stats->ppe_vp_rx[i][0],
+				 soc_stats->ppe_vp_rx[i][1],
+				 soc_stats->ppe_vp_rx[i][2]);
 
 	len += scnprintf(buf + len, size - len, "\nREO Non-Fast Rx:\n");
 	for (i = 0; i < DP_REO_DST_RING_MAX; i++)
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 30431d8..38614db 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3704,7 +3704,7 @@ try_again:
 					msdu->protocol = eth_type_trans(msdu, peer->dev);
 					rcu_read_unlock();
 					netif_receive_skb(msdu);
-					ab->soc_stats.fast_rx[ring_id][ab->chip_id]++;
+					ab->soc_stats.sfe_rx[ring_id][ab->chip_id]++;
 					continue;
 				}
 			}
@@ -3758,7 +3758,7 @@ try_again:
 				ath12k_soc_dp_rx_stats(ar, msdu, &rx_info, ring_id);
 			ath12k_dp_rx_deliver_msdu(ar, napi, msdu, &rx_info);
 		} else {
-			ab->soc_stats.fast_rx[ring_id][ar->ab->chip_id]++;
+			ab->soc_stats.ppe_vp_rx[ring_id][ar->ab->chip_id]++;
 		}
 	}
 exit:
-- 
2.34.1

