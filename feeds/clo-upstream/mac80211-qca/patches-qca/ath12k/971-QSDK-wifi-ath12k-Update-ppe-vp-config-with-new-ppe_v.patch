From 6ad74d3c2eb8e2e04a2110f1deed5cb489fbea3d Mon Sep 17 00:00:00 2001
From: Neha Bisht <quic_nbisht@quicinc.com>
Date: Wed, 21 Aug 2024 12:46:45 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Update ppe vp config with new ppe_vp_type

In vendor_wifi_config_handler, in case a new updated ppe_vp_type is
received from hostapd then update the ppe_vp_type config.
This is a WAR for scenarios where vp_config is coming late from
vendor command and vp alloc happens before that only. In that case,
the default ppe_vp_type (Passive here) is configured.
Also, Use correct structure to update vp information.

Patch-dependency: 955-QSDK-wifi-ath12k-Handle-vendor-command-for-interface-offl.patch

Signed-off-by: Neha Bisht <quic_nbisht@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  1 +
 drivers/net/wireless/ath/ath12k/debugfs.c |  2 +
 drivers/net/wireless/ath/ath12k/ppe.c     | 21 +++-------
 drivers/net/wireless/ath/ath12k/vendor.c  | 51 ++++++++++++++++++++++-
 4 files changed, 57 insertions(+), 18 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 45fa3c0..4397208 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1318,6 +1318,7 @@ struct ath12k_soc_dp_tx_err_stats {
 };
 
 struct ath12k_soc_dp_stats {
+	u32 ppe_vp_mode_update_fail;
 	u32 err_ring_pkts;
 	u32 invalid_rbm;
 	u32 rxdma_error[HAL_REO_ENTR_RING_RXDMA_ECODE_MAX];
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1882,6 +1882,8 @@ static ssize_t ath12k_debugfs_dump_soc_dp_stats(struct file *file,
 	}
 
 	len += scnprintf(buf + len, size - len, "SOC RX STATS:\n\n");
+	len += scnprintf(buf + len, size - len, "ppe vp mode update failure: %u\n",
+			 soc_stats->ppe_vp_mode_update_fail);
 	len += scnprintf(buf + len, size - len, "err ring pkts: %u\n",
 			 soc_stats->err_ring_pkts);
 	len += scnprintf(buf + len, size - len, "Invalid RBM: %u\n\n",
diff --git a/drivers/net/wireless/ath/ath12k/ppe.c b/drivers/net/wireless/ath/ath12k/ppe.c
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1611,28 +1611,17 @@ void ath12k_vif_free_vp(struct ath12k_vif *ahvif)
 int ath12k_vif_update_vp_config(struct ath12k_vif *ahvif, int ppe_vp_type)
 
 {
-	struct ppe_vp_ai vpai;
+	struct ppe_vp_ui vpui;
 	int ret;
 
 	if (ahvif->ppe_vp_num == ATH12K_INVALID_PPE_VP_NUM)
 		return -EINVAL;
 
 
-	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
-	vpai.type = PPE_VP_TYPE_SW_L2;
-	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
-	vpai.usr_type = ppe_vp_type;
-	vpai.core_mask = ahvif->ppe_core_mask;
-#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
-	/* Direct Switching */
-	if (ppe_vp_type == PPE_VP_USER_TYPE_DS) {
-		vpai.stats_cb = ath12k_stats_update_ppe_vp;
-		vpai.queue_num = 0;
-		vpai.net_dev_flags = PPE_VP_NET_DEV_FLAG_IS_MLD;
-
-	}
-#endif
-	ret = ppe_vp_cfg_update(ahvif->ppe_vp_num, &vpai);
+	memset(&vpui, 0, sizeof(struct ppe_vp_ui));
+	vpui.usr_type = ppe_vp_type;
+	vpui.core_mask = ahvif->ppe_core_mask;
+	ret = ppe_vp_cfg_update(ahvif->ppe_vp_num, &vpui);
 
 	if (ret) {
 		ath12k_err(NULL, "failed to update ppe vp config type %d err %d\n",
diff --git a/drivers/net/wireless/ath/ath12k/vendor.c b/drivers/net/wireless/ath/ath12k/vendor.c
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -1132,6 +1132,8 @@ static int ath12k_vendor_wifi_config_handler(struct wiphy *wihpy,
 	int ret = 0;
 	int ppe_vp_type = 0;
 	char *type = NULL;
+	struct ieee80211_vif *vif = NULL;
+	struct ath12k_vif *ahvif = NULL;
 
 	ret = nla_parse(tb, QCA_WLAN_VENDOR_ATTR_CONFIG_MAX, data, data_len,
 			ath12k_wifi_config_policy, NULL);
@@ -1172,8 +1174,55 @@ static int ath12k_vendor_wifi_config_handler(struct wiphy *wihpy,
 		ath12k_err(NULL, "Overriding offload type to passive as DS isn't enabled\n");
 	}
 
-	wdev->ppe_vp_type = ppe_vp_type;
-	/* TODO: Ignore if the same is reassigned and flush the existing ecm rules */
+	if (wdev->ppe_vp_type != ppe_vp_type)
+		wdev->ppe_vp_type = ppe_vp_type;
+	else
+		return ret;
+
+	vif = wdev_to_ieee80211_vif(wdev);
+	if (!vif) {
+		ath12k_dbg(NULL, ATH12K_DBG_PPE, "vif is NULL\n");
+		return ret;
+	}
+	if (vif->type == NL80211_IFTYPE_AP_VLAN) {
+		ath12k_dbg(NULL, ATH12K_DBG_PPE, "vif is AP_VLAN\n");
+		return ret;
+	}
+	ahvif = ath12k_vif_to_ahvif(vif);
+	if (!ahvif) {
+		ath12k_dbg(NULL, ATH12K_DBG_PPE, "ahvif is NULL\n");
+		return ret;
+	}
+	if (ppe_vp_type != ATH12K_INVALID_PPE_VP_TYPE && ahvif->ppe_vp_num != ATH12K_INVALID_PPE_VP_NUM) {
+		ret = ath12k_vif_update_vp_config(ahvif, ppe_vp_type);
+
+		if (ret) {
+			struct ath12k_hw *ah;
+			struct ath12k_hw_group *ag;
+			struct ath12k_base *ab;
+
+			ah = ahvif->ah;
+			if (!ah) {
+				ath12k_dbg(NULL, ATH12K_DBG_PPE, "ah is NULL\n");
+				return 0;
+			}
+			ag = ah->ag;
+			if (!ag) {
+				ath12k_dbg(NULL, ATH12K_DBG_PPE, "ag is NULL\n");
+				return 0;
+			}
+			ab = ag->ab[0];
+			if (!ab) {
+				ath12k_dbg(NULL, ATH12K_DBG_PPE, "ab is NULL\n");
+				return 0;
+			}
+
+			ab->soc_stats.ppe_vp_mode_update_fail++;
+			ath12k_dbg(NULL, ATH12K_DBG_PPE, "ppe_vp mode config update failed\n");
+		} else {
+			wdev->ppe_vp_type = ppe_vp_type;
+		}
+	}
 
 	ath12k_info(NULL,"[%s] vendor cmd type [%s] %d (%s) state %d\n",
 		    current->comm,  wdev->netdev->name, wdev->ppe_vp_type,
-- 
2.34.1

