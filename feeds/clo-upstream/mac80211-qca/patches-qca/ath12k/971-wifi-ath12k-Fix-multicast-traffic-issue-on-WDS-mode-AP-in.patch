From 22bfa6d69a07e1cb2f700c8667248adcde938e05 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Date: Wed, 14 Aug 2024 01:18:40 +0530
Subject: [PATCH] ath12k: Fix multicast traffic issue on WDS mode AP interface

In host we set WMI_VDEV_PARAM_AP_ENABLE_NAWDS when we configure a
interface as WDS AP and WDS sta connecting to the AP in eth mode.
Due to this flag fw expect all the multicsat traffic should come as
4addr frame, if the AP interface sends any multicast frame as
3addr frame type fw return the tx completion status as
HAL_WBM_REL_HTT_TX_COMP_STATUS_REINJ and leads to multicast
traffic failure for the 3addr clients connected to the AP.
To fix this by setting host inspected meta data flag for the
3addr multicast frame in driver before queueing the packet to
firmware/hardware will avoid fw returning to host with reinject
status and allow multicast traffic.

Patch dependency : 899-ath12k-Add-support-for-WDS-offload-enable.patc

Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h  | 1 +
 drivers/net/wireless/ath/ath12k/dp_tx.c | 4 ++++
 drivers/net/wireless/ath/ath12k/mac.c   | 1 +
 3 files changed, 6 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 52d9d361..a95e43ac 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -457,6 +457,7 @@ struct ath12k_link_vif {
 	bool mvr_processing;
 	bool pending_csa_up;
 	int num_stations;
+	bool nawds_enabled;
 
 	struct completion peer_ch_width_switch_send;
 	struct work_struct peer_ch_width_switch_work;
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 1241c75f..fd559ca1 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -500,10 +500,14 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 		ti.meta_data_flags = u32_encode_bits(HTT_TCL_META_DATA_TYPE_GLOBAL_SEQ_NUM,
 						     HTT_TCL_META_DATA_TYPE_MISSION) |
 				     u32_encode_bits(mcbc_gsn, HTT_TCL_META_DATA_GLOBAL_SEQ_NUM);
+		if (arvif->nawds_enabled)
+			ti.meta_data_flags |= u32_encode_bits(1, HTT_TCL_META_DATA_GLOBAL_SEQ_HOST_INSPECTED);
 		ti.vdev_id = arvif->vdev_id +
 			     HTT_TX_MLO_MCAST_HOST_REINJECT_BASE_VDEV_ID;
 	} else {
 		ti.vdev_id = arvif->vdev_id;
+		if (arvif->nawds_enabled && is_mcast && !skip_meta_data_flag)
+			ti.meta_data_flags |= u32_encode_bits(1, HTT_TCL_META_DATA_HOST_INSPECTED_MISSION);
 	}
 
 	ti.encap_type = ath12k_dp_tx_get_encap_type(ab, skb);
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 66b2a4f1..dd6764dd 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -7770,6 +7770,7 @@ static void ath12k_sta_set_4addr_wk(struct work_struct *wk)
 		if (ret)
 			ath12k_warn(ar->ab, "failed to set vdev %d nawds parameter: %d\n",
 				    arvif->vdev_id, ret);
+		arvif->nawds_enabled = true;
 	}
 }
 
-- 
2.34.1

