From a37e3e2339d80b9f6d9c809f5e2c6de59340c8aa Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Wed, 14 Aug 2024 16:21:35 -0700
Subject: [PATCH] wifi: ath12k: Improve synchronization of ahvif link with rcu

Replace direct access to ahvif->link with rcu_dereference and
rcu_dereference_protected to enhance synchronization and ensure safe
access to RCU-protected data.

Patch-Dependency: 972-01-wifi-ath12k-Introduce-RCU-Protection-to-safeguard-ar.patch
Patch-Work: None

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/accel_cfg.c |  7 +-
 drivers/net/wireless/ath/ath12k/core.c      |  2 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c     | 26 +++---
 drivers/net/wireless/ath/ath12k/fse.c       |  2 +-
 drivers/net/wireless/ath/ath12k/mac.c       | 91 +++++++++++++--------
 drivers/net/wireless/ath/ath12k/peer.c      |  4 +-
 drivers/net/wireless/ath/ath12k/ppe.c       |  4 +-
 drivers/net/wireless/ath/ath12k/sawf.c      |  6 +-
 drivers/net/wireless/ath/ath12k/testmode.c  |  2 +-
 9 files changed, 90 insertions(+), 54 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/accel_cfg.c
+++ b/drivers/net/wireless/ath/ath12k/accel_cfg.c
@@ -28,6 +28,7 @@ static bool ath12k_ds_get_node_id(struct
 	struct ath12k_sta *ahsta;
 	struct ath12k_link_vif *arvif;
 	struct ath12k_base *ab;
+	int link_id;
 
 	wdev = ndev->ieee80211_ptr;
 	if (!wdev) {
@@ -85,8 +86,9 @@ static bool ath12k_ds_get_node_id(struct
 	}
 
 	ahsta = ath12k_sta_to_ahsta(sta);
-	arvif = (!sta->mlo) ? ahvif->link[ahsta->deflink.link_id] :
-			ahvif->link[ahsta->primary_link_id];
+	link_id = (!sta->mlo) ? ahsta->deflink.link_id :
+				ahsta->primary_link_id;
+	arvif = ath12k_rcu_get_arvif_from_link_id(ahvif, link_id);
 
 	if (!arvif)
 		goto unlock_n_fail;
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -2593,7 +2593,7 @@ key_add:
 			if (sta->mlo) {
 				links = ahsta->links_map;
 				for_each_set_bit(link_id, &links, ATH12K_NUM_MAX_LINKS) {
-					arvif = ahvif->link[link_id];
+					arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 					arsta = ahsta->link[link_id];
 					if (WARN_ON(!arvif || !arsta))
 						continue;
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -841,6 +841,7 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	struct hal_tx_status ts_status = { 0 };
 	struct sk_buff *skb_ext_desc;
 	struct htt_tx_wbm_completion *status_desc;
+	struct ath12k_link_vif *arvif;
 	int ack_rssi;
 	u8 flags = 0;
 	u8 link_id;
@@ -871,14 +872,16 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	ahvif = (void *)vif->drv_priv;
 	link_id = skb_cb->link_id;
 	if (ahvif->links_map & BIT(link_id)) {
-		if (ahvif->link[link_id])
-			ahvif->link[link_id]->link_stats.tx_completed++;
-	} else {
+		rcu_read_lock();
+		arvif = ath12k_rcu_get_arvif_from_link_id(ahvif, link_id);
+		if (arvif)
+			arvif->link_stats.tx_completed++;
+		rcu_read_unlock();
+	} else
 		ath12k_warn(ab,
 			    "invalid linkid 0x%X in htt tx complete buf linkmap %lu\n",
 			    link_id,
 			    ahvif->links_map);
-	}
 
 	flags = skb_cb->flags;
 	info = IEEE80211_SKB_CB(msdu);
@@ -1100,6 +1103,7 @@ static void ath12k_dp_tx_complete_msdu(s
 	struct ath12k_skb_cb *skb_cb;
 	struct ath12k_peer *peer;
 	struct ath12k_link_sta *arsta;
+	struct ath12k_link_vif *arvif;
 	struct rate_info rate;
 	struct hal_tx_status ts = { 0 };
 	struct sk_buff *skb_ext_desc;
@@ -1141,14 +1145,17 @@ static void ath12k_dp_tx_complete_msdu(s
 	ahvif = (void *)vif->drv_priv;
 	link_id = skb_cb->link_id;
 	if (ahvif->links_map & BIT(link_id)) {
-		if (ahvif->link[link_id])
-			ahvif->link[link_id]->link_stats.tx_completed++;
-	} else {
+		rcu_read_lock();
+		arvif = ath12k_rcu_get_arvif_from_link_id(ahvif, link_id);
+		if (arvif)
+			arvif->link_stats.tx_completed++;
+		rcu_read_unlock();
+	} else
 		ath12k_warn(ar->ab,
 			    "invalid linkid 0x%X in tx complete msdu linkmap %lu\n",
 			    link_id,
 			    ahvif->links_map);
-	}
+
 
 	info = IEEE80211_SKB_CB(msdu);
 	memset(&info->status, 0, sizeof(info->status));
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1074,7 +1074,7 @@ struct ath12k *ath12k_get_ar_by_vif(stru
 	if (!(ahvif->links_map & BIT(link_id)))
 		return NULL;
 
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 	if (arvif && arvif->is_created)
 		ar = arvif->ar;
@@ -1364,6 +1364,10 @@ int ath12k_mac_partner_peer_cleanup(stru
 			/* get arvif */
 			vif = peer->vif;
 			ahvif = (struct ath12k_vif *)vif->drv_priv;
+			/* TODO: re-write this function or check if a data
+			 * structure needs to be modified to make a critical
+			 * section short.
+			 */
 			arvif = ahvif->link[link_id];
 
 			ar = arvif->ar;
@@ -2006,7 +2010,7 @@ static int ath12k_mac_setup_bcn_tmpl_ema
 	 * with tx arvif also
 	 */
 	lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
-	tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+	tx_arvif = ath12k_rcu_get_arvif_from_link_id(tx_ahvif, link->mbssid_tx_vif_linkid);
 	if (!tx_arvif) {
 		rcu_read_unlock();
 		return -ENOLINK;
@@ -2084,7 +2088,7 @@ static int ath12k_mac_setup_bcn_tmpl_non
 			return -ENOLINK;
 		}
 		lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
-		tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+		tx_arvif = ath12k_rcu_get_arvif_from_link_id(tx_ahvif, link->mbssid_tx_vif_linkid);
 	}
 
 	if (!tx_arvif) {
@@ -2212,7 +2216,7 @@ static void ath12k_control_beaconing(str
 		tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
 		if (tx_ahvif) {
 			lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
-			tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+			tx_arvif = ath12k_rcu_get_arvif_from_link_id(tx_ahvif, link->mbssid_tx_vif_linkid);
 			if (tx_arvif)
 				lockdep_assert_held(&tx_arvif->ar->conf_mutex);
 		}
@@ -3461,7 +3465,7 @@ static void ath12k_peer_assoc_h_mlo(stru
 	       if (i >= ATH12K_WMI_MLO_MAX_LINKS)
 		       break;
 	       arsta_p = ahsta->link[link_id];
-	       arvif = ahsta->ahvif->link[link_id];
+	       arvif = ath12k_get_arvif_from_link_id(ahsta->ahvif, link_id);
 
 	       if (arsta_p == arsta)
 		       continue;
@@ -4517,7 +4521,7 @@ void ath12k_bss_disassoc(struct ath12k *
 		if (!tx_ahvif)
 			goto unlock;
 		lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
-		tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+		tx_arvif = ath12k_rcu_get_arvif_from_link_id(tx_ahvif, link->mbssid_tx_vif_linkid);
 		if (!tx_arvif)
 			goto unlock;
 		lockdep_assert_held(&tx_arvif->ar->conf_mutex);
@@ -4856,7 +4860,7 @@ static void ath12k_mac_bridge_vdevs_down
 		return;
 
 	for_each_set_bit_from(link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		if (arvif->is_up) {
 			ret = ath12k_wmi_vdev_down(arvif->ar, arvif->vdev_id);
 			if (ret) {
@@ -4885,7 +4889,7 @@ static void ath12k_mac_bridge_vdevs_up(s
 
 	/* Do we need to have the ahvif->links_map ~15th bit ==2 check here ?*/
 	for_each_set_bit_from(link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		if (arvif->is_started) {
 			if (arvif->is_up)
 				continue;
@@ -4935,7 +4939,7 @@ int ath12k_mac_get_bridge_link_id_from_a
 	*link_id = ATH12K_BRIDGE_LINK_MIN;
 
 	for_each_set_bit_from(*link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[*link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, *link_id);
 		if (!arvif)
 			continue;
 
@@ -5150,7 +5154,7 @@ void ath12k_mac_bss_info_changed(struct
 
 			if (info->mbssid_tx_vif) {
 				tx_ahvif = (void *)info->mbssid_tx_vif->drv_priv;
-				tx_arvif = tx_ahvif->link[info->mbssid_tx_vif_linkid];
+				tx_arvif = ath12k_get_arvif_from_link_id(tx_ahvif, info->mbssid_tx_vif_linkid);
 				params.tx_bssid = tx_arvif->bssid;
 				params.profile_idx = ahvif->vif->bss_conf.bssid_index;
 				params.profile_count = BIT(info->bssid_indicator);
@@ -5523,7 +5527,7 @@ static void ath12k_mac_op_bss_info_chang
 	u8 link_id = info->link_id;
 
 	mutex_lock(&ah->conf_mutex);
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 	if (arvif == NULL || !arvif->is_created) {
 		ath12k_info(NULL,
@@ -5656,6 +5660,7 @@ static int
 ath12k_mac_find_link_id_by_freq(struct ieee80211_vif *vif, struct ath12k *ar, u32 freq)
 {
 	struct ath12k_vif *ahvif = (void *)vif->drv_priv;
+	struct ath12k_link_vif *arvif;
 	u16 link_id;
 
 	lockdep_assert_held(&ahvif->ah->conf_mutex);
@@ -5663,12 +5668,11 @@ ath12k_mac_find_link_id_by_freq(struct i
 	if (!(vif->valid_links || ahvif->links_map))
 		return 0;
 
-	for (link_id = 0; link_id < IEEE80211_MLD_MAX_NUM_LINKS; link_id++) {
-		if (!(ahvif->links_map & BIT(link_id)) ||
-		    !ahvif->link[link_id]->ar)
+	for_each_ahvif_mld_link_protected(ahvif, ahvif->ah, arvif, link_id) {
+		if (!arvif->ar)
 			continue;
-		if (freq >= ahvif->link[link_id]->ar->chan_info.low_freq &&
-		    freq <= ahvif->link[link_id]->ar->chan_info.high_freq)
+		if (freq >= arvif->ar->chan_info.low_freq &&
+		    freq <= arvif->ar->chan_info.high_freq)
 			return link_id;
 	}
 
@@ -6359,14 +6363,13 @@ static void ath12k_mac_op_cancel_hw_scan
 
 	mutex_lock(&ah->conf_mutex);
 
-	if (!(ahvif->links_map & BIT(link_id))) {
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
+	if (!arvif) {
 		mutex_unlock(&ah->conf_mutex);
 		ath12k_err(NULL, "unable to select device to cancel scan\n");
 		return;
 	}
 
-	arvif = ahvif->link[link_id];
-
 	if (!arvif->is_created) {
 		ath12k_err(NULL, "unable to select device to cancel scan\n");
 		mutex_unlock(&ah->conf_mutex);
@@ -6689,7 +6692,7 @@ static int ath12k_mac_op_set_key(struct
 		if (sta->mlo) {
 			links = ahsta->links_map;
 			for_each_set_bit(link_id, &links, ATH12K_NUM_MAX_LINKS) {
-				arvif = ahvif->link[link_id];
+				arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 				arsta = ahsta->link[link_id];
 				if (WARN_ON(!arvif || !arsta))
 					continue;
@@ -6712,10 +6715,10 @@ static int ath12k_mac_op_set_key(struct
 		}
 	} else {
 		if (key->link_id >= 0 && key->link_id < IEEE80211_MLD_MAX_NUM_LINKS) {
-			arvif = ahvif->link[key->link_id];
 			link_id = key->link_id;
+			arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		} else {
-			arvif = &ahvif->deflink;
+			arvif = ath12k_get_arvif_from_link_id(ahvif, 0);
 			link_id = 0;
 		}
 
@@ -8151,7 +8154,7 @@ static int ath12k_mac_assign_link_sta(st
 	if (!arsta || link_id >= ATH12K_NUM_MAX_LINKS)
 		return -EINVAL;
 
-	if (WARN_ON(!ahvif->link[link_id]))
+	if (WARN_ON(!ath12k_get_arvif_from_link_id(ahvif, link_id)))
 		return -EINVAL;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
@@ -8181,7 +8184,7 @@ static int ath12k_mac_assign_link_sta(st
 
 	ahsta->link[link_id] = arsta;
 	ath12k_mac_map_link_sta(ahsta, link_id);
-	arsta->arvif = ahvif->link[link_id];
+	arsta->arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 	ab = arsta->arvif->ab;
 	ahsta->device_bitmap |= BIT(ab->wsi_info.chip_idx);
 	arsta->ahsta = ahsta;
@@ -8281,7 +8284,7 @@ int ath12k_mac_create_bridge_peer(struct
 		return ret;
 	}
 
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 	if (!arvif) {
 		ath12k_err(NULL, "Failed to get arvif to create bridge peer\n");
 		return ret;
@@ -8318,6 +8321,7 @@ int ath12k_mac_init_bridge_peer(struct a
 {
 	struct ath12k_base *bridge_ab = NULL;
 	struct ath12k_sta *ahsta = ath12k_sta_to_ahsta(sta);
+	struct ath12k_link_vif *arvif;
 	u8 link_id = 0;
 	int ret = -EINVAL;
 
@@ -8329,7 +8333,8 @@ int ath12k_mac_init_bridge_peer(struct a
 		ret = -EINVAL;
 		goto out_err;
 	} else {
-		bridge_ab = ahvif->link[link_id]->ab;
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
+		bridge_ab = arvif->ab;
 		if (!test_bit(WMI_TLV_SERVICE_N_LINK_MLO_SUPPORT,
 			      bridge_ab->wmi_ab.svc_map)) {
 			ath12k_warn(bridge_ab,
@@ -8412,7 +8417,7 @@ static void ath12k_mac_ml_station_remove
 	/* validate link station removal and clear arsta links */
 	links = ahsta->links_map;
 	for_each_set_bit(link_id, &links, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		arsta = ahsta->link[link_id];
 
 		if (!arvif || !arsta)
@@ -8563,7 +8568,7 @@ static int ath12k_mac_op_sta_set_txpwr(s
 	mutex_lock(&ah->conf_mutex);
 
 	/* TODO get arvif based on link id */
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 	arsta = ahsta->link[link_id];
 
 	if (!arvif) {
@@ -8645,7 +8650,6 @@ static int ath12k_mac_reconfig_ahsta_lin
 						 struct ath12k_vif *ahvif,
 						 struct ieee80211_sta *sta)
 {
-	struct ath12k_link_vif *arvif;
 	struct ath12k_link_sta *arsta;
 	unsigned long links_to_unmap;
 	unsigned long links_to_assign;
@@ -8667,7 +8671,6 @@ static int ath12k_mac_reconfig_ahsta_lin
 	for_each_set_bit(link, &links_to_unmap,
 			 ATH12K_NUM_MAX_LINKS) {
 		arsta = ahsta->link[link];
-		arvif = ahvif->link[link];
 
 		ath12k_mac_unmap_link_sta(ahsta, link);
 
@@ -8781,7 +8784,7 @@ int ath12k_mac_update_sta_state(struct i
 	}
 
 	if (!sta->mlo) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		arsta = ahsta->link[link_id];
 
 		if (WARN_ON(arvif == NULL || arsta == NULL)) {
@@ -8858,7 +8861,7 @@ int ath12k_mac_update_sta_state(struct i
 		if (ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
 			for_each_set_bit(link_id, &sta->valid_links,
 					 IEEE80211_MLD_MAX_NUM_LINKS) {
-				arvif = ahvif->link[link_id];
+				arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 				ath12k_vdev_stop_notify(arvif);
 			}
 		}
@@ -8871,7 +8874,7 @@ int ath12k_mac_update_sta_state(struct i
 	    old_state == IEEE80211_STA_NOTEXIST &&
 	    new_state == IEEE80211_STA_NONE) {
 		ahsta->num_peer = 0;
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		arsta = ahsta->link[link_id];
 		/* Mode-0 mapping of ahsta links is done below for first
 		 * deflink and for additional link, it will be done in
@@ -8906,7 +8909,7 @@ int ath12k_mac_update_sta_state(struct i
 	links = ahsta->links_map;
 
 	for_each_set_bit(link_id, &links, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		arsta = ahsta->link[link_id];
 
 		/* some assumptions went wrong! */
@@ -9067,12 +9070,12 @@ static int ath12k_mac_op_change_sta_link
 		WARN_ON(ahsta->links_map == 0);
 
 		if ((test_bit(ahvif->primary_link_id, &sta->valid_links))) {
-			arvif = ahvif->link[ahvif->primary_link_id];
+			arvif = ath12k_get_arvif_from_link_id(ahvif, ahvif->primary_link_id);
 			if (arvif->ar->ab->hw_params->is_plink_preferable) {
 				ahsta->primary_link_id = ahvif->primary_link_id;
 			} else {
 				ahsta->primary_link_id = ahsta->assoc_link_id;
-				arvif = ahvif->link[ahsta->assoc_link_id];
+				arvif = ath12k_get_arvif_from_link_id(ahvif, ahsta->assoc_link_id);
 				if (!arvif->ar->ab->hw_params->is_plink_preferable) {
 					for_each_set_bit(link_id, &sta->valid_links,
 							 IEEE80211_MLD_MAX_NUM_LINKS) {
@@ -9090,7 +9093,7 @@ static int ath12k_mac_op_change_sta_link
 			if (ahsta->links_map & BIT(link_id))
 				continue;
 
-			arvif = ahvif->link[link_id];
+			arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 			arsta = ath12k_mac_alloc_assign_link_sta(ah, ahsta, ahvif, link_id);
 
 			if (!arvif || !arsta) {
@@ -9219,16 +9222,27 @@ static void ath12k_mac_op_sta_rc_update(
 	u32 bw, smps;
 	struct ieee80211_link_sta *link_sta;
 
-	arvif = ahvif->link[link_id];
+
+	rcu_read_lock();
+	link_sta = rcu_dereference(sta->link[link_id]);
+
+	if (!link_sta) {
+		rcu_read_unlock();
+		return;
+	}
+
+	arvif = ath12k_rcu_get_arvif_from_link_id(ahvif, link_id);
 	arsta = ahsta->link[link_id];
 
 	if (!arsta) {
 		ath12k_err(NULL, "unable to determine arsta\n");
+		rcu_read_unlock();
 		return;
 	}
 
 	if (!arvif) {
 		ath12k_err(NULL, "unable to determine device for sta update\n");
+		rcu_read_unlock();
 		return;
 	}
 
@@ -9237,14 +9251,20 @@ static void ath12k_mac_op_sta_rc_update(
 
 	if (!ar) {
 		ath12k_err(NULL, "unable to determine device for sta update\n");
+		rcu_read_unlock();
 		return;
 	}
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+		   "mac sta rc update for %pM changed %08x bw %d nss %d smps %d\n",
+		   arsta->addr, changed, link_sta->bandwidth, link_sta->rx_nss,
+		   link_sta->smps_mode);
 
 	spin_lock_bh(&ar->ab->base_lock);
 
 	peer = ath12k_peer_find(ar->ab, arvif->vdev_id, arsta->addr);
 	if (!peer) {
 		spin_unlock_bh(&ar->ab->base_lock);
+		rcu_read_unlock();
 		ath12k_warn(ar->ab, "mac sta rc update failed to find peer %pM on vdev %i\n",
 			   arsta->addr, arvif->vdev_id);
 		return;
@@ -9252,19 +9272,6 @@ static void ath12k_mac_op_sta_rc_update(
 
 	spin_unlock_bh(&ar->ab->base_lock);
 
-	rcu_read_lock();
-	link_sta = rcu_dereference(sta->link[link_id]);
-
-	if (!link_sta) {
-		rcu_read_unlock();
-		return;
-	}
-
-	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
-		   "mac sta rc update for %pM changed %08x bw %d nss %d smps %d\n",
-		   arsta->addr, changed, link_sta->bandwidth, link_sta->rx_nss,
-		   link_sta->smps_mode);
-
 	spin_lock_bh(&ar->data_lock);
 
 	if (changed & IEEE80211_RC_BW_CHANGED) {
@@ -9434,7 +9441,7 @@ static int ath12k_mac_op_conf_tx(struct
 		return -EINVAL;
 
 	mutex_lock(&ah->conf_mutex);
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 	/* If the tx config is received before a vdev is assigned to vif
 	 * cache the info to be updated once vdev is created
@@ -10580,7 +10587,7 @@ static void ath12k_mgmt_over_wmi_tx_work
 			continue;
 		}
 
-		arvif = ahvif->link[skb_cb->link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, skb_cb->link_id);
 		if (!arvif) {
 			ath12k_warn(ar->ab, "invalid arvif for mgmt tx - link %d\n",
 				    skb_cb->link_id);
@@ -10896,10 +10903,29 @@ static void ath12k_mac_op_tx(struct ieee
 		link = 0;
 	}
 
-	arvif = ahvif->link[link];
+	/* TODO: Holding RCU lock for such a big function is not required, may
+	 * have some performance impact when high throughput is expected.
+	 * One possible improvement:
+	 * For arvif: Few members are accessed in this path
+	 * - False Sharing
+	 * - Optimize the arvif structure for cache alignment
+	 *   Create a new structure for frequently accessed members
+	 *   Align this new structure to a cache line
+	 *   Place this structure as the first member of arvif.
+	 *   For example,
+	 *   struct ath12k_link_vif_fast {
+	 *   	u8 addr[ETH_LEN];
+	 *   	u8 pad[2];
+	 *   	u64 tbtt_offset;
+	 *	Ensure the total size is a multiple of typical cache line size, 64
+	 *   } ____cacheline_aligned;
+	 */
+	rcu_read_lock();
+	arvif = rcu_dereference(ahvif->link[link]);
 	skb_cb->link_id = link;
 
 	if (!arvif || !arvif->ar) {
+		rcu_read_unlock();
 		ieee80211_free_txskb(hw, skb);
 		return;
 	}
@@ -10909,6 +10935,7 @@ static void ath12k_mac_op_tx(struct ieee
 	ah = ar->ah;
 
 	if (unlikely(test_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags))) {
+		rcu_read_unlock();
 		ieee80211_free_txskb(ah->hw, skb);
 		return;
 	}
@@ -10917,6 +10944,7 @@ static void ath12k_mac_op_tx(struct ieee
 	if (skb->fast_xmit) {
 		ret = ath12k_mac_tx_check_max_limit(ar, skb);
 		if (ret) {
+			rcu_read_unlock();
 			ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 				   "failed fast tx due to limit check pdev idx %d\n",
 				   ar->pdev_idx);
@@ -10942,6 +10970,7 @@ static void ath12k_mac_op_tx(struct ieee
 				break;
 		}
 
+		rcu_read_unlock();
 		if (unlikely(ret)) {
 			ath12k_dbg(arvif->ar->ab, ATH12K_DBG_MAC,
 				   "failed to transmit frame %d\n", ret);
@@ -10979,6 +11008,7 @@ static void ath12k_mac_op_tx(struct ieee
 			spin_lock_bh(&ar->data_lock);
 			mgmt_stats->tx_fail_cnt[frm_type]++;
 			spin_unlock_bh(&ar->data_lock);
+			rcu_read_unlock();
 			return;
 		}
 		ret = ath12k_mac_mgmt_tx(ar, skb, is_prb_rsp);
@@ -10995,6 +11025,7 @@ static void ath12k_mac_op_tx(struct ieee
 			mgmt_stats->tx_succ_cnt[frm_type]++;
 			spin_unlock_bh(&ar->data_lock);
 		}
+		rcu_read_unlock();
 		return;
 	} else
 		is_mcast = is_multicast_ether_addr(hdr->addr1);
@@ -11019,6 +11050,7 @@ static void ath12k_mac_op_tx(struct ieee
 	    test_bit(ATH12K_FLAG_RAW_MODE, &ar->ab->ag->dev_flags)) {
 		ret = ath12k_mac_tx_check_max_limit(ar, skb);
 		if (ret) {
+			rcu_read_unlock();
 			ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 				   "failed due to limit check pdev idx %d\n",
 				   ar->pdev_idx);
@@ -11049,7 +11081,6 @@ static void ath12k_mac_op_tx(struct ieee
 			ahvif->mcbc_gsn = 0;
 		spin_unlock(&ahvif->mcbc_gsn_lock);
 
-		rcu_read_lock();
 		for_each_vif_active_link(vif, link_conf, link_id) {
 			tmp_arvif = rcu_dereference(ahvif->link[link_id]);
 			if (!(tmp_arvif && tmp_arvif->is_up))
@@ -11128,9 +11159,9 @@ skip_peer_find:
 				ieee80211_free_txskb(ah->hw, msdu_copied);
 			}
 		}
-		rcu_read_unlock();
 		ieee80211_free_txskb(ah->hw, skb);
 	}
+	rcu_read_unlock();
 
 }
 
@@ -11825,7 +11856,7 @@ static int ath12k_mac_setup_vdev_args_mb
 		return -EINVAL;
 	}
 	lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
-	tx_arvif = tx_ahvif->link[link_conf->mbssid_tx_vif_linkid];
+	tx_arvif = ath12k_rcu_get_arvif_from_link_id(tx_ahvif, link_conf->mbssid_tx_vif_linkid);
 	if (!tx_arvif) {
 		rcu_read_unlock();
 		return -EINVAL;
@@ -11990,7 +12021,7 @@ static void ath12k_mac_op_update_vif_off
 	if (vif->valid_links) {
 		links = vif->valid_links;
 		for_each_set_bit(link_id, &links, IEEE80211_MLD_MAX_NUM_LINKS) {
-			arvif = ahvif->link[link_id];
+			arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 			if (!(arvif && arvif->ar))
 				continue;
 
@@ -12373,7 +12404,7 @@ void ath12k_mac_vif_cache_flush(struct a
 	lockdep_assert_held(&ah->conf_mutex);
 
 
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 	if (WARN_ON(!arvif))
 		return;
@@ -12450,7 +12481,7 @@ static struct ath12k *ath12k_mac_assign_
 	 * and now we want to create for actual usage
 	 */
 	if (vif->valid_links) {
-		scan_arvif = arvif->ahvif->link[ATH12K_DEFAULT_SCAN_LINK];
+		scan_arvif = ath12k_get_arvif_from_link_id(arvif->ahvif, ATH12K_DEFAULT_SCAN_LINK);
 
 		if (scan_arvif && scan_arvif->ar == ar && !is_bridge_vdev) {
 			mutex_lock(&ar->conf_mutex);
@@ -13608,7 +13639,7 @@ beacon_tmpl_setup:
 		link = rcu_dereference(ahvif->vif->link_conf[arvif->link_id]);
 		if (link->mbssid_tx_vif) {
 			tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
-			tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+			tx_arvif = ath12k_rcu_get_arvif_from_link_id(tx_ahvif, link->mbssid_tx_vif_linkid);
 			params.tx_bssid = tx_arvif->bssid;
 			params.profile_idx = ahvif->vif->bss_conf.bssid_index;
 			params.profile_count = BIT(link->bssid_indicator);
@@ -15281,7 +15312,7 @@ ath12k_mac_unassign_vif_chanctx_handle(s
 		return;
 	}
 
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 	if (!arvif) {
 		ath12k_err(NULL,
 			   "unable to determine the assigned link vif on link id %d\n",
@@ -15463,7 +15494,7 @@ ath12k_mac_stop_and_delete_bridge_vdev(s
 	/* Proceed for bridge only after all the normal vdevs are removed */
 	if (hweight16(ahvif->links_map & ~ATH12K_DEFAULT_SCAN_LINK_MASK) == 0) {
 		for_each_set_bit_from(link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
-			arvif = ahvif->link[link_id];
+			arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 			if (!arvif) {
 				ath12k_err(NULL,
 					   "unable to determine the assigned link vif on link id %d\n", link_id);
@@ -15666,7 +15697,7 @@ static void ath12k_mac_handle_failures_b
 	u8 link_id = ATH12K_BRIDGE_LINK_MIN;
 
 	for_each_set_bit_from(link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 		if (WARN_ON(!arvif))
 			continue;
@@ -15720,7 +15751,7 @@ static int ath12k_mac_create_and_start_b
 		if (ahvif->mode0_recover_bridge_vdevs) {
 			link_id = ATH12K_BRIDGE_LINK_MIN;
 			for_each_set_bit_from(link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
-				arvif = ahvif->link[link_id];
+				arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 				if (WARN_ON(!arvif))
 					continue;
@@ -16025,7 +16056,7 @@ static int ath12k_mac_op_set_rts_thresho
 	if (vif) {
 		mutex_lock(&ah->conf_mutex);
 		ahvif = ath12k_vif_to_ahvif(vif);
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 		if (arvif == NULL || !arvif->is_created) {
 			ath12k_info(NULL,
@@ -16926,7 +16957,7 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 
 	mutex_lock(&ah->conf_mutex);
 
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 	if (!arvif) {
 		ret = -EINVAL;
@@ -17671,7 +17702,7 @@ get_tx_power:
 
 err_fallback:
 	ahvif = ath12k_vif_to_ahvif(vif);
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 	if (!arvif) {
 		*dbm = 0;
@@ -17721,7 +17752,7 @@ static int ath12k_mac_op_cancel_remain_o
 		return -EINVAL;
 	}
 
-	arvif = ahvif->link[link_id];
+	arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 	if (!arvif || !arvif->is_created) {
 		mutex_unlock(&ah->conf_mutex);
@@ -18029,15 +18060,19 @@ int ath12k_mac_op_set_scs(struct wireles
 		return -EINVAL;
 	}
 	memcpy(params->peer_mac, peer_mac, ETH_ALEN);
-	rcu_read_unlock();
-
-	arvif = ahvif->link[link_id];
-	if (WARN_ON(!arvif))
+	arvif = ath12k_rcu_get_arvif_from_link_id(ahvif, link_id);
+	if (WARN_ON(!arvif)) {
+		rcu_read_unlock();
 		return -EINVAL;
+	}
 
 	ar = arvif->ar;
-	if (!ar)
+	if (!ar) {
+		rcu_read_unlock();
 		return -EINVAL;
+	}
+
+	rcu_read_unlock();
 
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "link id    	        %d\n", link_id);
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -680,7 +680,7 @@ int ath12k_ml_link_peers_delete(struct a
 	 */
 	links = ahsta->links_map;
 	for_each_set_bit(link_id, &links, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		arsta = ahsta->link[link_id];
 
 		if (!arvif || !arsta)
@@ -710,7 +710,7 @@ int ath12k_ml_link_peers_delete(struct a
 	/* Ensure all link peers are deleted and unmapped */
 	links = ahsta->links_map;
 	for_each_set_bit(link_id, &links, ATH12K_NUM_MAX_LINKS) {
-		arvif = ahvif->link[link_id];
+		arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 		arsta = ahsta->link[link_id];
 
 		if (!arvif || !arsta)
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -581,15 +581,22 @@ void ath12k_dp_peer_ppeds_route_setup(st
 	 * disable DS routing on RX.
 	 */
 	if (sta->mlo) {
-		primary_link_arvif = arvif->ahvif->link[ahsta->primary_link_id];
+		rcu_read_lock();
+		primary_link_arvif = ath12k_rcu_get_arvif_from_link_id(arvif->ahvif, ahsta->primary_link_id);
+		if (primary_link_arvif == NULL) {
+			rcu_read_unlock();
+			return;
+		}
 
 		if (!test_bit(ATH12K_FLAG_PPE_DS_ENABLED,
 		    &primary_link_arvif->ab->dev_flags)) {
+			rcu_read_unlock();
 			ath12k_dbg(ab, ATH12K_DBG_PPE,
 				    "Primary link %d does not support DS "
 				    "Disabling DS routing on RX for peer %pM\n",
 				    ahsta->primary_link_id, arsta->addr);
 			return;
 		}
+		rcu_read_unlock();
 	}
 
 	ath12k_wmi_config_peer_ppeds_routing(ar, arsta->addr, arvif->vdev_id,
@@ -936,7 +939,7 @@ static int ath12k_ppeds_attach_link_apvl
 			ath12k_dp_tx_get_bank_profile(ab, arvif, &ab->dp, vdevid_chk_en);
 
 		for_each_set_bit(link_idx, &ahvif->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
-			iter_arvif = ahvif->link[link_idx];
+			iter_arvif = ath12k_get_arvif_from_link_id(ahvif, link_idx);
 
 			if (!iter_arvif || iter_arvif == arvif ||
 					ab != iter_arvif->ab)
@@ -979,7 +982,7 @@ void ath12k_ppe_ds_attach_vlan_vif_link(
 		return;
 
 	for_each_set_bit(link_id, &ap_ahvif->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
-		ap_arvif = ap_ahvif->link[link_id];
+		ap_arvif = ath12k_get_arvif_from_link_id(ap_ahvif, link_id);
 
 		if (!ap_arvif)
 			continue;
@@ -1063,7 +1066,7 @@ int ath12k_ppeds_attach_link_vif(struct
 
 		*link_ppe_vp_profile_idx = ppe_vp_profile_idx;
 	} else {
-		int link_idx;
+		int link_id;
 		struct ath12k_link_vif *iter_arvif;
 		bool vdevid_chk_en = false;
 
@@ -1083,8 +1086,9 @@ int ath12k_ppeds_attach_link_vif(struct
 			}
 
 			ahsta = ath12k_sta_to_ahsta(sta);
-			arvif = (!sta->mlo) ? ahvif->link[ahsta->deflink.link_id] :
-				ahvif->link[ahsta->primary_link_id];
+			link_id = (!sta->mlo) ? ahsta->deflink.link_id :
+						ahsta->primary_link_id;
+			arvif = ath12k_rcu_get_arvif_from_link_id(ahvif, link_id);
 			if (!arvif) {
 				ath12k_warn(ab, "arvif not found for station:%pM",
 					    sta->addr);
@@ -1104,8 +1108,8 @@ int ath12k_ppeds_attach_link_vif(struct
 
 		arvif->splitphy_ds_bank_id = ath12k_dp_tx_get_bank_profile(ab, arvif, &ab->dp, vdevid_chk_en);
 
-		for_each_set_bit(link_idx, &ahvif->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
-			iter_arvif = ahvif->link[link_idx];
+		for_each_set_bit(link_id, &ahvif->links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+			iter_arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 
 			if (!iter_arvif || iter_arvif == arvif ||
 					ab != iter_arvif->ab)
--- a/drivers/net/wireless/ath/ath12k/sawf.c
+++ b/drivers/net/wireless/ath/ath12k/sawf.c
@@ -520,7 +520,6 @@ struct ath12k_base *ath12k_sawf_get_ab_f
 	if (sta->mlo) {
 		link_id = ahsta->primary_link_id;
 		memcpy(mac_addr, ahsta->link[link_id]->addr, ETH_ALEN);
-		arvif = ahvif->link[link_id];
 	} else if (sta->valid_links) {
 		link_id = ahsta->deflink.link_id;
 		memcpy(mac_addr, peer_mac, ETH_ALEN);
@@ -529,13 +528,19 @@ struct ath12k_base *ath12k_sawf_get_ab_f
 		memcpy(mac_addr, peer_mac, ETH_ALEN);
 	}
 
-	arvif = ahvif->link[link_id];
-	if (WARN_ON(!arvif))
+	rcu_read_lock();
+	arvif = ath12k_rcu_get_arvif_from_link_id(ahvif, link_id);
+	if (WARN_ON(!arvif)) {
+		rcu_read_unlock();
 		return NULL;
+	}
 
 	ar = arvif->ar;
-	if (!ar)
+	if (!ar) {
+		rcu_read_unlock();
 		return NULL;
+	}
+	rcu_read_unlock();
 
 	ab = ar->ab;
 	spin_lock_bh(&ab->base_lock);
--- a/drivers/net/wireless/ath/ath12k/testmode.c
+++ b/drivers/net/wireless/ath/ath12k/testmode.c
@@ -352,7 +352,7 @@ static int ath12k_tm_cmd_wmi(struct ath1
 		if (vif) {
 			mutex_lock(&ah->conf_mutex);
 			ahvif = (struct ath12k_vif *)vif->drv_priv;
-			arvif = ahvif->link[link_id];
+			arvif = ath12k_get_arvif_from_link_id(ahvif, link_id);
 			if (!arvif) {
 				ath12k_warn(ar->ab, "failed to find link interface\n");
 				mutex_unlock(&ah->conf_mutex);
