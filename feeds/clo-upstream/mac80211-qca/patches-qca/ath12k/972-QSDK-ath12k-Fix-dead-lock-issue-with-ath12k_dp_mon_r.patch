From 686cf15e2b8e134a31fd61d1007cd69597b1e16f Mon Sep 17 00:00:00 2001
From: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
Date: Wed, 21 Aug 2024 07:20:27 +0530
Subject: [PATCH] QSDK: ath12k: Fix dead lock issue with
 ath12k_dp_mon_rx_update_peer_stats_ds

Currently the dead lock issue is observed due to this scenario
1.Thread 0 (on CPU 0) is running function 
  ath12k_dp_mon_rx_update_peer_stats_ds-> ath12k_dp_mon_fill_rx_stats(),
  it is holding ar->ab->base_lock and waiting for ar->data_lock
2.Thread 1 (On CPU 1) is running function
  ath12k_update_per_peer_tx_stats, it is holding ar->data_lock and
  waiting for ar->ab->base_lock

To avoid this condition, remove the band stats fallback condition code in
ath12k_dp_mon_rx_update_peer_stats_ds which is not required for DS.
This requires the modification in ath12k_dp_mon_fill_rx_stats and
renamed to ath12k_dp_mon_fill_rx_stats_info.

Patch-dependency: 900-a-wifi-ath12k-clean-up-bonded-model.patch

Signed-off-by: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_mon.c | 70 ++++++++++++++----------
 1 file changed, 40 insertions(+), 30 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_mon.c b/drivers/net/wireless/ath/ath12k/dp_mon.c
index 0ffea86..01d05e6 100644
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -1830,12 +1830,10 @@ ath12k_dp_mon_fill_rx_rate(struct ath12k *ar, struct hal_rx_mon_ppdu_info *ppdu_
 }
 
 static void
-ath12k_dp_mon_fill_rx_stats(struct ath12k *ar, struct hal_rx_mon_ppdu_info *ppdu_info,
+ath12k_dp_mon_fill_rx_stats_info(struct ath12k *ar, struct hal_rx_mon_ppdu_info *ppdu_info,
 			     struct ieee80211_rx_status *rx_status)
 {
-	struct ieee80211_channel *channel;
 	u32 center_freq;
-	u8 channel_num;
 
 	rx_status->freq = ppdu_info->freq;
 	rx_status->bw = ath12k_mac_bw_to_mac80211_bw(ppdu_info->bw);
@@ -1845,7 +1843,6 @@ ath12k_dp_mon_fill_rx_stats(struct ath12k *ar, struct hal_rx_mon_ppdu_info *ppdu
 
 	rx_status->flag |= RX_FLAG_NO_SIGNAL_VAL;
 
-	channel_num = ppdu_info->chan_num;
 	center_freq = ppdu_info->freq;
 
 	rx_status->band = NUM_NL80211_BANDS;
@@ -1861,29 +1858,6 @@ ath12k_dp_mon_fill_rx_stats(struct ath12k *ar, struct hal_rx_mon_ppdu_info *ppdu
 		   center_freq <= ATH12K_MAX_5G_FREQ) {
 		rx_status->band = NL80211_BAND_5GHZ;
 	}
-
-	if (unlikely(rx_status->band == NUM_NL80211_BANDS ||
-		     !ar->ah->hw->wiphy->bands[rx_status->band])) {
-		ath12k_dbg(ar->ab, ATH12K_DBG_DATA,
-			   "sband is NULL for status band 1 %d channel_num %d center_freq %d pdev_id %d\n",
-			   rx_status->band, channel_num, center_freq, ar->pdev_idx);
-		spin_lock_bh(&ar->data_lock);
-		channel = ar->rx_channel;
-		if (channel) {
-			rx_status->band = channel->band;
-			channel_num =
-				ieee80211_frequency_to_channel(channel->center_freq);
-		} else {
-			ath12k_err(ar->ab, "unable to determine channel, band for rx packet");
-		}
-		spin_unlock_bh(&ar->data_lock);
-	}
-
-	if (rx_status->band < NUM_NL80211_BANDS)
-		rx_status->freq = ieee80211_channel_to_frequency(channel_num,
-								 rx_status->band);
-
-	ath12k_dp_mon_fill_rx_rate(ar, ppdu_info, rx_status);
 }
 
 #define DP_MON_RX_PKT_OFFSET	8
@@ -1899,6 +1873,8 @@ ath12k_dp_mon_rx_merg_msdus(struct ath12k *ar, u32 mpdu_idx,
 	u8 *dest, *msdu_payload, decap_format;
 	struct ieee80211_hdr_3addr *wh;
 	u32 err_bitmap;
+	struct ieee80211_channel *channel;
+	u8 channel_num;
 
 	mpdu_buf = NULL;
 
@@ -1911,8 +1887,32 @@ ath12k_dp_mon_rx_merg_msdus(struct ath12k *ar, u32 mpdu_idx,
 		*fcs_err = true;
 
 	decap_format = ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_info[0].decap_format;
+	channel_num = ppdu_info->chan_num;
+
+	ath12k_dp_mon_fill_rx_stats_info(ar, ppdu_info, rxs);
+
+	if (unlikely(rxs->band == NUM_NL80211_BANDS ||
+		     !ar->ah->hw->wiphy->bands[rxs->band])) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_DATA,
+			   "sband is NULL for status band 1 %d channel_num %d center_freq %d pdev_id %d\n",
+			   rxs->band, channel_num, ppdu_info->freq, ar->pdev_idx);
+		spin_lock_bh(&ar->data_lock);
+		channel = ar->rx_channel;
+		if (channel) {
+			rxs->band = channel->band;
+			channel_num =
+				ieee80211_frequency_to_channel(channel->center_freq);
+		} else {
+			ath12k_err(ar->ab,
+				"unable to determine channel, band for rx packet");
+		}
+		spin_unlock_bh(&ar->data_lock);
+	}
 
-	ath12k_dp_mon_fill_rx_stats(ar, ppdu_info, rxs);
+	if (rxs->band < NUM_NL80211_BANDS)
+		rxs->freq = ieee80211_channel_to_frequency(channel_num,
+								 rxs->band);
+	ath12k_dp_mon_fill_rx_rate(ar, ppdu_info, rxs);
 
 	if (decap_format == DP_RX_DECAP_TYPE_RAW) {
 		skb_pull(head_msdu, DP_MON_RX_PKT_OFFSET);
@@ -3383,7 +3383,12 @@ static void ath12k_dp_mon_rx_update_peer_stats_ds(struct ath12k *ar,
 			return;
 
 		if (!rx_status) {
-			ath12k_dp_mon_fill_rx_stats(ar, ppdu_info, &status);
+			ath12k_dp_mon_fill_rx_stats_info(ar, ppdu_info, &status);
+			if (status.band < NUM_NL80211_BANDS)
+				status.freq = ieee80211_channel_to_frequency(
+								ppdu_info->chan_num,
+								status.band);
+			ath12k_dp_mon_fill_rx_rate(ar, ppdu_info, &status);
 			rx_status = &status;
 		}
 
@@ -3431,7 +3436,12 @@ static void ath12k_dp_mon_rx_update_peer_stats_ds(struct ath12k *ar,
 			continue;
 
 		if (!rx_status) {
-			ath12k_dp_mon_fill_rx_stats(ar, ppdu_info, &status);
+			ath12k_dp_mon_fill_rx_stats_info(ar, ppdu_info, &status);
+			if (status.band < NUM_NL80211_BANDS)
+				status.freq = ieee80211_channel_to_frequency(
+								ppdu_info->chan_num,
+								status.band);
+			ath12k_dp_mon_fill_rx_rate(ar, ppdu_info, &status);
 			rx_status = &status;
 		}
 
-- 
2.17.1

