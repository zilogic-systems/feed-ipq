From 8d5c938e4313d9fe96a53e685f7a41b06f8d4f71 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Fri, 21 Jun 2024 11:42:02 -0700
Subject: [PATCH] QSDK: wifi: ath12k: Fix incorrect dereferencing driver's VIF
 context

Currently when ECM issues a callbacks to ath12k driver for
fetching DS node id or adding or removing FSE flow entry or in
SAWF purposes, ieee80211_vif's driver private data is getting
dereferenced by default into ath12k_vif, although VIF belongs
to ath11k. This showed invalid memory reads causing kernel panic
in Direct switching case. Fix this by advertizing ECM
registration support through HW feature flags and reading it
before dereferencing private data.

Patch-dependency: 953-QSDK-wifi-ath12k-Add-DS-node-id-retrieval-mechanism.patch
                  885-02-wifi-ath12k-Add-ppe-fse-registration-functions.patch
                  753-02-ath12k-sawf-add-callback-operation-for-dynamic-msduq.patch
Patch-work: None

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/accel_cfg.c | 5 +++++
 drivers/net/wireless/ath/ath12k/fse.c       | 7 +++++++
 drivers/net/wireless/ath/ath12k/mac.c       | 2 ++
 drivers/net/wireless/ath/ath12k/sawf.c      | 5 +++++
 4 files changed, 19 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/accel_cfg.c
+++ b/drivers/net/wireless/ath/ath12k/accel_cfg.c
@@ -12,17 +12,16 @@
 
 /**
  * ath12k_ds_get_node_id() - Retrieve ds node id
- * @ndev: pointer to corresponding net_device
+ * @vif: pointer to corresponding ieee80211_vif
  * @peer_mac: peer mac address
  * @node_id: Buffer to fill the node id
  *
  * Return: true - success, false - failure
  */
-static bool ath12k_ds_get_node_id(struct net_device *ndev, const u8 *peer_mac,
-				  u8 *node_id)
+static bool ath12k_ds_get_node_id(struct ieee80211_vif *vif,
+				  struct wireless_dev *wdev,
+				  const u8 *peer_mac, u8 *node_id)
 {
-	struct wireless_dev *wdev;
-	struct ieee80211_vif *vif;
 	struct ath12k_vif *ahvif;
 	struct ieee80211_sta *sta;
 	struct ath12k_sta *ahsta;
@@ -30,29 +29,7 @@ static bool ath12k_ds_get_node_id(struct
 	struct ath12k_base *ab;
 	int link_id;
 
-	wdev = ndev->ieee80211_ptr;
-	if (!wdev) {
-		/*
-		 * If the netdev is vlan, it may not have ieee80211_ptr.
-		 * In that case fetch the ieee80211_ptr from its top most parent
-		 */
-		if (is_vlan_dev(ndev)) {
-			struct net_device *parent_ndev =
-					vlan_dev_real_dev(ndev);
-
-			if (parent_ndev)
-				wdev = parent_ndev->ieee80211_ptr;
-
-			if (!wdev)
-				return false;
-
-		} else {
-			return false;
-		}
-	}
-
-	vif = wdev_to_ieee80211_vif_vlan(wdev, false);
-	if (!vif)
+	if (!vif || !wdev)
 		return false;
 
 	ahvif = ath12k_vif_to_ahvif(vif);
--- a/drivers/net/wireless/ath/ath12k/fse.c
+++ b/drivers/net/wireless/ath/ath12k/fse.c
@@ -16,7 +16,7 @@ MODULE_PARM_DESC(fse, "Enable FSE featur
 static const struct ath_fse_ops ath_fse_ops_obj = {
 	.fse_rule_add = ath12k_sfe_add_flow_entry,
 	.fse_rule_delete = ath12k_sfe_delete_flow_entry,
-	.fse_get_ab = ath12k_fse_get_ab_from_netdev,
+	.fse_get_ab = ath12k_fse_get_ab_from_vif,
 };
 
 void ath12k_fse_init(struct ath12k_base *ab)
@@ -44,11 +44,9 @@ void ath12k_fse_deinit(struct ath12k_bas
 	ath12k_dbg(ab, ATH12K_DBG_DP_RX, "FSE context deinitialized\n");
 }
 
-void *ath12k_fse_get_ab_from_netdev(struct net_device *dev,
-				    const u8 *peer_mac)
+void *ath12k_fse_get_ab_from_vif(struct ieee80211_vif *vif,
+				 const u8 *peer_mac)
 {
-	struct wireless_dev *wdev;
-	struct ieee80211_vif *vif;
 	struct ath12k_base *ab = NULL;
 	struct ath12k *ar;
 	struct ath12k_peer *peer;
@@ -56,9 +54,6 @@ void *ath12k_fse_get_ab_from_netdev(stru
 	struct ath12k_link_vif *arvif;
 	u8 link_id;
 
-	wdev = dev->ieee80211_ptr;
-
-	vif = wdev_to_ieee80211_vif_vlan(wdev, false);
 	if (!vif)
 		return NULL;
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -19338,6 +19338,8 @@ static int ath12k_mac_hw_register(struct
 
 	hw->netdev_features |= NETIF_F_LLTX;
 
+	ieee80211_hw_set(hw, SUPPORT_ECM_REGISTRATION);
+
 	ret = ieee80211_register_hw(hw);
 	if (ret) {
 		ath12k_err(NULL, "ieee80211 registration failed: %d\n", ret);
--- a/drivers/net/wireless/ath/ath12k/sawf.c
+++ b/drivers/net/wireless/ath/ath12k/sawf.c
@@ -474,12 +474,10 @@ int ath12k_sawf_disable_config(u8 svc_id
 	return ret;
 }
 
-struct ath12k_base *ath12k_sawf_get_ab_from_netdev(struct net_device *dev,
-						   u8 *peer_mac,
-						   u16 *peer_id)
+struct ath12k_base *ath12k_sawf_get_ab_from_vif(struct ieee80211_vif *vif,
+						u8 *peer_mac,
+						u16 *peer_id)
 {
-	struct wireless_dev *wdev;
-	struct ieee80211_vif *vif;
 	struct ath12k_base *ab = NULL;
 	struct ath12k *ar = NULL;
 	struct ath12k_peer *peer;
@@ -490,14 +488,6 @@ struct ath12k_base *ath12k_sawf_get_ab_f
 	u8 mac_addr[ETH_ALEN] = { 0 };
 	u8 link_id;
 
-	if (!dev)
-		return NULL;
-
-	wdev = dev->ieee80211_ptr;
-	if (!wdev)
-		return NULL;
-
-	vif = wdev_to_ieee80211_vif(wdev);
 	if (!vif)
 		return NULL;
 
@@ -555,6 +545,26 @@ struct ath12k_base *ath12k_sawf_get_ab_f
 	return ab;
 }
 
+struct ath12k_base *ath12k_sawf_get_ab_from_netdev(struct net_device *dev,
+						   u8 *peer_mac, u16 *peer_id)
+{
+	struct wireless_dev *wdev;
+	struct ieee80211_vif *vif;
+
+	if (!dev)
+		return NULL;
+
+	wdev = dev->ieee80211_ptr;
+	if (!wdev)
+		return NULL;
+
+	vif = wdev_to_ieee80211_vif(wdev);
+	if (!vif)
+		return NULL;
+
+	return ath12k_sawf_get_ab_from_vif(vif, peer_mac, peer_id);
+}
+
 u8 ath12k_sawf_get_msduq_of_tid(struct ath12k_base *ab,
 				u8 tid,
 				u8 svc_id,
@@ -699,8 +709,8 @@ u16 ath12k_sawf_alloc_msduq(struct ath12
 	return ret_peer_msduq;
 }
 
-u16 ath12k_sawf_get_msduq(struct net_device *dev, u8 *peer_mac, u32 service_id,
-			       u32 dscp, u32 rule_id)
+u16 ath12k_sawf_get_msduq(struct ieee80211_vif *vif, u8 *peer_mac,
+			  u32 service_id, u32 dscp, u32 rule_id)
 {
 	struct ath12k_base *ab;
 	struct ath12k_sawf_ctx *sawf_ctx;
@@ -711,7 +721,7 @@ u16 ath12k_sawf_get_msduq(struct net_dev
 	if (!sawf_ctx)
 		return SAWF_PEER_MSDUQ_INVALID;
 
-	ab = ath12k_sawf_get_ab_from_netdev(dev, peer_mac, &peer_id);
+	ab = ath12k_sawf_get_ab_from_vif(vif, peer_mac, &peer_id);
 	if (!ab)
 		return SAWF_PEER_MSDUQ_INVALID;
 
@@ -979,7 +989,7 @@ unlock_ab_base:
 	rcu_read_unlock();
 }
 
-static void ath12k_sawf_core_send_ul_config(struct net_device *dev, u8 svc_id, u8 *mac_addr, u8 add_or_sub)
+static void ath12k_sawf_core_send_ul_config(struct ieee80211_vif *vif, u8 svc_id, u8 *mac_addr, u8 add_or_sub)
 {
 	struct ath12k_sawf_svc_params *svc_param;
 	struct ath12k_sawf_wmi_peer_latency_param latency_info;
@@ -1021,7 +1031,7 @@ static void ath12k_sawf_core_send_ul_con
 	spin_unlock_bh(&sawf->sawf_svc_lock);
 	ether_addr_copy(latency_info.peer_mac, mac_addr);
 
-	ret = ath12k_core_sawf_ul_config(dev, &latency_info);
+	ret = ath12k_core_sawf_ul_config(vif, &latency_info);
 }
 
 void ath12k_send_ul_configs(struct work_struct *work)
@@ -1039,21 +1049,24 @@ void ath12k_send_ul_configs(struct work_
 	list_for_each_entry_safe(ul_params, tmp, &sawf->list, list) {
 		list_del(&ul_params->list);
 		spin_unlock_bh(&sawf->sawf_svc_lock);
-		ath12k_sawf_core_send_ul_config(ul_params->src_dev,
-						ul_params->fw_service_id,
-						ul_params->src_mac,
-						ul_params->add_or_sub);
-		ath12k_sawf_core_send_ul_config(ul_params->dest_dev,
-						ul_params->rv_service_id,
-						ul_params->dst_mac,
-						ul_params->add_or_sub);
+		if (ul_params->src_vif)
+			ath12k_sawf_core_send_ul_config(ul_params->src_vif,
+							ul_params->fw_service_id,
+							ul_params->src_mac,
+							ul_params->add_or_sub);
+		if (ul_params->dest_vif)
+			ath12k_sawf_core_send_ul_config(ul_params->dest_vif,
+							ul_params->rv_service_id,
+							ul_params->dst_mac,
+							ul_params->add_or_sub);
 		kfree(ul_params);
 		spin_lock_bh(&sawf->sawf_svc_lock);
 	}
 	spin_unlock_bh(&sawf->sawf_svc_lock);
 }
 
-void ath12k_sawf_config_ul(struct net_device *dest_dev, u8 *dst_mac, struct net_device *src_dev, u8 *src_mac,
+void ath12k_sawf_config_ul(struct ieee80211_vif *dest_vif, u8 *dst_mac,
+			   struct ieee80211_vif *src_vif, u8 *src_mac,
 			   u8 fw_service_id, u8 rv_service_id,
 			   u8 add_or_sub)
 {
@@ -1065,13 +1078,14 @@ void ath12k_sawf_config_ul(struct net_de
 		ath12k_err(NULL, "SAWF ctx is invalid\n");
 		return;
 	}
+
 	ul_params = kzalloc(sizeof(*ul_params), GFP_NOWAIT);
 	if (!ul_params) {
 		ath12k_err(NULL,"Failed to allocate memory during SAWF UL configuration\n");
 		return;
 	}
-	ul_params->dest_dev = dest_dev;
-	ul_params->src_dev = src_dev;
+	ul_params->dest_vif = dest_vif;
+	ul_params->src_vif = src_vif;
 	ether_addr_copy(ul_params->dst_mac, dst_mac);
 	ether_addr_copy(ul_params->src_mac, src_mac);
 	ul_params->fw_service_id = fw_service_id;
--- a/include/ath/ath_dp_accel_cfg.h
+++ b/include/ath/ath_dp_accel_cfg.h
@@ -5,6 +5,8 @@
 #ifndef ATH_DP_ACCEL_CFG_H
 #define ATH_DP_ACCEL_CFG_H
 #include <linux/netdevice.h>
+#include <linux/if_vlan.h>
+#include <net/mac80211.h>
 
 /**
  * struct ath_dp_accel_cfg_ops - dp accelerator configuraton ops
@@ -12,7 +14,8 @@
  *
  */
 struct ath_dp_accel_cfg_ops {
-	bool (*ppeds_get_node_id)(struct net_device *dst_dev,
+	bool (*ppeds_get_node_id)(struct ieee80211_vif *vif,
+				  struct wireless_dev *wdev,
 				  const u8 *peer_mac, u8 *node_id);
 };
 
--- a/include/ath/ath_fse.h
+++ b/include/ath/ath_fse.h
@@ -5,6 +5,9 @@
 #ifndef ATH_FSE_H
 #define ATH_FSE_H
 #include <linux/netdevice.h>
+#include <linux/if_vlan.h>
+#include <net/mac80211.h>
+
 #define ATH_FSE_TID_INVALID 0xff
 
 struct ath_fse_ops {
@@ -16,7 +19,7 @@ struct ath_fse_ops {
 			       u32 *src_ip, u32 src_port,
 			       u32 *dest_ip, u32 dest_port,
 			       u8 protocol, u8 version);
-	void* (*fse_get_ab)(struct net_device *src_dev, const u8 *peer_mac);
+	void* (*fse_get_ab)(struct ieee80211_vif *vif, const u8 *peer_mac);
 };
 
 struct ath_fse_flow_info {
--- a/include/ath/ath_sawf.h
+++ b/include/ath/ath_sawf.h
@@ -5,17 +5,19 @@
 #ifndef ATH_SAWF_H
 #define ATH_SAWF_H
 #include <linux/netdevice.h>
+#include <net/mac80211.h>
+
 #define SAWF_MSDUQ_ID_INVALID   0x3F
 
 struct ath_sawf_callbacks {
-	u16 (*sawf_dl_callback)(struct net_device *out_dev,
+	u16 (*sawf_dl_callback)(struct ieee80211_vif *vif,
 				 u8 dest_mac[],
 				 u8 service_class_id,
 				 u32 dscp,
 				 u32 rule_id);
-	void (*sawf_ul_callback)(struct net_device *dest_dev,
+	void (*sawf_ul_callback)(struct ieee80211_vif *dest_vif,
 				  u8 dest_mac[],
-				  struct net_device *src_dev,
+				  struct ieee80211_vif *src_vif,
 				  u8 src_mac[],
 				  u8 fwd_service_id,
 				  u8 rev_service_id,
--- a/drivers/net/wireless/ath/ath12k/fse.h
+++ b/drivers/net/wireless/ath/ath12k/fse.h
@@ -34,8 +34,8 @@ static inline char *fse_state_to_string(
 
 void ath12k_fse_init(struct ath12k_base *ab);
 void ath12k_fse_deinit(struct ath12k_base *ab);
-void *ath12k_fse_get_ab_from_netdev(struct net_device *dev,
-				    const u8 *peer_mac);
+void *ath12k_fse_get_ab_from_vif(struct ieee80211_vif *vif,
+				 const u8 *peer_mac);
 int ath12k_sfe_add_flow_entry(struct ath12k_base *ab,
 			      u32 *src_ip, u32 src_port,
 			      u32 *dest_ip, u32 dest_port,
--- a/drivers/net/wireless/ath/ath12k/sawf.h
+++ b/drivers/net/wireless/ath/ath12k/sawf.h
@@ -181,8 +181,8 @@ struct ath12k_sawf_svc_params {
 
 struct ath12k_ul_params {
 	struct list_head list;
-	struct net_device *dest_dev;
-	struct net_device *src_dev;
+	struct ieee80211_vif *dest_vif;
+	struct ieee80211_vif *src_vif;
 	u8 dst_mac[ETH_ALEN];
 	u8 src_mac[ETH_ALEN];
 	u8 fw_service_id;
@@ -827,14 +827,19 @@ int ath12k_sawf_reconfigure_on_crash(str
 int ath12k_create_send_svc_params(struct ath12k_sawf_svc_params *param);
 int ath12k_sawf_disable_config(u8 svc_id);
 void ath12k_send_ul_configs(struct work_struct *work);
-u16 ath12k_sawf_get_msduq(struct net_device *netdev,
+u16 ath12k_sawf_get_msduq(struct ieee80211_vif *vif,
 			  u8 *peer_mac, u32 service_id,
 			  u32 dscp, u32 rule_id);
-void ath12k_sawf_config_ul(struct net_device *dest_dev, u8 *dst_mac, struct net_device *src_dev,  u8 *src_mac,
+void ath12k_sawf_config_ul(struct ieee80211_vif *dest_vif, u8 *dst_mac,
+			   struct ieee80211_vif *src_vif,  u8 *src_mac,
 			   u8 fw_service_id, u8 rv_service_id,
 			   u8 add_or_sub);
 int ath12k_sawf_wmi_config_ul(struct ath12k *ar,
 			      struct ath12k_sawf_wmi_peer_latency_param *latency_info);
+struct ath12k_base *ath12k_sawf_get_ab_from_vif(struct ieee80211_vif *vif,
+						u8 *peer_mac,
+						u16 *peer_id);
+
 struct ath12k_base *ath12k_sawf_get_ab_from_netdev(struct net_device *dev,
 						u8 *peer_mac,
 						u16 *peer_id);
--- a/drivers/net/wireless/ath/ath_accel_cfg.c
+++ b/drivers/net/wireless/ath/ath_accel_cfg.c
@@ -27,10 +27,42 @@ EXPORT_SYMBOL(ath_dp_accel_cfg_ops_callb
 
 bool ath_dp_accel_cfg_fetch_ds_node_id(struct ath_dp_accel_cfg *info)
 {
+	struct net_device *dev = info->in_dest_dev;
+	struct wireless_dev *wdev;
+	struct ieee80211_vif *vif;
+	struct ieee80211_hw *hw;
+
 	if (!ath_dp_accel_cfg_cb)
 		return false;
 
-	return ath_dp_accel_cfg_cb->ppeds_get_node_id(info->in_dest_dev,
+	wdev = dev->ieee80211_ptr;
+	if (!wdev) {
+		/*
+		 * If the netdev is vlan, it may not have ieee80211_ptr.
+		 * In that case fetch the ieee80211_ptr from its top most parent
+		 */
+		if (is_vlan_dev(dev)) {
+			struct net_device *parent_ndev =
+					vlan_dev_real_dev(dev);
+			if (parent_ndev)
+				wdev = parent_ndev->ieee80211_ptr;
+
+			if (!wdev)
+				return false;
+		} else {
+			return false;
+		}
+	}
+
+	hw = wiphy_to_ieee80211_hw(wdev->wiphy);
+	if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+		return false;
+
+	vif = wdev_to_ieee80211_vif_vlan(wdev, false);
+	if (!vif)
+		return false;
+
+	return ath_dp_accel_cfg_cb->ppeds_get_node_id(vif, wdev,
 						info->in_dest_mac,
 						&info->out_ppe_ds_node_id);
 }
--- a/drivers/net/wireless/ath/ath_fse.c
+++ b/drivers/net/wireless/ath/ath_fse.c
@@ -28,6 +28,9 @@ EXPORT_SYMBOL(ath_fse_ops_callback_unreg
 
 bool ath_fse_add_rule(struct ath_fse_flow_info *fse_info)
 {
+	struct wireless_dev *src_wdev, *dest_wdev;
+	struct ieee80211_vif *vif;
+	struct ieee80211_hw *hw;
 	int ret;
 	void *ab;
 
@@ -38,7 +41,10 @@ bool ath_fse_add_rule(struct ath_fse_flo
 		pr_warn("Unable to find dev for FSE rule push\n");
 		return false;
 	}
-	if (!fse_info->src_dev->ieee80211_ptr && !fse_info->dest_dev->ieee80211_ptr) {
+
+	src_wdev = fse_info->src_dev->ieee80211_ptr;
+	dest_wdev = fse_info->dest_dev->ieee80211_ptr;
+	if (!src_wdev && !dest_wdev) {
 		pr_debug("Not a wlan traffic for FSE rule push:sdev:%s ddev:%s\n",
 			 netdev_name(fse_info->src_dev),
 			 netdev_name(fse_info->dest_dev));
@@ -50,8 +56,16 @@ bool ath_fse_add_rule(struct ath_fse_flo
 	 * add a rule. If dest is VAP, it is 5 tuple info has to be
 	 * reversed for adding a rule.
 	 */
-	if (fse_info->src_dev->ieee80211_ptr) {
-		ab = fse_cb->fse_get_ab(fse_info->src_dev, fse_info->src_mac);
+	if (src_wdev) {
+		hw = wiphy_to_ieee80211_hw(src_wdev->wiphy);
+		if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+			return false;
+
+		vif = wdev_to_ieee80211_vif_vlan(src_wdev, false);
+		if (!vif)
+			return false;
+
+		ab = fse_cb->fse_get_ab(vif, fse_info->src_mac);
 		if (!ab) {
 			pr_debug("%s: Failed to add a rule in FST<ab NULL>",
 				 netdev_name(fse_info->src_dev));
@@ -67,8 +81,16 @@ bool ath_fse_add_rule(struct ath_fse_flo
 			return false;
 		}
 	}
-	if (fse_info->dest_dev->ieee80211_ptr) {
-		ab = fse_cb->fse_get_ab(fse_info->dest_dev, fse_info->dest_mac);
+	if (dest_wdev) {
+		hw = wiphy_to_ieee80211_hw(dest_wdev->wiphy);
+		if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+			return false;
+
+		vif = wdev_to_ieee80211_vif_vlan(dest_wdev, false);
+		if (!vif)
+			return false;
+
+		ab = fse_cb->fse_get_ab(vif, fse_info->dest_mac);
 		if (!ab) {
 			pr_debug("%s: Failed to add a rule in FST<ab NULL>",
 				 netdev_name(fse_info->dest_dev));
@@ -83,7 +105,7 @@ bool ath_fse_add_rule(struct ath_fse_flo
 			 * to configure FSE rule, delete the rule added for
 			 * the other direction as well.
 			 */
-			if (fse_info->src_dev->ieee80211_ptr) {
+			if (src_wdev) {
 				fse_cb->fse_rule_delete(ab,
 						fse_info->src_ip, fse_info->src_port,
 						fse_info->dest_ip, fse_info->dest_port,
@@ -100,6 +122,9 @@ EXPORT_SYMBOL(ath_fse_add_rule);
 
 bool ath_fse_delete_rule(struct ath_fse_flow_info *fse_info)
 {
+	struct wireless_dev *src_wdev, *dest_wdev;
+	struct ieee80211_vif *vif;
+	struct ieee80211_hw *hw;
 	void *ab;
 	int fw_ret = 0;
 	int rv_ret = 0;
@@ -111,7 +136,10 @@ bool ath_fse_delete_rule(struct ath_fse_
 		pr_warn("Unable to find dev for FSE rule delete");
 		return false;
 	}
-	if (!fse_info->src_dev->ieee80211_ptr && !fse_info->dest_dev->ieee80211_ptr) {
+
+	src_wdev = fse_info->src_dev->ieee80211_ptr;
+	dest_wdev = fse_info->dest_dev->ieee80211_ptr;
+	if (!src_wdev && !dest_wdev) {
 		pr_debug("Not a wlan traffic for FSE rule delete:sdev:%s ddev:%s\n",
 			 netdev_name(fse_info->src_dev),
 			 netdev_name(fse_info->dest_dev));
@@ -123,8 +151,16 @@ bool ath_fse_delete_rule(struct ath_fse_
 	 * delete a rule. If dest is VAP, it is 5 tuple info has to be
 	 * reversed to delete a rule.
 	 */
-	if (fse_info->src_dev->ieee80211_ptr) {
-		ab = fse_cb->fse_get_ab(fse_info->src_dev, fse_info->src_mac);
+	if (src_wdev) {
+		hw = wiphy_to_ieee80211_hw(src_wdev->wiphy);
+		if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+			return false;
+
+		vif = wdev_to_ieee80211_vif_vlan(src_wdev, false);
+		if (!vif)
+			return false;
+
+		ab = fse_cb->fse_get_ab(vif, fse_info->src_mac);
 		if (!ab) {
 			pr_debug("Failed to delete a rule in FST<ab NULL>");
 			return false;
@@ -135,8 +171,16 @@ bool ath_fse_delete_rule(struct ath_fse_
 						  fse_info->protocol, fse_info->version);
 	}
 
-	if (fse_info->dest_dev->ieee80211_ptr) {
-		ab = fse_cb->fse_get_ab(fse_info->dest_dev, fse_info->dest_mac);
+	if (dest_wdev) {
+		hw = wiphy_to_ieee80211_hw(dest_wdev->wiphy);
+		if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+			return false;
+
+		vif = wdev_to_ieee80211_vif_vlan(dest_wdev, false);
+		if (!vif)
+			return false;
+
+		ab = fse_cb->fse_get_ab(vif, fse_info->dest_mac);
 		if (!ab) {
 			pr_debug("Failed to delete a rule in FST<ab NULL>");
 			return false;
--- a/drivers/net/wireless/ath/ath_sawf.c
+++ b/drivers/net/wireless/ath/ath_sawf.c
@@ -35,6 +35,10 @@ EXPORT_SYMBOL(ath_sawf_msduq_callback_un
 
 u16 ath_sawf_downlink(struct ath_dl_params *ecm_ath_dl_params)
 {
+	struct net_device *dev = ecm_ath_dl_params->netdev;
+	struct wireless_dev *wdev;
+	struct ieee80211_vif *vif;
+	struct ieee80211_hw *hw;
 	u16 ret = SAWF_MSDUQ_ID_INVALID;
 
 	if (unlikely(!ecm_ath_dl_params)) {
@@ -42,10 +46,25 @@ u16 ath_sawf_downlink(struct ath_dl_para
 		return ret;
 	}
 
+	if (!dev)
+		return ret;
+
+	wdev = dev->ieee80211_ptr;
+	if (!wdev)
+		return ret;
+
+	hw = wiphy_to_ieee80211_hw(wdev->wiphy);
+	if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+		return ret;
+
+	vif = wdev_to_ieee80211_vif(wdev);
+	if (!vif)
+		return ret;
+
 	spin_lock_bh(&sawf_uldl_lock);
 
 	if (sawf_cb)
-		ret = sawf_cb->sawf_dl_callback(ecm_ath_dl_params->netdev,
+		ret = sawf_cb->sawf_dl_callback(vif,
 						 ecm_ath_dl_params->peer_mac,
 						 ecm_ath_dl_params->service_id,
 						 ecm_ath_dl_params->dscp,
@@ -61,21 +80,48 @@ EXPORT_SYMBOL(ath_sawf_downlink);
 
 void ath_sawf_uplink(struct ath_ul_params *ecm_ath_ul_params)
 {
+	struct wireless_dev *src_wdev = NULL, *dest_wdev = NULL;
+	struct ieee80211_vif *src_vif = NULL, *dest_vif = NULL;
+	struct ieee80211_hw *hw;
+
 	if (unlikely(!ecm_ath_ul_params)) {
 		pr_info("ECM uplink parameters are not available\n");
 		return;
 	}
 
+	if (ecm_ath_ul_params->src_dev)
+		src_wdev = ecm_ath_ul_params->src_dev->ieee80211_ptr;
+	if ( ecm_ath_ul_params->dst_dev)
+		dest_wdev = ecm_ath_ul_params->dst_dev->ieee80211_ptr;
+	if (!src_wdev && !dest_wdev)
+		return;
+
+	if (src_wdev) {
+		hw = wiphy_to_ieee80211_hw(src_wdev->wiphy);
+		if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+			return;
+
+		src_vif = wdev_to_ieee80211_vif(src_wdev);
+	}
+
+	if (dest_wdev) {
+		hw = wiphy_to_ieee80211_hw(dest_wdev->wiphy);
+		if (!ieee80211_hw_check(hw, SUPPORT_ECM_REGISTRATION))
+			return;
+
+		dest_vif = wdev_to_ieee80211_vif(dest_wdev);
+	}
+
 	spin_lock_bh(&sawf_uldl_lock);
 
 	if (sawf_cb)
-		sawf_cb->sawf_ul_callback(ecm_ath_ul_params->dst_dev,
-					   ecm_ath_ul_params->dst_mac,
-					   ecm_ath_ul_params->src_dev,
-					   ecm_ath_ul_params->src_mac,
-					   ecm_ath_ul_params->fw_service_id,
-					   ecm_ath_ul_params->rv_service_id,
-					   ecm_ath_ul_params->start_or_stop);
+		sawf_cb->sawf_ul_callback(dest_vif,
+					  ecm_ath_ul_params->dst_mac,
+					  src_vif,
+					  ecm_ath_ul_params->src_mac,
+					  ecm_ath_ul_params->fw_service_id,
+					  ecm_ath_ul_params->rv_service_id,
+					  ecm_ath_ul_params->start_or_stop);
 	else
 		pr_err("SAWF ath uplink callback failed\n");
 
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -4276,32 +4276,20 @@ int ath12k_sawf_send_disable_soc(u8 svc_
 	return ret;
 }
 
-int ath12k_core_sawf_ul_config(struct net_device *dev, struct ath12k_sawf_wmi_peer_latency_param *latency_info)
+int ath12k_core_sawf_ul_config(struct ieee80211_vif *vif,
+				struct ath12k_sawf_wmi_peer_latency_param *latency_info)
 {
+	struct ath12k_vif *ahvif;
 	struct ieee80211_sta *sta;
 	struct ath12k_sta *ahsta;
 	struct ath12k_link_sta *arsta;
-	struct wireless_dev *wdev;
-	struct ieee80211_vif *vif;
-	struct ath12k_vif *ahvif;
 	int ret = -EOPNOTSUPP;
 	u16 link_id;
 
 	if (!latency_info)
 		return -EINVAL;
 
-	if (!dev)
-		return -EINVAL;
-
-	wdev = dev->ieee80211_ptr;
-	if (!wdev)
-		return -EINVAL;
-
-	vif = wdev_to_ieee80211_vif(wdev);
-	if (!vif)
-		return -EINVAL;
-
-	ahvif = (struct ath12k_vif *)vif->drv_priv;
+	ahvif = ath12k_vif_to_ahvif(vif);
 	if (!ahvif)
 		return -EINVAL;
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1870,7 +1870,8 @@ void ath12k_fw_stats_free(struct ath12k_
 #ifdef CPTCFG_ATH12K_SAWF
 int ath12k_send_sawf_configs_soc(struct ath12k_sawf_svc_params *new_param);
 int ath12k_sawf_send_disable_soc(u8 svc_id);
-int ath12k_core_sawf_ul_config(struct net_device *dev, struct ath12k_sawf_wmi_peer_latency_param *latency_info);
+int ath12k_core_sawf_ul_config(struct ieee80211_vif *vif,
+			       struct ath12k_sawf_wmi_peer_latency_param *latency_info);
 void *ath12k_get_ab_nd_peer_from_peer_mac(u8 *peer_mac, struct ath12k_base **ab_ref);
 void ath12k_get_svc_int_nd_burst_sz_stats(u16 ml_peer_id, int tid, int q_idx,
 					  u64 *svc_int_suc, u64 *svc_int_fail,
