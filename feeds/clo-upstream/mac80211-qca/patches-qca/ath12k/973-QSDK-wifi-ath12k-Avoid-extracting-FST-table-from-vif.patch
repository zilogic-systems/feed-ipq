From 6da4af0969aa242e4d3dda0085660afa518ce58c Mon Sep 17 00:00:00 2001
From: syed touqeer pasha <quic_spasha@quicinc.com>
Date: Tue, 20 Aug 2024 17:43:52 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Avoid extracting FST table from vif
 context during delete entry

When vif is going down and FST delete entry is in pipeline,
fetching FST table using vif would result in error and returns
without deleting FST entry. FST stale entry would permanently remain
in the table and never be removed. It would also prevent addition of
any new entry with same flow params.

As FST table is created and table context is attached to hw group.
During FST entry delete, get FST table context from hw group and
avoid vif dereference.

Patch-dependency: none

Signed-off-by: syed touqeer pasha <quic_spasha@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c |  2 +-
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 82 +++++++++++------------
 drivers/net/wireless/ath/ath12k/dp_rx.h   |  4 +-
 drivers/net/wireless/ath/ath12k/fse.c     |  2 +-
 drivers/net/wireless/ath/ath12k/hal.h     |  1 +
 drivers/net/wireless/ath/ath12k/hal_rx.c  | 42 ++++++------
 drivers/net/wireless/ath/ath12k/hal_rx.h  | 18 ++---
 drivers/net/wireless/ath/ath12k/ppe.c     | 54 +++++++--------
 8 files changed, 100 insertions(+), 105 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index d38c9dd5..de02318d 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2855,7 +2855,7 @@ static ssize_t ath12k_fse_ops_write(struct file *file,
 			flow_info.fse_metadata = ATH12K_RX_FSE_FLOW_MATCH_DEBUGFS;
 			ath12k_dp_rx_flow_add_entry(ab, &flow_info);
 		} else {
-			ath12k_dp_rx_flow_delete_entry(ab, &flow_info);
+			ath12k_hw_grp_dp_rx_flow_delete_entry(ab->ag, &flow_info);
 		}
 		ret = count;
 	}
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index e80d43ee..e11a6ca2 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -5949,26 +5949,26 @@ void ath12k_dp_rx_fst_detach(struct ath12k_base *ab, struct dp_rx_fst *fst)
 	ath12k_info(ab, "Rx FST detach successful");
 }

-static void ath12k_dp_rx_flow_dump_flow_entry(struct ath12k_base *ab,
+static void ath12k_hw_grp_dp_rx_flow_dump_flow_entry(struct ath12k_hw_group *ag,
 					      struct hal_flow_tuple_info *tuple_info)
 {
-	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Dest IP address %x:%x:%x:%x",
+	ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "Dest IP address %x:%x:%x:%x",
 		   tuple_info->dest_ip_127_96,
 		   tuple_info->dest_ip_95_64,
 		   tuple_info->dest_ip_63_32,
 		   tuple_info->dest_ip_31_0);
-	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Source IP address %x:%x:%x:%x",
+	ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "Source IP address %x:%x:%x:%x",
 		   tuple_info->src_ip_127_96,
 		   tuple_info->src_ip_95_64,
 		   tuple_info->src_ip_63_32,
 		   tuple_info->src_ip_31_0);
-	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Dest port %u, Src Port %u, Protocol %u",
+	ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "Dest port %u, Src Port %u, Protocol %u",
 		   tuple_info->dest_port,
 		   tuple_info->src_port,
 		   tuple_info->l4_protocol);
 }

-u32 ath12k_dp_rx_flow_compute_flow_hash(struct ath12k_base *ab,
+u32 ath12k_dp_rx_flow_compute_flow_hash(struct ath12k_hw_group *ag,
 					struct dp_rx_fst *fst,
 					struct rx_flow_info *rx_flow_info,
 					struct hal_rx_flow *flow)
@@ -5976,7 +5976,7 @@ u32 ath12k_dp_rx_flow_compute_flow_hash(struct ath12k_base *ab,
 	memcpy(&flow->tuple_info, &rx_flow_info->flow_tuple_info,
 	       sizeof(struct hal_flow_tuple_info));

-	return ath12k_hal_flow_toeplitz_hash(ab, fst->hal_rx_fst, &flow->tuple_info);
+	return ath12k_hw_grp_hal_flow_toeplitz_hash(ag, fst->hal_rx_fst, &flow->tuple_info);
 }

 static inline struct dp_rx_fse *
@@ -5990,7 +5990,7 @@ ath12k_dp_rx_flow_get_fse(struct dp_rx_fst *fst, u32 flow_hash)
 }

 struct dp_rx_fse *
-ath12k_dp_rx_flow_find_entry_by_tuple(struct ath12k_base *ab,
+ath12k_dp_rx_flow_find_entry_by_tuple(struct ath12k_hw_group *ag,
 				      struct dp_rx_fst *fst,
 				      struct rx_flow_info *flow_info,
 				      struct hal_rx_flow *flow)
@@ -5999,16 +5999,16 @@ ath12k_dp_rx_flow_find_entry_by_tuple(struct ath12k_base *ab,
 	u32 flow_idx;
 	int status;

-	flow_hash = ath12k_dp_rx_flow_compute_flow_hash(ab, fst, flow_info, flow);
+	flow_hash = ath12k_dp_rx_flow_compute_flow_hash(ag, fst, flow_info, flow);

-	status = ath12k_hal_rx_find_flow_from_tuple(ab, fst->hal_rx_fst,
-						    flow_hash,
-						    &flow_info->flow_tuple_info,
-						    &flow_idx);
+	status = ath12k_hw_grp_hal_rx_find_flow_from_tuple(ag, fst->hal_rx_fst,
+							   flow_hash,
+							   &flow_info->flow_tuple_info,
+							   &flow_idx);
 	if (status != 0) {
-		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Could not find tuple with hash %u",
+		ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "Could not find tuple with hash %u",
 			   flow_hash);
-		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		ath12k_hw_grp_dp_rx_flow_dump_flow_entry(ag, &flow_info->flow_tuple_info);
 		return NULL;
 	}

@@ -6073,15 +6073,15 @@ static inline int ath12k_dp_fst_get_reo_indication(struct ath12k_base *ab)
 	return reo_indication;
 }

-static int ath12k_dp_rx_invalidate_entry(struct ath12k_base *ab,
-					 enum dp_htt_flow_fst_operation operation,
-					 struct hal_flow_tuple_info *tuple_info)
+static int ath12k_hw_grp_dp_rx_invalidate_entry(struct ath12k_hw_group *ag,
+						enum dp_htt_flow_fst_operation operation,
+						struct hal_flow_tuple_info *tuple_info)
 {
 	int i;
 	int ret = 0;

-	for (i = 0; i < ab->ag->num_chip; i++) {
-		struct ath12k_base *partner_ab = ab->ag->ab[i];
+	for (i = 0; i < ag->num_chip; i++) {
+		struct ath12k_base *partner_ab = ag->ab[i];

 		if (!partner_ab)
 			continue;
@@ -6122,7 +6122,7 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 	fse = ath12k_dp_rx_flow_alloc_entry(ab, fst, flow_info, &flow);
 	if (!fse) {
 		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "RX FSE alloc failed");
-		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		ath12k_hw_grp_dp_rx_flow_dump_flow_entry(ab->ag, &flow_info->flow_tuple_info);
 		fst->flow_add_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return -ENOMEM;
@@ -6149,19 +6149,19 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 						    fse->flow_id, &flow);
 	if (!fse->hal_fse) {
 		ath12k_err(ab, "Unable to alloc FSE entry");
-		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		ath12k_hw_grp_dp_rx_flow_dump_flow_entry(ab->ag, &flow_info->flow_tuple_info);
 		fse->is_valid = false;
 		fst->flow_add_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return -EEXIST;
 	}

-	ret = ath12k_dp_rx_invalidate_entry(ab, DP_HTT_FST_CACHE_INVALIDATE_ENTRY,
-					    &flow_info->flow_tuple_info);
+	ret = ath12k_hw_grp_dp_rx_invalidate_entry(ab->ag, DP_HTT_FST_CACHE_INVALIDATE_ENTRY,
+						   &flow_info->flow_tuple_info);
 	if (ret) {
 		ath12k_err(ab, "Unable to invalidate cache entry ret %d", ret);
-		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
-		ath12k_hal_rx_flow_delete_entry(ab, fse->hal_fse);
+		ath12k_hw_grp_dp_rx_flow_dump_flow_entry(ab->ag, &flow_info->flow_tuple_info);
+		ath12k_hw_grp_hal_rx_flow_delete_entry(ab->ag, fse->hal_fse);
 		fse->is_valid = false;
 		fst->flow_add_fail++;
 		spin_unlock_bh(&fst->fst_lock);
@@ -6186,33 +6186,33 @@ int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 	return 0;
 }

-int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
-				   struct rx_flow_info *flow_info)
+int ath12k_hw_grp_dp_rx_flow_delete_entry(struct ath12k_hw_group *ag,
+					  struct rx_flow_info *flow_info)
 {
 	struct hal_rx_flow flow = { 0 };
 	struct dp_rx_fse *fse;
-	struct dp_rx_fst *fst = ab->ag->fst;
+	struct dp_rx_fst *fst = ag->fst;
 	int ret;

 	if (!fst) {
-		ath12k_warn(ab, "FST table is NULL\n");
+		ath12k_warn(ag->ab[0], "FST table is NULL\n");
 		return -ENODEV;
 	}

 	/* lock the FST table to prevent concurrent access */
 	spin_lock_bh(&fst->fst_lock);

-	fse = ath12k_dp_rx_flow_find_entry_by_tuple(ab, fst, flow_info, &flow);
+	fse = ath12k_dp_rx_flow_find_entry_by_tuple(ag, fst, flow_info, &flow);
 	if (!fse || !fse->is_valid) {
-		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "RX flow delete entry failed");
-		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "RX flow delete entry failed");
+		ath12k_hw_grp_dp_rx_flow_dump_flow_entry(ag, &flow_info->flow_tuple_info);
 		fst->flow_del_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return -EINVAL;
 	}

 	/* Delete the FSE in HW FST */
-	ath12k_hal_rx_flow_delete_entry(ab, fse->hal_fse);
+	ath12k_hw_grp_hal_rx_flow_delete_entry(ag, fse->hal_fse);

 	/* mark the FSE entry as invalid */
 	fse->is_valid = false;
@@ -6220,11 +6220,11 @@ int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
 	/* Decrement number of valid entries in table */
 	fst->num_entries--;

-	ret = ath12k_dp_rx_invalidate_entry(ab, DP_HTT_FST_CACHE_INVALIDATE_ENTRY,
-					    &flow_info->flow_tuple_info);
+	ret = ath12k_hw_grp_dp_rx_invalidate_entry(ag, DP_HTT_FST_CACHE_INVALIDATE_ENTRY,
+						   &flow_info->flow_tuple_info);
 	if (ret) {
-		ath12k_err(ab, "Unable to invalidate cache entry ret %d", ret);
-		ath12k_dp_rx_flow_dump_flow_entry(ab, &flow_info->flow_tuple_info);
+		ath12k_err(ag->ab[0], "Unable to invalidate cache entry ret %d", ret);
+		ath12k_hw_grp_dp_rx_flow_dump_flow_entry(ag, &flow_info->flow_tuple_info);
 		fst->flow_del_fail++;
 		spin_unlock_bh(&fst->fst_lock);
 		return ret;
@@ -6232,7 +6232,7 @@ int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,

 	spin_unlock_bh(&fst->fst_lock);

-	ath12k_dbg(ab, ATH12K_DBG_DP_FST,
+	ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST,
 		   "FST num_entries = %d", fst->num_entries);

 	fst->flows_per_reo[fse->reo_indication - 1]--;
@@ -6263,7 +6263,7 @@ int ath12k_dp_rx_flow_delete_all_entries(struct ath12k_base *ab)
 		if (!fse->is_valid)
 			continue;

-		ath12k_hal_rx_flow_delete_entry(ab, fse->hal_fse);
+		ath12k_hw_grp_hal_rx_flow_delete_entry(ab->ag, fse->hal_fse);

 		fse->is_valid = false;

@@ -6271,7 +6271,7 @@ int ath12k_dp_rx_flow_delete_all_entries(struct ath12k_base *ab)
 		fst->flows_per_reo[fse->reo_indication - 1]--;
 	}

-	ret = ath12k_dp_rx_invalidate_entry(ab, DP_HTT_FST_CACHE_INVALIDATE_FULL, NULL);
+	ret = ath12k_hw_grp_dp_rx_invalidate_entry(ab->ag, DP_HTT_FST_CACHE_INVALIDATE_FULL, NULL);
 	if (ret) {
 		ath12k_err(ab, "Unable to invalidate cache entry ret %d", ret);
 		spin_unlock_bh(&fst->fst_lock);
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.h b/drivers/net/wireless/ath/ath12k/dp_rx.h
index 764a3ecb..11735340 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -298,8 +298,8 @@ void ath12k_dp_reset_rx_reo_tid_q(void *vaddr, u32 ba_window_size,
 				  u8 tid);
 int ath12k_dp_rx_flow_add_entry(struct ath12k_base *ab,
 				struct rx_flow_info *flow_info);
-int ath12k_dp_rx_flow_delete_entry(struct ath12k_base *ab,
-				   struct rx_flow_info *flow_info);
+int ath12k_hw_grp_dp_rx_flow_delete_entry(struct ath12k_hw_group *ag,
+					  struct rx_flow_info *flow_info);
 int ath12k_dp_rx_flow_delete_all_entries(struct ath12k_base *ab);
 void ath12k_dp_rx_fst_detach(struct ath12k_base *ab, struct dp_rx_fst *fst);
 struct dp_rx_fst *ath12k_dp_rx_fst_attach(struct ath12k_base *ab);
diff --git a/drivers/net/wireless/ath/ath12k/fse.c b/drivers/net/wireless/ath/ath12k/fse.c
index 1d3c3b72..d10185c6 100644
--- a/drivers/net/wireless/ath/ath12k/fse.c
+++ b/drivers/net/wireless/ath/ath12k/fse.c
@@ -154,5 +154,5 @@ int ath12k_sfe_delete_flow_entry(struct ath12k_base *ab,
 	ath12k_dp_rx_sfe_update_flow_info(ab, &flow_info, src_ip, src_port, dest_ip,
 					  dest_port, protocol, version, FSE_RULE_DELETE);

-	return ath12k_dp_rx_flow_delete_entry(ab, &flow_info);
+	return ath12k_hw_grp_dp_rx_flow_delete_entry(ab->ag, &flow_info);
 }
diff --git a/drivers/net/wireless/ath/ath12k/hal.h b/drivers/net/wireless/ath/ath12k/hal.h
index 591010c7..d1e39ad7 100644
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -13,6 +13,7 @@

 struct ath12k_base;
 struct ath12k_dp_rx_info;
+struct ath12k_hw_group;
 #define HAL_CE_REMAP_REG_BASE	(ab->ce_remap_base_addr)

 #define HAL_LINK_DESC_SIZE			(32 << 2)
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.c b/drivers/net/wireless/ath/ath12k/hal_rx.c
index 6ada0d50..3da18846 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -1027,8 +1027,8 @@ ath12k_hal_flow_toeplitz_create_cache(struct hal_rx_fst *fst)
 	}
 }

-u32 ath12k_hal_flow_toeplitz_hash(struct ath12k_base *ab, struct hal_rx_fst *fst,
-				  struct hal_flow_tuple_info *tuple_info)
+u32 ath12k_hw_grp_hal_flow_toeplitz_hash(struct ath12k_hw_group *ag, struct hal_rx_fst *fst,
+					 struct hal_flow_tuple_info *tuple_info)
 {
 	int i, j;
 	u32 hash = 0;
@@ -1055,7 +1055,7 @@ u32 ath12k_hal_flow_toeplitz_hash(struct ath12k_base *ab, struct hal_rx_fst *fst
 	hash >>= 12;
 	hash &= (fst->max_entries - 1);

-	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Hash value %u\n", hash);
+	ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "Hash value %u\n", hash);

 	return hash;
 }
@@ -1068,10 +1068,10 @@ u32 ath12k_hal_rx_get_trunc_hash(struct hal_rx_fst *fst, u32 hash)
 	return hash;
 }

-void *ath12k_hal_rx_flow_get_tuple_info(struct ath12k_base *ab,
-					struct hal_rx_fst *fst,
-					u32 hal_hash,
-					struct hal_flow_tuple_info *tuple_info)
+void *ath12k_hw_grp_hal_rx_flow_get_tuple_info(struct ath12k_hw_group *ag,
+					       struct hal_rx_fst *fst,
+					       u32 hal_hash,
+					       struct hal_flow_tuple_info *tuple_info)
 {
 	struct hal_rx_fse *hal_fse = &fst->base_vaddr[hal_hash];

@@ -1099,11 +1099,11 @@ void *ath12k_hal_rx_flow_get_tuple_info(struct ath12k_base *ab,
 	return hal_fse;
 }

-int ath12k_hal_rx_find_flow_from_tuple(struct ath12k_base *ab,
-				       struct hal_rx_fst *fst,
-				       u32 flow_hash,
-				       void *flow_tuple_info,
-				       u32 *flow_idx)
+int ath12k_hw_grp_hal_rx_find_flow_from_tuple(struct ath12k_hw_group *ag,
+					      struct hal_rx_fst *fst,
+					      u32 flow_hash,
+					      void *flow_tuple_info,
+					      u32 *flow_idx)
 {
 	int i;
 	void *hal_fse = NULL;
@@ -1113,8 +1113,8 @@ int ath12k_hal_rx_find_flow_from_tuple(struct ath12k_base *ab,
 	for (i = 0; i < fst->max_skid_length; i++) {
 		hal_hash = ath12k_hal_rx_get_trunc_hash(fst, (flow_hash + i));

-		hal_fse = ath12k_hal_rx_flow_get_tuple_info(ab, fst, hal_hash,
-							    &hal_tuple_info);
+		hal_fse = ath12k_hw_grp_hal_rx_flow_get_tuple_info(ag, fst, hal_hash,
+								   &hal_tuple_info);
 		if (!hal_fse)
 			continue;

@@ -1125,13 +1125,13 @@ int ath12k_hal_rx_find_flow_from_tuple(struct ath12k_base *ab,
 	}

 	if (i == fst->max_skid_length) {
-		ath12k_dbg(ab, ATH12K_DBG_DP_FST, "Max skid length reached for hash %u",
+		ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "Max skid length reached for hash %u",
 			   flow_hash);
 		return -ERANGE;
 	}

 	*flow_idx = hal_hash;
-	ath12k_dbg(ab, ATH12K_DBG_DP_FST,
+	ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST,
 		   "flow_hash = %u, skid_entry = %d, flow_addr = %pK flow_idx = %d",
 		   flow_hash, i, hal_fse, *flow_idx);

@@ -1263,8 +1263,8 @@ int ath12k_hal_rx_insert_flow_entry(struct ath12k_base *ab, struct hal_rx_fst *f
 	for (i = 0; i < fst->max_skid_length; i++) {
 		hal_hash = ath12k_hal_rx_get_trunc_hash(fst, (flow_hash + i));

-		hal_fse = ath12k_hal_rx_flow_get_tuple_info(ab, fst, hal_hash,
-							    &hal_tuple_info);
+		hal_fse = ath12k_hw_grp_hal_rx_flow_get_tuple_info(ab, fst, hal_hash,
+								   &hal_tuple_info);
 		if (!hal_fse)
 			break;

@@ -1346,11 +1346,11 @@ void *ath12k_hal_rx_flow_setup_fse(struct ath12k_base *ab, struct hal_rx_fst *fs
 	return hal_fse;
 }

-void ath12k_hal_rx_flow_delete_entry(struct ath12k_base *ab,
-				     struct hal_rx_fse *hal_fse)
+void ath12k_hw_grp_hal_rx_flow_delete_entry(struct ath12k_hw_group *ag,
+					    struct hal_rx_fse *hal_fse)
 {
 	if (!u32_get_bits(hal_fse->info2, HAL_RX_FSE_VALID))
-		ath12k_err(ab, "HAL FSE %pK is invalid", hal_fse);
+		ath12k_err(ag->ab[0], "HAL FSE %pK is invalid", hal_fse);
 	else
 		hal_fse->info2 = u32_encode_bits(0, HAL_RX_FSE_VALID);
 }
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.h b/drivers/net/wireless/ath/ath12k/hal_rx.h
index 4239b67d..f91e78e2 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -1279,13 +1279,13 @@ void ath12k_hal_rx_reo_ent_paddr_get(struct ath12k_base *ab,
 struct hal_rx_fst *ath12k_hal_rx_fst_attach(struct ath12k_base *ab);
 void ath12k_hal_rx_fst_detach(struct ath12k_base *ab, struct hal_rx_fst *fst);
 u32 ath12k_hal_rx_get_trunc_hash(struct hal_rx_fst *fst, u32 hash);
-u32 ath12k_hal_flow_toeplitz_hash(struct ath12k_base *ab, struct hal_rx_fst *fst,
-				  struct hal_flow_tuple_info *tuple_info);
-int ath12k_hal_rx_find_flow_from_tuple(struct ath12k_base *ab,
-				       struct hal_rx_fst *fst,
-				       u32 flow_hash,
-				       void *flow_tuple_info,
-				       u32 *flow_idx);
+u32 ath12k_hw_grp_hal_flow_toeplitz_hash(struct ath12k_hw_group *ag, struct hal_rx_fst *fst,
+				 	 struct hal_flow_tuple_info *tuple_info);
+int ath12k_hw_grp_hal_rx_find_flow_from_tuple(struct ath12k_hw_group *ag,
+					      struct hal_rx_fst *fst,
+					      u32 flow_hash,
+					      void *flow_tuple_info,
+					      u32 *flow_idx);
 ssize_t ath12k_hal_rx_dump_fst_table(struct hal_rx_fst *fst, char *buf,
 				     int size);
 int ath12k_hal_rx_insert_flow_entry(struct ath12k_base *ab, struct hal_rx_fst *fst,
@@ -1293,6 +1293,6 @@ int ath12k_hal_rx_insert_flow_entry(struct ath12k_base *ab, struct hal_rx_fst *f
 				    u32 *flow_idx);
 void *ath12k_hal_rx_flow_setup_fse(struct ath12k_base *ab, struct hal_rx_fst *fst,
 				   u32 table_offset, struct hal_rx_flow *flow);
-void ath12k_hal_rx_flow_delete_entry(struct ath12k_base *ab,
-				     struct hal_rx_fse *hal_fse);
+void ath12k_hw_grp_hal_rx_flow_delete_entry(struct ath12k_hw_group *ag,
+					    struct hal_rx_fse *hal_fse);
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/ppe.c b/drivers/net/wireless/ath/ath12k/ppe.c
index f32d70bf..d16a7828 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1633,15 +1633,15 @@ int ath12k_vif_alloc_vp(struct ath12k_vif *ahvif, int ppe_vp_type, int *core_mas
 }

 static void
-ath12k_dp_rx_ppeds_fse_update_flow_info(struct ath12k_base *ab,
-					struct rx_flow_info *flow_info,
-					struct ppe_drv_fse_rule_info *ppe_flow_info,
-					int operation)
+ath12k_hw_grp_dp_rx_ppeds_fse_update_flow_info(struct ath12k_hw_group *ag,
+					       struct rx_flow_info *flow_info,
+					       struct ppe_drv_fse_rule_info *ppe_flow_info,
+					       int operation)
 {
 	struct hal_flow_tuple_info *tuple_info = &flow_info->flow_tuple_info;
 	struct ppe_drv_fse_tuple *ppe_tuple = &ppe_flow_info->tuple;

-	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "%s S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,flags:%d",
+	ath12k_dbg(ag->ab[0], ATH12K_DBG_DP_FST, "%s S_IP:%x:%x:%x:%x,sPort:%u,D_IP:%x:%x:%x:%x,dPort:%u,Proto:%d,flags:%d",
 		   fse_state_to_string(operation),
 		   ppe_tuple->src_ip[0], ppe_tuple->src_ip[1],
 		   ppe_tuple->src_ip[2], ppe_tuple->src_ip[3],
@@ -1723,8 +1723,8 @@ ath12k_dp_rx_ppeds_fse_add_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_inf
 		return false;
 	}

-	ath12k_dp_rx_ppeds_fse_update_flow_info(ab, &flow_info, ppe_flow_info,
-						FSE_RULE_ADD);
+	ath12k_hw_grp_dp_rx_ppeds_fse_update_flow_info(ag, &flow_info, ppe_flow_info,
+						       FSE_RULE_ADD);

 	return ath12k_dp_rx_flow_add_entry(ab, &flow_info);
 }
@@ -1734,12 +1734,11 @@ ath12k_dp_rx_ppeds_fse_del_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_inf
 {
 	struct rx_flow_info flow_info = { 0 };
 	struct wireless_dev *wdev;
-	struct ieee80211_vif *vif;
-	struct ath12k_hw_group *ag;
-	struct ath12k_hw *ah;
-	struct ath12k_base *ab = NULL;
-	struct ath12k_vif *ahvif;
 	struct net_device *dev = ppe_flow_info->dev;
+	struct ieee80211_hw *hw = NULL;
+	struct ath12k_hw *ah = NULL;
+	struct ath12k_hw_group *ag = NULL;
+

 	if (!ath12k_fse_enable)
 		return false;
@@ -1749,36 +1748,31 @@ ath12k_dp_rx_ppeds_fse_del_flow_entry(struct ppe_drv_fse_rule_info *ppe_flow_inf

 	wdev = dev->ieee80211_ptr;

-	vif = wdev_to_ieee80211_vif_vlan(wdev, false);
-	if (!vif)
+	hw = wiphy_to_ieee80211_hw(wdev->wiphy);
+	if (!hw) {
+		ath12k_err(NULL, "\n Wireless-dev cannot be null for netdev:%p\n",
+			   dev);
 		return false;
+	}

-	ahvif = ath12k_vif_to_ahvif(vif);
-
-	ah = ahvif->ah;
+	ah = hw->priv;
 	if (!ah) {
-		ath12k_warn(NULL, "FSE flow rule deletion failed ah = NULL \n");
+		ath12k_err(NULL, "\n Wireless-dev-priv cannot be null for netdev:%p\n",
+			   dev);
 		return false;
 	}

 	ag = ah->ag;
 	if (!ag) {
-		ath12k_warn(NULL, "FSE flow rule deletion failed ag = NULL \n");
-		return false;
-	}
-
-	/* TODO: protect ag->ab[] by spin lock */
-	/* NOTE: ag->ab[0] can be any arbitirary ab but first ab is used to cover non-MLO */
-	ab = ag->ab[0];
-	if (!ab) {
-		ath12k_warn(NULL, "FSE flow rule deletion failed ab = NULL \n");
+		ath12k_err(NULL, "\n Wireless dev group context cannot be null for netdev:%p\n",
+			   dev);
 		return false;
 	}

-	ath12k_dp_rx_ppeds_fse_update_flow_info(ab, &flow_info, ppe_flow_info,
-						FSE_RULE_DELETE);
+	ath12k_hw_grp_dp_rx_ppeds_fse_update_flow_info(ag, &flow_info, ppe_flow_info,
+						       FSE_RULE_DELETE);

-	return ath12k_dp_rx_flow_delete_entry(ab, &flow_info);
+	return ath12k_hw_grp_dp_rx_flow_delete_entry(ag, &flow_info);
 }

 void ath12k_dp_rx_ppe_fse_register(void)
--
2.34.1

