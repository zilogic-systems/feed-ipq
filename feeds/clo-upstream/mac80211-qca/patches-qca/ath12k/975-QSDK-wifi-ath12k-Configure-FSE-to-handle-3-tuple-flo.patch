From c1f617c707bd42c72046836e738c885ac98eaf36 Mon Sep 17 00:00:00 2001
From: syed touqeer pasha <quic_spasha@quicinc.com>
Date: Fri, 30 Aug 2024 20:42:27 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Configure FSE to handle 3 tuple flows.

Prepare and send message to FSE to configure
3 tuple flows.

Patch-dependency: none

Signed-off-by: syed touqeer pasha <quic_spasha@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c  |  8 ++-
 drivers/net/wireless/ath/ath12k/core.h  |  5 +-
 drivers/net/wireless/ath/ath12k/dp.h    | 79 +++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.c | 57 +++++++++++++++++-
 4 files changed, 144 insertions(+), 5 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index ee791ed..b0bc09f 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -85,6 +85,10 @@ bool ath12k_ppe_rfs_support = true;
 module_param_named(ppe_rfs_support, ath12k_ppe_rfs_support, bool, 0644);
 MODULE_PARM_DESC(ppe_rfs_support, "Enable PPE RFS support for DL (0 - disable, 1 - enable)");

+bool ath12k_fse_3_tuple_enabled = true;
+module_param_named(fse_3_tuple_enabled, ath12k_fse_3_tuple_enabled, uint, 0644);
+MODULE_PARM_DESC(fse_3_tuple_enabled, "fse_3_tuple_enabled: 0-disable, 1-enable");
+
 unsigned int ath12k_rfs_core_mask[4] = {ATH12K_MAX_CORE_MASK, ATH12K_MAX_CORE_MASK,
 					ATH12K_MAX_CORE_MASK, ATH12K_MAX_CORE_MASK};
 module_param_array_named(rfs_core_mask, ath12k_rfs_core_mask, int, NULL, 0644);
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index bee1541..33de5ad 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -56,6 +56,7 @@ extern unsigned int ath12k_frame_mode;
 extern bool ath12k_erp_support;
 extern unsigned int ath12k_ppe_ds_enabled;
 extern bool ath12k_rx_nwifi_err_dump;
+extern bool ath12k_fse_3_tuple_enabled;

 #define ATH12K_MAX_CORE_MASK	(0xFFFF & ((1 << NR_CPUS) - 1))
 extern unsigned int ath12k_rfs_core_mask[4];
diff --git a/drivers/net/wireless/ath/ath12k/dp.h b/drivers/net/wireless/ath/ath12k/dp.h
index f7f3a48..de7af54 100644
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -565,6 +565,7 @@ enum htt_h2t_msg_type {
 	HTT_H2T_MSG_TYPE_PPDU_STATS_CFG		= 0x11,
 	HTT_H2T_MSG_TYPE_RX_FSE_SETUP_CFG       = 0x12,
 	HTT_H2T_MSG_TYPE_RX_FSE_OPERATION_CFG   = 0x13,
+	HTT_H2T_MSG_TYPE_RX_FSE_3_TUPLE_HASH_CFG= 0x16,
 	HTT_H2T_MSG_TYPE_RXDMA_RXOLE_PPE_CFG	= 0x19,
 	HTT_H2T_MSG_TYPE_VDEV_TXRX_STATS_CFG	= 0x1a,
 	HTT_H2T_MSG_TYPE_TX_MONITOR_CFG		= 0x1b,
@@ -2679,6 +2680,84 @@ enum htt_rx_fse_operation {
 	HTT_RX_FSE_ENABLE,
 };

+/**
+ * @brief host --> target Receive to configure the RxOLE 3-tuple Hash
+ *
+ * MSG_TYPE => HTT_H2T_MSG_TYPE_3_TUPLE_HASH_CFG
+ *
+ *     |31            24|23              |15             8|7        3|2|1|0|
+ *     |----------------+----------------+----------------+----------------|
+ *     |              reserved           |    pdev_id     |    msg_type    |
+ *     |---------------------------------+----------------+----------------|
+ *     |                        reserved                             |G|E|F|
+ *     |---------------------------------+----------------+----------------|
+ *     Where E = Configure the target to provide the 3-tuple hash value in
+ *               toeplitz_hash_2_or_4 field of rx_msdu_start tlv
+ *           F = Configure the target to provide the 3-tuple hash value in
+ *               flow_id_toeplitz field of rx_msdu_start tlv
+ *           G = Configure the target to provide the 3-tuple based flow
+ *               classification search
+ *
+ * The following field definitions describe the format of the 3 tuple hash value
+ * message sent from the host to target as part of initialization sequence.
+ *
+ * Header fields:
+ *  dword0 - b'7:0   - msg_type: This will be set to
+ *                     0x16 (HTT_H2T_MSG_TYPE_3_TUPLE_HASH_CFG)
+ *           b'15:8  - pdev_id:  0 indicates msg is for all LMAC rings, i.e. soc
+ *                     1, 2, 3 indicates pdev_id 0,1,2 and the msg is for the
+ *                     specified pdev's LMAC ring.
+ *           b'31:16 - reserved : Reserved for future use
+ *  dword1 - b'0     - flow_id_toeplitz_field_enable
+ *           b'1     - toeplitz_hash_2_or_4_field_enable
+ *           b'2     - flow_classification_3_tuple_field_enable
+ *           b'31:3  - reserved : Reserved for future use
+ * ---------+------+----------------------------------------------------------
+ *     bit1 | bit0 |   Functionality
+ * ---------+------+----------------------------------------------------------
+ *       0  |   1  |   Configure the target to provide the 3 tuple hash value
+ *          |      |   in flow_id_toeplitz field
+ * ---------+------+----------------------------------------------------------
+ *       1  |   0  |   Configure the target to provide the 3 tuple hash value
+ *          |      |   in toeplitz_hash_2_or_4 field
+ * ---------+------+----------------------------------------------------------
+ *       1  |   1  |   Configure the target to provide the 3 tuple hash value
+ *          |      |   in both flow_id_toeplitz & toeplitz_hash_2_or_4 field
+ * ---------+------+----------------------------------------------------------
+ *       0  |   0  |   Configure the target to provide the 5 tuple hash value
+ *          |      |   in flow_id_toeplitz field 2 or 4 tuple has value in
+ *          |      |   toeplitz_hash_2_or_4 field
+ *----------------------------------------------------------------------------
+ */
+struct htt_h2t_msg_rx_3_tuple_hash_cfg {
+	/*
+	 * BIT [7:0]      :- H2T msg_type
+	 * BIT [15:8]     :- H2T pdev_id
+	 * BIT [32:16]    :- Reserved
+	 */
+	__le32 info0;
+
+	/*
+	 * BIT [0]        :- flow_id_toeplitz_field_enable
+	 * BIT [1]        :- toeplitz_hash_2_or_4_field_enable
+	 * BIT [2]        :- flow_classification_3_tuple_field_enable
+	 * BIT [32:3]     :- Reserved
+	 */
+	__le32 info1;
+}__packed;
+
+/* DWORD0 : pdev_id configuration Macros */
+#define HTT_H2T_MSG_RX_FSE_3_TUPLE_MSG_TYPE	GENMASK(7, 0)
+#define HTT_H2T_MSG_RX_FSE_3_TUPLE_PDEV_ID	GENMASK(15, 8)
+
+/* DWORD1: rx 3 tuple hash value reception field configuration Macros */
+#define HTT_H2T_FLOW_CLASSIFY_3_TUPLE_FIELD_ENABLE   1
+#define HTT_H2T_FLOW_ID_TOEPLITZ_FIELD_CONFIG	BIT(0)
+#define HTT_H2T_TOEPLITZ_2_OR_4_FIELD_CONFIG	BIT(1)
+#define HTT_H2T_FLOW_CLASSIFY_3_TUPLE_FIELD_CONFIG   BIT(2)
+
+#define HTT_3_TUPLE_HASH_CFG_REQ_BYTES     8
+
 int ath12k_dp_service_srng(struct ath12k_base *ab,
 			   struct ath12k_ext_irq_grp *irq_grp,
 			   int budget);
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index d0e3088..86a90fb 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -5534,6 +5533,46 @@ int ath12k_dp_rx_htt_setup(struct ath12k_base *ab)
 	return 0;
 }

+int ath12k_htt_rx_fse_3_tuple_config_send(struct ath12k_base *ab,
+					  u32 tuple_mask, u8 pdev_id)
+{
+	struct sk_buff *skb;
+	struct htt_h2t_msg_rx_3_tuple_hash_cfg *cmd;
+	int ret;
+	int len = sizeof(*cmd);
+
+	skb = ath12k_htc_alloc_skb(ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	skb_put(skb, len);
+	cmd = (struct htt_h2t_msg_rx_3_tuple_hash_cfg *)skb->data;
+	memset(cmd, 0, sizeof(*cmd));
+
+	cmd->info0 = le32_encode_bits(HTT_H2T_MSG_TYPE_RX_FSE_3_TUPLE_HASH_CFG,
+				      HTT_H2T_MSG_RX_FSE_3_TUPLE_MSG_TYPE);
+	cmd->info0 |= le32_encode_bits(pdev_id, HTT_H2T_MSG_RX_FSE_PDEV_ID);
+	cmd->info1 |= le32_encode_bits(tuple_mask,
+				       HTT_H2T_FLOW_CLASSIFY_3_TUPLE_FIELD_CONFIG);
+
+	ath12k_dbg_dump(ab, ATH12K_DBG_DP_FST, NULL, "FSE 3 TUPLE ENABLE HTT message:",
+			(void *)cmd, len);
+
+	ret = ath12k_htc_send(&ab->htc, ab->dp.eid, skb);
+	if (ret) {
+		ath12k_err(ab, "DP FSE 3 TUPLE enable msg send failed ret:%d\n", ret);
+		goto err_free;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_DP_FST, "DP FSE 3 TUPLE enable msg sent from host\n");
+
+	return 0;
+
+err_free:
+	dev_kfree_skb_any(skb);
+	return ret;
+}
+
 int ath12k_dp_rx_alloc(struct ath12k_base *ab)
 {
 	struct ath12k_dp *dp = &ab->dp;
@@ -6326,6 +6365,9 @@ void ath12k_dp_fst_core_map_init(struct ath12k_base *ab)

 void ath12k_dp_rx_fst_init(struct ath12k_base *ab)
 {
+	int ret, i;
+	u32 tuple_mask = 0;
+
 	if (!ab->ag->fst) {
 		ath12k_warn(ab, "FST table is NULL\n");
 		return;
@@ -6343,4 +6385,17 @@ void ath12k_dp_rx_fst_init(struct ath12k_base *ab)
 	 * and HW cache going out of sync when one soc goes for a recovery.
 	 */
 	ath12k_htt_rx_flow_fse_operation(ab, DP_HTT_FST_CACHE_INVALIDATE_FULL, NULL);
+
+	if (!ath12k_fse_3_tuple_enabled)
+		return;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		tuple_mask = HTT_H2T_FLOW_CLASSIFY_3_TUPLE_FIELD_ENABLE;
+		ret = ath12k_htt_rx_fse_3_tuple_config_send(ab, tuple_mask, i);
+		if (ret) {
+			ath12k_warn(ab, "FSE 3 tuple config failed for pdev:%d\n",
+					i);
+			return;
+		}
+	}
 }
--
2.34.1

