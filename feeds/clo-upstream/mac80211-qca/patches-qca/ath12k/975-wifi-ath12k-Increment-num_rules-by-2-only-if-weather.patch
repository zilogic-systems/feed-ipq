From e23ca917692706dc54f0dc9b72a9e8dc252a1ffc Mon Sep 17 00:00:00 2001
From: Amith A <quic_amitajit@quicinc.com>
Date: Thu, 29 Aug 2024 10:51:01 +0530
Subject: [PATCH] wifi: ath12k: Increment num_rules by 2 only if weather
 channels are present

When a 5 GHz AP is configured with country Norfolk Islands (country
code NF), there is a warning trace observed.

In ath12k_reg_build_regd, if the DFS region is ETSI, num_rules is
increased by 2 to support the weather radar channels. However, in the
country code NF, no regulatory rule supports weather radar channels.
Consequently, is_valid_reg_rule returns false when the for-loop
iteration in is_valid_rd exceeds the actual number of regulatory rules
present in the rd. The start frequency and end frequency for a
regulatory rule beyond the last regulatory rule in the rd is 0.
This triggers a WARN_ON within __regulatory_set_wiphy_regd.

To address this issue, increment num_rules by 1 within the for-loop
in ath12k_reg_build_regd, but only when the DFS region is ETSI and
the regulatory rule supports weather radar channels. Re-allocate the
new_regd struct to accommodate the new rules added.

Tag: REGULATORY

Signed-off-by: Amith A <quic_amitajit@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/reg.c | 17 ++++++++++++-----
 1 file changed, 12 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -768,11 +768,12 @@ ath12k_reg_build_regd(struct ath12k_base
 	int max_elements = 0, sp_idx = 0;
 	struct ath12k_6ghz_sp_reg_rule *sp_rule = NULL;
 	u8 i = 0, j = 0, k = 0, idx = 0;
-	u8 num_rules, num_6ghz_sp_rules;
+	u8 num_rules, num_6ghz_sp_rules = 0;
 	u32 flags = 0, reg_6g_number = 0, max_bw_6g = 0;
 	char alpha2[3];
 	bool reg_6g_itr_set = false;
 	enum nl80211_regulatory_power_modes pwr_mode;
+	struct ieee80211_regdomain *updated_new_regd = NULL;
 
 	num_rules = reg_info->num_5g_reg_rules + reg_info->num_2g_reg_rules;
 
@@ -800,10 +801,6 @@ ath12k_reg_build_regd(struct ath12k_base
 	if (!num_rules)
 		return new_regd;
 
-	/* Add max additional rules to accommodate weather radar band */
-	if (reg_info->dfs_region == ATH12K_DFS_REG_ETSI)
-		num_rules += 2;
-
 	/* 6 GHz standard power rules should not be updated to cfg
 	 * until we get afc data with valid rules. Hence save the sp
 	 * rule in ab and use this to intersect with afc rules when we get
@@ -934,7 +931,17 @@ ath12k_reg_build_regd(struct ath12k_base
 		if (flags & NL80211_RRF_DFS &&
 		    reg_info->dfs_region == ATH12K_DFS_REG_ETSI &&
 		    (reg_rule->end_freq > ETSI_WEATHER_RADAR_BAND_LOW &&
-		    reg_rule->start_freq < ETSI_WEATHER_RADAR_BAND_HIGH)){
+		     reg_rule->start_freq < ETSI_WEATHER_RADAR_BAND_HIGH)){
+			num_rules += 2;
+			updated_new_regd = krealloc(new_regd, sizeof(*new_regd) +
+						    (num_rules * sizeof(struct ieee80211_reg_rule)), GFP_ATOMIC);
+			if (!updated_new_regd) {
+				ath12k_err(ab, "Failed to realloc new_regd with number of rules as %d\n",
+					   num_rules);
+				break;
+			}
+
+			new_regd = updated_new_regd;
 			ath12k_reg_update_weather_radar_band(ab, new_regd,
 							     reg_rule, &idx,
 							     flags, max_bw);
