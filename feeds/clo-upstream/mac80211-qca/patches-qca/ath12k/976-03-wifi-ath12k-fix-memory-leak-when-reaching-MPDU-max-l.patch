From 0a98dfb58c27b87a5fcd520418f7b90b0e994e4a Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Sat, 21 Sep 2024 12:30:54 +0530
Subject: [PATCH] wifi: ath12k: fix memory leak when reaching MPDU max
 limit

When receiving more than 1024 MPDUs for a PPDU, the MPDU limit check is
triggered, causing unprocessed MSDUs in the buffer address TLV to leak.
To fix this, add a limit check within the buffer address TLV processing
and properly free the SKBs.

The mpdu_count and msdu_count members in the ppdu_info are used as array
indices to access MPDU/MSDU-related information. These counts are
incorrectly incremented when the upper limit is reached. Fix this by adding
a limit check before incrementing

Decap format is getting processed as part of
ath12k_dp_mon_parse_rx_dest_tlv based on the return type of
ath12k_dp_mon_rx_parse_status_tlv which is not returning PPDU not done
incase of MSDU_END tlv. Fix it by returning the appropriate hal status
to the caller. Also replenish the monitor source when host receives
flush and truncated as error reason.

Fixes: (Ib4b65722c) ath12k: add monitor buffer address TLV parsing

Patch-dependency: 640-001-ath12k-Enable-monitor-interface-support.patch

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_mon.c | 28 +++++++++++++++---------
 1 file changed, 18 insertions(+), 10 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -1723,7 +1723,7 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 				ppdu_info->userstats[userid].errmap = errmap;
 			}
 		}
-		break;
+		return HAL_RX_MON_STATUS_MSDU_END;
 	case HAL_PHYRX_GENERIC_EHT_SIG: {
 		/*
 		 * Handle the case where aggregation is in progress
@@ -2362,11 +2362,6 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 {
 	int offset;
 
-	if (ppdu_info->cmn_mpdu_info.mpdu_count >= HAL_RX_MAX_MPDU) {
-		ath12k_warn(ar->ab, "MPDU count reached max limit\n");
-		return;
-	}
-
 	switch (hal_status) {
 	case HAL_RX_MON_STATUS_BUF_ADDR: {
 		struct dp_mon_packet_info *packet_info =
@@ -2396,13 +2391,19 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 				 msdu->len + skb_tailroom(msdu),
 				 DMA_FROM_DEVICE);
 
-		offset = packet_info->dma_length + ATH12K_WIFIRX_DOT11_OFFSET;
-
 		mpdu_count = ppdu_info->cmn_mpdu_info.mpdu_count;
+		if (mpdu_count >= HAL_RX_MAX_MPDU) {
+			dev_kfree_skb_any(msdu);
+			ath12k_dp_mon_buf_replenish(ar->ab, buf_ring, 1);
+			return;
+		}
+
+		offset = packet_info->dma_length + ATH12K_WIFIRX_DOT11_OFFSET;
 		msdu_count = ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].msdu_count;
 		if (ath12k_dp_pkt_set_pktlen(msdu, offset) ||
 		    msdu_count >= HAL_RX_MAX_MSDU) {
 			dev_kfree_skb_any(msdu);
+			ath12k_dp_mon_buf_replenish(ar->ab, buf_ring, 1);
 			return;
 		}
 
@@ -2412,7 +2413,9 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 			ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].tail_msdu->next = msdu;
 
 		ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].tail_msdu = msdu;
-		ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].msdu_count++;
+
+		if (msdu_count < (HAL_RX_MAX_MSDU - 1))
+			ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].msdu_count++;
 
 		ath12k_dp_mon_buf_replenish(ar->ab, buf_ring, 1);
 		break;
@@ -2422,7 +2425,10 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 
 		if (ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].msdu_count)
 			ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].tail_msdu->next = NULL;
-		ppdu_info->cmn_mpdu_info.mpdu_count++;
+
+		if (ppdu_info->cmn_mpdu_info.mpdu_count < (HAL_RX_MAX_MPDU - 1))
+			ppdu_info->cmn_mpdu_info.mpdu_count++;
+
 		break;
 	}
 	case HAL_RX_MON_STATUS_MSDU_END:
