From fb06272042caa4d903f1aef9777e7d2aba1bc792 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Tue, 8 Oct 2024 12:15:39 +0530
Subject: [PATCH] KW: wifi: ath12k: Fix out-of-boundary access in pdev index
 assignment

The current implementation uses num_hw with a maximum size of
ATH12K_GROUP_MAX_RADIO(14) to determine the pdev index.

However, the actual size of pdevs is based on the ab->num_radios
which has an array index limit of 4.This discrepancy can lead to
out-of-boundary access when the pdev index exceeds the valid range.

Fix this by resetting the pdev index count when it exceeds the
number of radios for the current chip

Fixes 0ba223e170f5e(wifi: ath12k: fix mapping phy names and wlan instance with bands)
Patch-dependency: 856-wifi-ath12k-fix-mapping-phy-names-with-bands.patch

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 03600a8..b45e90d 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -19601,7 +19601,7 @@ int ath12k_mac_allocate(struct ath12k_hw_group *ag)
 	struct ieee80211_ops *ops;
 	size_t len;
 	int i, j, k, total_radio, num_radios, ret;
-	int mac_id, chip_id;
+	int mac_id, chip_id, pdev_index;
 	u8 link_id, num_hw, total_vdevs;
 	struct ath12k_pdev *pdev;
 	char *mlo_phy_name;
@@ -19642,9 +19642,13 @@ int ath12k_mac_allocate(struct ath12k_hw_group *ag)
 	ag->num_hw = 0;
 	mac_id = 0;
 	chip_id = 0;
+	pdev_index = 0;
 	for (i = 0; i < num_hw; i++) {
 		ab = ag->ab[chip_id];
-		pdev = &ab->pdevs[i];
+		pdev = &ab->pdevs[pdev_index];
+		pdev_index++;
+		if (pdev_index >= ab->num_radios)
+			pdev_index = 0;
 
 		ops = kmemdup(&ath12k_ops, sizeof(ath12k_ops), GFP_KERNEL);
 		if (!ops) {
-- 
2.34.1

