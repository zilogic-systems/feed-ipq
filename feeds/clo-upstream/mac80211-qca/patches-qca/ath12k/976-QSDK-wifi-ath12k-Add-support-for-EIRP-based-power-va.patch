From a68fa173fb6669daa9c3d3391d860a23b2f62c64 Mon Sep 17 00:00:00 2001
From: Amith A <quic_amitajit@quicinc.com>
Date: Mon, 16 Sep 2024 09:47:36 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Add support for EIRP based power values in
 set_tpc cmd

The power values sent to the FW via the set_tpc command are in PSD format
currently. In PSD format, tx_powers are sent for each 20 MHz subchannels.
But when FW advertises EIRP preference flag for set_tpc command, tx_power
should be sent for each bandwidth starting from 20MHz to the current
operating bandwidth.

Add support to send these power values in EIRP format based
on the support flag received from FW.

Patch dependency: ath12k/956-g-wifi-ath12k-Fill-AFC-PSD-and-EIRP-in-SET-TPC-for-SP-.patch
		  subsys/926-QSDK-wifi-cfg80211-Make-chandef_primary_freqs-global.patch
Tag: 6G_REGULATORY

Signed-off-by: Amith A <quic_amitajit@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 352 +++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/mac.h |   9 +
 drivers/net/wireless/ath/ath12k/reg.c | 131 ++++++++++
 drivers/net/wireless/ath/ath12k/reg.h |  52 ++++
 drivers/net/wireless/ath/ath12k/wmi.h |   1 +
 5 files changed, 535 insertions(+), 10 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5101,8 +5101,10 @@ void ath12k_mac_bss_info_changed(struct
 		    ahvif->vdev_type == WMI_VDEV_TYPE_AP &&
 		    test_bit(WMI_TLV_SERVICE_EXT_TPC_REG_SUPPORT,
 			     ar->ab->wmi_ab.svc_map)) {
-			ath12k_mac_fill_reg_tpc_info(ar, arvif,
-						     &arvif->chanctx);
+			if (test_bit(WMI_TLV_SERVICE_EIRP_PREFERRED_SUPPORT, ar->ab->wmi_ab.svc_map))
+				ath12k_mac_fill_reg_tpc_info_with_eirp_power(ar, arvif, &arvif->chanctx);
+			else
+				ath12k_mac_fill_reg_tpc_info(ar, arvif, &arvif->chanctx);
 			ret = ath12k_wmi_send_vdev_set_tpc_power(ar,
 								 arvif->vdev_id,
 								 &arvif->reg_tpc_info);
@@ -13509,7 +13511,11 @@ ath12k_mac_vdev_config_after_start(struc
 		if (ahvif->vdev_type == WMI_VDEV_TYPE_STA)
 			ath12k_mac_parse_tx_pwr_env(ar, arvif, &arvif->chanctx);
 
-                ath12k_mac_fill_reg_tpc_info(ar, arvif, &arvif->chanctx);
+		if (test_bit(WMI_TLV_SERVICE_EIRP_PREFERRED_SUPPORT, ar->ab->wmi_ab.svc_map))
+			ath12k_mac_fill_reg_tpc_info_with_eirp_power(ar, arvif, &arvif->chanctx);
+		else
+			ath12k_mac_fill_reg_tpc_info(ar, arvif, &arvif->chanctx);
+
                 ath12k_wmi_send_vdev_set_tpc_power(ar, arvif->vdev_id,
                                                    &arvif->reg_tpc_info);
 	}
@@ -14708,11 +14714,11 @@ static u8 ath12k_mac_get_tpe_count(u8 tx
         return txpwr_cnt;
 }
 
-static u8 ath12k_mac_get_num_pwr_levels(struct cfg80211_chan_def *chan_def)
+static u8 ath12k_mac_get_num_pwr_levels(struct cfg80211_chan_def *chan_def, bool is_psd)
 {
         u8 num_pwr_levels;
 
-        if (chan_def->chan->flags & IEEE80211_CHAN_PSD) {
+	if (is_psd) {
                 switch (chan_def->width) {
                 case NL80211_CHAN_WIDTH_20:
                         num_pwr_levels = 1;
@@ -14845,14 +14851,110 @@ static void ath12k_mac_get_psd_channel(s
        *tx_power = (*temp_chan)->max_reg_power;
 }
 
+static inline bool ath12k_reg_is_320_opclass(u8 opclass)
+{
+	return (opclass == 137);
+}
+
+static s8 ath12k_mac_find_eirp_in_afc_eirp_obj(struct ath12k_chan_eirp_obj *eirp_obj,
+					       u32 freq,
+					       u16 center_freq,
+					       u8 nchans,
+					       u8 opclass)
+{
+	u8 subchannels[ATH12K_NUM_20_MHZ_CHAN_IN_320_MHZ_CHAN];
+	u8 k;
+
+	if (ath12k_reg_is_320_opclass(opclass)) {
+		u32 cfi_freq = ieee80211_channel_to_freq_khz(eirp_obj->cfi,
+							     NL80211_BAND_6GHZ);
+
+		/* FW sends as scaled AFC power value in AFC Power Evenid */
+		if (cfi_freq == MHZ_TO_KHZ(center_freq))
+			return eirp_obj->eirp_power / ATH12K_EIRP_PWR_SCALE;
+
+		return ATH12K_MAX_TX_POWER;
+	}
+
+	ath12k_reg_fill_subchan_centers(nchans, eirp_obj->cfi, subchannels);
+
+	for (k = 0; k < nchans; k++) {
+		if (ieee80211_channel_to_freq_khz(subchannels[k], NL80211_BAND_6GHZ) ==
+		    MHZ_TO_KHZ(freq)) {
+			return eirp_obj->eirp_power / ATH12K_EIRP_PWR_SCALE;
+		}
+	}
+
+	return ATH12K_MAX_TX_POWER;
+}
+
+static s8 ath12k_mac_find_eirp_in_afc_chan_obj(struct ath12k_afc_chan_obj *chan_obj,
+					       u32 freq,
+					       u16 center_freq,
+					       u8 opclass)
+{
+	s8 afc_eirp_pwr = ATH12K_MAX_TX_POWER;
+	u8 j;
+
+	if (chan_obj->global_opclass != opclass)
+		goto fail;
+
+	for (j = 0; j < chan_obj->num_chans; j++) {
+		struct ath12k_chan_eirp_obj *eirp_obj = &chan_obj->chan_eirp_info[j];
+		u8 nchans = ath12k_reg_get_nsubchannels_for_opclass(opclass);
+
+		if (!nchans)
+			goto fail;
+
+		afc_eirp_pwr = ath12k_mac_find_eirp_in_afc_eirp_obj(eirp_obj,
+								    freq,
+								    center_freq,
+								    nchans,
+								    opclass);
+
+		if (afc_eirp_pwr != ATH12K_MAX_TX_POWER)
+			break;
+	}
+
+fail:
+	return afc_eirp_pwr;
+}
+
+static s8 ath12k_mac_get_afc_eirp_power(struct ath12k *ar,
+					u32 freq,
+					u16 center_freq,
+					u16 bw)
+{
+	struct ath12k_afc_sp_reg_info *power_info = ar->afc.afc_reg_info;
+	s8 afc_eirp_pwr = ATH12K_MAX_TX_POWER;
+	u8 i, op_class = 0;
+
+	op_class = ath12k_reg_get_opclass_from_bw(bw);
+	if (!op_class)
+		return afc_eirp_pwr;
+
+	for (i = 0; i < power_info->num_chan_objs; i++) {
+		struct ath12k_afc_chan_obj *chan_obj = &power_info->afc_chan_info[i];
+
+		afc_eirp_pwr = ath12k_mac_find_eirp_in_afc_chan_obj(chan_obj,
+								    freq,
+								    center_freq,
+								    op_class);
+		if (afc_eirp_pwr != ATH12K_MAX_TX_POWER)
+			break;
+	}
+
+	return afc_eirp_pwr;
+}
+
 static void ath12k_mac_get_eirp_power(struct ath12k *ar,
-                                     u16 *start_freq,
-                                     u16 *center_freq,
-                                     u8 i,
-                                     struct ieee80211_channel **temp_chan,
-                                     struct cfg80211_chan_def *def,
-                                     s8 *tx_power,
-				     u8 reg_6g_power_mode)
+				      u16 *start_freq,
+				      u16 *center_freq,
+				      u8 i,
+				      struct ieee80211_channel **temp_chan,
+				      struct cfg80211_chan_def *def,
+				      s8 *tx_power,
+				      u8 reg_6g_power_mode)
 {
        /* It is to get the the center frequency for 40MHz/80MHz/
         * 160MHz&80P80 bandwidth, and then plus 10 to the center frequency,
@@ -14878,6 +14980,16 @@ static void ath12k_mac_get_eirp_power(st
        *tx_power = (*temp_chan)->max_reg_power;
 }
 
+static void ath12k_mac_get_root_tpe_power(bool is_tpe_present,
+					  struct ath12k_reg_tpc_power_info *reg_tpc_info,
+					  s8 *tpe_arr)
+{
+	if (is_tpe_present)
+		tpe_arr = reg_tpc_info->tpe;
+	else
+		memset(tpe_arr, ATH12K_MAX_TX_POWER, ATH12K_MAX_EIRP_VALS * sizeof(s8));
+}
+
 void ath12k_mac_fill_reg_tpc_info(struct ath12k *ar,
                                   struct ath12k_link_vif *arvif,
                                   struct ieee80211_chanctx_conf *ctx)
@@ -14911,22 +15023,25 @@ void ath12k_mac_fill_reg_tpc_info(struct
         * AP cant parse its own beacon. Hence, we get the 6g power mode
         * from the wdev corresponding to the struct ieee80211_vif
         */
-       if (ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
-               reg_6g_power_mode = bss_conf->power_type;
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
+		reg_6g_power_mode = bss_conf->power_type;
 		if (reg_6g_power_mode == IEEE80211_REG_UNSET_AP)
 			reg_6g_power_mode = IEEE80211_REG_LPI_AP;
+		else if (reg_6g_power_mode == IEEE80211_REG_SP_AP &&
+			 !ar->afc.is_6ghz_afc_power_event_received)
+			reg_6g_power_mode = NL80211_REG_REGULAR_CLIENT_SP + 1;
 	} else if (ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
-               struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
-               /* With respect to ieee80211, the 6G AP power mode starts from index
-                * 1 while the power type stored in struct wireless_dev is based on
-                * nl80211 power type indexing which starts from 0. Hence 1 is appended
-                */
-               if (wdev)
-                       reg_6g_power_mode = wdev->reg_6g_power_mode + 1;
-               else
-                       reg_6g_power_mode = 1;
-       } else
-               reg_6g_power_mode = 1;
+		struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+		/* With respect to ieee80211, the 6G AP power mode starts from index
+		 * 1 while the power type stored in struct wireless_dev is based on
+		 * nl80211 power type indexing which starts from 0. Hence 1 is appended
+		 */
+		if (wdev)
+			reg_6g_power_mode = wdev->reg_6g_power_mode + 1;
+		else
+			reg_6g_power_mode = 1;
+	} else
+		reg_6g_power_mode = 1;
 
         chan = ctx->def.chan;
         oper_freq = ctx->def.chan->center_freq;
@@ -14940,7 +15055,9 @@ void ath12k_mac_fill_reg_tpc_info(struct
                 is_tpe_present = true;
                 num_pwr_levels = arvif->reg_tpc_info.num_pwr_levels;
         } else {
-                num_pwr_levels = ath12k_mac_get_num_pwr_levels(&ctx->def);
+		bool is_psd = ctx->def.chan->flags & IEEE80211_CHAN_PSD;
+
+		num_pwr_levels = ath12k_mac_get_num_pwr_levels(&ctx->def, is_psd);
         }
 
         for (pwr_lvl_idx = 0; pwr_lvl_idx < num_pwr_levels; pwr_lvl_idx++) {
@@ -15121,8 +15238,227 @@ void ath12k_mac_fill_reg_tpc_info(struct
         reg_tpc_info->num_pwr_levels = num_pwr_levels;
         reg_tpc_info->is_psd_power = is_psd_power;
         reg_tpc_info->eirp_power = eirp_power;
-        reg_tpc_info->power_type_6g =
-                ath12k_ieee80211_ap_pwr_type_convert(reg_6g_power_mode);
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
+	    bss_conf->power_type == IEEE80211_REG_SP_AP &&
+	    !ar->afc.is_6ghz_afc_power_event_received)
+		reg_tpc_info->power_type_6g = REG_SP_CLIENT_TYPE;
+	else
+		reg_tpc_info->power_type_6g =
+			ath12k_ieee80211_ap_pwr_type_convert(reg_6g_power_mode);
+}
+
+static int
+ath12k_mac_get_chan_width(enum nl80211_chan_width ch_width)
+{
+	switch (ch_width) {
+	case NL80211_CHAN_WIDTH_320:
+		return ATH12K_CHWIDTH_320;
+	case NL80211_CHAN_WIDTH_160:
+	case NL80211_CHAN_WIDTH_80P80:
+		return ATH12K_CHWIDTH_160;
+	case NL80211_CHAN_WIDTH_80:
+		return ATH12K_CHWIDTH_80;
+	case NL80211_CHAN_WIDTH_40:
+		return ATH12K_CHWIDTH_40;
+	default:
+		return ATH12K_CHWIDTH_20;
+	}
+}
+
+static void ath12k_mac_get_eirp_arr_for_6g(struct ath12k *ar,
+					   struct cfg80211_chan_def *chan_def,
+					   u8 reg_6g_power_mode,
+					   s8 *max_eirp_arr,
+					   u16 start_freq,
+					   u16 oper_freq,
+					   u16 *cfreqs)
+{
+	s8 max_reg_eirp = ATH12K_MAX_TX_POWER;
+	s8 psd_eirp = ATH12K_MAX_TX_POWER;
+	s8 afc_eirp = ATH12K_MAX_TX_POWER;
+	u16 bw, max_bw;
+	s8 reg_psd;
+	u8 i;
+
+	max_bw = ath12k_mac_get_chan_width(chan_def->width);
+
+	for (i = 0, bw = ATH12K_CHWIDTH_20; bw <= max_bw; i++, bw *= 2) {
+		s8 tx_power = ATH12K_MAX_TX_POWER;
+
+		ath12k_reg_get_regulatory_pwrs(ar, MHZ_TO_KHZ(oper_freq),
+					       reg_6g_power_mode - 1,
+					       &max_reg_eirp, &reg_psd);
+
+		if (chan_def->chan->flags & IEEE80211_CHAN_PSD)
+			psd_eirp = ath12k_reg_psd_2_eirp(reg_psd, bw);
+
+		tx_power = min(max_reg_eirp, psd_eirp);
+
+		if (reg_6g_power_mode == IEEE80211_REG_SP_AP &&
+		    ar->afc.is_6ghz_afc_power_event_received) {
+			afc_eirp = ath12k_mac_get_afc_eirp_power(ar,
+								 chan_def->chan->center_freq,
+								 cfreqs[i], bw);
+			tx_power = min(tx_power, afc_eirp);
+		}
+
+		max_eirp_arr[i] = tx_power;
+	}
+}
+
+void ath12k_mac_get_client_power_for_connecting_ap(struct ath12k *ar,
+						   struct ieee80211_chanctx_conf *ctx,
+						   u8 reg_6g_power_mode,
+						   s8 *max_eirp_arr,
+						   u16 start_freq,
+						   u8 num_pwr_levels)
+{
+	struct ieee80211_channel *temp_chan;
+	u16 bw = ATH12K_CHWIDTH_20;
+	u16 center_freq = 0;
+	u8 pwr_lvl_idx;
+
+	for (pwr_lvl_idx = 0; pwr_lvl_idx < num_pwr_levels; pwr_lvl_idx++) {
+		s8 tx_power = ATH12K_MAX_TX_POWER, eirp = ATH12K_MAX_TX_POWER;
+
+		ath12k_mac_get_psd_channel(ar, 20, &start_freq, &center_freq,
+					   pwr_lvl_idx,
+					   &temp_chan,
+					   &tx_power,
+					   reg_6g_power_mode);
+		if (temp_chan)
+			eirp = ath12k_reg_psd_2_eirp(temp_chan->psd, bw);
+		max_eirp_arr[pwr_lvl_idx] = min(eirp, tx_power);
+		bw *= 2;
+	}
+}
+
+static inline void ath12k_mac_fill_cfreqs(struct cfg80211_chan_def *chan_def,
+					  u16 *cfreqs)
+{
+	cfreqs[0] = chan_def->chan->center_freq;
+	if (chan_def->width != NL80211_CHAN_WIDTH_20)
+		cfg80211_chandef_primary_freqs(chan_def, &cfreqs[1], &cfreqs[2], &cfreqs[3]);
+	cfreqs[4] = chan_def->center_freq1;
+}
+
+void ath12k_mac_fill_reg_tpc_info_with_eirp_power(struct ath12k *ar,
+						  struct ath12k_link_vif *arvif,
+						  struct ieee80211_chanctx_conf *ctx)
+{
+	struct ath12k_reg_tpc_power_info *reg_tpc_info = &arvif->reg_tpc_info;
+	s8 sta_max_eirp_arr[ATH12K_MAX_EIRP_VALS];
+	s8 ap_max_eirp_arr[ATH12K_MAX_EIRP_VALS];
+	s8 root_tpe_pwr[ATH12K_MAX_EIRP_VALS];
+	struct ath12k_vif *ahvif = arvif->ahvif;
+	struct ieee80211_vif *vif = ahvif->vif;
+	struct ieee80211_bss_conf *bss_conf;
+	u16 cfreqs[ATH12K_MAX_EIRP_VALS];
+	u16 start_freq = 0, oper_freq = 0;
+	bool is_tpe_present = false;
+	u8 reg_6g_power_mode;
+	u8 num_pwr_levels;
+	u8 count;
+
+	rcu_read_lock();
+
+	bss_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!bss_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in tpc reg fill\n");
+		return;
+	}
+
+	/* For STA, 6g power mode will be present in the beacon, but for AP,
+	 * AP cant parse its own beacon. Hence, we get the 6g power mode
+	 * from the wdev corresponding to the struct ieee80211_vif
+	 */
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
+		reg_6g_power_mode = bss_conf->power_type;
+		if (reg_6g_power_mode == IEEE80211_REG_UNSET_AP)
+			reg_6g_power_mode = IEEE80211_REG_LPI_AP;
+		else if (reg_6g_power_mode == IEEE80211_REG_SP_AP &&
+			 !ar->afc.is_6ghz_afc_power_event_received)
+			reg_6g_power_mode = NL80211_REG_REGULAR_CLIENT_SP + 1;
+	} else if (ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
+		struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+		/* With respect to ieee80211, the 6G AP power mode starts from index
+		 * 1 while the power type stored in struct wireless_dev is based on
+		 * nl80211 power type indexing which starts from 0. Hence 1 is appended
+		 */
+		if (wdev)
+			reg_6g_power_mode = wdev->reg_6g_power_mode + 1;
+		else
+			reg_6g_power_mode = 1;
+	} else {
+		reg_6g_power_mode = 1;
+	}
+
+	start_freq = ath12k_mac_get_6g_start_frequency(&ctx->def);
+	oper_freq = ctx->def.chan->center_freq;
+
+	rcu_read_unlock();
+
+	num_pwr_levels = ath12k_mac_get_num_pwr_levels(&ctx->def, false);
+
+	if (num_pwr_levels > ATH12K_MAX_EIRP_VALS) {
+		ath12k_err(NULL, "num_pwr_levels should not be greater than ATH12K_MAX_EIRP_VALS");
+		return;
+	}
+
+	ath12k_mac_fill_cfreqs(&ctx->def, cfreqs);
+	ath12k_mac_get_root_tpe_power(is_tpe_present, reg_tpc_info, root_tpe_pwr);
+	ath12k_mac_get_eirp_arr_for_6g(ar, &ctx->def, reg_6g_power_mode,
+				       ap_max_eirp_arr, start_freq,
+				       oper_freq, cfreqs);
+
+	/* In case of a Non-AFC capable SP client, calculate the EIRP values
+	 * from regulatory client PSD
+	 */
+	if (reg_6g_power_mode == IEEE80211_REG_SP_AP &&
+	    !ar->afc.is_6ghz_afc_power_event_received) {
+		ath12k_mac_get_client_power_for_connecting_ap(ar, ctx, reg_6g_power_mode,
+							      sta_max_eirp_arr, start_freq,
+							      num_pwr_levels);
+	} else {
+		ath12k_mac_get_eirp_arr_for_6g(ar, &ctx->def, reg_6g_power_mode,
+					       sta_max_eirp_arr, start_freq,
+					       oper_freq, cfreqs);
+	}
+
+	for (count = 0; count < num_pwr_levels; count++) {
+		s8 sta_tx_pwr;
+		s8 tx_power, max_of_ap_sta_tx_pwr, ap_tx_pwr;
+
+		ap_tx_pwr = (ahvif->vdev_type == WMI_VDEV_TYPE_STA) ? 0 : ap_max_eirp_arr[count];
+		sta_tx_pwr = sta_max_eirp_arr[count];
+		/* Generally, 6GHz client power is less than 6GHz AP power.
+		 * In repeater, we have access tp both client and AP power.
+		 * Therefore, take advantage of the maximum of AP and client power.
+		 */
+		max_of_ap_sta_tx_pwr = max(ap_tx_pwr, sta_tx_pwr);
+		if (reg_6g_power_mode == IEEE80211_REG_SP_AP &&
+		    ar->afc.is_6ghz_afc_power_event_received)
+			tx_power = max_of_ap_sta_tx_pwr;
+		else
+			tx_power = min(root_tpe_pwr[count], max_of_ap_sta_tx_pwr);
+
+		reg_tpc_info->chan_power_info[count].chan_cfreq = cfreqs[count];
+		reg_tpc_info->chan_power_info[count].tx_power = tx_power;
+	}
+
+	reg_tpc_info->num_pwr_levels = num_pwr_levels;
+	reg_tpc_info->is_psd_power = false;
+	reg_tpc_info->eirp_power = 0;
+	/* In case of a Non-AFC capable SP client, fill the power_type as REG_SP_CLIENT_TYPE */
+	if (ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
+	    bss_conf->power_type == IEEE80211_REG_SP_AP &&
+	    !ar->afc.is_6ghz_afc_power_event_received)
+		reg_tpc_info->power_type_6g = REG_SP_CLIENT_TYPE;
+	else
+		reg_tpc_info->power_type_6g =
+			ath12k_ieee80211_ap_pwr_type_convert(reg_6g_power_mode);
 }
 
 void ath12k_mac_parse_tx_pwr_env(struct ath12k *ar,
@@ -15242,10 +15578,12 @@ void ath12k_mac_parse_tx_pwr_env(struct
                 arvif->reg_tpc_info.is_psd_power = true;
 
                 if (pwr_count == 0) {
+			bool is_psd = ctx->def.chan->flags & IEEE80211_CHAN_PSD;
+
                         ath12k_dbg(ab, ATH12K_DBG_MAC,
                                    "TPE PSD power : %d\n", single_tpe->tx_power[0]);
-                        arvif->reg_tpc_info.num_pwr_levels =
-                                ath12k_mac_get_num_pwr_levels(&ctx->def);
+			arvif->reg_tpc_info.num_pwr_levels =
+				ath12k_mac_get_num_pwr_levels(&ctx->def, is_psd);
                         for (i = 0; i < arvif->reg_tpc_info.num_pwr_levels; i++)
                                 arvif->reg_tpc_info.tpe[i] = single_tpe->tx_power[0] / 2;
                 } else {
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -113,6 +113,18 @@ enum ath12k_supported_bw {
 	ATH12K_BW_320	= 4,
 };
 
+#define ATH12K_CHWIDTH_20		20  /* Channel width 20 */
+#define ATH12K_CHWIDTH_40		40  /* Channel width 40 */
+#define ATH12K_CHWIDTH_80		80  /* Channel width 80 */
+#define ATH12K_CHWIDTH_160		160 /* Channel width 160 */
+#define ATH12K_CHWIDTH_320		320 /* Channel width 320 */
+
+#define ATH12K_MAX_EIRP_VALS		5
+#define ATH12K_MAX_TX_POWER		127
+#define ATH12K_EIRP_PWR_SCALE		100
+
+#define ATH12K_NUM_20_MHZ_CHAN_IN_320_MHZ_CHAN	16
+
 #define ATH12K_PDEV_TX_POWER_INVALID	(-1)
 #define ATH12K_PDEV_TX_POWER_REFRESH_TIME_MSECS 5000 /* msecs */
 
@@ -182,6 +194,9 @@ struct ath12k *ath12k_mac_get_ar_by_pdev
 void ath12k_mac_fill_reg_tpc_info(struct ath12k *ar,
                                   struct ath12k_link_vif *arvif,
                                   struct ieee80211_chanctx_conf *ctx);
+void ath12k_mac_fill_reg_tpc_info_with_eirp_power(struct ath12k *ar,
+						  struct ath12k_link_vif *arvif,
+						  struct ieee80211_chanctx_conf *ctx);
 void ath12k_mac_radio_drain_tx(struct ath12k *ar);
 void ath12k_mac_peer_cleanup_all(struct ath12k *ar);
 void ath12k_dcs_wlan_intf_cleanup(struct ath12k *ar);
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -1322,6 +1322,137 @@ int ath12k_copy_afc_response(struct ath1
 	return 0;
 }
 
+u8 ath12k_reg_get_nsubchannels_for_opclass(u8 opclass)
+{
+	u8 i, n_opclasses = ARRAY_SIZE(ath12k_opclass_nchans_map);
+
+	for (i = 0; i < n_opclasses; i++)
+		if (opclass == ath12k_opclass_nchans_map[i].opclass)
+			return ath12k_opclass_nchans_map[i].nchans;
+
+	return 0;
+}
+
+void ath12k_reg_fill_subchan_centers(u8 nchans, u8 cfi, u8 *subchannels)
+{
+#define HALF_IEEE_CH_SEP  2
+#define IEEE_20MHZ_CH_SEP 4
+	u8 offset = HALF_IEEE_CH_SEP;
+	u8 last_idx = nchans - 1;
+	u8 i;
+
+	if (nchans == 1) {
+		subchannels[0] = cfi;
+		return;
+	}
+
+	for (i = nchans / 2; i < nchans; i++) {
+		subchannels[i] = cfi + offset;
+		subchannels[last_idx - i] = cfi - offset;
+		offset += IEEE_20MHZ_CH_SEP;
+	}
+}
+
+u8 ath12k_reg_get_opclass_from_bw(enum nl80211_chan_width bw)
+{
+	u8 i, n_opclass = ARRAY_SIZE(ath12k_opclass_bw_map);
+
+	for (i = 0; i < n_opclass; i++)
+		if (bw == ath12k_opclass_bw_map[i].bw)
+			return ath12k_opclass_bw_map[i].opclass;
+
+	return 0;
+}
+
+s16 ath12k_reg_psd_2_eirp(s16 psd, uint16_t ch_bw)
+{
+	s16 eirp = ATH12K_MAX_TX_POWER;
+	s16 ten_log10_bw;
+	u8 num_bws;
+	u8 i;
+
+	/* EIRP = PSD + (10 * log10(CH_BW)) */
+	num_bws = ARRAY_SIZE(ath12k_bw_to_10log10_map);
+	for (i = 0; i < num_bws; i++) {
+		if (ch_bw == ath12k_bw_to_10log10_map[i].bw) {
+			ten_log10_bw = ath12k_bw_to_10log10_map[i].ten_l_ten;
+			eirp = psd + ten_log10_bw;
+			break;
+		}
+	}
+
+	return eirp;
+}
+
+void ath12k_reg_get_sp_regulatory_pwrs(struct ath12k_base *ab,
+				       u32 freq,
+				       s8 *max_reg_eirp,
+				       s8 *reg_psd)
+{
+	struct ath12k_6ghz_sp_reg_rule *sp_rule = NULL;
+	struct ieee80211_reg_rule *sp_reg_rule;
+	int num_sp_rules;
+	int i;
+
+	if (!ab->sp_rule)
+		return;
+
+	sp_rule = ab->sp_rule;
+
+	if (!sp_rule->num_6ghz_sp_rule) {
+		ath12k_warn(ab, "No default 6 GHz sp rules present\n");
+		return;
+	}
+
+	num_sp_rules = sp_rule->num_6ghz_sp_rule;
+
+	for (i = 0; i < num_sp_rules; i++) {
+		sp_reg_rule = sp_rule->sp_reg_rule + i;
+		if (freq >= sp_reg_rule->freq_range.start_freq_khz &&
+		    freq <= sp_reg_rule->freq_range.end_freq_khz) {
+			*max_reg_eirp = MBM_TO_DBM(sp_reg_rule->power_rule.max_eirp);
+			*reg_psd = sp_reg_rule->psd;
+		}
+	}
+}
+
+void ath12k_reg_get_regulatory_pwrs(struct ath12k *ar,
+				    u32 freq,
+				    u8 reg_6g_power_mode,
+				    s8 *max_reg_eirp,
+				    s8 *reg_psd)
+{
+	struct ieee80211_regdomain *regd = NULL;
+	struct ath12k_base *ab = ar->ab;
+	int pdev_id;
+	int i;
+
+	pdev_id = ar->pdev_idx;
+
+	if (ab->new_regd[pdev_id])
+		regd = ab->new_regd[pdev_id];
+	else
+		regd = ab->default_regd[pdev_id];
+
+	if (!regd)
+		return;
+
+	if (reg_6g_power_mode == NL80211_REG_AP_SP) {
+		ath12k_reg_get_sp_regulatory_pwrs(ab, freq, max_reg_eirp, reg_psd);
+	} else {
+		for (i = 0; i < regd->n_reg_rules; i++) {
+			struct ieee80211_reg_rule reg_rule = regd->reg_rules[i];
+
+			if (reg_rule.mode == reg_6g_power_mode &&
+			    freq >= reg_rule.freq_range.start_freq_khz &&
+			    freq <= reg_rule.freq_range.end_freq_khz) {
+				*max_reg_eirp = MBM_TO_DBM(reg_rule.power_rule.max_eirp);
+				*reg_psd = reg_rule.psd;
+			}
+		}
+	}
+}
+
 void ath12k_regd_update_work(struct work_struct *work)
 {
 	struct ath12k *ar = container_of(work, struct ath12k,
--- a/drivers/net/wireless/ath/ath12k/reg.h
+++ b/drivers/net/wireless/ath/ath12k/reg.h
@@ -16,6 +16,7 @@ struct ath12k;
 #define AFC_AUTH_STATUS_OFFSET	1
 #define AFC_AUTH_SUCCESS	1
 #define AFC_AUTH_ERROR		0
+#define REG_SP_CLIENT_TYPE	3
 
 extern bool ath12k_afc_disable_timer_check;
 extern bool ath12k_afc_disable_req_id_check;
@@ -72,6 +73,46 @@ enum ath12k_serv_resp_code {
 	REG_AFC_SERV_RESP_UNSUPPORTED_SPECTRUM = 300,
 };
 
+struct ath12k_bw_10log10_pair {
+	u16 bw;
+	s16 ten_l_ten;
+};
+
+static const struct ath12k_bw_10log10_pair ath12k_bw_to_10log10_map[] = {
+	{ 20, 13}, /* 10* 1.30102 = 13.0102 */
+	{ 40, 16}, /* 10* 1.60205 = 16.0205 */
+	{ 80, 19}, /* 10* 1.90308 = 19.0308 */
+	{160, 22}, /* 10* 2.20411 = 22.0411 */
+	{320, 25}, /* 10* 2.50514 = 25.0514 */
+};
+
+struct ath12k_opclass_bw_pair {
+	u8 opclass;
+	enum nl80211_chan_width bw;
+};
+
+static const struct ath12k_opclass_bw_pair ath12k_opclass_bw_map[] = {
+	{131, ATH12K_CHWIDTH_20},
+	{132, ATH12K_CHWIDTH_40},
+	{133, ATH12K_CHWIDTH_80},
+	{134, ATH12K_CHWIDTH_160},
+	{137, ATH12K_CHWIDTH_320},
+};
+
+struct ath12k_opclass_nchans_pair {
+	u8 opclass;
+	u8 nchans;
+};
+
+static const struct ath12k_opclass_nchans_pair ath12k_opclass_nchans_map[] = {
+	{131, 1},
+	{136, 1},
+	{132, 2},
+	{133, 4},
+	{134, 8},
+	{137, 16},
+};
+
 struct ath12k_afc_freq_obj {
 	u32 low_freq;
 	u32 high_freq;
@@ -320,4 +361,15 @@ void ath12k_reg_get_afc_eirp_power_for_b
 					  s8 *tx_power);
 int ath12k_reg_process_afc_power_event(struct ath12k *ar);
 int ath12k_copy_afc_response(struct ath12k *ar, char *afc_resp, u32 len);
+u8 ath12k_reg_get_nsubchannels_for_opclass(u8 opclass);
+void ath12k_reg_fill_subchan_centers(u8 nchans, u8 cfi, u8 *subchannels);
+u8 ath12k_reg_get_opclass_from_bw(enum nl80211_chan_width bw);
+s16 ath12k_reg_psd_2_eirp(s16 psd, uint16_t ch_bw);
+void ath12k_reg_get_regulatory_pwrs(struct ath12k *ar, u32 freq,
+				    u8 reg_6g_power_mode, s8 *max_reg_eirp,
+				    s8 *reg_psd);
+void ath12k_reg_get_reg_sp_regulatory_pwrs(struct ath12k_base *ab,
+					   u32 freq,
+					   s8 *max_reg_eirp,
+					   s8 *reg_psd);
 #endif
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2498,6 +2498,7 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_AFC_SUPPORT = 295,
 	WMI_TLV_SERVICE_SAWF_LEVEL0 = 311,
 	WMI_TLV_SERVICE_PKTLOG_DECODE_INFO_SUPPORT = 320,
+	WMI_TLV_SERVICE_EIRP_PREFERRED_SUPPORT = 352,
 	WMI_TLV_SERVICE_PEER_METADATA_V1A_V1B_SUPPORT = 365,
 	WMI_TLV_SERVICE_N_LINK_MLO_SUPPORT = 381,
 	WMI_TLV_SERVICE_BRIDGE_VDEV_SUPPORT = 384,
