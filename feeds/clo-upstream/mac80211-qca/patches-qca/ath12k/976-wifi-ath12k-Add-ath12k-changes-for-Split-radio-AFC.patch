From 0412b9ae1e746098ed2f5d11d46cb5f1fa23db2d Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Mon, 30 Sep 2024 15:00:21 +0530
Subject: [PATCH] wifi: ath12k: Add ath12k changes for Split radio AFC

Add the following changes to enable AFC support in a wiphy
that contains 2 SOCs, with supporting the 6 GHz low band and other
supporting the 6 GHz high band:

1) Fetch hw_idx from QCA_WLAN_VENDOR_ATTR_AFC_RESP_HW_IDX, in the
   AFC Response event, coming from the AFC application and use it to
   find the ar, for writing the AFC response data to the respective
   radio's shared memory location.
2) Add a new API ath12k_mac_get_ar_by_center_freq, to find the ar
   based on hw and center_freq.

Tag: 6G_REGULATORY
Patch-dependency: 956-b-wifi-ath12k-Add-support-for-processing-AFC-power-eve.patch

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c    | 18 +++++++++++
 drivers/net/wireless/ath/ath12k/mac.h    |  2 ++
 drivers/net/wireless/ath/ath12k/vendor.c | 38 ++++++++++++++----------
 drivers/net/wireless/ath/ath12k/vendor.h |  1 +
 4 files changed, 44 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1022,6 +1022,25 @@ static struct ath12k *ath12k_mac_get_ar_
 	return NULL;
 }
 
+struct ath12k *ath12k_mac_get_ar_by_center_freq(struct ieee80211_hw *hw,
+						u16 center_freq)
+{
+	struct ath12k_hw *ah = hw->priv;
+	struct ath12k *ar;
+	int i;
+
+	lockdep_assert_held(&ah->conf_mutex);
+	ar = ah->radio;
+	for (i = 0; i < ah->num_radio; i++) {
+		if (center_freq >= ar->chan_info.low_freq &&
+		    center_freq <= ar->chan_info.high_freq)
+			return ar;
+		ar++;
+	}
+
+	return NULL;
+}
+
 static struct ath12k *ath12k_mac_get_ar_by_chan(struct ieee80211_hw *hw,
 						struct ieee80211_channel *channel)
 {
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -215,6 +215,8 @@ void ath12k_mac_get_any_chandef_iter(str
                                      void *data);
 struct ath12k *ath12k_get_ar_by_vif(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 				    u8 link_id);
+struct ath12k *ath12k_mac_get_ar_by_center_freq(struct ieee80211_hw *hw,
+						u16 center_freq);
 int ath12k_mac_mlo_setup(struct ath12k_hw *ah);
 int ath12k_mac_mlo_ready(struct ath12k_hw *ah);
 int ath12k_mac_mlo_teardown(struct ath12k_hw *ah);
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -2370,6 +2370,7 @@ static const struct nla_policy
 ath12k_cfg80211_afc_response_policy[QCA_WLAN_VENDOR_ATTR_AFC_RESP_MAX + 1] = {
 	[QCA_WLAN_VENDOR_ATTR_AFC_RESP_TIME_TO_LIVE] = { .type = NLA_U32 },
 	[QCA_WLAN_VENDOR_ATTR_AFC_RESP_REQ_ID] = { .type = NLA_U32 },
+	[QCA_WLAN_VENDOR_ATTR_AFC_RESP_HW_IDX] = { .type = NLA_U32 },
 	[QCA_WLAN_VENDOR_ATTR_AFC_RESP_EXP_DATE] = { .type = NLA_U32 },
 	[QCA_WLAN_VENDOR_ATTR_AFC_RESP_EXP_TIME] = { .type = NLA_U32 },
 	[QCA_WLAN_VENDOR_ATTR_AFC_RESP_AFC_SERVER_RESP_CODE] = { .type = NLA_U32 },
@@ -2736,34 +2737,50 @@ static int ath12k_vendor_receive_afc_res
 	struct ath12_afc_host_resp *afc_rsp = NULL;
 	int afc_resp_len = 0;
 	enum ath12k_nl_afc_resp_type afc_resp_format;
-	int ret = 0;
+	int ret = 0, chan_idx, hw_idx = -1;
+	u16 center_freq;
 	u8 i;
 
-	ar = ah->radio;
-
-	for (i = 0; i < ah->num_radio; i++, ar++)
-		if (ar->supports_6ghz)
-			break;
-
-	if (!ar)
-		return -ENODATA;
-
-	ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
-		   "Received AFC response event\n");
+	ath12k_dbg(NULL, ATH12K_DBG_AFC, "Received AFC response event\n");
 
 	if (!(data && data_len)) {
-		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
+		ath12k_dbg(NULL, ATH12K_DBG_AFC,
 			   "Invalid data length data ptr: %pK ", data);
 		return -EINVAL;
 	}
 
 	if (nla_parse(tb, QCA_WLAN_VENDOR_ATTR_AFC_RESP_MAX, data, data_len,
 		      ath12k_cfg80211_afc_response_policy, NULL)) {
-		ath12k_warn(ar->ab,
+		ath12k_warn(NULL,
 			    "invalid set afc config policy attribute\n");
 		return -EINVAL;
 	}
 
+	mutex_lock(&ah->conf_mutex);
+	if (tb[QCA_WLAN_VENDOR_ATTR_AFC_RESP_HW_IDX]) {
+		hw_idx = nla_get_u32(tb[QCA_WLAN_VENDOR_ATTR_AFC_RESP_HW_IDX]);
+		if (hw_idx < 0 || hw_idx >= wiphy->num_hw) {
+			ath12k_warn(NULL, "Invalid hw_idx attribute\n");
+			ret = -EINVAL;
+			goto out;
+		}
+
+		chan_idx = (wiphy->hw_chans[hw_idx]->n_chans / 2);
+		center_freq = wiphy->hw_chans[hw_idx]->chans[chan_idx].center_freq;
+		ar = ath12k_mac_get_ar_by_center_freq(hw, center_freq);
+	} else {
+		ar = ah->radio;
+		for (i = 0; i < ah->num_radio; i++, ar++)
+			if (ar->supports_6ghz)
+				break;
+	}
+
+	if (!ar) {
+		ath12k_err(NULL, "ar is NULL \n");
+		ret = -ENODATA;
+		goto out;
+	}
+
 	afc_resp_format = QCA_WLAN_VENDOR_ATTR_AFC_BIN_RESP;
 	switch (afc_resp_format) {
 	case QCA_WLAN_VENDOR_ATTR_AFC_JSON_RESP:
@@ -2780,7 +2797,8 @@ static int ath12k_vendor_receive_afc_res
 			} else {
 				ath12k_warn(ar->ab,
 					    "AFC JSON data is not present!");
-				return -EINVAL;
+				ret = -EINVAL;
+				goto out;
 			}
 
 			/* Extract the AFC response buffer */
@@ -2791,13 +2809,15 @@ static int ath12k_vendor_receive_afc_res
 			} else {
 				ath12k_warn(ar->ab,
 					    "Response buffer allocation failed");
-				return -EINVAL;
+				ret = -EINVAL;
+				goto out;
 			}
 
 		} else {
 			ath12k_warn(ar->ab,
 				    "AFC JSON data not found");
-			return -EINVAL;
+			ret = -EINVAL;
+			goto out;
 		}
 		break;
 
@@ -2817,8 +2837,10 @@ static int ath12k_vendor_receive_afc_res
 		 */
 		afc_rsp = ath12k_extract_afc_resp(ar->ab, tb, &afc_resp_len);
 
-		if (!afc_rsp)
-			return -EINVAL;
+		if (!afc_rsp) {
+			ret = -EINVAL;
+			goto out;
+		}
 
 		ath12k_dbg(ar->ab, ATH12K_DBG_AFC,
 			   "AFC response extraction successful!\n");
@@ -2853,6 +2875,8 @@ static int ath12k_vendor_receive_afc_res
 
 exit:
 	kfree(afc_rsp);
+out:
+	mutex_unlock(&ah->conf_mutex);
 	return ret;
 }
 
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -1239,6 +1239,7 @@ enum qca_wlan_vendor_attr_afc_response {
 	QCA_WLAN_VENDOR_ATTR_AFC_RESP_AFC_SERVER_RESP_CODE = 6,
 	QCA_WLAN_VENDOR_ATTR_AFC_RESP_FREQ_PSD_INFO = 7,
 	QCA_WLAN_VENDOR_ATTR_AFC_RESP_OPCLASS_CHAN_EIRP_INFO = 8,
+	QCA_WLAN_VENDOR_ATTR_AFC_RESP_HW_IDX = 9,
 
 	QCA_WLAN_VENDOR_ATTR_AFC_RESP_AFTER_LAST,
 	QCA_WLAN_VENDOR_ATTR_AFC_RESP_MAX =
