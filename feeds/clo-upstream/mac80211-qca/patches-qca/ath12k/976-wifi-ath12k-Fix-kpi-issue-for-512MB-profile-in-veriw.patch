From f29c6369a828975a63fa4ba72a3377fa2d531002 Mon Sep 17 00:00:00 2001
From: Vinith Kumar R <quic_vinithku@quicinc.com>
Date: Tue, 1 Oct 2024 22:02:00 +0530
Subject: [PATCH] wifi: ath12k: Fix kpi issue for 512MB profile in veriwave DL

In recent tx optimization changes where the skb is being freed either
in driver itself or by calling mac80211 callback depends on the skb
is from skb recycler or not. In 512M profile where skb recycler
disabled cases will reduce the throughput as the mac80211
callback used for freeing the skb for the packet it doesn't expect
any tx status which increases cpu usage and affects throughput.
So add support to check tx_status flag for calling
ieee80211_free_txskb, this avoids unnecessary call
of mac80211 api and improves throughput.

Fixes: I70e7739d3ab (wifi: ath12k: Remove unneccesary checks in DL fast path)

Patch-dependency: 907-wifi-ath12k-Remove-unneccesary-checks-in-DL-fast-pat.patch

Signed-off-by: Vinith Kumar R <quic_vinithku@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 41 ++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/mac.c   |  5 ++-
 2 files changed, 41 insertions(+), 5 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 78d602a..9af7a89 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -777,14 +777,26 @@ static void ath12k_dp_tx_free_txbuf(struct ath12k_base *ab,
 {
 	struct ath12k *ar;
 	struct sk_buff *skb_ext_desc;
-
+#ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
+	u8 flags = 0;
+	struct ath12k_skb_cb *skb_cb;
+#endif
 	ar = ab->pdevs[mac_id].ar;
 	ath12k_dp_tx_decrement(ar);
 
+#ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
+	skb_cb = (struct ath12k_skb_cb *)&IEEE80211_SKB_CB(msdu)->driver_data;
+	flags = skb_cb->flags;
+	if (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS)){
+		dev_kfree_skb_any(msdu);
+		return;
+	}
+#else
 	if (ab->stats_disable && tx_desc->flags & DP_TX_DESC_FLAG_FAST) {
 		dev_kfree_skb_any(msdu);
 		return;
 	}
+#endif
 
 	skb_ext_desc = tx_desc->skb_ext_desc;
 	if (unlikely(skb_ext_desc))
@@ -849,11 +861,20 @@ ath12k_dp_tx_htt_tx_complete_buf(struct ath12k_base *ab,
 
 	ath12k_dp_tx_decrement(ar);
 
+#ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
+	skb_cb = (struct ath12k_skb_cb *)&IEEE80211_SKB_CB(msdu)->driver_data;
+	flags = skb_cb->flags;
+	if (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS)){
+		dev_kfree_skb(msdu);
+		return;
+	}
+#else
 	/* Free skb here if stats is disabled */
 	if (ab->stats_disable && tx_desc->flags & DP_TX_DESC_FLAG_FAST) {
 		dev_kfree_skb(msdu);
 		return;
 	}
+#endif
 
 	skb_ext_desc = tx_desc->skb_ext_desc;
 	if (unlikely(skb_ext_desc))
@@ -1535,6 +1556,10 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 	struct list_head desc_free_list, *cur;
 	struct sk_buff *msdu;
 	u8 mac_id;
+#ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
+	u8 flags = 0;
+	struct ath12k_skb_cb *skb_cb;
+#endif
 	u64 desc_va;
 	u32 desc_id;
 	int valid_entries;
@@ -1645,10 +1670,17 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 
 		ab->soc_stats.tx_completed[data_ring_id]++;
 
+#ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
+		skb_cb = (struct ath12k_skb_cb *)&IEEE80211_SKB_CB(msdu)->driver_data;
+		flags = skb_cb->flags;
 		/* Free skb here if stats is disabled */
-		if (ab->stats_disable && tx_desc->flags & DP_TX_DESC_FLAG_FAST)
+		if (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS)){
+			dev_kfree_skb(msdu);
+#else
+		if (ab->stats_disable && tx_desc->flags & DP_TX_DESC_FLAG_FAST) {
 			__skb_queue_head(&free_list_head, msdu);
-		else {
+#endif
+		} else {
 
 			ath12k_dp_tx_complete_msdu(ar, msdu, tx_status, buf_rel_source,
 						   tx_desc, timestamp, htt_status);
@@ -1665,8 +1697,9 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 	}
 	list_splice_tail(&desc_free_list, &dp->tx_desc_free_list[ring_id]);
 	spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
-
+#ifndef CPTCFG_ATH12K_MEM_PROFILE_512M
 	dev_kfree_skb_list_fast(&free_list_head);
+#endif
 	return (orig_budget - budget);
 }
 
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 24e8226..6108aa3 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11031,7 +11031,10 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 			ieee80211_free_txskb(hw, skb);
 			return;
 		}
-
+#ifdef CPTCFG_ATH12K_MEM_PROFILE_512M
+		if (info_flags & IEEE80211_TX_CTL_REQ_TX_STATUS)
+			skb_cb->flags |= ATH12K_SKB_TX_STATUS;
+#endif
 		switch(ahvif->tx_encap_type) {
 			case ATH12K_HW_TXRX_ETHERNET:
 				skb_cb->flags = ATH12K_SKB_HW_80211_ENCAP;
-- 
2.34.1

