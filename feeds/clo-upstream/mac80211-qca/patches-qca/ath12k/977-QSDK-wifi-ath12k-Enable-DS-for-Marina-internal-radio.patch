From 14dc8e3f99a045dbb7c025f52b1d9382d03b090c Mon Sep 17 00:00:00 2001
From: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
Date: Sat, 14 Sep 2024 01:07:53 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Enable DS for Marina internal radio

Enable DS mode for Marina internal radio and register reo2ppe,
ppe_wbm_rel and ppe2tcl interrupts. Also, add the base address of
ppe2tcl, ppe_wbm_rel rings.

Signed-off-by: Thiraviyam Mariyappan <quic_tmariyap@quicinc.com>
Signed-off-by: Nithyanantham Paramasivam <quic_nithp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c  | 130 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/core.c |   4 +-
 drivers/net/wireless/ath/ath12k/core.h |   2 +-
 drivers/net/wireless/ath/ath12k/dp.c   |  12 ++-
 drivers/net/wireless/ath/ath12k/hw.c   |  12 +++
 drivers/net/wireless/ath/ath12k/hw.h   |   1 +
 6 files changed, 154 insertions(+), 7 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/ahb.c b/drivers/net/wireless/ath/ath12k/ahb.c
index a54706f..a6bcb37 100644
--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -34,7 +34,8 @@ static const struct of_device_id ath12k_ahb_of_match[] = {
 MODULE_DEVICE_TABLE(of, ath12k_ahb_of_match);
 
 #define ATH12K_IRQ_CE0_OFFSET 4
-
+#define ATH12K_IRQ_PPE_OFFSET 54
+#define ATH12K_PPEDS_INVALID_SOC_IDX -1
 static const char *irq_name[ATH12K_IRQ_NUM_MAX] = {
 	"misc-pulse1",
 	"misc-latch",
@@ -89,7 +90,10 @@ static const char *irq_name[ATH12K_IRQ_NUM_MAX] = {
 	"wbm2host-tx-completions-ring2",
 	"wbm2host-tx-completions-ring1",
 	"tcl2host-status-ring",
-	"umac_reset"
+	"umac_reset",
+	"reo2ppe",
+	"ppe_wbm_rel",
+	"ppe2tcl"
 };
 
 /* enum ext_irq_num - irq numbers that can be used by external modules
@@ -134,6 +138,9 @@ enum ext_irq_num {
 	wbm2host_tx_completions_ring1,
 	tcl2host_status_ring,
 	umac_reset,
+	reo2ppe,
+	ppe_wbm_rel,
+	ppe2tcl
 };
 
 static inline u32 ath12k_ahb_get_cmem_base(struct ath12k_base *ab)
@@ -768,7 +775,118 @@ static int ath12k_ahb_ssr_notifier_unreg(struct ath12k_base *ab)
 	return ath12k_rproc_unregister_subsys_notifier(ab);
 }
 
-static const struct ath12k_hif_ops ath12k_ahb_hif_ops = {
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+int ath12k_ahb_ppeds_register_interrupts(struct ath12k_base *ab, int type, int vector,
+					int ring_num)
+{
+
+	int ret = -EINVAL, irq;
+	struct platform_device *pdev = ab->pdev;
+	int irq_idx;
+
+
+	if (ab->ppe.ppeds_soc_idx == ATH12K_PPEDS_INVALID_SOC_IDX) {
+		ath12k_err(ab, "invalid soc idx in ppeds IRQ registration\n");
+		goto irq_fail;
+	}
+	if (type == HAL_WBM2SW_RELEASE && ring_num == HAL_WBM2SW_PPEDS_TX_CMPLN_RING_NUM) {
+		irq_idx = ATH12K_IRQ_PPE_OFFSET + 1;
+		irq = platform_get_irq_byname(ab->pdev,
+					      irq_name[irq_idx]);
+		if (irq < 0) {
+			ath12k_err(ab, "ppeds RegIRQ: invalid irq:%d for type:%d \n",irq,type);
+			return irq;
+		}
+		ab->irq_num[irq_idx] = irq;
+		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL],
+			 sizeof(ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL]),
+			 "ppe_wbm_rel_%d", ab->ppe.ds_node_id);
+		ret = devm_request_irq(&pdev->dev, irq,  ath12k_dp_ppeds_handle_tx_comp,
+					IRQF_NO_AUTOEN | IRQF_NO_SUSPEND,
+					ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE_WBM2SW_REL],
+					(void *)ab);
+
+		if (ret) {
+			ath12k_err(ab, "ppeds RegIRQ: req_irq fail:%d \n",ret);
+			goto irq_fail;
+		}
+		ab->dp.ppeds_irq[PPEDS_IRQ_PPE_WBM2SW_REL] = irq;
+
+	} else if (type == HAL_PPE2TCL) {
+		irq_idx = ATH12K_IRQ_PPE_OFFSET + 2;
+		irq = platform_get_irq_byname(ab->pdev,
+					      irq_name[irq_idx]);
+		if (irq < 0) {
+			ath12k_err(ab, "ppeds RegIRQ: invalid irq:%d for type:%d \n",irq,type);
+			return irq;
+		}
+		ab->irq_num[irq_idx] = irq;
+		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL],
+			 sizeof(ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL]),
+			 "ppe2tcl_%d",  ab->ppe.ds_node_id);
+		ret = devm_request_irq(&pdev->dev, irq,  ath12k_ds_ppe2tcl_irq_handler,
+					IRQF_NO_AUTOEN | IRQF_NO_SUSPEND,
+					ab->dp.ppeds_irq_name[PPEDS_IRQ_PPE2TCL],
+					(void *)ath12k_dp_get_ppe_ds_ctxt(ab));
+		if (ret) {
+			ath12k_err(ab, "ppeds RegIRQ: req_irq fail:%d \n",ret);
+			goto irq_fail;
+		}
+		ab->dp.ppeds_irq[PPEDS_IRQ_PPE2TCL] = irq;
+
+	} else if (type == HAL_REO2PPE) {
+		irq_idx = ATH12K_IRQ_PPE_OFFSET;
+		irq = platform_get_irq_byname(ab->pdev,
+					      irq_name[irq_idx]);
+		if (irq < 0) {
+			ath12k_err(ab, "ppeds IRQreg: invalid irq:%d for type:%d \n",irq,type);
+			return irq;
+		}
+		ab->irq_num[irq_idx] = irq;
+		irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+		snprintf(&ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE],
+			 sizeof(ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE]),
+			 "reo2ppe_%d", ab->ppe.ds_node_id);
+		ret = devm_request_irq(&pdev->dev, irq,  ath12k_ds_reo2ppe_irq_handler,
+					IRQF_SHARED | IRQF_NO_SUSPEND,
+					ab->dp.ppeds_irq_name[PPEDS_IRQ_REO2PPE],
+					(void *)ath12k_dp_get_ppe_ds_ctxt(ab));
+		if (ret) {
+			ath12k_err(ab, "ppeds RegIRQ: req_irq fail:%d \n",ret);
+			goto irq_fail;
+		}
+		ab->dp.ppeds_irq[PPEDS_IRQ_REO2PPE] = irq;
+		disable_irq_nosync(irq);
+
+	}
+
+	return 0;
+
+irq_fail:
+	return ret;
+}
+
+void ath12k_ahb_ppeds_irq_disable(struct ath12k_base *ab, enum ppeds_irq_type type)
+{
+	disable_irq_nosync(ab->dp.ppeds_irq[type]);
+}
+
+void ath12k_ahb_ppeds_irq_enable(struct ath12k_base *ab, enum ppeds_irq_type type)
+{
+	enable_irq(ab->dp.ppeds_irq[type]);
+}
+
+void ath12k_ahb_ppeds_free_interrupts(struct ath12k_base *ab)
+{
+	disable_irq_nosync(ab->dp.ppeds_irq[PPEDS_IRQ_PPE2TCL]);
+	disable_irq_nosync(ab->dp.ppeds_irq[PPEDS_IRQ_REO2PPE]);
+	disable_irq_nosync(ab->dp.ppeds_irq[PPEDS_IRQ_PPE_WBM2SW_REL]);
+}
+#endif
+
+static struct ath12k_hif_ops ath12k_ahb_hif_ops = {
 	.start = ath12k_ahb_start,
 	.stop = ath12k_ahb_stop,
 	.read32 = ath12k_ahb_read32,
@@ -786,6 +904,12 @@ static const struct ath12k_hif_ops ath12k_ahb_hif_ops = {
 	.dp_umac_reset_irq_config = ath12k_ahb_dp_umac_config_irq,
 	.dp_umac_reset_enable_irq = ath12k_ahb_dp_umac_reset_enable_irq,
 	.dp_umac_reset_free_irq = ath12k_ahb_dp_umac_reset_free_irq,
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	.ppeds_register_interrupts = ath12k_ahb_ppeds_register_interrupts,
+	.ppeds_free_interrupts = ath12k_ahb_ppeds_free_interrupts,
+	.ppeds_irq_enable = ath12k_ahb_ppeds_irq_enable,
+	.ppeds_irq_disable = ath12k_ahb_ppeds_irq_disable,
+#endif
 };
 
 static const struct ath12k_hif_ops ath12k_ahb_hif_ops_qcn6432 = {
diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index faa6500..97a5032 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1861,8 +1861,8 @@ int ath12k_core_qmi_firmware_ready(struct ath12k_base *ab)
 			 * TODO: add device capability check
 			 */
 			ath12k_ppe_ds_enabled = 0;
-		} else if (ab->hif.bus == ATH12K_BUS_PCI || ab->hif.bus == ATH12K_BUS_HYBRID)
-			set_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags);
+		} else if (ab->hw_params->ds_support)
+				set_bit(ATH12K_FLAG_PPE_DS_ENABLED, &ab->dev_flags);
 	}
 #endif
 
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 8d159ad..05b5498 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -189,7 +189,7 @@ enum ath12k_firmware_mode {
 
 extern bool ath12k_cold_boot_cal;
 
-#define ATH12K_IRQ_NUM_MAX 57
+#define ATH12K_IRQ_NUM_MAX 60
 #define ATH12K_EXT_IRQ_NUM_MAX	16
 #define ATH12K_MAX_TCL_RING_NUM 3
 
diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index 0138159..6311f1e 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -308,7 +308,7 @@ static void ath12k_dp_srng_msi_setup(struct ath12k_base *ab,
 	/* Interrupt will not be freed for non-asserted chips
 	 * during UMAC reset
 	 */
-	if (!ath12k_dp_umac_reset_in_progress(ab))
+	if (ab->hw_params->ds_support && !ath12k_dp_umac_reset_in_progress(ab))
 		ath12k_hif_ppeds_register_interrupts(ab, type, vector, ring_num);
 }
 
@@ -367,12 +367,17 @@ static int ath12k_dp_srng_init_idx(struct ath12k_base *ab, struct dp_srng *ring,
 	struct hal_srng_params params = { 0 };
 	bool cached = false;
 	int ret;
+	int vector = 0;
 
 	params.ring_base_vaddr = ring->vaddr;
 	params.ring_base_paddr = ring->paddr;
 	params.num_entries = num_entries;
 	ath12k_dp_srng_msi_setup(ab, &params, type, ring_num + mac_id);
 
+	if ((ab->hw_params->ds_support) && (ab->hif.bus == ATH12K_BUS_AHB) &&
+						!ath12k_dp_umac_reset_in_progress(ab))
+		ath12k_hif_ppeds_register_interrupts(ab, type, vector, ring_num);
+
 	switch (type) {
 	case HAL_REO_DST:
 	case HAL_REO2PPE:
@@ -494,6 +499,7 @@ int ath12k_dp_srng_setup(struct ath12k_base *ab, struct dp_srng *ring,
 	int max_entries = ath12k_hal_srng_get_max_entries(ab, type);
 	int ret;
 	bool cached = false;
+	int vector = 0;
 
 	if (max_entries < 0 || entry_sz < 0)
 		return -EINVAL;
@@ -540,6 +546,10 @@ skip_dma_alloc:
 	params.num_entries = num_entries;
 	ath12k_dp_srng_msi_setup(ab, &params, type, ring_num + mac_id);
 
+	if ((ab->hw_params->ds_support) && (ab->hif.bus == ATH12K_BUS_AHB) &&
+						!ath12k_dp_umac_reset_in_progress(ab))
+		ath12k_hif_ppeds_register_interrupts(ab, type, vector, ring_num);
+
 	switch (type) {
 	case HAL_REO_DST:
 	case HAL_REO2PPE:
diff --git a/drivers/net/wireless/ath/ath12k/hw.c b/drivers/net/wireless/ath/ath12k/hw.c
index 84f0857..e8baed1 100644
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1563,6 +1563,12 @@ const struct ath12k_hw_regs ipq5424_hw_regs = {
 	.hal_wbm0_release_ring_base_lsb = 0x00000e08,
 	.hal_wbm1_release_ring_base_lsb = 0x00000e80,
 
+	/* reo2ppe ring base address */
+	.hal_reo2ppe_ring_base = 0x00000938,
+
+	/* ppe2tcl ring base address */
+	.hal_tcl_ppe2tcl_ring_base_lsb = 0x00000c58,
+
 	/* CE base address */
 	.hal_umac_ce0_src_reg_base = 0x00200000,
 	.hal_umac_ce0_dest_reg_base = 0x00201000,
@@ -1911,6 +1917,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.cfr_support = true,
 		.cfr_dma_hdr_size = sizeof(struct ath12k_cfir_enh_dma_hdr),
 		.cfr_num_stream_bufs = 127,
+		.ds_support = false,
 		/* sizeof (ath12k_csi_cfr_header) + max cfr header(200 bytes) +
 		 * max cfr payload(16384 bytes)
 		 */
@@ -1997,6 +2004,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.cfr_support = true,
 		.cfr_dma_hdr_size = sizeof(struct ath12k_cfir_enh_dma_hdr),
 		.cfr_num_stream_bufs = 255,
+		.ds_support = false,
 		/* sizeof (ath12k_csi_cfr_header) + max cfr header(200 bytes) +
 		 * max cfr payload(16384 bytes)
 		 */
@@ -2096,6 +2104,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.cfr_support = true,
 		.cfr_dma_hdr_size = sizeof(struct ath12k_cfir_enh_dma_hdr),
 		.cfr_num_stream_bufs = 127,
+		.ds_support = true,
 		/* sizeof (ath12k_csi_cfr_header) + max cfr header(200 bytes) +
 		 * max cfr payload(16384 bytes)
 		 */
@@ -2199,6 +2208,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.cfr_support = true,
 		.cfr_dma_hdr_size = sizeof(struct ath12k_cfir_enh_dma_hdr),
 		.cfr_num_stream_bufs = 255,
+		.ds_support = false,
 		/* sizeof (ath12k_csi_cfr_header) + max cfr header(200 bytes) +
 		 * max cfr payload(16384 bytes)
 		 */
@@ -2295,6 +2305,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.cfr_support = true,
 		.cfr_dma_hdr_size = sizeof(struct ath12k_cfir_enh_dma_hdr),
 		.cfr_num_stream_bufs = 128,
+		.ds_support = true,
 		/* sizeof (ath12k_csi_cfr_header) + max cfr header(200 bytes) +
 		 * max cfr payload(16384 bytes)
 		 */
@@ -2391,6 +2402,7 @@ static struct ath12k_hw_params ath12k_hw_params[] = {
 		.support_fse = false,
 		.handle_beacon_miss = true,
 		.cfr_support = false,
+		.ds_support = true,
 		.cfr_dma_hdr_size = sizeof(struct ath12k_cfir_enh_dma_hdr),
 		.cfr_num_stream_bufs = 128,
 		/* sizeof (ath12k_csi_cfr_header) + max cfr header(200 bytes) +
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index 7aa99b9..5812d79 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -284,6 +284,7 @@ struct ath12k_hw_params {
 	bool support_fse;
 	bool handle_beacon_miss;
 	bool cfr_support;
+	bool ds_support;
 	u32 cfr_dma_hdr_size;
 	u32 cfr_num_stream_bufs;
 	u32 cfr_stream_buf_size;
-- 
2.17.1

