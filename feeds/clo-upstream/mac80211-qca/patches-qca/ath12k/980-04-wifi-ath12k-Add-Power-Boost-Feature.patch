From 1a63ba9729faf8ae8a886f3e08bcced578478086 Mon Sep 17 00:00:00 2001
From: Thomas Wu <quic_wthomas@quicinc.com>
Date: Tue, 15 Oct 2024 15:44:48 -0700
Subject: [PATCH 4/6] wifi: ath12k: Add Power Boost Feature

Power Boost is a feature that requires cooperation
between userspace and firmware to optimize tx
antenna power. When a temperature or channel change
is detected, firmware will send data to userspace
for AI inference via shared memory. Based on AI
inference on this data, new tx and tx masks are
send to firmware to improve TX Antenna Power.

This commit introduces host driver changes
that will allow firmware shared memory data
to be passed to userspace with a metaheader.

These APIs are used for netlink layer calls to firmware.

ath12k_power_boost_cmd_power_boost_ready() -
will send ready message to firmware.

ath12k_power_boost_cmd_power_boost_abort() -
will send abort message to firmware.

ath12k_power_boost_cmd_power_boost_estimated_data() -
will send new tx and tx mask data to firmware.

This API uses relayfs to send packaged data to userspace
when WMI event is received from firmware.

ath12k_power_boost_send_event_data()

These API's are for init() and deinit() for power boost
and to register() and unregister() features.

ath12k_power_boost_init()
ath12k_power_boost_deinit()

Patch-dependency: none

Signed-off-by: Thomas Wu <quic_wthomas@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c        |   2 +
 drivers/net/wireless/ath/ath12k/power_boost.c | 339 ++++++++++++++++++
 2 files changed, 341 insertions(+)
 create mode 100644 drivers/net/wireless/ath/ath12k/power_boost.c

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 7127b45..c0043cf 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1393,6 +1393,7 @@ static int ath12k_core_pdev_init(struct ath12k_base *ab)
 	ath12k_telemetry_init(ab);
 	ath12k_fse_init(ab);
 	ath12k_dp_accel_cfg_init(ab);
+	ath12k_power_boost_init(ab);
 
 	ret = ath12k_dp_ppeds_start(ab);
 	if (ret) {
@@ -1417,6 +1418,7 @@ static void ath12k_core_pdev_deinit(struct ath12k_base *ab)
 	ath12k_cfr_deinit(ab);
 	ath12k_spectral_deinit(ab);
 	ath12k_thermal_unregister(ab);
+	ath12k_power_boost_deinit(ab);
 	ath12k_dp_accel_cfg_deinit(ab);
 	ath12k_fse_deinit(ab);
 	ath12k_telemetry_deinit(ab);
diff --git a/drivers/net/wireless/ath/ath12k/power_boost.c b/drivers/net/wireless/ath/ath12k/power_boost.c
new file mode 100644
index 0000000..3041368
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/power_boost.c
@@ -0,0 +1,339 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2020 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2024 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include <linux/relay.h>
+
+#include "wmi.h"
+#include "power_boost.h"
+#include "debug.h"
+
+bool ath12k_power_boost_enabled;
+module_param_named(powerboost, ath12k_power_boost_enabled, bool, 0444);
+MODULE_PARM_DESC(powerboost, "Enable Power Boost feature (Default: false)");
+
+static struct dentry *create_power_boost_buf_file_handler(const char *filename,
+							  struct dentry *parent,
+							  umode_t mode,
+							  struct rchan_buf *buf,
+							  int *is_global)
+{
+	struct dentry *buf_file;
+
+	buf_file = debugfs_create_file(filename, mode, parent, buf,
+				       &relay_file_operations);
+
+	if (!buf_file)
+		ath12k_warn(NULL, "power boost failed to debugfs dentry\n");
+
+	*is_global = 1;
+	return buf_file;
+}
+
+static int remove_power_boost_buf_file_handler(struct dentry *dentry)
+{
+	debugfs_remove(dentry);
+
+	return 0;
+}
+
+static struct rchan_callbacks rfs_power_boost_capture_cb = {
+	.create_buf_file = create_power_boost_buf_file_handler,
+	.remove_buf_file = remove_power_boost_buf_file_handler,
+};
+
+static void ath12k_power_boost_rfs_write(struct ath12k *ar,
+					 const void *tah, u32 tah_len,
+					 const void *meta, u32 meta_len,
+					 const void *shmem, u32 shmem_len,
+					 const void *tail, u32 tail_len)
+{
+	struct ath12k_hw_group *ag = ar->ab->ag;
+
+	if (!ag->pb_rfs_capture) {
+		ath12k_warn(NULL, "power boost relayfs ag is NULL\n");
+		return;
+	}
+
+	relay_write(ag->pb_rfs_capture, tah, tah_len);
+	relay_write(ag->pb_rfs_capture, meta, meta_len);
+	relay_write(ag->pb_rfs_capture, shmem, shmem_len);
+	relay_write(ag->pb_rfs_capture, tail, tail_len);
+	relay_flush(ag->pb_rfs_capture);
+}
+
+void ath12k_power_boost_send_event_data(struct ath12k *ar,
+					struct ath12k_wmi_pdev_power_boost_event *ev)
+{
+	struct ath12k_power_boost *pb = &ar->pb;
+	struct ath12k_power_boost_telemetry_agent_header *tah = &pb->tah;
+	struct ath12k_power_boost_meta_header *meta = &pb->meta;
+	struct ath12k_power_boost_shmem *shmem = &pb->shmem;
+	u32 end_magic = ATH12K_POWER_BOOST_END_MAGIC;
+
+	if (!pb->pb_enabled) {
+		ath12k_warn(ar->ab, "power boost failed to send via relayfs\n");
+		return;
+	}
+
+	if (ev->size > shmem->size) {
+		ath12k_warn(ar->ab, "power boost shmem write size invalid\n");
+		return;
+	}
+
+	tah->start_magic_num = ATH12K_POWER_BOOST_START_MAGIC;
+	tah->stats_version = 1;
+	tah->stats_type = 1;
+	tah->payload_len = sizeof(struct ath12k_power_boost_meta_header) + ev->size;
+
+	meta->pdev_id = ev->pdev_id;
+	meta->status = ev->status;
+	meta->training_stage = ev->training_stage;
+	meta->mcs = ev->mcs;
+	meta->bandwidth = ev->bandwidth;
+	meta->temperature_degree = ev->temperature_degree;
+	meta->primary_chan_mhz = ev->primary_chan_mhz;
+	meta->band_center_freq1 = ev->band_center_freq1;
+	meta->band_center_freq2 = ev->band_center_freq2;
+	meta->phy_mode = ev->phy_mode;
+	meta->link_id = ar->link_idx;
+
+	ath12k_power_boost_rfs_write(ar,
+				     tah, sizeof(struct ath12k_power_boost_telemetry_agent_header),
+				     meta, sizeof(struct ath12k_power_boost_meta_header),
+				     shmem->vaddr, ev->size,
+				     &end_magic, sizeof(u32));
+}
+
+int ath12k_power_boost_cmd_status(struct ath12k *ar,
+				  enum wmi_pdev_power_boost_status_type status)
+{
+	struct ath12k_base *ab;
+	struct ath12k_hw_group *ag;
+	struct ath12k_pdev *pdev;
+	struct ath12k_wmi_pdev_power_boost_cmd_fixed_param arg = {0};
+	int i, j;
+
+	arg.status = status;
+
+	ab = ar->ab;
+	if (!ab) {
+		ath12k_warn(NULL, "power boost status ab is NULL\n");
+		return -ENOMEM;
+	}
+
+	ag = ab->ag;
+	if (!ag) {
+		ath12k_warn(ar->ab, "power boost status ag is NULL\n");
+		return -ENOMEM;
+	}
+
+	for (i = 0; i < ag->num_chip; i++) {
+		struct ath12k_base *tmp_ab = ag->ab[i];
+
+		if (!tmp_ab || !tmp_ab->power_boost_support)
+			continue;
+
+		for (j = 0; j < tmp_ab->num_radios; j++) {
+			struct ath12k *tmp_ar;
+
+			pdev = &tmp_ab->pdevs[j];
+			tmp_ar = pdev->ar;
+			if (!tmp_ar)
+				continue;
+
+			if (ath12k_wmi_power_boost_status_cmd(tmp_ar, &arg)) {
+				ath12k_warn(ar->ab, "failed to send power boost status %d pdev %d\n",
+					    status, pdev->pdev_id);
+			}
+		}
+	}
+
+	return 0;
+}
+
+int ath12k_power_boost_cmd_estimated_data(struct ath12k *ar,
+					  u32 training_stage,
+					  u32 mcs, u32 bandwidth,
+					  u32 tx_evm, u32 tx_mask_margin)
+{
+	struct ath12k_wmi_pdev_power_boost_cmd_fixed_param arg = {0};
+	int ret = 0;
+
+	arg.status = WMI_CMD_POWER_BOOST_ESTIMATED_DATA;
+	arg.training_stage = training_stage;
+	arg.mcs = mcs;
+	arg.bandwidth = bandwidth;
+	arg.tx_evm = tx_evm;
+	arg.tx_mask_margin = tx_mask_margin;
+
+	ret = ath12k_wmi_power_boost_status_cmd(ar, &arg);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to send power boost estimated data pdev %d\n",
+			    ar->pdev->pdev_id);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static inline int ath12k_power_boost_alloc_shmem(struct ath12k *ar)
+{
+	struct ath12k_power_boost_shmem *shmem = &ar->pb.shmem;
+
+	shmem->vaddr_unaligned = dma_alloc_coherent(ar->ab->dev,
+						    shmem->size +
+						    ATH12K_POWER_BOOST_SHMEM_ALIGN,
+						    &shmem->paddr_unaligned,
+						    GFP_KERNEL);
+	if (!shmem->vaddr_unaligned) {
+		ath12k_warn(ar->ab, "power boost failed to dma alloc shmem pdev: %d\n",
+			    ar->pdev->pdev_id);
+		return -ENOMEM;
+	}
+
+	memset(shmem->vaddr_unaligned, 0, shmem->size + ATH12K_POWER_BOOST_SHMEM_ALIGN);
+	shmem->vaddr = PTR_ALIGN(shmem->vaddr_unaligned, ATH12K_POWER_BOOST_SHMEM_ALIGN);
+	shmem->paddr = shmem->paddr_unaligned + ((unsigned long)shmem->vaddr -
+		       (unsigned long)shmem->vaddr_unaligned);
+
+	return 0;
+}
+
+static inline void ath12k_power_boost_debug_unregister(struct ath12k *ar)
+{
+	struct ath12k_power_boost_shmem *shmem = &ar->pb.shmem;
+
+	ar->pb.pb_enabled = 0;
+	ath12k_power_boost_enabled = 0;
+
+	if (shmem->vaddr_unaligned) {
+		dma_free_coherent(ar->ab->dev,
+				  shmem->size + ATH12K_POWER_BOOST_SHMEM_ALIGN,
+				  shmem->vaddr_unaligned,
+				  shmem->paddr_unaligned);
+		shmem->vaddr_unaligned = NULL;
+		shmem->vaddr = NULL;
+		shmem->paddr_unaligned = 0;
+		shmem->paddr = 0;
+		shmem->size = 0;
+	}
+}
+
+static inline int ath12k_power_boost_debug_register(struct ath12k *ar)
+{
+	struct ath12k_power_boost_shmem *shmem = &ar->pb.shmem;
+	int ret = 0;
+
+	ret = ath12k_power_boost_alloc_shmem(ar);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to allocate shmem for power boost in pdev %d\n",
+			    ar->pdev_idx);
+		goto unregister;
+	}
+
+	ret = ath12k_wmi_power_boost_mem_addr_cmd(ar, shmem->paddr, shmem->size);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to allocate shared mem for power boost in pdev %d\n",
+			    ar->pdev_idx);
+		goto unregister;
+	}
+
+	ar->pb.pb_enabled = 1;
+	ath12k_power_boost_enabled = 1;
+
+	return 0;
+
+unregister:
+	return ret;
+}
+
+void ath12k_power_boost_deinit(struct ath12k_base *ab)
+{
+	struct ath12k *ar;
+	struct ath12k_hw_group *ag;
+	struct ath12k_power_boost *pb;
+	int i;
+
+	if (!ab->power_boost_support)
+		return;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		ar = ab->pdevs[i].ar;
+		ag = ar->ab->ag;
+		pb = &ar->pb;
+
+		ath12k_power_boost_debug_unregister(ar);
+
+		ath12k_info(ab, "power boost uninitialized for pdev %d\n", i);
+	}
+
+	if (ag && ag->pb_rfs_capture) {
+		relay_close(ag->pb_rfs_capture);
+		ag->pb_rfs_capture = NULL;
+	}
+}
+
+void ath12k_power_boost_init(struct ath12k_base *ab)
+{
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k *ar;
+	struct ath12k_power_boost *pb;
+	int ret = 0;
+	int i;
+
+	if (!ab->power_boost_support)
+		return;
+
+	if (!ag) {
+		ath12k_warn(ab, "power boost invalid ag\n");
+		return;
+	}
+
+	if (!ag->pb_rfs_capture) {
+		ag->pb_rfs_capture = relay_open("pb_capture",
+						NULL,
+						ATH12K_POWER_BOOST_RELAY_SUB_BUFS_SZ,
+						ATH12K_POWER_BOOST_RELAY_NUM_SUB_BUFS,
+						&rfs_power_boost_capture_cb, NULL);
+		if (!ag->pb_rfs_capture) {
+			ath12k_warn(NULL, "failed to open relay for power boost in pdev\n");
+			goto deinit;
+		}
+
+		scnprintf(ag->pb_rfs_path, sizeof(ag->pb_rfs_path), "%s",
+			  "/sys/kernel/debug/pb_capture0");
+	}
+
+	for (i = 0; i < ab->num_radios; i++) {
+		ar = ab->pdevs[i].ar;
+		pb = &ar->pb;
+
+		spin_lock_init(&pb->lock);
+
+		pb->num_subbufs = ATH12K_POWER_BOOST_RELAY_NUM_SUB_BUFS;
+		pb->subbuf_size = ATH12K_POWER_BOOST_RELAY_SUB_BUFS_SZ;
+
+		pb->shmem.size = ATH12K_POWER_BOOST_SHMEM_SZ;
+		pb->shmem.vaddr_unaligned = NULL;
+		pb->shmem.vaddr = NULL;
+		pb->shmem.paddr_unaligned = 0;
+		pb->shmem.paddr = 0;
+
+		ret = ath12k_power_boost_debug_register(ar);
+		if (ret) {
+			ath12k_warn(ab, "failed to initialize power boost for pdev %d\n", i);
+			goto deinit;
+		}
+
+		ath12k_info(ab, "power boost initialized for ar link idx %x pdev %d\n",
+			    i, ar->link_idx);
+	}
+
+	return;
+deinit:
+	ath12k_power_boost_deinit(ab);
+}
+
-- 
2.25.1

