From 27088df1f3b5052473ca9bbfbd91abaddd0af8a3 Mon Sep 17 00:00:00 2001
From: Sarika Sharma <quic_sarishar@quicinc.com>
Date: Thu, 17 Oct 2024 12:32:46 +0530
Subject: [PATCH] UPSTREAM:DP:wifi:ath12k: Add mld addr conversion logic for raw mode
 packets

Currently, the link MAC address to MLD MAC address conversion
in RX path is only supported for ethernet and nwifi mode by hardware.
This has a problem when operating in raw mode because the hardware
does not perform this conversion.
This leads to traffic failure in raw mld mode.

Hence, add the mld address conversion logic for raw mode to fix the
traffic failure issue.

patch-dependency: none

Signed-off-by: Sarika Sharma <quic_sarishar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 34 ++++++++++++++++++++-----
 1 file changed, 28 insertions(+), 6 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2787,12 +2787,30 @@ static void ath12k_dp_rx_h_undecap_nwifi
 	memcpy(skb_push(msdu, hdr_len), decap_hdr, hdr_len);
 }
 
+static void ath12k_dp_rx_mld_addr_conv(struct ath12k *ar, struct sk_buff *msdu,
+				       struct ath12k_dp_rx_info *rx_info)
+{
+	struct ath12k_base *ab = ar->ab;
+	struct ath12k_peer *peer;
+	struct ieee80211_hdr *hdr = (void *)msdu->data;
+
+	spin_lock_bh(&ab->base_lock);
+	peer = ath12k_dp_rx_h_find_peer(ar, msdu, rx_info);
+	if (!peer || !peer->mlo) {
+		spin_unlock_bh(&ab->base_lock);
+		return;
+	}
+	ether_addr_copy(hdr->addr2, peer->ml_addr);
+	spin_unlock_bh(&ab->base_lock);
+}
+
 static void ath12k_dp_rx_h_undecap_raw(struct ath12k *ar, struct sk_buff *msdu,
 				       enum hal_encrypt_type enctype,
-				       struct ieee80211_rx_status *status,
+				       struct ath12k_dp_rx_info *rx_info,
 				       bool decrypted)
 {
 	struct ath12k_skb_rxcb *rxcb = ATH12K_SKB_RXCB(msdu);
+	struct ieee80211_rx_status *status = rx_info->rx_status;
 	struct ieee80211_hdr *hdr;
 	size_t hdr_len;
 	size_t crypto_len;
@@ -2810,6 +2828,8 @@ static void ath12k_dp_rx_h_undecap_raw(s
 	if (!decrypted)
 		return;
 
+	ath12k_dp_rx_mld_addr_conv(ar, msdu, rx_info);
+
 	hdr = (void *)msdu->data;
 
 	/* Tail */
@@ -2921,9 +2941,10 @@ static void ath12k_dp_rx_h_undecap_eth(s
 static void ath12k_dp_rx_h_undecap(struct ath12k *ar, struct sk_buff *msdu,
 				   struct hal_rx_desc *rx_desc,
 				   enum hal_encrypt_type enctype,
-				   struct ieee80211_rx_status *status,
+				   struct ath12k_dp_rx_info *rx_info,
 				   bool decrypted)
 {
+	struct ieee80211_rx_status *status = rx_info->rx_status;
 	struct ath12k_base *ab = ar->ab;
 	u8 decap;
 	struct ethhdr *ehdr;
@@ -2935,7 +2956,7 @@ static void ath12k_dp_rx_h_undecap(struc
 		ath12k_dp_rx_h_undecap_nwifi(ar, msdu, enctype, status);
 		break;
 	case DP_RX_DECAP_TYPE_RAW:
-		ath12k_dp_rx_h_undecap_raw(ar, msdu, enctype, status,
+		ath12k_dp_rx_h_undecap_raw(ar, msdu, enctype, rx_info,
 					   decrypted);
 		break;
 	case DP_RX_DECAP_TYPE_ETHERNET2_DIX:
@@ -3183,7 +3204,7 @@ static void ath12k_dp_rx_h_mpdu(struct a
 	}
 
 	ath12k_dp_rx_h_undecap(ar, msdu, rx_desc,
-			       enctype, rx_status, is_decrypted);
+			       enctype, rx_info, is_decrypted);
 
 	if (!is_decrypted || fill_crypto_hdr)
 		return;
@@ -4098,7 +4119,7 @@ mic_fail:
 
 	ath12k_dp_rx_h_ppdu(ar, &rx_info);
 	ath12k_dp_rx_h_undecap(ar, msdu, rx_desc,
-			       HAL_ENCRYPT_TYPE_TKIP_MIC, rxs, true);
+			       HAL_ENCRYPT_TYPE_TKIP_MIC, &rx_info, true);
 	ieee80211_rx(ar->ah->hw, msdu);
 	return -EINVAL;
 }
@@ -5050,7 +5071,7 @@ static bool ath12k_dp_rx_h_tkip_mic_err(
 				     RX_FLAG_DECRYPTED);
 
 	ath12k_dp_rx_h_undecap(ar, msdu, desc,
-			       HAL_ENCRYPT_TYPE_TKIP_MIC, rx_info->rx_status, false);
+			       HAL_ENCRYPT_TYPE_TKIP_MIC, rx_info, false);
 
 exit:
 	if (!ab->stats_disable) {
