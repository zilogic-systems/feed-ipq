From 79add9d85d5a94c662eb6b2a507991b8f7844098 Mon Sep 17 00:00:00 2001
From: Sowmiya Sree Elavalagan <quic_ssreeela@quicinc.com>
Date: Sun, 3 Nov 2024 08:16:51 +0530
Subject: [PATCH] wifi: ath12k: clean up userPD id in ab

Earlier IPQ5332 and IPQ5424 was considered to rootPD, with
new implementation these are considered to first userPDs,
hence change the userPD checks. UserPD is applicable only
for AHB based buses, hence move userpd_id to ab_ahb.
Decremented userpd_id by 1 in certain places to maintain
parity with old implementation.
Also bool multi_pd_arch is removed as all devices are
multiPD, with IPQ5332/IPQ5424 being first userPD.
Also removed dump srng stats after recovery

Signed-off-by: Sowmiya Sree Elavalagan <quic_ssreeela@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c      |  7 +++---
 drivers/net/wireless/ath/ath12k/core.h     |  1 -
 drivers/net/wireless/ath/ath12k/coredump.c |  4 +++-
 drivers/net/wireless/ath/ath12k/debugfs.c  |  6 +++--
 drivers/net/wireless/ath/ath12k/pcic.c     | 28 ++++++++++++----------
 drivers/net/wireless/ath/ath12k/pcic.h     |  1 +
 drivers/net/wireless/ath/ath12k/qmi.c      | 22 ++++++++++-------
 drivers/net/wireless/ath/ath12k/qmi.h      |  2 +-
 drivers/net/wireless/ath/ath12k/reg.c      |  2 +-
 9 files changed, 41 insertions(+), 32 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -621,13 +621,14 @@ static void ath12k_ahb_power_down(struct
 static void ath12k_ahb_init_qmi_ce_config(struct ath12k_base *ab)
 {
 	struct ath12k_qmi_ce_cfg *cfg = &ab->qmi.ce_cfg;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 
 	cfg->tgt_ce_len = ab->hw_params->target_ce_count;
 	cfg->tgt_ce = ab->hw_params->target_ce_config;
 	cfg->svc_to_ce_map_len = ab->hw_params->svc_to_ce_map_len;
 	cfg->svc_to_ce_map = ab->hw_params->svc_to_ce_map;
 	ab->qmi.service_ins_id = ab->hw_params->qmi_service_ins_id;
-	ab->qmi.service_ins_id += ab->userpd_id;
+	ab->qmi.service_ins_id += ab_ahb->userpd_id - 1;
 }
 
 static void ath12k_ahb_free_ext_irq(struct ath12k_base *ab)
@@ -1737,8 +1738,7 @@ static int ath12k_ahb_probe(struct platf
 	platform_set_drvdata(pdev, ab);
 	ab_ahb = ath12k_ahb_priv(ab);
 	ab_ahb->ab = ab;
-	ab->userpd_id = userpd_id;
-	ab_ahb->userpd_id = userpd_id + 1;
+	ab_ahb->userpd_id = userpd_id;
 
 	switch (hw_rev) {
 	case ATH12K_HW_IPQ5332_HW10:
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1757,7 +1757,6 @@ struct ath12k_base {
 	struct ath12k_ppe ppe;
 #endif
 
-	int userpd_id;
 	struct {
 		const struct ath12k_msi_config *config;
 		u32 ep_base_data;
@@ -1773,8 +1772,6 @@ struct ath12k_base {
 	u32 *crash_info_address;
 	u32 *recovery_mode_address;
 
-	/* to identify multipd_architecture */
-	bool multi_pd_arch;
 	/* Mode1 specific flag to identify recovering pdev */
 	bool recovery_start;
 	bool fw_cfg_support;
--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -16,6 +16,7 @@
 #include <linux/time.h>
 #include "core.h"
 #include "coredump.h"
+#include "ahb.h"
 #include "pci.h"
 #include "mhi.h"
 #include "ahb.h"
@@ -108,6 +109,7 @@ void ath12k_coredump_build_inline(struct
 	struct ath12k_dump_file_data *file_data;
 	size_t header_size;
 	struct ath12k_pci *ar_pci = (struct ath12k_pci *)ab->drv_priv;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 	struct device *dev;
 	u8 *buf;
 
@@ -128,7 +130,7 @@ void ath12k_coredump_build_inline(struct
 	if (ab->hif.bus == ATH12K_BUS_AHB || ab->hif.bus == ATH12K_BUS_HYBRID) {
 		file_data->chip_id = ab->qmi.target.chip_id;
 		file_data->qrtr_id = ab->qmi.service_ins_id;
-		file_data->bus_id = ab->userpd_id;
+		file_data->bus_id = ab_ahb->userpd_id;
 	} else {
 		file_data->chip_id = cpu_to_le32(ar_pci->dev_id);
 		file_data->qrtr_id = cpu_to_le32(ar_pci->ab->qmi.service_ins_id);
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -18,6 +18,7 @@
 #include "peer.h"
 #include "qmi.h"
 #include "ppe.h"
+#include "ahb.h"
 #include "dp_mon.h"
 
 static struct dentry *debugfs_ath12k;
@@ -3410,13 +3411,14 @@ void ath12k_debugfs_pdev_destroy(struct
 int ath12k_debugfs_soc_create(struct ath12k_base *ab)
 {
 	char soc_name[64] = { 0 };
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 
 	if (!(IS_ERR_OR_NULL(ab->debugfs_soc)))
 		return 0;
 
-	if (ab->userpd_id) {
+	if (ab->hif.bus == ATH12K_BUS_HYBRID) {
 		snprintf(soc_name, sizeof(soc_name), "%s_%d",
-			 ab->hw_params->name, ab->userpd_id);
+			 ab->hw_params->name, ab_ahb->userpd_id - 1);
 	} else {
 		snprintf(soc_name, sizeof(soc_name), "%s_%s", ab->hw_params->name,
 			 dev_name(ab->dev));
--- a/drivers/net/wireless/ath/ath12k/pcic.c
+++ b/drivers/net/wireless/ath/ath12k/pcic.c
@@ -369,10 +369,11 @@ static int ath12k_pcic_ext_config_gic_ms
 	u32 user_base_data = 0, base_vector = 0, base_idx;
 	struct ath12k_ext_irq_grp *irq_grp;
 	int j, budget, ret = 0, num_vectors = 0;
-	u8 userpd_id;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	u8 userpd_idx;
 	u32 num_irq = 0;
 
-	userpd_id = ab->userpd_id;
+	userpd_idx = ab_ahb->userpd_id - 1;
 	base_idx = ATH12K_PCI_IRQ_CE0_OFFSET + CE_COUNT_MAX;
 	ret = ath12k_pcic_get_user_msi_assignment(ab, "DP", &num_vectors,
 						  &user_base_data, &base_vector);
@@ -430,12 +431,12 @@ static int ath12k_pcic_ext_config_gic_ms
 			netif_napi_add_weight(&irq_grp->napi_ndev, &irq_grp->napi,
 		       ath12k_pcic_ext_grp_napi_poll, budget);
 
-			scnprintf(dp_pcic_irq_name[userpd_id][i], DP_IRQ_NAME_LEN,
-				  "pcic%u_wlan_dp_%u", userpd_id, i);
+			scnprintf(dp_pcic_irq_name[userpd_idx][i], DP_IRQ_NAME_LEN,
+				  "pcic%u_wlan_dp_%u", userpd_idx, i);
 			irq_set_status_flags(msi_desc->irq, IRQ_DISABLE_UNLAZY);
 			ret = devm_request_irq(&pdev->dev, msi_desc->irq,
 					       ath12k_pcic_ext_interrupt_handler, IRQF_SHARED,
-					       dp_pcic_irq_name[userpd_id][i], irq_grp);
+					       dp_pcic_irq_name[userpd_idx][i], irq_grp);
 			if (ret) {
 				ath12k_err(ab, "failed request irq %d: %d\n", irq_idx, ret);
 				return ret;
@@ -457,7 +458,8 @@ static int ath12k_pcic_config_gic_msi_ir
 {
 	struct ath12k_ce_pipe *ce_pipe = &ab->ce.ce_pipe[i];
 	int irq_idx, ret;
-	u8 userpd_id = ab->userpd_id;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	u8 userpd_idx = ab_ahb->userpd_id - 1;
 
 	if (i >= ATH12K_QCN6432_CE_COUNT) {
 		ath12k_warn(ab, "Invalid ce count value %d", i);
@@ -467,12 +469,12 @@ static int ath12k_pcic_config_gic_msi_ir
 	tasklet_setup(&ce_pipe->intr_tq, ath12k_pcic_ce_tasklet);
 	irq_idx = ATH12K_PCI_IRQ_CE0_OFFSET + i;
 
-	scnprintf(ce_irq_name[userpd_id][irq_idx], DP_IRQ_NAME_LEN,
-		  "pci%u_wlan_ce_%u", userpd_id, i);
+	scnprintf(ce_irq_name[userpd_idx][irq_idx], DP_IRQ_NAME_LEN,
+		  "pci%u_wlan_ce_%u", userpd_idx, i);
 
 	ret = devm_request_irq(&pdev->dev, msi_desc->irq,
 			       ath12k_pcic_ce_interrupt_handler, IRQF_SHARED,
-			       ce_irq_name[userpd_id][irq_idx], ce_pipe);
+			       ce_irq_name[userpd_idx][irq_idx], ce_pipe);
 	if (ret) {
 		ath12k_warn(ab, "failed to request irq %d: %d\n", irq_idx, ret);
 		return ret;
@@ -608,7 +610,8 @@ int ath12k_pcic_ppeds_register_interrupt
 {
 
 	int ret, irq;
-	u8 bus_id = ab->userpd_id;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	u8 bus_id = ab_ahb->userpd_id - 1;
 	struct platform_device *pdev = ab->pdev;
 
 	if (ab->ppe.ppeds_soc_idx == -1) {
@@ -945,9 +948,8 @@ int ath12k_pcic_config_hybrid_irq(struct
 	int user_base_data, base_vector, num_vectors = 0;
 	int i = 0, j = 0, k = 0;
 
-	if (ab->userpd_id != USERPD_1 &&
-	    ab->userpd_id != USERPD_2) {
-		ath12k_warn(ab, "ath12k userpd invalid %d\n", ab->userpd_id);
+	if (ab->hif.bus != ATH12K_BUS_HYBRID) {
+		ath12k_warn(ab, "Invalid bus type");
 		return -ENODEV;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/pcic.h
+++ b/drivers/net/wireless/ath/ath12k/pcic.h
@@ -11,6 +11,7 @@
 #include <linux/pci.h>
 #include "core.h"
 #include "hif.h"
+#include "ahb.h"
 #include <linux/msi.h>
 
 #define ATH12K_PCI_IRQ_CE0_OFFSET		3
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -11,6 +11,7 @@
 #include "hif.h"
 #include "debug.h"
 #include "coredump.h"
+#include "ahb.h"
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/of_reserved_mem.h>
@@ -4452,6 +4453,7 @@ static int ath12k_qmi_assign_target_mem_
 	struct resource res, m3_dump;
 	int host_ddr_sz, mlo_ddr_sz, sz, mlo_sz = 0;
 	int i, idx, mlo_idx, ret;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 	unsigned int bdf_location[MAX_TGT_MEM_MODES],
 		     caldb_location[MAX_TGT_MEM_MODES],
 		     caldb_size[1];
@@ -4602,9 +4604,9 @@ skip_mlo_mem_init:
 					ab->qmi.target_mem[idx].paddr = m3_dump.start;
 				}
 			} else if (ab->hif.bus == ATH12K_BUS_HYBRID) {
-				if (ab->userpd_id == USERPD_1)
+				if (ab_ahb->userpd_id == USERPD_1)
 					dev_node = of_find_node_by_name(NULL, "m3_dump_qcn6432_1");
-				else if (ab->userpd_id == USERPD_2)
+				else if (ab_ahb->userpd_id == USERPD_2)
 					dev_node = of_find_node_by_name(NULL, "m3_dump_qcn6432_2");
 
 				if (of_address_to_resource(dev_node, 0, &m3_dump)) {
@@ -4679,9 +4681,9 @@ skip_mlo_mem_init:
 			 * AFC_REGION_TYPE is supported for 6 GHz.
 			 */
 			if (ab->hif.bus == ATH12K_BUS_HYBRID) {
-				if (ab->userpd_id == USERPD_1)
+				if (ab_ahb->userpd_id == USERPD_1)
 					dev_node = of_find_node_by_name(NULL, "m3_dump_qcn6432_1");
-				else if (ab->userpd_id == USERPD_2)
+				else if (ab_ahb->userpd_id == USERPD_2)
 					dev_node = of_find_node_by_name(NULL, "m3_dump_qcn6432_2");
 
 				if (of_address_to_resource(dev_node, 0, &m3_dump)) {
@@ -5060,6 +5062,7 @@ static int ath12k_qmi_load_bdf_qmi(struc
 	u32 fw_size, file_type;
 	int ret = 0;
 	const u8 *tmp;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 
 	memset(&bd, 0, sizeof(bd));
 
@@ -5119,10 +5122,10 @@ static int ath12k_qmi_load_bdf_qmi(struc
 
 			snprintf(filename, sizeof(filename), "%s", ATH12K_DEFAULT_CAL_FILE);
 
-			if (ab->userpd_id) {
+			if (ab->hif.bus == ATH12K_BUS_HYBRID) {
 				snprintf(filename, sizeof(filename), "%s%d%s",
 					 ATH12K_QMI_DEF_CAL_FILE_PREFIX,
-					 ab->userpd_id,
+					 ab_ahb->userpd_id - 1,
 					 ATH12K_QMI_DEF_CAL_FILE_SUFFIX);
 			}
 
@@ -5895,12 +5898,13 @@ static
 struct device_node *ath12k_get_etr_dev_node(struct ath12k_base *ab)
 {
 	struct device_node *dev_node = NULL;
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 
-	if (ab->userpd_id) {
-		if (ab->userpd_id == USERPD_1)
+	if (ab->hif.bus == ATH12K_BUS_HYBRID) {
+		if (ab_ahb->userpd_id == USERPD_1)
 			dev_node = of_find_node_by_name(NULL,
 							"q6_qcn6432_etr_1");
-		else if (ab->userpd_id == USERPD_2)
+		else if (ab_ahb->userpd_id == USERPD_2)
 			dev_node = of_find_node_by_name(NULL,
 							"q6_qcn6432_etr_2");
 	} else {
@@ -6586,7 +6590,6 @@ static void ath12k_qmi_driver_event_work
 			clear_bit(ATH12K_FLAG_QMI_FAIL, &ab->dev_flags);
 			if (test_bit(ATH12K_FLAG_QMI_FW_READY_COMPLETE,
 				     &ab->dev_flags)) {
-				ath12k_hal_dump_srng_stats(ab);
 				queue_work(ab->workqueue, &ab->restart_work);
 				break;
 			}
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -63,7 +63,7 @@ enum ath12k_target_mem_mode {
 
 /* userpd_id in multi pd arch */
 enum userpd_id {
-	USERPD_0 = 0,
+	USERPD_0 = 1,
 	USERPD_1,
 	USERPD_2,
 };
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -1313,7 +1313,7 @@ int ath12k_copy_afc_response(struct ath1
 	}
 
 	status[AFC_AUTH_STATUS_OFFSET] = cpu_to_le32(AFC_AUTH_ERROR);
-	if (ab->userpd_id) {
+	if (ab->hif.bus == ATH12K_BUS_HYBRID) {
 		memset_io(mem + (slotid * AFC_SLOT_SIZE), 0, AFC_SLOT_SIZE);
 		memcpy_toio(mem + (slotid * AFC_SLOT_SIZE), afc_resp, len);
 	} else {
