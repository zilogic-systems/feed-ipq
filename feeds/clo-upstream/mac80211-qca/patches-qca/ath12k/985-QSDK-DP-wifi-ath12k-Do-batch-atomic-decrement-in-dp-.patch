From 332abedd88d850c234c307d4cccd94b0b9c33945 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Sun, 3 Nov 2024 13:31:32 +0530
Subject: [PATCH 1/3] QSDK:DP:wifi:ath12k:Do batch atomic decrement in dp
 completion handler

Atomic operations per packet are costly in data path.
Replace it with batch atomic operation in the datapath completion
handler.

This change gives 30mbps KPI improvement in DL traffic

Patch-depdendency: None
Patch-work: None

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
Signed-off-by: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>

---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 25 +++++++++++++++++++++++--
 1 file changed, 23 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1548,6 +1548,20 @@ int ath12k_ppeds_tx_completion_handler(s
 }
 #endif
 
+static inline void ath12k_dp_tx_decrement_by_count(struct ath12k *ar,
+						   struct ath12k_base *ab,
+						   int count)
+{
+	atomic_sub(count, &ab->ag->num_dp_tx_pending);
+
+	if (atomic_read(&ar->flush_request)) {
+		if (atomic_sub_and_test(count, &ar->dp.num_tx_pending))
+			wake_up(&ar->tx_empty_waitq);
+	} else {
+		atomic_sub(count, &ar->dp.num_tx_pending);
+	}
+}
+
 int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 				    int budget)
 {
@@ -1573,9 +1587,11 @@ int ath12k_dp_tx_completion_handler(stru
 	ktime_t timestamp = 0;
 	enum hal_wbm_rel_src_module buf_rel_source;
 	struct sk_buff_head free_list_head;
-
+	int dp_tx_dec_count[MAX_RADIOS] = {0};
+	struct ath12k_pdev *pdevs = ab->pdevs;
 	struct htt_tx_wbm_completion *status_desc;
 	int htt_status;
+	int i;
 
 	INIT_LIST_HEAD(&desc_free_list);
 
@@ -1666,7 +1682,7 @@ int ath12k_dp_tx_completion_handler(stru
 
 		ar = ab->pdevs[mac_id].ar;
 
-		ath12k_dp_tx_decrement(ar);
+		dp_tx_dec_count[mac_id]++;
 
 		if (unlikely(WARN_ON_ONCE(buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM))) {
 			/* Must not happen */
@@ -1693,6 +1709,13 @@ int ath12k_dp_tx_completion_handler(stru
 	}
 	ath12k_hal_srng_access_dst_ring_end_nolock(status_ring);
 
+	for (i = 0; i < MAX_RADIOS; i++) {
+		if (!dp_tx_dec_count[i])
+			continue;
+		ar = pdevs[i].ar;
+		ath12k_dp_tx_decrement_by_count(ar,ab,dp_tx_dec_count[i]);
+	}
+
 	spin_lock_bh(&dp->tx_desc_lock[ring_id]);
 	list_for_each(cur, &desc_free_list) {
 		tx_desc = list_entry(cur, struct ath12k_tx_desc_info, list);
