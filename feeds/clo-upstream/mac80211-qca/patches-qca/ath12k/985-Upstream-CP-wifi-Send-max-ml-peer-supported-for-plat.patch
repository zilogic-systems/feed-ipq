From 4d09c0a9caeec3b9afda2639ad4f977ed390a180 Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Mon, 2 Dec 2024 09:55:28 +0530
Subject: [PATCH] Upstream:CP:wifi: Send max ml peer supported for platform.

In existing mechanism, host sends maximum number of ML peers
as 256 for all platform through QMI. Platforms with QCN9724
can support up to 512 clients per radio, while others like IPQ5332
can support only 256. In mixed environments (e.g., QCN9724+IPQ5332),
firmware should be informed of the minimum supported ML peer count.

Firmware will send the max ML peer that it can support for each chip
through firmware ready. Host should calculate the minimum of the shared
values and send the information to firmware through MLO setup complete
WMI cmd.

Patch-dependency: 670-02-ath12k-Add-mlo-wmi-setup-apis.patch
		  670-03-ath12k-Setup-MLO-link.patch

Note: Depends on firmware change to send the max ml peer count in
firmware ready event.

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 8 +++++++-
 drivers/net/wireless/ath/ath12k/wmi.c | 2 ++
 2 files changed, 9 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11650,6 +11650,7 @@ static int __ath12k_mac_mlo_setup(struct
 	u8 num_link = 0, partner_link_id[ATH12K_GROUP_MAX_RADIO] = { 0 };
 	int chip_idx, pdev_idx, ret;
 	unsigned long time_left;
+	u32 max_ml_peers = ab->max_ml_peer_supported;
 
 	lockdep_assert_held(&ag->mutex_lock);
 
@@ -11657,6 +11658,9 @@ static int __ath12k_mac_mlo_setup(struct
 	for (chip_idx = 0; chip_idx < ag->num_chip; chip_idx++) {
 		partner_ab = ag->ab[chip_idx];
 
+		if ((ab != partner_ab) && (max_ml_peers > partner_ab->max_ml_peer_supported))
+			max_ml_peers = min(max_ml_peers, partner_ab->max_ml_peer_supported);
+
 		for (pdev_idx = 0; pdev_idx < partner_ab->num_radios; pdev_idx++) {
 			pdev = &partner_ab->pdevs[pdev_idx];
 
@@ -11676,9 +11680,11 @@ static int __ath12k_mac_mlo_setup(struct
 	mlo_params.group_id = ag->id;
 	mlo_params.partner_link_id = partner_link_id;
 	mlo_params.num_partner_links = num_link;
+	mlo_params.max_ml_peer_supported = max_ml_peers;
 	ar->mlo_setup_status = 0;
 
-	ath12k_dbg(ab, ATH12K_DBG_MAC, "grp id %d num_link %d\n", ag->id, num_link);
+	ath12k_dbg(ab, ATH12K_DBG_MAC, "grp id %d num_link %d max_ml_peers:%d\n",
+		   ag->id, num_link, max_ml_peers);
 
 	ret = ath12k_wmi_mlo_setup(ar, &mlo_params);
 	if (ret) {
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -10161,6 +10161,7 @@ static int ath12k_wmi_rdy_parse(struct a
 		ab->wmi_ready = true;
 		ab->peer_list_size = fixed_param.ready_event_min.num_total_peers +
 				     fixed_param.ready_event_min.num_extra_peers;
+		ab->max_ml_peer_supported = fixed_param.max_num_ml_peers;
 		break;
 	case WMI_TAG_ARRAY_FIXED_STRUCT:
 		addr_list = (struct ath12k_wmi_mac_addr_params *)ptr;
@@ -16762,6 +16763,7 @@ int ath12k_wmi_mlo_setup(struct ath12k *
 			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
 	cmd->mld_group_id = mlo_params->group_id;
 	cmd->pdev_id = ar->pdev->pdev_id;
+	cmd->max_num_ml_peers = mlo_params->max_ml_peer_supported;
 
 	tlv = (struct wmi_tlv *)(skb->data + sizeof(*cmd));
 	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_UINT32) |
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1786,6 +1786,8 @@ struct ath12k_base {
 	struct wsi_info wsi_info;
 	u32 dp_mon_alloc_cnt;
 	u32 dp_mon_alloc_fail_cnt;
+	/* Number of ML peers supported by firmware */
+	u32 max_ml_peer_supported;
 
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3343,6 +3343,10 @@ struct wmi_ready_event {
 	struct ath12k_wmi_ready_event_min_params ready_event_min;
 	__le32 max_ast_index;
 	__le32 pktlog_defs_checksum;
+	__le32 max_onchip_ast_index;
+	__le32 num_of_linkview_peers;
+	__le32 num_max_active_vdevs;
+	__le32 max_num_ml_peers;
 } __packed;
 
 struct wmi_service_available_event {
@@ -8732,12 +8736,14 @@ struct wmi_mlo_setup_cmd_fixed_param {
 	u32 tlv_header;
 	u32 mld_group_id;
 	u32 pdev_id;
+	u32 max_num_ml_peers;
 } __packed;
 
 struct wmi_mlo_setup_params {
 	u32 group_id;
 	u8 num_partner_links;
 	u8 *partner_link_id;
+	u32 max_ml_peer_supported;
 };
 
 struct wmi_mlo_ready_cmd_fixed_param {
