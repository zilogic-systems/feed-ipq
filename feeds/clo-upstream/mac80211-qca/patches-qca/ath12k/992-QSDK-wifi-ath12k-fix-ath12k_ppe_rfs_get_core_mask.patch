From 59ee79b4bbe4e58ed3a9f2064dda089e502e010a Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Wed, 6 Nov 2024 16:20:08 +0530
Subject: [PATCH] QSDK:wifi:ath12k:fix ath12k_ppe_rfs_get_core_mask

All the coremask macros point to the default core mask value.
Hence just return the default core mask value.

Fixes : 59fb2fa73f48 ('wifi: mac80211/ath12k: clean up bonded model for Direct Switching')

Patch-depdendency: 900-a-wifi-ath12k-clean-up-bonded-model.patch
Patch-work: None

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ppe.c | 29 ++++-----------------------
 drivers/net/wireless/ath/ath12k/ppe.h |  2 +-
 2 files changed, 5 insertions(+), 26 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/ppe.c b/drivers/net/wireless/ath/ath12k/ppe.c
index b8da68c..95175cc 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1556,30 +1556,9 @@ void ath12k_dp_srng_ppeds_cleanup(struct ath12k_base *ab)
 	ath12k_dp_srng_cleanup(ab, &dp->ppeds_comp_ring.ppe_wbm2sw_ring);
 }
 
-int ath12k_ppe_rfs_get_core_mask(struct ath12k_vif *ahvif)
+int ath12k_ppe_rfs_get_core_mask(void)
 {
-	struct ath12k_pdev *pdev;
-	struct ath12k *ar = ahvif->ah->radio;
-	int core_mask;
-
-	/* MLO case */
-	if (ath12k_mlo_capable)
-		return ATH12K_PPE_DEFAULT_CORE_MASK;
-
-	/* SLO case */
-	pdev = ar->pdev;
-	if (pdev->cap.supported_bands & WMI_HOST_WLAN_2G_CAP)
-		core_mask = ATH12K_PPE_RFS_2GHZ_CORE_MASK;
-	else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP &&
-		 !ar->supports_6ghz)
-		core_mask = ATH12K_PPE_RFS_5GHZ_CORE_MASK;
-	else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP &&
-		 ar->supports_6ghz)
-		core_mask = ATH12K_PPE_RFS_6GHZ_CORE_MASK;
-	else
-		core_mask = ATH12K_PPE_DEFAULT_CORE_MASK;
-
-	return core_mask;
+	return ATH12K_PPE_DEFAULT_CORE_MASK;
 }
 
 /* User is expected to flush ecm entries before changing core mask */
@@ -1675,7 +1654,7 @@ int ath12k_vif_update_vp_config(struct ath12k_vif *ahvif, int ppe_vp_type)
 	/* Direct Switching */
 	switch (ppe_vp_type) {
 	case PPE_VP_USER_TYPE_PASSIVE:
-		vpui.core_mask = ath12k_ppe_rfs_get_core_mask(ahvif);
+		vpui.core_mask = ath12k_ppe_rfs_get_core_mask();
 		break;
 	case PPE_VP_USER_TYPE_DS:
 	case PPE_VP_USER_TYPE_ACTIVE:
@@ -1764,7 +1743,7 @@ int ath12k_vif_alloc_vp(struct ath12k_vif *ahvif, int ppe_vp_type, int *core_mas
 		if (core_mask)
 			vpai.core_mask = *core_mask;
 		else
-			vpai.core_mask = ath12k_ppe_rfs_get_core_mask(ahvif);
+			vpai.core_mask = ath12k_ppe_rfs_get_core_mask();
 
 		ppe_vp_num = ppe_vp_alloc(dev, &vpai);
 		break;
diff --git a/drivers/net/wireless/ath/ath12k/ppe.h b/drivers/net/wireless/ath/ath12k/ppe.h
index 8ec7631..1855a21 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -28,7 +28,7 @@ struct ath12k_vlan_iface;
 extern bool ath12k_ppe_rfs_support;
 extern unsigned int ath12k_mlo_capable;
 
-int ath12k_ppe_rfs_get_core_mask(struct ath12k_vif *ahvif);
+int ath12k_ppe_rfs_get_core_mask(void);
 int ath12k_change_core_mask_for_ppe_rfs(struct ath12k_base *ab,
 					struct ath12k_vif *ahvif,
 					int core_mask);
-- 
2.34.1

