--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -31,6 +31,8 @@
 #include "reg.h"
 #include "rdev-ops.h"
 
+#define VLAN_N_VID	4096
+
 static int nl80211_crypto_settings(struct cfg80211_registered_device *rdev,
 				   struct genl_info *info,
 				   struct cfg80211_crypto_settings *settings,
@@ -14915,7 +14917,7 @@ static int nl80211_vendor_check_policy(c
 		return -EINVAL;
 	}
 
-	return nla_validate_nested(attr, vcmd->maxattr, vcmd->policy, extack);
+	return 0;
 }
 
 static int nl80211_vendor_cmd(struct sk_buff *skb, struct genl_info *info)
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4247,8 +4247,6 @@ struct ieee80211_prep_tx_info {
  *	radar channel.
  *	The caller is expected to set chandef pointer to NULL in order to
  *	disable background CAC/radar detection.
- * @net_fill_forward_path: Called from .ndo_fill_forward_path in order to
- *	resolve a path for hardware flow offloading
  * @change_vif_links: Change the valid links on an interface, note that while
  *	removing the old link information is still valid (link_conf pointer),
  *	but may immediately disappear after the function returns. The old or
@@ -4620,11 +4618,6 @@ struct ieee80211_ops {
 				     struct ieee80211_sta *sta, u8 flowid);
 	int (*set_radar_background)(struct ieee80211_hw *hw,
 				    struct cfg80211_chan_def *chandef);
-	int (*net_fill_forward_path)(struct ieee80211_hw *hw,
-				     struct ieee80211_vif *vif,
-				     struct ieee80211_sta *sta,
-				     struct net_device_path_ctx *ctx,
-				     struct net_device_path *path);
 	int (*change_vif_links)(struct ieee80211_hw *hw,
 				struct ieee80211_vif *vif,
 				u16 old_links, u16 new_links,
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -872,64 +872,6 @@ static const struct net_device_ops ieee8
 	.ndo_get_stats64	= ieee80211_get_stats64,
 };
 
-static int ieee80211_netdev_fill_forward_path(struct net_device_path_ctx *ctx,
-					      struct net_device_path *path)
-{
-	struct ieee80211_sub_if_data *sdata;
-	struct ieee80211_local *local;
-	struct sta_info *sta;
-	int ret = -ENOENT;
-
-	sdata = IEEE80211_DEV_TO_SUB_IF(ctx->dev);
-	local = sdata->local;
-
-	if (!local->ops->net_fill_forward_path)
-		return -EOPNOTSUPP;
-
-	rcu_read_lock();
-	switch (sdata->vif.type) {
-	case NL80211_IFTYPE_AP_VLAN:
-		sta = rcu_dereference(sdata->u.vlan.sta);
-		if (sta)
-			break;
-		if (sdata->wdev.use_4addr)
-			goto out;
-		if (is_multicast_ether_addr(ctx->daddr))
-			goto out;
-		sta = sta_info_get_bss(sdata, ctx->daddr);
-		break;
-	case NL80211_IFTYPE_AP:
-		if (is_multicast_ether_addr(ctx->daddr))
-			goto out;
-		sta = sta_info_get(sdata, ctx->daddr);
-		break;
-	case NL80211_IFTYPE_STATION:
-		if (sdata->wdev.wiphy->flags & WIPHY_FLAG_SUPPORTS_TDLS) {
-			sta = sta_info_get(sdata, ctx->daddr);
-			if (sta && test_sta_flag(sta, WLAN_STA_TDLS_PEER)) {
-				if (!test_sta_flag(sta, WLAN_STA_TDLS_PEER_AUTH))
-					goto out;
-
-				break;
-			}
-		}
-
-		sta = sta_info_get(sdata, sdata->deflink.u.mgd.bssid);
-		break;
-	default:
-		goto out;
-	}
-
-	if (!sta)
-		goto out;
-
-	ret = drv_net_fill_forward_path(local, sdata, &sta->sta, ctx, path);
-out:
-	rcu_read_unlock();
-
-	return ret;
-}
-
 static const struct net_device_ops ieee80211_dataif_8023_ops = {
 	.ndo_open		= ieee80211_open,
 	.ndo_stop		= ieee80211_stop,
@@ -938,7 +880,6 @@ static const struct net_device_ops ieee8
 	.ndo_set_rx_mode	= ieee80211_set_multicast_list,
 	.ndo_set_mac_address	= ieee80211_change_mac,
 	.ndo_get_stats64	= ieee80211_get_stats64,
-	.ndo_fill_forward_path	= ieee80211_netdev_fill_forward_path,
 	.ndo_setup_tc		= ieee80211_netdev_setup_tc,
 };
 
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1497,28 +1497,6 @@ static inline void drv_twt_teardown_requ
 	trace_drv_return_void(local);
 }
 
-static inline int drv_net_fill_forward_path(struct ieee80211_local *local,
-					    struct ieee80211_sub_if_data *sdata,
-					    struct ieee80211_sta *sta,
-					    struct net_device_path_ctx *ctx,
-					    struct net_device_path *path)
-{
-	int ret = -EOPNOTSUPP;
-
-	sdata = get_bss_sdata(sdata);
-	if (!check_sdata_in_driver(sdata))
-		return -EIO;
-
-	trace_drv_net_fill_forward_path(local, sdata, sta);
-	if (local->ops->net_fill_forward_path)
-		ret = local->ops->net_fill_forward_path(&local->hw,
-							&sdata->vif, sta,
-							ctx, path);
-	trace_drv_return_int(local, ret);
-
-	return ret;
-}
-
 static inline int drv_net_setup_tc(struct ieee80211_local *local,
 				   struct ieee80211_sub_if_data *sdata,
 				   struct net_device *dev,
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -2480,13 +2480,6 @@ TRACE_EVENT(drv_twt_teardown_request,
 	)
 );
 
-DEFINE_EVENT(sta_event, drv_net_fill_forward_path,
-	TP_PROTO(struct ieee80211_local *local,
-		 struct ieee80211_sub_if_data *sdata,
-		 struct ieee80211_sta *sta),
-	TP_ARGS(local, sdata, sta)
-);
-
 TRACE_EVENT(drv_net_setup_tc,
 	TP_PROTO(struct ieee80211_local *local,
 		 struct ieee80211_sub_if_data *sdata,
--- a/backport-include/linux/netdevice.h
+++ b/backport-include/linux/netdevice.h
@@ -70,6 +70,9 @@ static inline void netif_trans_update(st
 	(_dev)->needs_free_netdev = true;
 #endif
 
+#define netdev_tstats(dev)  dev->tstats
+#define netdev_assign_tstats(dev, e)    dev->tstats = (e);
+
 #if LINUX_VERSION_IS_LESS(4,15,0)
 static inline int _bp_netdev_upper_dev_link(struct net_device *dev,
 					    struct net_device *upper_dev)
