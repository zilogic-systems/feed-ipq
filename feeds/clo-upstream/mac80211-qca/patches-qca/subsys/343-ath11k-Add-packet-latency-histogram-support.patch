From f2efdde9e7e7e0ccecf86f1a44c1cda28812aada Mon Sep 17 00:00:00 2001
From: Sowmiya Sree Elavalagan <quic_ssreeela@quicinc.com>
Date: Mon, 6 Sep 2021 19:57:33 +0530
Subject: [PATCH] ath11k: Add packet latency histogram support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The latency of a packet is measured from packet being enqueued
to the driver's transmit queue, to frame has been successfully
ackâ€™ed by the receiver. Enqueue time is added in tx info and
difference in time is calculated once the packet is acked by
the receiver. Latency is calculated in powers of 2 and number
of packets that took a particular time is incremented in the
corresponding index and displayed via debugfs

Signed-off-by: Sowmiya Sree Elavalagan <quic_ssreeela@quicinc.com>
Signed-off-by: Gautham Kumar Senthilkumaran <quic_gauthamk@quicinc.com>
---
 include/net/mac80211.h                    |  13 ++-
 net/mac80211/tx.c                         |  12 +++
 2 files changed, 24 insertions(+), 1 deletion(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1194,7 +1194,6 @@ struct ieee80211_tx_info {
 	    hw_queue:4,
 	    tx_time_est:10;
 	/* 2 free bits */
-
 	union {
 		struct {
 			union {
@@ -1241,9 +1240,21 @@ struct ieee80211_tx_info {
 		};
 		void *driver_data[
 			IEEE80211_TX_INFO_DRIVER_DATA_SIZE / sizeof(void *)];
+	struct {
+		u8 pad[36];
+		u32 tx_start_time;
+	} latency;
 	};
 };
 
+#define IEEE80211_TX_DELAY_SHIFT	10
+static inline u32 ieee80211_txdelay_get_time(void)
+{
+	u64 ns = ktime_get_ns();
+
+	return ns >> IEEE80211_TX_DELAY_SHIFT;
+}
+
 static inline u16
 ieee80211_info_set_tx_time_est(struct ieee80211_tx_info *info, u16 tx_time_est)
 {
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -1669,6 +1669,7 @@ static bool ieee80211_queue_skb(struct i
 				struct sta_info *sta,
 				struct sk_buff *skb)
 {
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ieee80211_vif *vif;
 	struct txq_info *txqi;
 
@@ -1687,6 +1688,9 @@ static bool ieee80211_queue_skb(struct i
 
 	ieee80211_txq_enqueue(local, txqi, skb);
 
+	if (local->enable_tx_latency_stats)
+		info->latency.tx_start_time =  ieee80211_txdelay_get_time();
+
 	schedule_and_wake_txq(local, txqi);
 
 	return true;
@@ -1759,6 +1763,9 @@ static bool ieee80211_tx_frags(struct ie
 		control.sta = sta ? &sta->sta : NULL;
 
 		__skb_unlink(skb, skbs);
+		if (local->enable_tx_latency_stats)
+			info->latency.tx_start_time =  ieee80211_txdelay_get_time();
+
 		drv_tx(local, &control, skb);
 	}
 
@@ -4740,6 +4747,9 @@ static bool __ieee80211_tx_8023(struct i
 
 	control.sta = pubsta;
 
+	if (local->enable_tx_latency_stats)
+		info->latency.tx_start_time =  ieee80211_txdelay_get_time();
+
 	drv_tx(local, &control, skb);
 
 	if (sta)
@@ -4835,6 +4845,8 @@ static void ieee80211_8023_xmit(struct i
 
 	info->flags |= IEEE80211_TX_CTL_HW_80211_ENCAP;
 	info->control.vif = &sdata->vif;
+	if (local->enable_tx_latency_stats)
+		info->latency.tx_start_time =  ieee80211_txdelay_get_time();
 
 	if (key)
 		info->control.hw_key = &key->conf;
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1624,6 +1624,8 @@ struct ieee80211_local {
 	struct work_struct awgn_detected_work;
 	u32 chan_bw_interference_bitmap;
 
+	bool enable_tx_latency_stats;
+
 	/* extended capabilities provided by mac80211 */
 	u8 ext_capa[8];
 };
--- a/net/mac80211/debugfs.c
+++ b/net/mac80211/debugfs.c
@@ -449,6 +449,41 @@ static const struct file_operations dbg_
 	.llseek = default_llseek,
 };
 
+static ssize_t enable_tx_latency_stats_read(struct file *file, char __user *user_buf,
+			     size_t count, loff_t *ppos)
+{
+	struct ieee80211_local *local = file->private_data;
+	char buf[10];
+	int len = 0;
+
+	len = scnprintf(buf, sizeof(buf), "%u\n", local->enable_tx_latency_stats);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t enable_tx_latency_stats_write(struct file *file, const char __user *user_buf,
+			      size_t count, loff_t *ppos)
+{
+	struct ieee80211_local *local = file->private_data;
+	int ret, enable_disable;
+
+	ret = kstrtou32_from_user(user_buf, count, 0, &enable_disable);
+	if (ret || (enable_disable != 1 && enable_disable != 0))
+		return -EINVAL;
+
+	local->enable_tx_latency_stats = enable_disable;
+
+	return count;
+}
+
+
+static const struct file_operations enable_tx_latency_stats_ops = {
+	.write = enable_tx_latency_stats_write,
+	.read = enable_tx_latency_stats_read,
+	.open = simple_open,
+	.llseek = default_llseek,
+};
+
 #ifdef CONFIG_PM
 static ssize_t reset_write(struct file *file, const char __user *user_buf,
 			   size_t count, loff_t *ppos)
@@ -705,6 +740,7 @@ void debugfs_hw_add(struct ieee80211_loc
 	DEBUGFS_ADD(aql_pending);
 	DEBUGFS_ADD(dbg_mask);
 	DEBUGFS_ADD_MODE(aqm, 0600);
+	DEBUGFS_ADD(enable_tx_latency_stats);
 
 	DEBUGFS_ADD_MODE(airtime_flags, 0600);
 
