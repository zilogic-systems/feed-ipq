From c1a7e33579502c0fdf4a7dd7f4f3529d21769e0c Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 16 Feb 2022 16:15:05 -0800
Subject: [PATCH 26/27] ath12k: 802.11be bring-up fixes for D1.3 compatibility

Current mac80211 upstream version uses IEEE P802.11be/D1.4 while
we are still using IEEE P802.11be/D1.3 devices. This is a
temporary workaround to change EHT Capability IE len matching
IEEE P802.11be/D1.3 specification.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 12 ------------
 include/linux/ieee80211.h             | 23 +++++++++++++----------
 include/uapi/linux/nl80211.h          |  2 +-
 net/mac80211/cfg.c                    |  2 +-
 net/mac80211/eht.c                    |  3 ++-
 net/mac80211/mlme.c                   |  2 +-
 6 files changed, 18 insertions(+), 26 deletions(-)

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -3029,14 +3029,16 @@ ieee80211_eht_mcs_nss_size(const struct
 {
 	u8 count = 0;
 
-	/* on 2.4 GHz, if it supports 40 MHz, the result is 3 */
-	if (he_cap->phy_cap_info[0] &
-	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_IN_2G)
-		return 3;
-
-	/* on 2.4 GHz, these three bits are reserved, so should be 0 */
-	if (he_cap->phy_cap_info[0] &
-	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G)
+	if ((he_cap->phy_cap_info[0] &
+	    (IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_IN_2G |
+	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G |
+	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G |
+	    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)) == 0)
+		return 4;
+
+	if ((he_cap->phy_cap_info[0] &
+	    (IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_IN_2G |
+	     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G)))
 		count += 3;
 
 	if (he_cap->phy_cap_info[0] &
@@ -3102,7 +3104,8 @@ ieee80211_eht_capa_size_ok(const u8 *he_
 		return false;
 
 	if (elem->phy_cap_info[5] &
-			IEEE80211_EHT_PHY_CAP5_PPE_THRESHOLD_PRESENT) {
+			IEEE80211_EHT_PHY_CAP5_PPE_THRESHOLD_PRESENT &&
+	    len > needed) {
 		u16 ppe_thres_hdr;
 
 		if (len < needed + sizeof(ppe_thres_hdr))
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -37,7 +37,8 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 
 	/* Calculate the PPE thresholds length only if the header is present */
 	if (eht_cap_ie_elem->fixed.phy_cap_info[5] &
-			IEEE80211_EHT_PHY_CAP5_PPE_THRESHOLD_PRESENT) {
+			IEEE80211_EHT_PHY_CAP5_PPE_THRESHOLD_PRESENT &&
+	    eht_cap_len > eht_total_size) {
 		u16 eht_ppe_hdr;
 
 		if (eht_cap_len < eht_total_size + sizeof(u16))
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -4252,7 +4252,7 @@ static bool ieee80211_assoc_config_link(
 		*changed |= ieee80211_recalc_twt_req(sdata, sband, link,
 						     link_sta, elems);
 
-		if (elems->eht_operation && elems->eht_cap &&
+		if (elems->eht_cap &&
 		    !(link->u.mgd.conn_flags & IEEE80211_CONN_DISABLE_EHT)) {
 			ieee80211_eht_cap_ie_to_sta_eht_cap(sdata, sband,
 							    elems->he_cap,
