From 369c67787c1106a176582913d1d211be2ac31877 Mon Sep 17 00:00:00 2001
From: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
Date: Tue, 23 Nov 2021 18:19:03 +0530
Subject: [PATCH] mac80211: add EHT support for mesh

Add support for EHT capability, operation information element parsing
and advertisement in mesh beacon, probe responses, and peering action
frames.

Update EHT support configurations based on the parsed elements.

Filter capabilities reported by the firmware based on mesh needs
and remove the capabilities not required for mesh.

Signed-off-by: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -4141,6 +4141,12 @@ struct ieee80211_multiple_bssid_configur
 #define WLAN_OUI_TYPE_MICROSOFT_WPS	4
 #define WLAN_OUI_TYPE_MICROSOFT_TPC	8
 
+#define IEEE80211_EHT_OPER_CTRL_CHANWIDTH_20MHZ        0
+#define IEEE80211_EHT_OPER_CTRL_CHANWIDTH_40MHZ        1
+#define IEEE80211_EHT_OPER_CTRL_CHANWIDTH_80MHZ        2
+#define IEEE80211_EHT_OPER_CTRL_CHANWIDTH_160MHZ       3
+#define IEEE80211_EHT_OPER_CTRL_CHANWIDTH_320MHZ       4
+
 /*
  * WMM/802.11e Tspec Element
  */
--- a/net/mac80211/mesh.c
+++ b/net/mac80211/mesh.c
@@ -741,6 +741,7 @@ ieee80211_mesh_update_bss_params(struct
 	struct ieee80211_supported_band *sband;
 	const struct element *cap;
 	const struct ieee80211_he_operation *he_oper = NULL;
+	const struct ieee80211_eht_operation *eht_oper = NULL;
 
 	sband = ieee80211_get_sband(sdata);
 	if (!sband)
@@ -763,6 +764,15 @@ ieee80211_mesh_update_bss_params(struct
 		sdata->vif.bss_conf.he_oper.params =
 			__le32_to_cpu(he_oper->he_oper_params);
 
+	if (!ieee80211_get_eht_iftype_cap(sband, NL80211_IFTYPE_MESH_POINT))
+		return;
+
+	sdata->vif.bss_conf.eht_support = true;
+
+	cap = cfg80211_find_ext_elem(WLAN_EID_EXT_EHT_OPERATION, ie, ie_len);
+	if (cap && ieee80211_eht_oper_size_ok(cap, cap->datalen))
+		eht_oper = (void *)(cap->data + 1);
+
 	sdata->vif.bss_conf.eht_support =
 		!!ieee80211_get_eht_iftype_cap(sband, NL80211_IFTYPE_MESH_POINT);
 }
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -3350,6 +3350,7 @@ u8 *ieee80211_ie_build_ht_oper(u8 *pos,
 	ht_oper->primary_chan = ieee80211_frequency_to_channel(
 					chandef->chan->center_freq);
 	switch (chandef->width) {
+	case NL80211_CHAN_WIDTH_320:
 	case NL80211_CHAN_WIDTH_160:
 	case NL80211_CHAN_WIDTH_80P80:
 	case NL80211_CHAN_WIDTH_80:
@@ -3359,10 +3360,6 @@ u8 *ieee80211_ie_build_ht_oper(u8 *pos,
 		else
 			ht_oper->ht_param = IEEE80211_HT_PARAM_CHA_SEC_BELOW;
 		break;
-	case NL80211_CHAN_WIDTH_320:
-		/* HT information element should not be included on 6GHz */
-		WARN_ON(1);
-		return pos;
 	default:
 		ht_oper->ht_param = IEEE80211_HT_PARAM_CHA_SEC_NONE;
 		break;
@@ -3422,19 +3419,31 @@ u8 *ieee80211_ie_build_vht_oper(u8 *pos,
 				const struct cfg80211_chan_def *chandef)
 {
 	struct ieee80211_vht_operation *vht_oper;
+	struct cfg80211_chan_def tmp_chandef;
+
+	cfg80211_chandef_create(&tmp_chandef, chandef->chan, NL80211_CHAN_NO_HT);
+	tmp_chandef.center_freq1 = chandef->center_freq1;
+	tmp_chandef.center_freq2 = chandef->center_freq2;
+	tmp_chandef.width = chandef->width;
 
 	*pos++ = WLAN_EID_VHT_OPERATION;
 	*pos++ = sizeof(struct ieee80211_vht_operation);
 	vht_oper = (struct ieee80211_vht_operation *)pos;
 	vht_oper->center_freq_seg0_idx = ieee80211_frequency_to_channel(
-							chandef->center_freq1);
-	if (chandef->center_freq2)
+							tmp_chandef.center_freq1);
+	if (tmp_chandef.center_freq2)
 		vht_oper->center_freq_seg1_idx =
-			ieee80211_frequency_to_channel(chandef->center_freq2);
+			ieee80211_frequency_to_channel(tmp_chandef.center_freq2);
 	else
 		vht_oper->center_freq_seg1_idx = 0x00;
 
-	switch (chandef->width) {
+	switch (tmp_chandef.width) {
+	case NL80211_CHAN_WIDTH_320:
+		/* Downgrade EHT 320 MHz BW to 160 MHz for VHT & set new center_freq1 */
+		ieee80211_chandef_downgrade(&tmp_chandef);
+		vht_oper->center_freq_seg0_idx =
+			ieee80211_frequency_to_channel(tmp_chandef.center_freq1);
+		fallthrough;
 	case NL80211_CHAN_WIDTH_160:
 		/*
 		 * Convert 160 MHz channel width to new style as interop
@@ -3442,7 +3451,7 @@ u8 *ieee80211_ie_build_vht_oper(u8 *pos,
 		 */
 		vht_oper->chan_width = IEEE80211_VHT_CHANWIDTH_80MHZ;
 		vht_oper->center_freq_seg1_idx = vht_oper->center_freq_seg0_idx;
-		if (chandef->chan->center_freq < chandef->center_freq1)
+		if (tmp_chandef.chan->center_freq < tmp_chandef.center_freq1)
 			vht_oper->center_freq_seg0_idx -= 8;
 		else
 			vht_oper->center_freq_seg0_idx += 8;
@@ -3457,10 +3466,6 @@ u8 *ieee80211_ie_build_vht_oper(u8 *pos,
 	case NL80211_CHAN_WIDTH_80:
 		vht_oper->chan_width = IEEE80211_VHT_CHANWIDTH_80MHZ;
 		break;
-	case NL80211_CHAN_WIDTH_320:
-		/* VHT information element should not be included on 6GHz */
-		WARN_ON(1);
-		return pos;
 	default:
 		vht_oper->chan_width = IEEE80211_VHT_CHANWIDTH_USE_HT;
 		break;
@@ -3478,6 +3483,7 @@ u8 *ieee80211_ie_build_he_oper(u8 *pos,
 	struct ieee80211_he_6ghz_oper *he_6ghz_op;
 	u32 he_oper_params;
 	u8 ie_len = 1 + sizeof(struct ieee80211_he_operation);
+	struct cfg80211_chan_def tmp_chandef;
 
 	if (chandef->chan->band == NL80211_BAND_6GHZ)
 		ie_len += sizeof(struct ieee80211_he_6ghz_oper);
@@ -3507,27 +3513,30 @@ u8 *ieee80211_ie_build_he_oper(u8 *pos,
 	if (chandef->chan->band != NL80211_BAND_6GHZ)
 		goto out;
 
+	cfg80211_chandef_create(&tmp_chandef, chandef->chan, NL80211_CHAN_NO_HT);
+	tmp_chandef.center_freq1 = chandef->center_freq1;
+	tmp_chandef.center_freq2 = chandef->center_freq2;
+	tmp_chandef.width = chandef->width;
 	/* TODO add VHT operational */
 	he_6ghz_op = (struct ieee80211_he_6ghz_oper *)pos;
 	he_6ghz_op->minrate = 6; /* 6 Mbps */
 	he_6ghz_op->primary =
-		ieee80211_frequency_to_channel(chandef->chan->center_freq);
+		ieee80211_frequency_to_channel(tmp_chandef.chan->center_freq);
 	he_6ghz_op->ccfs0 =
-		ieee80211_frequency_to_channel(chandef->center_freq1);
-	if (chandef->center_freq2)
+		ieee80211_frequency_to_channel(tmp_chandef.center_freq1);
+	if (tmp_chandef.center_freq2)
 		he_6ghz_op->ccfs1 =
-			ieee80211_frequency_to_channel(chandef->center_freq2);
+			ieee80211_frequency_to_channel(tmp_chandef.center_freq2);
 	else
 		he_6ghz_op->ccfs1 = 0;
 
-	switch (chandef->width) {
+	switch (tmp_chandef.width) {
 	case NL80211_CHAN_WIDTH_320:
-		/*
-		 * TODO: mesh operation is not defined over 6GHz 320 MHz
-		 * channels.
-		 */
-		WARN_ON(1);
-		break;
+		/* Downgrade EHT 320 MHz BW to 160 MHz for HE & set new center_freq1 */
+		ieee80211_chandef_downgrade(&tmp_chandef);
+		he_6ghz_op->ccfs0 =
+			ieee80211_frequency_to_channel(tmp_chandef.center_freq1);
+		fallthrough;
 	case NL80211_CHAN_WIDTH_160:
 		/* Convert 160 MHz channel width to new style as interop
 		 * workaround.
@@ -3535,7 +3544,7 @@ u8 *ieee80211_ie_build_he_oper(u8 *pos,
 		he_6ghz_op->control =
 			IEEE80211_HE_6GHZ_OPER_CTRL_CHANWIDTH_160MHZ;
 		he_6ghz_op->ccfs1 = he_6ghz_op->ccfs0;
-		if (chandef->chan->center_freq < chandef->center_freq1)
+		if (tmp_chandef.chan->center_freq < tmp_chandef.center_freq1)
 			he_6ghz_op->ccfs0 -= 8;
 		else
 			he_6ghz_op->ccfs0 += 8;
@@ -3630,7 +3639,15 @@ u8 *ieee80211_ie_build_eht_oper(u8 *pos,
 	eht_oper_info->control = chan_width;
 	pos += eht_oper_info_len;
 
-	/* TODO: eht_oper_info->optional */
+	eht_oper->params |= IEEE80211_EHT_OPER_INFO_PRESENT;
+
+	eht_oper_info->ccfs0 =
+	       ieee80211_frequency_to_channel(chandef->center_freq1);
+	eht_oper_info->ccfs1 = 0; /* How to get this? */
+
+	eht_oper->optional[0] = eht_oper_info->control;
+	eht_oper->optional[1] = eht_oper_info->ccfs0;
+	eht_oper->optional[2] = eht_oper_info->ccfs1;
 
 	return pos;
 }
