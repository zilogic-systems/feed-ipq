From f06e590b8cee24b65dbad3259f84a457d16e303e Mon Sep 17 00:00:00 2001
From: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
Date: Wed, 18 May 2022 10:24:58 +0530
Subject: [PATCH] mac80211: Add the support for Green AP

Adds the mac80211 changes for support the Green AP

Signed-off-by: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
---
 drivers/net/wireless/ath/ath6kl/cfg80211.c  |  8 ++++----
 drivers/net/wireless/ath/wil6210/cfg80211.c |  9 +++++----
 include/net/mac80211.h                      |  6 +++++-
 net/mac80211/cfg.c                          | 21 ++++++++++++++++-----
 net/mac80211/debugfs.c                      |  1 +
 5 files changed, 31 insertions(+), 14 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -321,7 +321,7 @@ struct ieee80211_vif_chanctx_switch {
  * @BSS_CHANGED_IDLE: Idle changed for this BSS/interface.
  * @BSS_CHANGED_SSID: SSID changed for this BSS (AP and IBSS mode)
  * @BSS_CHANGED_AP_PROBE_RESP: Probe Response changed for this BSS (AP mode)
- * @BSS_CHANGED_PS: PS changed for this BSS (STA mode)
+ * @BSS_CHANGED_PS: PS changed for this BSS (both AP and STA mode)
  * @BSS_CHANGED_TXPOWER: TX power setting changed for this interface
  * @BSS_CHANGED_P2P_PS: P2P powersave settings (CTWindow, opportunistic PS)
  *	changed
@@ -779,6 +779,7 @@ struct ieee80211_bss_conf {
 	u8 pwr_reduction;
 	bool eht_support;
 	u16 eht_puncturing;
+	bool ap_ps_enable;
 	bool eht_su_beamformer;
 	bool eht_su_beamformee;
 	bool eht_mu_beamformer;
@@ -2740,6 +2741,8 @@ struct ieee80211_txq {
  * @IEEE80211_HW_SUPPORTS_RX_DECAP_OFFLOAD: Hardware supports rx decapsulation
  *	offload
  *
+ * @IEEE80211_HW_SUPPORTS_AP_PS: Hardware supports AP power save.
+ *
  * @IEEE80211_HW_SUPPORTS_CONC_MON_RX_DECAP: Hardware supports concurrent rx
  *	decapsulation offload and passing raw 802.11 frames for monitor iface.
  *	If this is supported, the driver must pass both 802.3 frames for real
@@ -2816,6 +2819,7 @@ enum ieee80211_hw_flags {
 	IEEE80211_HW_SUPPORTS_NSS_OFFLOAD,
 	IEEE80211_HW_SUPPORTS_MESH_NSS_OFFLOAD,
 	IEEE80211_HW_SUPPORTS_TID_CLASS_OFFLOAD,
+	IEEE80211_HW_SUPPORTS_AP_PS,
 
 	/* keep last, obviously */
 	NUM_IEEE80211_HW_FLAGS
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1531,13 +1531,13 @@ error:
 	return err;
 }
 
-static int ieee80211_change_beacon(struct wiphy *wiphy, struct net_device *dev,
-				   struct cfg80211_ap_settings *params)
+static int ieee80211_update_ap(struct wiphy *wiphy, struct net_device *dev,
+			       struct cfg80211_ap_settings *params)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_link_data *link;
 	struct beacon_data *old;
-	int err;
+	int err = -EINVAL;
 	struct ieee80211_bss_conf *link_conf;
 	u64 changed = 0;
 
@@ -1559,10 +1559,21 @@ static int ieee80211_change_beacon(struc
 	if (!old)
 		return -ENOENT;
 
-	err = ieee80211_assign_beacon(sdata, link, &params->beacon, NULL, NULL,
-				      &changed);
-	if (err < 0)
-		return err;
+	if (params->beacon.head || params->beacon.tail) {
+		err = ieee80211_assign_beacon(sdata, link, &params->beacon, NULL, NULL,
+					      &changed);
+		if (err < 0)
+			return err;
+	}
+
+	if (ieee80211_hw_check(&sdata->local->hw, SUPPORTS_AP_PS) &&
+	    params->ap_ps_valid) {
+		link_conf->ap_ps_enable = params->ap_ps_enable;
+		if (err < 0)
+			err = BSS_CHANGED_PS;
+		else
+			err |= BSS_CHANGED_PS;
+	}
 
 	if (params->beacon.he_bss_color_valid &&
 	    params->beacon.he_bss_color.enabled != link_conf->he_bss_color.enabled) {
@@ -5129,7 +5140,7 @@ const struct cfg80211_ops mac80211_confi
 	.set_default_mgmt_key = ieee80211_config_default_mgmt_key,
 	.set_default_beacon_key = ieee80211_config_default_beacon_key,
 	.start_ap = ieee80211_start_ap,
-	.change_beacon = ieee80211_change_beacon,
+	.update_ap = ieee80211_update_ap,
 	.stop_ap = ieee80211_stop_ap,
 	.add_station = ieee80211_add_station,
 	.del_station = ieee80211_del_station,
--- a/net/mac80211/debugfs.c
+++ b/net/mac80211/debugfs.c
@@ -571,6 +571,7 @@ static const char *hw_flag_names[] = {
 	FLAG(SUPPORTS_NSS_OFFLOAD),
 	FLAG(SUPPORTS_MESH_NSS_OFFLOAD),
 	FLAG(SUPPORTS_TID_CLASS_OFFLOAD),
+	FLAG(SUPPORTS_AP_PS),
 #undef FLAG
 };
 
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -208,7 +208,6 @@ int ieee80211_hw_config(struct ieee80211
 
 #define BSS_CHANGED_VIF_CFG_FLAGS (BSS_CHANGED_ASSOC |\
 				   BSS_CHANGED_IDLE |\
-				   BSS_CHANGED_PS |\
 				   BSS_CHANGED_IBSS |\
 				   BSS_CHANGED_ARP_FILTER |\
 				   BSS_CHANGED_SSID)
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -2302,11 +2302,25 @@ void ieee80211_recalc_ps(struct ieee8021
 
 void ieee80211_recalc_ps_vif(struct ieee80211_sub_if_data *sdata)
 {
+	struct ieee80211_link_data *link;
+	u16 link_id;
 	bool ps_allowed = ieee80211_powersave_allowed(sdata);
 
 	if (sdata->vif.cfg.ps != ps_allowed) {
 		sdata->vif.cfg.ps = ps_allowed;
-		ieee80211_vif_cfg_change_notify(sdata, BSS_CHANGED_PS);
+		if (!sdata->vif.valid_links) {
+			ieee80211_link_info_change_notify(sdata, &sdata->deflink,
+							  BSS_CHANGED_PS);
+		} else {
+			for_each_set_bit(link_id, &sdata->vif.valid_links,
+					 IEEE80211_MLD_MAX_NUM_LINKS) {
+				link = sdata_dereference(sdata->link[link_id], sdata);
+				if (!link)
+					continue;
+
+				ieee80211_link_info_change_notify(sdata, link, BSS_CHANGED_PS);
+			}
+		}
 	}
 }
 
