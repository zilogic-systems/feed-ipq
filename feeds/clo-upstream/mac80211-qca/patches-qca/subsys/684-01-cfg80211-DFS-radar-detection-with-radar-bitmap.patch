From 6305016b60ecea78d8f0333cfed05d8aa2314766 Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Mon, 7 Nov 2022 02:17:32 +0530
Subject: [PATCH] cfg80211: DFS radar detection with radar bitmap

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 include/net/cfg80211.h       |  1 +
 include/uapi/linux/nl80211.h |  4 ++++
 net/wireless/chan.c          | 27 ++++++++++++++++++++-------
 net/wireless/mlme.c          |  1 +
 net/wireless/nl80211.c       |  4 ++++
 net/wireless/reg.c           |  1 +
 6 files changed, 31 insertions(+), 7 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -843,6 +843,7 @@ struct cfg80211_chan_def {
 	u16 freq1_offset;
 	u16 ru_punct_bitmap;
 	bool ru_punct_bitmap_supp_he;
+	u16 radar_bitmap;
 };
 
 /*
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -564,22 +564,31 @@ EXPORT_SYMBOL(cfg80211_chandef_compatibl
 
 static void cfg80211_set_chans_dfs_state(struct wiphy *wiphy, u32 center_freq,
 					 u32 bandwidth,
-					 enum nl80211_dfs_state dfs_state)
+					 enum nl80211_dfs_state dfs_state,
+					 u16 radar_bitmap)
 {
 	struct ieee80211_channel *c;
 	u32 freq;
+	int i;
 
-	for (freq = center_freq - bandwidth/2 + 10;
-	     freq <= center_freq + bandwidth/2 - 10;
-	     freq += 20) {
+	for (i = 0, freq = center_freq - bandwidth / 2 + 10;
+	     freq <= center_freq + bandwidth / 2 - 10;
+	     freq += 20, i++) {
 		c = ieee80211_get_channel(wiphy, freq);
-		if (!c || !(c->flags & IEEE80211_CHAN_RADAR))
+		if (!c || !(c->flags & IEEE80211_CHAN_RADAR) )
 			continue;
 
-		c->dfs_state = dfs_state;
-		c->dfs_state_entered = jiffies;
-		if (dfs_state == NL80211_DFS_AVAILABLE)
+		if (radar_bitmap && dfs_state == NL80211_DFS_UNAVAILABLE) {
+			if (radar_bitmap & 1 << i) {
+				c->dfs_state = dfs_state;
+				c->dfs_state_entered = jiffies;
+			}
+		}
+		else {
+			c->dfs_state = dfs_state;
+			c->dfs_state_entered = jiffies;
 			c->dfs_state_last_available = jiffies;
+		}
 	}
 }
 
@@ -597,12 +606,15 @@ void cfg80211_set_dfs_state(struct wiphy
 		return;
 
 	cfg80211_set_chans_dfs_state(wiphy, chandef->center_freq1,
-				     width, dfs_state);
+				     width, dfs_state,
+				     chandef->radar_bitmap);
 
 	if (!chandef->center_freq2)
 		return;
+
 	cfg80211_set_chans_dfs_state(wiphy, chandef->center_freq2,
-				     width, dfs_state);
+				     width, dfs_state,
+				     chandef->radar_bitmap >> 4);
 }
 
 static u32 cfg80211_get_start_freq(u32 center_freq,
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -999,6 +999,7 @@ void __cfg80211_radar_event(struct wiphy
 
 	memcpy(&rdev->radar_chandef, chandef, sizeof(struct cfg80211_chan_def));
 	queue_work(cfg80211_wq, &rdev->propagate_radar_detect_wk);
+	chandef->radar_bitmap = 0;
 }
 EXPORT_SYMBOL(__cfg80211_radar_event);
 
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -845,6 +845,7 @@ static const struct nla_policy nl80211_p
 	[NL80211_ATTR_RU_PUNCT_SUPP_HE] = { .type = NLA_FLAG },
 	[NL80211_ATTR_RU_PUNCT_BITMAP] = { .type = NLA_U16 },
 	[NL80211_ATTR_AP_PS] = NLA_POLICY_MAX(NLA_U8, 1),
+	[NL80211_ATTR_RADAR_BITMAP] = { .type = NLA_U16 },
 };
 
 /* policy for the key attributes */
@@ -4062,6 +4063,9 @@ int nl80211_send_chandef(struct sk_buff
 			return -ENOBUFS;
 	}
 
+	if (nla_put_u16(msg, NL80211_ATTR_RADAR_BITMAP, chandef->radar_bitmap))
+		return -ENOBUFS;
+
 	return 0;
 }
 EXPORT_SYMBOL(nl80211_send_chandef);
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@ -4304,6 +4304,7 @@ void regulatory_propagate_dfs_state(stru
 
 		nl80211_radar_notify(rdev, chandef, event, NULL, GFP_KERNEL);
 	}
+	chandef->radar_bitmap = 0;
 }
 
 static int __init regulatory_init_db(void)
