From 8d3df0c886f4393fa8e1dacd2a3532f8d913ad97 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Wed, 23 Nov 2022 14:26:24 +0530
Subject: [PATCH] mac80211: use link conf and link sta

Use link conf and link sta for link specific operations.
The link conf is replaced in start ap.
Link sta is updated with NSS during link station add.

Also, moved the condition for link bss address validation
to differentiate link bss address from ML address.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 net/mac80211/cfg.c | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1392,18 +1392,18 @@ static int ieee80211_start_ap(struct wip
 	}
 
 	if (params->he_cap) {
-		memcpy(&sdata->vif.bss_conf.he_cap_elem, params->he_cap,
+		memcpy(&link_conf->he_cap_elem, params->he_cap,
 		       sizeof(*params->he_cap));
-		sdata->vif.bss_conf.he_su_beamformer =
+		link_conf->he_su_beamformer =
 			params->he_cap->phy_cap_info[3] &
 			IEEE80211_HE_PHY_CAP3_SU_BEAMFORMER;
-		sdata->vif.bss_conf.he_su_beamformee =
+		link_conf->he_su_beamformee =
 			params->he_cap->phy_cap_info[4] &
 			IEEE80211_HE_PHY_CAP4_SU_BEAMFORMEE;
-		sdata->vif.bss_conf.he_mu_beamformer =
+		link_conf->he_mu_beamformer =
 			params->he_cap->phy_cap_info[4] &
 			IEEE80211_HE_PHY_CAP4_MU_BEAMFORMER;
-		sdata->vif.bss_conf.he_full_ul_mumimo =
+		link_conf->he_full_ul_mumimo =
 			params->he_cap->phy_cap_info[2] &
 			IEEE80211_HE_PHY_CAP2_UL_MU_FULL_MU_MIMO;
 	}
@@ -1938,6 +1938,15 @@ static int sta_link_apply_parameters(str
 			link_sta->pub->ru_punct_bitmap = params->ru_punct_bitmap;
 	}
 
+	/* update nss if not done already for the link sta,
+	 * for the deflink the nss will be updated once the assoc
+	 * flag is set through set station. For the non-deflink sta
+	 * we would reach here only during assoc, so we would have all
+	 * caps to calculate the nss.
+	 */
+	if (&sta->deflink != link_sta)
+		ieee80211_sta_set_rx_nss(link_sta);
+
 	if (params->opmode_notif_used) {
 		/* returned value is only needed for rc update, but the
 		 * rc isn't initialized here yet, so ignore it
--- a/net/mac80211/agg-rx.c
+++ b/net/mac80211/agg-rx.c
@@ -207,6 +207,8 @@ static void ieee80211_send_addba_resp(st
 	struct ieee80211_mgmt *mgmt;
 	bool amsdu = ieee80211_hw_check(&local->hw, SUPPORTS_AMSDU_IN_AMPDU);
 	u16 capab;
+	struct ieee80211_link_data *link;
+	u8 link_id;
 
 	skb = dev_alloc_skb(sizeof(*mgmt) +
 		    2 + sizeof(struct ieee80211_addba_ext_ie) +
@@ -218,14 +220,29 @@ static void ieee80211_send_addba_resp(st
 	mgmt = skb_put_zero(skb, 24);
 	memcpy(mgmt->da, da, ETH_ALEN);
 	memcpy(mgmt->sa, sdata->vif.addr, ETH_ALEN);
-	if (sdata->vif.type == NL80211_IFTYPE_AP ||
-	    sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
-	    sdata->vif.type == NL80211_IFTYPE_MESH_POINT)
+	if (sdata->vif.type == NL80211_IFTYPE_AP) {
 		memcpy(mgmt->bssid, sdata->vif.addr, ETH_ALEN);
-	else if (sdata->vif.type == NL80211_IFTYPE_STATION)
-		memcpy(mgmt->bssid, sdata->vif.cfg.ap_addr, ETH_ALEN);
-	else if (sdata->vif.type == NL80211_IFTYPE_ADHOC)
+		/* Override MLD address in A2/A3 with link addr
+		 * in case of AP MLO and a non ML STA
+		 */
+		if (sdata->vif.valid_links && sta && !sta->sta.mlo) {
+			link_id = sta->deflink.link_id;
+			rcu_read_lock();
+			link = rcu_dereference(sdata->link[link_id]);
+			if (link) {
+				memcpy(mgmt->sa, link->conf->addr, ETH_ALEN);
+				memcpy(mgmt->bssid, link->conf->addr, ETH_ALEN);
+			}
+			rcu_read_unlock();
+		}
+	} else if (sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
+		sdata->vif.type == NL80211_IFTYPE_MESH_POINT) {
+		memcpy(mgmt->bssid, sdata->vif.addr, ETH_ALEN);
+	} else if (sdata->vif.type == NL80211_IFTYPE_STATION) {
+		memcpy(mgmt->bssid, sdata->deflink.u.mgd.bssid, ETH_ALEN);
+	} else if (sdata->vif.type == NL80211_IFTYPE_ADHOC) {
 		memcpy(mgmt->bssid, sdata->u.ibss.bssid, ETH_ALEN);
+	}
 
 	mgmt->frame_control = cpu_to_le16(IEEE80211_FTYPE_MGMT |
 					  IEEE80211_STYPE_ACTION);
@@ -269,6 +286,9 @@ void ___ieee80211_start_rx_ba_session(st
 	int i, ret = -EOPNOTSUPP;
 	u16 status = WLAN_STATUS_REQUEST_DECLINED;
 	u16 max_buf_size;
+	u8 link_id;
+	enum nl80211_band band;
+	struct ieee80211_bss_conf *link_conf;
 
 	if (tid >= IEEE80211_FIRST_TSPEC_TSID) {
 		ht_dbg(sta->sdata,
@@ -277,8 +297,22 @@ void ___ieee80211_start_rx_ba_session(st
 		goto end;
 	}
 
-	if (!sta->sta.deflink.ht_cap.ht_supported &&
-	    !sta->sta.deflink.he_cap.has_he) {
+	link_id = sta->sta.deflink.link_id;
+	rcu_read_lock();
+	link_conf = rcu_dereference(sta->sdata->vif.link_conf[link_id]);
+
+	if (WARN_ON(!link_conf || (!link_conf->chandef.chan))) {
+		ht_dbg(sta->sdata,
+			"STA %pM BA session couldnt setup due to invalid link %d\n",
+			sta->sta.addr, link_id);
+		rcu_read_unlock();
+		goto end;
+	}
+
+	band = link_conf->chandef.chan->band;
+
+	rcu_read_unlock();
+	if (!sta->sta.deflink.ht_cap.ht_supported && band != NL80211_BAND_6GHZ) {
 		ht_dbg(sta->sdata,
 		       "STA %pM erroneously requests BA session on tid %d w/o HT\n",
 		       sta->sta.addr, tid);
