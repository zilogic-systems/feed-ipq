From e856bbceb4c8ca1af0f5384d12670a5b691ab55a Mon Sep 17 00:00:00 2001
From: Vishal Kumar <quic_visk@quicinc.com>
Date: Fri, 24 Feb 2023 19:07:13 +0530
Subject: [PATCH] ath12k: AP bringup with 5G Low + 5G High in dfs channel
 within same mld

when one of the 5G low or high interface up with dfs channel,
link->radar_required flag gets true and causing channel scan failure
for another 5G interface. its because link->radar_required check is
not based on hw_idx. now added hw_idx check with link->radar_required so
only specific hw_idx used for link->radar_required.

Signed-off-by: Vishal Kumar <quic_visk@quicinc.com>
---
 include/net/cfg80211.h     |  6 +++---
 net/mac80211/chan.c        | 30 ++++++++++++++++++++----------
 net/mac80211/ieee80211_i.h |  3 ++-
 net/mac80211/offchannel.c  |  3 ++-
 net/mac80211/scan.c        | 20 +++++++++++++-------
 net/mac80211/util.c        | 28 +++++++++++++++++-----------
 net/wireless/chan.c        |  3 +++
 net/wireless/nl80211.c     | 11 +++++++++++
 net/wireless/util.c        | 23 +++++++++--------------
 9 files changed, 80 insertions(+), 47 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -2676,6 +2676,7 @@ struct cfg80211_scan_request {
 	bool scan_6ghz;
 	u32 n_6ghz_params;
 	struct cfg80211_scan_6ghz_params *scan_6ghz_params;
+	u8 hw_idx;
 
 	/* keep last */
 	struct ieee80211_channel *channels[];
@@ -9192,14 +9193,13 @@ bool cfg80211_per_hw_iface_comb_advertis
  * cfg80211_get_hw_idx_by_chan - get the hw index by the channel
  *
  * @wiphy: the wiphy
- * @chandef: channel definition for which the supported hw index is
- *	required
+ * @chan: channel for which the supported hw index is required
  *
  * returns -1 in case the channel is not supported by any of the constituent
  *	hw
  */
 int cfg80211_get_hw_idx_by_chan(struct wiphy *wiphy,
-				const struct cfg80211_chan_def *chandef);
+				const struct ieee80211_channel *chan);
 
 /*
  * cfg80211_stop_iface - trigger interface disconnection
--- a/net/mac80211/chan.c
+++ b/net/mac80211/chan.c
@@ -52,21 +52,23 @@ static int ieee80211_num_chanctx(struct
 {
 	struct ieee80211_chanctx *ctx;
 	int num = 0;
-	int hw_idx, ctx_idx;
+	int hw_idx = -1, ctx_idx;
 
 	lockdep_assert_held(&local->chanctx_mtx);
 
-	hw_idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy, chandef);
+	if (cfg80211_chandef_valid(chandef))
+		hw_idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy, chandef->chan);
 
 	list_for_each_entry(ctx, &local->chanctx_list, list) {
 		if (hw_idx < 0)
 			num++;
 		else {
-			ctx_idx =
-				cfg80211_get_hw_idx_by_chan(local->hw.wiphy,
-							    &ctx->conf.def);
-			if (ctx_idx == hw_idx)
-				num++;
+			if (cfg80211_chandef_valid(&ctx->conf.def)) {
+				ctx_idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy,
+								      ctx->conf.def.chan);
+				if (ctx_idx == hw_idx)
+					num++;
+			}
 		}
 	}
 
@@ -583,9 +585,12 @@ ieee80211_find_chanctx(struct ieee80211_
 	return NULL;
 }
 
-bool ieee80211_is_radar_required(struct ieee80211_local *local)
+bool ieee80211_is_radar_required(struct ieee80211_local *local,
+				 struct cfg80211_scan_request *req)
 {
 	struct ieee80211_sub_if_data *sdata;
+	struct wiphy *wiphy = local->hw.wiphy;
+	s8 hw_idx;
 
 	lockdep_assert_held(&local->mtx);
 
@@ -599,8 +604,13 @@ bool ieee80211_is_radar_required(struct
 			link = rcu_dereference(sdata->link[link_id]);
 
 			if (link && link->radar_required) {
-				rcu_read_unlock();
-				return true;
+				struct ieee80211_channel *chan = link->conf->chandef.chan;
+
+				hw_idx = cfg80211_get_hw_idx_by_chan(wiphy, chan);
+				if (hw_idx == req->hw_idx) {
+					rcu_read_unlock();
+					return true;
+				}
 			}
 		}
 	}
--- a/net/mac80211/offchannel.c
+++ b/net/mac80211/offchannel.c
@@ -539,6 +539,7 @@ static int ieee80211_start_roc_work(stru
 	struct ieee80211_roc_work *roc, *tmp;
 	bool queued = false, combine_started = true;
 	int ret;
+	struct cfg80211_scan_request *req = local->scan_req;
 
 	lockdep_assert_held(&local->mtx);
 
@@ -587,7 +588,7 @@ static int ieee80211_start_roc_work(stru
 
 	/* if there's no need to queue, handle it immediately */
 	if (list_empty(&local->roc_list) &&
-	    !local->scanning && !ieee80211_is_radar_required(local)) {
+	    !local->scanning && !ieee80211_is_radar_required(local, req)) {
 		/* if not HW assist, just queue & schedule work */
 		if (!local->ops->remain_on_channel) {
 			list_add_tail(&roc->list, &local->roc_list);
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -557,12 +557,13 @@ static int ieee80211_start_sw_scan(struc
 	return 0;
 }
 
-static bool __ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata)
+static bool __ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata,
+				     struct cfg80211_scan_request *req)
 {
 	struct ieee80211_local *local = sdata->local;
 	struct ieee80211_sub_if_data *sdata_iter;
 
-	if (!ieee80211_is_radar_required(local))
+	if (!ieee80211_is_radar_required(local, req))
 		return true;
 
 	if (!regulatory_pre_cac_allowed(local->hw.wiphy))
@@ -582,9 +583,10 @@ static bool __ieee80211_can_leave_ch(str
 }
 
 static bool ieee80211_can_scan(struct ieee80211_local *local,
-			       struct ieee80211_sub_if_data *sdata)
+			       struct ieee80211_sub_if_data *sdata,
+			       struct cfg80211_scan_request *req)
 {
-	if (!__ieee80211_can_leave_ch(sdata))
+	if (!__ieee80211_can_leave_ch(sdata, req))
 		return false;
 
 	if (!list_empty(&local->roc_list))
@@ -599,15 +601,19 @@ static bool ieee80211_can_scan(struct ie
 
 void ieee80211_run_deferred_scan(struct ieee80211_local *local)
 {
+	struct cfg80211_scan_request *req;
+
 	lockdep_assert_held(&local->mtx);
 
 	if (!local->scan_req || local->scanning)
 		return;
 
+	req = local->scan_req;
+
 	if (!ieee80211_can_scan(local,
 				rcu_dereference_protected(
 					local->scan_sdata,
-					lockdep_is_held(&local->mtx))))
+					lockdep_is_held(&local->mtx)), req))
 		return;
 
 	ieee80211_queue_delayed_work(&local->hw, &local->scan_work,
@@ -700,10 +706,10 @@ static int __ieee80211_start_scan(struct
 	if (local->scan_req)
 		return -EBUSY;
 
-	if (!__ieee80211_can_leave_ch(sdata))
+	if (!__ieee80211_can_leave_ch(sdata, req))
 		return -EBUSY;
 
-	if (!ieee80211_can_scan(local, sdata)) {
+	if (!ieee80211_can_scan(local, sdata, req)) {
 		/* wait for the work to finish/time out */
 		rcu_assign_pointer(local->scan_req, req);
 		rcu_assign_pointer(local->scan_sdata, sdata);
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -5130,9 +5130,9 @@ ieee80211_get_per_hw_sdata_active_iface(
 			ctx = ctx->replace_ctx;
 
 		idx = -1;
-		if (ctx)
+		if (ctx && cfg80211_chandef_valid(&ctx->conf.def))
 			idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy,
-							  &ctx->conf.def);
+							  ctx->conf.def.chan);
 
 		if (idx >= 0)
 			params->per_hw[idx].iftype_num[sdata->wdev.iftype]++;
@@ -5155,7 +5155,7 @@ ieee80211_prepare_per_hw_iface_combinati
 	struct ieee80211_sub_if_data *sdata_iter;
 	enum nl80211_iftype iftype = sdata->wdev.iftype;
 	struct ieee80211_chanctx *ctx;
-	int hchan_idx;
+	int hchan_idx = -1;
 	size_t size;
 	bool sdata_included = false;
 
@@ -5167,20 +5167,24 @@ ieee80211_prepare_per_hw_iface_combinati
 	if (!params->per_hw)
 		return -ENOMEM;
 
-	hchan_idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy, chandef);
-	if (hchan_idx >= 0) {
-		params->per_hw[hchan_idx].num_different_channels = 1;
-		if (iftype != NL80211_IFTYPE_UNSPECIFIED) {
-			params->per_hw[hchan_idx].iftype_num[iftype] = 1;
-			sdata_included = true;
+	if (cfg80211_chandef_valid(chandef)) {
+		hchan_idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy, chandef->chan);
+		if (hchan_idx >= 0) {
+			params->per_hw[hchan_idx].num_different_channels = 1;
+			if (iftype != NL80211_IFTYPE_UNSPECIFIED) {
+				params->per_hw[hchan_idx].iftype_num[iftype] = 1;
+				sdata_included = true;
+			}
 		}
 	}
 
 	list_for_each_entry(ctx, &local->chanctx_list, list) {
 		if (ctx->replace_state == IEEE80211_CHANCTX_WILL_BE_REPLACED)
 			continue;
+		if (WARN_ON(!cfg80211_chandef_valid(&ctx->conf.def)))
+			continue;
 		hchan_idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy,
-							&ctx->conf.def);
+							ctx->conf.def.chan);
 		if (WARN_ON(hchan_idx < 0))
 			continue;
 
@@ -5339,8 +5343,10 @@ ieee80211_max_num_channels_hw_list(struc
 	list_for_each_entry(ctx, &local->chanctx_list, list) {
 		if (ctx->replace_state == IEEE80211_CHANCTX_WILL_BE_REPLACED)
 			continue;
+		if (WARN_ON(!cfg80211_chandef_valid(&ctx->conf.def)))
+			continue;
 		hchan_idx = cfg80211_get_hw_idx_by_chan(local->hw.wiphy,
-							&ctx->conf.def);
+							ctx->conf.def.chan);
 		if (WARN_ON(hchan_idx < 0))
 			continue;
 
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -310,6 +310,9 @@ bool cfg80211_chandef_valid(const struct
 	u32 control_freq, oper_freq;
 	int oper_width, control_width;
 
+	if (!chandef)
+		return false;
+
 	if (!chandef->chan)
 		return false;
 
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -9830,6 +9830,7 @@ static int nl80211_trigger_scan(struct s
 	struct nlattr *attr;
 	struct wiphy *wiphy;
 	int err, tmp, n_ssids = 0, n_channels = 0, i;
+	s8 hw_idx = -1;
 	size_t ie_len, size;
 	bool chandef_found = false;
 
@@ -9928,6 +9929,11 @@ static int nl80211_trigger_scan(struct s
 				continue;
 
 			request->channels[i] = chan;
+
+			hw_idx = cfg80211_get_hw_idx_by_chan(wiphy, chan);
+			if (hw_idx >= 0)
+				request->hw_idx = hw_idx;
+
 			i++;
 		}
 	} else if (!chandef_found) {
@@ -9948,6 +9954,11 @@ static int nl80211_trigger_scan(struct s
 					continue;
 
 				request->channels[i] = chan;
+
+				hw_idx = cfg80211_get_hw_idx_by_chan(wiphy, chan);
+				if (hw_idx >= 0)
+					request->hw_idx = hw_idx;
+
 				i++;
 			}
 		}
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -2443,13 +2443,12 @@ EXPORT_SYMBOL(cfg80211_per_hw_iface_comb
 
 static bool
 cfg80211_chan_supported_by_sub_hw(struct ieee80211_chans_per_hw *hw_chans,
-				  const struct cfg80211_chan_def *chandef)
+				  const struct ieee80211_channel *chan)
 {
 	int i;
 
 	for (i = 0; i < hw_chans->n_chans; i++)
-		if (chandef->chan->center_freq ==
-		    hw_chans->chans[i].center_freq)
+		if (chan->center_freq == hw_chans->chans[i].center_freq)
 			return true;
 
 	return false;
@@ -2457,21 +2456,16 @@ cfg80211_chan_supported_by_sub_hw(struct
 
 int
 cfg80211_get_hw_idx_by_chan(struct wiphy *wiphy,
-			    const struct cfg80211_chan_def *chandef)
+			    const struct ieee80211_channel *chan)
 {
 	int i;
 
-	if (!chandef)
+	if (!chan)
 		return -1;
 
-	if (!cfg80211_chandef_valid(chandef))
-		return -1;
-
-	for (i = 0; i < wiphy->num_hw; i++) {
-		if (cfg80211_chan_supported_by_sub_hw(wiphy->hw_chans[i],
-						      chandef))
+	for (i = 0; i < wiphy->num_hw; i++)
+		if (cfg80211_chan_supported_by_sub_hw(wiphy->hw_chans[i], chan))
 			return i;
-	}
 
 	return -1;
 }
@@ -2523,8 +2517,9 @@ int cfg80211_iter_combinations(struct wi
 		if (!num_per_hw_ifaces)
 			return -ENOMEM;
 
-		hw_chan_idx = cfg80211_get_hw_idx_by_chan(wiphy,
-							  params->chandef);
+		if (cfg80211_chandef_valid(params->chandef))
+			hw_chan_idx = cfg80211_get_hw_idx_by_chan(wiphy,
+								  params->chandef->chan);
 	}
 
 	for (iftype = 0; iftype < NUM_NL80211_IFTYPES; iftype++) {
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2623,7 +2623,8 @@ void ieee80211_recalc_smps_chanctx(struc
 void ieee80211_recalc_chanctx_min_def(struct ieee80211_local *local,
 				      struct ieee80211_chanctx *ctx,
 				      struct ieee80211_link_data *rsvd_for);
-bool ieee80211_is_radar_required(struct ieee80211_local *local);
+bool ieee80211_is_radar_required(struct ieee80211_local *local,
+				struct cfg80211_scan_request *req);
 
 void ieee80211_dfs_cac_timer(unsigned long data);
 void ieee80211_dfs_cac_timer_work(struct work_struct *work);
