From ef5442225618d964142af51ea3abd899d071d921 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Mon, 27 Mar 2023 11:23:22 -0700
Subject: [PATCH 1/2] wifi: mac80211: add framework to support PPE DS

Add framework to support PPE DS. Introduce new mac80211 ops
to attach or detach ppe ds. BY default ppe ds is disabled. This
can be enabled through writing 1 to module params
(/sys/module/mac80211/parameters/ppe_vp_accel) and wifi restart.
mac80211 tries to invoke driver ops for enabling direct
switching(DS). If this fails, it will try to enable ppe without
DS.

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 include/net/mac80211.h     | 16 +++++++++++++++-
 net/mac80211/driver-ops.h  | 28 ++++++++++++++++++++++++++++
 net/mac80211/ieee80211_i.h |  3 ---
 net/mac80211/iface.c       | 36 ++++++++++++++++++++++++++----------
 net/mac80211/rx.c          |  4 ++--
 5 files changed, 71 insertions(+), 16 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1981,7 +1981,8 @@ struct ieee80211_vif {
 	bool noqueue_enable;
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	u32 ppe_vp_num;
+	int ppe_vp_num;
+	unsigned long ppe_vp_type;
 #endif
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
@@ -3753,6 +3754,11 @@ struct ieee80211_prep_tx_info {
 	u8 success:1;
 };
 
+struct ieee80211_ppe_vp_ds_params {
+	struct net_device *dev;
+	int ppe_vp_profile_idx;
+	unsigned long ppe_vp_type;
+};
 /**
  * struct ieee80211_ops - callbacks from mac80211 to the driver
  *
@@ -4765,6 +4771,14 @@ struct ieee80211_ops {
 			    struct net_device *dev,
 			    enum tc_setup_type type,
 			    void *type_data);
+	/*TODO: explore if this can be moved completely under ath12k driver */
+	int (*ppeds_attach_vdev)(struct ieee80211_hw *hw,
+				 struct ieee80211_vif *vif,
+				 void *vp_arg, int *ppe_vp_num,
+				 struct ieee80211_ppe_vp_ds_params *vp_params);
+	int (*ppeds_detach_vdev)(struct ieee80211_hw *hw,
+				 struct ieee80211_vif *vif,
+				 struct ieee80211_ppe_vp_ds_params *vp_params);
 };
 
 /**
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1546,6 +1546,34 @@ static inline int drv_net_setup_tc(struc
 	return ret;
 }
 
+static inline int drv_ppeds_attach_vdev(struct ieee80211_sub_if_data *sdata,
+					struct ieee80211_vif *vif, void *vp_arg,
+					int *ppe_vp_num,
+					struct ieee80211_ppe_vp_ds_params *vp_params)
+{
+
+	struct ieee80211_local *local = sdata->local;
+
+	if (!local->ops->ppeds_attach_vdev)
+	        return -EINVAL;
+
+	return local->ops->ppeds_attach_vdev(&local->hw, vif, vp_arg,
+					     ppe_vp_num, vp_params);
+}
+
+static inline int drv_ppeds_detach_vdev(struct ieee80211_sub_if_data *sdata,
+					struct ieee80211_vif *vif,
+					struct ieee80211_ppe_vp_ds_params *vp_params)
+{
+	struct ieee80211_local *local = sdata->local;
+
+	if (!local->ops->ppeds_detach_vdev)
+	        return -EINVAL;
+
+	return local->ops->ppeds_detach_vdev(&local->hw, vif, vp_params);
+
+}
+
 int drv_change_vif_links(struct ieee80211_local *local,
 			 struct ieee80211_sub_if_data *sdata,
 			 u16 old_links, u16 new_links,
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1140,9 +1140,6 @@ struct ieee80211_sub_if_data {
 #ifdef CPTCFG_MAC80211_NSS_SUPPORT
 	struct nss_virt_if_handle *nssctx;
 #endif
-#ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	u32 ppe_vp_num;
-#endif
 
 	/* must be last, dynamically sized area in this! */
 	struct ieee80211_vif vif;
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -834,6 +834,7 @@ void ieee80211_stop_mbssid(struct ieee80
 static int ieee80211_stop(struct net_device *dev)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_ppe_vp_ds_params vp_params = {0};
 
 	/* close dependent VLAN interfaces before locking wiphy */
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
@@ -854,12 +855,14 @@ static int ieee80211_stop(struct net_dev
 #endif
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	if (sdata->ppe_vp_num) {
-		ppe_vp_free(sdata->ppe_vp_num);
+	if (sdata->vif.ppe_vp_num != -1) {
+		drv_ppeds_detach_vdev(sdata, &sdata->vif, &vp_params);
+		if (sdata->vif.ppe_vp_type != PPE_VP_USER_TYPE_DS)
+			ppe_vp_free(sdata->vif.ppe_vp_num);
+
 		sdata_info(sdata, "Destroyed PPE VP port no:%d for dev:%s\n",
-			   sdata->ppe_vp_num, dev->name);
-		sdata->ppe_vp_num = 0;
-		sdata->vif.ppe_vp_num = 0;
+			   sdata->vif.ppe_vp_num, dev->name);
+		sdata->vif.ppe_vp_num = -1;
 	}
 #endif
 
@@ -1365,8 +1368,9 @@ static bool ieee80211_process_dst_ppe_vp
 static int ieee80211_ppe_vp_802_3_redir_vap(struct ieee80211_sub_if_data *sdata,
 					    struct net_device *dev)
 {
-	int vp;
 	struct ppe_vp_ai vpai;
+	struct ieee80211_ppe_vp_ds_params vp_params = {0};
+	int vp = -1, ret;
 
 	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
 
@@ -1376,7 +1380,19 @@ static int ieee80211_ppe_vp_802_3_redir_
 	vpai.src_cb = NULL;
 	vpai.src_cb_data = NULL;
 	vpai.queue_num = 0;
+	vpai.usr_type = PPE_VP_USER_TYPE_DS;
+	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
+
+	vp_params.dev = dev;
+	ret = drv_ppeds_attach_vdev(sdata, &sdata->vif, (void *)&vpai, &vp, &vp_params);
+	if (!ret) {
+		sdata->vif.ppe_vp_type = PPE_VP_USER_TYPE_DS;
+		return vp;
+	}
 
+	sdata_info(sdata, "PPE-DS attach failed falling back to passive vp\n");
+	/* when PPE-DS attach fails, fall back to passive vp support */
+	vpai.usr_type = 0;
 	vp = ppe_vp_alloc(dev, &vpai);
 	if (vp <= 0)
 		return -1;
@@ -1668,12 +1684,11 @@ int ieee80211_do_open(struct wireless_de
 	if (ppe_vp_accel) {
 		vp = ieee80211_ppe_vp_802_3_redir_vap(sdata, dev);
 		if (vp > 0) {
-			sdata->ppe_vp_num = vp;
-			sdata->vif.ppe_vp_num = sdata->ppe_vp_num;
+			sdata->vif.ppe_vp_num = vp;
 			sdata_info(sdata, "Allocated vp:%d for device:%s\n",
-				   sdata->ppe_vp_num, dev->name);
+				   sdata->vif.ppe_vp_num, dev->name);
 		} else {
-			sdata->ppe_vp_num = 0;
+			sdata->vif.ppe_vp_num = -1;
 			sdata_err(sdata, "Failed to register with PPE VP\n");
 		}
 	}
@@ -1951,6 +1966,7 @@ static void ieee80211_setup_sdata(struct
 	/* and set some type-dependent values */
 	sdata->vif.type = type;
 	sdata->vif.p2p = false;
+	sdata->vif.ppe_vp_num = -1;
 	sdata->wdev.iftype = type;
 
 	sdata->control_port_protocol = cpu_to_be16(ETH_P_PAE);
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -2691,7 +2691,7 @@ static void ieee80211_netif_rx_ppe(struc
 	if (unlikely(skb_shared(skb)))
 		goto out;
 
-	if (likely(ppe_vp_tx_to_ppe(sdata->ppe_vp_num, skb)))
+	if (likely(ppe_vp_tx_to_ppe(sdata->vif.ppe_vp_num, skb)))
 		return;
 
 out:
@@ -4985,7 +4985,7 @@ static void ieee80211_rx_8023(struct iee
 	}
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	if (rx->sdata->ppe_vp_num) {
+	if (rx->sdata->vif.ppe_vp_num) {
 		ieee80211_netif_rx_ppe(rx, skb);
 		atomic_inc(&sta->rx_netif_pkts);
 		return;
