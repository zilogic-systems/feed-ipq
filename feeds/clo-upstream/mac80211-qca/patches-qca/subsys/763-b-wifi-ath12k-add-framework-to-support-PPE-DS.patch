From e6bab678d9958a961b8d46354dd51e58d1f1a926 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Wed, 12 Apr 2023 16:09:58 -0700
Subject: [PATCH] wifi: ath12k: add framework to support PPE DS

Add framework to support PPE DS. By default ppe ds is disabled.
This can be enabled through writing 1 to module params
(/sys/module/ath12k/parameters/ppe_ds_enable) and wifi restart.
mac80211 tries to invoke driver ops for enabling direct
switching(DS). New rings are used for PPE DS TX and RX path.
Once setup, packet is directly handled by PPE engine skipping
network stack for both TX and RX.

Add compilation flag for PPE_DS_SUPPORT enabling all the
DS specific APIs to be compiled whenever that flag is enabled.

Bring DS related changes under PPE_DS_SUPPORT
compile flag check and fix compilation errors
in DS disabled case

Also additional WMI config is added to route EAPOL packets to
WBM release ring.

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/Kconfig    |   8 +
 drivers/net/wireless/ath/ath12k/Makefile   |   1 +
 drivers/net/wireless/ath/ath12k/core.c     |  40 +-
 drivers/net/wireless/ath/ath12k/core.h     |  45 +-
 drivers/net/wireless/ath/ath12k/debug.h    |   5 +-
 drivers/net/wireless/ath/ath12k/debugfs.c  |  93 ++
 drivers/net/wireless/ath/ath12k/dp.c       | 256 +++++-
 drivers/net/wireless/ath/ath12k/dp.h       | 125 ++-
 drivers/net/wireless/ath/ath12k/dp_rx.c    |  78 +-
 drivers/net/wireless/ath/ath12k/dp_rx.h    |  35 +
 drivers/net/wireless/ath/ath12k/dp_tx.c    | 189 ++++
 drivers/net/wireless/ath/ath12k/dp_tx.h    |   6 +-
 drivers/net/wireless/ath/ath12k/hal.c      |  65 +-
 drivers/net/wireless/ath/ath12k/hal.h      |  29 +-
 drivers/net/wireless/ath/ath12k/hal_desc.h |  62 +-
 drivers/net/wireless/ath/ath12k/hal_rx.c   |  15 +
 drivers/net/wireless/ath/ath12k/hal_rx.h   |   4 +
 drivers/net/wireless/ath/ath12k/hal_tx.c   |  10 +
 drivers/net/wireless/ath/ath12k/hal_tx.h   |  16 +
 drivers/net/wireless/ath/ath12k/hif.h      |  49 +
 drivers/net/wireless/ath/ath12k/hw.c       |  43 +-
 drivers/net/wireless/ath/ath12k/hw.h       |  30 +-
 drivers/net/wireless/ath/ath12k/mac.c      |  15 +
 drivers/net/wireless/ath/ath12k/pci.c      |  92 +-
 drivers/net/wireless/ath/ath12k/pci.h      |  13 +
 drivers/net/wireless/ath/ath12k/ppe.c      | 989 +++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/ppe.h      |  43 +
 drivers/net/wireless/ath/ath12k/wmi.c      |  82 ++
 drivers/net/wireless/ath/ath12k/wmi.h      |  68 ++
 local-symbols                              |   1 +
 net/mac80211/iface.c                       |   4 +
 31 files changed, 2406 insertions(+), 105 deletions(-)
 create mode 100644 drivers/net/wireless/ath/ath12k/ppe.c
 create mode 100644 drivers/net/wireless/ath/ath12k/ppe.h

--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -834,7 +834,9 @@ void ieee80211_stop_mbssid(struct ieee80
 static int ieee80211_stop(struct net_device *dev)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+#ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	struct ieee80211_ppe_vp_ds_params vp_params = {0};
+#endif
 
 	/* close dependent VLAN interfaces before locking wiphy */
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
@@ -1966,7 +1968,9 @@ static void ieee80211_setup_sdata(struct
 	/* and set some type-dependent values */
 	sdata->vif.type = type;
 	sdata->vif.p2p = false;
+#ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	sdata->vif.ppe_vp_num = -1;
+#endif
 	sdata->wdev.iftype = type;
 
 	sdata->control_port_protocol = cpu_to_be16(ETH_P_PAE);
--- a/local-symbols
+++ b/local-symbols
@@ -174,6 +174,7 @@ ATH11K_SPECTRAL=
 ATH12K=
 ATH12K_DEBUG=
 ATH12K_TRACING=
+ATH12K_PPE_DS_SUPPORT=
 WLAN_VENDOR_ATMEL=
 ATMEL=
 PCI_ATMEL=
