From 5670c880488b363b9dd907e601c5179f974da84f Mon Sep 17 00:00:00 2001
From: Benjamin Berg <benjamin.berg@intel.com>
Date: Thu, 1 Jun 2023 12:46:33 +0530
Subject: [PATCH] UPSTREAM: wifi: mac80211: add netdev per-link debugfs data and driver
 hook

This adds the infrastructure to have netdev specific per-link data both
for mac80211 and the driver in debugfs. For the driver, a new callback
is added which is only used if MLO is supported.

Cherry-picked from: https://patchwork.kernel.org/project/linux-wireless/patch/20230301115906.fb4c947e4df8.I69b3516ddf4c8a7501b395f652d6063444ecad63@changeid/

Signed-off-by: Benjamin Berg <benjamin.berg@intel.com>
Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 include/net/mac80211.h        |  10 ++
 net/mac80211/debugfs_netdev.c | 245 ++++++++++++++++++++++------------
 net/mac80211/debugfs_netdev.h |  21 +--
 net/mac80211/driver-ops.c     |  27 +++-
 net/mac80211/driver-ops.h     |  16 +++
 net/mac80211/ieee80211_i.h    |   4 +
 net/mac80211/link.c           |   5 +-
 7 files changed, 234 insertions(+), 94 deletions(-)

--- a/net/mac80211/debugfs_netdev.c
+++ b/net/mac80211/debugfs_netdev.c
@@ -992,6 +992,16 @@ void ieee80211_debugfs_add_netdev(struct
 
 	add_files(sdata);
 
+	/* Removed the following condition check,
+       	 * if (!(sdata->local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO))
+	 * This condition is not valid for HT,VHT modes  and it will not allow
+	 * to create debugfs files.
+	 * In case of EHT mode, debugfs files will be created in both
+	 * netdev:wlan0 directory as well as in link-0 directory
+	 * TODO : Need to revisit and change the condition.
+	 */
+	add_link_files(&sdata->deflink, sdata->vif.debugfs_dir);
+
 	if (!(sdata->local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO))
 		add_link_files(&sdata->deflink, sdata->vif.debugfs_dir);
 
@@ -999,6 +1009,9 @@ void ieee80211_debugfs_add_netdev(struct
 	if (sdata->vif.link_debugfs[0])
 		return;
 
+	/*TODO : Need to revamp the contents of link0 directory to link-0
+	 * directory
+	 */
 	memset(buf, 0, 10 + IFNAMSIZ);
 	snprintf(buf, 10 + IFNAMSIZ, "link0");
 	sdata->vif.link_debugfs[0] = debugfs_create_dir(buf,
@@ -1041,6 +1054,7 @@ void ieee80211_debugfs_rename_netdev(str
 	debugfs_rename(dir->d_parent, dir, dir->d_parent, buf);
 }
 
+#ifdef CPTCFG_MAC80211_DEBUGFS
 void ieee80211_link_debugfs_add(struct ieee80211_link_data *link)
 {
 	char link_dir_name[10];
@@ -1052,6 +1066,9 @@ void ieee80211_link_debugfs_add(struct i
 	if (WARN_ON(!(link->sdata->local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO)))
 		return;
 
+	if (link->debugfs_dir)
+		return;
+
 	snprintf(link_dir_name, sizeof(link_dir_name),
 		 "link-%d", link->link_id);
 
@@ -1103,3 +1120,4 @@ void ieee80211_link_debugfs_drv_remove(s
 
 	ieee80211_link_debugfs_add(link);
 }
+#endif
--- a/net/mac80211/driver-ops.c
+++ b/net/mac80211/driver-ops.c
@@ -543,7 +543,9 @@ int drv_change_vif_links(struct ieee8021
 				 IEEE80211_MLD_MAX_NUM_LINKS) {
 			link = rcu_access_pointer(sdata->link[link_id]);
 
+#ifdef CPTCFG_MAC80211_DEBUGFS
 			ieee80211_link_debugfs_drv_add(link);
+#endif
 		}
 	}
 
