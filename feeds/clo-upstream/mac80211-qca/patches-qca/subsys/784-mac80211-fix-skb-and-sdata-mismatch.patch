From a5fe53bfa03ffb18098bd7a1617b938b40edaecd Mon Sep 17 00:00:00 2001
From: Rahul Bhattacharjee <quic_rbhattac@quicinc.com>
Date: Wed, 21 Jun 2023 22:40:02 +0530
Subject: [PATCH] mac80211: fix skb and sdata mismatch

Currently, skbs are getting tagged with wrong sdata, i.e even if the
sdata does not support a skb specific band, we are tagging the sdata
along with that.

In issue scenerio, 1 DUT was having 6G Mesh(root) + 2G AP and the other DUT
was having 2G Mesh(child) , and the packets from 2G Mesh were seeing in
6G Mesh, interface.

In this fix, we tag the sdata is the respective skb's band support is
present.

Signed-off-by: Rahul Bhattacharjee <quic_rbhattac@quicinc.com>
---
 net/mac80211/rx.c | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -4322,8 +4322,10 @@ static bool ieee80211_rx_data_set_sta(st
 		rx->link_sta = NULL;
 	}
 
-	if (link_id < 0)
+	if (link_id < 0) {
 		rx->link = &rx->sdata->deflink;
+		WARN_ON(!!rx->sdata->vif.valid_links);
+	}
 	else if (!ieee80211_rx_data_set_link(rx, link_id))
 		return false;
 
@@ -5290,11 +5292,13 @@ static void __ieee80211_rx_handle_packet
 	struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(skb);
 	struct ieee80211_sub_if_data *sdata;
 	struct ieee80211_hdr *hdr;
+	struct wiphy *wiphy = hw->wiphy;
 	__le16 fc;
 	struct ieee80211_rx_data rx;
 	struct ieee80211_sub_if_data *prev;
 	struct rhlist_head *tmp;
-	int err = 0;
+	int err = 0, prev_linkid;
+	bool prev_flag;
 
 	fc = ((struct ieee80211_hdr *)skb->data)->frame_control;
 	memset(&rx, 0, sizeof(rx));
@@ -5402,8 +5406,15 @@ static void __ieee80211_rx_handle_packet
 	}
 
 	prev = NULL;
+	prev_linkid = -1;
+	prev_flag = false;
 
 	list_for_each_entry_rcu(sdata, &local->interfaces, list) {
+		int link_id = -1;
+		struct ieee80211_bss_conf *conf;
+		u16 valid_links = sdata->vif.valid_links;
+		bool flag = false;
+
 		if (!ieee80211_sdata_running(sdata))
 			continue;
 
@@ -5411,28 +5422,103 @@ static void __ieee80211_rx_handle_packet
 		    sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
 			continue;
 
+		if (wiphy->num_hw) {
+			if (valid_links) {
+				for_each_set_bit(link_id, &valid_links,
+						IEEE80211_MLD_MAX_NUM_LINKS) {
+					conf = rcu_dereference(sdata->vif.link_conf[link_id]);
+
+					if (conf && conf->chandef.chan)
+						if (cfg80211_get_hw_idx_by_freq(hw->wiphy, conf->chandef.chan->center_freq) ==
+								cfg80211_get_hw_idx_by_freq(hw->wiphy, status->freq)) {
+							flag = true;
+							break;
+						}
+				}
+			} else {
+				conf = &sdata->vif.bss_conf;
+
+				if (conf && conf->chandef.chan)
+					if (cfg80211_get_hw_idx_by_freq(hw->wiphy, conf->chandef.chan->center_freq) ==
+							cfg80211_get_hw_idx_by_freq(hw->wiphy, status->freq))
+						flag = true;
+			}
+		}
+
 		/*
 		 * frame is destined for this interface, but if it's
 		 * not also for the previous one we handle that after
 		 * the loop to avoid copying the SKB once too much
 		 */
 
-		if (!prev) {
+		if (!wiphy->num_hw || flag) {
+			if (!prev) {
+				prev_linkid = valid_links ? link_id : -1;
+				prev = sdata;
+				prev_flag = flag;
+				continue;
+			}
+
+			rx.sdata = prev;
+			if (prev_flag) {
+				status->link_valid = (prev_linkid >= 0);
+				if (status->link_valid)
+					status->link_id = prev_linkid;
+			}
+			ieee80211_rx_for_interface(&rx, skb, false);
+
+			prev_linkid = valid_links ? link_id : -1;
 			prev = sdata;
-			continue;
+			prev_flag = flag;
 		}
+	}
 
-		rx.sdata = prev;
-		ieee80211_rx_for_interface(&rx, skb, false);
+	if (wiphy->num_hw) {
+		if (prev) {
+			unsigned int link_id;
+			struct ieee80211_bss_conf *conf;
+			u16 valid_links = prev->vif.valid_links;
+			bool flag = false;
+
+			if (valid_links) {
+				for_each_set_bit(link_id, &valid_links,
+						IEEE80211_MLD_MAX_NUM_LINKS) {
+					conf = rcu_dereference(prev->vif.link_conf[link_id]);
+
+					if (conf && conf->chandef.chan) {
+						if (cfg80211_get_hw_idx_by_freq(hw->wiphy, conf->chandef.chan->center_freq) ==
+								cfg80211_get_hw_idx_by_freq(hw->wiphy, status->freq)) {
+							flag = true;
+							break;
+						}
+					}
+				}
+			} else {
+				conf = &prev->vif.bss_conf;
+
+				if (conf && conf->chandef.chan)
+					if (cfg80211_get_hw_idx_by_freq(hw->wiphy, conf->chandef.chan->center_freq) ==
+							cfg80211_get_hw_idx_by_freq(hw->wiphy, status->freq))
+						flag = true;
+			}
 
-		prev = sdata;
-	}
+			if (flag) {
+				rx.sdata = prev;
+				status->link_valid = !!valid_links;
+				if (status->link_valid)
+					status->link_id = link_id;
 
-	if (prev) {
-		rx.sdata = prev;
+				if (ieee80211_rx_for_interface(&rx, skb, true))
+					return;
+			}
+		}
+	} else {
+		if (prev) {
+			rx.sdata = prev;
 
-		if (ieee80211_rx_for_interface(&rx, skb, true))
-			return;
+			if (ieee80211_rx_for_interface(&rx, skb, true))
+				return;
+		}
 	}
 
  out:
