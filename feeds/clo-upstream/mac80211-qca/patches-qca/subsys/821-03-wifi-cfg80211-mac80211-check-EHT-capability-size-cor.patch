From e184ecbe94e7e3d83bcefed6900916506713dfca Mon Sep 17 00:00:00 2001
From: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
Date: Mon, 3 Jul 2023 15:26:04 +0530
Subject: [PATCH 01/16] wifi: cfg80211/mac80211: check EHT capability size
 correctly

For AP/non-AP the EHT MCS/NSS subfield size differs, the
4-octet subfield is only used for 20 MHz-only non-AP STA.
Pass an argument around everywhere to be able to parse it
properly.

Cherry picked from the patch:
https://git.kernel.org/pub/scm/linux/kernel/git/wireless/wireless-next.git/commit/?id=ea5cba269fb1fe22b84f4d01bb3d56320e6ffa3e

Signed-off-by: Johannes Berg <johannes.berg@intel.com>
Signed-off-by: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c |  3 +-
 include/linux/ieee80211.h             | 14 ++++++---
 net/mac80211/eht.c                    | 11 ++++---
 net/mac80211/ieee80211_i.h            | 20 +++++++++++--
 net/mac80211/mesh.c                   |  2 +-
 net/mac80211/mlme.c                   | 43 +++++++++++++++++++++------
 net/mac80211/util.c                   | 29 ++++++++++++------
 net/mac80211/vht.c                    |  3 +-
 net/wireless/core.c                   | 16 ++++++++++
 net/wireless/nl80211.c                | 22 ++++++++++----
 10 files changed, 126 insertions(+), 37 deletions(-)

--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -18,6 +18,7 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 				    struct link_sta_info *link_sta)
 {
 	struct ieee80211_sta_eht_cap *eht_cap = &link_sta->pub->eht_cap;
+	struct ieee80211_he_cap_elem *he_cap_ie_elem = (void *)he_cap_ie;
 	u8 eht_ppe_size = 0;
 	u8 mcs_nss_size;
 	u8 eht_total_size = sizeof(eht_cap->eht_cap_elem);
@@ -30,12 +31,11 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 		return;
 
 	mcs_nss_size = eht_cap_len - sizeof(struct ieee80211_eht_cap_elem_fixed);
-	/* WAR: compute based on capabilities
-	 * mcs_nss_size = ieee80211_eht_mcs_nss_size(he_cap_ie_elem,
+	/* WAR: compute based on capabilities*/
+	mcs_nss_size = ieee80211_eht_mcs_nss_size(he_cap_ie_elem,
 						  &eht_cap_ie_elem->fixed,
 						  sdata->vif.type ==
 							NL80211_IFTYPE_STATION);
-	*/
 
 	eht_total_size += mcs_nss_size;
 
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -4836,6 +4836,7 @@ static int ieee80211_prep_channel(struct
 	bool is_5ghz = cbss->channel->band == NL80211_BAND_5GHZ;
 	struct ieee80211_bss *bss = (void *)cbss->priv;
 	struct ieee80211_elems_parse_params parse_params = {
+		.bss = cbss,
 		.link_id = -1,
 		.from_ap = true,
 	};
--- a/net/mac80211/vht.c
+++ b/net/mac80211/vht.c
@@ -541,7 +541,8 @@ void ieee80211_sta_set_rx_nss(struct lin
 	if (link_sta->pub->eht_cap.has_eht) {
 		int i;
 		int eht_mcs_set_size = ieee80211_eht_mcs_nss_size(&link_sta->pub->he_cap,
-								  &link_sta->pub->eht_cap);
+								  &link_sta->pub->eht_cap,
+								  false);
 		const u8 *rx_nss_mcs = (void *)&link_sta->pub->eht_cap.eht_mcs_nss_supp;
 
 		/* get the max nss for EHT over all possible bandwidths and mcs */
