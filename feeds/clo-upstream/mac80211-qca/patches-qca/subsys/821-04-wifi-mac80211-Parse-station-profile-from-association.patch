From 1d2e4c833c74b44930f860422f89d0ecb3be3b29 Mon Sep 17 00:00:00 2001
From: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
Date: Mon, 3 Jul 2023 15:42:07 +0530
Subject: [PATCH 02/16] wifi: mac80211: Parse station profile from association
 response

When processing an association response frame for a Multi-Link
connection, extract the per station profile for each additional
link, and use it for parsing the link elements.

As the Multi-Link element might be fragmented, add support for
reassembling a fragmented element. To simplify memory management
logic, extend 'struct ieee802_11_elems' to hold a scratch buffer,
which is used for the defragmentation. Once an element is
reconstructed in the scratch area, point the corresponding element
pointer to it. Currently only defragmentation of Multi-Link element
and the contained per-STA profile subelement is supported.

Signed-off-by: Ilan Peer <ilan.peer@intel.com>
Signed-off-by: Johannes Berg <johannes.berg@intel.com>

Signed-off-by: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
---
 include/linux/ieee80211.h  |   1 +
 net/mac80211/ieee80211_i.h |   1 +
 net/mac80211/mlme.c        |  17 ++++-
 net/mac80211/util.c        | 147 ++++++++++++++++++++++++++++++++++++-
 4 files changed, 161 insertions(+), 5 deletions(-)

--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2371,6 +2371,7 @@ struct ieee80211_elems_parse_params {
 	struct cfg80211_bss *bss;
 	int link_id;
 	bool from_ap;
+	size_t scratch_len;
 };
 
 struct ieee802_11_elems *
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -1532,6 +1532,9 @@ static void ieee80211_mle_get_sta_prof(s
 		if (!(control & IEEE80211_MLE_STA_CONTROL_COMPLETE_PROFILE))
 			return;
 
+		elems->prof = prof;
+		elems->sta_prof_len = sub->datalen;
+
 		/* the sub element can be fragmented */
 		sta_prof_len =
 			cfg80211_defragment_element(sub,
@@ -1619,7 +1622,7 @@ ieee802_11_parse_elems_full(struct ieee8
 	const struct element *non_inherit = NULL;
 	u8 *nontransmitted_profile;
 	int nontransmitted_profile_len = 0;
-	size_t scratch_len = 3 * params->len;
+	size_t scratch_len = params->scratch_len ?: 2 * params->len;
 
 	elems = kzalloc(sizeof(*elems) + scratch_len, GFP_ATOMIC);
 	if (!elems)
