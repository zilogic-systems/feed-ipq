From a836ed3cfd7285ac57c947cbc5a7085599af7d99 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Fri, 8 Sep 2023 16:18:49 +0530
Subject: [PATCH] mac80211: fix compilation and crash issue

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 include/net/mac80211.h        |  8 ++++++++
 net/mac80211/debugfs_netdev.c |  2 +-
 net/mac80211/sta_info.c       | 21 ---------------------
 net/mac80211/status.c         | 24 ++++++++++++++++++++++++
 4 files changed, 33 insertions(+), 22 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1326,7 +1326,11 @@ struct ieee80211_tx_status {
 	ktime_t ack_hwtstamp;
 	u8 n_rates;
 
+#if LINUX_VERSION_IS_GEQ(4,19,0)
 	struct list_head *free_list;
+#else
+	struct sk_buff_head *free_list;
+#endif
 	u32 mpdu_succ;
 	u32 mpdu_fail;
 };
@@ -5369,6 +5373,10 @@ void ieee80211_tx_status_ext(struct ieee
  *	(NULL for multicast packets)
  * @info: tx status information
  */
+void ieee80211_tx_status_8023(struct ieee80211_hw *hw,
+                               struct ieee80211_vif *vif,
+                               struct sk_buff *skb);
+
 static inline void ieee80211_tx_status_noskb(struct ieee80211_hw *hw,
 					     struct ieee80211_sta *sta,
 					     struct ieee80211_tx_info *info)
--- a/net/mac80211/debugfs_netdev.c
+++ b/net/mac80211/debugfs_netdev.c
@@ -981,7 +981,7 @@ void ieee80211_debugfs_add_netdev(struct
 	char buf[10 + IFNAMSIZ];
 	int i = 0;
 
-	sprintf(buf, 10 + IFNAMSIZ, "netdev:%s", sdata->name);
+	snprintf(buf, 10 + IFNAMSIZ, "netdev:%s", sdata->name);
 	sdata->vif.debugfs_dir = debugfs_create_dir(buf,
 		sdata->local->hw.wiphy->debugfsdir);
 	sdata->debugfs.subdir_stations = debugfs_create_dir("stations",
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -1448,19 +1448,6 @@ static void __sta_info_destroy_part2(str
 		WARN_ON_ONCE(ret);
 	}
 
-	/* Flush queues before removing keys, as that might remove them
-	 * from hardware, and then depending on the offload method, any
-	 * frames sitting on hardware queues might be sent out without
-	 * any encryption at all.
-	 */
-	if (local->ops->set_key) {
-		if (local->ops->flush_sta)
-			drv_flush_sta(local, sta->sdata, sta);
-		else
-			ieee80211_flush_queues(local, sta->sdata, false);
-	}
-
-	/* now keys can no longer be reached */
 	ieee80211_free_sta_keys(local, sta);
 
 	/* disable TIM bit - last chance to tell driver */
--- a/net/mac80211/status.c
+++ b/net/mac80211/status.c
@@ -1281,6 +1281,30 @@ EXPORT_SYMBOL(ieee80211_ppeds_tx_update_
 #endif /* CPTCFG_MAC80211_BONDED_SUPPORT */
 
 
+void ieee80211_tx_status_8023(struct ieee80211_hw *hw,
+                              struct ieee80211_vif *vif,
+                              struct sk_buff *skb)
+{
+        struct ieee80211_sub_if_data *sdata;
+        struct ieee80211_tx_status status = {
+                .skb = skb,
+                .info = IEEE80211_SKB_CB(skb),
+        };
+        struct sta_info *sta;
+
+        sdata = vif_to_sdata(vif);
+
+        rcu_read_lock();
+
+        if (!ieee80211_lookup_ra_sta(sdata, skb, &sta) && !IS_ERR(sta))
+                status.sta = &sta->sta;
+
+        ieee80211_tx_status_ext(hw, &status);
+
+        rcu_read_unlock();
+}
+EXPORT_SYMBOL(ieee80211_tx_status_8023);
+
 void ieee80211_report_low_ack(struct ieee80211_sta *pubsta, u32 num_packets)
 {
 	struct sta_info *sta = container_of(pubsta, struct sta_info, sta);
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -9632,7 +9632,7 @@ void cfg80211_bss_flush(struct wiphy *wi
  * @color_bitmap: representations of the colors that the local BSS is aware of
  * @link_id: valid link_id in case of MLO or 0 for non-MLO.
  */
-int cfg80211_bss_color_notify(struct net_device *dev,
+int cfg80211_bss_color_notify(struct net_device *dev, gfp_t gfp,
 			      enum nl80211_commands cmd, u8 count,
 			      u64 color_bitmap,
 			      unsigned int link_id);
@@ -9644,10 +9644,10 @@ int cfg80211_bss_color_notify(struct net
  * @link_id: valid link_id in case of MLO or 0 for non-MLO.
  */
 static inline int cfg80211_obss_color_collision_notify(struct net_device *dev,
-						       u64 color_bitmap,
+						       u64 color_bitmap, gfp_t gfp,
 						       unsigned int link_id)
 {
-	return cfg80211_bss_color_notify(dev, NL80211_CMD_OBSS_COLOR_COLLISION,
+	return cfg80211_bss_color_notify(dev, gfp, NL80211_CMD_OBSS_COLOR_COLLISION,
 					 0, color_bitmap, link_id);
 }
 
@@ -9663,7 +9663,7 @@ static inline int cfg80211_color_change_
 						       u8 count,
 						       unsigned int link_id)
 {
-	return cfg80211_bss_color_notify(dev, NL80211_CMD_COLOR_CHANGE_STARTED,
+	return cfg80211_bss_color_notify(dev, GFP_KERNEL, NL80211_CMD_COLOR_CHANGE_STARTED,
 					 count, 0, link_id);
 }
 
@@ -9677,7 +9677,7 @@ static inline int cfg80211_color_change_
 static inline int cfg80211_color_change_aborted_notify(struct net_device *dev,
 						      unsigned int link_id)
 {
-	return cfg80211_bss_color_notify(dev, NL80211_CMD_COLOR_CHANGE_ABORTED,
+	return cfg80211_bss_color_notify(dev, GFP_KERNEL, NL80211_CMD_COLOR_CHANGE_ABORTED,
 					 0, 0, link_id);
 }
 
@@ -9691,7 +9691,7 @@ static inline int cfg80211_color_change_
 static inline int cfg80211_color_change_notify(struct net_device *dev,
 					      unsigned int link_id)
 {
-	return cfg80211_bss_color_notify(dev,
+	return cfg80211_bss_color_notify(dev, GFP_KERNEL,
 					 NL80211_CMD_COLOR_CHANGE_COMPLETED,
 					 0, 0, link_id);
 }
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -5360,7 +5360,7 @@ void ieee80211_color_collision_detection
 	struct ieee80211_sub_if_data *sdata = link->sdata;
 
 	sdata_lock(sdata);
-	cfg80211_obss_color_collision_notify(sdata->dev, link->color_bitmap, link->link_id);
+	cfg80211_obss_color_collision_notify(sdata->dev, link->color_bitmap, GFP_KERNEL, link->link_id);
 	sdata_unlock(sdata);
 }
 
@@ -5425,7 +5425,7 @@ ieee80211_obss_color_collision_notify(st
 				     msecs_to_jiffies(500));
 	rcu_read_unlock();
 
-	cfg80211_obss_color_collision_notify(sdata->dev, color_bitmap,
+	cfg80211_obss_color_collision_notify(sdata->dev, color_bitmap, gfp,
 					     link_id);
 }
 EXPORT_SYMBOL_GPL(ieee80211_obss_color_collision_notify);
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -20484,7 +20484,7 @@ void cfg80211_ch_switch_started_notify(s
 }
 EXPORT_SYMBOL(cfg80211_ch_switch_started_notify);
 
-int cfg80211_bss_color_notify(struct net_device *dev,
+int cfg80211_bss_color_notify(struct net_device *dev, gfp_t gfp,
 			      enum nl80211_commands cmd, u8 count,
 			      u64 color_bitmap,
 			      unsigned int link_id)
@@ -20499,7 +20499,7 @@ int cfg80211_bss_color_notify(struct net
 
 	trace_cfg80211_bss_color_notify(dev, cmd, count, color_bitmap);
 
-	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
+	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
 	if (!msg)
 		return -ENOMEM;
 
@@ -20526,7 +20526,7 @@ int cfg80211_bss_color_notify(struct net
 	genlmsg_end(msg, hdr);
 
 	return genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy),
-				       msg, 0, NL80211_MCGRP_MLME, GFP_KERNEL);
+				       msg, 0, NL80211_MCGRP_MLME, gfp);
 
 nla_put_failure:
 	nlmsg_free(msg);
