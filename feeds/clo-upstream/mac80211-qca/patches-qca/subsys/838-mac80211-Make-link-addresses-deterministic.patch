From a82b4abad9dc473ef1c00182f258fb10f7b8fcc3 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Wed, 4 Oct 2023 17:29:49 +0530
Subject: [PATCH] mac80211: Make link addresses deterministic

Currently ML Station link addresses are randomized. The link
on which association takes place uses the MLD address/vif address
and the other partner link addresses are randomized.

Though there is no harm in using randomized addresses, it would be
better to configure deterministic addresses based on certain offsets
from the MLD address for ease of use/debug.

Also this helps in some AP implementations which gets confused when
a link picks up another address which was used previously by another
link when ML STA moves from single to multi link or vice versa.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 net/mac80211/mlme.c | 25 ++++++++++++++++++-------
 1 file changed, 18 insertions(+), 7 deletions(-)

--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -6916,8 +6916,15 @@ void ieee80211_mgd_setup_link(struct iee
 				sdata->u.mgd.assoc_data->link[link_id].addr);
 	} else if (link != &sdata->deflink) {
 		ether_addr_copy(link->conf->addr, sdata->vif.addr);
+		if (link_id >= 0)
+			link->conf->addr[5] += link_id;
 	} else if (!is_valid_ether_addr(link->conf->addr)) {
-		eth_random_addr(link->conf->addr);
+		if (link_id >= 0) {
+			ether_addr_copy(link->conf->addr, sdata->vif.addr);
+			link->conf->addr[5] += link_id;
+		}  else {
+			eth_random_addr(link->conf->addr);
+		}
 	}
 }
 
@@ -6971,7 +6978,10 @@ static int ieee80211_prep_connection(str
 		err = -ENOLINK;
 		goto out_err;
 	}
-
+	if (mlo && !is_valid_ether_addr(link->conf->addr)) {
+		ether_addr_copy(link->conf->addr, sdata->vif.addr);
+		link->conf->addr[5] += link_id;
+	}
 	if (WARN_ON(!ifmgd->auth_data && !ifmgd->assoc_data)) {
 		err = -EINVAL;
 		goto out_err;
@@ -7495,11 +7505,13 @@ int ieee80211_mgd_assoc(struct ieee80211
 			if (!req->links[i].bss)
 				continue;
 			link = sdata_dereference(sdata->link[i], sdata);
-			if (link)
+			if (link) {
 				ether_addr_copy(assoc_data->link[i].addr,
 						link->conf->addr);
-			else
-				eth_random_addr(assoc_data->link[i].addr);
+			} else {
+				ether_addr_copy(assoc_data->link[i].addr, sdata->vif.addr);
+				assoc_data->link[i].addr[5] += i;
+			}
 		}
 	} else {
 		memcpy(assoc_data->link[0].addr, sdata->vif.addr, ETH_ALEN);
