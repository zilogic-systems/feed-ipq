From ddf93e0bd5772488719385e8de92337caccd6489 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Wed, 29 Nov 2023 15:48:00 +0530
Subject: [PATCH] wifi: mac80211: allow DFS/CSA on a link if scan going on
 other link

Currently if a scan is going on, -EBUSY  is returned if DFS or channel
switch is started at that point. However, for Multi Link Operation (MLO)
multiple hardwares could be clubbed under single wiphy. Hence in such case
if scan is going on a different underlying hardware and DFS or channel
switch is requested in a different hardware, it can be allowed
simultaneously.

Add logic to check that the requested scan is using what all underlying
hardwares and if the hardware on which DFS or channel switch requested is
not being used, allow those operation or else return -EBUSY.

For non-MLO, there is no change.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 net/mac80211/cfg.c | 59 ++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 57 insertions(+), 2 deletions(-)

--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3815,6 +3815,69 @@ static int ieee80211_set_bitrate_mask(st
 	return 0;
 }
 
+static bool
+__ieee80211_is_scan_ongoing(struct wiphy *wiphy,
+			    struct ieee80211_local *local,
+			    struct cfg80211_chan_def *chandef)
+{
+	struct cfg80211_scan_request *scan_req;
+	struct ieee80211_channel *chan;
+	struct ieee80211_roc_work *roc;
+	int i, chan_hw_idx, req_hw_idx;
+	bool ret = false;
+
+	if (!list_empty(&local->roc_list) || local->scanning)
+		ret = true;
+
+	if (wiphy->num_hw < 2)
+		return ret;
+
+	/* Multiple HWs are grouped under same wiphy. If not scanning then return
+	 * now itself
+	 */
+	if (!ret)
+		return ret;
+
+	req_hw_idx = cfg80211_get_hw_idx_by_chan(wiphy, chandef->chan);
+	if (req_hw_idx == -1)
+		return true;
+
+	if (local->scanning) {
+		rcu_read_lock();
+		scan_req = rcu_dereference(local->scan_req);
+		/* scanning is going on but info is not there. Should not happen
+		 * but if it does, let's not take risk and assume we can't use
+		 * the hw hence return true
+		 */
+		if (WARN_ON(!scan_req)) {
+			rcu_read_unlock();
+			return true;
+		}
+
+		for (i = 0; i < scan_req->n_channels; i++) {
+			chan = scan_req->channels[i];
+			chan_hw_idx = cfg80211_get_hw_idx_by_chan(wiphy, chan);
+			if (chan_hw_idx == req_hw_idx) {
+				rcu_read_unlock();
+				return true;
+			}
+		}
+		rcu_read_unlock();
+		return false;
+	}
+
+	if (!list_empty(&local->roc_list)) {
+		list_for_each_entry(roc, &local->roc_list, list) {
+			chan_hw_idx = cfg80211_get_hw_idx_by_chan(wiphy, roc->chan);
+			if (chan_hw_idx == req_hw_idx)
+				return true;
+		}
+		return false;
+	}
+
+	return false;
+}
+
 static int ieee80211_start_radar_detection(struct wiphy *wiphy,
 					   struct net_device *dev,
 					   unsigned int link_id,
@@ -3831,7 +3894,7 @@ static int ieee80211_start_radar_detecti
 		return -ENOLINK;
 
 	mutex_lock(&local->mtx);
-	if (!list_empty(&local->roc_list) || local->scanning) {
+	if (__ieee80211_is_scan_ongoing(wiphy, local, chandef)) {
 		err = -EBUSY;
 		goto out_unlock;
 	}
@@ -4405,7 +4468,7 @@ __ieee80211_channel_switch(struct wiphy
 	sdata_assert_lock(sdata);
 	lockdep_assert_held(&local->mtx);
 
-	if (!list_empty(&local->roc_list) || local->scanning)
+	if (__ieee80211_is_scan_ongoing(wiphy, local, &params->chandef))
 		return -EBUSY;
 
 	if (sdata->wdev.links[link_id].cac_started)
