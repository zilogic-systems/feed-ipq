From 637d8c037cb92d485e6f96ebb0a989285d49169f Mon Sep 17 00:00:00 2001
From: Sarika Sharma <quic_sarishar@quicinc.com>
Date: Wed, 13 Dec 2023 17:35:24 +0530
Subject: [PATCH] wifi: mac80211: add EHT radiotap header construction logic

Driver advertises U_SIG and EHT info in the flag under rx_status
structure. Based on this flag, corresponding EHT and U_SIG
information are added in the radiotap header.

Signed-off-by: Sarika Sharma <quic_sarishar@quicinc.com>
---
 include/net/ieee80211_radiotap.h | 11 ++++
 include/net/mac80211.h           |  7 +++
 net/mac80211/rx.c                | 89 ++++++++++++++++++++++++++++++++
 3 files changed, 107 insertions(+)

--- a/include/net/ieee80211_radiotap.h
+++ b/include/net/ieee80211_radiotap.h
@@ -92,6 +92,11 @@ enum ieee80211_radiotap_presence {
 	IEEE80211_RADIOTAP_EHT = 34,
 };
 
+enum ieee80211_radiotap_presence_ext {
+	IEEE80211_RADIOTAP_USIG_INFO	= 1,
+	IEEE80211_RADIOTAP_EHT_INFO	= 2,
+};
+
 /* for IEEE80211_RADIOTAP_FLAGS */
 enum ieee80211_radiotap_flags {
 	IEEE80211_RADIOTAP_F_CFP = 0x01,
@@ -573,6 +578,12 @@ enum ieee80211_radiotap_eht_usig_tb {
 	IEEE80211_RADIOTAP_EHT_USIG2_TB_B20_B25_TAIL		= 0xfc000000,
 };
 
+struct ieee80211_radiotap_usig {
+	__le32 usig_cmn;
+	__le32 eht_mu_ppdu;
+	__le32 eht_tb_ppdu;
+};
+
 /**
  * ieee80211_get_radiotap_len - get radiotap header length
  * @data: pointer to the header
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1501,6 +1501,9 @@ ieee80211_tx_info_clear_status(struct ie
  *	known the frame shouldn't be reported.
  * @RX_FLAG_8023: the frame has an 802.3 header (decap offload performed by
  *	hardware or driver)
+ *	@RX_FLAG_USIG_HEADER: Universal field carries information necessary to
+ *	interpret EHT PPDUs
+ *	RX_FLAG_EHT_HEADER: EHT radiotap data is present
  */
 enum mac80211_rx_flags {
 	RX_FLAG_MMIC_ERROR		= BIT(0),
@@ -1510,7 +1513,7 @@ enum mac80211_rx_flags {
 	RX_FLAG_IV_STRIPPED		= BIT(4),
 	RX_FLAG_FAILED_FCS_CRC		= BIT(5),
 	RX_FLAG_FAILED_PLCP_CRC 	= BIT(6),
-	/* one free bit at 7 */
+	RX_FLAG_USIG_HEADER     = BIT(7),
 	RX_FLAG_NO_SIGNAL_VAL		= BIT(8),
 	RX_FLAG_AMPDU_DETAILS		= BIT(9),
 	RX_FLAG_PN_VALIDATED		= BIT(10),
@@ -1536,6 +1539,7 @@ enum mac80211_rx_flags {
 	RX_FLAG_RADIOTAP_LSIG		= BIT(28),
 	RX_FLAG_NO_PSDU			= BIT(29),
 	RX_FLAG_8023			= BIT(30),
+	RX_FLAG_EHT_HEADER      = BIT(31),
 };
 
 /**
@@ -1604,6 +1608,7 @@ enum mac80211_rx_encoding {
  *	HT or VHT is used (%RX_FLAG_HT/%RX_FLAG_VHT)
  * @nss: number of streams (VHT, HE and EHT only)
  * @flag: %RX_FLAG_\*
+ * @ext_flag: %RX_FLAG_\*
  * @encoding: &enum mac80211_rx_encoding
  * @bw: &enum rate_info_bw
  * @enc_flags: uses bits from &enum mac80211_rx_encoding_flags
@@ -1655,6 +1660,7 @@ struct ieee80211_rx_status {
 	s8 chain_signal[IEEE80211_MAX_CHAINS];
 	u8 zero_length_psdu_type;
 	u8 link_valid:1, link_id:4;
+	u8 eht_num_user;
 };
 
 static inline u32
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -143,6 +143,12 @@ ieee80211_rx_radiotap_hdrlen(struct ieee
 	/* always present fields */
 	len = sizeof(struct ieee80211_radiotap_header) + 8;
 
+	/* EHT present fields */
+	if ((status->flag & RX_FLAG_EHT_HEADER) ||
+	    (status->flag & RX_FLAG_USIG_HEADER)) {
+		len += 4;
+	}
+
 	/* allocate extra bitmaps */
 	if (status->chains)
 		len += 4 * hweight8(status->chains);
@@ -202,6 +208,21 @@ ieee80211_rx_radiotap_hdrlen(struct ieee
 		BUILD_BUG_ON(sizeof(struct ieee80211_radiotap_lsig) != 4);
 	}
 
+	if (status->flag & RX_FLAG_USIG_HEADER &&
+	    status->encoding == RX_ENC_EHT) {
+		len = ALIGN(len, 4);
+		len += 12;
+		BUILD_BUG_ON(sizeof(struct ieee80211_radiotap_usig) != 12);
+	}
+
+	if (status->flag & RX_FLAG_EHT_HEADER &&
+	    status->encoding == RX_ENC_EHT) {
+		len = ALIGN(len, 4);
+		len += 40;
+		len += status->eht_num_user * 4;
+		BUILD_BUG_ON(sizeof(struct ieee80211_radiotap_eht) != 40);
+	}
+
 	if (status->chains) {
 		/* antenna and antenna signal fields */
 		len += 2 * hweight8(status->chains);
@@ -224,6 +245,16 @@ ieee80211_rx_radiotap_hdrlen(struct ieee
 			tlv_offset +=
 				sizeof(struct ieee80211_radiotap_lsig);
 
+		if (status->flag & RX_FLAG_USIG_HEADER)
+			tlv_offset +=
+				sizeof(struct ieee80211_radiotap_usig);
+		if (status->flag & RX_FLAG_EHT_HEADER) {
+			tlv_offset +=
+				sizeof(struct ieee80211_radiotap_eht);
+			tlv_offset +=
+				status->eht_num_user * sizeof(u32);
+		}
+
 		/* ensure 4 byte alignment for TLV */
 		len = ALIGN(len, 4);
 
@@ -330,6 +361,14 @@ ieee80211_add_rx_radiotap_header(struct
 	struct ieee80211_radiotap_he he = {};
 	struct ieee80211_radiotap_he_mu he_mu = {};
 	struct ieee80211_radiotap_lsig lsig = {};
+	struct ieee80211_radiotap_usig usig = {};
+	struct ieee80211_radiotap_eht eht = {};
+	u32 *user_info;
+	bool rhdr_ext = false;
+
+	if ((status->flag & RX_FLAG_USIG_HEADER) ||
+	    (status->flag & RX_FLAG_EHT_HEADER))
+		rhdr_ext = true;
 
 	if (status->flag & RX_FLAG_RADIOTAP_HE) {
 		he = *(struct ieee80211_radiotap_he *)skb->data;
@@ -352,6 +391,20 @@ ieee80211_add_rx_radiotap_header(struct
 		tlvs_len = skb_mac_header(skb) - skb->data;
 	}
 
+	if (status->flag & RX_FLAG_USIG_HEADER) {
+		usig = *(struct ieee80211_radiotap_usig *)skb->data;
+		skb_pull(skb, sizeof(usig));
+		WARN_ON_ONCE(status->encoding != RX_ENC_EHT);
+	}
+
+	if (status->flag & RX_FLAG_EHT_HEADER) {
+		eht = *(struct ieee80211_radiotap_eht *)skb->data;
+		skb_pull(skb, sizeof(eht));
+		user_info = (u32 *)skb->data;
+		skb_pull(skb, status->eht_num_user * sizeof(u32));
+		WARN_ON_ONCE(status->encoding != RX_ENC_EHT);
+	}
+
 	mpdulen = skb->len;
 	if (!(has_fcs && ieee80211_hw_check(&local->hw, RX_INCLUDES_FCS)))
 		mpdulen += FCS_LEN;
@@ -382,6 +435,19 @@ ieee80211_add_rx_radiotap_header(struct
 	if (status->flag & RX_FLAG_RADIOTAP_TLV_AT_END)
 		it_present_val |= BIT(IEEE80211_RADIOTAP_TLV);
 
+	if (rhdr_ext) {
+		it_present_val |= BIT(IEEE80211_RADIOTAP_EXT);
+		put_unaligned_le32(it_present_val, it_present);
+		it_present_val = 0;
+		it_present++;
+		/* IEEE80211_RADIOTAP_USIG */
+		if (status->flag & RX_FLAG_USIG_HEADER)
+			it_present_val |= BIT(IEEE80211_RADIOTAP_USIG_INFO);
+		/* IEEE80211_RADIOTAP_EHT */
+		if (status->flag & RX_FLAG_EHT_HEADER)
+			it_present_val |= BIT(IEEE80211_RADIOTAP_EHT_INFO);
+	}
+
 	put_unaligned_le32(it_present_val, it_present);
 
 	/* This references through an offset into it_optional[] rather
@@ -706,6 +772,22 @@ ieee80211_add_rx_radiotap_header(struct
 		*pos++ = status->chain_signal[chain];
 		*pos++ = chain;
 	}
+
+	if (status->flag & RX_FLAG_USIG_HEADER) {
+		while ((pos - (u8 *)rthdr) & 1)
+			pos++;
+		memcpy(pos, &usig, sizeof(usig));
+		pos += sizeof(usig);
+	}
+
+	if (status->flag & RX_FLAG_EHT_HEADER) {
+		while ((pos - (u8 *)rthdr) & 1)
+			pos++;
+		memcpy(pos, &eht, sizeof(eht));
+		pos += sizeof(eht);
+		memcpy(pos, user_info, (status->eht_num_user * sizeof(u32)));
+		pos += status->eht_num_user * sizeof(u32);
+	}
 }
 
 static struct sk_buff *
@@ -799,6 +881,14 @@ ieee80211_rx_monitor(struct ieee80211_lo
 	if (status->flag & RX_FLAG_RADIOTAP_TLV_AT_END)
 		rtap_space += skb_mac_header(origskb) - &origskb->data[rtap_space];
 
+	if (status->flag & RX_FLAG_USIG_HEADER)
+		rtap_space += sizeof(struct ieee80211_radiotap_usig);
+
+	if (status->flag & RX_FLAG_EHT_HEADER) {
+		rtap_space += sizeof(struct ieee80211_radiotap_eht);
+		rtap_space += (status->eht_num_user * sizeof(u32));
+	}
+
 	min_head_len = rtap_space;
 
 	/*
