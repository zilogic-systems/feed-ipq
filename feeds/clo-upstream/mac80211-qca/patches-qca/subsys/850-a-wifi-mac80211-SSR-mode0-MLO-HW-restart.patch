From 4f80511e4bee91ace7c8349ba02ea6321dc15f68 Mon Sep 17 00:00:00 2001
From: Harish Rachakonda <quic_rachakon@quicinc.com>
Date: Fri, 24 Nov 2023 17:18:54 +0530
Subject: [PATCH 1/1] wifi: mac80211: SSR mode0 MLO HW restart

Implement proper reconfiguration for interfaces that are
doing MLO, in order to be able to recover from HW restart
correctly.

Signed-off-by: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
Signed-off-by: Harish Rachakonda <quic_rachakon@quicinc.com>
---
 net/mac80211/main.c |   1 +
 net/mac80211/util.c | 267 ++++++++++++++++++++------------------------
 2 files changed, 125 insertions(+), 143 deletions(-)

--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -208,6 +208,7 @@ int ieee80211_hw_config(struct ieee80211
 
 #define BSS_CHANGED_VIF_CFG_FLAGS (BSS_CHANGED_ASSOC |\
 				   BSS_CHANGED_IDLE |\
+				   BSS_CHANGED_PS |\
 				   BSS_CHANGED_IBSS |\
 				   BSS_CHANGED_ARP_FILTER |\
 				   BSS_CHANGED_SSID)
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -2436,6 +2436,7 @@ static void ieee80211_reconfig_stations(
 		     state < sta->sta_state; state++)
 			WARN_ON(drv_sta_state(local, sta->sdata, sta, state,
 					      state + 1));
+		msleep(40);
 	}
 	mutex_unlock(&local->sta_mtx);
 }
@@ -2481,126 +2482,6 @@ static int ieee80211_reconfig_nan(struct
 	return 0;
 }
 
-static int ieee80211_reconfig_link_bss(struct ieee80211_sub_if_data *sdata,
-				       struct ieee80211_link_data *link,
-				       struct ieee80211_bss_conf *link_conf)
-{
-	struct ieee80211_local *local = sdata->local;
-	int i, res, changed = 0;
-
-	switch (sdata->vif.type) {
-	case NL80211_IFTYPE_AP_VLAN:
-	case NL80211_IFTYPE_MONITOR:
-		break;
-	case NL80211_IFTYPE_ADHOC:
-		if (sdata->vif.cfg.ibss_joined)
-			WARN_ON(drv_join_ibss(local, sdata));
-		fallthrough;
-	default:
-		ieee80211_reconfig_stations(sdata);
-		fallthrough;
-	case NL80211_IFTYPE_AP: /* AP stations are handled later */
-		for (i = 0; i < IEEE80211_NUM_ACS; i++)
-			drv_conf_tx(local, link, i,
-					&link->tx_conf[i]);
-		break;
-	}
-
-	/* common change flags for all interface types */
-	changed = BSS_CHANGED_ERP_CTS_PROT |
-		  BSS_CHANGED_ERP_PREAMBLE |
-		  BSS_CHANGED_ERP_SLOT |
-		  BSS_CHANGED_HT |
-		  BSS_CHANGED_BASIC_RATES |
-		  BSS_CHANGED_BEACON_INT |
-		  BSS_CHANGED_BSSID |
-		  BSS_CHANGED_CQM |
-		  BSS_CHANGED_QOS |
-		  BSS_CHANGED_IDLE |
-		  BSS_CHANGED_TXPOWER |
-		  BSS_CHANGED_MCAST_RATE;
-
-	if (link_conf->mu_mimo_owner)
-		changed |= BSS_CHANGED_MU_GROUPS;
-
-	switch (sdata->vif.type) {
-	case NL80211_IFTYPE_STATION:
-		changed |= BSS_CHANGED_PS;
-		changed &= ~BSS_CHANGED_IDLE;
-		ieee80211_link_info_change_notify(sdata, link, changed);
-
-		changed = BSS_CHANGED_ASSOC |
-			  BSS_CHANGED_ARP_FILTER |
-			  BSS_CHANGED_IDLE;
-
-		ieee80211_vif_cfg_change_notify(sdata, changed);
-		changed = 0;
-		/* Re-send beacon info report to the driver */
-		if (link->u.mgd.have_beacon)
-			changed |= BSS_CHANGED_BEACON_INFO;
-
-		if (link_conf->max_idle_period ||
-			link_conf->protected_keep_alive)
-			changed |= BSS_CHANGED_KEEP_ALIVE;
-
-		ieee80211_link_info_change_notify(sdata, link, changed);
-		break;
-	case NL80211_IFTYPE_OCB:
-		changed |= BSS_CHANGED_OCB;
-		ieee80211_link_info_change_notify(sdata, link, changed);
-		break;
-	case NL80211_IFTYPE_ADHOC:
-		changed |= BSS_CHANGED_IBSS;
-		fallthrough;
-	case NL80211_IFTYPE_AP:
-		changed |= BSS_CHANGED_P2P_PS;
-
-		if (link_conf->ftm_responder == 1 &&
-			wiphy_ext_feature_isset(sdata->local->hw.wiphy,
-				NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER))
-			changed |= BSS_CHANGED_FTM_RESPONDER;
-
-		if (sdata->vif.type == NL80211_IFTYPE_AP) {
-			changed |= BSS_CHANGED_AP_PROBE_RESP;
-
-			if (rcu_access_pointer(link->u.ap.beacon))
-				drv_start_ap(local, sdata,
-						 link->conf);
-
-			ieee80211_vif_cfg_change_notify(sdata, BSS_CHANGED_SSID);
-		}
-		fallthrough;
-	case NL80211_IFTYPE_MESH_POINT:
-		if (link_conf->enable_beacon) {
-			changed |= BSS_CHANGED_BEACON |
-				   BSS_CHANGED_BEACON_ENABLED;
-			ieee80211_link_info_change_notify(sdata, link, changed &~ BSS_CHANGED_IDLE);
-		}
-		break;
-	case NL80211_IFTYPE_NAN:
-		res = ieee80211_reconfig_nan(sdata);
-		if (res < 0) {
-			ieee80211_handle_reconfig_failure(local);
-			return res;
-		}
-		break;
-	case NL80211_IFTYPE_AP_VLAN:
-	case NL80211_IFTYPE_MONITOR:
-	case NL80211_IFTYPE_P2P_DEVICE:
-		/* nothing to do */
-		break;
-	case NL80211_IFTYPE_UNSPECIFIED:
-	case NUM_NL80211_IFTYPES:
-	case NL80211_IFTYPE_P2P_CLIENT:
-	case NL80211_IFTYPE_P2P_GO:
-	case NL80211_IFTYPE_WDS:
-		WARN_ON(1);
-		break;
-	}
-
-	return 0;
-}
-
 int ieee80211_reconfig(struct ieee80211_local *local)
 {
 	struct ieee80211_hw *hw = &local->hw;
@@ -2608,6 +2489,7 @@ int ieee80211_reconfig(struct ieee80211_
 	struct ieee80211_chanctx *ctx;
 	struct sta_info *sta;
 	int res, i;
+	u64 changed = 0;
 	bool reconfig_due_to_wowlan = false;
 	struct ieee80211_sub_if_data *sched_scan_sdata;
 	struct cfg80211_sched_scan_request *sched_scan_req;
@@ -2785,37 +2667,137 @@ int ieee80211_reconfig(struct ieee80211_
 						     old);
 		}
 
-		for (link_id = 0;
-		     link_id < ARRAY_SIZE(sdata->vif.link_conf);
-		     link_id++) {
-			if (ieee80211_vif_is_mld(&sdata->vif) &&
-			    !(sdata->vif.active_links & BIT(link_id)))
-				continue;
-
-			link = sdata_dereference(sdata->link[link_id], sdata);
-			if (!link)
-				continue;
-
-			ieee80211_assign_chanctx(local, sdata, link);
-		}
-
                 for (link_id = 0;
                      link_id < ARRAY_SIZE(sdata->vif.link_conf);
                      link_id++) {
-                        struct ieee80211_bss_conf *link_conf;
+			if (sdata->vif.valid_links &&
+			    !(sdata->vif.active_links & BIT(link_id)))
+				continue;
 
                         link = sdata_dereference(sdata->link[link_id], sdata);
                         if (!link)
                                 continue;
 
-                        link_conf = link->conf;
-                        res = ieee80211_reconfig_link_bss(sdata, link, link_conf);
-                        if (res < 0)
-                                return res;
+			ieee80211_assign_chanctx(local, sdata, link);
                 }
 
+		switch (sdata->vif.type) {
+		case NL80211_IFTYPE_AP_VLAN:
+		case NL80211_IFTYPE_MONITOR:
+			break;
+		case NL80211_IFTYPE_ADHOC:
+			if (sdata->vif.cfg.ibss_joined)
+				WARN_ON(drv_join_ibss(local, sdata));
+			fallthrough;
+		default:
+			ieee80211_reconfig_stations(sdata);
+			fallthrough;
+		case NL80211_IFTYPE_AP: /* AP stations are handled later */
+			for (i = 0; i < IEEE80211_NUM_ACS; i++)
+				drv_conf_tx(local, &sdata->deflink, i,
+					    &sdata->deflink.tx_conf[i]);
+			break;
+		}
+
 		sdata_unlock(sdata);
 
+		/* common change flags for all interface types */
+		changed = BSS_CHANGED_ERP_CTS_PROT |
+			  BSS_CHANGED_ERP_PREAMBLE |
+			  BSS_CHANGED_ERP_SLOT |
+			  BSS_CHANGED_HT |
+			  BSS_CHANGED_BASIC_RATES |
+			  BSS_CHANGED_BEACON_INT |
+			  BSS_CHANGED_BSSID |
+			  BSS_CHANGED_CQM |
+			  BSS_CHANGED_QOS |
+			  BSS_CHANGED_TXPOWER |
+			  BSS_CHANGED_MCAST_RATE;
+
+		if (sdata->vif.bss_conf.mu_mimo_owner)
+			changed |= BSS_CHANGED_MU_GROUPS;
+
+		switch (sdata->vif.type) {
+		case NL80211_IFTYPE_STATION:
+			if (!sdata->vif.valid_links) {
+				changed |= BSS_CHANGED_ASSOC |
+					   BSS_CHANGED_ARP_FILTER |
+					   BSS_CHANGED_PS;
+
+				/* Re-send beacon info report to the driver */
+				if (sdata->deflink.u.mgd.have_beacon)
+					changed |= BSS_CHANGED_BEACON_INFO;
+
+				if (sdata->vif.bss_conf.max_idle_period ||
+				    sdata->vif.bss_conf.protected_keep_alive)
+					changed |= BSS_CHANGED_KEEP_ALIVE;
+
+				ieee80211_bss_info_change_notify(sdata, changed);
+			} else if (!WARN_ON(!link)) {
+				ieee80211_link_info_change_notify(sdata, link,
+								  changed);
+				changed = BSS_CHANGED_ASSOC |
+					  BSS_CHANGED_IDLE |
+					  BSS_CHANGED_PS |
+					  BSS_CHANGED_ARP_FILTER;
+				ieee80211_vif_cfg_change_notify(sdata, changed);
+			}
+			break;
+		case NL80211_IFTYPE_OCB:
+			if (link) {
+				changed |= BSS_CHANGED_OCB;
+				ieee80211_link_info_change_notify(sdata, link, changed);
+			}
+			break;
+		case NL80211_IFTYPE_ADHOC:
+			changed |= BSS_CHANGED_IBSS;
+			fallthrough;
+		case NL80211_IFTYPE_AP:
+			changed |= BSS_CHANGED_P2P_PS;
+
+			if (sdata->vif.bss_conf.ftm_responder == 1 &&
+			    wiphy_ext_feature_isset(sdata->local->hw.wiphy,
+						    NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER))
+				changed |= BSS_CHANGED_FTM_RESPONDER;
+
+			if (sdata->vif.type == NL80211_IFTYPE_AP) {
+				changed |= BSS_CHANGED_AP_PROBE_RESP;
+
+				if (rcu_access_pointer(link->u.ap.beacon))
+					drv_start_ap(local, sdata, link->conf);
+
+				ieee80211_vif_cfg_change_notify(sdata, BSS_CHANGED_SSID);
+			}
+			fallthrough;
+		case NL80211_IFTYPE_MESH_POINT:
+			if (sdata->vif.bss_conf.enable_beacon) {
+				changed |= BSS_CHANGED_BEACON |
+				BSS_CHANGED_BEACON_ENABLED;
+				ieee80211_link_info_change_notify(sdata, link, changed &
+								  ~BSS_CHANGED_IDLE);
+			}
+			break;
+		case NL80211_IFTYPE_NAN:
+			res = ieee80211_reconfig_nan(sdata);
+			if (res < 0) {
+				ieee80211_handle_reconfig_failure(local);
+				return res;
+			}
+			break;
+		case NL80211_IFTYPE_AP_VLAN:
+		case NL80211_IFTYPE_MONITOR:
+		case NL80211_IFTYPE_P2P_DEVICE:
+			/* nothing to do */
+			break;
+		case NL80211_IFTYPE_UNSPECIFIED:
+		case NUM_NL80211_IFTYPES:
+		case NL80211_IFTYPE_P2P_CLIENT:
+		case NL80211_IFTYPE_P2P_GO:
+		case NL80211_IFTYPE_WDS:
+			WARN_ON(1);
+			break;
+		}
+
 		if (active_links)
 			ieee80211_set_active_links(&sdata->vif, active_links);
 	}
--- a/net/mac80211/key.c
+++ b/net/mac80211/key.c
@@ -978,6 +978,8 @@ void ieee80211_reenable_keys(struct ieee
 		list_for_each_entry(key, &sdata->key_list, list) {
 			increment_tailroom_need_count(sdata);
 			ieee80211_key_enable_hw_accel(key);
+
+			msleep(40);
 		}
 	}
 
