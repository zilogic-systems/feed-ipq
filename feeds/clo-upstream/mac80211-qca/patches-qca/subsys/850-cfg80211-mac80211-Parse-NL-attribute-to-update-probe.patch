From 254c2b5be4c11d267019ded9a4a62a53c5ffdaf4 Mon Sep 17 00:00:00 2001
From: Yuvarani V <quic_yuvarani@quicinc.com>
Date: Thu, 23 Nov 2023 16:31:10 +0530
Subject: [PATCH] wifi: cfg80211/mac80211: Parse NL attribute to update probe
 response template.

Add support to send updated 20TU unsolicited broadcast probe response
template to driver on events like CSA, CCA as per draft 3.0.

Currently, the updated 20TU unsolicited broadcast probe response template
is not sent to driver on events like CSA, CCA.

Add support to Parse NL attribute and set BSS_CHANGED_UNSOL_BCAST_PROBE_RESP
flag to send updated 20TU unsolicited broadcast probe response template 
to driver on events like CSA, CCA.

Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Signed-off-by: Yuvarani V <quic_yuvarani@quicinc.com>
---
 include/net/cfg80211.h |  4 ++++
 net/mac80211/cfg.c     | 12 ++++++++++++
 net/wireless/nl80211.c | 28 ++++++++++++++++++++++++----
 3 files changed, 40 insertions(+), 4 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1543,6 +1543,7 @@ struct cfg80211_ap_settings {
  * @punct_bitmap: Preamble puncturing bitmap. Each bit represents
  *	a 20 MHz channel, lowest bit corresponding to the lowest channel.
  *	Bit set to 1 indicates that the channel is punctured.
+ * @unsol_bcast_probe_resp: Unsolicited broadcast probe response parameters
  */
 struct cfg80211_csa_settings {
 	struct cfg80211_chan_def chandef;
@@ -1556,6 +1557,7 @@ struct cfg80211_csa_settings {
 	bool block_tx;
 	u8 count;
 	u16 punct_bitmap;
+	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
 };
 
 /**
@@ -1569,6 +1571,7 @@ struct cfg80211_csa_settings {
  * @beacon_next: beacon data to be used after the color change
  * @count: number of beacons until the color change
  * @color: the color used after the change
+ * @unsol_bcast_probe_resp: Unsolicited broadcast probe response parameters
  */
 struct cfg80211_color_change_settings {
 	struct cfg80211_beacon_data beacon_color_change;
@@ -1577,6 +1580,7 @@ struct cfg80211_color_change_settings {
 	struct cfg80211_beacon_data beacon_next;
 	u8 count;
 	u8 color;
+	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
 };
 
 /**
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -4476,6 +4476,12 @@ __ieee80211_channel_switch(struct wiphy
 	ch_switch.chandef = params->chandef;
 	ch_switch.count = params->count;
 
+	err = ieee80211_set_unsol_bcast_probe_resp(sdata, &params->unsol_bcast_probe_resp,
+						   link, link_conf);
+	if (err)
+		goto out;
+	changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
+
 	/* should we pass link_id here ? */
 	err = drv_pre_channel_switch(sdata, &ch_switch);
 	if (err)
@@ -5542,6 +5548,12 @@ ieee80211_color_change(struct wiphy *wip
 	link_conf->color_change_active = true;
 	link_conf->color_change_color = params->color;
 
+	err = ieee80211_set_unsol_bcast_probe_resp(sdata, &params->unsol_bcast_probe_resp,
+						   link, link_conf);
+	if (err)
+		goto out;
+	changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
+
 	cfg80211_color_change_started_notify(sdata->dev, params->count,
 					    link_id);
 
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6312,12 +6312,10 @@ static int nl80211_parse_fils_discovery(
 static int
 nl80211_parse_unsol_bcast_probe_resp(struct cfg80211_registered_device *rdev,
 				     struct nlattr *attrs,
-				     struct cfg80211_ap_settings *params)
+				     struct cfg80211_unsol_bcast_probe_resp *presp)
 {
 	struct nlattr *tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX + 1];
 	int ret;
-	struct cfg80211_unsol_bcast_probe_resp *presp =
-					&params->unsol_bcast_probe_resp;
 
 	if (!wiphy_ext_feature_isset(&rdev->wiphy,
 				     NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP))
@@ -6786,7 +6784,7 @@ static int nl80211_start_ap(struct sk_bu
 	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
 		err = nl80211_parse_unsol_bcast_probe_resp(
 			rdev, info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
-			params);
+			&params->unsol_bcast_probe_resp);
 		if (err)
 			goto out_unlock;
 	}
@@ -6906,7 +6904,7 @@ static int nl80211_update_ap(struct sk_b
 	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
 		err = nl80211_parse_unsol_bcast_probe_resp(rdev,
 							    info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
-							    params);
+							   &params->unsol_bcast_probe_resp);
 		if (err)
 			goto out;
 	}
@@ -11131,6 +11129,14 @@ skip_beacons:
 			goto free;
 	}
 
+	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
+		err = nl80211_parse_unsol_bcast_probe_resp(rdev,
+							   info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
+							   &params.unsol_bcast_probe_resp);
+		if (err)
+			goto free;
+	}
+
 	wdev_lock(wdev);
 	err = rdev_channel_switch(rdev, dev, &params, link_id);
 	wdev_unlock(wdev);
@@ -16962,6 +16968,13 @@ static int nl80211_color_change(struct s
 
 		params.counter_offset_presp = offset;
 	}
+	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
+		err = nl80211_parse_unsol_bcast_probe_resp(rdev,
+							   info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
+							   &params.unsol_bcast_probe_resp);
+		if (err)
+			goto out;
+	}
 
 	wdev_lock(wdev);
 	err = rdev_color_change(rdev, dev, &params, link_id);
