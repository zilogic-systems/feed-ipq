From 681f61248ddf43d23014fc61ae755932cb40d6e7 Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Mon, 7 Aug 2023 14:28:09 +0530
Subject: [PATCH] [PATCH] wifi: cfg80211/mac80211: Adding and parsing of
 bandwidth indication element

Add bandwidth indication element IE in action frame as per Draft 3.0
and add support to parse bandwidth indication element IE in
action frame/beacon frame.

Signed-off-by: Karthik M <quic_karm@quicinc.com>
Signed-off-by: Yuvarani V <quic_yuvarani@quicinc.com>
---
 include/linux/ieee80211.h  |  43 ++++++++++++++
 net/mac80211/ieee80211_i.h |   5 +-
 net/mac80211/mesh.c        |  30 ++++++++--
 net/mac80211/util.c        | 113 +++++++++++++++++++++++++++++++++++--
 4 files changed, 182 insertions(+), 9 deletions(-)

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -923,6 +923,45 @@ struct ieee80211_wide_bw_chansw_ie {
 	u8 new_center_freq_seg0, new_center_freq_seg1;
 } __packed;
 
+/* IEEE P802.11be/D3.0, 9.4.2.319 - Bandwidth Indication element */
+/* Figure 9-1002ba: Bandwidth Indication Parameters field subfields */
+#define IEEE80211_BW_IND_PARAMETER_RESERVED                         0x01
+#define IEEE80211_BW_IND_PARAMETER_DISABLED_SUBCHAN_BITMAP_PRESENT  0x02
+
+/* Table 9-467: Control subfield: Channel Width subfield; */
+#define IEEE80211_BW_IND_CHANWIDTH_20MHZ                        0
+#define IEEE80211_BW_IND_CHANWIDTH_40MHZ                        1
+#define IEEE80211_BW_IND_CHANWIDTH_80MHZ                        2
+#define IEEE80211_BW_IND_CHANWIDTH_160MHZ                       3
+#define IEEE80211_BW_IND_CHANWIDTH_320MHZ                       4
+
+#define IEEE80211_BW_IND_FIXED_LEN			            0x1
+#define IEEE80211_BW_IND_INFO_FIXED_LEN                             0x3
+
+/**
+ * struct ieee80211_bw_ind_info - Bandwidth Indication channel switch info
+ * @ccfs0:    defines a channel center frequency for a 20, 40, 80, 160, or 320 MHz
+ *            EHT BSS.
+ * @ccfs1:    defines a channel center frequency for a 160 or 320 MHz EHT BSS.
+ * @optional: optional parts
+ */
+struct ieee80211_bw_ind_info {
+	u8 control;
+	u8 ccfs0;
+	u8 ccfs1;
+	u8 optional[];
+} __packed;
+
+/**
+ * struct ieee80211_bw_ind_element - bandwidth indication field
+ * @bw_ind_params: Bandwidth Indication Parameters
+ * @bw_ind_info: Bandwidth Indication information
+ */
+struct ieee80211_bw_ind_element {
+	u8 bw_ind_params;
+	struct ieee80211_bw_ind_info bw_ind_info;
+} __packed;
+
 /**
  * struct ieee80211_tim
  *
@@ -3525,6 +3564,7 @@ enum ieee80211_eid_ext {
 	WLAN_EID_EXT_EHT_OPERATION = 106,
 	WLAN_EID_EXT_EHT_MULTI_LINK = 107,
 	WLAN_EID_EXT_EHT_CAPABILITY = 108,
+	WLAN_EID_EXT_BW_IND = 135,
 };
 
 /* Action category code */
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1754,6 +1754,7 @@ struct ieee802_11_elems {
 	const struct ieee80211_channel_sw_ie *ch_switch_ie;
 	const struct ieee80211_ext_chansw_ie *ext_chansw_ie;
 	const struct ieee80211_wide_bw_chansw_ie *wide_bw_chansw_ie;
+	const struct ieee80211_bw_ind_element *bw_ind;
 	const u8 *max_channel_switch_time;
 	const u8 *country_elem;
 	const u8 *pwr_constr_elem;
@@ -2540,8 +2541,10 @@ u8 *ieee80211_ie_build_ht_cap(u8 *pos, s
 u8 *ieee80211_ie_build_ht_oper(u8 *pos, struct ieee80211_sta_ht_cap *ht_cap,
 			       const struct cfg80211_chan_def *chandef,
 			       u16 prot_mode, bool rifs_mode);
-void ieee80211_ie_build_wide_bw_cs(u8 *pos,
-				   const struct cfg80211_chan_def *chandef);
+u8 *ieee80211_ie_build_wide_bw_cs(u8 *pos,
+				  const struct cfg80211_chan_def *chandef);
+u8 *ieee80211_ie_build_bw_ind_cs(u8 *pos,
+				 const struct cfg80211_chan_def *chandef);
 u8 *ieee80211_ie_build_vht_cap(u8 *pos, struct ieee80211_sta_vht_cap *vht_cap,
 			       u32 cap);
 u8 *ieee80211_ie_build_vht_oper(u8 *pos, struct ieee80211_sta_vht_cap *vht_cap,
--- a/net/mac80211/mesh.c
+++ b/net/mac80211/mesh.c
@@ -996,15 +996,21 @@ ieee80211_mesh_build_beacon(struct ieee8
 	struct mesh_csa_settings *csa;
 	enum nl80211_band band;
 	u8 ie_len_he_cap, ie_len_eht_cap;
-	u8 *pos;
+	u8 *pos, *length_pos, *eid;
 	struct ieee80211_sub_if_data *sdata;
 	int hdr_len = offsetofend(struct ieee80211_mgmt, u.beacon);
 	int eht_optional_sz = 0;
+	int bw_ind_optional_sz = 0;
 
 	sdata = container_of(ifmsh, struct ieee80211_sub_if_data, u.mesh);
 	rcu_read_lock();
 	chanctx_conf = rcu_dereference(sdata->vif.bss_conf.chanctx_conf);
 	band = chanctx_conf->def.chan->band;
+
+	csa = rcu_dereference(ifmsh->csa);
+	if (csa && csa->settings.chandef.ru_punct_bitmap)
+		bw_ind_optional_sz = DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+
 	rcu_read_unlock();
 
 	ie_len_he_cap = ieee80211_ie_len_he_cap(sdata,
@@ -1021,8 +1027,13 @@ ieee80211_mesh_build_beacon(struct ieee8
 		   2 + sizeof(struct ieee80211_channel_sw_ie) +
 		   /* Mesh Channel Switch Parameters */
 		   2 + sizeof(struct ieee80211_mesh_chansw_params_ie) +
-		   /* Channel Switch Wrapper + Wide Bandwidth CSA IE */
+		   /* Channel Switch Wrapper + Wide Bandwidth CSA IE
+		    * + Bandwidth Indication IE
+		    */
 		   2 + 2 + sizeof(struct ieee80211_wide_bw_chansw_ie) +
+		   2 + 1 + IEEE80211_BW_IND_FIXED_LEN +
+			   IEEE80211_BW_IND_INFO_FIXED_LEN +
+			   bw_ind_optional_sz +
 		   2 + sizeof(struct ieee80211_sec_chan_offs_ie) +
 		   2 + 8 + /* supported rates */
 		   2 + 3; /* DS params */
@@ -1123,16 +1134,27 @@ ieee80211_mesh_build_beacon(struct ieee8
 		case NL80211_CHAN_WIDTH_80P80:
 		case NL80211_CHAN_WIDTH_160:
 		case NL80211_CHAN_WIDTH_320:
+			eid = pos;
 			/* Channel Switch Wrapper + Wide Bandwidth CSA IE */
 			ie_len = 2 + 2 +
 				 sizeof(struct ieee80211_wide_bw_chansw_ie);
 			pos = skb_put_zero(skb, ie_len);
 
 			*pos++ = WLAN_EID_CHANNEL_SWITCH_WRAPPER; /* EID */
-			*pos++ = 5;				  /* len */
+			length_pos = pos++;			  /* len */
 			/* put sub IE */
 			chandef = &csa->settings.chandef;
 			ieee80211_ie_build_wide_bw_cs(pos, chandef);
+
+			if (chandef->width > NL80211_CHAN_WIDTH_160 || chandef->ru_punct_bitmap) {
+				/* Bandwidth Indication element */
+				ie_len = 2 + 1 + IEEE80211_BW_IND_FIXED_LEN +
+					IEEE80211_BW_IND_INFO_FIXED_LEN +
+					bw_ind_optional_sz;
+				pos = skb_put_zero(skb, ie_len);
+				pos = ieee80211_ie_build_bw_ind_cs(pos, chandef);
+			}
+			*length_pos = pos - (eid + 2);
 			break;
 		default:
 			break;
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -3378,8 +3378,8 @@ u8 *ieee80211_ie_build_ht_oper(u8 *pos,
 	return pos + sizeof(struct ieee80211_ht_operation);
 }
 
-void ieee80211_ie_build_wide_bw_cs(u8 *pos,
-				   const struct cfg80211_chan_def *chandef)
+u8 *ieee80211_ie_build_wide_bw_cs(u8 *pos,
+				  const struct cfg80211_chan_def *chandef)
 {
 	*pos++ = WLAN_EID_WIDE_BW_CHANNEL_SWITCH;	/* EID */
 	*pos++ = 3;					/* IE length */
@@ -3408,6 +3408,94 @@ void ieee80211_ie_build_wide_bw_cs(u8 *p
 		*pos++ = ieee80211_frequency_to_channel(chandef->center_freq2);
 	else
 		*pos++ = 0;
+
+	return pos;
+}
+
+u8 *ieee80211_ie_build_bw_ind_cs(u8 *pos,
+				 const struct cfg80211_chan_def *chandef)
+{
+	struct ieee80211_bw_ind_element *bw_ind_elem;
+	u8 ie_len = 1 /*Tag length*/
+		    + IEEE80211_BW_IND_FIXED_LEN
+		    + IEEE80211_BW_IND_INFO_FIXED_LEN;
+	u8 chwidth = 0, bw_ind_status = false;
+
+	if (chandef->width > NL80211_CHAN_WIDTH_160 ||
+	    chandef->ru_punct_bitmap)
+		bw_ind_status = true;
+
+	if (!bw_ind_status)
+		return pos;
+
+	if (chandef->ru_punct_bitmap)
+		ie_len += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+
+	*pos++ = WLAN_EID_EXTENSION;
+	*pos++ = ie_len;
+	*pos++ = WLAN_EID_EXT_BW_IND;
+
+	bw_ind_elem = (struct ieee80211_bw_ind_element *)pos;
+	memset(bw_ind_elem, 0, sizeof(struct ieee80211_bw_ind_element));
+
+	pos += IEEE80211_BW_IND_FIXED_LEN;
+
+	bw_ind_elem->bw_ind_info.ccfs0 =
+		ieee80211_frequency_to_channel(chandef->center_freq1);
+
+	if (chandef->center_freq2)
+		bw_ind_elem->bw_ind_info.ccfs1 =
+			ieee80211_frequency_to_channel(chandef->center_freq2);
+	else
+		bw_ind_elem->bw_ind_info.ccfs1 = 0;
+
+	switch (chandef->width) {
+	case NL80211_CHAN_WIDTH_320:
+		chwidth = IEEE80211_BW_IND_CHANWIDTH_320MHZ;
+		bw_ind_elem->bw_ind_info.ccfs1 = bw_ind_elem->bw_ind_info.ccfs0;
+		if (chandef->chan->center_freq < chandef->center_freq1)
+			bw_ind_elem->bw_ind_info.ccfs0 -= 16;
+		else
+			bw_ind_elem->bw_ind_info.ccfs0 += 16;
+		break;
+	case NL80211_CHAN_WIDTH_160:
+		chwidth = IEEE80211_BW_IND_CHANWIDTH_160MHZ;
+		bw_ind_elem->bw_ind_info.ccfs1 = bw_ind_elem->bw_ind_info.ccfs0;
+		if (chandef->chan->center_freq < chandef->center_freq1)
+			bw_ind_elem->bw_ind_info.ccfs0 -= 8;
+		else
+			bw_ind_elem->bw_ind_info.ccfs0 += 8;
+		break;
+	case NL80211_CHAN_WIDTH_80P80:
+		chwidth = IEEE80211_BW_IND_CHANWIDTH_160MHZ;
+		break;
+	case NL80211_CHAN_WIDTH_80:
+		chwidth = IEEE80211_BW_IND_CHANWIDTH_80MHZ;
+		break;
+	case NL80211_CHAN_WIDTH_40:
+		chwidth = IEEE80211_BW_IND_CHANWIDTH_40MHZ;
+		break;
+	default:
+		chwidth = IEEE80211_BW_IND_CHANWIDTH_20MHZ;
+		break;
+	}
+
+	bw_ind_elem->bw_ind_info.control = chwidth;
+
+	pos += IEEE80211_BW_IND_INFO_FIXED_LEN;
+
+	if (chandef->ru_punct_bitmap) {
+		pos += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+		bw_ind_elem->bw_ind_params =
+		   IEEE80211_BW_IND_PARAMETER_DISABLED_SUBCHAN_BITMAP_PRESENT;
+
+		bw_ind_elem->bw_ind_info.optional[0] =
+			chandef->ru_punct_bitmap & 0x00FF;
+		bw_ind_elem->bw_ind_info.optional[1] =
+			chandef->ru_punct_bitmap >> 8;
+	}
+
+	return pos;
 }
 
 u8 *ieee80211_ie_build_vht_oper(u8 *pos, struct ieee80211_sta_vht_cap *vht_cap,
@@ -4805,16 +4893,21 @@ int ieee80211_send_action_csa(struct iee
 	int freq;
 	int hdr_len = offsetofend(struct ieee80211_mgmt,
 				  u.action.u.chan_switch);
-	u8 *pos;
+	u8 *pos,  bw_ind_optional_sz = 0, len;
 
 	if (sdata->vif.type != NL80211_IFTYPE_ADHOC &&
 	    sdata->vif.type != NL80211_IFTYPE_MESH_POINT)
 		return -EOPNOTSUPP;
 
+	if (csa_settings->chandef.ru_punct_bitmap)
+		bw_ind_optional_sz = DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+
 	skb = dev_alloc_skb(local->tx_headroom + hdr_len +
 			    5 + /* channel switch announcement element */
 			    3 + /* secondary channel offset element */
 			    5 + /* wide bandwidth channel switch announcement */
+			    7 + /* BW indication element */
+			    bw_ind_optional_sz + /* BW indication optional element */
 			    8); /* mesh channel switch parameters element */
 	if (!skb)
 		return -ENOMEM;
@@ -4871,13 +4964,22 @@ int ieee80211_send_action_csa(struct iee
 		put_unaligned_le16(ifmsh->pre_value, pos);/* Precedence Value */
 		pos += 2;
 	}
-
 	if (csa_settings->chandef.width == NL80211_CHAN_WIDTH_80 ||
 	    csa_settings->chandef.width == NL80211_CHAN_WIDTH_80P80 ||
 	    csa_settings->chandef.width == NL80211_CHAN_WIDTH_160 ||
 	    csa_settings->chandef.width == NL80211_CHAN_WIDTH_320) {
 		skb_put(skb, 5);
-		ieee80211_ie_build_wide_bw_cs(pos, &csa_settings->chandef);
+		pos = ieee80211_ie_build_wide_bw_cs(pos, &csa_settings->chandef);
+	}
+
+	if (csa_settings->chandef.width > NL80211_CHAN_WIDTH_160 ||
+	    csa_settings->chandef.ru_punct_bitmap) {
+		len = 3 /* Tag len */
+		      + IEEE80211_BW_IND_FIXED_LEN
+		      + IEEE80211_BW_IND_INFO_FIXED_LEN
+		      + bw_ind_optional_sz;
+		skb_put(skb, len);
+		ieee80211_ie_build_bw_ind_cs(pos, &csa_settings->chandef);
 	}
 
 	ieee80211_tx_skb(sdata, skb);
