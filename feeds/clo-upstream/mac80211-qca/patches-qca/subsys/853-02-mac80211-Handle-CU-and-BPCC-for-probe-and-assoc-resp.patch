From 80027214d017d9679ca7306ca52f63f770869b9e Mon Sep 17 00:00:00 2001
From: Yuvarani V <quic_yuvarani@quicinc.com>
Date: Fri, 24 Nov 2023 11:33:03 +0530
Subject: [PATCH] mac80211: Handle CU and BPCC for probe and assoc response

Add changes to indicate ongoing critical update CU flags,
BPCC values and CSA/CCA count in probe and assoc/reassoc response.
Extract cu_vdev_bitmap and bpcc values CU information from
TLV for probe and assoc / reassoc request.
Pass these values to mac80211.

Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Signed-off-by: Yuvarani V <quic_yuvarani@quicinc.com>
---
 include/net/mac80211.h |  8 ++++++++
 net/mac80211/cfg.c     | 33 +++++++++++++++++++++++++++++++++
 net/mac80211/rx.c      | 12 ++++++++++++
 net/mac80211/tx.c      |  5 +++++
 4 files changed, 58 insertions(+)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -7756,4 +7756,12 @@ mesh_nss_offld_proxy_path_exp_update(str
 }
 #endif
 
+/** ieee80211_critical_update - update critical params for each link
+ * @vif: virtual interface
+ * @critical_flag: critical update information
+ * @bpcc: Bss parameter change count value
+ */
+void ieee80211_critical_update(struct ieee80211_vif *vif, unsigned int link_id,
+				bool critical_flag, u8 bpcc);
+
 #endif /* MAC80211_H */
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3988,6 +3988,10 @@ void ieee80211_csa_finish(struct ieee802
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
 	struct ieee80211_local *local = sdata->local;
 	struct ieee80211_link_data *link;
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+
+	if(!wdev)
+		return;
 
 	if (WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
 		return;
@@ -4000,6 +4004,10 @@ void ieee80211_csa_finish(struct ieee802
 		return;
 	}
 
+	if (wdev->valid_links && wdev->links[link_id].switch_count != 0) {
+		wdev->links[link_id].switch_count = 0;
+		wdev->critical_update = 1;
+	}
 	if (link->conf->mbssid_tx_vif == vif &&
 	    link->conf->mbssid_tx_vif_linkid == link->conf->link_id) {
 		/* Trigger ieee80211_csa_finish() on the non-transmitting
@@ -4032,6 +4040,11 @@ void ieee80211_csa_finish(struct ieee802
 				    link_iter->conf->mbssid_tx_vif_linkid != link->link_id)
 					continue;
 
+				if (iter->wdev.valid_links &&
+				    iter->wdev.links[link_id_iter].switch_count != 0) {
+					iter->wdev.links[link_id_iter].switch_count = 0;
+					iter->wdev.critical_update = 1;
+				}
 				ieee80211_queue_work(&iter->local->hw,
 						     &link_iter->csa_finalize_work);
 			}
@@ -4043,6 +4056,24 @@ void ieee80211_csa_finish(struct ieee802
 }
 EXPORT_SYMBOL(ieee80211_csa_finish);
 
+void ieee80211_critical_update(struct ieee80211_vif *vif, unsigned int link_id,
+			       bool critical_flag, u8 bpcc)
+{
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+
+	if (!wdev || !wdev->valid_links)
+		return;
+	if (WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
+		return;
+	if (wdev->links[link_id].critical_flag != critical_flag ||
+	    wdev->links[link_id].bpcc != bpcc) {
+		wdev->critical_update = 1;
+		wdev->links[link_id].critical_flag = critical_flag;
+		wdev->links[link_id].bpcc = bpcc;
+	}
+}
+EXPORT_SYMBOL(ieee80211_critical_update);
+
 void ieee80211_channel_switch_disconnect(struct ieee80211_vif *vif, bool block_tx)
 {
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
@@ -5396,6 +5427,10 @@ void ieee80211_color_change_finish(struc
 {
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
 	struct ieee80211_link_data *link;
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+
+	if(!wdev)
+		return;
 
 	if (WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
         	return;
@@ -5411,6 +5446,10 @@ void ieee80211_color_change_finish(struc
 	ieee80211_queue_work(&sdata->local->hw,
 			     &link->color_change_finalize_work);
 
+	if (wdev->valid_links && wdev->links[link_id].switch_count != 0) {
+		wdev->links[link_id].switch_count = 0;
+		wdev->critical_update = 1;
+	}
 	rcu_read_unlock();
 }
 EXPORT_SYMBOL_GPL(ieee80211_color_change_finish);
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -3980,14 +3980,26 @@ static ieee80211_rx_result debug_noinlin
 ieee80211_rx_h_userspace_mgmt(struct ieee80211_rx_data *rx)
 {
 	struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(rx->skb);
+	struct ieee80211_mgmt *mgmt = (void *)rx->skb->data;
+	__le16 stype;
+	struct wireless_dev *wdev = &rx->sdata->wdev;
+
 	struct cfg80211_rx_info info = {
 		.freq = ieee80211_rx_status_to_khz(status),
 		.buf = rx->skb->data,
 		.len = rx->skb->len,
 		.link_id = rx->link_id,
 		.have_link_id = rx->link_id >= 0,
+		.critical_update = 0,
 	};
 
+	stype = mgmt->frame_control & cpu_to_le16(IEEE80211_FCTL_STYPE);
+	if (stype ==  cpu_to_le16(IEEE80211_STYPE_PROBE_REQ) ||
+	    stype ==  cpu_to_le16(IEEE80211_STYPE_ASSOC_REQ) ||
+	    stype ==  cpu_to_le16(IEEE80211_STYPE_REASSOC_REQ)) {
+		if (wdev->critical_update)
+			info.critical_update = 1;
+	}
 	/* skip known-bad action frames and return them in the next handler */
 	if (status->rx_flags & IEEE80211_RX_MALFORMED_ACTION_FRM)
 		return RX_CONTINUE;
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -5317,6 +5317,7 @@ u8 ieee80211_beacon_update_cntdwn(struct
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
 	struct ieee80211_link_data *link;
 	struct beacon_data *beacon = NULL;
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
 	u8 count = 0;
 
 	if (WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
@@ -5339,6 +5340,10 @@ u8 ieee80211_beacon_update_cntdwn(struct
 		goto unlock;
 
 	count = __ieee80211_beacon_update_cntdwn(beacon);
+	if (wdev->valid_links && wdev->links[link_id].switch_count != count) {
+		wdev->links[link_id].switch_count = count;
+		wdev->critical_update = 1;
+	}
 
 unlock:
 	rcu_read_unlock();
