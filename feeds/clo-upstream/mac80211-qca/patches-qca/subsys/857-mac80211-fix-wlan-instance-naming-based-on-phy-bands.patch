From d83013176ac10efbd634ef58347132b261956820 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Fri, 1 Dec 2023 13:18:11 +0530
Subject: [PATCH 2/2] mac80211: fix wlan instance naming based on phy bands

mac80211 is assigning wlan instance based on the radio
probing order. Due to this wlan instance naming getting changed
randomly on reboot and cause problems as fixed wlan instance
used in scripts.

Fix wlan instance naming based on the phy bands(2 GHz/
5 GHz/6 GHz).

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 net/mac80211/ieee80211_i.h |  2 ++
 net/mac80211/main.c        | 21 +++++++++++++++++++--
 2 files changed, 21 insertions(+), 2 deletions(-)

--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1641,6 +1641,8 @@ struct ieee80211_local {
 
 	struct list_head awgn_info_list;
 
+	const char *wlan_name;
+
 	/* extended capabilities provided by mac80211 */
 	u8 ext_capa[8];
 };
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -34,6 +34,12 @@
 #include "led.h"
 #include "debugfs.h"
 
+#define PHY_2GHZ "phy00"
+#define PHY_5GHZ "phy01"
+#define PHY_5GHZ_LOW "phy01"
+#define PHY_5GHZ_HIGH "phy02"
+#define PHY_6GHZ "phy03"
+
 void ieee80211_configure_filter(struct ieee80211_local *local)
 {
 	u64 mc;
@@ -744,6 +750,17 @@ struct ieee80211_hw *ieee80211_alloc_hw_
 	local->ops = ops;
 	local->use_chanctx = use_chanctx;
 
+	if (!strcmp(requested_name, PHY_2GHZ))
+		local->wlan_name = "wlan0";
+	else if (!strcmp(requested_name, PHY_5GHZ) || !strcmp(requested_name, PHY_5GHZ_LOW))
+		local->wlan_name = "wlan1";
+	else if (!strcmp(requested_name, PHY_5GHZ_HIGH))
+		local->wlan_name = "wlan2";
+	else if (!strcmp(requested_name, PHY_6GHZ))
+		local->wlan_name = "wlan3";
+	else
+		local->wlan_name = "wlan%d";
+
 	/*
 	 * We need a bit of data queued to build aggregates properly, so
 	 * instruct the TCP stack to allow more than a single ms of data
@@ -1501,6 +1518,22 @@ int ieee80211_register_hw(struct ieee802
 	debugfs_hw_add(local);
 	rate_control_add_debugfs(local);
 
+	rtnl_lock();
+	wiphy_lock(hw->wiphy);
+	/* add one default STA interface if supported */
+	if (local->hw.wiphy->interface_modes & BIT(NL80211_IFTYPE_STATION) &&
+	    !ieee80211_hw_check(hw, NO_AUTO_VIF)) {
+		struct vif_params params = {0};
+
+		result = ieee80211_if_add(local, local->wlan_name, NET_NAME_ENUM, NULL,
+					  NL80211_IFTYPE_STATION, &params);
+                if (result)
+                        wiphy_warn(local->hw.wiphy,
+                                   "Failed to add default virtual iface\n");
+        }
+	wiphy_unlock(hw->wiphy);
+	rtnl_unlock();
+
 #ifdef __disabled__CONFIG_INET
 	local->ifa_notifier.notifier_call = ieee80211_ifa_changed;
 	result = register_inetaddr_notifier(&local->ifa_notifier);
