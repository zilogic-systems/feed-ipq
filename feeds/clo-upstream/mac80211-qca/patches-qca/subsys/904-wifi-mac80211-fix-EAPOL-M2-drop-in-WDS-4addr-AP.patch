From 36cdfa541a80312169950f2bb55e90cf6c131f44 Mon Sep 17 00:00:00 2001
From: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
Date: Fri, 15 Dec 2023 16:04:30 +0530
Subject: [PATCH] wifi: mac80211: fix EAPOL M2 drop in WDS 4addr AP

WDS (4addr) AP creates AP/VLAN interface upon receiving 4addr Null data frame
from WDS (4addr) STA immediately after association response success.

If above didn't succeed, WDS (4addr) AP tries to create AP/VLAN interface upon
receiving any first 4addr data frame. This is achieved by notifying hostapd
with NL80211_CMD_UNEXPECTED_4ADDR_FRAME for hostapd to take of AP/VLAN
interface creation before dropping that respective 4addr frame. Once AP/VLAN
interface is created, consecutive 4addr frames are not dropped in this path.

Above scenario is now happening with EAPOL M2 frames from WDS (4addr) STA as
first 4addr data frame which is dropped after informing UNEXPECTED_4ADDR_FRAME
to hostapd. This causes EAPOL timeout in some cases and new EAPOL handshake
with AP/VLAN interface required to recover out of this M2 drop.

Fix this by not dropping EAPOL frames after notifying hostapd using the
existing port_control flag.

Signed-off-by: Sathishkumar Muruganandam <quic_murugana@quicinc.com>
---
 net/mac80211/rx.c   | 23 ++++++++++++++---------
 net/wireless/util.c |  1 +
 2 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/net/mac80211/rx.c b/net/mac80211/rx.c
index 463e4ccd53e6..a94ff7ae2262 100644
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -2607,9 +2607,13 @@ __ieee80211_data_to_8023(struct ieee80211_rx_data *rx, bool *port_control)
 	int ret;
 
 	*port_control = false;
-	if (ieee80211_has_a4(hdr->frame_control) &&
-	    sdata->vif.type == NL80211_IFTYPE_AP_VLAN && !sdata->u.vlan.sta)
-		return -1;
+	if (ieee80211_has_a4(hdr->frame_control)) {
+		if (sdata->vif.type == NL80211_IFTYPE_AP_VLAN &&
+		    !sdata->u.vlan.sta)
+			return -1;
+		else if (sdata->vif.type == NL80211_IFTYPE_AP)
+			check_port_control = true;
+	}
 
 	if (sdata->vif.type == NL80211_IFTYPE_STATION &&
 	    !!sdata->u.mgd.use_4addr != !!ieee80211_has_a4(hdr->frame_control)) {
@@ -3339,9 +3343,13 @@ ieee80211_rx_h_data(struct ieee80211_rx_data *rx)
 	if (unlikely(!ieee80211_is_data_present(hdr->frame_control)))
 		return RX_DROP_MONITOR;
 
+	err = __ieee80211_data_to_8023(rx, &port_control);
+	if (unlikely(err))
+		return RX_DROP_UNUSABLE;
+
 	/*
 	 * Send unexpected-4addr-frame event to hostapd. For older versions,
-	 * also drop the frame to cooked monitor interfaces.
+	 * also drop the frame except EAPOL to cooked monitor interfaces.
 	 */
 	if (ieee80211_has_a4(hdr->frame_control) &&
 	    sdata->vif.type == NL80211_IFTYPE_AP) {
@@ -3350,13 +3358,10 @@ ieee80211_rx_h_data(struct ieee80211_rx_data *rx)
 			cfg80211_rx_unexpected_4addr_frame(
 				rx->sdata->dev, rx->sta->sta.addr, GFP_ATOMIC,
 				rx->link_id);
-		return RX_DROP_MONITOR;
+		if (!port_control)
+			return RX_DROP_MONITOR;
 	}
 
-	err = __ieee80211_data_to_8023(rx, &port_control);
-	if (unlikely(err))
-		return RX_DROP_UNUSABLE;
-
 	res = ieee80211_rx_mesh_data(rx->sdata, rx->sta, rx->skb);
 	if (res != RX_CONTINUE)
 		return res;
diff --git a/net/wireless/util.c b/net/wireless/util.c
index 23b01547ea89..e9e210da0746 100644
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -668,6 +668,7 @@ int ieee80211_data_to_8023_exthdr(struct sk_buff *skb, struct ethhdr *ehdr,
 	case cpu_to_le16(IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS):
 		if (unlikely(iftype != NL80211_IFTYPE_MESH_POINT &&
 			     iftype != NL80211_IFTYPE_AP_VLAN &&
+			     iftype != NL80211_IFTYPE_AP &&
 			     iftype != NL80211_IFTYPE_STATION))
 			return -1;
 		break;
-- 
2.25.1

