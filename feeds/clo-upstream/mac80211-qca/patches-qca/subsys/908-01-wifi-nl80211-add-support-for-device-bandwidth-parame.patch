From b7b713b05040f8fac784c968fb095ec5b84f80d6 Mon Sep 17 00:00:00 2001
From: Shivani Tambatkar <quic_stambatk@quicinc.com>
Date: Tue, 28 Nov 2023 18:17:52 -0800
Subject: [PATCH 1/8] wifi: nl80211: add support for device bandwidth
 parameters

When RADAR is detected in the operating bandwidth (OBW), device is
required to vacate the affected channels either by reducing the bandwidth
or by completely vacating the OBW. SW based progressive DFS recipe allows
the device to continue radar detection on the affected channels by setting
the device bandwidth (DBW) same as before while reducing the OBW to avoid
the affected channels. Tx will be restricted to OBW while DBW will be used
for Rx. 
Added new netlink attributes NL80211_ATTR_CHANNEL_WIDTH_DEVICE and
NL80211_ATTR_CENTER_FREQ_DEVICE which will be used for device bandwidth
and device center frequency respectively. DBW must be twice the OBW and
the device center frequency must coincide with one edge of the OBW. RADAR 
monitoring will be done only for channels in device_bandwidth. The feature 
does not support 80+80.
Added a new extended feature flag for this capability.

Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 include/net/cfg80211.h       |  10 ++-
 include/uapi/linux/nl80211.h |  18 +++++
 net/wireless/chan.c          |   3 +
 net/wireless/nl80211.c       | 123 +++++++++++++++++++++++++++++++++++
 4 files changed, 152 insertions(+), 2 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -819,9 +819,9 @@ struct key_params {
 /**
  * struct cfg80211_chan_def - channel definition
  * @chan: the (control) channel
- * @width: channel width
- * @center_freq1: center frequency of first segment
- * @center_freq2: center frequency of second segment
+ * @width: operating channel width
+ * @center_freq1: operating center frequency of first segment
+ * @center_freq2: operating center frequency of second segment
  *	(only with 80+80 MHz)
  * @edmg: define the EDMG channels configuration.
  *	If edmg is requested (i.e. the .channels member is non-zero),
@@ -833,6 +833,10 @@ struct key_params {
  *	indicates that the channel is punctured, otherwise the channel is active
  * @ru_punct_bitmap_supp_he: Indicates whether RU puncturing bitmap validation
  *	should include OFDMA bitmaps.
+ * @width_device: channel width of the device. @width is the operating channel
+ *	width
+ * @center_frequency_device: center frequency of the device @center_freq1 is
+ *	the operating center frequency of the channel
  */
 struct cfg80211_chan_def {
 	struct ieee80211_channel *chan;
@@ -844,6 +848,8 @@ struct cfg80211_chan_def {
 	u16 ru_punct_bitmap;
 	bool ru_punct_bitmap_supp_he;
 	u16 radar_bitmap;
+	enum nl80211_chan_width width_device;
+	u32 center_freq_device;
 };
 
 /*
@@ -1061,6 +1067,28 @@ cfg80211_chandef_compatible(const struct
 bool cfg80211_chandef_valid(const struct cfg80211_chan_def *chandef);
 
 /**
+ * cfg80211_get_start_freq_device - retrieve start frequency of the device BW
+ * @chandef: the channel definition to check
+ * Returns: Start frequency in KHz.
+ */
+u32 cfg80211_get_start_freq_device(struct cfg80211_chan_def *chandef);
+
+/**
+ * cfg80211_get_end_freq_device - retrieve end frequency of the device BW
+ * @chandef: the channel definition to check
+ * Returns: End frequency in KHz.
+ */
+u32 cfg80211_get_end_freq_device(struct cfg80211_chan_def *chandef);
+
+/**
+ * cfg80211_chandef_device_valid - check if device bandwidth parameters in a channel
+ *	definition are valid
+ * @chandef: the channel definition to check
+ * Return: %true if the device bandwidth parameters are valid. %false otherwise.
+ */
+bool cfg80211_chandef_device_valid(const struct cfg80211_chan_def *chandef);
+
+/**
  * cfg80211_ru_punct_bitmap_valid - check if Puncturing bitmap on given
  * channel definition is valid
  * @chandef: the channel definition to check
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -40,6 +40,8 @@ void cfg80211_chandef_create(struct cfg8
 	chandef->edmg.channels = 0;
 	chandef->ru_punct_bitmap = 0;
 	chandef->ru_punct_bitmap_supp_he = 0;
+	chandef->width_device = NL80211_CHAN_NO_HT;
+	chandef->center_freq_device = 0;
 
 	switch (chan_type) {
 	case NL80211_CHAN_NO_HT:
@@ -648,6 +650,74 @@ static u32 cfg80211_get_end_freq(u32 cen
 	return end_freq;
 }
 
+u32 cfg80211_get_start_freq_device(struct cfg80211_chan_def *chandef)
+{
+	int width = nl80211_chan_width_to_mhz(chandef->width_device);
+
+	if (width < 0)
+		return 0;
+
+	return cfg80211_get_start_freq(MHZ_TO_KHZ(chandef->center_freq_device), width);
+}
+
+u32 cfg80211_get_end_freq_device(struct cfg80211_chan_def *chandef)
+{
+	int width = nl80211_chan_width_to_mhz(chandef->width_device);
+
+	if (width < 0)
+		return 0;
+
+	return cfg80211_get_end_freq(MHZ_TO_KHZ(chandef->center_freq_device), width);
+}
+
+bool cfg80211_chandef_device_valid(const struct cfg80211_chan_def *chandef)
+{
+	int start_freq_device, end_freq_device, start_freq_oper, end_freq_oper;
+
+	if ((chandef->width_device == NL80211_CHAN_WIDTH_20_NOHT &&
+	     chandef->center_freq_device == 0) ||
+	    (chandef->width_device == chandef->width &&
+	     chandef->center_freq_device == chandef->center_freq1))
+		return true;
+
+	if (chandef->center_freq_device == 0 ||
+	    chandef->width_device == NL80211_CHAN_WIDTH_20_NOHT)
+		return false;
+
+	switch (chandef->width_device) {
+	case NL80211_CHAN_WIDTH_320:
+		if (chandef->width != NL80211_CHAN_WIDTH_160)
+			return false;
+		break;
+	case NL80211_CHAN_WIDTH_160:
+		if (chandef->width != NL80211_CHAN_WIDTH_80)
+			return false;
+		break;
+	case NL80211_CHAN_WIDTH_80:
+		if (chandef->width != NL80211_CHAN_WIDTH_40)
+			return false;
+		break;
+	case NL80211_CHAN_WIDTH_40:
+		if (chandef->width != NL80211_CHAN_WIDTH_20)
+			return false;
+		break;
+	default:
+		return false;
+	}
+	start_freq_device = cfg80211_get_start_freq_device(chandef);
+	end_freq_device = cfg80211_get_end_freq_device(chandef);
+
+	start_freq_oper = cfg80211_get_start_freq(MHZ_TO_KHZ(chandef->center_freq1),
+						  chandef->width);
+	end_freq_oper = cfg80211_get_end_freq(MHZ_TO_KHZ(chandef->center_freq1),
+					      chandef->width);
+
+	if (start_freq_device <= start_freq_oper && end_freq_oper <= end_freq_device)
+		return true;
+
+	return false;
+}
+
 static int cfg80211_get_chans_dfs_required(struct wiphy *wiphy,
 					    u32 center_freq,
 					    u32 bandwidth,
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -888,6 +888,8 @@ static const struct nla_policy nl80211_p
 	[NL80211_ATTR_DEL_MULTI_CHAN] = { .type = NLA_U32 },
 	[NL80211_ATTR_RXMGMT_CRITICAL_UPDATE] = NLA_POLICY_NESTED(cu_policy),
 	[NL80211_ATTR_SET_CRITICAL_UPDATE] = { .type = NLA_U8 },
+	[NL80211_ATTR_CHANNEL_WIDTH_DEVICE] = { .type = NLA_U32 },
+	[NL80211_ATTR_CENTER_FREQ_DEVICE] = { .type = NLA_U32 },
 };
 
 /* policy for the key attributes */
@@ -3477,6 +3479,34 @@ static int nl80211_parse_ru_punct_bitmap
 	return 0;
 }
 
+static int nl80211_parse_chandef_device(struct cfg80211_registered_device *rdev,
+					struct genl_info *info,
+					struct cfg80211_chan_def *chandef)
+{
+	chandef->width_device = NL80211_CHAN_WIDTH_20_NOHT;
+	chandef->center_freq_device = 0;
+
+	if (!info->attrs[NL80211_ATTR_CHANNEL_WIDTH_DEVICE] &&
+	    !info->attrs[NL80211_ATTR_CENTER_FREQ_DEVICE])
+		return 0;
+
+	if (!wiphy_ext_feature_isset(&rdev->wiphy, NL80211_EXT_FEATURE_DEVICE_BW))
+		return -EOPNOTSUPP;
+
+	if (!info->attrs[NL80211_ATTR_CENTER_FREQ_DEVICE] ||
+	    !info->attrs[NL80211_ATTR_CHANNEL_WIDTH_DEVICE]) {
+		return -EINVAL;
+	}
+
+	chandef->width_device = nla_get_u32(info->attrs[NL80211_ATTR_CHANNEL_WIDTH_DEVICE]);
+	chandef->center_freq_device = nla_get_u32(info->attrs[NL80211_ATTR_CENTER_FREQ_DEVICE]);
+
+	if (!cfg80211_chandef_device_valid(chandef))
+		return -EINVAL;
+
+	return 0;
+}
+
 int nl80211_parse_chandef(struct cfg80211_registered_device *rdev,
 			  struct genl_info *info,
 			  struct cfg80211_chan_def *chandef,
@@ -3611,6 +3641,12 @@ int nl80211_parse_chandef(struct cfg8021
 		return -EINVAL;
 	}
 
+	err = nl80211_parse_chandef_device(rdev, info, chandef);
+	if (err) {
+		NL_SET_ERR_MSG(extack, "invalid device bandwidth information");
+		return err;
+	}
+
 	if (!cfg80211_chandef_usable(&rdev->wiphy, chandef,
 				     IEEE80211_CHAN_DISABLED)) {
 		NL_SET_ERR_MSG(extack, "(extension) channel is disabled");
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -4849,6 +4849,8 @@ ieee80211_conn_flags_t ieee80211_chandef
 
 	c->ru_punct_bitmap = 0;
 	c->ru_punct_bitmap_supp_he = 0;
+	c->width_device = c->width;
+	c->center_freq_device = c->center_freq1;
 
 	WARN_ON_ONCE(!cfg80211_chandef_valid(c));
 
