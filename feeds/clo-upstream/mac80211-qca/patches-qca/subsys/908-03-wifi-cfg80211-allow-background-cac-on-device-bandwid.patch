From ef6089b63cac2c6f92f00df82785f9d2f8aaf923 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Wed, 24 Jan 2024 13:50:54 -0800
Subject: [PATCH] wifi: cfg80211: allow background cac on device bandwidth

Allow userspace to start a background channel availability check (CAC)
on the current channel if device bandwidth is different than the
operating bandwidth. This allows radar detection on the portion of
the device bandwidth which is not part of the operating bandwidth.
The CAC duration will use the off-channel durations for the applicable
regulatory domain.
Add a new input parameter to cfg80211_chandef_dfs_cac_time() to indicate
if the CAC is required for the current device bandwidth to differentiate
it from the background CAC on a different channel.
Add checks for the device bandwidth parameter in
cfg80211_chandef_identical().

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
---
 include/net/cfg80211.h | 24 ++++++++++++++---
 net/wireless/chan.c    | 61 +++++++++++++++++++++++++++++++++++++++++-
 net/wireless/core.h    |  3 ++-
 net/wireless/mlme.c    | 20 +++++++++++---
 net/wireless/nl80211.c | 17 ++++++++++--
 5 files changed, 114 insertions(+), 11 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -978,8 +978,9 @@ cfg80211_chandef_identical(const struct
 		chandef1->freq1_offset == chandef2->freq1_offset &&
 		chandef1->center_freq2 == chandef2->center_freq2 &&
 		chandef1->ru_punct_bitmap == chandef2->ru_punct_bitmap &&
-		chandef1->ru_punct_bitmap_supp_he ==
-					chandef2->ru_punct_bitmap_supp_he);
+		chandef1->ru_punct_bitmap_supp_he == chandef2->ru_punct_bitmap_supp_he &&
+		chandef1->width_device == chandef2->width_device &&
+		chandef1->center_freq_device == chandef2->center_freq_device);
 }
 
 /**
@@ -1160,16 +1161,31 @@ bool cfg80211_chandef_dfs_usable(struct
 				 const struct cfg80211_chan_def *chandef);
 
 /**
+ * cfg80211_chandef_dfs_usable_device - checks if chandef is DFS usable
+ * @wiphy: the wiphy to validate against
+ * @chandef: the channel definition to check
+ *
+ * Checks if chandef is usable when the device bandwidth parameters are different
+ * than the operating bandwidth parameters and we can/need start CAC on such channel.
+ *
+ * Return: true if all channels available and at least
+ *	   one channel requires CAC (NL80211_DFS_USABLE)
+ */
+bool cfg80211_chandef_dfs_usable_device(struct wiphy *wiphy,
+					const struct cfg80211_chan_def *chandef);
+
+/**
  * cfg80211_chandef_dfs_cac_time - get maximum dfs cac time traversing
  * through the entire channel width
  * @wiphy: the wiphy to validate against
  * @chandef: the channel definition to check
  * @is_bgcac: background cac state
+ * @is_dbw_cac: cac on current device bandwidth
  * Returns: dfs cac time, or 0 is none found
  */
 unsigned int cfg80211_chandef_dfs_cac_time(struct wiphy *wiphy,
-                                           const struct cfg80211_chan_def *chandef,
-                                           bool is_bgcac);
+					   const struct cfg80211_chan_def *chandef,
+					   bool is_bgcac, bool is_dbw_cac);
 
 /**
  * ieee80211_chandef_max_power - maximum transmission power for the chandef
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -748,6 +748,90 @@ bool cfg80211_is_freq_device_non_oper(co
 	return true;
 }
 
+static bool cfg80211_valid_240mhz_freq_device(const struct cfg80211_chan_def *chandef)
+{
+	if (chandef->width_device == NL80211_CHAN_WIDTH_320 &&
+	    chandef->center_freq_device == CENTER_FREQ_5G_240MHZ) {
+		return true;
+	}
+	return false;
+}
+
+static u32 cfg80211_set_ru_punc_bitmap_device(struct wiphy *wiphy,
+					      const struct cfg80211_chan_def *chandef)
+{
+	u32 freq, start_freq, end_freq;
+	u32 device_ru_punct_bitmap = chandef->ru_punct_bitmap;
+	u32 set_ru_punct_bitmap = 0;
+	u32 chan_disable_bit = 0, count_non_oper_chan = 0;
+	struct ieee80211_channel *c;
+
+	if (chandef->center_freq1 == chandef->center_freq_device)
+		return device_ru_punct_bitmap;
+
+	/* Note: The condition is applicable when AP is
+	 * enabled on 5G band when operating center frequency
+	 * is less than device center frequency and bandwidth.
+	 * is set to 320 MHz.
+	 */
+	if (cfg80211_valid_240mhz_freq_device(chandef) &&
+	    chandef->center_freq1 < chandef->center_freq_device)
+		device_ru_punct_bitmap = chandef->ru_punct_bitmap | FIXED_PUNCTURE_PATTERN;
+
+	start_freq = cfg80211_get_start_freq_device(chandef);
+	end_freq = cfg80211_get_end_freq_device(chandef);
+
+	/* Check disabled channels among the non-operating channels present
+	 * in the device bandwidth to set ru puncture bitmap if a channel is
+	 * disabled
+	 */
+	if (chandef->center_freq1 < chandef->center_freq_device)
+		start_freq = MHZ_TO_KHZ(chandef->center_freq_device + 10);
+	else
+		end_freq = MHZ_TO_KHZ(chandef->center_freq_device - 10);
+
+	for (freq = start_freq; freq <= end_freq;
+	     freq += MHZ_TO_KHZ(20), count_non_oper_chan++) {
+		if (count_non_oper_chan > 3 &&
+		    chandef->width_device == NL80211_CHAN_WIDTH_320)
+			continue;
+
+		c = ieee80211_get_channel_khz(wiphy, freq);
+
+		if (!c)
+			return -EINVAL;
+
+		if (c->flags & IEEE80211_CHAN_DISABLED)
+			set_ru_punct_bitmap |= BIT(chan_disable_bit);
+
+		chan_disable_bit++;
+	}
+
+	if (chandef->width_device == NL80211_CHAN_WIDTH_80) {
+		if (chandef->center_freq1 > chandef->center_freq_device)
+			device_ru_punct_bitmap = device_ru_punct_bitmap << 2;
+		else
+			set_ru_punct_bitmap = set_ru_punct_bitmap << 2;
+		return (device_ru_punct_bitmap | set_ru_punct_bitmap);
+	} else if (chandef->width_device == NL80211_CHAN_WIDTH_160) {
+		if (chandef->center_freq1 > chandef->center_freq_device)
+			device_ru_punct_bitmap = device_ru_punct_bitmap << 4;
+		else
+			set_ru_punct_bitmap = set_ru_punct_bitmap << 4;
+		return (device_ru_punct_bitmap | set_ru_punct_bitmap);
+	} else if (chandef->width_device == NL80211_CHAN_WIDTH_320) {
+		if (chandef->center_freq1 > chandef->center_freq_device)
+			device_ru_punct_bitmap = device_ru_punct_bitmap << 8;
+		else
+			set_ru_punct_bitmap = set_ru_punct_bitmap << 8;
+
+		return (device_ru_punct_bitmap | set_ru_punct_bitmap);
+	}
+
+	pr_err("Invalid parameters are passed");
+	return device_ru_punct_bitmap;
+}
+
 static int cfg80211_get_chans_dfs_required(struct wiphy *wiphy,
 					    u32 center_freq,
 					    u32 bandwidth,
@@ -779,6 +863,7 @@ int cfg80211_chandef_dfs_required(struct
 {
 	int width;
 	int ret;
+	u32 ru_punct_bitmap;
 
 	if (WARN_ON(!cfg80211_chandef_valid(chandef)))
 		return -EINVAL;
@@ -788,13 +873,28 @@ int cfg80211_chandef_dfs_required(struct
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_P2P_GO:
 	case NL80211_IFTYPE_MESH_POINT:
-		width = cfg80211_chandef_get_width(chandef);
-		if (width < 0)
-			return -EINVAL;
+		if (cfg80211_chandef_device_present(chandef)) {
+			width =  nl80211_chan_width_to_mhz(chandef->width_device);
+			if (width < 0)
+				return -EINVAL;
+
+			ru_punct_bitmap = cfg80211_set_ru_punc_bitmap_device(wiphy, chandef);
+
+			ret =
+			cfg80211_get_chans_dfs_required(wiphy,
+							MHZ_TO_KHZ(chandef->center_freq_device),
+							width, ru_punct_bitmap);
+		} else {
+			width = cfg80211_chandef_get_width(chandef);
+
+			if (width < 0)
+				return -EINVAL;
+
+			ret = cfg80211_get_chans_dfs_required(wiphy,
+							      ieee80211_chandef_to_khz(chandef),
+							      width, chandef->ru_punct_bitmap);
+		}
 
-		ret = cfg80211_get_chans_dfs_required(wiphy,
-					ieee80211_chandef_to_khz(chandef),
-					width, chandef->ru_punct_bitmap);
 		if (ret < 0)
 			return ret;
 		else if (ret > 0)
@@ -804,8 +904,8 @@ int cfg80211_chandef_dfs_required(struct
 			return 0;
 
 		ret = cfg80211_get_chans_dfs_required(wiphy,
-					MHZ_TO_KHZ(chandef->center_freq2),
-					width, chandef->ru_punct_bitmap);
+						      MHZ_TO_KHZ(chandef->center_freq2),
+						      width, chandef->ru_punct_bitmap);
 		if (ret < 0)
 			return ret;
 		else if (ret > 0)
@@ -918,6 +1018,36 @@ bool cfg80211_chandef_dfs_usable(struct
 }
 EXPORT_SYMBOL(cfg80211_chandef_dfs_usable);
 
+bool cfg80211_chandef_dfs_usable_device(struct wiphy *wiphy,
+					const struct cfg80211_chan_def *chandef)
+{
+	int width;
+	int r1;
+	u32 ru_punct_bitmap;
+
+	if (WARN_ON(!cfg80211_chandef_valid(chandef)))
+		return false;
+
+	width = nl80211_chan_width_to_mhz(chandef->width_device);
+	if (width < 0)
+		return false;
+
+	if (!cfg80211_chandef_device_present(chandef))
+		return false;
+
+	ru_punct_bitmap = cfg80211_set_ru_punc_bitmap_device(wiphy, chandef);
+
+
+	r1 = cfg80211_get_chans_dfs_usable(wiphy,
+					   MHZ_TO_KHZ(chandef->center_freq_device),
+					   width, ru_punct_bitmap);
+
+	if (r1 > 0)
+		return true;
+
+	return false;
+}
+
 /*
  * Checks if center frequency of chan falls with in the bandwidth
  * range of chandef.
@@ -1239,9 +1369,40 @@ static unsigned int cfg80211_get_chans_d
 	return dfs_cac_ms;
 }
 
+static unsigned int cfg80211_get_chans_dfs_cac_time_dbw(struct wiphy *wiphy,
+							const struct cfg80211_chan_def *chandef)
+{
+	struct ieee80211_channel *c;
+	u32 freq, end_freq;
+	unsigned int dfs_cac_ms = 0;
+
+	end_freq = cfg80211_get_end_freq_device(chandef);
+	for (freq = cfg80211_get_start_freq_device(chandef);
+	     freq <= end_freq; freq += MHZ_TO_KHZ(20)) {
+		if (!cfg80211_is_freq_device_non_oper(chandef, freq))
+			continue;
+
+		c = ieee80211_get_channel_khz(wiphy, freq);
+		if (!c)
+			continue;
+
+		if (c->flags & IEEE80211_CHAN_DISABLED)
+			continue;
+
+		if (!(c->flags & IEEE80211_CHAN_RADAR))
+			continue;
+
+		if (c->dfs_cac_ms > dfs_cac_ms)
+			dfs_cac_ms = c->dfs_cac_ms;
+	}
+
+	return dfs_cac_ms;
+}
+
 unsigned int
 cfg80211_chandef_dfs_cac_time(struct wiphy *wiphy,
-			      const struct cfg80211_chan_def *chandef, bool is_bgcac)
+			      const struct cfg80211_chan_def *chandef, bool is_bgcac,
+			      bool is_dbw_cac)
 {
 	int width;
 	unsigned int t1 = 0, t2 = 0, dfs_cac_time;
@@ -1249,6 +1410,11 @@ cfg80211_chandef_dfs_cac_time(struct wip
 	if (WARN_ON(!cfg80211_chandef_valid(chandef)))
 		return 0;
 
+	if (is_dbw_cac) {
+		t1 = cfg80211_get_chans_dfs_cac_time_dbw(wiphy, chandef);
+		goto exit;
+	}
+
 	width = cfg80211_chandef_get_width(chandef);
 	if (width < 0)
 		return 0;
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -482,7 +482,8 @@ void cfg80211_sched_dfs_chan_update(stru
 int
 cfg80211_start_background_radar_detection(struct cfg80211_registered_device *rdev,
 					  struct wireless_dev *wdev,
-					  struct cfg80211_chan_def *chandef);
+					  struct cfg80211_chan_def *chandef,
+					  int link_id);
 
 void cfg80211_stop_background_radar_detection(struct wireless_dev *wdev);
 
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -974,6 +974,10 @@ bool cfg80211_radar_event_device(struct
 
 	for (freq = start_freq, i = 0; freq <= end_freq; i++, freq += MHZ_TO_KHZ(20)) {
 		c = ieee80211_get_channel_khz(wiphy, freq);
+		if (chandef->width_device == NL80211_CHAN_WIDTH_320 &&
+		    (freq >= MHZ_TO_KHZ(5740) && freq <= MHZ_TO_KHZ(5800)))
+			continue;
+
 		if (c->dfs_state == NL80211_DFS_UNAVAILABLE) {
 			chandef->radar_bitmap &= ~BIT(i);
 			nop_in_progress = true;
@@ -984,6 +988,9 @@ bool cfg80211_radar_event_device(struct
 
 	for (freq = start_freq, i = 0; freq <= end_freq; i++, freq += MHZ_TO_KHZ(20)) {
 		c = ieee80211_get_channel_khz(wiphy, freq);
+		if (chandef->width_device == NL80211_CHAN_WIDTH_320 &&
+		    (freq >= MHZ_TO_KHZ(5740) && freq <= MHZ_TO_KHZ(5800)))
+			continue;
 		if (!c || !(c->flags & IEEE80211_CHAN_RADAR))
 			continue;
 
@@ -1113,6 +1120,7 @@ __cfg80211_background_cac_event(struct c
 {
 	struct wiphy *wiphy = &rdev->wiphy;
 	struct net_device *netdev;
+	struct cfg80211_chan_def *w_chandef;
 
 	lockdep_assert_wiphy(&rdev->wiphy);
 
@@ -1143,6 +1151,12 @@ __cfg80211_background_cac_event(struct c
 
 	netdev = wdev ? wdev->netdev : NULL;
 	nl80211_radar_notify(rdev, chandef, event, netdev, GFP_KERNEL);
+	w_chandef = wdev_chandef(wdev, 0);
+
+	if ((event == NL80211_RADAR_CAC_FINISHED || event == NL80211_RADAR_CAC_ABORTED) &&
+	    w_chandef && cfg80211_chandef_identical(w_chandef, chandef)) {
+		rdev->background_radar_wdev = NULL;
+	}
 }
 
 static void
@@ -1188,8 +1202,10 @@ EXPORT_SYMBOL(cfg80211_background_cac_ab
 int
 cfg80211_start_background_radar_detection(struct cfg80211_registered_device *rdev,
 					  struct wireless_dev *wdev,
-					  struct cfg80211_chan_def *chandef)
+					  struct cfg80211_chan_def *chandef,
+					  int link_id)
 {
+	struct cfg80211_chan_def *current_chandef;
 	unsigned int cac_time_ms;
 	int err;
 
@@ -1212,8 +1228,15 @@ cfg80211_start_background_radar_detectio
 	if (err)
 		return err;
 
-	cac_time_ms = cfg80211_chandef_dfs_cac_time(&rdev->wiphy, chandef,
-						    true);
+	current_chandef = wdev_chandef(wdev, link_id);
+	if (current_chandef &&
+	    cfg80211_chandef_identical(current_chandef, chandef) &&
+	    cfg80211_chandef_device_present(chandef))
+		cac_time_ms = cfg80211_chandef_dfs_cac_time(&rdev->wiphy, chandef,
+							    true, true);
+	else
+		cac_time_ms = cfg80211_chandef_dfs_cac_time(&rdev->wiphy, chandef,
+							    true, false);
 	if (!cac_time_ms)
 		cac_time_ms = IEEE80211_DFS_MIN_CAC_TIME_MS;
 
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -10873,6 +10873,19 @@ static int nl80211_start_radar_detection
 		goto unlock;
 	}
 
+	if (nla_get_flag(info->attrs[NL80211_ATTR_RADAR_BACKGROUND]) &&
+	    chandef_link && chandef_link->center_freq_device &&
+	    chandef_link->width_device &&
+	    cfg80211_chandef_identical(&chandef, chandef_link)) {
+		if (!cfg80211_chandef_dfs_usable_device(wiphy, &chandef)) {
+			err = -EINVAL;
+			goto unlock;
+		}
+		err = cfg80211_start_background_radar_detection(rdev, wdev,
+								&chandef, link_id);
+		goto unlock;
+	}
+
 	if (!cfg80211_chandef_dfs_usable(wiphy, &chandef)) {
 		err = -EINVAL;
 		goto unlock;
@@ -10880,7 +10893,7 @@ static int nl80211_start_radar_detection
 
 	if (nla_get_flag(info->attrs[NL80211_ATTR_RADAR_BACKGROUND])) {
 		err = cfg80211_start_background_radar_detection(rdev, wdev,
-								&chandef);
+								&chandef, link_id);
 		goto unlock;
 	}
 
@@ -10906,7 +10919,7 @@ static int nl80211_start_radar_detection
 	}
 
 	cac_time_ms = cfg80211_chandef_dfs_cac_time(&rdev->wiphy, &chandef,
-						    false);
+						    false, false);
 	if (WARN_ON(!cac_time_ms))
 		cac_time_ms = IEEE80211_DFS_MIN_CAC_TIME_MS;
 
