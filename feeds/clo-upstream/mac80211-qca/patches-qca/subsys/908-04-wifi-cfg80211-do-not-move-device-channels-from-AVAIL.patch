From 146608bf063a6706d9c4cdf0770f76522137cb94 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Thu, 30 Nov 2023 21:57:40 -0800
Subject: [PATCH 4/8] wifi: cfg80211: do not move device channels from
 AVAILABLE to USABLE

Once CAC is successful on the channels from the device bandwidth there
is no need to have an expiry for the CAC because the radar detection
is always active on the complete device bandwidth. Do not move such
channels from NL80211_DFS_AVAILABLE to NL80211_DFS_USABLE.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 net/wireless/chan.c | 70 +++++++++++++++++++++++++++++++++++++++++++++
 net/wireless/core.h |  3 ++
 net/wireless/mlme.c |  3 ++
 3 files changed, 76 insertions(+)

--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -1119,6 +1119,79 @@ bool cfg80211_any_wiphy_oper_chan(struct
 	return false;
 }
 
+static bool cfg80211_is_sub_chan_device(struct cfg80211_chan_def *chandef,
+					struct ieee80211_channel *chan)
+{
+	int width;
+	u32 start_freq = chandef->center_freq_device;
+	u32 end_freq = chandef->center_freq_device;
+
+	if (cfg80211_is_sub_chan(chandef, chan, false) == true)
+		return false;
+
+	width = cfg80211_chandef_get_width(chandef);
+	if (chandef->center_freq1 > chandef->center_freq_device)
+		start_freq -= width;
+	else
+		end_freq += width;
+
+	if (chan->center_freq >= start_freq && chan->center_freq <= end_freq)
+		return true;
+
+	return false;
+}
+
+static bool cfg80211_is_wiphy_non_oper_device_chan(struct wiphy *wiphy,
+						   struct ieee80211_channel *chan)
+{
+	struct wireless_dev *wdev;
+	unsigned int link;
+	struct cfg80211_chan_def *chandef;
+
+	list_for_each_entry(wdev, &wiphy->wdev_list, list) {
+		wdev_lock(wdev);
+		if (wdev->iftype == NL80211_IFTYPE_AP) {
+			for_each_valid_link(wdev, link) {
+				chandef = &wdev->links[link].ap.chandef;
+
+				if (!chandef->chan || chandef->chan->band != chan->band ||
+				    !cfg80211_chandef_device_present(chandef))
+					continue;
+
+				if (cfg80211_is_sub_chan_device(&wdev->links[link].ap.chandef,
+								chan)) {
+					wdev_unlock(wdev);
+					return true;
+				}
+			}
+		}
+		wdev_unlock(wdev);
+	}
+
+	return false;
+}
+
+bool cfg80211_any_wiphy_non_oper_device_chan(struct wiphy *wiphy,
+					     struct ieee80211_channel *chan)
+{
+	struct cfg80211_registered_device *rdev;
+
+	ASSERT_RTNL();
+
+	if (!(chan->flags & IEEE80211_CHAN_RADAR))
+		return false;
+
+	list_for_each_entry(rdev, &cfg80211_rdev_list, list) {
+		if (!reg_dfs_domain_same(wiphy, &rdev->wiphy))
+			continue;
+
+		if (cfg80211_is_wiphy_non_oper_device_chan(&rdev->wiphy, chan))
+			return true;
+	}
+
+	return false;
+}
+
 static bool cfg80211_get_chans_dfs_available(struct wiphy *wiphy,
 					     u32 center_freq,
 					     u32 bandwidth,
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -497,6 +497,9 @@ void cfg80211_background_cac_abort_wk(st
 bool cfg80211_any_wiphy_oper_chan(struct wiphy *wiphy,
 				  struct ieee80211_channel *chan);
 
+bool cfg80211_any_wiphy_non_oper_device_chan(struct wiphy *wiphy,
+					     struct ieee80211_channel *chan);
+
 bool cfg80211_beaconing_iface_active(struct wireless_dev *wdev);
 
 bool cfg80211_is_sub_chan(struct cfg80211_chan_def *chandef,
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -922,6 +922,9 @@ void cfg80211_dfs_channels_update_work(s
 				    cfg80211_any_wiphy_oper_chan(wiphy, c))
 					continue;
 
+				if (cfg80211_any_wiphy_non_oper_device_chan(wiphy, c))
+					continue;
+
 				time_dfs_update = REG_PRE_CAC_EXPIRY_GRACE_MS;
 				radar_event = NL80211_RADAR_PRE_CAC_EXPIRED;
 				timeout = c->dfs_state_last_available +
