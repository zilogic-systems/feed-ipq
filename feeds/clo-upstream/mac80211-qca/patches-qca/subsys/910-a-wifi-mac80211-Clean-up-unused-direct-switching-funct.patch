From 8a2027c9d0fbf6a8f57b61a017d89858fd1ca181 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 10 Jan 2024 18:12:47 -0800
Subject: [PATCH 1/4] wifi: mac80211: Clean up unused direct switching
 functions

This patch removes unused functions added for the direct
switching framework.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 include/net/mac80211.h    |  8 --------
 net/mac80211/driver-ops.h | 28 ----------------------------
 net/mac80211/iface.c      | 24 ++++--------------------
 3 files changed, 4 insertions(+), 56 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4784,14 +4784,6 @@ struct ieee80211_ops {
 			    struct net_device *dev,
 			    enum tc_setup_type type,
 			    void *type_data);
-	/*TODO: explore if this can be moved completely under ath12k driver */
-	int (*ppeds_attach_vdev)(struct ieee80211_hw *hw,
-				 struct ieee80211_vif *vif,
-				 void *vp_arg, int *ppe_vp_num,
-				 struct ieee80211_ppe_vp_ds_params *vp_params);
-	int (*ppeds_detach_vdev)(struct ieee80211_hw *hw,
-				 struct ieee80211_vif *vif,
-				 struct ieee80211_ppe_vp_ds_params *vp_params);
 };
 
 /**
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1546,34 +1546,6 @@ static inline int drv_net_setup_tc(struc
 	return ret;
 }
 
-static inline int drv_ppeds_attach_vdev(struct ieee80211_sub_if_data *sdata,
-					struct ieee80211_vif *vif, void *vp_arg,
-					int *ppe_vp_num,
-					struct ieee80211_ppe_vp_ds_params *vp_params)
-{
-
-	struct ieee80211_local *local = sdata->local;
-
-	if (!local->ops->ppeds_attach_vdev)
-	        return -EINVAL;
-
-	return local->ops->ppeds_attach_vdev(&local->hw, vif, vp_arg,
-					     ppe_vp_num, vp_params);
-}
-
-static inline int drv_ppeds_detach_vdev(struct ieee80211_sub_if_data *sdata,
-					struct ieee80211_vif *vif,
-					struct ieee80211_ppe_vp_ds_params *vp_params)
-{
-	struct ieee80211_local *local = sdata->local;
-
-	if (!local->ops->ppeds_detach_vdev)
-	        return -EINVAL;
-
-	return local->ops->ppeds_detach_vdev(&local->hw, vif, vp_params);
-
-}
-
 int drv_change_vif_links(struct ieee80211_local *local,
 			 struct ieee80211_sub_if_data *sdata,
 			 u16 old_links, u16 new_links,
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -834,9 +834,6 @@ void ieee80211_stop_mbssid(struct ieee80
 static int ieee80211_stop(struct net_device *dev)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
-#ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	struct ieee80211_ppe_vp_ds_params vp_params = {0};
-#endif
 
 	/* close dependent VLAN interfaces before locking wiphy */
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
@@ -857,11 +854,9 @@ static int ieee80211_stop(struct net_dev
 #endif
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	if (sdata->vif.ppe_vp_num != -1) {
-		drv_ppeds_detach_vdev(sdata, &sdata->vif, &vp_params);
-		if (sdata->vif.ppe_vp_type != PPE_VP_USER_TYPE_DS)
-			ppe_vp_free(sdata->vif.ppe_vp_num);
-
+	/* Free VP port here for PPE_VP mode */
+	if (ppe_vp_accel && sdata->vif.ppe_vp_num != -1) {
+		ppe_vp_free(sdata->vif.ppe_vp_num);
 		sdata_info(sdata, "Destroyed PPE VP port no:%d for dev:%s\n",
 			   sdata->vif.ppe_vp_num, dev->name);
 		sdata->vif.ppe_vp_num = -1;
@@ -1371,8 +1366,7 @@ static int ieee80211_ppe_vp_802_3_redir_
 					    struct net_device *dev)
 {
 	struct ppe_vp_ai vpai;
-	struct ieee80211_ppe_vp_ds_params vp_params = {0};
-	int vp = -1, ret;
+	int vp = -1;
 
 	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
 
@@ -1382,19 +1376,9 @@ static int ieee80211_ppe_vp_802_3_redir_
 	vpai.src_cb = NULL;
 	vpai.src_cb_data = NULL;
 	vpai.queue_num = 0;
-	vpai.usr_type = PPE_VP_USER_TYPE_DS;
 	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
 
-	vp_params.dev = dev;
-	ret = drv_ppeds_attach_vdev(sdata, &sdata->vif, (void *)&vpai, &vp, &vp_params);
-	if (!ret) {
-		sdata->vif.ppe_vp_type = PPE_VP_USER_TYPE_DS;
-		return vp;
-	}
-
-	sdata_info(sdata, "PPE-DS attach failed falling back to passive vp\n");
-	/* when PPE-DS attach fails, fall back to passive vp support */
-	vpai.usr_type = 0;
+	/* Allocate VP port here for PPE_VP mode */
 	vp = ppe_vp_alloc(dev, &vpai);
 	if (vp <= 0)
 		return -1;
