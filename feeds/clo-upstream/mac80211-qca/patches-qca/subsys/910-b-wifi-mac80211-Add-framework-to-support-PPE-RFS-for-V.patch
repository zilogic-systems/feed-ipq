From 04f003c83b3e190fb2be6b326654e2c2e43dce38 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 10 Jan 2024 19:05:34 -0800
Subject: [PATCH 2/4] wifi: mac80211: Add framework to support PPE RFS for
 VLANs

This patch adds a framework to support PPE RFS for VLANs. As the
driver does not get notified when a VLAN interface is created,
this framework allocates a PPE virtual port for VLAN interfaces,
enabling PPE RFS and achieving round-robin distribution of
traffic flows through VLAN interfaces. This feature can be
enabled by setting the module parameter `ppe_vp_rfs` and
currently set by mac80211.sh script.

	echo 1 > /sys/module/mac80211/parameters/ppe_vp_rfs

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 net/mac80211/iface.c | 35 ++++++++++++++++++++++++++---------
 1 file changed, 26 insertions(+), 9 deletions(-)

--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -37,6 +37,10 @@ MODULE_PARM_DESC(nss_redirect, "module p
 bool ppe_vp_accel = false;
 module_param(ppe_vp_accel, bool, 0644);
 MODULE_PARM_DESC(ppe_vp_accel, "module param to enable PPE; 1-enable, 0-disable");
+
+bool ppe_vp_rfs;
+module_param(ppe_vp_rfs, bool, 0644);
+MODULE_PARM_DESC(ppe_vp_rfs, "module param to enable PPE RFS for VLAN; 1-enable, 0-disable");
 #endif
 
 /**
@@ -854,8 +858,8 @@ static int ieee80211_stop(struct net_dev
 #endif
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	/* Free VP port here for PPE_VP mode */
-	if (ppe_vp_accel && sdata->vif.ppe_vp_num != -1) {
+	/* Free VP port here for PPE_VP mode or RFS Mode for VLANs */
+	if ((ppe_vp_accel || ppe_vp_rfs) && sdata->vif.ppe_vp_num != -1) {
 		ppe_vp_free(sdata->vif.ppe_vp_num);
 		sdata_info(sdata, "Destroyed PPE VP port no:%d for dev:%s\n",
 			   sdata->vif.ppe_vp_num, dev->name);
@@ -1371,18 +1375,30 @@ static int ieee80211_ppe_vp_802_3_redir_
 	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
 
 	vpai.type = PPE_VP_TYPE_SW_L2;
-	vpai.dst_cb = ieee80211_process_dst_ppe_vp;
-	vpai.dst_cb_data = &sdata->vif;
-	vpai.src_cb = NULL;
-	vpai.src_cb_data = NULL;
-	vpai.queue_num = 0;
 	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
 
-	/* Allocate VP port here for PPE_VP mode */
+	/* keep first - ppe_vp_accel if set overrides ppe_vp_rfs */
+	if (ppe_vp_accel) {
+		vpai.dst_cb = ieee80211_process_dst_ppe_vp;
+		vpai.dst_cb_data = &sdata->vif;
+		vpai.src_cb = NULL;
+		vpai.src_cb_data = NULL;
+		vpai.queue_num = 0;
+		sdata->vif.ppe_vp_type = PPE_VP_USER_TYPE_ACTIVE;
+	} else if (ppe_vp_rfs && sdata->vif.type == NL80211_IFTYPE_AP_VLAN) {
+		vpai.usr_type = PPE_VP_USER_TYPE_PASSIVE;
+		vpai.core_mask = 0x7;
+		sdata->vif.ppe_vp_type = PPE_VP_USER_TYPE_PASSIVE;
+	}
+
+	/* Allocate VP port here for PPE_VP mode or RFS mode for VLANs */
 	vp = ppe_vp_alloc(dev, &vpai);
 	if (vp <= 0)
 		return -1;
 
+	sdata_info(sdata, "Allocated PPE VP port no:%d type %d for dev:%s\n",
+		   vp, vpai.usr_type, dev->name);
+
 	return vp;
 }
 #endif
@@ -1667,7 +1683,8 @@ int ieee80211_do_open(struct wireless_de
 #endif
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	if (ppe_vp_accel) {
+	/* for PPE RFS, driver handles VP allocation for non VLAN interfaces */
+	if ((ppe_vp_accel || ppe_vp_rfs) && sdata->vif.ppe_vp_num != -1) {
 		vp = ieee80211_ppe_vp_802_3_redir_vap(sdata, dev);
 		if (vp > 0) {
 			sdata->vif.ppe_vp_num = vp;
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -5017,7 +5017,10 @@ static void ieee80211_rx_8023(struct iee
 	}
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	if (rx->sdata->vif.ppe_vp_num) {
+	/* Do not deliver frames to PPE in fast rx incase of RFS
+	 * RFS is supported only in SFE Mode */
+	if (rx->sdata->vif.ppe_vp_type == PPE_VP_USER_TYPE_ACTIVE &&
+	    rx->sdata->vif.ppe_vp_num != -1) {
 		ieee80211_netif_rx_ppe(rx, skb);
 		atomic_inc(&sta->rx_netif_pkts);
 		return;
