From 5c9dbe559f917c8be8d4a1722991ebe59ad59b58 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Thu, 11 Apr 2024 17:13:24 -0700
Subject: [PATCH] wifi: mac80211- [WAR] Add wdev specific flag to indicate 
 NETDEV_GOING_DOWN to fix deadlock

Relying on a link specific is_going_down bit, when the links are removed
sequentially, ends up on a deadlock, when the parallelly executing
kworker thread for other links checks for this bit and tries acquiring
sdata_lock and goes to sleep, when the is_going_down bit is not set for
other links yet.
Call trace:
[ 1197.513270] task:kworker/u8:1    state:D stack:0     pid:42    ppid:2      flags:0x00000008
[ 1197.516834] Workqueue: phy00 ieee80211_color_collision_detection_work [mac80211]
[ 1197.524926] Call trace:
[ 1197.532548]  __switch_to+0xe4/0xfc
[ 1197.534710]  __schedule+0x42c/0x5a4
[ 1197.538182]  schedule+0x58/0xac
[ 1197.541593]  schedule_preempt_disabled+0x20/0x38
[ 1197.544693]  __mutex_lock.constprop.0+0x260/0x4f8
[ 1197.549564]  __mutex_lock_slowpath+0x10/0x18
[ 1197.554155]  mutex_lock+0x4c/0x58
[ 1197.558494]  ieee80211_color_collision_detection_work+0x70/0x1ac [mac80211]
[ 1197.561732]  process_one_work+0x1c4/0x29c
[ 1197.568477]  worker_thread+0x24c/0x2ec
[ 1197.572653]  kthread+0x104/0x114
[ 1197.576288]  ret_from_fork+0x10/0x20

[ 1202.332719] task:ip              state:D stack:0     pid:1929  ppid:1885   flags:0x00000008
[ 1202.336276] Call trace:
[ 1202.344439]  __switch_to+0xe4/0xfc
[ 1202.346861]  __schedule+0x42c/0x5a4
[ 1202.350339]  schedule+0x58/0xac
[ 1202.353717]  schedule_timeout+0x38/0x248
[ 1202.356844]  wait_for_common+0xd8/0x168
[ 1202.361017]  wait_for_completion+0x14/0x1c
[ 1202.364569]  __flush_work.isra.0+0x150/0x1b0
[ 1202.368737]  __cancel_work_timer+0x170/0x184
[ 1202.373171]  cancel_delayed_work_sync+0x10/0x18
[ 1202.377417]  ieee80211_link_stop+0x2c/0x498 [mac80211]
[ 1202.381679]  ieee80211_link_stop+0x448/0x498 [mac80211]
[ 1202.386880]  ieee80211_vif_set_links+0x30/0x6c [mac80211]
[ 1202.392008]  ieee80211_obss_color_collision_notify+0x3144/0x5350 [mac80211]
[ 1202.397558]  cfg80211_remove_link+0x8c/0xb4 [cfg80211]
[ 1202.404334]  cfg80211_remove_links+0x64/0x7c [cfg80211]
[ 1202.409544]  cfg80211_register_netdevice+0x1f8/0x890 [cfg80211]
[ 1202.414658]  notifier_call_chain+0x64/0x84
[ 1202.420566]  raw_notifier_call_chain+0x14/0x1c
[ 1202.424726]  call_netdevice_notifiers_info+0x88/0x98
[ 1202.429154]  call_netdevice_notifiers+0x24/0x48
[ 1202.434282]  __dev_close_many+0xb0/0x100
[ 1202.438528]  __dev_change_flags+0xcc/0x198
[ 1202.442702]  dev_change_flags+0x20/0x5c
[ 1202.446601]  do_setlink+0x398/0xd1c
[ 1202.450339]  __rtnl_newlink+0x2b8/0x6f0
[ 1202.453805]  rtnl_newlink+0x4c/0x74
[ 1202.457625]  rtnetlink_rcv_msg+0x258/0x2a4
[ 1202.461108]  netlink_rcv_skb+0x9c/0x108
[ 1202.465263]  rtnetlink_rcv+0x14/0x1c
[ 1202.468995]  netlink_unicast+0x168/0x244
[ 1202.472823]  netlink_sendmsg+0x35c/0x3b8
[ 1202.476722]  sock_sendmsg+0x18/0x2c
[ 1202.480635]  ____sys_sendmsg+0x2c4/0x364
[ 1202.483839]  ___sys_sendmsg+0x74/0xbc
[ 1202.488006]  __sys_sendmsg+0x64/0xb0
[ 1202.491573]  __arm64_sys_sendmsg+0x1c/0x24
[ 1202.495211]  el0_svc_common.constprop.0+0xc0/0x130
[ 1202.499118]  do_el0_svc+0x18/0x20
[ 1202.503898]  el0_svc+0x14/0x3c
[ 1202.507276]  el0t_64_sync_handler+0xa8/0x134
[ 1202.510236]  el0t_64_sync+0x14c/0x150

This change adds a wdev specific flag when the NETDEV_GOING_DOWN event
occurs. This ensures, the cfg80211_leave sets the bit as soon as it
acquires the wdev lock. This will ensure the
ieee80211_color_collision_detection_work thread checks for this common
bit and decides not to take on the sdata lock, which will avoid the
deadlock.

Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 include/net/cfg80211.h |  1 +
 net/mac80211/cfg.c     | 24 ++++++++++++++++++++++++
 net/wireless/core.c    |  2 ++
 3 files changed, 27 insertions(+)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -6482,6 +6482,7 @@ struct wireless_dev {
 
 	u8 reg_6g_power_mode;
 	bool critical_update;
+	bool is_netdev_going_down; /*Indicates netdev going down - wdev specific*/
 };
 
 static inline const u8 *wdev_address(struct wireless_dev *wdev)
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -4286,6 +4286,14 @@ void ieee80211_csa_finalize_work(struct
 	if (wdev->links[link->link_id].ap.is_going_down)
 		return;
 
+	/* When a link is brought down, at times the worker threads for other
+	 * link might not see the is_going_down bit to true and
+	 * end up sleeping on the sdata_lock. Check for
+	 * wdev flag as well.
+	 */
+	if (wdev->is_netdev_going_down)
+		return;
+
 	sdata_lock(sdata);
 	mutex_lock(&local->mtx);
 	mutex_lock(&local->chanctx_mtx);
@@ -5457,6 +5465,14 @@ void ieee80211_color_change_finalize_wor
 	if (wdev->links[link->link_id].ap.is_going_down)
 		return;
 
+	/* When a link is brought down, at times the worker threads for other
+	 * link might not see the is_going_down bit to true and
+	 * end up sleeping on the sdata_lock. Check for
+	 * wdev flag as well.
+	 */
+	if (wdev->is_netdev_going_down)
+		return;
+
 	sdata_lock(sdata);
 	mutex_lock(&local->mtx);
 
@@ -5482,6 +5498,14 @@ void ieee80211_color_collision_detection
 			     color_collision_detect_work);
 	struct ieee80211_sub_if_data *sdata = link->sdata;
 
+	/* When a link is brought down, at times the worker threads for other
+	 * link might not see the is_going_down bit to true and
+	 * end up sleeping on the sdata_lock. Check for
+	 * wdev flag as well.
+	 */
+	if (wdev->is_netdev_going_down)
+		return;
+
 	sdata_lock(sdata);
 	cfg80211_obss_color_collision_notify(sdata->dev, link->color_bitmap, GFP_KERNEL, link->link_id);
 	sdata_unlock(sdata);
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -1582,6 +1582,7 @@ void cfg80211_leave(struct cfg80211_regi
 		    struct wireless_dev *wdev)
 {
 	wdev_lock(wdev);
+	wdev->is_netdev_going_down = true;
 	__cfg80211_leave(rdev, wdev, -1);
 	wdev_unlock(wdev);
 }
@@ -1635,6 +1636,7 @@ void cfg80211_init_wdev(struct wireless_
 		wdev->ps = false;
 	/* allow mac80211 to determine the timeout */
 	wdev->ps_timeout = -1;
+	wdev->is_netdev_going_down = false;
 
 	if ((wdev->iftype == NL80211_IFTYPE_STATION ||
 	     wdev->iftype == NL80211_IFTYPE_P2P_CLIENT ||
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6911,6 +6911,7 @@ static int nl80211_start_ap(struct sk_bu
 			wdev->conn_owner_nlportid = info->snd_portid;
 
 		wdev->links[link_id].ap.is_going_down = false;
+		wdev->is_netdev_going_down = false;
 		nl80211_send_ap_started(wdev, link_id);
 	}
 out_unlock:
