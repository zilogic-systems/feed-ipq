From 0d043eb20c96710e3978e3111b3f7edb78f1ea81 Mon Sep 17 00:00:00 2001
From: Vignesh C <quic_vignc@quicinc.com>
Date: Sun, 17 Mar 2024 22:18:57 +0530
Subject: [PATCH] wifi: mac80211: Fix deadlock in interface bringdown

When netdevice is brought down, cfg80211_remove_links
already holds wdev mutex. However, ieee80211_color_collision_detection_work
tries to acquire the same lock during a call to
cancel_delayed_work_sync. This results in a deadlock.

Fix this by checking is_going_down flag before trying to acquire
sdata lock and thus preventing deadlock. This will be set true when
bringing down interface on ___cfg80211_stop_ap().

cfg80211_remove_links --> wdev_lock(wdev);  mutex_lock(&wdev->mtx) held.
	cfg80211_remove_link --> stop_ap called and is_going_down
				 flag set to true.
		del_intf_link
			ieee80211_tear_down_links
				ieee80211_link_stop
					cancel_delayed_work_sync(&link->color_collision_detect_work);

ieee80211_color_collision_detection_work - mutex_lock(&sdata->wdev.mtx);
	trying to same acquire wdev mutex lock.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Signed-off-by: Vignesh C <quic_vignc@quicinc.com>
---
 net/mac80211/cfg.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 66cc5ac..b526026 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -5481,6 +5481,13 @@ void ieee80211_color_collision_detection_work(struct work_struct *work)
 		container_of(delayed_work, struct ieee80211_link_data,
 			     color_collision_detect_work);
 	struct ieee80211_sub_if_data *sdata = link->sdata;
+	struct wireless_dev *wdev = &sdata->wdev;
+
+	/* If is_going_down flag is set, this means that this link is going
+	 * to get removed hence no point in proceeding further
+	 */
+	if (wdev->links[link->link_id].ap.is_going_down)
+		return;
 
 	sdata_lock(sdata);
 	cfg80211_obss_color_collision_notify(sdata->dev, link->color_bitmap, GFP_KERNEL, link->link_id);
-- 
2.34.1

