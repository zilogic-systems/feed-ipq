From 9ffd06794be70b91afcfc34bae3c02fe48898dd0 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Sun, 25 Feb 2024 12:58:25 +0530
Subject: [PATCH] wifi: mac80211: add support for rx drop and tx drop stats

Add support for interface level rx drop and tx drop stats.
Add support to update those stats in the ethtool callback.
Convert ethtool stats strings into enum so that driver and
mac80211 can use the enum to update the same stats field.

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 include/net/mac80211.h     | 30 ++++++++++++++++++++++++++
 net/mac80211/ethtool.c     | 43 +++++++++++++++++++++++++++++---------
 net/mac80211/ieee80211_i.h |  3 ++-
 net/mac80211/rx.c          |  4 +++-
 net/mac80211/tx.c          |  2 ++
 5 files changed, 70 insertions(+), 12 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -7815,4 +7815,34 @@ mesh_nss_offld_proxy_path_exp_update(str
 void ieee80211_critical_update(struct ieee80211_vif *vif, unsigned int link_id,
 				bool critical_flag, u8 bpcc);
 
+/*
+ * ieee80211_gstrings_stats - stats for ethtool interface
+ */
+enum ieee80211_gstrings_stats {
+	IEEE80211_RX_PACKETS,
+	IEEE80211_RX_BYTES,
+	IEEE80211_RX_DUPLICATES,
+	IEEE80211_RX_FRAGMENTS,
+	IEEE80211_RX_DROPPED,
+	IEEE80211_TX_PACKETS,
+	IEEE80211_TX_BYTES,
+	IEEE80211_TX_FILTERED,
+	IEEE80211_TX_RETRY_FAILED,
+	IEEE80211_TX_RETRIES,
+	IEEE80211_STA_STATE,
+	IEEE80211_TX_RATE,
+	IEEE80211_RX_RATE,
+	IEEE80211_SIGNAL,
+	IEEE80211_CHANNEL,
+	IEEE80211_NOISE,
+	IEEE80211_CH_TIME,
+	IEEE80211_CH_TIME_BUSY,
+	IEEE80211_CH_TIME_EXT_BUSY,
+	IEEE80211_CH_TIME_RX,
+	IEEE80211_CH_TIME_TX,
+	IEEE80211_TX_DEV_DROPPED,
+	IEEE80211_RX_DEV_DROPPED,
+	IEEE80211_STATS_MAX,
+};
+
 #endif /* MAC80211_H */
--- a/net/mac80211/ethtool.c
+++ b/net/mac80211/ethtool.c
@@ -48,14 +48,31 @@ static void ieee80211_get_ringparam(stru
 }
 
 static const char ieee80211_gstrings_sta_stats[][ETH_GSTRING_LEN] = {
-	"rx_packets", "rx_bytes",
-	"rx_duplicates", "rx_fragments", "rx_dropped",
-	"tx_packets", "tx_bytes",
-	"tx_filtered", "tx_retry_failed", "tx_retries",
-	"sta_state", "txrate", "rxrate", "signal",
-	"channel", "noise", "ch_time", "ch_time_busy",
-	"ch_time_ext_busy", "ch_time_rx", "ch_time_tx"
+	[IEEE80211_RX_PACKETS] = "rx_packets",
+	[IEEE80211_RX_BYTES] = "rx_bytes",
+	[IEEE80211_RX_DUPLICATES] = "rx_duplicates",
+	[IEEE80211_RX_FRAGMENTS] = "rx_fragments",
+	[IEEE80211_RX_DROPPED] = "rx_dropped",
+	[IEEE80211_TX_PACKETS] = "tx_packets",
+	[IEEE80211_TX_BYTES] = "tx_bytes",
+	[IEEE80211_TX_FILTERED] = "tx_filtered",
+	[IEEE80211_TX_RETRY_FAILED] = "tx_retry_failed",
+	[IEEE80211_TX_RETRIES] = "tx_retries",
+	[IEEE80211_STA_STATE] = "sta_state",
+	[IEEE80211_TX_RATE] = "txrate",
+	[IEEE80211_RX_RATE] ="rxrate",
+	[IEEE80211_SIGNAL] = "signal",
+	[IEEE80211_CHANNEL] = "channel",
+	[IEEE80211_NOISE] = "noise",
+	[IEEE80211_CH_TIME] = "ch_time",
+	[IEEE80211_CH_TIME_BUSY] = "ch_time_busy",
+	[IEEE80211_CH_TIME_EXT_BUSY] = "ch_time_ext_busy",
+	[IEEE80211_CH_TIME_RX] = "ch_time_rx",
+	[IEEE80211_CH_TIME_TX] = "ch_time_tx",
+	[IEEE80211_TX_DEV_DROPPED] = "tx_dev_dropped",
+	[IEEE80211_RX_DEV_DROPPED] = "rx_dev_dropped",
 };
+
 #define STA_STATS_LEN	ARRAY_SIZE(ieee80211_gstrings_sta_stats)
 
 static int ieee80211_get_sset_count(struct net_device *dev, int sset)
@@ -84,7 +101,8 @@ static void ieee80211_get_stats(struct n
 	struct ieee80211_local *local = sdata->local;
 	struct station_info sinfo;
 	struct survey_info survey;
-	int i, q;
+	int q;
+	unsigned long int i;
 #define STA_STATS_SURVEY_LEN 7
 
 	memset(data, 0, sizeof(u64) * STA_STATS_LEN);
@@ -153,7 +171,7 @@ static void ieee80211_get_stats(struct n
 	}
 
 do_survey:
-	i = STA_STATS_LEN - STA_STATS_SURVEY_LEN;
+	i = IEEE80211_CHANNEL;
 	/* Get survey stats for current channel */
 	survey.filled = 0;
 
@@ -208,10 +226,15 @@ do_survey:
 
 	mutex_unlock(&local->sta_mtx);
 
+	data[IEEE80211_TX_DEV_DROPPED] = sdata->tx_dropped;
+	i++;
+	data[IEEE80211_RX_DEV_DROPPED] = sdata->rx_dropped;
+	i++;
+
 	if (WARN_ON(i != STA_STATS_LEN))
 		return;
 
-	drv_get_et_stats(sdata, stats, &(data[STA_STATS_LEN]));
+	drv_get_et_stats(sdata, stats, &(data[0]));
 }
 
 static void ieee80211_get_strings(struct net_device *dev, u32 sset, u8 *data)
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1138,7 +1138,8 @@ struct ieee80211_sub_if_data {
 #ifdef CPTCFG_MAC80211_NSS_SUPPORT
 	struct nss_virt_if_handle *nssctx;
 #endif
-
+	u32 tx_dropped;
+	u32 rx_dropped;
 	/* must be last, dynamically sized area in this! */
 	struct ieee80211_vif vif;
 };
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -1870,6 +1870,7 @@ static int invoke_tx_handlers_early(stru
 
  txh_done:
 	if (unlikely(res == TX_DROP)) {
+		tx->sdata->tx_dropped++;
 		I802_DEBUG_INC(tx->local->tx_handlers_drop);
 		if (tx->skb)
 			ieee80211_free_txskb(&tx->local->hw, tx->skb);
@@ -1914,6 +1915,7 @@ static int invoke_tx_handlers_late(struc
 
  txh_done:
 	if (unlikely(res == TX_DROP)) {
+		tx->sdata->tx_dropped++;
 		I802_DEBUG_INC(tx->local->tx_handlers_drop);
 		if (tx->skb)
 			ieee80211_free_txskb(&tx->local->hw, tx->skb);
