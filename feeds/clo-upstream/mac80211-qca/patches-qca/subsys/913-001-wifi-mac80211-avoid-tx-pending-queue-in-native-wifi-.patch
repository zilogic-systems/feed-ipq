From 2cbb408c068b039886eddd126847c6f6a5ee48ca Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 10 Jan 2024 15:07:22 +0530
Subject: [PATCH 1/2] wifi: mac80211: avoid tx pending queue in native wifi
 path

Managing tx pending queue consumes CPU cycles which is not required in
case of performance mode. Skip tx pending queue path and call underlying
driver tx path directly when stats disable flag is set.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 include/net/mac80211.h |  1 +
 net/mac80211/tx.c      | 24 +++++++++++++++++++-----
 2 files changed, 20 insertions(+), 5 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -3032,6 +3032,7 @@ struct ieee80211_hw {
 	u8 max_txpwr_levels_idx;
 	u32 dbg_mask;
 	u8 medium_busy;
+	bool perf_mode;
 };
 
 static inline bool _ieee80211_hw_check(struct ieee80211_hw *hw,
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -3723,9 +3723,12 @@ void __ieee80211_xmit_fast(struct ieee80
 	struct ieee80211_hdr *hdr = (void *)fast_tx->hdr;
 	struct ieee80211_tx_info *info;
 	struct ieee80211_tx_data tx;
+	struct ieee80211_tx_control control = {};
 	ieee80211_tx_result r;
 	int hw_headroom = sdata->local->hw.extra_tx_headroom;
 	int extra_head = fast_tx->hdr_len - (ETH_HLEN - 2);
+	bool skip_tx_queue = (local->hw.perf_mode &&
+			      !ieee80211_vif_is_mesh(&sdata->vif));
 
 	skb = skb_share_check(skb, GFP_ATOMIC);
 	if (unlikely(!skb))
@@ -3779,8 +3782,11 @@ void __ieee80211_xmit_fast(struct ieee80
 	tx.sta = sta;
 	tx.key = fast_tx->key;
 
-	if (ieee80211_queue_skb(local, sdata, sta, skb))
-		return;
+	if (unlikely(!skip_tx_queue)) {
+		__skb_queue_head_init(&tx.skbs);
+		if (ieee80211_queue_skb(local, sdata, sta, skb))
+			return;
+	}
 
 	tx.skb = skb;
 	r = ieee80211_xmit_fast_finish(sdata, sta, fast_tx->pn_offs,
@@ -3793,8 +3799,15 @@ void __ieee80211_xmit_fast(struct ieee80
 		sdata = container_of(sdata->bss,
 				     struct ieee80211_sub_if_data, u.ap);
 
-	__skb_queue_tail(&tx.skbs, skb);
-	ieee80211_tx_frags(local, &sdata->vif, sta, &tx.skbs, false);
+	if (likely(skip_tx_queue)) {
+		info->control.vif = &sdata->vif;
+		control.sta = sta ? &sta->sta : NULL;
+		drv_tx(local, &control, skb);
+	} else {
+		__skb_queue_tail(&tx.skbs, skb);
+		ieee80211_tx_frags(local, &sdata->vif, sta, &tx.skbs, false);
+	}
+
 	return;
 
 free:
@@ -4903,15 +4916,20 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 					    struct net_device *dev)
 {
 #ifdef CPTCFG_MAC80211_SFE_SUPPORT
-	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev), *orig_sdata;
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ieee80211_tx_control control = {};
 	struct sta_info *sta;
 	struct ieee80211_sta *pubsta = NULL;
+	bool perf_mode = sdata->local->hw.perf_mode;
 
-	info->control.vif = &sdata->vif;
+	orig_sdata = sdata;
+	if (likely(skb->fast_xmit && perf_mode)) {
+		if (sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
+			sdata = container_of(sdata->bss,
+					     struct ieee80211_sub_if_data, u.ap);
 
-	if (skb->fast_xmit) {
+		info->control.vif = &sdata->vif;
 		info->control.flags = u32_encode_bits(IEEE80211_LINK_UNSPECIFIED,
 						      IEEE80211_TX_CTRL_MLO_LINK);
 		info->flags = IEEE80211_TX_CTL_HW_80211_ENCAP;
@@ -4919,7 +4937,7 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 		if (hweight16(sdata->vif.valid_links) > 1) {
 			rcu_read_lock();
 
-			if (ieee80211_lookup_ra_sta(sdata, skb, &sta)) {
+			if (ieee80211_lookup_ra_sta(orig_sdata, skb, &sta)) {
 				kfree_skb(skb);
 				goto out;
 			}
@@ -4938,6 +4956,8 @@ out:
 
 		return NETDEV_TX_OK;
 	}
+
+	info->control.vif = &sdata->vif;
 #endif
 	return __ieee80211_subif_start_xmit_8023(skb, dev, 0, 0, NULL);
 
