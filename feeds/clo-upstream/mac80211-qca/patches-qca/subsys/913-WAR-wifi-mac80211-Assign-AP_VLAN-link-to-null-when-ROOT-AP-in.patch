From f0b92a451680c11250657a6b5d47d11241a8500c Mon Sep 17 00:00:00 2001
From: Rajat Soni <quic_rajson@quicinc.com>
Date: Thu, 21 Mar 2024 10:54:09 +0530
Subject: [PATCH] [WAR] wifi: mac80211: Assign AP_VLAN link to null when ROOT
 AP interface is down

Currently in MLO, we have

2G+5G+6G multi link mld WDS interfaces named as wlan1 and wlan0. REP STA
(5G+6G MLD) gets associated to wlan0 then wlan0.sta1 interface is created.
wlan0.sta1 has 2 links (5G and 6G) that points to same addr as of ROOT AP
wlan0 links (5G and 6G), when iw dev wlan1 del command is given wlan1
wlan1 interface goes down along with 6G in wlan0. We have properly freed
wlan0 6G link and assigned it to NULL, but for AP_VLAN interface wlan0.sta1
6G link is not assgined to NULL. This is causing crash as we try to access
the link which is already freed.

Call trace:
 ieee80211_csa_finish+0x7dc/0xe4c [mac80211]
 nl80211hdr_put+0x34ac/0x6604 [cfg80211]
 nl80211hdr_put+0x3824/0x6604 [cfg80211]
 netlink_dump+0x170/0x320
 __netlink_dump_start+0x178/0x21c
 genl_family_rcv_msg_dumpit+0xdc/0x100
 genl_rcv_msg+0x18c/0x204
 netlink_rcv_skb+0x9c/0x108
 genl_rcv+0x34/0x48
 netlink_unicast+0x168/0x244
 netlink_sendmsg+0x35c/0x3b8
 sock_sendmsg+0x18/0x2c
 ____sys_sendmsg+0x2c4/0x364
 ___sys_sendmsg+0x74/0xbc
 __sys_sendmsg+0x64/0xb0
 __arm64_sys_sendmsg+0x1c/0x24
 el0_svc_common.constprop.0+0xc0/0x130
 do_el0_svc+0x18/0x20
 el0_svc+0x14/0x3c
 el0t_64_sync_handler+0xa8/0x134
 el0t_64_sync+0x14c/0x150
Code: a94153f3 a8c37bfd d65f03c0 f9417c01 (f9424c20)
---[ end trace 0000000000000000 ]---

To fix this issue we need to assign the AP_VLAN's link to NULL that is removed
from ROOT AP.

Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 net/mac80211/link.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/net/mac80211/link.c b/net/mac80211/link.c
index 9b6746f..2e8fe5f 100644
--- a/net/mac80211/link.c
+++ b/net/mac80211/link.c
@@ -242,6 +242,7 @@ static int ieee80211_vif_update_links(struct ieee80211_sub_if_data *sdata,
 	struct ieee80211_bss_conf *old[IEEE80211_MLD_MAX_NUM_LINKS];
 	struct ieee80211_link_data *old_data[IEEE80211_MLD_MAX_NUM_LINKS];
 	bool use_deflink = old_links == 0; /* set for error case */
+	struct ieee80211_sub_if_data *vlan;
 
 	sdata_assert_lock(sdata);
 
@@ -345,6 +346,23 @@ free:
 		links[link_id] = NULL;
 	}
 deinit:
+	/* Below if condition is not expected and is a WAR */
+	if (sdata->vif.type == NL80211_IFTYPE_AP) {
+
+		list_for_each_entry(vlan, &sdata->u.ap.vlans, u.vlan.list) {
+			int link_id_vlan;
+			unsigned long rem = 0xffff & ~sdata->vif.valid_links;
+
+			if (!vlan)
+				continue;
+
+			for_each_set_bit(link_id_vlan, &rem,
+					 IEEE80211_MLD_MAX_NUM_LINKS) {
+				rcu_assign_pointer(vlan->vif.link_conf[link_id_vlan], NULL);
+				rcu_assign_pointer(vlan->link[link_id_vlan], NULL);
+			}
+		}
+	}
 	if (use_deflink)
 		ieee80211_link_init(sdata, -1, &sdata->deflink,
 				    &sdata->vif.bss_conf);
-- 
2.34.1

