From 7cd251eff61f6ca4448fc27a437a53074cc3428b Mon Sep 17 00:00:00 2001
From: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
Date: Wed, 3 Jan 2024 12:00:23 +0530
Subject: [PATCH] wifi: mac80211: Add API to fetch vif of master netdev

Add API to fetch vif of master netdev from VLAN interface.
This is required when the netdev passed is a slave interface and
requirement is to fetch the vif of master wdev.

Signed-off-by: Nandha Kishore Easwaran <quic_nandhaki@quicinc.com>
---
 include/net/mac80211.h | 13 +++++++++++++
 net/mac80211/util.c    | 25 +++++++++++++++++++++++++
 2 files changed, 38 insertions(+)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 7beb3d6..3c007a9 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -2055,6 +2055,19 @@ static inline bool ieee80211_vif_is_mesh(struct ieee80211_vif *vif)
  */
 struct ieee80211_vif *wdev_to_ieee80211_vif(struct wireless_dev *wdev);
 
+/**
+ * wdev_to_ieee80211_vif_vlan - return a vif struct from a wdev
+ * @wdev: the wdev to get the vif for
+ *
+ * This can be used by mac80211 drivers with direct cfg80211 APIs
+ * (like the vendor commands) that get a wdev.
+ *
+ * If the wdev is associated with a vif of AP_VLAN interface, this API
+ * fetches the master interface and returns it. This API can be used for
+ * non-ap/VLAN interfaces.
+ */
+struct ieee80211_vif *wdev_to_ieee80211_vif_vlan(struct wireless_dev *wdev);
+
 /**
  * ieee80211_vif_to_wdev - return a wdev struct from a vif
  * @vif: the vif to get the wdev for
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index 3b1a1d0..ea5ca87 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -850,6 +850,31 @@ struct ieee80211_vif *wdev_to_ieee80211_vif(struct wireless_dev *wdev)
 }
 EXPORT_SYMBOL_GPL(wdev_to_ieee80211_vif);
 
+struct ieee80211_vif *wdev_to_ieee80211_vif_vlan(struct wireless_dev *wdev)
+{
+	struct ieee80211_sub_if_data *sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
+	struct ieee80211_sub_if_data *master;
+
+	if (!ieee80211_sdata_running(sdata))
+		return NULL;
+
+	switch (sdata->vif.type) {
+	case NL80211_IFTYPE_AP_VLAN:
+		master = container_of(sdata->bss,
+				      struct ieee80211_sub_if_data, u.ap);
+		if (WARN_ON(!master))
+			return NULL;
+		if (!(master->flags & IEEE80211_SDATA_IN_DRIVER))
+			return NULL;
+		return &master->vif;
+	default:
+		if (!(sdata->flags & IEEE80211_SDATA_IN_DRIVER))
+			return NULL;
+		return &sdata->vif;
+	}
+}
+EXPORT_SYMBOL_GPL(wdev_to_ieee80211_vif_vlan);
+
 struct wireless_dev *ieee80211_vif_to_wdev(struct ieee80211_vif *vif)
 {
 	if (!vif)
-- 
2.34.1

