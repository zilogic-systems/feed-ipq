From 4c95d6ba4857281e250981592240242debf48a99 Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Sat, 11 May 2024 00:57:29 +0530
Subject: [PATCH] QSDK: wifi: cfg80211: Ignore Peer assoc for GI and LTF
 configuration

In general , When user tries to push LTF and GI values using
the bitrate command, MCS resets and starts incrementing from
basic rate(MCS - 6).

Bitrate command always computes the MCS bitrate mask along with
GI and LTF configuration. It initiates a PEER_ASSOC command to
intimate all station associated. Due to this, FW resets
the MCS the basic rate.

When there is a change in bit rate mask, all the stations bitrate
mask has to be updated which is done through FEER_ASSOC command.
We can skip the PEER_ASSOC command when configuring
GI and LTF alone.

Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 include/net/cfg80211.h |  6 ++++++
 net/wireless/nl80211.c | 28 +++++++++++++++++++++++++++-
 2 files changed, 33 insertions(+), 1 deletion(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -816,6 +816,12 @@ struct cfg80211_bitrate_mask {
 		u16 eht_mcs[NL80211_EHT_NSS_MAX];
 		enum nl80211_eht_gi eht_gi;
 		enum nl80211_eht_ltf eht_ltf;
+		bool legacy_mcs_changed;
+		bool eht_mcs_changed;
+		bool he_mcs_changed;
+		bool he_ul_mcs_changed;
+		bool vht_mcs_changed;
+		bool ht_mcs_changed;
 	} control[NUM_NL80211_BANDS];
 };
 
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -5788,9 +5788,15 @@ static int nl80211_parse_tx_bitrate_mask
 
 		mask->control[i].eht_gi = 0xFF;
 		mask->control[i].eht_ltf = 0xFF;
+
+		mask->control[i].legacy_mcs_changed = false;
+		mask->control[i].ht_mcs_changed = false;
+		mask->control[i].vht_mcs_changed = false;
+		mask->control[i].he_mcs_changed = false;
+		mask->control[i].he_ul_mcs_changed = false;
+		mask->control[i].eht_mcs_changed = false;
 	}
 
-	/* if no rates are given set it back to the defaults */
 	if (!attrs[attr])
 		goto out;
 
@@ -5818,6 +5824,7 @@ static int nl80211_parse_tx_bitrate_mask
 		if (err)
 			return err;
 		if (tb[NL80211_TXRATE_LEGACY]) {
+			mask->control[band].legacy_mcs_changed = true;
 			mask->control[band].legacy = rateset_to_mask(
 				sband,
 				nla_data(tb[NL80211_TXRATE_LEGACY]),
@@ -5827,6 +5834,7 @@ static int nl80211_parse_tx_bitrate_mask
 				return -EINVAL;
 		}
 		if (tb[NL80211_TXRATE_HT]) {
+			mask->control[band].ht_mcs_changed = true;
 			if (!ht_rateset_to_mask(
 					sband,
 					nla_data(tb[NL80211_TXRATE_HT]),
@@ -5836,6 +5844,7 @@ static int nl80211_parse_tx_bitrate_mask
 		}
 
 		if (tb[NL80211_TXRATE_VHT]) {
+			mask->control[band].vht_mcs_changed = true;
 			if (!vht_set_mcs_mask(
 					sband,
 					nla_data(tb[NL80211_TXRATE_VHT]),
@@ -5856,6 +5865,9 @@ static int nl80211_parse_tx_bitrate_mask
 				     link_id))
 			return -EINVAL;
 
+		if (tb[NL80211_TXRATE_HE])
+			mask->control[band].he_mcs_changed = true;
+
 		if (tb[NL80211_TXRATE_HE_GI])
 			mask->control[band].he_gi =
 				nla_get_u8(tb[NL80211_TXRATE_HE_GI]);
@@ -5864,6 +5876,7 @@ static int nl80211_parse_tx_bitrate_mask
 				nla_get_u8(tb[NL80211_TXRATE_HE_LTF]);
 
 		if (tb[NL80211_TXRATE_HE_UL]) {
+			mask->control[band].he_ul_mcs_changed = true;
 			if (!he_set_mcs_mask(
 					info, wdev, sband,
 					nla_data(tb[NL80211_TXRATE_HE_UL]),
@@ -5878,6 +5891,9 @@ static int nl80211_parse_tx_bitrate_mask
 				      mask->control[band].eht_mcs))
 			return -EINVAL;
 
+		if (tb[NL80211_TXRATE_EHT])
+			mask->control[band].eht_mcs_changed = true;
+
 		if (tb[NL80211_TXRATE_EHT_GI])
 			mask->control[band].eht_gi =
 				nla_get_u8(tb[NL80211_TXRATE_EHT_GI]);
