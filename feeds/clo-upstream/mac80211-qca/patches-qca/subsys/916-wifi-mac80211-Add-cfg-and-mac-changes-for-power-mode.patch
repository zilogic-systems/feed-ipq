From e29249e67daa5e768e6405c911d30d7b5df18878 Mon Sep 17 00:00:00 2001
From: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
Date: Thu, 23 May 2024 12:33:01 +0530
Subject: [PATCH] wifi: mac80211: Add cfg and mac changes for power mode 
 change

Add the following cfg80211 and mac80211 changes for  6 GHz power
mode change

1. Add an API ieee80211_6ghz_power_mode_change that indicates the
   BSS change when power mode is changed.
2. Add an API cfg80211_validate_freq_width_for_pwr_mode that
   validates if the input chandef is supported in the input 6 GHz power
   mode.

Patch dependency: 333-0020-mac80211-add-support-for-6G-channels-and-regulatory.patch
Tag: 6G_REGULATORY

Signed-off-by: Hariharan Basuthkar <quic_hbasuthk@quicinc.com>
---
 include/net/cfg80211.h    | 14 +++++++++++++
 include/net/mac80211.h    | 14 +++++++++++++
 net/mac80211/cfg.c        | 38 ++++++++++++++++++++++++++++++++++++
 net/mac80211/driver-ops.h |  2 +-
 net/wireless/chan.c       | 41 +++++++++++++++++++++++++++++++++++++++
 5 files changed, 108 insertions(+), 1 deletion(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index ae0f2fc..82c68e1 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -9744,4 +9744,18 @@ void cfg80211_update_muedca_params_event(struct wiphy *wiphy,
 					 struct ieee80211_mu_edca_param_set
 					 *params, gfp_t gfp);
 
+/**
+ * cfg80211_validate_freq_width_for_pwr_mode - Check if the channel frequency
+ * and width combination is supported in the input 6 GHz power mode
+ *
+ * @wiphy: the wiphy
+ * @chan_def: Channel definition
+ * @reg_6ghz_power_mode: 6 GHz Power mode
+ *
+ * Return 0 if frequency and width combination is supported in the input 6 GHz
+ * power mode, else return error.
+ */
+int cfg80211_validate_freq_width_for_pwr_mode(struct wiphy *wiphy,
+					      struct cfg80211_chan_def *chandef,
+					      u8 reg_6ghz_power_mode0);
 #endif /* __NET_CFG80211_H */
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 20c7491..fd0fa0a 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -345,6 +345,7 @@ struct ieee80211_vif_chanctx_switch {
  *	status changed.
  * @BSS_CHANGED_EHT_PUNCTURING: The channel puncturing bitmap changed.
  * @BSS_CHANGED_AP_PS: PS changed for this BSS (AP mode)
+ * @BSS_CHANGED_6GHZ_POWER_MODE: Indicate the 6 GHz power mode change.
  */
 enum ieee80211_bss_change {
 	BSS_CHANGED_ASSOC		= 1<<0,
@@ -381,6 +382,7 @@ enum ieee80211_bss_change {
 	BSS_CHANGED_UNSOL_BCAST_PROBE_RESP = BIT_ULL(31),
 	BSS_CHANGED_EHT_PUNCTURING	= BIT_ULL(32),
 	BSS_CHANGED_AP_PS               = BIT_ULL(33),
+	BSS_CHANGED_6GHZ_POWER_MODE	= BIT_ULL(34),
 
 	/* when adding here, make sure to change ieee80211_reconfig */
 };
@@ -7837,4 +7839,16 @@ enum ieee80211_gstrings_stats {
 	IEEE80211_STATS_MAX,
 };
 
+/** ieee80211_6ghz_power_mode_change - Change the 6 GHz power mode
+ * @wiphy: Pointer to wiphy
+ * @wdev: Pointer to wdev
+ * @ap_6ghz_pwr_mode: AP 6 GHz power mode
+ * @link_id: Link ID
+ *
+ * Return 0 if 6 GHz power mode change is successful else return error.
+ */
+int ieee80211_6ghz_power_mode_change(struct wiphy *wiphy,
+				     struct wireless_dev *wdev,
+				     u8 ap_6ghz_pwr_mode,
+				     int link_id);
 #endif /* MAC80211_H */
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 47d3a7c..ec3c2d1 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -5238,6 +5238,44 @@ static int ieee80211_set_sar_specs(struct wiphy *wiphy,
 	return local->ops->set_sar_specs(&local->hw, sar);
 }
 
+int
+ieee80211_6ghz_power_mode_change(struct wiphy *wiphy, struct wireless_dev *wdev,
+				 u8 ap_6ghz_pwr_mode,
+				 int link_id)
+{
+	struct ieee80211_sub_if_data *sdata =
+					IEEE80211_DEV_TO_SUB_IF(wdev->netdev);
+	struct ieee80211_link_data *link;
+	u64 changed = 0;
+
+	if (WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
+		return -EINVAL;
+
+	sdata_assert_lock(sdata);
+	rcu_read_lock();
+
+	link = rcu_dereference(sdata->link[link_id]);
+	if (WARN_ON(!link)) {
+		rcu_read_unlock();
+		return -ENOLINK;
+	}
+
+	if (link->conf->csa_active) {
+		rcu_read_lock();
+		return -EBUSY;
+	}
+
+	rcu_read_unlock();
+
+	wdev->reg_6g_power_mode = ap_6ghz_pwr_mode;
+	changed = BSS_CHANGED_6GHZ_POWER_MODE;
+
+	ieee80211_bss_info_change_notify(sdata, changed);
+
+	return 0;
+}
+EXPORT_SYMBOL(ieee80211_6ghz_power_mode_change);
+
 static int
 ieee80211_set_after_color_change_beacon(struct ieee80211_link_data *link,
 					u64 *changed)
diff --git a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
index 4e7b5c5..2fd7626 100644
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -175,7 +175,7 @@ void drv_link_info_changed(struct ieee80211_local *local,
 static inline void drv_nss_bss_info_changed(struct ieee80211_local *local,
 					struct ieee80211_sub_if_data *sdata,
 					struct ieee80211_bss_conf *info,
-					u32 changed)
+					u64 changed)
 {
 	might_sleep();
 
diff --git a/net/wireless/chan.c b/net/wireless/chan.c
index 10f3a58..3d7c678 100644
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -1602,6 +1602,47 @@ static bool cfg80211_edmg_usable(struct wiphy *wiphy, u8 edmg_channels,
 	return true;
 }
 
+int cfg80211_validate_freq_width_for_pwr_mode(struct wiphy *wiphy,
+					      struct cfg80211_chan_def *chandef,
+					      u8 reg_6ghz_power_mode)
+{
+	u8 i, num_20mhz_channels;
+	int start_freq_oper, center_freq;
+	struct ieee80211_channel *chan;
+	u16 width;
+
+	if (chandef->width == NL80211_CHAN_WIDTH_20)
+		width = 20;
+	else if (chandef->width == NL80211_CHAN_WIDTH_40)
+		width = 40;
+	else if (chandef->width == NL80211_CHAN_WIDTH_80)
+		width = 80;
+	else if (chandef->width == NL80211_CHAN_WIDTH_160)
+		width = 160;
+	else if (chandef->width == NL80211_CHAN_WIDTH_320)
+		width = 320;
+	else
+		return -EINVAL;
+
+	num_20mhz_channels = width / 20;
+	start_freq_oper =
+		cfg80211_get_start_freq(MHZ_TO_KHZ(chandef->center_freq1),
+					width);
+
+	for (i = 0; i < num_20mhz_channels; i++) {
+		center_freq = start_freq_oper + (i * MHZ_TO_KHZ(20));
+		chan = ieee80211_get_6g_channel_khz(wiphy,
+						    center_freq,
+						    reg_6ghz_power_mode);
+
+		if (!chan || chan->flags & IEEE80211_CHAN_DISABLED)
+			return -EOPNOTSUPP;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(cfg80211_validate_freq_width_for_pwr_mode);
+
 bool cfg80211_chandef_usable(struct wiphy *wiphy,
 			     const struct cfg80211_chan_def *chandef,
 			     u32 prohibited_flags)
-- 
2.34.1

