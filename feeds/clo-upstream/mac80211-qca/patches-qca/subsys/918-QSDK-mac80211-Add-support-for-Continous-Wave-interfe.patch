From 54e7c646497d2f15afe87493b611f93663f40d00 Mon Sep 17 00:00:00 2001
From: Amit Pandit <quic_pamit@quicinc.com>
Date: Thu, 20 Jun 2024 14:38:08 +0530
Subject: [PATCH] QSDK: mac80211: Add support for Continous Wave interference

During the time when an access point is operational there might be
chances of noise in the medium which would degrade the quality of the
channel leading to higher channel access time, excessive packet
failure/retries, which eventually degrades the user experience.
Hence to address that we allow the driver to detect the channel quality
during runtime and notify the user space, such that the userspace
can take action to move to a new channel.

Support for the below interference type is added.
-> CW interference: this is due to the presence of a
continuous wave interference from non-WLAN devices sharing
the spectrum. eg., baby monitors, cordless phones, etc.

The Driver would notify the userspace for the interference detect
using command - NL80211_CMD_INTERFERENCE_DETECT,
with attribute - NL80211_ATTR_INTERFERENCE_TYPE,
NL80211_ATTR_WIPHY_FREQ, NL80211_ATTR_WIPHY_FREQ_OFFSET and
attributes determining channel width.

As part of NL80211_CMD_UPDATE_AP, NL80211_ATTR_INTERFERENCE_TYPE,
marked as CW interference would be used to enable/disable this
feature to the driver.

Signed-off-by: Amit Pandit <quic_pamit@quicinc.com>
---
 include/net/cfg80211.h       | 15 ++++++++
 include/net/mac80211.h       | 12 ++++++
 include/uapi/linux/nl80211.h | 31 +++++++++++++++
 net/mac80211/cfg.c           |  8 ++++
 net/mac80211/ieee80211_i.h   |  8 ++++
 net/mac80211/main.c          |  4 ++
 net/mac80211/util.c          | 73 ++++++++++++++++++++++++++++++++++++
 net/wireless/mlme.c          |  8 ++++
 net/wireless/nl80211.c       | 53 ++++++++++++++++++++++++++
 net/wireless/nl80211.h       |  4 ++
 10 files changed, 216 insertions(+)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1619,6 +1619,8 @@ struct cfg80211_unsol_bcast_probe_resp {
  * @beacon_tx_mode: Beacon Tx Mode setting
  * @elemid_added: critical update element id inserted
  * @elemid_modified: critical update element id modified
+ * @intf_detect_bitmap: Interference detection bitmap.
+ *	BIT(0) represents - CW Interference.
  */
 struct cfg80211_ap_settings {
 	struct cfg80211_chan_def chandef;
@@ -1659,6 +1661,7 @@ struct cfg80211_ap_settings {
 	bool ap_ps_enable;
 	bool elemid_added;
 	bool elemid_modified;
+	u8 intf_detect_bitmap;
 };
 
 /**
@@ -8925,6 +8928,18 @@ void cfg80211_awgn_event(struct wiphy *w
 			 gfp_t gfp, u32 chan_bw_interference_bitmap);
 
 /**
+ * cfg80211_cw_event - CW detection event
+ * @wiphy: the wiphy
+ * @chandef: chandef for the current channel
+ * @gfp: context flags
+ *
+ * This function is called when Continous Wave
+ * is detected on the current channel.
+ */
+void cfg80211_cw_event(struct wiphy *wiphy, struct cfg80211_chan_def *chandef,
+			 gfp_t gfp);
+
+/**
  * cfg80211_sta_opmode_change_notify - STA's ht/vht operation mode change event
  * @dev: network device
  * @mac: MAC address of a station which opmode got modified
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -346,6 +346,7 @@ struct ieee80211_vif_chanctx_switch {
  * @BSS_CHANGED_EHT_PUNCTURING: The channel puncturing bitmap changed.
  * @BSS_CHANGED_AP_PS: PS changed for this BSS (AP mode)
  * @BSS_CHANGED_6GHZ_POWER_MODE: Indicate the 6 GHz power mode change.
+ * @BSS_CHANGED_INTF_DETECT: Interference Detect parameters changed for this Radio.
  */
 enum ieee80211_bss_change {
 	BSS_CHANGED_ASSOC		= 1<<0,
@@ -383,6 +384,7 @@ enum ieee80211_bss_change {
 	BSS_CHANGED_EHT_PUNCTURING	= BIT_ULL(32),
 	BSS_CHANGED_AP_PS               = BIT_ULL(33),
 	BSS_CHANGED_6GHZ_POWER_MODE	= BIT_ULL(34),
+	BSS_CHANGED_INTF_DETECT		= BIT_ULL(35),
 
 	/* when adding here, make sure to change ieee80211_reconfig */
 };
@@ -821,6 +823,7 @@ struct ieee80211_bss_conf {
 	bool elemid_added;
 	bool elemid_modified;
 	u32 rts_threshold;
+	u8 intf_detect_bitmap;
 };
 
 /**
@@ -6806,6 +6809,15 @@ void ieee80211_awgn_detected(struct ieee
 			     struct ieee80211_channel *awgn_channel);
 
 /**
+ * ieee80211_cw_detected - inform that cw interference is detected
+ *
+ * @hw: pointer as obtained from ieee80211_alloc_hw()
+ * @cw_channel: Channel pointer on which Continous Wave Interference is detected. Mandatory to pass
+ *	for MLO drivers. For non-MLO %NULL can be passed
+ */
+void ieee80211_cw_detected(struct ieee80211_hw *hw, struct ieee80211_channel *cw_channel);
+
+/**
  * ieee80211_request_smps - request SM PS transition
  * @vif: &struct ieee80211_vif pointer from the add_interface callback.
  * @link_id: link ID for MLO, or 0
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -1328,6 +1328,9 @@
  *	%NL80211_ATTR_AWGN_INTERFERENCE_BITMAP
  * @NL80211_ATTR_AWGN_INTERFERENCE_BITMAP: u32 attribute specifying the
  *	interference bitmap of operating bandwidth for %NL80211_CMD_AWGN_DETECT
+ * @NL80211_CMD_INTERFERENCE_DETECT: Once any interference is detected on the
+ *	operating channel, userspace would be notified of it
+ *	using %NL80211_ATTR_INTERFERENCE_TYPE.
  * @NL80211_CMD_MAX: highest used command number
  * @__NL80211_CMD_AFTER_LAST: internal use
  */
@@ -1586,9 +1589,14 @@ enum nl80211_commands {
 
 	NL80211_CMD_UPDATE_HE_MUEDCA_PARAMS,
 
+	/* To be Deprecated from ATH QSDK, once we upstream
+	 * NL80211_CMD_INTERFERENCE_DETECT
+	 */
 	NL80211_CMD_AWGN_DETECT,
 
 	NL80211_CMD_STOP_BGRADAR_DETECT,
+
+	NL80211_CMD_INTERFERENCE_DETECT,
 	/* add new commands above here */
 
 	/* used to define NL80211_CMD_MAX below */
@@ -2889,6 +2897,13 @@ enum nl80211_commands {
  *	value must be such that the operating bandwidth is a subset of the
  *	device bandwidth.
  *
+ * @NL80211_ATTR_INTERFERENCE_TYPE: Different Interference Types (u32).
+ * 	This value indicates the below list of interference detected.
+ * 	1. Continous Wave Interference, it can be from a dialer phone or microwave.
+ * 	2. AWGN Interference.
+ *
+ * 	The above list is detailed in the enum nl80211_interference_type.
+ *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -3464,6 +3479,7 @@ enum nl80211_attrs {
 	NL80211_ATTR_SET_CRITICAL_UPDATE,
 	NL80211_ATTR_CHANNEL_WIDTH_DEVICE,
 	NL80211_ATTR_CENTER_FREQ_DEVICE,
+	NL80211_ATTR_INTERFERENCE_TYPE,
 
 	/* add attributes here, update the policy in nl80211.c */
 
@@ -8255,4 +8271,19 @@ enum nl80211_set_cu {
 
 	NUM_NL80211_CUS = BIT(2),
 };
+
+/**
+ * enum nl80211_interference_type -
+ *
+ * @NL80211_CW_INTERFERENCE_DETECTED : Continous Wave Interference Detected.
+ * @NL80211_AWGN_INTERFERENCE_DETECTED : AWGN Interference Detected.
+*/
+enum nl80211_interference_type {
+	NL80211_INTERFERENCE_TYPE_INVALID,
+	NL80211_INTERFERENCE_TYPE_CW,
+	NL80211_INTERFERENCE_TYPE_AWGN,
+
+	NL80211_INTERFERENCE_TYPE_LAST,
+	NL80211_INTERFERENCE_TYPE_MAX = NL80211_INTERFERENCE_TYPE_LAST - 1,
+};
 #endif /* __LINUX_NL80211_H */
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1692,6 +1692,14 @@ static int ieee80211_update_ap(struct wi
 			return err;
 	}
 
+	if (link_conf->intf_detect_bitmap != params->intf_detect_bitmap) {
+		link_conf->intf_detect_bitmap = params->intf_detect_bitmap;
+		if (err < 0)
+			err = BSS_CHANGED_INTF_DETECT;
+		else
+			err |= BSS_CHANGED_INTF_DETECT;
+	}
+
 	if (ieee80211_hw_check(&sdata->local->hw, SUPPORTS_AP_PS) &&
 	    params->ap_ps_valid) {
 		link_conf->ap_ps_enable = params->ap_ps_enable;
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1353,6 +1353,11 @@ struct channel_awgn_info {
 	u32 chan_bw_interference_bitmap;
 };
 
+struct channel_cw_info {
+	struct list_head list;
+	struct ieee80211_channel *cw_channel;
+};
+
 struct ieee80211_local {
 	/* embed the driver visible part.
 	 * don't cast (use the static inlines below), but we keep
@@ -1650,10 +1655,12 @@ struct ieee80211_local {
 
 	struct mac80211_memory_stats memory_stats;
 	struct work_struct awgn_detected_work;
+	struct work_struct cw_detected_work;
 
 	bool enable_tx_latency_stats;
 
 	struct list_head awgn_info_list;
+	struct list_head cw_info_list;
 
 	const char *wlan_name;
 
@@ -2651,6 +2658,7 @@ void ieee80211_dfs_cac_timer_work(struct
 void ieee80211_dfs_cac_cancel(struct ieee80211_local *local);
 void ieee80211_dfs_radar_detected_work(struct work_struct *work);
 void ieee80211_awgn_detected_work(struct work_struct *work);
+void ieee80211_cw_detected_work(struct work_struct *work);
 int ieee80211_send_action_csa(struct ieee80211_sub_if_data *sdata,
 			      struct cfg80211_csa_settings *csa_settings);
 
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -357,6 +357,7 @@ static void ieee80211_restart_work(struc
 	wiphy_work_cancel(local->hw.wiphy, &local->sched_scan_stopped_work);
 	flush_work(&local->radar_detected_work);
 	flush_work(&local->awgn_detected_work);
+	flush_work(&local->cw_detected_work);
 
 	rtnl_lock();
 	/* we might do interface manipulations, so need both */
@@ -842,6 +843,8 @@ struct ieee80211_hw *ieee80211_alloc_hw_
 		  ieee80211_dfs_radar_detected_work);
 	INIT_WORK(&local->awgn_detected_work,
 		  ieee80211_awgn_detected_work);
+	INIT_WORK(&local->cw_detected_work,
+		  ieee80211_cw_detected_work);
 	INIT_LIST_HEAD(&local->awgn_info_list);
 
 	INIT_WORK(&local->reconfig_filter, ieee80211_reconfig_filter);
@@ -1610,6 +1613,7 @@ void ieee80211_unregister_hw(struct ieee
 	wiphy_work_cancel(local->hw.wiphy, &local->sched_scan_stopped_work);
 	flush_work(&local->radar_detected_work);
 	flush_work(&local->awgn_detected_work);
+	flush_work(&local->cw_detected_work);
 	wiphy_unlock(local->hw.wiphy);
 	rtnl_unlock();
 
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -4661,6 +4661,42 @@ static void ieee80211_awgn_detected_proc
 	}
 }
 
+static void ieee80211_cw_detected_processing(struct ieee80211_local *local,
+					     struct ieee80211_channel *cw_channel)
+{
+	struct cfg80211_chan_def chandef = local->hw.conf.chandef;
+	struct cfg80211_chan_def *cw_chandef = NULL;
+	struct ieee80211_chanctx *ctx;
+	int num_chanctx = 0;
+
+	mutex_lock(&local->chanctx_mtx);
+	list_for_each_entry(ctx, &local->chanctx_list, list) {
+		if (ctx->replace_state == IEEE80211_CHANCTX_REPLACES_OTHER)
+			continue;
+
+		num_chanctx++;
+		chandef = ctx->conf.def;
+
+		if (cw_channel &&
+		    (chandef.chan == cw_channel))
+			cw_chandef = &ctx->conf.def;
+	}
+	mutex_unlock(&local->chanctx_mtx);
+
+	if (num_chanctx > 1) {
+		if (local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO) {
+			if (WARN_ON(!cw_chandef))
+				return;
+			cfg80211_cw_event(local->hw.wiphy, cw_chandef, GFP_KERNEL);
+		} else {
+			/* multi-channel is not supported */
+			WARN_ON_ONCE(1);
+		}
+	} else {
+		cfg80211_cw_event(local->hw.wiphy, &chandef, GFP_KERNEL);
+	}
+}
+
 void ieee80211_awgn_detected_work(struct work_struct *work)
 {
 	struct ieee80211_local *local =
@@ -4684,6 +4720,26 @@ void ieee80211_awgn_detected_work(struct
 	}
 }
 
+void ieee80211_cw_detected_work(struct work_struct *work)
+{
+	struct ieee80211_local *local =
+		container_of(work, struct ieee80211_local, cw_detected_work);
+	struct channel_cw_info *cw_info, *temp;
+	struct ieee80211_channel *cw_channel;
+
+	if (WARN_ON(list_empty(&local->cw_info_list)))
+		return;
+
+	list_for_each_entry_safe(cw_info, temp, &local->cw_info_list, list) {
+		cw_channel = cw_info->cw_channel;
+
+		ieee80211_cw_detected_processing(local, cw_channel);
+
+		list_del(&cw_info->list);
+		kfree(cw_info);
+	}
+}
+
 static void
 ieee80211_dfs_radar_detected_processing(struct ieee80211_local *local,
 					u16 radar_bitmap,
@@ -4808,6 +4864,23 @@ void ieee80211_awgn_detected(struct ieee
 }
 EXPORT_SYMBOL(ieee80211_awgn_detected);
 
+void ieee80211_cw_detected(struct ieee80211_hw *hw, struct ieee80211_channel *cw_channel)
+{
+	struct ieee80211_local *local = hw_to_local(hw);
+	struct channel_cw_info *cw_info;
+
+	cw_info = kzalloc(sizeof(*cw_info), GFP_ATOMIC);
+	if (!cw_info)
+		return;
+
+	INIT_LIST_HEAD(&cw_info->list);
+	cw_info->cw_channel = cw_channel;
+
+	list_add_tail(&cw_info->list, &local->cw_info_list);
+	schedule_work(&local->cw_detected_work);
+}
+EXPORT_SYMBOL(ieee80211_cw_detected);
+
 ieee80211_conn_flags_t ieee80211_chandef_downgrade(struct cfg80211_chan_def *c)
 {
 	ieee80211_conn_flags_t ret;
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -1088,6 +1088,14 @@ void cfg80211_awgn_event(struct wiphy *w
 }
 EXPORT_SYMBOL(cfg80211_awgn_event);
 
+void cfg80211_cw_event(struct wiphy *wiphy, struct cfg80211_chan_def *chandef, gfp_t gfp)
+{
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+
+	nl80211_cw_notify(rdev, chandef, NULL, gfp);
+}
+EXPORT_SYMBOL(cfg80211_cw_event);
+
 void cfg80211_cac_event(struct net_device *netdev,
 			const struct cfg80211_chan_def *chandef,
 			enum nl80211_radar_event event, gfp_t gfp,
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -890,6 +890,7 @@ static const struct nla_policy nl80211_p
 	[NL80211_ATTR_SET_CRITICAL_UPDATE] = { .type = NLA_U8 },
 	[NL80211_ATTR_CHANNEL_WIDTH_DEVICE] = { .type = NLA_U32 },
 	[NL80211_ATTR_CENTER_FREQ_DEVICE] = { .type = NLA_U32 },
+	[NL80211_ATTR_INTERFERENCE_TYPE] = { .type = NLA_U8 },
 };
 
 /* policy for the key attributes */
@@ -6942,6 +6943,10 @@ static int nl80211_update_ap(struct sk_b
 
 	memset(params, 0, sizeof(*params));
 
+	if (info->attrs[NL80211_ATTR_INTERFERENCE_TYPE]) {
+		params->intf_detect_bitmap = nla_get_u8(info->attrs[NL80211_ATTR_INTERFERENCE_TYPE]);
+	}
+
 	if (info->attrs[NL80211_ATTR_AP_PS]) {
 		params->ap_ps_enable = nla_get_u8(info->attrs[NL80211_ATTR_AP_PS]);
 		params->ap_ps_valid = true;
@@ -20711,6 +20716,54 @@ void nl80211_awgn_notify(struct cfg80211
 		goto nla_put_failure;
 
 	genlmsg_end(msg, hdr);
+
+	ret = genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				      NL80211_MCGRP_MLME, gfp);
+	return;
+
+nla_put_failure:
+	nlmsg_free(msg);
+}
+
+void nl80211_cw_notify(struct cfg80211_registered_device *rdev,
+			 struct cfg80211_chan_def *chandef,
+			 struct net_device *netdev,
+			 gfp_t gfp)
+{
+	struct sk_buff *msg;
+	void *hdr;
+	int ret;
+
+	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
+	if (!msg)
+		return;
+
+	hdr = nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_INTERFERENCE_DETECT);
+	if (!hdr) {
+		nlmsg_free(msg);
+		return;
+	}
+
+	 if (nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx))
+		 goto nla_put_failure;
+
+	if (netdev) {
+		struct wireless_dev *wdev = netdev->ieee80211_ptr;
+
+		if (nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex) ||
+		    nla_put_u64_64bit(msg, NL80211_ATTR_WDEV, wdev_id(wdev),
+				      NL80211_ATTR_PAD))
+			goto nla_put_failure;
+	}
+
+	if (nla_put_u32(msg, NL80211_ATTR_INTERFERENCE_TYPE, NL80211_INTERFERENCE_TYPE_CW)) {
+		goto nla_put_failure;
+	}
+
+	if (nl80211_send_chandef(msg, chandef))
+		goto nla_put_failure;
+
+	genlmsg_end(msg, hdr);
 
 	ret = genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
 				      NL80211_MCGRP_MLME, gfp);
--- a/net/wireless/nl80211.h
+++ b/net/wireless/nl80211.h
@@ -121,6 +121,10 @@ void nl80211_awgn_notify(struct cfg80211
                         struct net_device *netdev,
                         gfp_t gfp, u32 chan_bw_interference_bitmap);
 
+void nl80211_cw_notify(struct cfg80211_registered_device *rdev,
+                        struct cfg80211_chan_def *chandef,
+                        struct net_device *netdev,
+                        gfp_t gfp);
 void nl80211_send_ap_stopped(struct wireless_dev *wdev, unsigned int link_id);
 
 void cfg80211_rdev_free_coalesce(struct cfg80211_registered_device *rdev);
