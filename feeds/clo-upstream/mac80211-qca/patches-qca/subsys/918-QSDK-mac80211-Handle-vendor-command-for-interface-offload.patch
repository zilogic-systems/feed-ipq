From 3bf83a5df26f1f3ffb57e8bb3dba8c0c83e43ba8 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Mon, 10 Jun 2024 16:13:37 -0700
Subject: [PATCH] mac80211: Handle vendor command for interface offload type

Add support to handle interface offload type configuration
through vendor command from userspace tools. Use the offload
type configured to allocate respective PPE VP and map it with the
netdev. This enables the PPE HW to identify the flows and handle
the frames in the respective offload datapath configured

Patch-depdendency: 955-QSDK-wifi-ath12k-Handle-vendor-command-for-interface-offl.patch

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 include/net/cfg80211.h |  2 ++
 include/net/mac80211.h |  1 +
 net/mac80211/iface.c   | 11 ++++++-----
 net/wireless/core.c    |  2 ++
 4 files changed, 11 insertions(+), 5 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -6480,6 +6480,7 @@ struct wireless_dev {
 	u8 reg_6g_power_mode;
 	bool critical_update;
 	bool is_netdev_going_down; /*Indicates netdev going down - wdev specific*/
+	u8 ppe_vp_type;
 };
 
 static inline const u8 *wdev_address(struct wireless_dev *wdev)
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1990,7 +1990,7 @@ struct ieee80211_vif {
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	int ppe_vp_num;
-	unsigned long ppe_vp_type;
+	u8 ppe_vp_type;
 #endif
 	bool is_roc;
 	/* must be last */
@@ -3785,6 +3785,7 @@ struct ieee80211_prep_tx_info {
 	u8 success:1;
 };
 
+#define MAC80211_INVALID_PPE_VP_NUM -1
 struct ieee80211_ppe_vp_ds_params {
 	struct net_device *dev;
 	int ppe_vp_profile_idx;
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -1367,10 +1367,11 @@ static bool ieee80211_process_dst_ppe_vp
  * on failure returns -1;
  */
 static int ieee80211_ppe_vp_802_3_redir_vap(struct ieee80211_sub_if_data *sdata,
-					    struct net_device *dev)
+					    struct net_device *dev,
+					    int ppe_vp_type)
 {
 	struct ppe_vp_ai vpai;
-	int vp = -1;
+	int vp = MAC80211_INVALID_PPE_VP_NUM;
 
 	memset(&vpai, 0, sizeof(struct ppe_vp_ai));
 
@@ -1384,13 +1385,12 @@ static int ieee80211_ppe_vp_802_3_redir_
 		vpai.src_cb = NULL;
 		vpai.src_cb_data = NULL;
 		vpai.queue_num = 0;
-		sdata->vif.ppe_vp_type = PPE_VP_USER_TYPE_ACTIVE;
 	} else if (ppe_vp_rfs && sdata->vif.type == NL80211_IFTYPE_AP_VLAN) {
 		vpai.usr_type = PPE_VP_USER_TYPE_PASSIVE;
 		vpai.core_mask = 0x7;
-		sdata->vif.ppe_vp_type = PPE_VP_USER_TYPE_PASSIVE;
 	}
 
+	sdata->vif.ppe_vp_type = ppe_vp_type;
 	/* Allocate VP port here for PPE_VP mode or RFS mode for VLANs */
 	vp = ppe_vp_alloc(dev, &vpai);
 	if (vp <= 0)
@@ -1685,7 +1685,8 @@ int ieee80211_do_open(struct wireless_de
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	/* for PPE RFS, driver handles VP allocation for non VLAN interfaces */
 	if ((ppe_vp_accel || ppe_vp_rfs) && sdata->vif.ppe_vp_num != -1) {
-		vp = ieee80211_ppe_vp_802_3_redir_vap(sdata, dev);
+		vp = ieee80211_ppe_vp_802_3_redir_vap(sdata, dev,
+						      wdev->ppe_vp_type);
 		if (vp > 0) {
 			sdata->vif.ppe_vp_num = vp;
 			sdata_info(sdata, "Allocated vp:%d for device:%s\n",
