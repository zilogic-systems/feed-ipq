From 978aea4124c493b535617d24237c9fcb625c8b2a Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Tue, 28 May 2024 22:22:54 +0530
Subject: [PATCH] wifi: cfg80211: set critical update for non-transmitting BSS

Add support in NL80211 and CFG80211 to handle modified critical
update bitmap for both transmitting and non-transmitting BSS.

Patch-depdendency: 855-02-mac80211-cfg80211-Parse-NL-attribute-to-set-critical.patch

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
---
 include/net/cfg80211.h       | 24 ++++++++----
 include/uapi/linux/nl80211.h | 35 +++++++++++------
 net/wireless/nl80211.c       | 75 +++++++++++++++++-------------------
 3 files changed, 75 insertions(+), 59 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1398,6 +1398,21 @@ struct cfg80211_rnr_elems {
 };
 
 /**
+ * struct cfg80211_set_cu_params
+ * Critical update Parameter for given beacon update.
+ *
+ * @elemid_added_bmap: bitmap of BSS indexes having
+ * existing beacon elements modified.
+ * @elemid_modified_bmap : bitmap of BSS indexes having
+ * new beacon elements added.
+ */
+
+struct cfg80211_set_cu_params {
+	u32 elemid_added_bmap;
+	u32 elemid_modified_bmap;
+};
+
+/**
  * struct cfg80211_beacon_data - beacon data
  * @link_id: the link ID for the AP MLD link sending this beacon
  * @head: head portion of beacon (before TIM IE)
@@ -1453,6 +1468,7 @@ struct cfg80211_beacon_data {
 	size_t civicloc_len;
 	struct cfg80211_he_bss_color he_bss_color;
 	bool he_bss_color_valid;
+	struct cfg80211_set_cu_params cu_params;
 };
 
 struct mac_address {
@@ -1502,6 +1518,7 @@ struct cfg80211_fils_discovery {
  * @tmpl_len: Template length
  * @tmpl: Template data for probe response
  */
+
 struct cfg80211_unsol_bcast_probe_resp {
 	u32 interval;
 	size_t tmpl_len;
@@ -1553,8 +1570,6 @@ struct cfg80211_unsol_bcast_probe_resp {
  *	a 20 MHz channel, lowest bit corresponding to the lowest channel.
  *	Bit set to 1 indicates that the channel is punctured.
  * @beacon_tx_mode: Beacon Tx Mode setting
- * @elemid_added: critical update element id inserted
- * @elemid_modified: critical update element id modified
  * @intf_detect_bitmap: Interference detection bitmap.
  *	BIT(0) represents - CW Interference.
  */
@@ -1595,8 +1610,6 @@ struct cfg80211_ap_settings {
 	enum nl80211_beacon_tx_mode beacon_tx_mode;
 	bool ap_ps_valid;
 	bool ap_ps_enable;
-	bool elemid_added;
-	bool elemid_modified;
 	u8 intf_detect_bitmap;
 };
 
@@ -1633,8 +1646,6 @@ struct cfg80211_csa_settings {
 	u8 count;
 	u16 punct_bitmap;
 	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
-	bool beacon_after_cu;
-	bool beacon_csa_cu;
 };
 
 /**
@@ -1658,7 +1669,6 @@ struct cfg80211_color_change_settings {
 	u8 count;
 	u8 color;
 	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
-	bool elemid_added;
 };
 
 /**
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2889,8 +2889,8 @@ enum nl80211_commands {
  *	update for each MLD. In each nested item, it contains attributes
  *	defined in &enum nl80211_cu_attrs.
  *
- * @NL80211_ATTR_SET_CRITICAL_UPDATE: set critical update for the bss (u8)
- *	(see &enum nl80211_set_cu).
+ * @NL80211_ATTR_SET_CRITICAL_UPDATE: set critical update bitmap for the BSS(s)
+ *	(see &enum nl80211_set_cu_attrs).
  *
  * @NL80211_ATTR_CHANNEL_WIDTH_DEVICE: Device channel width (u32). Value
  *	must be zero or twice @NL80211_ATTR_CHANNEL_WIDTH which is the
@@ -8248,19 +8248,30 @@ enum nl80211_cu_mld_link_attrs {
 };
 
 /**
- * enum nl80211_set_cu - set critical update params
+ * enum nl80211_set_cu_attrs - set critical update attributes
  *
- * @NL80211_CU_UNSPEC: reserved
- * @NL80211_CU_ELEMID_ADDED: Critical update - Element id added
- * @NL80211_CU_ELEMID_MODIFIED: Critical update - Element id Modified
- * @NUM_NL80211_CUS: number of CU attributes
- */
-enum nl80211_set_cu {
-	NL80211_CU_UNSPEC = 0,
-	NL80211_CU_ELEMID_ADDED = BIT(0),
-	NL80211_CU_ELEMID_MODIFIED = BIT(1),
+ * @NL80211_ATTR_SET_CU_ELEM_ADDED_BMAP: Bitmap of interfaces to which critical update
+ * happened due to addition of new beacon element. Bit 0 represents the (TX) interface
+ * in which the attribute is received. Other bits represents the MBSSID index of NON-TX
+ * BSSes in case this attribute is carried as part of set/update beacon for an
+ * MBSSID group's TX VAP.
+ *
+ * @NL80211_ATTR_SET_CU_ELEM_MODIFIED_BMAP: Bitmap of interfaces to which critical update
+ * happened due to modification of existing beacon element.
+ *
+ * @__NL80211_CU_MLD_LINK_ATTR_LAST : internal use
+ * @NL80211_SET_CU_ATTR_MAX : maximum set critical update attributes
+ *
+ */
+enum nl80211_set_cu_attrs {
+	__NL80211_SET_CU_ATTR_INVALID,
+
+	NL80211_SET_CU_ATTR_ELEM_ADDED_BMAP,
+	NL80211_SET_CU_ATTR_ELEM_MODIFIED_BMAP,
 
-	NUM_NL80211_CUS = BIT(2),
+	/* keep last */
+	__NL80211_SET_CU_ATTR_LAST,
+	NL80211_SET_CU_ATTR_MAX = __NL80211_SET_CU_ATTR_LAST - 1
 };
 
 /**
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -503,6 +503,13 @@ cu_policy[NL80211_CU_ATTR_MAX + 1] = {
 	[NL80211_CU_ATTR_MLD_LIST] = NLA_POLICY_NESTED(mld_policy),
 };
 
+/* policy for set critical update attributes */
+static const struct nla_policy
+nl80211_set_critical_update_policy[NL80211_SET_CU_ATTR_MAX + 1] = {
+	[NL80211_SET_CU_ATTR_ELEM_ADDED_BMAP] = { .type = NLA_U32 },
+	[NL80211_SET_CU_ATTR_ELEM_MODIFIED_BMAP] = { .type = NLA_U32 },
+};
+
 static struct netlink_range_validation nl80211_punct_bitmap_range = {
 	.min = 0,
 	.max = 0xffff,
@@ -887,7 +894,7 @@ static const struct nla_policy nl80211_p
 	[NL80211_ATTR_ADD_MULTI_CHAN] = { .type = NLA_U32 },
 	[NL80211_ATTR_DEL_MULTI_CHAN] = { .type = NLA_U32 },
 	[NL80211_ATTR_RXMGMT_CRITICAL_UPDATE] = NLA_POLICY_NESTED(cu_policy),
-	[NL80211_ATTR_SET_CRITICAL_UPDATE] = { .type = NLA_U8 },
+	[NL80211_ATTR_SET_CRITICAL_UPDATE] = NLA_POLICY_NESTED(nl80211_set_critical_update_policy),
 	[NL80211_ATTR_CHANNEL_WIDTH_DEVICE] = { .type = NLA_U32 },
 	[NL80211_ATTR_CENTER_FREQ_DEVICE] = { .type = NLA_U32 },
 	[NL80211_ATTR_INTERFERENCE_TYPE] = { .type = NLA_U8 },
@@ -6172,6 +6179,26 @@ static int nl80211_parse_he_bss_color(st
 	return 0;
 }
 
+static int
+nl80211_parse_critical_update(struct nlattr *attrs,
+			      struct cfg80211_set_cu_params *params)
+{
+	struct nlattr *tb[NL80211_SET_CU_ATTR_MAX + 1];
+	int ret;
+
+	ret = nla_parse_nested(tb, NL80211_SET_CU_ATTR_MAX,
+			       attrs, NULL, NULL);
+	if (ret)
+		return ret;
+
+	if (tb[NL80211_SET_CU_ATTR_ELEM_ADDED_BMAP])
+		params->elemid_added_bmap = nla_get_u32(tb[NL80211_SET_CU_ATTR_ELEM_ADDED_BMAP]);
+	if (tb[NL80211_SET_CU_ATTR_ELEM_MODIFIED_BMAP])
+		params->elemid_modified_bmap =
+			nla_get_u32(tb[NL80211_SET_CU_ATTR_ELEM_MODIFIED_BMAP]);
+	return 0;
+}
+
 static int nl80211_parse_beacon(struct cfg80211_registered_device *rdev,
 				struct nlattr *attrs[],
 				struct cfg80211_beacon_data *bcn,
@@ -6288,6 +6315,13 @@ static int nl80211_parse_beacon(struct c
 			bcn->rnr_ies = rnr;
 		}
 	}
+	if (attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]) {
+		err = nl80211_parse_critical_update(
+				attrs[NL80211_ATTR_SET_CRITICAL_UPDATE],
+				&bcn->cu_params);
+		if (err)
+			return err;
+	}
 
 	return 0;
 }
@@ -6608,7 +6642,6 @@ static int nl80211_start_ap(struct sk_bu
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	struct cfg80211_ap_settings *params;
 	int err;
-	u8 critical_update = 0;
 
 	if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_AP &&
 	    dev->ieee80211_ptr->iftype != NL80211_IFTYPE_P2P_GO)
@@ -6882,14 +6915,6 @@ static int nl80211_start_ap(struct sk_bu
 			info->attrs[NL80211_ATTR_AP_SETTINGS_FLAGS]);
 	else if (info->attrs[NL80211_ATTR_EXTERNAL_AUTH_SUPPORT])
 		params->flags |= NL80211_AP_SETTINGS_EXTERNAL_AUTH_SUPPORT;
-	if (info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]) {
-		critical_update =
-			nla_get_u8(info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]);
-		if (critical_update & NL80211_CU_ELEMID_ADDED)
-			params->elemid_added = 1;
-		if (critical_update & NL80211_CU_ELEMID_MODIFIED)
-			params->elemid_modified = 1;
-	}
 
 	if (wdev->conn_owner_nlportid &&
 	    info->attrs[NL80211_ATTR_SOCKET_OWNER] &&
@@ -6938,7 +6963,6 @@ static int nl80211_update_ap(struct sk_b
 	struct cfg80211_ap_settings *params;
 	int err;
 	bool haveinfo = false;
-	u8 critical_update = 0;
 
 	if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_AP &&
 	    dev->ieee80211_ptr->iftype != NL80211_IFTYPE_P2P_GO)
@@ -6985,14 +7009,6 @@ static int nl80211_update_ap(struct sk_b
 		if (err)
 			goto out;
 	}
-	if (info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]) {
-		critical_update =
-			nla_get_u8(info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]);
-		if (critical_update & NL80211_CU_ELEMID_ADDED)
-			params->elemid_added = 1;
-		if (critical_update & NL80211_CU_ELEMID_MODIFIED)
-			params->elemid_modified = 1;
-	}
 
 	wdev_lock(wdev);
 	err = rdev_update_ap(rdev, dev, params);
@@ -11045,7 +11061,6 @@ static int nl80211_channel_switch(struct
 	bool need_handle_dfs_flag = true;
 	int len, i;
 	u32 cs_count;
-	u8 critical_update = 0;
 
 	if (!rdev->ops->channel_switch ||
 	    !(rdev->wiphy.flags & WIPHY_FLAG_HAS_CHANNEL_SWITCH))
@@ -11196,13 +11211,6 @@ static int nl80211_channel_switch(struct
 		}
 	}
 
-	if (csa_attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]) {
-		critical_update =
-			nla_get_u8(csa_attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]);
-		if (critical_update & NL80211_CU_ELEMID_ADDED)
-			params.beacon_csa_cu = 1;
-	}
-
 skip_beacons:
 	err = nl80211_parse_chandef(rdev, info, &params.chandef, wdev);
 	if (err)
@@ -11247,12 +11255,6 @@ skip_beacons:
 		if (err)
 			goto free;
 	}
-	if (info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]) {
-		critical_update =
-			nla_get_u8(info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]);
-		if (critical_update & NL80211_CU_ELEMID_MODIFIED)
-			params.beacon_after_cu = 1;
-	}
 
 	wdev_lock(wdev);
 	err = rdev_channel_switch(rdev, dev, &params, link_id);
@@ -17002,7 +17004,6 @@ static int nl80211_color_change(struct s
 	u16 offset;
 	int err;
 	unsigned int link_id = nl80211_link_id(info->attrs);
-	u8 critical_update = 0;
 
 	if (!rdev->ops->color_change)
 		return -EOPNOTSUPP;
@@ -17093,12 +17094,6 @@ static int nl80211_color_change(struct s
 		if (err)
 			goto out;
 	}
-	if (info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]) {
-		critical_update =
-			nla_get_u8(info->attrs[NL80211_ATTR_SET_CRITICAL_UPDATE]);
-		if (critical_update & NL80211_CU_ELEMID_ADDED)
-			params.elemid_added = 1;
-	}
 
 	wdev_lock(wdev);
 	err = rdev_color_change(rdev, dev, &params, link_id);
