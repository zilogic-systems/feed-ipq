From e6c4638b54c03f274b68b3d4bd816829b4003a24 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Mon, 27 May 2024 12:38:54 +0530
Subject: [PATCH 2/6] wifi: mac80211: Add support for link reconfigure removal

This patchset adds mac80211 routine to support sending link removal command
from userspace to offloaded driver which accepts reconfigure ML IE and the
TBTT count for the link to be removed. Also, added mac80211 routine for
sending TSF and current TBTT count received from diver during the
following scenarios,

  1) When first beacon with ML reconfigure IE is sent out in air, mac80211
  will notify the userspace that link removal is started and it can proceed
  with further action like BTM etc.,
  2) When last beacon with ML reconfigure IE (i.e. with link removal tbtt
  count as 0) is sent out in air, mac80211 will notify the userspace that
  link removal is completed. After which, userspace shall initiate the
  disassocitiation of the peer(s) connected and removal of the link
  completely.

New mac80211 ops "link_reconfig_remove" is introduced to initiate link
removal procedure in driver with ML reconfiguration IE and TBTT count
received from userspace.

"ieee80211_update_link_reconfig_remove_status" API is exposed to driver to
send STARTED or COMPLETED event to userspace based on the TBTT count
received.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 include/net/mac80211.h     | 25 +++++++++++++++++++++++++
 net/mac80211/cfg.c         | 12 ++++++++++++
 net/mac80211/driver-ops.h  | 18 ++++++++++++++++++
 net/mac80211/ieee80211_i.h |  3 +++
 net/mac80211/link.c        | 34 ++++++++++++++++++++++++++++++++++
 net/mac80211/trace.h       | 30 ++++++++++++++++++++++++++++++
 6 files changed, 122 insertions(+)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 20c7491..13a7f82 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4419,6 +4419,10 @@ struct ieee80211_ppe_vp_ds_params {
  *	flow offloading for flows originating from the vif.
  *	Note that the driver must not assume that the vif driver_data is valid
  *	at this point, since the callback can be called during netdev teardown.
+ * @link_reconfig_remove: Notifies the driver about the link to be
+ *	scheduled for removal with ML reconfigure element built for that particular
+ *	link along with the TBTT count until which the beacon with ML
+ *	reconfigure element should be sent.
  */
 struct ieee80211_ops {
 	void (*tx)(struct ieee80211_hw *hw,
@@ -4800,6 +4804,9 @@ struct ieee80211_ops {
 			    struct net_device *dev,
 			    enum tc_setup_type type,
 			    void *type_data);
+	int (*link_reconfig_remove)(struct ieee80211_hw *hw,
+				    struct ieee80211_vif *vif,
+				    const struct cfg80211_link_reconfig_removal_params *params);
 };
 
 /**
@@ -7701,6 +7708,24 @@ int ieee80211_set_active_links(struct ieee80211_vif *vif, u16 active_links);
 void ieee80211_set_active_links_async(struct ieee80211_vif *vif,
 				      u16 active_links);
 
+/* Defines for ML Reconfigure removal offload */
+
+/**
+ * ieee80211_update_link_reconfig_remove_update - Inform userspace about
+ * the removal status of link which is scheduled for removal
+ * @vif: interface in which reconfig removal status is received.
+ * @link_id: Link which is undergoing removal
+ * @tbtt_count: Current tbtt_count to be updated.
+ * @tsf: Beacon's timestamp value
+ * @cmd: Inform started or completed action to userspace
+ *
+ * For description, check cfg80211_link_reconfig_remove_update
+ */
+int ieee80211_update_link_reconfig_remove_update(struct ieee80211_vif *vif,
+						 unsigned int link_id,
+						 u32 tbtt_count, u64 tsf,
+						 enum nl80211_commands cmd);
+
 /* Defines for Mesh NSS offload */
 
 enum ieee80211_mesh_path_offld_cmd {
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 1b78480..b63aaff 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -5634,6 +5634,17 @@ static void ieee80211_del_intf_link(struct wiphy *wiphy,
 	mutex_unlock(&sdata->local->mtx);
 }
 
+static int
+ieee80211_link_reconfig_remove(struct wiphy *wiphy,
+			       struct net_device *dev,
+			       const struct cfg80211_link_reconfig_removal_params *params)
+{
+	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_local *local = wiphy_priv(wiphy);
+
+	return __ieee80211_link_reconfig_remove(local, sdata, params);
+}
+
 static int sta_add_link_station(struct ieee80211_local *local,
 				struct ieee80211_sub_if_data *sdata,
 				struct link_station_parameters *params)
@@ -5877,5 +5888,6 @@ const struct cfg80211_ops mac80211_config_ops = {
 	.add_link_station = ieee80211_add_link_station,
 	.mod_link_station = ieee80211_mod_link_station,
 	.del_link_station = ieee80211_del_link_station,
+	.link_reconfig_remove = ieee80211_link_reconfig_remove,
 	.set_hw_timestamp = ieee80211_set_hw_timestamp,
 };
diff --git a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
index 4e7b5c5..548371e 100644
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1561,4 +1561,22 @@ void drv_config_mesh_offload_path(struct ieee80211_local *local,
 				  enum ieee80211_mesh_path_offld_cmd cmd,
 				  struct ieee80211_mesh_path_offld *path);
 #endif /* CPTCFG_MAC80211_MESH */
+
+static inline int
+drv_link_reconfig_remove(struct ieee80211_local *local,
+			 struct ieee80211_sub_if_data *sdata,
+			 const struct cfg80211_link_reconfig_removal_params *params)
+{
+	int ret = -EOPNOTSUPP;
+
+	trace_drv_link_reconfig_remove(local, sdata, params);
+
+	if (local->ops->link_reconfig_remove)
+		ret = local->ops->link_reconfig_remove(&local->hw,
+						       &sdata->vif,
+						       params);
+	trace_drv_return_int(local, ret);
+
+	return ret;
+}
 #endif /* __MAC80211_DRIVER_OPS */
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index f134b7b..7a9c8a3 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2113,6 +2113,9 @@ int ieee80211_vif_set_links(struct ieee80211_sub_if_data *sdata,
 			    u16 new_links, u16 dormant_links);
 void ieee80211_vif_clear_links(struct ieee80211_sub_if_data *sdata);
 int __ieee80211_set_active_links(struct ieee80211_vif *vif, u16 active_links);
+int __ieee80211_link_reconfig_remove(struct ieee80211_local *local,
+				     struct ieee80211_sub_if_data *sdata,
+				     const struct cfg80211_link_reconfig_removal_params *params);
 
 /* tx handling */
 void ieee80211_clear_tx_pending(struct ieee80211_local *local);
diff --git a/net/mac80211/link.c b/net/mac80211/link.c
index 2e8fe5f..90c48e2 100644
--- a/net/mac80211/link.c
+++ b/net/mac80211/link.c
@@ -594,3 +594,37 @@ void ieee80211_set_active_links_async(struct ieee80211_vif *vif,
 	schedule_work(&sdata->activate_links_work);
 }
 EXPORT_SYMBOL_GPL(ieee80211_set_active_links_async);
+
+int __ieee80211_link_reconfig_remove(struct ieee80211_local *local,
+				     struct ieee80211_sub_if_data *sdata,
+				     const struct cfg80211_link_reconfig_removal_params *params)
+{
+	struct ieee80211_link_data *link;
+
+	if (!ieee80211_sdata_running(sdata))
+		return -ENETDOWN;
+
+	if (sdata->vif.type != NL80211_IFTYPE_AP)
+		return -EINVAL;
+
+	link = sdata_dereference(sdata->link[params->link_id], sdata);
+	if (!link)
+		return -ENOLINK;
+
+	return drv_link_reconfig_remove(local, sdata, params);
+}
+
+int ieee80211_update_link_reconfig_remove_update(struct ieee80211_vif *vif,
+						 unsigned int link_id,
+						 u32 tbtt_count, u64 tsf,
+						 enum nl80211_commands cmd)
+{
+	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
+
+	if (vif->type == NL80211_IFTYPE_AP)
+		return cfg80211_update_link_reconfig_remove_update(sdata->dev, link_id,
+								   tbtt_count, tsf,
+								   cmd);
+	return -EINVAL;
+}
+EXPORT_SYMBOL(ieee80211_update_link_reconfig_remove_update);
diff --git a/net/mac80211/trace.h b/net/mac80211/trace.h
index 1a2a66a..6b3029b 100644
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -3134,6 +3134,36 @@ TRACE_EVENT(api_update_muedca_params,
 	)
 );
 
+TRACE_EVENT(drv_link_reconfig_remove,
+	TP_PROTO(struct ieee80211_local *local,
+		 struct ieee80211_sub_if_data *sdata,
+		 const struct cfg80211_link_reconfig_removal_params *params),
+
+	TP_ARGS(local, sdata, params),
+
+	TP_STRUCT__entry(
+		LOCAL_ENTRY
+		VIF_ENTRY
+		__field(u32, link_id)
+		__field(u16, count)
+		__dynamic_array(u8, frame, params->elem_len)
+	),
+
+	TP_fast_assign(
+		LOCAL_ASSIGN;
+		VIF_ASSIGN;
+		__entry->link_id = params->link_id;
+		memcpy(__get_dynamic_array(frame), params->reconfigure_elem,
+		       params->elem_len);
+		__entry->count = params->link_removal_cntdown;
+	),
+
+	TP_printk(
+		LOCAL_PR_FMT ", " VIF_PR_FMT ", link_id :%u frame:0x%.2x count:%d",
+		LOCAL_PR_ARG, VIF_PR_ARG,
+		__entry->link_id, le16_to_cpup((__le16 *)__get_dynamic_array(frame)),
+		__entry->count)
+);
 #endif /* !__MAC80211_DRIVER_TRACE || TRACE_HEADER_MULTI_READ */
 
 #undef TRACE_INCLUDE_PATH
-- 
2.34.1

