From cbe6379306aced553284ee212fb5ce32e7d208cb Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Mon, 27 May 2024 14:50:33 +0530
Subject: [PATCH 3/6] wifi: cfg80211: Add attribute to send link reconfig
 removal count

Add NL80211_ATTR_RXMGMT_LINK_REMOVAL_UPDATE attribute to send link
removal count to userspace on NL80211_CMD_FRAME.

Userspace needs the removal count to add ML reconfigure element on probe
and assoc frame. So, during probe or assoc request frame receive,
send these params as a new attribute on existing NL80211_CMD_FRAME for
AP MLD.

Change in link removal count should be sent to user space either before or
along with probe or assoc request frame receive to ensure that user space
uses latest TBTT values while generating response to the received
frames. So, add this parameters as a new attribute to existing
NL80211_CMD_FRAME command instead of sending this on a separate
NL80211 event.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 include/net/cfg80211.h       |   8 +++
 include/uapi/linux/nl80211.h |  11 +++
 net/wireless/nl80211.c       | 126 ++++++++++++++++++++++++++++++++++-
 3 files changed, 144 insertions(+), 1 deletion(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -6401,8 +6401,11 @@ void wiphy_delayed_work_cancel(struct wi
  * @links[].critical_flag: Critical update bit for the bss
  * @links[].bpcc: Bss param change count value for the bss
  * @links[].switch_count: CSA/CCA count for the bss
+ * @link[].link_removal_tbtt_count: Link removal count for the bss
  * @valid_links: bitmap describing what elements of @links are valid
  * @critical_update: critical params updated on anyone wdev link
+ * @link_removal_flag: ML link reconfigure removal params updated on anyone
+ * 	wdev link
  */
 struct wireless_dev {
 	struct wiphy *wiphy;
@@ -6518,6 +6521,7 @@ struct wireless_dev {
 		bool critical_flag;
 		u8 bpcc;
 		u8 switch_count;
+		u32 link_removal_tbtt_count;
 	} links[IEEE80211_MLD_MAX_NUM_LINKS];
 	u16 valid_links;
 
@@ -6525,6 +6529,7 @@ struct wireless_dev {
 	bool critical_update;
 	bool is_netdev_going_down; /*Indicates netdev going down - wdev specific*/
 	u8 ppe_vp_type;
+	bool link_removal_flag;
 };
 
 static inline const u8 *wdev_address(struct wireless_dev *wdev)
@@ -8594,6 +8599,8 @@ void cfg80211_conn_failed(struct net_dev
  * @flags: flags, as defined in enum nl80211_rxmgmt_flags
  * @rx_tstamp: Hardware timestamp of frame RX in nanoseconds
  * @ack_tstamp: Hardware timestamp of ack TX in nanoseconds
+ * @link_removal_update: Indicates whether link removal update is present in
+ *	the rx info
  */
 struct cfg80211_rx_info {
 	int freq;
@@ -8606,6 +8613,7 @@ struct cfg80211_rx_info {
 	u64 rx_tstamp;
 	u64 ack_tstamp;
 	bool critical_update;
+	bool link_removal_update;
 };
 
 /**
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2931,6 +2931,15 @@ enum nl80211_commands {
  * @NL80211_ATTR_TSF: (u64) TSF value when the first beacon with reconfiguration
  *	MLE is sent.
  *
+ * @NL80211_ATTR_RXMGMT_LINK_REMOVAL_UPDATE: This is a nested attribute for driver
+ *	supporting link removal offload feature for AP MLD. When used with
+ *	%NL80211_CMD_FRAME it contains attribute defined in %NL80211_ATTR_AP_REMOVAL_COUNT,
+ *	to send link removal params for list of MLDs. Driver adds this attribute
+ *	only for probe, assoc and reassoc request frame. User-space can use these
+ *	params to update ML reconfigure element on corresponding response frame. This
+ *	attribute is needed only on ML reconfigure offload case and it is not needed on
+ *	ML reconfigure non-offload case since user space itself has these data.
+
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -3505,6 +3514,7 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_AP_REMOVAL_COUNT,
 	NL80211_ATTR_TSF,
+	NL80211_ATTR_RXMGMT_LINK_REMOVAL_UPDATE,
 
 	/* add attributes here, update the policy in nl80211.c */
 
@@ -8272,6 +8282,7 @@ enum nl80211_cu_mld_link_attrs {
 	NL80211_CU_MLD_LINK_ATTR_CRITICAL_FLAG,
 	NL80211_CU_MLD_LINK_ATTR_BPCC,
 	NL80211_CU_MLD_LINK_ATTR_SWITCH_COUNT,
+	NL80211_CU_ATTR_AP_REMOVAL_COUNT,
 
 	/* keep last */
 	__NL80211_CU_MLD_LINK_ATTR_LAST,
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -19974,6 +19974,115 @@ bool cfg80211_rx_unexpected_4addr_frame(
 }
 EXPORT_SYMBOL(cfg80211_rx_unexpected_4addr_frame);
 
+static int nl80211_send_mgmt_link_removal_update_len(struct wireless_dev *wdev)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+	struct wireless_dev *tmp_wdev;
+	int link_id;
+	int len;
+
+	/* Add NLA_HEADER length for nested attributes,link_removal_update and MLD list
+	 */
+	len = 8;
+	list_for_each_entry(tmp_wdev, &rdev->wiphy.wdev_list, list) {
+		if (!tmp_wdev->valid_links || !tmp_wdev->link_removal_flag)
+			continue;
+		/* Add NLA_HEADER length fo nested attributes namely MLD and list of links
+		 * Add additional 4 bytes of WDEV ifidx
+		 */
+		len += 12;
+		for_each_valid_link(tmp_wdev, link_id) {
+			if (!tmp_wdev->links[link_id].link_removal_tbtt_count)
+				continue;
+
+			/* Add NLA_HEADER length for link nested attributes - 4 bytes
+			 * link_id attribute - 1 byte
+			 * count - 2 bytes + roundoff
+			 */
+			len += 8;
+		}
+	}
+	return len;
+}
+
+static int nl80211_send_mgmt_link_removal_update(struct sk_buff *msg,
+						 struct wireless_dev *wdev)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct wireless_dev *tmp_wdev;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+	struct nlattr *link_removal_update;
+	struct nlattr *mld_list, *mld;
+	struct nlattr *link_list, *link;
+	struct net_device *tmp_netdev;
+	int link_id;
+	int i = 0, j = 0;
+
+	link_removal_update = nla_nest_start_noflag(msg,
+						    NL80211_ATTR_RXMGMT_LINK_REMOVAL_UPDATE);
+
+	if (!link_removal_update)
+		goto nla_fail;
+
+	/* TODO: Change the CU_ATTR to generic one */
+	mld_list = nla_nest_start_noflag(msg, NL80211_CU_ATTR_MLD_LIST);
+	if (!mld_list)
+		goto nla_fail_link_removal;
+
+	list_for_each_entry(tmp_wdev, &rdev->wiphy.wdev_list, list) {
+		if (!tmp_wdev->valid_links || !tmp_wdev->link_removal_flag)
+			continue;
+
+		mld = nla_nest_start_noflag(msg, ++i);
+		if (!mld)
+			goto nla_fail_mld_list;
+
+		tmp_netdev = tmp_wdev->netdev;
+		if (tmp_netdev &&
+		    nla_put_u32(msg, NL80211_CU_MLD_ATTR_IFINDEX, tmp_netdev->ifindex))
+			goto nla_fail_mld;
+
+		link_list = nla_nest_start_noflag(msg, NL80211_CU_MLD_ATTR_LINK_LIST);
+		if (!link_list)
+			goto nla_fail_mld;
+
+		for_each_valid_link(tmp_wdev, link_id) {
+			if (!tmp_wdev->links[link_id].link_removal_tbtt_count)
+				continue;
+
+			link = nla_nest_start(msg, ++j);
+			if (!link)
+				goto nla_fail_link_list;
+
+			if (nla_put_u8(msg, NL80211_CU_MLD_LINK_ATTR_ID, link_id) ||
+			    nla_put_u16(msg, NL80211_CU_ATTR_AP_REMOVAL_COUNT,
+				        tmp_wdev->links[link_id].link_removal_tbtt_count))
+				goto nla_fail_link;
+
+			nla_nest_end(msg, link);
+		}
+		nla_nest_end(msg, link_list);
+		nla_nest_end(msg, mld);
+	}
+	nla_nest_end(msg, mld_list);
+	nla_nest_end(msg, link_removal_update);
+	return 0;
+
+nla_fail_link:
+	nla_nest_cancel(msg, link);
+nla_fail_link_list:
+	nla_nest_cancel(msg, link_list);
+nla_fail_mld:
+	nla_nest_cancel(msg, mld);
+nla_fail_mld_list:
+	nla_nest_cancel(msg, mld_list);
+nla_fail_link_removal:
+	nla_nest_cancel(msg, link_removal_update);
+nla_fail:
+	return -ENOBUFS;
+}
+
 static int nl80211_send_mgmt_critical_update_len(struct wireless_dev *wdev)
 {
 	struct wiphy *wiphy = wdev->wiphy;
@@ -20085,12 +20194,16 @@ int nl80211_send_mgmt(struct cfg80211_re
 	struct net_device *netdev = wdev->netdev;
 	struct sk_buff *msg;
 	void *hdr;
-	int cu_len = 0;
+	int cu_len = 0, link_removal_update_len = 0;
 
 	if (info->critical_update)
 		cu_len = nl80211_send_mgmt_critical_update_len(wdev);
 
-	msg = nlmsg_new(100 + info->len + cu_len, gfp);
+	if (info->link_removal_update)
+		link_removal_update_len = nl80211_send_mgmt_link_removal_update_len(wdev);
+
+	msg = nlmsg_new(100 + info->len + cu_len + link_removal_update_len,
+			gfp);
 	if (!msg)
 		return -ENOMEM;
 
@@ -20129,6 +20242,13 @@ int nl80211_send_mgmt(struct cfg80211_re
 			goto nla_put_failure;
 		wdev->critical_update = 0;
 	}
+
+	if (info->link_removal_update) {
+		if (nl80211_send_mgmt_link_removal_update(msg, wdev))
+			goto nla_put_failure;
+		wdev->link_removal_flag = 0;
+	}
+
 	genlmsg_end(msg, hdr);
 
 	return genlmsg_unicast(wiphy_net(&rdev->wiphy), msg, nlportid);
