From e3049b48d6af442c3005080e1349d63adea7a054 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Mon, 27 May 2024 14:57:07 +0530
Subject: [PATCH 4/6] wifi: mac80211: Add mac80211 API to update link removal
 count

Userspace needs the removal count to add ML reconfigure element on probe
and assoc frame. So, during probe or assoc request frame receive,
send these params as a new attribute on existing NL80211_CMD_FRAME for
AP MLD.

Add mac80211 API to update link removal count received from the driver
and update the link_removal_update flag to true in-order to send the
value along with NL80211_CMD_FRAME.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 include/net/mac80211.h |  9 +++++++++
 net/mac80211/cfg.c     | 14 ++++++++++++++
 net/mac80211/rx.c      |  4 ++++
 3 files changed, 27 insertions(+)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -7877,4 +7877,14 @@ int ieee80211_6ghz_power_mode_change(str
 				     struct wireless_dev *wdev,
 				     u8 ap_6ghz_pwr_mode,
 				     int link_id);
+
+/** ieee80211_link_removal_count_update - Update link reconfig removal for each
+ * link for which the link removal has been scheduled
+ * @vif: BSS in which the link is getting removed
+ * @link_id: Link id of the link getting removed
+ * @count: current TBTT value from driver
+ */
+void ieee80211_link_removal_count_update(struct ieee80211_vif *vif,
+					 unsigned int link_id, u16 count);
+
 #endif /* MAC80211_H */
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -4087,6 +4087,20 @@ void ieee80211_critical_update(struct ie
 }
 EXPORT_SYMBOL(ieee80211_critical_update);
 
+void ieee80211_link_removal_count_update(struct ieee80211_vif *vif,
+					 unsigned int link_id, u16 count)
+{
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+
+	if (!wdev->valid_links ||
+	    WARN_ON(link_id > IEEE80211_MLD_MAX_NUM_LINKS))
+		return;
+
+	wdev->links[link_id].link_removal_tbtt_count = count;
+	wdev->link_removal_flag = true;
+}
+EXPORT_SYMBOL(ieee80211_link_removal_count_update);
+
 void ieee80211_channel_switch_disconnect(struct ieee80211_vif *vif, bool block_tx)
 {
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -4002,6 +4002,7 @@ ieee80211_rx_h_userspace_mgmt(struct iee
 		.link_id = rx->link_id,
 		.have_link_id = rx->link_id >= 0,
 		.critical_update = 0,
+		.link_removal_update = 0,
 	};
 
 	stype = mgmt->frame_control & cpu_to_le16(IEEE80211_FCTL_STYPE);
@@ -4010,6 +4011,9 @@ ieee80211_rx_h_userspace_mgmt(struct iee
 	    stype ==  cpu_to_le16(IEEE80211_STYPE_REASSOC_REQ)) {
 		if (wdev->critical_update)
 			info.critical_update = 1;
+
+		if (wdev->link_removal_flag)
+			info.link_removal_update = 1;
 	}
 	/* skip known-bad action frames and return them in the next handler */
 	if (status->rx_flags & IEEE80211_RX_MALFORMED_ACTION_FRM)
