From 8444ede5d18378555d8269723405727a5ea4ae91 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Date: Thu, 11 Jul 2024 14:44:29 +0530
Subject: [PATCH 1/2] QSDK: mac80211: Add support to notify AP_VLAN related
 operation to driver

Driver supports VLAN data path offload support like DS mode will advertise
IEEE80211_HW_SUPPORTS_VLAN_DATA_OFFLOAD hw flag and mac80211 allow
APIs add_interface/remove_interface/set_sta_4addr for the AP_VLAN
interfaces to reach driver for handling operation specific to the data path
offload.

Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 include/net/mac80211.h    | 14 ++++++++++++++
 net/mac80211/cfg.c        |  4 +++-
 net/mac80211/debugfs.c    |  1 +
 net/mac80211/driver-ops.h |  3 ++-
 net/mac80211/iface.c      |  6 ++++--
 net/mac80211/util.c       | 15 ++++++++++++---
 6 files changed, 36 insertions(+), 7 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -2049,8 +2049,20 @@ static inline bool ieee80211_vif_is_mesh
 struct ieee80211_vif *wdev_to_ieee80211_vif(struct wireless_dev *wdev);
 
 /**
+ * wdev_to_ieee80211_vlan_sta - return a sta for the AP_VLAN interface
+ *
+ * @wdev: the wdev to get the sta for vlan interface
+ *
+ * If the wdev is associated with a vif of AP_VLAN interface, this API
+ * returns sta pointer associated with the AP_VLAN interface.
+ */
+
+struct ieee80211_sta *wdev_to_ieee80211_vlan_sta(struct wireless_dev *wdev);
+
+/**
  * wdev_to_ieee80211_vif_vlan - return a vif struct from a wdev
  * @wdev: the wdev to get the vif for
+ * @is_add_vlan: Whether the callback is from op_add_interface or not
  *
  * This can be used by mac80211 drivers with direct cfg80211 APIs
  * (like the vendor commands) that get a wdev.
@@ -2059,7 +2071,8 @@ struct ieee80211_vif *wdev_to_ieee80211_
  * fetches the master interface and returns it. This API can be used for
  * non-ap/VLAN interfaces.
  */
-struct ieee80211_vif *wdev_to_ieee80211_vif_vlan(struct wireless_dev *wdev);
+struct ieee80211_vif *wdev_to_ieee80211_vif_vlan(struct wireless_dev *wdev,
+						 bool is_add_vlan);
 
 /**
  * ieee80211_vif_to_wdev - return a wdev struct from a vif
@@ -2815,6 +2828,8 @@ struct ieee80211_txq {
  *
  * @IEE80211_HW_SUPPORT_ECM_REGISTRATION: driver supports ECM registration
  *
+ * @IEEE80211_HW_VLAN_DATA_OFFLOAD: driver supports vlan data path offload
+ *
  * @NUM_IEEE80211_HW_FLAGS: number of hardware flags, used for sizing arrays
  */
 enum ieee80211_hw_flags {
@@ -2878,6 +2893,7 @@ enum ieee80211_hw_flags {
 	IEEE80211_HW_SUPPORTS_AP_PS,
 	IEEE80211_HW_HAS_TX_QUEUE,
 	IEEE80211_HW_SUPPORT_ECM_REGISTRATION,
+	IEEE80211_HW_SUPPORTS_VLAN_DATA_OFFLOAD,
 
 	/* keep last, obviously */
 	NUM_IEEE80211_HW_FLAGS
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -2499,7 +2499,9 @@ static int ieee80211_change_station(stru
 			rcu_assign_pointer(vlansdata->u.vlan.sta, sta);
 			__ieee80211_check_fast_rx_iface(vlansdata);
 
-			if (ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD)) {
+			if (ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) ||
+			    ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD)) {
+				sta->sta.dev = vlansdata->dev;
 				drv_sta_set_4addr(local, vlansdata, &sta->sta,
 						  true);
 			} else {
--- a/net/mac80211/debugfs.c
+++ b/net/mac80211/debugfs.c
@@ -574,6 +574,7 @@ static const char *hw_flag_names[] = {
 	FLAG(SUPPORTS_AP_PS),
 	FLAG(HAS_TX_QUEUE),
 	FLAG(SUPPORT_ECM_REGISTRATION),
+	FLAG(SUPPORTS_VLAN_DATA_OFFLOAD),
 #undef FLAG
 };
 
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1465,7 +1465,8 @@ static inline void drv_sta_set_4addr(str
 				     struct ieee80211_sub_if_data *sdata,
 				     struct ieee80211_sta *sta, bool enabled)
 {
-	if (!ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD))
+	if (!ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) &&
+	    !ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD))
 		sdata = get_bss_sdata(sdata);
 
 	if (!check_sdata_in_driver(sdata))
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -38,9 +38,6 @@ bool ppe_vp_accel = false;
 module_param(ppe_vp_accel, bool, 0644);
 MODULE_PARM_DESC(ppe_vp_accel, "module param to enable PPE; 1-enable, 0-disable");
 
-bool ppe_vp_rfs;
-module_param(ppe_vp_rfs, bool, 0644);
-MODULE_PARM_DESC(ppe_vp_rfs, "module param to enable PPE RFS for VLAN; 1-enable, 0-disable");
 #endif
 
 /**
@@ -708,7 +705,8 @@ static void ieee80211_do_stop(struct iee
 
 	switch (sdata->vif.type) {
 	case NL80211_IFTYPE_AP_VLAN:
-		if (ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) &&
+		if ((ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) ||
+		     ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD)) &&
 		    going_down)
 			drv_remove_interface(local, sdata);
 		break;
@@ -858,8 +856,8 @@ static int ieee80211_stop(struct net_dev
 #endif
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	/* Free VP port here for PPE_VP mode or RFS Mode for VLANs */
-	if ((ppe_vp_accel || ppe_vp_rfs) && sdata->vif.ppe_vp_num != -1) {
+	/* Free VP port here for PPE_VP mode */
+	if (ppe_vp_accel && sdata->vif.ppe_vp_num != -1) {
 		ppe_vp_free(sdata->vif.ppe_vp_num);
 		sdata_info(sdata, "Destroyed PPE VP port no:%d for dev:%s\n",
 			   sdata->vif.ppe_vp_num, dev->name);
@@ -1377,28 +1375,17 @@ static int ieee80211_ppe_vp_802_3_redir_
 
 	vpai.type = PPE_VP_TYPE_SW_L2;
 	vpai.net_dev_type = PPE_VP_NET_DEV_TYPE_WIFI;
+	vpai.dst_cb = ieee80211_process_dst_ppe_vp;
+	vpai.dst_cb_data = &sdata->vif;
+	vpai.src_cb = NULL;
+	vpai.src_cb_data = NULL;
+	vpai.queue_num = 0;
 
-	/* keep first - ppe_vp_accel if set overrides ppe_vp_rfs */
-	if (ppe_vp_accel) {
-		vpai.dst_cb = ieee80211_process_dst_ppe_vp;
-		vpai.dst_cb_data = &sdata->vif;
-		vpai.src_cb = NULL;
-		vpai.src_cb_data = NULL;
-		vpai.queue_num = 0;
-	} else if (ppe_vp_rfs && sdata->vif.type == NL80211_IFTYPE_AP_VLAN) {
-		vpai.usr_type = PPE_VP_USER_TYPE_PASSIVE;
-		vpai.core_mask = 0x7;
-	}
-
-	sdata->vif.ppe_vp_type = ppe_vp_type;
-	/* Allocate VP port here for PPE_VP mode or RFS mode for VLANs */
+	/* Allocate VP port here for PPE_VP mode */
 	vp = ppe_vp_alloc(dev, &vpai);
 	if (vp <= 0)
 		return -1;
 
-	sdata_info(sdata, "Allocated PPE VP port no:%d type %d for dev:%s\n",
-		   vp, vpai.usr_type, dev->name);
-
 	return vp;
 }
 #endif
@@ -1535,7 +1522,8 @@ int ieee80211_do_open(struct wireless_de
 			if (dev)
 				netif_carrier_on(dev);
 
-			if (ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD)) {
+			if (ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) ||
+			     ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD)) {
 				ieee80211_set_sdata_offload_flags(sdata);
 				res = drv_add_interface(local, sdata);
 				if (res)
@@ -1688,7 +1676,7 @@ int ieee80211_do_open(struct wireless_de
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	/* for PPE RFS, driver handles VP allocation for non VLAN interfaces */
-	if ((ppe_vp_accel || ppe_vp_rfs) && sdata->vif.ppe_vp_num != -1) {
+	if (ppe_vp_accel) {
 		vp = ieee80211_ppe_vp_802_3_redir_vap(sdata, dev,
 						      wdev->ppe_vp_type);
 		if (vp > 0) {
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -850,12 +850,28 @@ struct ieee80211_vif *wdev_to_ieee80211_
 }
 EXPORT_SYMBOL_GPL(wdev_to_ieee80211_vif);
 
-struct ieee80211_vif *wdev_to_ieee80211_vif_vlan(struct wireless_dev *wdev)
+struct ieee80211_sta *wdev_to_ieee80211_vlan_sta(struct wireless_dev *wdev)
+{
+	struct ieee80211_sub_if_data *sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
+	struct sta_info *sta = NULL;
+
+	if (sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
+		sta = rcu_dereference(sdata->u.vlan.sta);
+
+	if (!sta)
+		return NULL;
+
+	return &sta->sta;
+}
+EXPORT_SYMBOL_GPL(wdev_to_ieee80211_vlan_sta);
+
+struct ieee80211_vif *wdev_to_ieee80211_vif_vlan(struct wireless_dev *wdev,
+						 bool is_add_vlan)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
 	struct ieee80211_sub_if_data *master;
 
-	if (!ieee80211_sdata_running(sdata))
+	if (!is_add_vlan && !ieee80211_sdata_running(sdata))
 		return NULL;
 
 	switch (sdata->vif.type) {
@@ -2645,7 +2661,8 @@ int ieee80211_reconfig(struct ieee80211_
 
 	list_for_each_entry(sdata, &local->interfaces, list) {
 		if ((sdata->vif.type != NL80211_IFTYPE_AP_VLAN ||
-		    ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD)) &&
+		    ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) ||
+		    ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD)) &&
 		    sdata->vif.type != NL80211_IFTYPE_MONITOR &&
 		    ieee80211_sdata_running(sdata)) {
 			res = drv_add_interface(local, sdata);
@@ -2661,7 +2678,8 @@ int ieee80211_reconfig(struct ieee80211_
 		list_for_each_entry_continue_reverse(sdata, &local->interfaces,
 						     list)
 			if ((sdata->vif.type != NL80211_IFTYPE_AP_VLAN ||
-			    ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD)) &&
+			    ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) ||
+			    ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD)) &&
 			    sdata->vif.type != NL80211_IFTYPE_MONITOR &&
 			    ieee80211_sdata_running(sdata))
 				drv_remove_interface(local, sdata);
@@ -2715,7 +2733,8 @@ int ieee80211_reconfig(struct ieee80211_
 			}
 
 			if (sdata->vif.type != NL80211_IFTYPE_AP_VLAN ||
-			    ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD))
+			    ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) ||
+			    ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD))
 				drv_change_vif_links(local, sdata, 0,
 						     sdata->vif.active_links,
 						     old);
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -5093,10 +5093,7 @@ static void ieee80211_rx_8023(struct iee
 	}
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	/* Do not deliver frames to PPE in fast rx incase of RFS
-	 * RFS is supported only in SFE Mode */
-	if (rx->sdata->vif.ppe_vp_type == PPE_VP_USER_TYPE_ACTIVE &&
-	    rx->sdata->vif.ppe_vp_num != -1) {
+	if (rx->sdata->vif.ppe_vp_num) {
 		ieee80211_netif_rx_ppe(rx, skb);
 		atomic_inc(&sta->rx_netif_pkts);
 		return;
--- a/net/mac80211/driver-ops.c
+++ b/net/mac80211/driver-ops.c
@@ -116,7 +116,8 @@ int drv_sta_state(struct ieee80211_local
 
 	might_sleep();
 
-	if (!ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) ||
+	if ((!ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) &&
+	    !ieee80211_hw_check(&local->hw, SUPPORTS_VLAN_DATA_OFFLOAD)) ||
 	    !(old_state == IEEE80211_STA_ASSOC &&
 	      new_state == IEEE80211_STA_AUTHORIZED))
 		sdata = get_bss_sdata(sdata);
