From 921d0b1f7a8fb5c7545bb5c353b55d4eed6e539c Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Wed, 28 Aug 2024 12:12:43 -0700
Subject: [PATCH] wifi: mac80211: mesh - Update ieee80211s_update_metric_ppdu
 and avoid double counting

This change updates the metric_ppdu function to be consistent
with ieee80211s_update_metric. This change also adds some sanity checks
for fail_avg.

Add checks to ensure metrics are not updated again on a per packet basis
when stats are offloaded.

Patch dependency: 674-Mac80211-Initialize-EWMA-fail-avg-to-1.patch

Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 include/net/mac80211.h   |  1 +
 net/mac80211/mesh_hwmp.c | 16 ++++++++++++++++
 2 files changed, 17 insertions(+)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 7794cae..2997ca4 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1336,6 +1336,7 @@ struct ieee80211_tx_status {
 #endif
 	u32 mpdu_succ;
 	u32 mpdu_fail;
+	bool skip_per_packet_metric_update;
 };
 
 /**
diff --git a/net/mac80211/mesh_hwmp.c b/net/mac80211/mesh_hwmp.c
index f692411..cf2940e 100644
--- a/net/mac80211/mesh_hwmp.c
+++ b/net/mac80211/mesh_hwmp.c
@@ -305,6 +305,13 @@ void ieee80211s_update_metric(struct ieee80211_local *local,
 	u32 fail_avg;
 	struct rate_info rinfo;
 
+	/* If metric calculation is offloaded, do not
+	 * update metrics again in the SW tx completion
+	 * path.
+	 */
+	if (st->skip_per_packet_metric_update)
+		return;
+
 	failed = !(txinfo->flags & IEEE80211_TX_STAT_ACK);
 
 	if (failed) {
@@ -1652,6 +1659,7 @@ void ieee80211s_update_metric_ppdu(struct ieee80211_hw *hw,
 	int i, num_mpdu;
 	bool failed;
 	struct rate_info rinfo;
+	u32 fail_avg;
 
 	if (!st->sta)
 		return;
@@ -1670,6 +1678,14 @@ void ieee80211s_update_metric_ppdu(struct ieee80211_hw *hw,
 		return;
 
 	for (i = 0; i < num_mpdu; i++) {
+		fail_avg = ewma_mesh_fail_avg_read(&sta->mesh->fail_avg);
+		if (!fail_avg)
+			/* init it at a low value - 0 is tricky */
+			ewma_mesh_fail_avg_add(&sta->mesh->fail_avg, 1);
+
+		/* moving average, scaled to 100.
+		 * feed failure as 100 and success as 0
+		 */
 		ewma_mesh_fail_avg_add(&sta->mesh->fail_avg, failed * 100);
 		if (ewma_mesh_fail_avg_read(&sta->mesh->fail_avg) >
 					    LINK_FAIL_THRESH)
-- 
2.25.1

