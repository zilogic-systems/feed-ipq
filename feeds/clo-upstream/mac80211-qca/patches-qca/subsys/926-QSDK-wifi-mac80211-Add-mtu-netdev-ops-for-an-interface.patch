From c15d4e91a757bb91c7fbe9aa4a13e7af2534fd8f Mon Sep 17 00:00:00 2001
From: Parikshit Gune <quic_pgune@quicinc.com>
Date: Fri, 13 Sep 2024 10:29:11 +0530
Subject: [PATCH] QSDK: wifi: mac80211: Add mtu netdev ops for an interface.

mac80211 layer do not have a handler to interface's change mtu event,
add a change_mtu handler in mac80211 for a netdev.

Patch-dependency: None
Patch-work: None

Signed-off-by: Parikshit Gune <quic_pgune@quicinc.com>
---
 include/net/mac80211.h    |  4 ++++
 net/mac80211/driver-ops.h | 15 +++++++++++++++
 net/mac80211/iface.c      | 18 ++++++++++++++++++
 net/mac80211/trace.h      | 25 +++++++++++++++++++++++++
 4 files changed, 62 insertions(+)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index b011d52..4d2c724 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4459,6 +4459,7 @@ struct ieee80211_ppe_vp_ds_params {
  *	scheduled for removal with ML reconfigure element built for that particular
  *	link along with the TBTT count until which the beacon with ML
  *	reconfigure element should be sent.
+ * @change_mtu: Ops to change the interface MTU.
  */
 struct ieee80211_ops {
 	void (*tx)(struct ieee80211_hw *hw,
@@ -4845,6 +4846,9 @@ struct ieee80211_ops {
 				    const struct cfg80211_link_reconfig_removal_params *params);
 	bool (*removed_link_is_primary)(struct ieee80211_sta *sta,
 					u16 removed_links);
+	int (*change_mtu)(struct ieee80211_hw *hw,
+			  struct ieee80211_vif *vif,
+			  int mtu);
 };
 
 /**
diff --git a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
index 8635055..10b2bbe 100644
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1535,6 +1535,21 @@ static inline void drv_twt_teardown_request(struct ieee80211_local *local,
 	trace_drv_return_void(local);
 }
 
+static inline int drv_change_interface_mtu(struct ieee80211_local *local,
+					   struct ieee80211_sub_if_data *sdata,
+					   int mtu)
+{
+	int ret = 0;
+
+	trace_drv_change_interface_mtu(local, sdata, mtu);
+	if (local->ops->change_mtu)
+		ret = local->ops->change_mtu(&local->hw, &sdata->vif, mtu);
+
+	trace_drv_return_int(local, ret);
+
+	return ret;
+}
+
 static inline int drv_net_setup_tc(struct ieee80211_local *local,
 				   struct ieee80211_sub_if_data *sdata,
 				   struct net_device *dev,
diff --git a/net/mac80211/iface.c b/net/mac80211/iface.c
index b6324f6..809dff9 100644
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -935,6 +935,22 @@ ieee80211_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 	dev_fetch_sw_netstats(stats, dev->tstats);
 }
 
+static int ieee80211_change_mtu(struct net_device *dev, int mtu)
+{
+	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_local *local = sdata->local;
+
+	if (sdata->vif.type == NL80211_IFTYPE_MONITOR)
+		return 0;
+
+	if ((mtu > IEEE80211_MAX_DATA_LEN) || mtu < 0)
+		return -EINVAL;
+
+	dev->mtu = mtu;
+
+	return drv_change_interface_mtu(local, sdata, mtu);
+}
+
 static int ieee80211_netdev_setup_tc(struct net_device *dev,
 				     enum tc_setup_type type, void *type_data)
 {
@@ -953,6 +969,7 @@ static const struct net_device_ops ieee80211_dataif_ops = {
 	.ndo_set_mac_address 	= ieee80211_change_mac,
 	.ndo_get_stats64	= ieee80211_get_stats64,
 	.ndo_setup_tc		= ieee80211_netdev_setup_tc,
+	.ndo_change_mtu		= ieee80211_change_mtu,
 };
 
 static u16 ieee80211_monitor_select_queue(struct net_device *dev,
@@ -1003,6 +1020,7 @@ static const struct net_device_ops ieee80211_dataif_8023_ops = {
 	.ndo_set_mac_address	= ieee80211_change_mac,
 	.ndo_get_stats64	= ieee80211_get_stats64,
 	.ndo_setup_tc		= ieee80211_netdev_setup_tc,
+	.ndo_change_mtu		= ieee80211_change_mtu,
 };
 
 static bool ieee80211_iftype_supports_hdr_offload(enum nl80211_iftype iftype)
diff --git a/net/mac80211/trace.h b/net/mac80211/trace.h
index 6b3029b..b7ca5c9 100644
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -2541,6 +2541,31 @@ TRACE_EVENT(drv_twt_teardown_request,
 	)
 );
 
+TRACE_EVENT(drv_change_interface_mtu,
+	TP_PROTO(struct ieee80211_local *local,
+		 struct ieee80211_sub_if_data *sdata,
+		 int mtu),
+
+	TP_ARGS(local, sdata, mtu),
+
+	TP_STRUCT__entry(
+		LOCAL_ENTRY
+		VIF_ENTRY
+		__field(int, mtu)
+	),
+
+	TP_fast_assign(
+		LOCAL_ASSIGN;
+		VIF_ASSIGN;
+		__entry->mtu = mtu;
+	),
+
+	TP_printk(
+		LOCAL_PR_FMT VIF_PR_FMT " mtu:%d\n",
+		LOCAL_PR_ARG, VIF_PR_ARG, __entry->mtu
+	)
+);
+
 TRACE_EVENT(drv_net_setup_tc,
 	TP_PROTO(struct ieee80211_local *local,
 		 struct ieee80211_sub_if_data *sdata,
-- 
2.45.2

