From 7db73bc3a210f875bcd76e1e07b952ed0ca4cdd1 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Mon, 23 Sep 2024 16:35:43 -0700
Subject: [PATCH 1/4] QSDK: wifi: mac80211: fix 240 MHz vendor IE parsing

Parsing and storing Q-Q 240 MHz vendor IE is broken. Current logic
performs bitwise 'OR' (|=) operation on EHT phy capabilities with
the masks setting all bits to 1. Replace 'phy_cap_320mhz'
by individual bit fields to make retireving the data more readable
and fix modifications to the data in eht_cap.

Patch-dependency: 691-ath12k-240MHz-Q-Q-vendor-IE-support.patch

Fixes: 696ba4a811c5 ("ath12k: 240MHz Q-Q vendor IE support")
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 include/linux/ieee80211.h | 13 ++++-----
 net/mac80211/eht.c        | 59 ++++++++++++++++++++++-----------------
 2 files changed, 39 insertions(+), 33 deletions(-)

diff --git a/include/linux/ieee80211.h b/include/linux/ieee80211.h
index c237d0623167..9b43fdfb5c05 100644
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2169,7 +2169,11 @@ struct ieee80211_240mhz_vendor_oper {
 	u8 ccfs1;
 	u8 ccfs0;
 	u16 ru_punct_bitmap;
-	u16 phy_cap_320mhz;
+	u16 is5ghz240mhz          :1,
+	    bfmess320mhz          :3,
+	    numsound320mhz        :3,
+	    nonofdmaulmumimo320mhz:1,
+	    mubfmr320mhz          :1;
 	u8 mcs_map_320mhz[3];
 }__packed;
 
@@ -2963,12 +2967,7 @@ ieee80211_he_spr_size(const u8 *he_spr_ie)
 #define IEEE80211_EHT_PHY_CAP8_20MHZ_ONLY_TRIGGER_MUBF_FL_BW_FB_DLMUMIMO   0x08
 #define IEEE80211_EHT_PHY_CAP8_20MHZ_ONLY_MRU_SUPP                         0x10
 
-#define IEEE80211_EHT_240MHZ_PHY_CAP_BEAMFORMEE_SS_320MHZ_MASK	(BIT(1) | BIT(2) | \
-								BIT(3))
-#define IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK	BIT(4)
-#define IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK_1	(BIT(5) | BIT(6))
-#define IEEE80211_EHT_240MHZ_PHY_NON_OFDMA_UL_MU_MIMO_320MHZ_MASK	BIT(7)
-#define IEEE80211_EHT_240MHZ_PHY_MU_BEAMFORMER_320MHZ_MASK	BIT(8)
+#define IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK	BIT(0) | BIT(1)
 
 /*
  * EHT operation channel width as defined in P802.11be_D2.0 section 9.4.2.311
diff --git a/net/mac80211/eht.c b/net/mac80211/eht.c
index 38d0c886650b..40dd6d46ff5b 100644
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -19,7 +19,7 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *sdata,
 {
 	struct ieee80211_sta_eht_cap *eht_cap = &link_sta->pub->eht_cap;
 	struct ieee80211_he_cap_elem *he_cap_ie_elem = (void *)he_cap_ie;
-	u8 eht_ppe_size = 0;
+	u8 eht_ppe_size = 0, *phy_cap_info;
 	u8 mcs_nss_size;
 	u8 eht_total_size = sizeof(eht_cap->eht_cap_elem);
 	u8 *pos = (u8 *)eht_cap_ie_elem;
@@ -76,33 +76,40 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *sdata,
 		       &eht_cap_ie_elem->optional[mcs_nss_size],
 		       eht_ppe_size);
 
-	if (eht_240mhz_cap &&
+	if (eht_240mhz_len && eht_240mhz_cap && eht_240mhz_cap->is5ghz240mhz &&
 	    sband->band == NL80211_BAND_5GHZ) {
+		phy_cap_info = eht_cap->eht_cap_elem.phy_cap_info;
+
 		/* Override capabilities from QCN IE for 240MHz to EHT phy capab */
-		if (eht_240mhz_cap->phy_cap_320mhz &
-		    IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ_MASK)
-			eht_cap->eht_cap_elem.phy_cap_info[0] |=
-				IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ;
-		if (eht_240mhz_cap->phy_cap_320mhz &
-		    IEEE80211_EHT_240MHZ_PHY_CAP_BEAMFORMEE_SS_320MHZ_MASK)
-			eht_cap->eht_cap_elem.phy_cap_info[1] |=
-				IEEE80211_EHT_PHY_CAP1_BEAMFORMEE_SS_320MHZ_MASK;
-		if (eht_240mhz_cap->phy_cap_320mhz &
-		    IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK_1)
-			eht_cap->eht_cap_elem.phy_cap_info[2] |=
-				IEEE80211_EHT_PHY_CAP2_SOUNDING_DIM_320MHZ_MASK;
-		if (eht_240mhz_cap->phy_cap_320mhz &
-		    IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK_1)
-			eht_cap->eht_cap_elem.phy_cap_info[3] |=
-				IEEE80211_EHT_PHY_CAP3_SOUNDING_DIM_320MHZ_MASK;
-		if (eht_240mhz_cap->phy_cap_320mhz &
-		    IEEE80211_EHT_240MHZ_PHY_NON_OFDMA_UL_MU_MIMO_320MHZ_MASK)
-			eht_cap->eht_cap_elem.phy_cap_info[7] |=
-				IEEE80211_EHT_PHY_CAP7_NON_OFDMA_UL_MU_MIMO_320MHZ;
-		if (eht_240mhz_cap->phy_cap_320mhz &
-		    IEEE80211_EHT_240MHZ_PHY_MU_BEAMFORMER_320MHZ_MASK)
-			eht_cap->eht_cap_elem.phy_cap_info[7] |=
-				IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_320MHZ;
+		phy_cap_info[0] = u8_replace_bits(phy_cap_info[0],
+						  eht_240mhz_cap->is5ghz240mhz,
+						  IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ);
+
+		if (eht_240mhz_cap->bfmess320mhz)
+			phy_cap_info[1] = u8_replace_bits(phy_cap_info[1],
+							  eht_240mhz_cap->bfmess320mhz,
+							  IEEE80211_EHT_PHY_CAP1_BEAMFORMEE_SS_320MHZ_MASK);
+
+		if (eht_240mhz_cap->numsound320mhz) {
+			phy_cap_info[2] = u8_replace_bits(phy_cap_info[2],
+							  eht_240mhz_cap->numsound320mhz,
+							  IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK);
+
+			phy_cap_info[3] = u8_replace_bits(phy_cap_info[3],
+							  eht_240mhz_cap->numsound320mhz >> 2,
+							  IEEE80211_EHT_PHY_CAP3_SOUNDING_DIM_320MHZ_MASK);
+		}
+
+		if (eht_240mhz_cap->nonofdmaulmumimo320mhz)
+			phy_cap_info[7] = u8_replace_bits(phy_cap_info[7],
+							  eht_240mhz_cap->nonofdmaulmumimo320mhz,
+							  IEEE80211_EHT_PHY_CAP7_NON_OFDMA_UL_MU_MIMO_320MHZ);
+
+		if (eht_240mhz_cap->mubfmr320mhz)
+			phy_cap_info[7] = u8_replace_bits(phy_cap_info[7],
+							  eht_240mhz_cap->mubfmr320mhz,
+							  IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_320MHZ);
+
 		memcpy(&eht_cap->eht_mcs_nss_supp.bw._320, &eht_240mhz_cap->mcs_map_320mhz,
 		       sizeof(struct ieee80211_eht_mcs_nss_supp_bw));
 	}
-- 
2.34.1

