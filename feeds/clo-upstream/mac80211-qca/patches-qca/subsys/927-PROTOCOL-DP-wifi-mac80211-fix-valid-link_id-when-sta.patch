From ed84dcad2cdedb4bc2adf7d35d98c5ddbf570a04 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Mon, 14 Oct 2024 13:07:27 +0530
Subject: [PATCH] {PROTOCOL | DP} wifi: mac80211: fix valid link_id when sta
 steers from link to link in same mld

Sometimes when a STA associates to one of the link of a mld and
steers to other link, link_id and valid_links should not be
fetched using sta since it has the previously associated link_id and
valid_links. This fills wrong link info in hostapd and hostapd tries to
send the response frame in wrong link.

Use the originally received link_id and make sta as NULL, to pass the
frame to upper layer.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 net/mac80211/rx.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -5396,7 +5396,7 @@ drop:
 }
 
 static bool ieee80211_rx_for_interface(struct ieee80211_rx_data *rx,
-				       struct sk_buff *skb, bool consume)
+				       struct sk_buff *skb, bool consume, bool is_mgmt)
 {
 	struct link_sta_info *link_sta;
 	struct ieee80211_hdr *hdr = (void *)skb->data;
@@ -5422,6 +5422,20 @@ static bool ieee80211_rx_for_interface(s
 			link_id = status->link_id;
 	}
 
+	/*
+	 * Sometimes when a STA associates to one of the link and
+	 * steers to other link, link_id and valid_links should not be
+	 * fetched using sta since it has the previously associated link_id and
+	 * valid_links. Use the originally received link_id and make sta as NULL,
+	 * to pass the frame to upper layer.
+	 */
+	if (is_mgmt &&
+	    status->link_valid && (status->link_id != link_id ||
+	    (sta && !(sta->sta.valid_links & BIT(status->link_id))))) {
+		 link_id = status->link_id;
+		 sta = NULL;
+	}
+
 	if (!ieee80211_rx_data_set_sta(rx, sta, link_id, only_monitor))
 		return false;
 
@@ -5448,6 +5462,7 @@ static void __ieee80211_rx_handle_packet
 	struct rhlist_head *tmp;
 	int err = 0, prev_linkid;
 	bool prev_flag;
+	bool is_mgmt = false;
 
 	fc = ((struct ieee80211_hdr *)skb->data)->frame_control;
 	memset(&rx, 0, sizeof(rx));
@@ -5460,6 +5475,7 @@ static void __ieee80211_rx_handle_packet
 		I802_DEBUG_INC(local->dot11ReceivedFragmentCount);
 
 	if (ieee80211_is_mgmt(fc)) {
+		is_mgmt = true;
 		/* drop frame if too short for header */
 		if (skb->len < ieee80211_hdrlen(fc))
 			err = -ENOBUFS;
@@ -5624,7 +5640,7 @@ static void __ieee80211_rx_handle_packet
 				if (status->link_valid)
 					status->link_id = prev_linkid;
 			}
-			ieee80211_rx_for_interface(&rx, skb, false);
+			ieee80211_rx_for_interface(&rx, skb, false, is_mgmt);
 
 			prev_linkid = valid_links ? link_id : -1;
 			prev = sdata;
@@ -5676,7 +5692,7 @@ static void __ieee80211_rx_handle_packet
 				if (status->link_valid)
 					status->link_id = link_id;
 
-				if (ieee80211_rx_for_interface(&rx, skb, true))
+				if (ieee80211_rx_for_interface(&rx, skb, true, is_mgmt))
 					return;
 			}
 		}
@@ -5684,7 +5700,7 @@ static void __ieee80211_rx_handle_packet
 		if (prev) {
 			rx.sdata = prev;
 
-			if (ieee80211_rx_for_interface(&rx, skb, true))
+			if (ieee80211_rx_for_interface(&rx, skb, true, is_mgmt))
 				return;
 		}
 	}
