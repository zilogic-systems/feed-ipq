From 94140b2752d03c52921bf21706fbb3dc615169fd Mon Sep 17 00:00:00 2001
From: Kaviarasu Sanjeevi <quic_kaviaras@quicinc.com>
Date: Mon, 7 Oct 2024 12:42:50 +0530
Subject: [PATCH] mac80211_configure_antenna_gain

QSDK:CP: Revert "mac80211: remove non-upstream antenna gain configuration patch"

This reverts commit 99a98b302414f0940b794d386dd242e6f485eb4c.

This commit has only mac80211 changes, iw changes were taken care in iw upgrade.

Currently we use backport-6.5-rc3 version, so update
this package to latest version (backport-6.6.15). Need this update
as part of Openwrt version upgrade from 23.x to 24.X along with
kernel version as 6.6.3.

1.Resolve the conflicts in the patches.
2.Delete the patches which are upstreamed.
3.Adapt code changes according to the upstream code.
4.Fix compilation errors.

Patch-dependency: None
Patch-work: None
Patch-link: https://github.com/openwrt/openwrt/commit/99a98b302414f0940b794d386dd242e6f485eb4c

Signed-off-by: Kaviarasu Sanjeevi <quic_kaviaras@quicinc.com>
---
 include/net/cfg80211.h       |  3 +++
 include/net/mac80211.h       |  2 ++
 include/uapi/linux/nl80211.h |  3 +++
 net/mac80211/cfg.c           | 14 ++++++++++++++
 net/mac80211/ieee80211_i.h   |  1 +
 net/mac80211/main.c          |  9 ++++++++-
 net/wireless/nl80211.c       | 17 +++++++++++++++++
 7 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index c25d139..172212f 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4572,6 +4572,7 @@ struct cfg80211_link_reconfig_removal_params {
  *	(as advertised by the nl80211 feature flag.)
  * @get_tx_power: store the current TX power into the dbm variable;
  *	return 0 if successful
+ * @set_antenna_gain: set antenna gain to reduce maximum tx power if necessary
  *
  * @rfkill_poll: polls the hw rfkill line, use cfg80211 reporting
  *	functions to adjust rfkill hw state
@@ -4941,6 +4942,8 @@ struct cfg80211_ops {
 				unsigned int link_id);
 	int	(*get_tx_power)(struct wiphy *wiphy, struct wireless_dev *wdev,
 				unsigned int link_id, int *dbm);
+	int	(*set_antenna_gain)(struct wiphy *wiphy, int dbi);
+
 	void	(*rfkill_poll)(struct wiphy *wiphy);
 
 #ifdef CPTCFG_NL80211_TESTMODE
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 4d2c724..b5e13ff 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1769,6 +1769,7 @@ enum ieee80211_smps_mode {
  *
  * @power_level: requested transmit power (in dBm), backward compatibility
  *	value only that is set to the minimum of all interfaces
+ * @max_antenna_gain: maximum antenna gain adjusted by user config (in dBi)
  *
  * @chandef: the channel definition to tune to
  * @radar_enabled: whether radar detection is enabled
@@ -1789,6 +1790,7 @@ enum ieee80211_smps_mode {
 struct ieee80211_conf {
 	u32 flags;
 	int power_level, dynamic_ps_timeout;
+	int max_antenna_gain;
 
 	u16 listen_interval;
 	u8 ps_dtim_period;
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index 5ee1a4e..3b35a65 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2918,6 +2918,9 @@ enum nl80211_commands {
  *	nested item, it contains attributes defined in
  *	&enum nl80211_if_combination_attrs.
  *
+ * @NL80211_ATTR_WIPHY_ANTENNA_GAIN: Configured antenna gain. Used to reduce
+ *	transmit power to stay within regulatory limits. u32, dBi.
+ *
  * @NL80211_ATTR_HE_MUEDCA_PARAMS: MU-EDCA AC parameters for the
  *	%NL80211_CMD_UPDATE_HE_MUEDCA_PARAMS command.
  * @NL80211_ATTR_BEACON_TX_MODE: used to configure the beacon tx mode as
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 33433fd..41b42fd 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3607,6 +3607,19 @@ static int ieee80211_get_tx_power(struct wiphy *wiphy,
 	return 0;
 }
 
+static int ieee80211_set_antenna_gain(struct wiphy *wiphy, int dbi)
+{
+	struct ieee80211_local *local = wiphy_priv(wiphy);
+
+	if (dbi < 0)
+		return -EINVAL;
+
+	local->user_antenna_gain = dbi;
+	ieee80211_hw_config(local, 0);
+
+	return 0;
+}
+
 static void ieee80211_rfkill_poll(struct wiphy *wiphy)
 {
 	struct ieee80211_local *local = wiphy_priv(wiphy);
@@ -5999,6 +6012,7 @@ const struct cfg80211_ops mac80211_config_ops = {
 	.set_wiphy_params = ieee80211_set_wiphy_params,
 	.set_tx_power = ieee80211_set_tx_power,
 	.get_tx_power = ieee80211_get_tx_power,
+	.set_antenna_gain = ieee80211_set_antenna_gain,
 	.rfkill_poll = ieee80211_rfkill_poll,
 	CFG80211_TESTMODE_CMD(ieee80211_testmode_cmd)
 	CFG80211_TESTMODE_DUMP(ieee80211_testmode_dump)
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index da24b97..9164973 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1624,6 +1624,7 @@ struct ieee80211_local {
 	int dynamic_ps_forced_timeout;
 
 	int user_power_level; /* in dBm, for all interfaces */
+	int user_antenna_gain; /* in dBi */
 
 	enum ieee80211_smps_mode smps_mode;
 
diff --git a/net/mac80211/main.c b/net/mac80211/main.c
index ad7d6b9..4024f7a 100644
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -103,7 +103,7 @@ static u32 ieee80211_hw_conf_chan(struct ieee80211_local *local)
 	struct ieee80211_sub_if_data *sdata;
 	struct cfg80211_chan_def chandef = {};
 	u32 changed = 0;
-	int power;
+	int power, max_power;
 	u32 offchannel_flag;
 
 	offchannel_flag = local->hw.conf.flags & IEEE80211_CONF_OFFCHANNEL;
@@ -164,6 +164,12 @@ static u32 ieee80211_hw_conf_chan(struct ieee80211_local *local)
 	}
 	rcu_read_unlock();
 
+	max_power = chandef.chan->max_reg_power;
+	if (local->user_antenna_gain > 0) {
+		max_power -= local->user_antenna_gain;
+		power = min(power, max_power);
+	}
+
 	if (local->hw.conf.power_level != power) {
 		changed |= IEEE80211_CONF_CHANGE_POWER;
 		local->hw.conf.power_level = power;
@@ -788,6 +794,7 @@ struct ieee80211_hw *ieee80211_alloc_hw_nm(size_t priv_data_len,
 					 IEEE80211_RADIOTAP_MCS_HAVE_BW;
 	local->hw.radiotap_vht_details = IEEE80211_RADIOTAP_VHT_KNOWN_GI |
 					 IEEE80211_RADIOTAP_VHT_KNOWN_BANDWIDTH;
+	local->user_antenna_gain = 0;
 	local->hw.uapsd_queues = IEEE80211_DEFAULT_UAPSD_QUEUES;
 	local->hw.uapsd_max_sp_len = IEEE80211_DEFAULT_MAX_SP_LEN;
 	local->hw.max_mtu = IEEE80211_MAX_DATA_LEN;
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 6d9c18e..0d0036e 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -902,6 +902,7 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 	[NL80211_ATTR_INTERFERENCE_TYPE] = { .type = NLA_U8 },
 	[NL80211_ATTR_AP_REMOVAL_COUNT] = { .type = NLA_U32 },
 	[NL80211_ATTR_TSF] = { .type = NLA_U64 },
+	[NL80211_ATTR_WIPHY_ANTENNA_GAIN] = { .type = NLA_U32 },
 };
 
 /* policy for the key attributes */
@@ -3928,6 +3929,22 @@ static int nl80211_set_wiphy(struct sk_buff *skb, struct genl_info *info)
 			goto out;
 	}
 
+	if (info->attrs[NL80211_ATTR_WIPHY_ANTENNA_GAIN]) {
+		int idx, dbi = 0;
+
+		if (!rdev->ops->set_antenna_gain) {
+			result = -EOPNOTSUPP;
+			goto out;
+		}
+
+		idx = NL80211_ATTR_WIPHY_ANTENNA_GAIN;
+		dbi = nla_get_u32(info->attrs[idx]);
+
+		result = rdev->ops->set_antenna_gain(&rdev->wiphy, dbi);
+		if (result)
+			goto out;
+	}
+
 	if (info->attrs[NL80211_ATTR_WIPHY_TX_POWER_SETTING]) {
 		struct wireless_dev *txp_wdev = wdev;
 		enum nl80211_tx_power_setting type;
