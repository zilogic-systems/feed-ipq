From 8ae6b11f67ecedbc849bc923cf2331c62819499f Mon Sep 17 00:00:00 2001
From: Mohan Kumar G <quic_mkumarg@quicinc.com>
Date: Thu, 10 Oct 2024 22:38:34 +0530
Subject: [PATCH] wifi: mac80211: Add support for parsing bandwidth indication
 during channel switch

Currently, during channel switch, the sta updates new bandwidth and
center frequencies from the wide bandwidth element in channel
switch wrapper IE of AP beacon.

For EHT STA, the width and center frequencies should be updated
from bandwidth indication element in channel switch wrapper IE.

Add support for parsing bandwidth indication element and use the
width and center frequencies obtained from bandwidth indication
element for updating the sta.

Patch-depdendency: None

Patch-work: None

Feature: CHANNEL_SWITCH

Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
---
 net/mac80211/spectmgmt.c | 20 +++++++++++++++++---
 net/mac80211/util.c      | 10 ++++++++++
 2 files changed, 27 insertions(+), 3 deletions(-)

--- a/net/mac80211/spectmgmt.c
+++ b/net/mac80211/spectmgmt.c
@@ -33,6 +33,7 @@ int ieee80211_parse_ch_switch_ie(struct
 	struct cfg80211_chan_def new_chandef = {};
 	const struct ieee80211_sec_chan_offs_ie *sec_chan_offs;
 	const struct ieee80211_wide_bw_chansw_ie *wide_bw_chansw_ie;
+	const struct ieee80211_bw_ind_element *bw_ind_element;
 	struct ieee80211_vht_operation vht_oper;
 	struct ieee80211_ht_operation ht_oper;
 	struct ieee80211_he_operation *he_oper;
@@ -42,20 +43,25 @@ int ieee80211_parse_ch_switch_ie(struct
 	int secondary_channel_offset = -1;
 	u8 new_seg0, new_seg1, new_chan_width;
 	struct ieee80211_he_6ghz_oper *csa_he_6ghz_oper;
+	u16 punct_bitmap = 0;
 
 	memset(csa_ie, 0, sizeof(*csa_ie));
 
 	sec_chan_offs = elems->sec_chan_offs;
 	wide_bw_chansw_ie = elems->wide_bw_chansw_ie;
+	bw_ind_element = elems->bw_ind;
 
 	if (conn_flags & (IEEE80211_CONN_DISABLE_HT |
 			  IEEE80211_CONN_DISABLE_40MHZ)) {
 		sec_chan_offs = NULL;
 		wide_bw_chansw_ie = NULL;
+		bw_ind_element = NULL;
 	}
 
-	if (conn_flags & IEEE80211_CONN_DISABLE_VHT)
+	if (conn_flags & IEEE80211_CONN_DISABLE_VHT) {
 		wide_bw_chansw_ie = NULL;
+		bw_ind_element = NULL;
+	}
 
 	if (elems->ext_chansw_ie) {
 		if (!ieee80211_operating_class_to_band(
@@ -153,6 +159,41 @@ int ieee80211_parse_ch_switch_ie(struct
 		new_seg0 = wide_bw_chansw_ie->new_center_freq_seg0;
 		new_seg1 = wide_bw_chansw_ie->new_center_freq_seg1;
 		new_chan_width = wide_bw_chansw_ie->new_channel_width;
+		if (new_chan_width == 1)
+			new_chan_width = new_seg1 ? IEEE80211_CHANWIDTH_160MHZ :
+						    IEEE80211_CHANWIDTH_80MHZ;
+	}
+
+	if (bw_ind_element) {
+		new_seg0 = bw_ind_element->bw_ind_info.ccfs0;
+		new_seg1 = bw_ind_element->bw_ind_info.ccfs1;
+		new_chan_width = bw_ind_element->bw_ind_info.control;
+		if (bw_ind_element->bw_ind_params &
+		    IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT)
+			punct_bitmap = get_unaligned_le16(bw_ind_element->bw_ind_info.optional);
+		switch (new_chan_width) {
+		case 0:
+		case 1:
+			new_chan_width = IEEE80211_CHANWIDTH_USE_HT;
+			break;
+		case 2:
+			new_chan_width = IEEE80211_CHANWIDTH_80MHZ;
+			break;
+		case 3:
+			new_chan_width = IEEE80211_CHANWIDTH_160MHZ;
+			break;
+		case 4:
+			new_chan_width = IEEE80211_CHANWIDTH_320MHZ;
+			break;
+		default:
+			sdata_info(sdata,
+				   "Invalid new channel width in bandwidth indication %d MHz\n",
+				    new_chan_width);
+			return -EINVAL;
+		}
+	}
+
+	if (wide_bw_chansw_ie || bw_ind_element) {
 		if (new_band == NL80211_BAND_6GHZ) {
 			he_oper = kzalloc(sizeof(*he_oper) +
 					  sizeof(*he_6ghz_oper), GFP_KERNEL);
@@ -177,7 +218,7 @@ int ieee80211_parse_ch_switch_ie(struct
 								  IEEE80211_HE_OPERATION_6GHZ_OP_INFO);
 
 			eht_oper = kzalloc(sizeof(*eht_oper) +
-					   sizeof(*eht_oper_info), GFP_KERNEL);
+					   sizeof(*eht_oper_info) + sizeof(u16), GFP_KERNEL);
 			if (!eht_oper) {
 				kfree(he_oper);
 				return -ENOMEM;
@@ -185,21 +226,16 @@ int ieee80211_parse_ch_switch_ie(struct
 			eht_oper_info = &eht_oper->optional;
 			eht_oper_info->ccfs0 = new_seg0;
 			eht_oper_info->ccfs1 = new_seg1;
-			if (new_chan_width == IEEE80211_CHANWIDTH_320MHZ) {
+			if (punct_bitmap) {
+				memcpy(eht_oper_info->optional, &punct_bitmap, sizeof(punct_bitmap));
+				eht_oper->params |= IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT;
+			}
+			if (new_chan_width == IEEE80211_CHANWIDTH_320MHZ)
 				eht_oper_info->control = IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ;
-				eht_oper_info->ccfs0 =
-					PRIMARY_CENTER_CHAN_IDX(new_chan_no,
-								new_seg0, 320);
-				eht_oper_info->ccfs1 = new_seg0;
-			} else if (new_chan_width == IEEE80211_CHANWIDTH_160MHZ) {
+			else if (new_chan_width == IEEE80211_CHANWIDTH_160MHZ)
 				eht_oper_info->control = IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ;
-				eht_oper_info->ccfs0 =
-					PRIMARY_CENTER_CHAN_IDX(new_chan_no,
-								new_seg0, 160);
-				eht_oper_info->ccfs1 = new_seg0;
-			} else if (new_chan_width == IEEE80211_CHANWIDTH_80MHZ) {
+			else if (new_chan_width == IEEE80211_CHANWIDTH_80MHZ)
 				eht_oper_info->control = IEEE80211_EHT_OPER_CHAN_WIDTH_80MHZ;
-			}
 
 			eht_oper->params |= IEEE80211_EHT_OPER_INFO_PRESENT;
 			new_chandef = csa_ie->chandef;
@@ -210,8 +246,8 @@ int ieee80211_parse_ch_switch_ie(struct
 			kfree(he_oper);
 			kfree(eht_oper);
 		} else {
-			vht_oper.chan_width = wide_bw_chansw_ie->new_channel_width;
-			vht_oper.center_freq_seg0_idx = wide_bw_chansw_ie->new_center_freq_seg0;
+			vht_oper.chan_width = new_chan_width;
+			vht_oper.center_freq_seg0_idx = new_seg0;
 			vht_oper.center_freq_seg1_idx = new_seg1;
 			/* .basic_mcs_set doesn't matter */
 			ht_oper.operation_mode = cpu_to_le16(new_seg1 <<
@@ -222,6 +258,9 @@ int ieee80211_parse_ch_switch_ie(struct
 			 */
 			new_chandef = csa_ie->chandef;
 
+			if (punct_bitmap)
+				new_chandef.ru_punct_bitmap = punct_bitmap;
+
 			/* ignore if parsing fails */
 			if (!ieee80211_chandef_vht_oper(&sdata->local->hw,
 							vht_cap_info,
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -1373,6 +1373,16 @@ _ieee802_11_parse_elems_full(struct ieee
 				else
 					elem_parse_failed = true;
 			}
+
+			ie = cfg80211_find_ext_ie(WLAN_EID_EXT_BW_IND,
+						  pos, elen);
+			if (ie) {
+				if (ie[1] >= sizeof(*elems->bw_ind))
+					elems->bw_ind =
+						(void *)(ie + 3);
+				else
+					elem_parse_failed = true;
+			}
 			break;
 		case WLAN_EID_COUNTRY:
 			elems->country_elem = pos;
@@ -3944,6 +3954,7 @@ bool ieee80211_chandef_vht_oper(struct i
 	case IEEE80211_VHT_CHANWIDTH_USE_HT:
 		/* just use HT information directly */
 		break;
+	case IEEE80211_VHT_CHANWIDTH_160MHZ:
 	case IEEE80211_VHT_CHANWIDTH_80MHZ:
 		new.width = NL80211_CHAN_WIDTH_80;
 		new.center_freq1 = cf0;
@@ -3961,11 +3972,6 @@ bool ieee80211_chandef_vht_oper(struct i
 			}
 		}
 		break;
-	case IEEE80211_VHT_CHANWIDTH_160MHZ:
-		/* deprecated encoding */
-		new.width = NL80211_CHAN_WIDTH_160;
-		new.center_freq1 = cf0;
-		break;
 	case IEEE80211_VHT_CHANWIDTH_80P80MHZ:
 		/* deprecated encoding */
 		new.width = NL80211_CHAN_WIDTH_80P80;
