From a9434ac6aec55f82fbd2e8b6346f038627d29832 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Fri, 22 Nov 2024 14:57:21 +0530
Subject: [PATCH] QSDK:DP:wifi:mac80211: Add init netdev ops for an interface

Adding new ops for netdev init and netdev deinit in ieee80211_ops.

	1. init_interface ops to be called at interface ndo_init time
	2. deinit_interface ops to be called at interface ndo_deinit time
	3. This gives flexibility for vendors to link the initializations /
	   deinitialization of vender / driver specific objects at the time
	   of netdev init - deinit stages.

ndo_deinit is already present int mac80211 to process at the time of
interface deinit. Here, adding callback for ndo_init as well for
an interface.

Patch-dependency: None
Patch-work: None

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 include/net/mac80211.h    | 10 ++++++++++
 net/mac80211/driver-ops.h | 24 ++++++++++++++++++++++++
 net/mac80211/iface.c      | 15 ++++++++++++++-
 3 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index b85952f..dca7d8c 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4468,6 +4468,10 @@ struct ieee80211_ppe_vp_ds_params {
  *	link along with the TBTT count until which the beacon with ML
  *	reconfigure element should be sent.
  * @change_mtu: Ops to change the interface MTU.
+ * @init_interface: Called at the time of netdev init stage. This gives drivers
+ *	a flexibility to init driver specific data at interface init time.
+ * @deinit_interface: Called at the time of netdev deinit stage. This gives drivers
+ *	a flexibility to deinit driver specific data at interface deinit time.
  */
 struct ieee80211_ops {
 	void (*tx)(struct ieee80211_hw *hw,
@@ -4857,6 +4861,12 @@ struct ieee80211_ops {
 	int (*change_mtu)(struct ieee80211_hw *hw,
 			  struct ieee80211_vif *vif,
 			  int mtu);
+	int (*init_interface)(struct ieee80211_hw *hw,
+			      struct ieee80211_vif *vif,
+			      struct net_device *dev);
+	int (*deinit_interface)(struct ieee80211_hw *hw,
+				struct ieee80211_vif *vif,
+				struct net_device *dev);
 };
 
 /**
diff --git a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
index 10b2bbe..2a0176c 100644
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1567,6 +1567,30 @@ static inline int drv_net_setup_tc(struct ieee80211_local *local,
 	return ret;
 }
 
+static inline int drv_init_interface(struct ieee80211_local *local,
+				     struct ieee80211_sub_if_data *sdata,
+				     struct net_device *dev)
+{
+	int ret = 0;
+
+	if (local->ops->init_interface)
+		ret = local->ops->init_interface(&local->hw, &sdata->vif, dev);
+
+	return ret;
+}
+
+static inline int drv_deinit_interface(struct ieee80211_local *local,
+				       struct ieee80211_sub_if_data *sdata,
+				       struct net_device *dev)
+{
+	int ret = 0;
+
+	if (local->ops->deinit_interface)
+		ret = local->ops->deinit_interface(&local->hw, &sdata->vif, dev);
+
+	return ret;
+}
+
 int drv_change_vif_links(struct ieee80211_local *local,
 			 struct ieee80211_sub_if_data *sdata,
 			 u16 old_links, u16 new_links,
diff --git a/net/mac80211/iface.c b/net/mac80211/iface.c
index 3744f32..10b99a3 100644
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -925,9 +925,20 @@ static void ieee80211_teardown_sdata(struct ieee80211_sub_if_data *sdata)
 	ieee80211_link_stop(&sdata->deflink);
 }
 
+static int ieee80211_init(struct net_device *dev)
+{
+	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_local *local = sdata->local;
+
+	return drv_init_interface(local, sdata, dev);
+}
 static void ieee80211_uninit(struct net_device *dev)
 {
-	ieee80211_teardown_sdata(IEEE80211_DEV_TO_SUB_IF(dev));
+	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_local *local = sdata->local;
+
+	drv_deinit_interface(local, sdata, dev);
+	ieee80211_teardown_sdata(sdata);
 }
 
 static void
@@ -980,6 +991,7 @@ static const struct net_device_ops ieee80211_dataif_ops = {
 	.ndo_setup_tc		= ieee80211_netdev_setup_tc,
 	.ndo_change_mtu		= ieee80211_change_mtu,
 	.ndo_select_queue       = ieee80211_netdev_select_queue,
+	.ndo_init               = ieee80211_init,
 };
 
 static u16 ieee80211_monitor_select_queue(struct net_device *dev,
@@ -1032,6 +1044,7 @@ static const struct net_device_ops ieee80211_dataif_8023_ops = {
 	.ndo_setup_tc		= ieee80211_netdev_setup_tc,
 	.ndo_change_mtu		= ieee80211_change_mtu,
 	.ndo_select_queue       = ieee80211_netdev_select_queue,
+	.ndo_init               = ieee80211_init,
 };
 
 static bool ieee80211_iftype_supports_hdr_offload(enum nl80211_iftype iftype)
-- 
2.34.1

