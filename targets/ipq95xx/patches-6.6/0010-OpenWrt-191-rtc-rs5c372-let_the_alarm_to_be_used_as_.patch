From a6dc88476e62e59e988b71182c67c27c55e7ed0c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Gonz=C3=A1lez=20Cabanelas?= <dgcbueu@gmail.com>
Date: Thu, 16 Mar 2023 10:11:45 +0530
Subject: [PATCH 010/500] OpenWrt:
 191-rtc-rs5c372-let_the_alarm_to_be_used_as_wakeup_source.patch
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

rtc: rs5c372: let the alarm to be used as wakeup source

Currently there is no use for the interrupts on the rs5c372 RTC and the
wakealarm isn't enabled. There are some devices like NASes which use this
RTC to wake up from the power off state when the INTR pin is activated by
the alarm clock.

Enable the alarm and let to be used as a wakeup source.

Tested on a Buffalo LS421DE NAS.

Signed-off-by: Daniel Gonz√°lez Cabanelas <dgcbueu@gmail.com>

Change-Id: If4bae9db7a2c1b4a32fd54dca23f774585c30572
Signed-off-by: Ram Chandra Jangir <quic_rjangir@quicinc.com>
(cherry picked from commit c5006899e9d34eec195bef1e1d680e25e9476c75)
---
 drivers/rtc/rtc-rs5c372.c | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/drivers/rtc/rtc-rs5c372.c b/drivers/rtc/rtc-rs5c372.c
index e19aef158938..b3f7e859e5d5 100644
--- a/drivers/rtc/rtc-rs5c372.c
+++ b/drivers/rtc/rtc-rs5c372.c
@@ -832,6 +832,7 @@ static int rs5c372_probe(struct i2c_client *client)
 	int err = 0;
 	int smbus_mode = 0;
 	struct rs5c372 *rs5c372;
+	bool rs5c372_can_wakeup_device = false;
 
 	dev_dbg(&client->dev, "%s\n", __func__);
 
@@ -868,6 +869,12 @@ static int rs5c372_probe(struct i2c_client *client)
 		rs5c372->type = id->driver_data;
 	}
 
+#ifdef CONFIG_OF
+	if(of_property_read_bool(client->dev.of_node,
+					      "wakeup-source"))
+		rs5c372_can_wakeup_device = true;
+#endif
+
 	/* we read registers 0x0f then 0x00-0x0f; skip the first one */
 	rs5c372->regs = &rs5c372->buf[1];
 	rs5c372->smbus = smbus_mode;
@@ -901,6 +908,8 @@ static int rs5c372_probe(struct i2c_client *client)
 		goto exit;
 	}
 
+	rs5c372->has_irq = 1;
+
 	/* if the oscillator lost power and no other software (like
 	 * the bootloader) set it up, do it here.
 	 *
@@ -927,6 +936,10 @@ static int rs5c372_probe(struct i2c_client *client)
 			);
 
 	/* REVISIT use client->irq to register alarm irq ... */
+	if (rs5c372_can_wakeup_device) {
+		device_init_wakeup(&client->dev, true);
+	}
+
 	rs5c372->rtc = devm_rtc_device_register(&client->dev,
 					rs5c372_driver.driver.name,
 					&rs5c372_rtc_ops, THIS_MODULE);
@@ -940,6 +953,10 @@ static int rs5c372_probe(struct i2c_client *client)
 	if (err)
 		goto exit;
 
+	/* the rs5c372 alarm only supports a minute accuracy */
+	set_bit(RTC_FEATURE_ALARM_RES_MINUTE, rs5c372->rtc->features);
+	clear_bit(RTC_FEATURE_UPDATE_INTERRUPT, rs5c372->rtc->features);
+
 	return 0;
 
 exit:
-- 
2.34.1

