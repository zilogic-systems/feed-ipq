From fbd1fb98f7efec34f9fae5425f0325dc4f0412ba Mon Sep 17 00:00:00 2001
From: Daniel Golle <daniel@makrotopia.org>
Date: Thu, 16 Mar 2023 19:43:40 +0530
Subject: [PATCH 123/500] OpenWrt:
 402-mtd-blktrans-call-add-disks-after-mtd-device.patch

mtd: blktrans: call add disks after mtd device

Calling device_add_disk while holding mtd_table_mutex leads
to deadlock in case part_bits!=0 as block partition parsers
will try to open the newly created disks, trying to acquire
mutex once again.
Move device_add_disk to additional function called after
add partitions of an MTD device have been added and locks
have been released.

Signed-off-by: Daniel Golle <daniel@makrotopia.org>

Change-Id: I4351a33ebec2818311cd3c592ef0ee6f08388aae
Signed-off-by: Ram Chandra Jangir <quic_rjangir@quicinc.com>
(cherry picked from commit 9a478f1dcc8b803afaab0e34f40742840f24b637)
---
 drivers/mtd/mtd_blkdevs.c    | 40 ++++++++++++++++++++++++++----------
 drivers/mtd/mtdcore.c        |  3 +++
 include/linux/mtd/blktrans.h |  1 +
 3 files changed, 33 insertions(+), 11 deletions(-)

diff --git a/drivers/mtd/mtd_blkdevs.c b/drivers/mtd/mtd_blkdevs.c
index ff18636e0889..239bfbfbcf25 100644
--- a/drivers/mtd/mtd_blkdevs.c
+++ b/drivers/mtd/mtd_blkdevs.c
@@ -386,19 +386,8 @@ int add_mtd_blktrans_dev(struct mtd_blktrans_dev *new)
 	if (new->readonly)
 		set_disk_ro(gd, 1);
 
-	ret = device_add_disk(&new->mtd->dev, gd, NULL);
-	if (ret)
-		goto out_cleanup_disk;
-
-	if (new->disk_attributes) {
-		ret = sysfs_create_group(&disk_to_dev(gd)->kobj,
-					new->disk_attributes);
-		WARN_ON(ret);
-	}
 	return 0;
 
-out_cleanup_disk:
-	put_disk(new->disk);
 out_free_tag_set:
 	blk_mq_free_tag_set(new->tag_set);
 out_kfree_tag_set:
@@ -408,6 +397,35 @@ int add_mtd_blktrans_dev(struct mtd_blktrans_dev *new)
 	return ret;
 }
 
+void register_mtd_blktrans_devs(void)
+{
+	struct mtd_blktrans_ops *tr;
+	struct mtd_blktrans_dev *dev, *next;
+	int ret;
+
+	list_for_each_entry(tr, &blktrans_majors, list) {
+		list_for_each_entry_safe(dev, next, &tr->devs, list) {
+			if (disk_live(dev->disk))
+				continue;
+
+			ret = device_add_disk(&dev->mtd->dev, dev->disk, NULL);
+			if (ret)
+				goto out_cleanup_disk;
+
+			if (dev->disk_attributes) {
+				ret = sysfs_create_group(&disk_to_dev(dev->disk)->kobj,
+							dev->disk_attributes);
+				WARN_ON(ret);
+			}
+		}
+	}
+
+	return;
+
+out_cleanup_disk:
+	put_disk(dev->disk);
+}
+
 int del_mtd_blktrans_dev(struct mtd_blktrans_dev *old)
 {
 	unsigned long flags;
diff --git a/drivers/mtd/mtdcore.c b/drivers/mtd/mtdcore.c
index 9bd661be3ae9..5f2f33cc3407 100644
--- a/drivers/mtd/mtdcore.c
+++ b/drivers/mtd/mtdcore.c
@@ -33,6 +33,7 @@
 
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/partitions.h>
+#include <linux/mtd/blktrans.h>
 
 #include "mtdcore.h"
 
@@ -1091,6 +1092,8 @@ int mtd_device_parse_register(struct mtd_info *mtd, const char * const *types,
 		register_reboot_notifier(&mtd->reboot_notifier);
 	}
 
+	register_mtd_blktrans_devs();
+
 out:
 	if (ret) {
 		nvmem_unregister(mtd->otp_user_nvmem);
diff --git a/include/linux/mtd/blktrans.h b/include/linux/mtd/blktrans.h
index 6e471436bba5..70f246a3dceb 100644
--- a/include/linux/mtd/blktrans.h
+++ b/include/linux/mtd/blktrans.h
@@ -76,6 +76,7 @@ extern int deregister_mtd_blktrans(struct mtd_blktrans_ops *tr);
 extern int add_mtd_blktrans_dev(struct mtd_blktrans_dev *dev);
 extern int del_mtd_blktrans_dev(struct mtd_blktrans_dev *dev);
 extern int mtd_blktrans_cease_background(struct mtd_blktrans_dev *dev);
+extern void register_mtd_blktrans_devs(void);
 
 /**
  * module_mtd_blktrans() - Helper macro for registering a mtd blktrans driver
-- 
2.34.1

