From c9e8cfc5a7e5d2ded5e9934272af7b9b453183f1 Mon Sep 17 00:00:00 2001
From: Murat Sezgin <msezgin@codeaurora.org>
Date: Mon, 8 May 2017 11:49:21 -0700
Subject: [PATCH 171/500] OpenWRT: 644-bridge_optimize_netfilter_hooks.patch

This patch applies the following upstreamed
openwrt patch from 3.14 kernel.

commit 76b37c24252b (OpenWrt: apply 644-bridge_optimize_netfilter_hooks.patch)

Change-Id: I4dde201c34717321115c9c067dc10d0b38d6eee6
Signed-off-by: Murat Sezgin <msezgin@codeaurora.org>
(cherry picked from commit a647c9cf03fd82ce5e090891e5ffa68e22dcf88d)
---
 net/bridge/br_forward.c         |  4 ++--
 net/bridge/br_input.c           |  6 +++---
 net/bridge/br_multicast.c       |  2 +-
 net/bridge/br_netfilter_hooks.c | 17 +++++++++++++++++
 net/bridge/br_private.h         | 14 ++++++++++++++
 net/bridge/br_stp_bpdu.c        |  2 +-
 6 files changed, 38 insertions(+), 7 deletions(-)

diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
index d485af1454f5..30a1eda608e2 100644
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -63,7 +63,7 @@ EXPORT_SYMBOL_GPL(br_dev_queue_push_xmit);
 int br_forward_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
 	skb_clear_tstamp(skb);
-	return NF_HOOK(NFPROTO_BRIDGE, NF_BR_POST_ROUTING,
+	return BR_HOOK(NFPROTO_BRIDGE, NF_BR_POST_ROUTING,
 		       net, sk, skb, NULL, skb->dev,
 		       br_dev_queue_push_xmit);
 
@@ -112,7 +112,7 @@ static void __br_forward(const struct net_bridge_port *to,
 		indev = NULL;
 	}
 
-	NF_HOOK(NFPROTO_BRIDGE, br_hook,
+	BR_HOOK(NFPROTO_BRIDGE, br_hook,
 		net, NULL, skb, indev, skb->dev,
 		br_forward_finish);
 }
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index e0626fd6c690..2ff896f6cf39 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -65,7 +65,7 @@ static int br_pass_frame_up(struct sk_buff *skb)
 	br_multicast_count(br, NULL, skb, br_multicast_igmp_type(skb),
 			   BR_MCAST_DIR_TX);
 
-	return NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN,
+	return BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN,
 		       dev_net(indev), NULL, skb, indev, NULL,
 		       br_netif_receive_skb);
 }
@@ -396,7 +396,7 @@ static rx_handler_result_t br_handle_frame(struct sk_buff **pskb)
 		 *   - returns = 0 (stolen/nf_queue)
 		 * Thus return 1 from the okfn() to signal the skb is ok to pass
 		 */
-		if (NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN,
+		if (BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN,
 			    dev_net(skb->dev), NULL, skb, skb->dev, NULL,
 			    br_handle_local_finish) == 1) {
 			return RX_HANDLER_PASS;
@@ -417,7 +417,7 @@ static rx_handler_result_t br_handle_frame(struct sk_buff **pskb)
 		if (ether_addr_equal(p->br->dev->dev_addr, dest))
 			skb->pkt_type = PACKET_HOST;
 
-		if (NF_HOOK(NFPROTO_BRIDGE, NF_BR_PRE_ROUTING,
+		if (BR_HOOK(NFPROTO_BRIDGE, NF_BR_PRE_ROUTING,
 			dev_net(skb->dev), NULL, skb, skb->dev, NULL,
 			br_handle_local_finish) == 1) {
 			return RX_HANDLER_PASS;
diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index 96d1fc78dd39..86e80c67a4ee 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -1801,7 +1801,7 @@ static void __br_multicast_send_query(struct net_bridge_mcast *brmctx,
 		skb->dev = pmctx->port->dev;
 		br_multicast_count(brmctx->br, pmctx->port, skb, igmp_type,
 				   BR_MCAST_DIR_TX);
-		NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT,
+		BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT,
 			dev_net(pmctx->port->dev), NULL, skb, NULL, skb->dev,
 			br_dev_queue_push_xmit);
 
diff --git a/net/bridge/br_netfilter_hooks.c b/net/bridge/br_netfilter_hooks.c
index 033034d68f1f..ff606944d82f 100644
--- a/net/bridge/br_netfilter_hooks.c
+++ b/net/bridge/br_netfilter_hooks.c
@@ -56,6 +56,7 @@ struct brnf_net {
 	int call_iptables;
 	int call_ip6tables;
 	int call_arptables;
+	int call_ebtables;
 
 	/* default value is 0 */
 	int filter_vlan_tagged;
@@ -72,6 +73,14 @@ struct brnf_net {
 #define IS_ARP(skb) \
 	(!skb_vlan_tag_present(skb) && skb->protocol == htons(ETH_P_ARP))
 
+bool br_netfilter_run_hooks(struct net *net)
+{
+	struct brnf_net *brnf = net_generic(net, brnf_net_id);
+
+	return brnf->call_iptables | brnf->call_ip6tables | brnf->call_arptables |
+		brnf->call_ebtables;
+}
+
 static inline __be16 vlan_proto(const struct sk_buff *skb)
 {
 	if (skb_vlan_tag_present(skb))
@@ -1101,6 +1110,12 @@ static struct ctl_table brnf_table[] = {
 		.mode		= 0644,
 		.proc_handler	= brnf_sysctl_call_tables,
 	},
+	{
+		.procname       = "bridge-nf-call-ebtables",
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = brnf_sysctl_call_tables,
+	},
 	{ }
 };
 
@@ -1109,6 +1124,7 @@ static inline void br_netfilter_sysctl_default(struct brnf_net *brnf)
 	brnf->call_iptables = 1;
 	brnf->call_ip6tables = 1;
 	brnf->call_arptables = 1;
+	brnf->call_ebtables = 1;
 	brnf->filter_vlan_tagged = 0;
 	brnf->filter_pppoe_tagged = 0;
 	brnf->pass_vlan_indev = 0;
@@ -1132,6 +1148,7 @@ static int br_netfilter_sysctl_init_net(struct net *net)
 	table[3].data = &brnet->filter_vlan_tagged;
 	table[4].data = &brnet->filter_pppoe_tagged;
 	table[5].data = &brnet->pass_vlan_indev;
+	table[6].data = &brnet->call_ebtables;
 
 	br_netfilter_sysctl_default(brnet);
 
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index a1f4acfa6994..6e1f4cfc64b0 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -19,6 +19,7 @@
 #include <linux/if_vlan.h>
 #include <linux/rhashtable.h>
 #include <linux/refcount.h>
+#include <linux/netfilter.h>
 
 #define BR_HASH_BITS 8
 #define BR_HASH_SIZE (1 << BR_HASH_BITS)
@@ -1930,12 +1931,25 @@ extern const struct nf_br_ops __rcu *nf_br_ops;
 int br_nf_core_init(void);
 void br_nf_core_fini(void);
 void br_netfilter_rtable_init(struct net_bridge *);
+bool br_netfilter_run_hooks(struct net *net);
 #else
 static inline int br_nf_core_init(void) { return 0; }
 static inline void br_nf_core_fini(void) {}
 #define br_netfilter_rtable_init(x)
+static inline bool br_netfilter_run_hooks(struct net *net) { return false; }
 #endif
 
+static inline int
+BR_HOOK(uint8_t pf, unsigned int hook, struct net *net, struct sock *sk,
+	struct sk_buff *skb, struct net_device *in, struct net_device *out,
+	int (*okfn)(struct net *, struct sock *, struct sk_buff *))
+{
+	if (!br_netfilter_run_hooks(net))
+		return okfn(net, sk, skb);
+
+	return NF_HOOK(pf, hook, net, sk, skb, in, out, okfn);
+}
+
 /* br_stp.c */
 void br_set_state(struct net_bridge_port *p, unsigned int state);
 struct net_bridge_port *br_get_port(struct net_bridge *br, u16 port_no);
diff --git a/net/bridge/br_stp_bpdu.c b/net/bridge/br_stp_bpdu.c
index 9d2a235260eb..8d954196ff8e 100644
--- a/net/bridge/br_stp_bpdu.c
+++ b/net/bridge/br_stp_bpdu.c
@@ -56,7 +56,7 @@ static void br_send_bpdu(struct net_bridge_port *p,
 
 	skb_reset_mac_header(skb);
 
-	NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT,
+	BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT,
 		dev_net(p->dev), NULL, skb, NULL, skb->dev,
 		br_send_bpdu_finish);
 }
-- 
2.34.1

