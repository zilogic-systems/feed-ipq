From da20550eef0853d3db46af6f8d8a57ffaab9b9f8 Mon Sep 17 00:00:00 2001
From: Devi Priya <quic_devipriy@quicinc.com>
Date: Fri, 24 Mar 2023 15:34:29 +0530
Subject: [PATCH 193/500] clk: qcom: support for duplicate freq in RCG2 freq
 table
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Currently RCG code looks up the frequency table during set
rate and return the first available frequency greater than
requested rate. If CLK_SET_RATE_PARENT flag is set then the
set_rate request will go to its parent otherwise the clock
framework will configure pre-div, m and n according to the
returned frequency table entry. In this case, it is assuming
that parent clock will run in the same frequency with which
pre-div, m and n has been derived. But it may be possible
that the parent clock supports multiple frequency and the
same frequency can be derived with different pre-div, m and
n values depending upon current frequency.  Also, the same
frequency can be derived from different parent sources and
currently there is no option for having duplicate
frequencies in frequency table and choosing the best one
according to current rate.

Now this patch adds the support for having duplicate
frequencies in frequency table. During set rate, it will
compare the actual rate for each entry with requested rate
and will select the best entry in which the difference will
be less.

The existing functionality wonâ€™t be affected with this code
change since this code change will hit only if frequency
table has duplicate values

Also, updated the qcom_find_freq func which uses freq table from
rcg struct which might vary based on the clock to be set.
To avoid this, use the input freq table

Change-Id: I9c153c7abb02299ab2af13f1f4f962532a4dd6b4
Signed-off-by: Praveenkumar I <ipkumar@codeaurora.org>
(cherry picked from commit 6dfb368bae130bee58e00ddf8330b55066e1c8c5)
Signed-off-by: Devi Priya <quic_devipriy@quicinc.com>
---
 drivers/clk/qcom/clk-rcg2.c | 91 ++++++++++++++++++++++++++++---------
 1 file changed, 70 insertions(+), 21 deletions(-)

diff --git a/drivers/clk/qcom/clk-rcg2.c b/drivers/clk/qcom/clk-rcg2.c
index 5183c74b074f..7403bdce25a5 100644
--- a/drivers/clk/qcom/clk-rcg2.c
+++ b/drivers/clk/qcom/clk-rcg2.c
@@ -203,6 +203,72 @@ clk_rcg2_recalc_rate(struct clk_hw *hw, unsigned long parent_rate)
 	return __clk_rcg2_recalc_rate(hw, parent_rate, cfg);
 }
 
+static const struct freq_tbl *
+clk_rcg2_find_best_freq(struct clk_hw *hw, const struct freq_tbl *f,
+                        unsigned long rate, enum freq_policy policy)
+{
+        unsigned long req_rate = rate, best = 0, freq;
+        struct clk_rcg2 *rcg = to_clk_rcg2(hw);
+        int index;
+        u64 tmp;
+        const struct freq_tbl *best_ftable = NULL;
+
+        switch (policy) {
+        case FLOOR:
+                f = qcom_find_freq_floor(f, rate);
+                break;
+        case CEIL:
+                f = qcom_find_freq(f, rate);
+                break;
+        default:
+                return best_ftable;
+        };
+
+        /*
+         * Check for duplicate frequencies in frequency table if
+         * CLK_SET_RATE_PARENT flag is not set
+         */
+        if (!f || (clk_hw_get_flags(hw) & CLK_SET_RATE_PARENT) ||
+            ((f->freq && (f + 1)->freq != f->freq)))
+                return f;
+
+        /*
+         * Check for all the duplicate entries in frequency table and
+         * calculate the actual rate from current parent rate with each
+         * entries pre_div, m and n values. The entry, which gives the
+         * minimum difference in requested rate and actual rate, will be
+         * selected as the best one.
+         */
+        for (freq = f->freq; freq == f->freq; f++) {
+                index = qcom_find_src_index(hw, rcg->parent_map, f->src);
+                if (index < 0)
+                        continue;
+
+                rate =  clk_hw_get_rate(clk_hw_get_parent_by_index(hw, index));
+                if (rcg->hid_width && f->pre_div) {
+                        rate *= 2;
+                        rate /= f->pre_div + 1;
+                }
+
+                if (rcg->mnd_width && f->n) {
+                        tmp = rate;
+                        tmp = tmp * f->n;
+                        do_div(tmp, f->m);
+                        rate = tmp;
+                }
+
+                if (abs(req_rate - rate) < abs(best - rate)) {
+                        best_ftable = f;
+                        best = rate;
+
+                        if (req_rate == rate)
+                                break;
+                }
+        }
+
+        return best_ftable;
+}
+
 static int _freq_tbl_determine_rate(struct clk_hw *hw, const struct freq_tbl *f,
 				    struct clk_rate_request *req,
 				    enum freq_policy policy)
@@ -212,16 +278,7 @@ static int _freq_tbl_determine_rate(struct clk_hw *hw, const struct freq_tbl *f,
 	struct clk_rcg2 *rcg = to_clk_rcg2(hw);
 	int index;
 
-	switch (policy) {
-	case FLOOR:
-		f = qcom_find_freq_floor(f, rate);
-		break;
-	case CEIL:
-		f = qcom_find_freq(f, rate);
-		break;
-	default:
-		return -EINVAL;
-	}
+	f = clk_rcg2_find_best_freq(hw, f, rate, policy);
 
 	if (!f)
 		return -EINVAL;
@@ -354,16 +411,7 @@ static int __clk_rcg2_set_rate(struct clk_hw *hw, unsigned long rate,
 	struct clk_rcg2 *rcg = to_clk_rcg2(hw);
 	const struct freq_tbl *f;
 
-	switch (policy) {
-	case FLOOR:
-		f = qcom_find_freq_floor(rcg->freq_tbl, rate);
-		break;
-	case CEIL:
-		f = qcom_find_freq(rcg->freq_tbl, rate);
-		break;
-	default:
-		return -EINVAL;
-	}
+	f = clk_rcg2_find_best_freq(hw, rcg->freq_tbl, rate, policy);
 
 	if (!f)
 		return -EINVAL;
@@ -1026,7 +1074,8 @@ static int clk_rcg2_shared_set_rate(struct clk_hw *hw, unsigned long rate,
 	struct clk_rcg2 *rcg = to_clk_rcg2(hw);
 	const struct freq_tbl *f;
 
-	f = qcom_find_freq(rcg->freq_tbl, rate);
+	f = clk_rcg2_find_best_freq(hw, rcg->freq_tbl, rate, CEIL);
+
 	if (!f)
 		return -EINVAL;
 
-- 
2.34.1

