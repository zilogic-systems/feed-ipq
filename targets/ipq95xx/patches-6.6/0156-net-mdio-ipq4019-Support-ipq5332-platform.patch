From 4278e570e9aa7fd77bfa7c1f8c03c0d11c834fcc Mon Sep 17 00:00:00 2001
From: Luo Jie <quic_luoj@quicinc.com>
Date: Thu, 23 Mar 2023 14:39:04 +0800
Subject: [PATCH 101/500] net: mdio-ipq4019: Support ipq5332 platform

For the platform ipq5332, there are two uniphies supported,
the CMN_PLL for these two uniphies and related clocks should
be configured for resetting the connected PHY devices.

Change-Id: I7dc960d32a678253841b6e82402efe30d6c1b9db
Signed-off-by: Luo Jie <quic_luoj@quicinc.com>
---
 drivers/net/mdio/mdio-ipq4019.c | 120 +++++++++++++++++++++++++++-----
 1 file changed, 101 insertions(+), 19 deletions(-)

diff --git a/drivers/net/mdio/mdio-ipq4019.c b/drivers/net/mdio/mdio-ipq4019.c
index c1d61f22543d..dda898e9a629 100644
--- a/drivers/net/mdio/mdio-ipq4019.c
+++ b/drivers/net/mdio/mdio-ipq4019.c
@@ -12,6 +12,7 @@
 #include <linux/phy.h>
 #include <linux/platform_device.h>
 #include <linux/clk.h>
+#include <linux/gpio/consumer.h>
 
 #define MDIO_MODE_REG				0x40
 #define MDIO_ADDR_REG				0x44
@@ -36,6 +37,8 @@
 
 /* MDIO clock source frequency is fixed to 100M */
 #define IPQ_MDIO_CLK_RATE	100000000
+#define IPQ_UNIPHY_AHB_CLK_RATE	100000000
+#define IPQ_UNIPHY_SYS_CLK_RATE	24000000
 
 #define IPQ_PHY_SET_DELAY_US	100000
 
@@ -46,6 +49,7 @@
 #define PHY_ADDR_NUM		4
 #define UNIPHY_ADDR_NUM		3
 
+/* qca8386 related */
 #define EPHY_CFG				0xC90F018
 #define GEPHY0_TX_CBCR				0xC800058
 #define SRDS0_SYS_CBCR				0xC8001A8
@@ -66,12 +70,28 @@
 #define PHY_ICC_EFUSE_REG			0x280
 #define PHY_10BT_SG_THRESH_REG			0x3380
 #define PHY_MMD1_CTRL2ANA_OPTION2_REG		0x40018102
+#define ETH_LDO_RDY_CNT				3
+
+enum mdio_clk_id {
+	MDIO_CLK_MDIO_AHB,
+	MDIO_CLK_UNIPHY0_AHB,
+	MDIO_CLK_UNIPHY0_SYS,
+	MDIO_CLK_UNIPHY1_AHB,
+	MDIO_CLK_UNIPHY1_SYS,
+	MDIO_CLK_CNT
+};
 
 struct ipq4019_mdio_data {
 	void __iomem	*membase;
-	void __iomem *eth_ldo_rdy;
-	struct clk *mdio_clk;
+	void __iomem *eth_ldo_rdy[ETH_LDO_RDY_CNT];
 	int clk_div;
+	struct gpio_descs *reset_gpios;
+	struct clk *clk[MDIO_CLK_CNT];
+};
+
+const char * const ppe_clk_name[] = {
+	"gcc_mdio_ahb_clk", "uniphy0_ahb_clk", "uniphy0_sys_clk",
+	"uniphy1_ahb_clk", "uniphy1_sys_clk"
 };
 
 static int ipq4019_mdio_wait_busy(struct mii_bus *bus)
@@ -558,7 +578,6 @@ static void ipq_qca8386_clock_init(struct mii_bus *mii_bus)
 	usleep_range(10000, 11000);
 }
 
-
 void ipq_mii_preinit(struct mii_bus *bus)
 {
 	struct device_node *np = bus->parent->of_node;
@@ -577,24 +596,71 @@ static int ipq_mdio_reset(struct mii_bus *bus)
 {
 	struct ipq4019_mdio_data *priv = bus->priv;
 	u32 val;
-	int ret;
+	int ret, i;
 
-	/* To indicate CMN_PLL that ethernet_ldo has been ready if platform resource 1
-	 * is specified in the device tree.
+	/* For the platform ipq5332, the uniphy clock should be configured for resetting
+	 * the connected device such as qca8386 switch or qca8081 PHY.
 	 */
-	if (priv->eth_ldo_rdy) {
-		val = readl(priv->eth_ldo_rdy);
-		val |= BIT(0);
-		writel(val, priv->eth_ldo_rdy);
+	if (of_machine_is_compatible("qcom,ipq5332")) {
+		unsigned long rate = 0;
+
+		for (i = MDIO_CLK_UNIPHY0_AHB; i < MDIO_CLK_CNT; i++) {
+			switch (i) {
+			case MDIO_CLK_UNIPHY0_AHB:
+			case MDIO_CLK_UNIPHY1_AHB:
+				rate = IPQ_UNIPHY_AHB_CLK_RATE;
+				break;
+			case MDIO_CLK_UNIPHY0_SYS:
+			case MDIO_CLK_UNIPHY1_SYS:
+				rate = IPQ_UNIPHY_SYS_CLK_RATE;
+				break;
+			default:
+				break;
+			}
+			ret = clk_set_rate(priv->clk[i], rate);
+			if (ret)
+				continue;
+
+			ret = clk_prepare_enable(priv->clk[i]);
+		}
+	}
+
+	/* To indicate CMN_PLL that ethernet_ldo has been ready if the additional
+	 * platform resources are specified in the device tree.
+	 */
+	for (i = 0; i < ETH_LDO_RDY_CNT; i++) {
+		if (priv->eth_ldo_rdy[i]) {
+			val = readl(priv->eth_ldo_rdy[i]);
+			val |= BIT(0);
+			writel(val, priv->eth_ldo_rdy[i]);
+			fsleep(IPQ_PHY_SET_DELAY_US);
+		}
+	}
+
+	/* Do the optional reset on the devices connected with MDIO bus */
+	if (priv->reset_gpios) {
+		unsigned long *values = bitmap_zalloc(priv->reset_gpios->ndescs, GFP_KERNEL);
+		if (!values)
+			return -ENOMEM;
+
+		bitmap_fill(values, priv->reset_gpios->ndescs);
+		gpiod_set_array_value_cansleep(priv->reset_gpios->ndescs, priv->reset_gpios->desc,
+				priv->reset_gpios->info, values);
+
 		fsleep(IPQ_PHY_SET_DELAY_US);
+
+		bitmap_zero(values, priv->reset_gpios->ndescs);
+		gpiod_set_array_value_cansleep(priv->reset_gpios->ndescs, priv->reset_gpios->desc,
+				priv->reset_gpios->info, values);
+		bitmap_free(values);
 	}
 
 	/* Configure MDIO clock source frequency if clock is specified in the device tree */
-	ret = clk_set_rate(priv->mdio_clk, IPQ_MDIO_CLK_RATE);
+	ret = clk_set_rate(priv->clk[MDIO_CLK_MDIO_AHB], IPQ_MDIO_CLK_RATE);
 	if (ret)
 		return ret;
 
-	ret = clk_prepare_enable(priv->mdio_clk);
+	ret = clk_prepare_enable(priv->clk[MDIO_CLK_MDIO_AHB]);
 	if (ret == 0) {
 		mdelay(10);
 
@@ -610,7 +676,7 @@ static int ipq4019_mdio_probe(struct platform_device *pdev)
 	struct ipq4019_mdio_data *priv;
 	struct mii_bus *bus;
 	struct resource *res;
-	int ret;
+	int ret, i;
 
 	bus = devm_mdiobus_alloc_size(&pdev->dev, sizeof(*priv));
 	if (!bus)
@@ -622,15 +688,30 @@ static int ipq4019_mdio_probe(struct platform_device *pdev)
 	if (IS_ERR(priv->membase))
 		return PTR_ERR(priv->membase);
 
-	priv->mdio_clk = devm_clk_get_optional(&pdev->dev, "gcc_mdio_ahb_clk");
-	if (IS_ERR(priv->mdio_clk))
-		return PTR_ERR(priv->mdio_clk);
+	for (i = 0; i < MDIO_CLK_CNT; i++) {
+		priv->clk[i] = devm_clk_get_optional(&pdev->dev, ppe_clk_name[i]);
+		if (IS_ERR(priv->clk[i]))
+			return PTR_ERR(priv->clk[i]);
+	}
 
 	/* The platform resource is provided on the chipset IPQ5018 */
 	/* This resource is optional */
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-	if (res)
-		priv->eth_ldo_rdy = devm_ioremap_resource(&pdev->dev, res);
+	for (i = 0; i < ETH_LDO_RDY_CNT; i++) {
+		res = platform_get_resource(pdev, IORESOURCE_MEM, i + 1);
+		if (res) {
+			priv->eth_ldo_rdy[i] = devm_ioremap_resource(&pdev->dev, res);
+			if (IS_ERR(priv->eth_ldo_rdy[i]))
+				return PTR_ERR(priv->eth_ldo_rdy[i]);
+		}
+	}
+
+	priv->reset_gpios= devm_gpiod_get_array_optional(&pdev->dev, "phy-reset", GPIOD_OUT_LOW);
+	if (IS_ERR(priv->reset_gpios)) {
+		ret = dev_err_probe(&pdev->dev, PTR_ERR(priv->reset_gpios),
+				    "mii_bus %s couldn't get reset GPIO\n",
+				    bus->id);
+		return ret;
+	}
 
 	/* MDIO default frequency is 6.25MHz */
 	priv->clk_div = 0xf;
@@ -667,6 +748,7 @@ static int ipq4019_mdio_remove(struct platform_device *pdev)
 static const struct of_device_id ipq4019_mdio_dt_ids[] = {
 	{ .compatible = "qcom,ipq4019-mdio" },
 	{ .compatible = "qcom,ipq5018-mdio" },
+	{ .compatible = "qcom,qca-mdio" },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, ipq4019_mdio_dt_ids);
-- 
2.34.1

