From 59c99cbc9a0cfc0504b1ded2f6e4c4097eb26283 Mon Sep 17 00:00:00 2001
From: Luo Jie <quic_luoj@quicinc.com>
Date: Thu, 9 Nov 2023 11:20:13 +0800
Subject: [PATCH 140/500] net: mdio: export switch read & write ops

Change-Id: Id0085df3fbc687e7a06b80f134863f481f9f5f9d
Signed-off-by: Luo Jie <quic_luoj@quicinc.com>
---
 drivers/net/mdio/mdio-ipq4019.c | 92 ++++++++++++++++++++++++++++++---
 1 file changed, 86 insertions(+), 6 deletions(-)

diff --git a/drivers/net/mdio/mdio-ipq4019.c b/drivers/net/mdio/mdio-ipq4019.c
index d735d4a0f8aa..d3f896980a17 100644
--- a/drivers/net/mdio/mdio-ipq4019.c
+++ b/drivers/net/mdio/mdio-ipq4019.c
@@ -72,9 +72,14 @@
 #define PHY_MMD1_CTRL2ANA_OPTION2_REG		0x40018102
 #define ETH_LDO_RDY_CNT				3
 
-#define CMN_PLL_REFCLK_INDEX	GENMASK(3, 0)
-#define CMN_PLL_REFCLK_EXTERNAL	BIT(9)
-#define CMN_ANA_EN_SW_RSTN	BIT(6)
+#define CMN_PLL_REFCLK_INDEX			GENMASK(3, 0)
+#define CMN_PLL_REFCLK_EXTERNAL			BIT(9)
+#define CMN_ANA_EN_SW_RSTN			BIT(6)
+
+#define SWITCH_REG_TYPE_MASK			GENMASK(31, 28)
+#define SWITCH_REG_TYPE_QCA8386			0
+#define SWITCH_REG_TYPE_QCA8337			1
+#define SWITCH_HIGH_ADDR_DFLT			0x200
 
 enum mdio_clk_id {
 	MDIO_CLK_MDIO_AHB,
@@ -89,10 +94,12 @@ struct ipq4019_mdio_data {
 	void __iomem	*membase[2];
 	void __iomem *eth_ldo_rdy[ETH_LDO_RDY_CNT];
 	int clk_div;
+	bool force_c22;
 	struct gpio_descs *reset_gpios;
 	void (*preinit)(struct mii_bus *bus);
+	u32 (*sw_read)(struct mii_bus *bus, u32 reg);
+	void (*sw_write)(struct mii_bus *bus, u32 reg, u32 val);
 	struct clk *clk[MDIO_CLK_CNT];
-	bool force_c22;
 };
 
 const char * const ppe_clk_name[] = {
@@ -298,6 +305,48 @@ static int ipq4019_mdio_write_c45(struct mii_bus *bus, int mii_id, int mmd,
 	return _ipq4019_mdio_write_c45(bus, mii_id, mmd, reg, value);
 }
 
+static inline void qca8337_split_addr(u32 regaddr, u16 *r1, u16 *r2, u16 *page)
+{
+	regaddr >>= 1;
+	*r1 = regaddr & 0x1e;
+
+	regaddr >>= 5;
+	*r2 = regaddr & 0x7;
+
+	regaddr >>= 3;
+	*page = regaddr & 0x3ff;
+}
+
+u32 qca8337_read(struct mii_bus *mii_bus, u32 reg)
+{
+	u16 r1, r2, page;
+	u16 lo, hi;
+
+	qca8337_split_addr(reg, &r1, &r2, &page);
+	mii_bus->write(mii_bus, IPQ_HIGH_ADDR_PREFIX, 0, page);
+	udelay(100);
+
+	lo = mii_bus->read(mii_bus, IPQ_LOW_ADDR_PREFIX | r2, r1);
+	hi = mii_bus->read(mii_bus, IPQ_LOW_ADDR_PREFIX | r2, r1 + 1);
+
+	mii_bus->write(mii_bus, IPQ_HIGH_ADDR_PREFIX, 0, SWITCH_HIGH_ADDR_DFLT);
+	return (hi << 16) | lo;
+}
+
+void qca8337_write(struct mii_bus *mii_bus, u32 reg, u32 val)
+{
+	u16 r1, r2, page;
+
+	qca8337_split_addr(reg, &r1, &r2, &page);
+	mii_bus->write(mii_bus, IPQ_HIGH_ADDR_PREFIX, 0, page);
+	udelay(100);
+
+	mii_bus->write(mii_bus, IPQ_LOW_ADDR_PREFIX | r2, r1, val & 0xffff);
+	mii_bus->write(mii_bus, IPQ_LOW_ADDR_PREFIX | r2, r1 + 1, (u16)(val >> 16));
+
+	mii_bus->write(mii_bus, IPQ_HIGH_ADDR_PREFIX, 0, SWITCH_HIGH_ADDR_DFLT);
+}
+
 static inline void split_addr(u32 regaddr, u16 *r1, u16 *r2, u16 *page, u16 *sw_addr)
 {
 	*r1 = regaddr & 0x1c;
@@ -312,7 +361,7 @@ static inline void split_addr(u32 regaddr, u16 *r1, u16 *r2, u16 *page, u16 *sw_
 	*sw_addr = regaddr & 0xff;
 }
 
-u32 ipq_mii_read(struct mii_bus *bus, unsigned int reg)
+u32 qca8386_read(struct mii_bus *bus, unsigned int reg)
 {
 	u16 r1, r2, page, sw_addr;
 	u16 lo, hi;
@@ -330,7 +379,7 @@ u32 ipq_mii_read(struct mii_bus *bus, unsigned int reg)
 	return hi << 16 | lo;
 };
 
-int ipq_mii_write(struct mii_bus *bus, unsigned int reg, unsigned int val)
+int qca8386_write(struct mii_bus *bus, unsigned int reg, unsigned int val)
 {
 	u16 r1, r2, page, sw_addr;
 	u16 lo, hi;
@@ -351,6 +400,35 @@ int ipq_mii_write(struct mii_bus *bus, unsigned int reg, unsigned int val)
 	return 0;
 };
 
+u32 ipq_mii_read(struct mii_bus *mii_bus, u32 reg)
+{
+	u32 val = 0xffffffff;
+	switch (FIELD_GET(SWITCH_REG_TYPE_MASK, reg)) {
+		case SWITCH_REG_TYPE_QCA8337:
+			val = qca8337_read(mii_bus, reg);
+			break;
+		case SWITCH_REG_TYPE_QCA8386:
+		default:
+			val = qca8386_read(mii_bus, reg);
+			break;
+	}
+
+	return val;
+}
+
+void ipq_mii_write(struct mii_bus *mii_bus, u32 reg, u32 val)
+{
+	switch (FIELD_GET(SWITCH_REG_TYPE_MASK, reg)) {
+		case SWITCH_REG_TYPE_QCA8337:
+			qca8337_write(mii_bus, reg, val);
+			break;
+		case SWITCH_REG_TYPE_QCA8386:
+		default:
+			qca8386_write(mii_bus, reg, val);
+			break;
+	}
+}
+
 static inline void ipq_qca8386_clk_enable(struct mii_bus *mii_bus, u32 reg)
 {
 	u32 val;
@@ -821,6 +899,8 @@ static int ipq4019_mdio_probe(struct platform_device *pdev)
 	priv->force_c22 = of_property_read_bool(pdev->dev.of_node, "force_clause22");
 
 	priv->preinit = ipq_mii_preinit;
+	priv->sw_read = ipq_mii_read;
+	priv->sw_write = ipq_mii_write;
 
 	bus->name = "ipq4019_mdio";
 	bus->read = ipq4019_mdio_read_c22;
-- 
2.34.1

