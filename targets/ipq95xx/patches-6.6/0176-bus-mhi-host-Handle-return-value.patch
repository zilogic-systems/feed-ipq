From 8fc44fc2e7727cbe9e3ae87980304a537a28e927 Mon Sep 17 00:00:00 2001
From: Hariharan K <quic_harihk@quicinc.com>
Date: Wed, 27 Sep 2023 12:26:58 +0530
Subject: [PATCH 203/500] bus: mhi: host: Handle return value

Handle the return value from mhi_read_reg
API to avoid compiler warning.

Change-Id: I13ae2659f831ca4d989b8805f6872eb1b891ad78
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
---
 drivers/bus/mhi/host/boot.c | 21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git a/drivers/bus/mhi/host/boot.c b/drivers/bus/mhi/host/boot.c
index c23bbc327497..83651c584aa6 100644
--- a/drivers/bus/mhi/host/boot.c
+++ b/drivers/bus/mhi/host/boot.c
@@ -404,8 +404,11 @@ static int mhi_select_window(struct mhi_controller *mhi_cntrl, u32 addr)
 	u32 prev_window = 0, curr_window = 0;
 	u32 read_val = 0;
 	int retry = 0;
+	int ret;
 
-	mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_REMAP_BAR_CTRL_OFFSET, &prev_window);
+	 ret = mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_REMAP_BAR_CTRL_OFFSET, &prev_window);
+	 if (ret)
+		 return ret;
 
 	/* Using the last 6 bits for Window 1. Window 2 and 3 are unaffected */
 	curr_window = (prev_window & ~(WINDOW_VALUE_MASK)) | window;
@@ -417,12 +420,16 @@ static int mhi_select_window(struct mhi_controller *mhi_cntrl, u32 addr)
 
 	mhi_write_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_REMAP_BAR_CTRL_OFFSET, curr_window);
 
-	mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_REMAP_BAR_CTRL_OFFSET, &read_val);
+	ret = mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_REMAP_BAR_CTRL_OFFSET, &read_val);
+	if (ret)
+		return ret;
 
 	/* Wait till written value reflects */
 	while((read_val != curr_window) && (retry < 10)) {
 		mdelay(1);
-		mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_REMAP_BAR_CTRL_OFFSET, &read_val);
+		ret = mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_REMAP_BAR_CTRL_OFFSET, &read_val);
+		if (ret)
+			return ret;
 		retry++;
 	}
 
@@ -452,8 +459,10 @@ static int mhi_get_nonce(struct mhi_controller *mhi_cntrl)
 
 	dev_info(dev, "Reading NONCE from Endpoint\n");
 
-	mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_PCIE_LOCAL_REG_PCIE_LOCAL_RSV1,
+	ret = mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, PCIE_PCIE_LOCAL_REG_PCIE_LOCAL_RSV1,
 			&sram_addr);
+	if (ret)
+		return ret;
 	if (sram_addr != 0) {
 		mhi_cntrl->nonce_buf = dma_alloc_coherent(mhi_cntrl->cntrl_dev, NONCE_SIZE,
 							  &mhi_cntrl->nonce_dma_addr, GFP_KERNEL);
@@ -470,7 +479,9 @@ static int mhi_get_nonce(struct mhi_controller *mhi_cntrl)
 		for (i=0; i < NONCE_SIZE; i+=4) {
 			/* Calculate read address based on the Window range and read it */
 			rd_addr = ((sram_addr + i) & WINDOW_RANGE_MASK) + WINDOW_START;
-			mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, rd_addr, &rd_val);
+			ret = mhi_read_reg(mhi_cntrl, mhi_cntrl->regs, rd_addr, &rd_val);
+			if (ret)
+				return ret;
 
 			/* Copy the read value to nonce_buf */
 			memcpy(mhi_cntrl->nonce_buf + i, &rd_val, 4);
-- 
2.34.1

