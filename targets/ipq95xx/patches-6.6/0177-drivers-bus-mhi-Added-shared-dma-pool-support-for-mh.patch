From f8e3fa578a85446b1ad5a284eaadfa0b7bd7dc96 Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Tue, 10 Oct 2023 22:57:43 +0530
Subject: [PATCH 204/500] drivers: bus: mhi: Added shared-dma-pool support for
 mhi_dev

When using default memory for coherent memory allocation without
reservation, memory gets fragmented after several mhi
register/unregister cycles and no contiguous coherent reservation
was possible.

Reserving a dedicated region as shared dma pool for mhi to help
avoid this situation. On RDPs which doesn't reserve this memory,
it will continue to allocate memory from default memory.

Also add a Kconfig MHI_BUS_RESERVED_DMA_POOL and add support for using
the shared-dma-pool for allocs only if it is enabled. Export a DTC flag
for the same config to enable/disable memory reservation based on the
flag.

Signed-off-by: Gokul Sriram Palanisamy <quic_gokulsri@quicinc.com>
Signed-off-by: Praveenkumar I <quic_ipkumar@quicinc.com>
(cherry picked from commit Icf4ca457d69aded53dd1e740222792c20481a11f)

Change-Id: Ic1073b7d87cf27a39fa396f4416ed78cfd592dd9
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 drivers/bus/mhi/host/Kconfig    |  7 ++++
 drivers/bus/mhi/host/boot.c     | 19 +++++-----
 drivers/bus/mhi/host/init.c     | 65 +++++++++++++++++++++++++++++++++
 drivers/bus/mhi/host/internal.h | 54 +++++++++++++++++++++++++++
 scripts/Makefile.lib            |  4 ++
 5 files changed, 139 insertions(+), 10 deletions(-)

diff --git a/drivers/bus/mhi/host/Kconfig b/drivers/bus/mhi/host/Kconfig
index da5cd0c9fc62..c0f61c2b9e69 100644
--- a/drivers/bus/mhi/host/Kconfig
+++ b/drivers/bus/mhi/host/Kconfig
@@ -29,3 +29,10 @@ config MHI_BUS_PCI_GENERIC
 	  This driver provides MHI PCI controller driver for devices such as
 	  Qualcomm SDX55 based PCIe modems.
 
+config MHI_BUS_RESERVED_DMA_POOL
+	bool "MHI reserved DMA pool support"
+	depends on MHI_BUS
+	help
+	  Enable support for declaration and allocations of DMA
+	  buffers for FW image from reserved DMA pool.
+
diff --git a/drivers/bus/mhi/host/boot.c b/drivers/bus/mhi/host/boot.c
index 83651c584aa6..26bbdf18eefd 100644
--- a/drivers/bus/mhi/host/boot.c
+++ b/drivers/bus/mhi/host/boot.c
@@ -316,8 +316,8 @@ void mhi_free_bhie_table(struct mhi_controller *mhi_cntrl,
 	struct mhi_buf *mhi_buf = image_info->mhi_buf;
 
 	for (i = 0; i < image_info->entries; i++, mhi_buf++)
-		dma_free_coherent(mhi_cntrl->cntrl_dev, mhi_buf->len,
-				  mhi_buf->buf, mhi_buf->dma_addr);
+		mhi_fw_free_coherent(mhi_cntrl, mhi_buf->len,
+				     mhi_buf->buf, mhi_buf->dma_addr);
 
 	kfree(image_info->mhi_buf);
 	kfree(image_info);
@@ -353,9 +353,9 @@ int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 			vec_size = sizeof(struct bhi_vec_entry) * i;
 
 		mhi_buf->len = vec_size;
-		mhi_buf->buf = dma_alloc_coherent(mhi_cntrl->cntrl_dev,
-						  vec_size, &mhi_buf->dma_addr,
-						  GFP_KERNEL);
+		mhi_buf->buf = mhi_fw_alloc_coherent(mhi_cntrl, vec_size,
+						     &mhi_buf->dma_addr,
+						     GFP_KERNEL);
 		if (!mhi_buf->buf)
 			goto error_alloc_segment;
 	}
@@ -368,8 +368,8 @@ int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 
 error_alloc_segment:
 	for (--i, --mhi_buf; i >= 0; i--, mhi_buf--)
-		dma_free_coherent(mhi_cntrl->cntrl_dev, mhi_buf->len,
-				  mhi_buf->buf, mhi_buf->dma_addr);
+		mhi_fw_free_coherent(mhi_cntrl, mhi_buf->len,
+				     mhi_buf->buf, mhi_buf->dma_addr);
 
 error_alloc_mhi_buf:
 	kfree(img_info);
@@ -605,8 +605,7 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 	fw_sz = firmware->size;
 
 skip_req_fw:
-	buf = dma_alloc_coherent(mhi_cntrl->cntrl_dev, size, &dma_addr,
-				 GFP_KERNEL);
+	buf = mhi_fw_alloc_coherent(mhi_cntrl, size, &dma_addr, GFP_KERNEL);
 	if (!buf) {
 		release_firmware(firmware);
 		goto error_fw_load;
@@ -615,7 +614,7 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 	/* Download image using BHI */
 	memcpy(buf, fw_data, size);
 	ret = mhi_fw_load_bhi(mhi_cntrl, dma_addr, size);
-	dma_free_coherent(mhi_cntrl->cntrl_dev, size, buf, dma_addr);
+	mhi_fw_free_coherent(mhi_cntrl, size, buf, dma_addr);
 
 	/* Error or in EDL mode, we're done */
 	if (ret) {
diff --git a/drivers/bus/mhi/host/init.c b/drivers/bus/mhi/host/init.c
index f78aefd2d7a3..eb1f75a6dd88 100644
--- a/drivers/bus/mhi/host/init.c
+++ b/drivers/bus/mhi/host/init.c
@@ -8,9 +8,12 @@
 #include <linux/debugfs.h>
 #include <linux/device.h>
 #include <linux/dma-direction.h>
+#include <linux/dma-map-ops.h>
 #include <linux/dma-mapping.h>
 #include <linux/idr.h>
 #include <linux/interrupt.h>
+#include <linux/of_address.h>
+#include <linux/of_reserved_mem.h>
 #include <linux/list.h>
 #include <linux/mhi.h>
 #include <linux/mod_devicetable.h>
@@ -899,6 +902,65 @@ static int parse_config(struct mhi_controller *mhi_cntrl,
 	return ret;
 }
 
+#ifdef CONFIG_MHI_BUS_RESERVED_DMA_POOL
+static void mhi_init_fw_coherent_memory(struct mhi_controller *mhi_cntrl,
+					struct mhi_device *mhi_dev)
+{
+	struct reserved_mem *mhi_rmem = NULL;
+	struct device *dev = &mhi_dev->dev;
+	struct device_node *cma_node;
+	phys_addr_t cma_addr;
+	size_t cma_size;
+	int ret;
+
+	dev->coherent_dma_mask = mhi_cntrl->cntrl_dev->coherent_dma_mask;
+
+	cma_node = of_parse_phandle(mhi_cntrl->cntrl_dev->of_node,
+				    "memory-region", 1);
+	if (!cma_node) {
+		dev_err(mhi_cntrl->cntrl_dev, "mhi coherent pool is not reserved");
+		return;
+	}
+
+	mhi_rmem = of_reserved_mem_lookup(cma_node);
+	of_node_put(cma_node);
+
+	if (!mhi_rmem) {
+		dev_err(mhi_cntrl->cntrl_dev, "Failed to get DMA reserved memory");
+		return;
+	}
+
+	cma_addr = mhi_rmem->base;
+	cma_size = mhi_rmem->size;
+
+	ret = dma_declare_coherent_memory(dev, cma_addr, cma_addr, cma_size);
+	if (ret)
+		dev_err(mhi_cntrl->cntrl_dev, "Failed to declare dma coherent memory");
+	else
+		dev_info(mhi_cntrl->cntrl_dev, "DMA Memory initialized at %pa size 0x%zx",
+			 &cma_addr, cma_size);
+}
+
+static void mhi_deinit_fw_coherent_memory(struct mhi_controller *mhi_cntrl)
+{
+	struct mhi_device *mhi_dev = mhi_cntrl->mhi_dev;
+
+	dma_release_coherent_memory(&mhi_dev->dev);
+	mhi_dev->dev.dma_mem = NULL;
+}
+#else
+static inline
+void mhi_init_fw_coherent_memory(struct mhi_controller *mhi_cntrl,
+				 struct mhi_device *mhi_dev)
+{
+}
+
+static inline
+void mhi_deinit_fw_coherent_memory(struct mhi_controller *mhi_cntrl)
+{
+}
+#endif
+
 int mhi_register_controller(struct mhi_controller *mhi_cntrl,
 			    const struct mhi_controller_config *config)
 {
@@ -1010,6 +1072,7 @@ int mhi_register_controller(struct mhi_controller *mhi_cntrl,
 		goto error_setup_irq;
 	}
 
+	mhi_init_fw_coherent_memory(mhi_cntrl, mhi_dev);
 	mhi_dev->dev_type = MHI_DEVICE_CONTROLLER;
 	mhi_dev->mhi_cntrl = mhi_cntrl;
 	dev_set_name(&mhi_dev->dev, "mhi%d", mhi_cntrl->index);
@@ -1029,6 +1092,7 @@ int mhi_register_controller(struct mhi_controller *mhi_cntrl,
 	return 0;
 
 err_release_dev:
+	mhi_deinit_fw_coherent_memory(mhi_cntrl);
 	put_device(&mhi_dev->dev);
 error_setup_irq:
 	mhi_deinit_free_irq(mhi_cntrl);
@@ -1068,6 +1132,7 @@ void mhi_unregister_controller(struct mhi_controller *mhi_cntrl)
 	}
 	vfree(mhi_cntrl->mhi_chan);
 
+	mhi_deinit_fw_coherent_memory(mhi_cntrl);
 	device_del(&mhi_dev->dev);
 	put_device(&mhi_dev->dev);
 
diff --git a/drivers/bus/mhi/host/internal.h b/drivers/bus/mhi/host/internal.h
index 0e508521e05d..49a8ed6b759d 100644
--- a/drivers/bus/mhi/host/internal.h
+++ b/drivers/bus/mhi/host/internal.h
@@ -358,6 +358,60 @@ void mhi_deinit_chan_ctxt(struct mhi_controller *mhi_cntrl,
 void mhi_reset_chan(struct mhi_controller *mhi_cntrl,
 		    struct mhi_chan *mhi_chan);
 
+#ifdef CONFIG_MHI_BUS_RESERVED_DMA_POOL
+static inline void *mhi_fw_alloc_coherent(struct mhi_controller *mhi_cntrl,
+					  size_t size, dma_addr_t *dma_handle,
+					  gfp_t gfp)
+{
+	/* DMA pool is reserved for coherent allocations of size SZ_512K
+	 * (mhi_cntrl->seg_len) to avoid fragmentation and always ensure
+	 * allocations of SZ_512K succeeds.
+	 * Allocations of lower order from the reserved memory would lead to
+	 * fragmentation on multiple alloc/frees.
+	 * So use dma_alloc_coherent from mhi_cntrl->cntrl_dev for allocations
+	 * lower than mhi_cntrl->seg_len
+	 */
+	if (size < mhi_cntrl->seg_len) {
+		return dma_alloc_coherent(mhi_cntrl->cntrl_dev,
+					  size, dma_handle, gfp);
+	} else {
+		return dma_alloc_coherent(&mhi_cntrl->mhi_dev->dev,
+					  size, dma_handle, gfp);
+	}
+}
+
+static inline void mhi_fw_free_coherent(struct mhi_controller *mhi_cntrl,
+					size_t size, void *vaddr,
+					dma_addr_t dma_handle)
+{
+	/* Allocs of size lower than mhi_cntrl->seg_len is done from
+	 * mhi_cntrl->cntrl_dev and higher allocations are done from
+	 * reserved memory of mhi_dev->dev.
+	 */
+	if (size < mhi_cntrl->seg_len) {
+		dma_free_coherent(mhi_cntrl->cntrl_dev, size, vaddr,
+				  dma_handle);
+	} else {
+		dma_free_coherent(&mhi_cntrl->mhi_dev->dev, size, vaddr,
+				  dma_handle);
+	}
+}
+#else
+static inline void *mhi_fw_alloc_coherent(struct mhi_controller *mhi_cntrl,
+					  size_t size, dma_addr_t *dma_handle,
+					  gfp_t gfp)
+{
+	return dma_alloc_coherent(mhi_cntrl->cntrl_dev, size, dma_handle, gfp);
+}
+
+static inline void mhi_fw_free_coherent(struct mhi_controller *mhi_cntrl,
+					size_t size, void *vaddr,
+					dma_addr_t dma_handle)
+{
+	dma_free_coherent(mhi_cntrl->cntrl_dev, size, vaddr, dma_handle);
+}
+#endif
+
 /* Event processing methods */
 void mhi_ctrl_ev_task(unsigned long data);
 void mhi_ev_task(unsigned long data);
diff --git a/scripts/Makefile.lib b/scripts/Makefile.lib
index be0b034a7a39..f9dae8180427 100644
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -265,6 +265,10 @@ ifeq ($(CONFIG_QCOM_NON_SECURE_PIL),y)
 dtc_cpp_flags += -D __QCOM_NON_SECURE_PIL__
 endif
 
+ifeq ($(CONFIG_MHI_BUS_RESERVED_DMA_POOL),y)
+dtc_cpp_flags += -D __MHI_BUS_RESERVED_DMA_POOL__
+endif
+
 ifdef CONFIG_OBJTOOL
 
 objtool := $(objtree)/tools/objtool/objtool
-- 
2.34.1

