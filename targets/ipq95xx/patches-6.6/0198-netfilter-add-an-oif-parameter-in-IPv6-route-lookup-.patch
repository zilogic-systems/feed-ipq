From 757aed7fcf50687fc02fb75a3b3f2cead72f3515 Mon Sep 17 00:00:00 2001
From: Ken Zhu <guigenz@codeaurora.org>
Date: Tue, 17 Dec 2019 13:10:06 -0800
Subject: [PATCH 144/500] netfilter: add an oif parameter in IPv6 route lookup
 of TCP RST packet.

TCP RST packet might get a different output device on the route lookup
than the incoming device. Passing an oif parameter could help the route
lookup more precisely in routing case.
Reserve LL_MAX_HEADER space in the skb data in case the bridge device
has different length of  mac header on transmitting later.
Call trace:
	[<ffffffc000591aac>] skb_panic+0x64/0x68
	[<ffffffc000591b10>] skb_push+0x60/0x70
	[<ffffffc0005c8ff8>] eth_header+0x40/0xd0
	[<ffffffbffc8ed5a0>] nf_send_reset6+0x260/0x2c8 [nf_reject_ipv6]
	[<ffffffbffc8f4108>] 0xffffffbffc8f4108
	[<ffffffbffc8bb48c>] ip6t_do_table+0x304/0x560 [ip6_tables]
	[<ffffffbffc8c5030>] 0xffffffbffc8c5030
	[<ffffffc0005da65c>] nf_iterate+0x68/0x90
	[<ffffffc0005da6cc>] nf_hook_slow+0x48/0xc8
	[<ffffffc00064541c>] ip6_forward+0x710/0x7dc
	[<ffffffc000646dcc>] ip6_rcv_finish+0x94/0xac
	[<ffffffc00064765c>] ipv6_rcv+0x42c/0x4bc
	[<ffffffc0005a341c>] __netif_receive_skb_core+0x5f0/0x8bc
	[<ffffffc0005a3e54>] __netif_receive_skb+0x38/0x84
	[<ffffffc0005a3f04>] netif_receive_skb_internal+0x64/0xb0
	[<ffffffc0005a3fe0>] netif_receive_skb+0x90/0xc4
	[<ffffffc000687dd0>] br_netif_receive_skb+0x40/0x4c
	[<ffffffc000687e64>] br_pass_frame_up+0x88/0xe0
	[<ffffffc000688410>] br_handle_frame_finish+0x4f4/0x520
	[<ffffffc000695df8>] br_nf_pre_routing_finish_ipv6+0x21c/0x278
	[<ffffffc000696248>] br_nf_pre_routing_ipv6+0xec/0x144
	[<ffffffc000695a0c>] br_nf_pre_routing+0x150/0x320
	[<ffffffc0005da65c>] nf_iterate+0x68/0x90
	[<ffffffc0005da6cc>] nf_hook_slow+0x48/0xc8
	[<ffffffc000688784>] br_handle_frame+0x348/0x37c
	[<ffffffc0005a32a4>] __netif_receive_skb_core+0x478/0x8bc
	[<ffffffc0005a3e54>] __netif_receive_skb+0x38/0x84
	[<ffffffc0005a3f04>] netif_receive_skb_internal+0x64/0xb0
	[<ffffffc0005a48f4>] napi_gro_receive+0xcc/0x178
	[<ffffffbffc6443f8>] nss_dp_receive+0x78/0x98 [qca_nss_dp]
	[<ffffffbffc6fce38>] nss_core_send_buffer+0x2294/0x25ac [qca_nss_drv]
	[<ffffffbffc6fd180>] nss_core_handle_napi_queue+0x30/0x64 [qca_nss_drv]
	[<ffffffc0005a4edc>] net_rx_action+0x10c/0x334
	[<ffffffc00009ecc8>] __do_softirq+0x1c8/0x3bc
	[<ffffffc00009f188>] irq_exit+0x8c/0xe4
	[<ffffffc0000dea4c>] __handle_domain_irq+0x98/0xbc

Change-Id: I1fa55ca59edf72b1d170e1757275d7dc86d27d6a
Signed-off-by: Ken Zhu <guigenz@codeaurora.org>
---
 net/ipv6/netfilter/nf_reject_ipv6.c | 17 ++++++++++++-----
 1 file changed, 12 insertions(+), 5 deletions(-)

diff --git a/net/ipv6/netfilter/nf_reject_ipv6.c b/net/ipv6/netfilter/nf_reject_ipv6.c
index 58ccdb08c0fd..06c80f779a9b 100644
--- a/net/ipv6/netfilter/nf_reject_ipv6.c
+++ b/net/ipv6/netfilter/nf_reject_ipv6.c
@@ -282,7 +282,7 @@ void nf_send_reset6(struct net *net, struct sock *sk, struct sk_buff *oldskb,
 	struct sk_buff *nskb;
 	struct tcphdr _otcph;
 	const struct tcphdr *otcph;
-	unsigned int otcplen, hh_len;
+	unsigned int otcplen;
 	const struct ipv6hdr *oip6h = ipv6_hdr(oldskb);
 	struct ipv6hdr *ip6h;
 	struct dst_entry *dst = NULL;
@@ -312,7 +312,15 @@ void nf_send_reset6(struct net *net, struct sock *sk, struct sk_buff *oldskb,
 		skb_dst_set(oldskb, dst);
 	}
 
-	fl6.flowi6_oif = l3mdev_master_ifindex(skb_dst(oldskb)->dev);
+	/* For forwarding packet, the skb->skb_iif is the incoming device's
+	 * ifindex, but it is 0 for local out skb, use dst->dev's ifindex
+	 * instead.
+	 */
+	if (oldskb->skb_iif != 0)
+		fl6.flowi6_oif = oldskb->skb_iif;
+	else
+		fl6.flowi6_oif = l3mdev_master_ifindex(skb_dst(oldskb)->dev);
+
 	fl6.flowi6_mark = IP6_REPLY_MARK(net, oldskb->mark);
 	security_skb_classify_flow(oldskb, flowi6_to_flowi_common(&fl6));
 	dst = ip6_route_output(net, NULL, &fl6);
@@ -324,8 +332,7 @@ void nf_send_reset6(struct net *net, struct sock *sk, struct sk_buff *oldskb,
 	if (IS_ERR(dst))
 		return;
 
-	hh_len = (dst->dev->hard_header_len + 15)&~15;
-	nskb = alloc_skb(hh_len + 15 + dst->header_len + sizeof(struct ipv6hdr)
+	nskb = alloc_skb(LL_MAX_HEADER + sizeof(struct ipv6hdr)
 			 + sizeof(struct tcphdr) + dst->trailer_len,
 			 GFP_ATOMIC);
 
@@ -339,7 +346,7 @@ void nf_send_reset6(struct net *net, struct sock *sk, struct sk_buff *oldskb,
 
 	nskb->mark = fl6.flowi6_mark;
 
-	skb_reserve(nskb, hh_len + dst->header_len);
+	skb_reserve(nskb, LL_MAX_HEADER);
 	ip6h = nf_reject_ip6hdr_put(nskb, oldskb, IPPROTO_TCP,
 				    ip6_dst_hoplimit(dst));
 	nf_reject_ip6_tcphdr_put(nskb, oldskb, otcph, otcplen);
-- 
2.34.1

