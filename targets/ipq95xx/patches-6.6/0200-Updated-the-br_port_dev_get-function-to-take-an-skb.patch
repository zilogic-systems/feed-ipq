From c1cf7f080f65c7da040280ce72edf3aec80d6e5f Mon Sep 17 00:00:00 2001
From: Murat Sezgin <msezgin@codeaurora.org>
Date: Wed, 11 Mar 2020 11:20:40 -0700
Subject: [PATCH 214/500] Updated the br_port_dev_get function to take an skb

- If the skb is non-NULL, call the br_port_dev_get_hook (if it exists),
  to try and fetch the port.
- If there is no skb or no hook, or the hook returns NULL, lookup in FDB

Change-Id: I60df83dfa7a07b39cd30833cba0d4397859711f4
Signed-off-by: Murat Sezgin <msezgin@codeaurora.org>
---
 include/linux/if_bridge.h |  9 ++++++++-
 net/bridge/br_if.c        | 38 ++++++++++++++++++++++++++++++++++----
 2 files changed, 42 insertions(+), 5 deletions(-)

diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index 7067cfcce803..a29cbc16d08c 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -72,7 +72,8 @@ void brioctl_set(int (*hook)(struct net *net, struct net_bridge *br,
 int br_ioctl_call(struct net *net, struct net_bridge *br, unsigned int cmd,
 		  struct ifreq *ifr, void __user *uarg);
 extern struct net_device *br_port_dev_get(struct net_device *dev,
-					  unsigned char *addr);
+					  unsigned char *addr,
+					  struct sk_buff *skb);
 extern void br_refresh_fdb_entry(struct net_device *dev, const char *addr);
 extern void br_dev_update_stats(struct net_device *dev,
 				struct rtnl_link_stats64 *nlstats);
@@ -223,4 +224,10 @@ static inline clock_t br_get_ageing_time(const struct net_device *br_dev)
 }
 #endif
 
+typedef struct net_bridge_port *br_port_dev_get_hook_t(struct net_device *dev,
+		struct sk_buff *skb);
+extern br_port_dev_get_hook_t __rcu *br_port_dev_get_hook;
+
+typedef void (br_notify_hook_t)(int group, int event, const void *ptr);
+extern br_notify_hook_t __rcu *br_notify_hook;
 #endif
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index aa7a5798bd34..001c291ed539 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -26,6 +26,10 @@
 
 #include "br_private.h"
 
+/* Hook for external forwarding logic */
+br_port_dev_get_hook_t __rcu *br_port_dev_get_hook __read_mostly;
+EXPORT_SYMBOL_GPL(br_port_dev_get_hook);
+
 /*
  * Determine initial path cost based on speed.
  * using recommendations from 802.1d standard
@@ -777,13 +781,17 @@ bool br_port_flag_is_set(const struct net_device *dev, unsigned long flag)
 EXPORT_SYMBOL_GPL(br_port_flag_is_set);
 
 /* br_port_dev_get()
- *      Using the given addr, identify the port to which it is reachable,
- *      returing a reference to the net device associated with that port.
+ *      If a skb is provided, and the br_port_dev_get_hook_t hook exists,
+ *      use that to try and determine the egress port for that skb.
+ *      If not, or no egress port could be determined, use the given addr
+ *      to identify the port to which it is reachable,
+ *	returing a reference to the net device associated with that port.
  *
  * NOTE: Return NULL if given dev is not a bridge or the mac has no
  * associated port.
  */
-struct net_device *br_port_dev_get(struct net_device *dev, unsigned char *addr)
+struct net_device *br_port_dev_get(struct net_device *dev, unsigned char *addr,
+				   struct sk_buff *skb)
 {
 	struct net_bridge_fdb_entry *fdbe;
 	struct net_bridge *br;
@@ -793,15 +801,37 @@ struct net_device *br_port_dev_get(struct net_device *dev, unsigned char *addr)
 	if (!(dev->priv_flags & IFF_EBRIDGE))
 		return NULL;
 
+	rcu_read_lock();
+
+	/* If the hook exists and the skb isn't NULL, try and get the port */
+	if (skb) {
+		br_port_dev_get_hook_t *port_dev_get_hook;
+
+		port_dev_get_hook = rcu_dereference(br_port_dev_get_hook);
+		if (port_dev_get_hook) {
+			struct net_bridge_port *pdst =
+				__br_get(port_dev_get_hook, NULL, dev, skb);
+			if (pdst) {
+				dev_hold(pdst->dev);
+				netdev = pdst->dev;
+				goto out;
+			}
+		}
+	}
+
+	/* Either there is no hook, or can't
+	 * determine the port to use - fall back to using FDB
+	 */
+
 	br = netdev_priv(dev);
 
 	/* Lookup the fdb entry and get reference to the port dev */
-	rcu_read_lock();
 	fdbe = br_fdb_find_rcu(br, addr, 0);
 	if (fdbe && fdbe->dst) {
 		netdev = fdbe->dst->dev; /* port device */
 		dev_hold(netdev);
 	}
+out:
 	rcu_read_unlock();
 	return netdev;
 }
-- 
2.34.1

