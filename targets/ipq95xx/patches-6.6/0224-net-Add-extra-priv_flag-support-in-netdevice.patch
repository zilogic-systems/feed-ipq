From 5c907ac28f19fdef880d56e0ffc15a0d6369c372 Mon Sep 17 00:00:00 2001
From: Murat Sezgin <quic_msezgin@quicinc.com>
Date: Thu, 18 May 2023 08:47:34 -0700
Subject: [PATCH 181/500] net: Add extra priv_flag support in netdevice

This patch adds a flag in struct net_device which
is an extension to priv_flags and is used to
check the type of device.

Change-Id: Ibb5a3f0c706e1b169b848aed7004aa4ea6d57069
Signed-off-by: Pavithra R <pavir@codeaurora.org>

Add GRE std support in device tree and priv_flags

Added dts support and priv flags support for GRE and
to check the type of device

Change-Id: Ib05a32e9e5458c724c182187362116338d767169
Signed-off-by: ratheesh kannoth <rkannoth@codeaurora.org>
Signed-off-by: Pavithra R <pavir@codeaurora.org>

drivers: ifb: Add flag to identify the IFB interface.

Add IFB flag in netdevice's ext priv flags and define an API
to let other modules find out if the netdev is IFB or not.

Change-Id: I6dbdae521240b4a991069c2330d893ff38aec68d
Signed-off-by: Manish Verma <maniverm@codeaurora.org>
Signed-off-by: pavir <pavir@codeaurora.org>

net: add IFF_EXT_MAPT flag in net_device priv_flags_ext

Add IFF_EXT_MAPT flag in priv_flags_ext for MAP-T device.

Change-Id: I8aa1715c4b9c62b88eee1b40412cf4e734b2a337
Signed-off-by: Suruchi Agarwal <quic_suruchia@quicinc.com>
Signed-off-by: Murat Sezgin <quic_msezgin@quicinc.com>
---
 drivers/net/ifb.c         |  1 +
 include/linux/netdevice.h | 35 ++++++++++++++++++++++++++++++++++-
 net/ipv4/ip_gre.c         |  2 +-
 net/ipv6/ip6_gre.c        |  4 +---
 4 files changed, 37 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ifb.c b/drivers/net/ifb.c
index 78253ad57b2e..7c25b781b0b6 100644
--- a/drivers/net/ifb.c
+++ b/drivers/net/ifb.c
@@ -326,6 +326,7 @@ static void ifb_setup(struct net_device *dev)
 	dev->flags |= IFF_NOARP;
 	dev->flags &= ~IFF_MULTICAST;
 	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
+	dev->priv_flags_ext |= IFF_EXT_IFB;	/* Mark the device as an IFB device. */
 	netif_keep_dst(dev);
 	eth_hw_addr_random(dev);
 	dev->needs_free_netdev = true;
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 23baf8c4fc48..cd3b5c4d727d 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1736,6 +1736,32 @@ enum netdev_priv_flags {
 	IFF_SEE_ALL_HWTSTAMP_REQUESTS	= BIT_ULL(33),
 };
 
+/**
+ * enum netdev_priv_flags_ext - &struct net_device priv_flags_ext
+ *
+ * These flags are used to check for device type and can be
+ * set and used by the drivers
+ *
+ * @IFF_EXT_TUN_TAP: device is a TUN/TAP device
+ * @IFF_EXT_PPP_L2TPV2: device is a L2TPV2 device
+ * @IFF_EXT_PPP_L2TPV3: device is a L2TPV3 device
+ * @IFF_EXT_PPP_PPTP: device is a PPTP device
+ * @IFF_EXT_GRE_V4_TAP: device is a GRE IPv4 TAP device
+ * @IFF_EXT_GRE_V6_TAP: device is a GRE IPv6 TAP device
+ * @IFF_EXT_IFB: device is an IFB device
+ * @IFF_EXT_MAPT: device is an MAPT device
+ */
+enum netdev_priv_flags_ext {
+	IFF_EXT_TUN_TAP			= 1<<0,
+	IFF_EXT_PPP_L2TPV2		= 1<<1,
+	IFF_EXT_PPP_L2TPV3		= 1<<2,
+	IFF_EXT_PPP_PPTP		= 1<<3,
+	IFF_EXT_GRE_V4_TAP		= 1<<4,
+	IFF_EXT_GRE_V6_TAP		= 1<<5,
+	IFF_EXT_IFB				= 1<<6,
+	IFF_EXT_MAPT			= 1<<7,
+};
+
 #define IFF_802_1Q_VLAN			IFF_802_1Q_VLAN
 #define IFF_EBRIDGE			IFF_EBRIDGE
 #define IFF_BONDING			IFF_BONDING
@@ -1848,6 +1874,8 @@ enum netdev_ml_priv_type {
  *	@xdp_features:	XDP capability supported by the device
  *	@priv_flags:	Like 'flags' but invisible to userspace,
  *			see if.h for the definitions
+ *	@priv_flags_ext:	Extension for 'priv_flags'
+ *
  *	@gflags:	Global flags ( kept as legacy )
  *	@padded:	How much padding added by alloc_netdev()
  *	@operstate:	RFC2863 operstate
@@ -2089,6 +2117,7 @@ struct net_device {
 	unsigned int		flags;
 	xdp_features_t		xdp_features;
 	unsigned long long	priv_flags;
+	unsigned int		priv_flags_ext;
 	const struct net_device_ops *netdev_ops;
 	const struct xdp_metadata_ops *xdp_metadata_ops;
 	int			ifindex;
@@ -4208,7 +4237,6 @@ static inline bool netif_dormant(const struct net_device *dev)
 	return test_bit(__LINK_STATE_DORMANT, &dev->state);
 }
 
-
 /**
  *	netif_testing_on - mark device as under test.
  *	@dev: network device
@@ -5130,6 +5158,11 @@ static inline bool netif_is_failover_slave(const struct net_device *dev)
 	return dev->priv_flags & IFF_FAILOVER_SLAVE;
 }
 
+static inline bool netif_is_ifb_dev(const struct net_device *dev)
+{
+	return dev->priv_flags_ext & IFF_EXT_IFB;
+}
+
 /* This device needs to keep skb dst for qdisc enqueue or ndo_start_xmit() */
 static inline void netif_keep_dst(struct net_device *dev)
 {
diff --git a/net/ipv4/ip_gre.c b/net/ipv4/ip_gre.c
index 22a26d1d29a0..dd57a8823a46 100644
--- a/net/ipv4/ip_gre.c
+++ b/net/ipv4/ip_gre.c
@@ -820,7 +820,6 @@ static int ipgre_tunnel_ctl(struct net_device *dev, struct ip_tunnel_parm *p,
    It allows to construct virtual multiprotocol broadcast "LAN"
    over the Internet, provided multicast routing is tuned.
 
-
    I have no idea was this bicycle invented before me,
    so that I had to set ARPHRD_IPGRE to a random value.
    I have an impression, that Cisco could make something similar,
@@ -1329,6 +1328,7 @@ static void ipgre_tap_setup(struct net_device *dev)
 	dev->netdev_ops	= &gre_tap_netdev_ops;
 	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 	dev->priv_flags	|= IFF_LIVE_ADDR_CHANGE;
+	dev->priv_flags_ext	|= IFF_EXT_GRE_V4_TAP;
 	ip_tunnel_setup(dev, gre_tap_net_id);
 }
 
diff --git a/net/ipv6/ip6_gre.c b/net/ipv6/ip6_gre.c
index 070d87abf7c0..bc32183decb6 100644
--- a/net/ipv6/ip6_gre.c
+++ b/net/ipv6/ip6_gre.c
@@ -53,7 +53,6 @@
 #include <net/erspan.h>
 #include <net/dst_metadata.h>
 
-
 static bool log_ecn_error = true;
 module_param(log_ecn_error, bool, 0644);
 MODULE_PARM_DESC(log_ecn_error, "Log packets received with corrupted ECN");
@@ -414,7 +413,6 @@ static void ip6gre_tunnel_uninit(struct net_device *dev)
 	netdev_put(dev, &t->dev_tracker);
 }
 
-
 static int ip6gre_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 		       u8 type, u8 code, int offset, __be32 info)
 {
@@ -1614,7 +1612,6 @@ static int __net_init ip6gre_init_net(struct net *net)
 	 */
 	ign->fb_tunnel_dev->features |= NETIF_F_NETNS_LOCAL;
 
-
 	ip6gre_fb_tunnel_init(ign->fb_tunnel_dev);
 	ign->fb_tunnel_dev->rtnl_link_ops = &ip6gre_link_ops;
 
@@ -1936,6 +1933,7 @@ static void ip6gre_tap_setup(struct net_device *dev)
 
 	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 	dev->priv_flags |= IFF_LIVE_ADDR_CHANGE;
+	dev->priv_flags_ext |= IFF_EXT_GRE_V6_TAP;
 	netif_keep_dst(dev);
 }
 
-- 
2.34.1

