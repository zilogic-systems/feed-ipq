From 22f12d0be86aa011f3007ff6910e8a13826b32d3 Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Fri, 12 May 2023 14:23:37 +0530
Subject: [PATCH 295/500] firmware: qcom_scm: add the necessary SCM calls to
 enable TZ Log driver

Change-Id: I8ef3b88645f64df7d87ebf9e85b319933359543b
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 164 +++++++++++++++++++++++++
 drivers/firmware/qcom_scm.h            |   8 ++
 include/linux/firmware/qcom/qcom_scm.h |  13 ++
 3 files changed, 185 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 4ea18baebb42..a52a5ffdfe9a 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -40,6 +40,8 @@ struct qcom_scm {
 	int scm_vote_count;
 
 	u64 dload_mode_addr;
+	u32 hvc_log_cmd_id;
+	u32 smmu_state_cmd_id;
 };
 
 struct qcom_scm_current_perm_info {
@@ -1609,6 +1611,159 @@ static irqreturn_t qcom_scm_irq_handler(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
+int qti_scm_is_tz_log_encryption_supported(void)
+{
+	int ret;
+	ret = __qcom_scm_is_call_available(__scm->dev, QCOM_SCM_SVC_BOOT,
+					   QCOM_SCM_IS_TZ_LOG_ENCRYPTED);
+
+	return (ret == 1) ? 1 : 0;
+}
+EXPORT_SYMBOL_GPL(qti_scm_is_tz_log_encryption_supported);
+
+int qti_scm_is_tz_log_encrypted(void)
+{
+	int ret;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_BOOT,
+		.cmd = QCOM_SCM_IS_TZ_LOG_ENCRYPTED,
+		.owner = ARM_SMCCC_OWNER_TRUSTED_OS,
+		.arginfo = QCOM_SCM_ARGS(0),
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	return ret ? : res.result[0];
+}
+EXPORT_SYMBOL_GPL(qti_scm_is_tz_log_encrypted);
+
+int qti_scm_get_encrypted_tz_log(void *ker_buf, u32 buf_len, u32 log_id)
+{
+	int ret;
+	dma_addr_t log_buf;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_BOOT,
+		.cmd = QCOM_SCM_GET_TZ_LOG_ENCRYPTED,
+		.owner = ARM_SMCCC_OWNER_TRUSTED_OS,
+	};
+
+	log_buf = dma_map_single(__scm->dev, ker_buf, buf_len, DMA_FROM_DEVICE);
+	ret = dma_mapping_error(__scm->dev, log_buf);
+
+	if (ret) {
+		dev_err(__scm->dev, "DMA Mapping error: %d\n", ret);
+		return ret;
+	}
+	desc.args[0] = log_buf;
+	desc.args[1] = buf_len;
+	desc.args[2] = log_id;
+	desc.arginfo = QCOM_SCM_ARGS(3, QCOM_SCM_RW, QCOM_SCM_VAL, QCOM_SCM_VAL);
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	dma_unmap_single(__scm->dev, log_buf, buf_len, DMA_FROM_DEVICE);
+
+	return ret ? : res.result[0];
+}
+EXPORT_SYMBOL_GPL(qti_scm_get_encrypted_tz_log);
+
+/**
+ * qti_scm_tz_log() - Get trustzone diag log
+ * ker_buf: kernel buffer to store the diag log
+ * buf_len: kernel buffer length
+ *
+ * Return negative errno on failure or 0 on success. Diag log will
+ * be present in the kernel buffer passed.
+ */
+int qti_scm_tz_log(void *ker_buf, u32 buf_len)
+{
+	return __qti_scm_tz_hvc_log(__scm->dev, QCOM_SCM_SVC_INFO,
+				     QTI_SCM_TZ_DIAG_CMD, ker_buf, buf_len);
+}
+EXPORT_SYMBOL_GPL(qti_scm_tz_log);
+
+/**
+ * qti_scm_hvc_log() - Get hypervisor diag log
+ * ker_buf: kernel buffer to store the diag log
+ * buf_len: kernel buffer length
+ *
+ * Return negative errno on failure or 0 on success. Diag log will
+ * be present in the kernel buffer passed.
+ */
+int qti_scm_hvc_log(void *ker_buf, u32 buf_len)
+{
+	return __qti_scm_tz_hvc_log(__scm->dev, QCOM_SCM_SVC_INFO,
+				    __scm->hvc_log_cmd_id, ker_buf, buf_len);
+}
+EXPORT_SYMBOL_GPL(qti_scm_hvc_log);
+/**
+ * __qti_scm_tz_hvc_log() - Get trustzone diag log or hypervisor diag log
+ * @svc_id: SCM service id
+ * @cmd_id: SCM command id
+ * ker_buf: kernel buffer to store the diag log
+ * buf_len: kernel buffer length
+ *
+ * This function can be used to get either the trustzone diag log
+ * or the hypervisor diag log based on the command id passed to this
+ * function.
+ */
+
+int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
+			 void *ker_buf, u32 buf_len)
+{
+	int ret;
+	dma_addr_t dma_buf;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = svc_id,
+		.cmd = cmd_id,
+		.owner = ARM_SMCCC_OWNER_SIP,
+		.arginfo = QCOM_SCM_ARGS(2, QCOM_SCM_RW, QCOM_SCM_VAL),
+	};
+
+	dma_buf = dma_map_single(__scm->dev, ker_buf, buf_len, DMA_FROM_DEVICE);
+
+	ret = dma_mapping_error(__scm->dev, dma_buf);
+	if (ret != 0) {
+		pr_err("DMA Mapping Error : %d\n", ret);
+		return ret;
+	}
+
+	desc.args[0] = dma_buf;
+	desc.args[1] = buf_len;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	dma_unmap_single(__scm->dev, dma_buf, buf_len, DMA_FROM_DEVICE);
+
+	return ret ? : res.result[0];
+}
+
+/**
+ * __qti_scm_get_smmustate () - Get SMMU state
+ * @svc_id: SCM service id
+ * @cmd_id: SCM command id
+ *
+ * Returns 0 - SMMU_DISABLE_NONE
+ *	   1 - SMMU_DISABLE_S2
+ *	   2 - SMMU_DISABLE_ALL on success.
+ *	  -1 - Failure
+ */
+
+int qti_scm_get_smmustate(void)
+{
+	int ret;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_BOOT,
+		.cmd = __scm->smmu_state_cmd_id,
+		.owner = ARM_SMCCC_OWNER_SIP,
+		.arginfo = QCOM_SCM_ARGS(0),
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	return ret ? : res.result[0];
+}
+
 static int qcom_scm_probe(struct platform_device *pdev)
 {
 	struct qcom_scm *scm;
@@ -1623,7 +1778,15 @@ static int qcom_scm_probe(struct platform_device *pdev)
 	if (ret < 0)
 		return ret;
 
-	init_completion(&scm->waitq_comp);
+	ret = of_property_read_u32(pdev->dev.of_node, "hvc-log-cmd-id", &scm->hvc_log_cmd_id);
+	if (ret)
+		scm->hvc_log_cmd_id = QTI_SCM_HVC_DIAG_CMD;
+
+	ret = of_property_read_u32(pdev->dev.of_node, "smmu-state-cmd-id",
+				   &scm->smmu_state_cmd_id);
+	if (ret)
+		scm->smmu_state_cmd_id = QTI_SCM_SMMUSTATE_CMD;
+
 	mutex_init(&scm->scm_bw_lock);
 
 	scm->path = devm_of_icc_get(&pdev->dev, NULL);
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index 7527da6ce5a5..c6dbd980a076 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -77,6 +77,9 @@ extern int scm_legacy_call_atomic(struct device *dev,
 extern int scm_legacy_call(struct device *dev, const struct qcom_scm_desc *desc,
 			   struct qcom_scm_res *res);
 
+extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
+                                void *ker_buf, u32 buf_len);
+
 #define QCOM_SCM_SVC_BOOT		0x01
 #define QCOM_SCM_BOOT_SET_ADDR		0x01
 #define QCOM_SCM_BOOT_TERMINATE_PC	0x02
@@ -88,6 +91,8 @@ extern int scm_legacy_call(struct device *dev, const struct qcom_scm_desc *desc,
 #define QCOM_SCM_BOOT_MC_FLAG_AARCH64	BIT(0)
 #define QCOM_SCM_BOOT_MC_FLAG_COLDBOOT	BIT(1)
 #define QCOM_SCM_BOOT_MC_FLAG_WARMBOOT	BIT(2)
+#define QCOM_SCM_IS_TZ_LOG_ENCRYPTED	0xb
+#define QCOM_SCM_GET_TZ_LOG_ENCRYPTED	0xc
 
 #define QCOM_SCM_SVC_PIL		0x02
 #define QCOM_SCM_PIL_PAS_INIT_IMAGE	0x01
@@ -109,6 +114,9 @@ extern int scm_legacy_call(struct device *dev, const struct qcom_scm_desc *desc,
 #define QCOM_SCM_SVC_INFO		0x06
 #define QCOM_SCM_INFO_IS_CALL_AVAIL	0x01
 #define QCOM_SCM_IS_FEATURE_AVAIL	0x03
+#define QTI_SCM_TZ_DIAG_CMD		0x2
+#define QTI_SCM_HVC_DIAG_CMD		0x7
+#define QTI_SCM_SMMUSTATE_CMD		0x19
 
 #define QCOM_SCM_SVC_MP				0x0c
 #define QCOM_SCM_MP_RESTORE_SEC_CFG		0x02
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index e7162be30d42..9357341f7f4c 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -16,6 +16,11 @@
 #define QCOM_SCM_CPU_PWR_DOWN_L2_OFF	0x1
 #define QCOM_SCM_HDCP_MAX_REQ_CNT	5
 
+#define QTI_TZ_DIAG_LOG_ENCR_ID		0x0
+#define QTI_TZ_QSEE_LOG_ENCR_ID		0x1
+#define QTI_TZ_LOG_NO_UPDATE		-6
+#define QTI_SCM_SVC_FUSE		0x8
+
 struct qcom_scm_hdcp_req {
 	u32 addr;
 	u32 val;
@@ -126,4 +131,12 @@ extern int qcom_scm_lmh_dcvsh(u32 payload_fn, u32 payload_reg, u32 payload_val,
 extern int qcom_scm_lmh_profile_change(u32 profile_id);
 extern bool qcom_scm_lmh_dcvsh_available(void);
 
+extern int qti_scm_is_tz_log_encrypted(void);
+extern int qti_scm_get_encrypted_tz_log(void *ker_buf, u32 buf_len, u32 log_id);
+extern int qti_scm_is_tz_log_encryption_supported(void);
+extern int qti_scm_tz_log(void *ker_buf, u32 buf_len);
+extern int qti_scm_hvc_log(void *ker_buf, u32 buf_len);
+extern int qti_qfprom_show_authenticate(void);
+extern int qti_scm_get_smmustate(void);
+
 #endif
-- 
2.34.1

