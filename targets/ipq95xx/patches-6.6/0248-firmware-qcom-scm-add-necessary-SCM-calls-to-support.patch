From a7b558a195f4818dea6b194f63885236a4746f8d Mon Sep 17 00:00:00 2001
From: Devi Priya <quic_devipriy@quicinc.com>
Date: Mon, 17 Apr 2023 14:11:42 +0530
Subject: [PATCH 296/500] firmware: qcom: scm: add necessary SCM calls to
 support sec-upgrade driver

Below SCM interfaces are added to support sec-upgrade driver

qcom_qfprom_show_authenticate
qcom_qfprom_write_version
qcom_qfprom_read_version
qcom_sec_upgrade_auth
qcom_scm_sec_auth_available
qcom_sec_upgrade_auth_meta_data
qcom_fuseipq_scm_call

Change-Id: Idb52db4df34b4114e276167aedbe6365a37973fd
Signed-off-by: Devi Priya <quic_devipriy@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 176 +++++++++++++++++++++++++
 drivers/firmware/qcom_scm.h            |   5 +
 drivers/platform/Makefile              |   1 +
 include/linux/firmware/qcom/qcom_scm.h |  31 +++++
 4 files changed, 213 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index a52a5ffdfe9a..7121618d90bf 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -1,5 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /* Copyright (c) 2010,2015,2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
  * Copyright (C) 2015 Linaro Ltd.
  */
 #include <linux/platform_device.h>
@@ -1631,6 +1632,64 @@ int qti_scm_is_tz_log_encrypted(void)
 }
 EXPORT_SYMBOL_GPL(qti_scm_is_tz_log_encrypted);
 
+/**
+ * qcom_qfprom_show_authenticate() - Checks if secure boot fuse is enabled
+ */
+int qcom_qfprom_show_authenticate(void)
+{
+	int ret;
+	dma_addr_t auth_phys;
+	void *auth_buf;
+	char buf;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_FUSE,
+		.cmd = QCOM_QFPROM_IS_AUTHENTICATE_CMD,
+		.arginfo = QCOM_SCM_ARGS(2, QCOM_SCM_RO),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	auth_buf = dma_alloc_coherent(__scm->dev, sizeof(buf),
+					&auth_phys, GFP_KERNEL);
+	if (!auth_buf) {
+		dev_err(__scm->dev, "Allocation for auth buffer failed\n");
+		return -ENOMEM;
+	}
+	desc.args[0] = (u64)auth_phys,
+	desc.args[1] = sizeof(char),
+
+	ret = qcom_scm_call(__scm->dev, &desc, NULL);
+	memcpy(&buf, auth_buf, sizeof(char));
+	dma_free_coherent(__scm->dev, sizeof(buf), auth_buf, auth_phys);
+
+	if (ret) {
+		 pr_err("%s: Error in QFPROM read : %d\n", __func__, ret);
+		 return -1;
+	}
+	return buf == 1 ? 1 : 0;
+}
+EXPORT_SYMBOL_GPL(qcom_qfprom_show_authenticate);
+
+int qcom_sec_upgrade_auth(unsigned int scm_cmd_id, unsigned int sw_type,
+				unsigned int img_size, unsigned int load_addr)
+{
+	int ret;
+	struct qcom_scm_res res;
+        struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_BOOT,
+		.cmd = scm_cmd_id,
+		.arginfo = QCOM_SCM_ARGS(3, QCOM_SCM_VAL, QCOM_SCM_VAL,
+                                                                QCOM_SCM_RW),
+                .args[0] = sw_type,
+                .args[1] = img_size,
+                .args[2] = (u64)load_addr,
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	return ret ? : res.result[0];
+}
+EXPORT_SYMBOL_GPL(qcom_sec_upgrade_auth);
+
 int qti_scm_get_encrypted_tz_log(void *ker_buf, u32 buf_len, u32 log_id)
 {
 	int ret;
@@ -1758,6 +1817,123 @@ int qti_scm_get_smmustate(void)
 	return ret ? : res.result[0];
 }
 
+int qcom_fuseipq_scm_call(u32 svc_id, u32 cmd_id,void *cmd_buf, size_t size)
+{
+	int ret;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {0};
+	uint64_t *status;
+	struct fuse_blow *fuse_blow = cmd_buf;
+
+	desc.svc = svc_id;
+	desc.cmd = cmd_id;
+	desc.owner = ARM_SMCCC_OWNER_SIP;
+	desc.args[0] = fuse_blow->address;
+
+	if (fuse_blow->size) {
+		desc.args[1] = fuse_blow->size;
+		desc.arginfo = QCOM_SCM_ARGS(2, QCOM_SCM_RO, QCOM_SCM_VAL);
+	} else {
+		desc.arginfo = QCOM_SCM_ARGS(1, QCOM_SCM_RO);
+	}
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	status = (uint64_t *)fuse_blow->status;
+	*status = res.result[0];
+	return ret;
+}
+EXPORT_SYMBOL_GPL(qcom_fuseipq_scm_call);
+
+/**
+ * qcom_scm_sec_auth_available() - Checks if SEC_AUTH is supported.
+ *
+ * Return true if SEC_AUTH is supported, false if not.
+ */
+bool qcom_scm_sec_auth_available(unsigned int scm_cmd_id)
+{
+	int ret;
+
+	ret = __qcom_scm_is_call_available(__scm->dev, QCOM_SCM_SVC_SEC_AUTH,
+						scm_cmd_id);
+	return ret > 0 ? true : false;
+}
+EXPORT_SYMBOL_GPL(qcom_scm_sec_auth_available);
+
+int qcom_sec_upgrade_auth_meta_data(unsigned int scm_cmd_id,unsigned int sw_type,
+					unsigned int img_size,unsigned int load_addr,
+					void* hash_addr,unsigned int hash_size)
+{
+	int ret;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_BOOT,
+		.cmd = scm_cmd_id,
+		.arginfo = QCOM_SCM_ARGS(5, QCOM_SCM_VAL, QCOM_SCM_RW, QCOM_SCM_VAL,
+							   QCOM_SCM_RW, QCOM_SCM_VAL),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+	dma_addr_t hash_address;
+
+	hash_address = dma_map_single(__scm->dev, hash_addr, hash_size, DMA_FROM_DEVICE);
+
+	ret = dma_mapping_error(__scm->dev, hash_address);
+	if (ret != 0) {
+		pr_err("%s: DMA Mapping Error : %d\n", __func__, ret);
+		return ret;
+	}
+	desc.args[0] = sw_type;
+	desc.args[1] = (u64)load_addr;
+	desc.args[2] = img_size;
+	desc.args[3] = hash_address;
+	desc.args[4] = hash_size;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	dma_unmap_single(__scm->dev, hash_address, hash_size, DMA_FROM_DEVICE);
+
+	return ret ? : res.result[0];
+}
+EXPORT_SYMBOL_GPL(qcom_sec_upgrade_auth_meta_data);
+
+int qcom_qfprom_write_version(uint32_t sw_type, uint32_t value, uint32_t qfprom_ret_ptr)
+{
+	int ret;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_FUSE,
+		.cmd = QCOM_QFPROM_ROW_WRITE_CMD,
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	return ret ? : res.result[0];
+}
+EXPORT_SYMBOL_GPL(qcom_qfprom_write_version);
+
+int qcom_qfprom_read_version(uint32_t sw_type, uint32_t value, uint32_t qfprom_ret_ptr)
+{
+	int ret;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_FUSE,
+		.cmd = QCOM_QFPROM_ROW_READ_CMD,
+		.arginfo = QCOM_SCM_ARGS(5, QCOM_SCM_VAL, QCOM_SCM_RW, QCOM_SCM_VAL,
+						QCOM_SCM_RW, QCOM_SCM_VAL),
+		.args[0] = sw_type,
+		.args[1] = (u64)value,
+		.args[2] = sizeof(uint32_t),
+		.args[3] = (u64)qfprom_ret_ptr,
+		.args[4] = sizeof(uint32_t),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	return ret ? : res.result[0];
+}
+EXPORT_SYMBOL_GPL(qcom_qfprom_read_version);
+
 static int qcom_scm_probe(struct platform_device *pdev)
 {
 	struct qcom_scm *scm;
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index c6dbd980a076..eb35f49da0ef 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -1,5 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0-only */
 /* Copyright (c) 2010-2015,2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
  */
 #ifndef __QCOM_SCM_INT_H
 #define __QCOM_SCM_INT_H
@@ -100,6 +101,10 @@ extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 #define QCOM_SCM_PIL_PAS_AUTH_AND_RESET	0x05
 #define QCOM_SCM_PIL_PAS_SHUTDOWN	0x06
 #define QCOM_SCM_PIL_PAS_IS_SUPPORTED	0x07
+#define QCOM_QFPROM_IS_AUTHENTICATE_CMD 0x07
+#define QCOM_QFPROM_ROW_READ_CMD        0x08
+#define QCOM_QFPROM_ROW_WRITE_CMD       0x09
+#define QCOM_SCM_SVC_SEC_AUTH           0x01
 #define QCOM_SCM_PIL_PAS_MSS_RESET	0x0a
 
 #define QCOM_SCM_SVC_UTIL		0x03
diff --git a/drivers/platform/Makefile b/drivers/platform/Makefile
index 274ffaf2115e..117c302dcedf 100644
--- a/drivers/platform/Makefile
+++ b/drivers/platform/Makefile
@@ -12,3 +12,4 @@ obj-$(CONFIG_GOLDFISH)		+= goldfish/
 obj-$(CONFIG_CHROME_PLATFORMS)	+= chrome/
 obj-$(CONFIG_SURFACE_PLATFORMS)	+= surface/
 obj-$(CONFIG_MIKROTIK)		+= mikrotik/
+obj-$(CONFIG_ARCH_QCOM)		+= ipq/
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index 9357341f7f4c..6313df0a0242 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -1,5 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0-only */
 /* Copyright (c) 2010-2015, 2018-2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
  * Copyright (C) 2015 Linaro Ltd.
  */
 #ifndef __QCOM_SCM_H
@@ -31,6 +32,12 @@ struct qcom_scm_vmperm {
 	int perm;
 };
 
+struct fuse_blow {
+	dma_addr_t address;
+	size_t size;
+	unsigned long *status;
+};
+
 enum qcom_scm_ocmem_client {
 	QCOM_SCM_OCMEM_UNUSED_ID = 0x0,
 	QCOM_SCM_OCMEM_GRAPHICS_ID,
@@ -64,6 +71,23 @@ enum qcom_scm_ice_cipher {
 #define QCOM_SCM_PERM_RW (QCOM_SCM_PERM_READ | QCOM_SCM_PERM_WRITE)
 #define QCOM_SCM_PERM_RWX (QCOM_SCM_PERM_RW | QCOM_SCM_PERM_EXEC)
 
+#define FUSEPROV_SUCCESS           0x0
+#define QCOM_SCM_SVC_FUSE          0x8
+#define FUSEPROV_INVALID_HASH      0x9
+#define FUSEPROV_SECDAT_LOCK_BLOWN 0xB
+#define QCOM_KERNEL_AUTH_CMD       0x15
+#define TZ_BLOW_FUSE_SECDAT        0x20
+#define QCOM_KERNEL_META_AUTH_CMD  0x23
+
+extern int qcom_fuseipq_scm_call(u32 svc_id, u32 cmd_id,
+				 void *cmd_buf, size_t size);
+extern int qcom_qfprom_write_version(uint32_t sw_type,
+				     uint32_t value,
+				     uint32_t qfprom_ret_ptr);
+extern int qcom_qfprom_read_version(uint32_t sw_type,
+				    uint32_t value,
+				    uint32_t qfprom_ret_ptr);
+extern int qcom_qfprom_show_authenticate(void);
 extern bool qcom_scm_is_available(void);
 
 extern int qcom_scm_set_cold_boot_addr(void *entry);
@@ -139,4 +163,11 @@ extern int qti_scm_hvc_log(void *ker_buf, u32 buf_len);
 extern int qti_qfprom_show_authenticate(void);
 extern int qti_scm_get_smmustate(void);
 
+extern bool qcom_scm_sec_auth_available(unsigned int scm_cmd_id);
+extern int qcom_sec_upgrade_auth(unsigned int scm_cmd_id,
+				 unsigned int sw_type, unsigned int img_size,
+				 unsigned int load_addr);
+extern int qcom_sec_upgrade_auth_meta_data(unsigned int scm_cmd_id,unsigned int sw_type,
+					   unsigned int img_size,unsigned int load_addr,
+					   void* hash_addr,unsigned int hash_size);
 #endif
-- 
2.34.1

