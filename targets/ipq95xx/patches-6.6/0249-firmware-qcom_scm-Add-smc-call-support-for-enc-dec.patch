From a4c118fa650377214d7ffbd12cfd99ec9a9a36e6 Mon Sep 17 00:00:00 2001
From: Omeshwari wazekar <quic_owazekar@quicinc.com>
Date: Mon, 8 May 2023 12:55:37 +0530
Subject: [PATCH 324/500] firmware: qcom_scm: Add smc call support for enc/dec

This change will add smc call for encryption/decryption.
For IPQ53xx there is no hardware crypto engine present so,
that encryption/decryption done by TZ with help of this smc call.

Change-Id: Ifc4cbaa89157dc22c512708e2cff21b929822883
Signed-off-by: Omeshwari wazekar <quic_owazekar@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 91 ++++++++++++++++++++++++++
 drivers/firmware/qcom_scm.h            | 11 ++++
 include/linux/firmware/qcom/qcom_scm.h |  3 +
 3 files changed, 105 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 7121618d90bf..694fb1d4892e 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -1529,6 +1529,97 @@ static int qcom_scm_find_dload_address(struct device *dev, u64 *addr)
 	return 0;
 }
 
+/*
+ * qcom_set_qcekey_sec() - Configure key securely
+ */
+int qti_set_qcekey_sec(void *buf, int size)
+{
+	return __qti_set_qcekey_sec(__scm->dev, buf, size);
+}
+EXPORT_SYMBOL_GPL(qti_set_qcekey_sec);
+
+int qti_sec_crypt(void *buf, int size)
+{
+	return __qti_sec_crypt(__scm->dev, buf, size);
+}
+EXPORT_SYMBOL_GPL(qti_sec_crypt);
+
+int qti_seccrypt_clearkey(void)
+{
+	return __qti_seccrypt_clearkey(__scm->dev);
+}
+EXPORT_SYMBOL_GPL(qti_seccrypt_clearkey);
+
+int __qti_set_qcekey_sec(struct device *dev, void *confBuf, int size)
+{
+	int ret;
+	dma_addr_t conf_phys;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_QCE_CRYPTO_SIP,
+		.cmd = QCOM_SCM_QCE_CMD,
+		.arginfo = QCOM_SCM_ARGS(1, QCOM_SCM_RO),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	conf_phys = dma_map_single(dev, confBuf, size, DMA_TO_DEVICE);
+	ret = dma_mapping_error(dev, conf_phys);
+	if (ret) {
+		dev_err(dev, "Allocation fail for conf buffer\n");
+		return -ENOMEM;
+	}
+	desc.args[1] = (u64)conf_phys;
+	desc.args[2] = size;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	dma_unmap_single(dev, conf_phys, size, DMA_TO_DEVICE);
+	return ret ? : res.result[0];
+}
+
+int __qti_sec_crypt(struct device *dev, void *confBuf, int size)
+{
+	int ret;
+	dma_addr_t conf_phys;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_QCE_CRYPTO_SIP,
+		.cmd = QCOM_SCM_QCE_ENC_DEC_CMD,
+		.arginfo = QCOM_SCM_ARGS(2, QCOM_SCM_RW, QCOM_SCM_VAL),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	conf_phys = dma_map_single(dev, confBuf, size, DMA_TO_DEVICE);
+	ret = dma_mapping_error(dev, conf_phys);
+	if (ret) {
+		dev_err(dev, "Allocation fail for conf buffer\n");
+		return -ENOMEM;
+	}
+	desc.args[1] = (u64)conf_phys;
+	desc.args[2] = size;
+
+	return qcom_scm_call(__scm->dev, &desc, &res);
+
+	dma_unmap_single(dev, conf_phys, size, DMA_TO_DEVICE);
+	return ret ? : res.result[0];
+}
+
+int __qti_seccrypt_clearkey(struct device *dev)
+{
+	int ret;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_QCE_CRYPTO_SIP,
+		.cmd = QCOM_SCM_SECCRYPT_CLRKEY_CMD,
+		.arginfo = QCOM_SCM_ARGS(0, QCOM_SCM_VAL),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+	struct qcom_scm_res res;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	return ret ? : res.result[0];
+}
+
 /**
  * qcom_scm_is_available() - Checks if SCM is available
  */
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index eb35f49da0ef..a9c7086588cf 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -161,6 +161,17 @@ extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 #define QCOM_SCM_WAITQ_RESUME			0x02
 #define QCOM_SCM_WAITQ_GET_WQ_CTX		0x03
 
+/*
+ * QCOM_SCM_QCE_SVC - commands related to secure key for secure nand
+ */
+#define QCOM_SCM_QCE_CMD		0x3
+#define QCOM_SCM_QCE_CRYPTO_SIP		0xA
+#define QCOM_SCM_QCE_ENC_DEC_CMD	0xB
+#define QCOM_SCM_SECCRYPT_CLRKEY_CMD	0xC
+extern int __qti_sec_crypt(struct device *dev, void *confBuf, int size);
+extern int __qti_seccrypt_clearkey(struct device *dev);
+extern int __qti_set_qcekey_sec(struct device *dev, void *confBuf, int size);
+
 /* common error codes */
 #define QCOM_SCM_V2_EBUSY	-12
 #define QCOM_SCM_ENOMEM		-5
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index 6313df0a0242..fca2a4c48cba 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -154,6 +154,9 @@ extern int qcom_scm_lmh_dcvsh(u32 payload_fn, u32 payload_reg, u32 payload_val,
 			      u64 limit_node, u32 node_id, u64 version);
 extern int qcom_scm_lmh_profile_change(u32 profile_id);
 extern bool qcom_scm_lmh_dcvsh_available(void);
+extern int qti_seccrypt_clearkey(void);
+extern int qti_sec_crypt(void *buf, int size);
+extern int qti_set_qcekey_sec(void *buf, int size);
 
 extern int qti_scm_is_tz_log_encrypted(void);
 extern int qti_scm_get_encrypted_tz_log(void *ker_buf, u32 buf_len, u32 log_id);
-- 
2.34.1

