From 63a35ca40d2924e51320746a19a7dd2a02d91eb8 Mon Sep 17 00:00:00 2001
From: Omeshwari wazekar <quic_owazekar@quicinc.com>
Date: Mon, 10 Jul 2023 14:45:17 +0530
Subject: [PATCH 330/500] firmware: qcom_scm: add the necessary SCM calls for
 qseecom driver

Change-Id: Ic83d11e98d213f31bd204e255ea5684595b91676
Signed-off-by: Omeshwari wazekar <quic_owazekar@quicinc.com>
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 333 +++++++++++++++++++++++++
 drivers/firmware/qcom_scm.h            |  40 +++
 include/linux/firmware/qcom/qcom_scm.h | 140 +++++++++++
 3 files changed, 513 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index c35276a8c36d..29d2ba32b63b 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -2051,6 +2051,339 @@ int qcom_qfprom_read_version(uint32_t sw_type, uint32_t value, uint32_t qfprom_r
 }
 EXPORT_SYMBOL_GPL(qcom_qfprom_read_version);
 
+int qti_scm_qseecom_remove_xpu()
+{
+	return __qti_scm_qseecom_remove_xpu(__scm->dev);
+}
+EXPORT_SYMBOL_GPL(qti_scm_qseecom_remove_xpu);
+
+int qti_scm_qseecom_notify(struct qsee_notify_app *req, size_t req_size,
+			   struct qseecom_command_scm_resp *resp,
+			   size_t resp_size)
+{
+	return __qti_scm_qseecom_notify(__scm->dev, req, req_size,
+				      resp, resp_size);
+}
+EXPORT_SYMBOL_GPL(qti_scm_qseecom_notify);
+
+int qti_scm_qseecom_load(uint32_t smc_id, uint32_t cmd_id,
+			 union qseecom_load_ireq *req, size_t req_size,
+			 struct qseecom_command_scm_resp *resp,
+			 size_t resp_size)
+{
+	return __qti_scm_qseecom_load(__scm->dev, smc_id, cmd_id, req, req_size,
+				    resp, resp_size);
+}
+EXPORT_SYMBOL_GPL(qti_scm_qseecom_load);
+
+int qti_scm_qseecom_send_data(union qseecom_client_send_data_ireq *req,
+			      size_t req_size,
+			      struct qseecom_command_scm_resp *resp,
+			      size_t resp_size)
+{
+	return __qti_scm_qseecom_send_data(__scm->dev, req, req_size,
+					 resp, resp_size);
+}
+EXPORT_SYMBOL_GPL(qti_scm_qseecom_send_data);
+
+int qti_scm_qseecom_unload(uint32_t smc_id, uint32_t cmd_id,
+			   struct qseecom_unload_ireq *req,
+			   size_t req_size,
+			   struct qseecom_command_scm_resp *resp,
+			   size_t resp_size)
+{
+	return __qti_scm_qseecom_unload(__scm->dev, smc_id, cmd_id, req,
+				      req_size, resp, resp_size);
+}
+EXPORT_SYMBOL_GPL(qti_scm_qseecom_unload);
+
+int qti_scm_register_log_buf(struct device *dev,
+				struct qsee_reg_log_buf_req *request,
+				size_t req_size,
+				struct qseecom_command_scm_resp *response,
+				size_t resp_size)
+{
+	return __qti_scm_register_log_buf(__scm->dev, request, req_size,
+					    response, resp_size);
+}
+EXPORT_SYMBOL_GPL(qti_scm_register_log_buf);
+
+int qti_scm_aes(uint32_t req_addr, uint32_t req_size, u32 cmd_id)
+{
+	return __qti_scm_aes(__scm->dev, req_addr, req_size, cmd_id);
+}
+EXPORT_SYMBOL_GPL(qti_scm_aes);
+
+int qti_scm_aes_clear_key_handle(uint32_t key_handle, u32 cmd_id)
+{
+	return __qti_scm_aes_clear_key_handle(__scm->dev, key_handle, cmd_id);
+}
+EXPORT_SYMBOL_GPL(qti_scm_aes_clear_key_handle);
+
+int qti_scm_tls_hardening(uint32_t req_addr, uint32_t req_size,
+			  uint32_t resp_addr, uint32_t resp_size, u32 cmd_id)
+{
+	return __qti_scm_tls_hardening(__scm->dev, req_addr, req_size,
+				      resp_addr, resp_size, cmd_id);
+}
+EXPORT_SYMBOL_GPL(qti_scm_tls_hardening);
+
+int __qcom_remove_xpu_scm_call_available(struct device *dev, u32 svc_id, u32 cmd_id)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_INFO,
+		.cmd = QCOM_IS_CALL_AVAIL_CMD,
+		.arginfo = QCOM_SCM_ARGS(1),
+		.args[0] = SCM_QSEEOS_FNID(svc_id, cmd_id) |
+				(ARM_SMCCC_OWNER_TRUSTED_OS << ARM_SMCCC_OWNER_SHIFT),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	return ret ? : res.result[0];
+}
+
+int __qti_scm_qseecom_remove_xpu(struct device *dev)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_APP_MGR,
+		.cmd = QTI_ARMv8_CMD_REMOVE_XPU,
+		.owner = QTI_OWNER_QSEE_OS,
+	};
+
+	ret = __qcom_remove_xpu_scm_call_available(dev, QTI_SVC_APP_MGR,
+					QTI_ARMv8_CMD_REMOVE_XPU);
+
+	if (ret <= 0)
+		return -ENOTSUPP;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	return ret ? : res.result[0];
+}
+
+int __qti_scm_qseecom_notify(struct device *dev,
+			     struct qsee_notify_app *req, size_t req_size,
+			     struct qseecom_command_scm_resp *resp,
+			     size_t resp_size)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_APP_MGR,
+		.cmd = QTI_CMD_NOTIFY_REGION_ID,
+		.arginfo = QCOM_SCM_ARGS(2, QCOM_SCM_RW, QCOM_SCM_VAL),
+		.args[0] = req->applications_region_addr,
+		.args[1] = req->applications_region_size,
+		.owner = QTI_OWNER_QSEE_OS,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	resp->result = res.result[0];
+	resp->resp_type = res.result[1];
+	resp->data = res.result[2];
+
+	return ret;
+}
+
+int __qti_scm_qseecom_load(struct device *dev, uint32_t smc_id,
+			   uint32_t cmd_id, union qseecom_load_ireq *req,
+			   size_t req_size,
+			   struct qseecom_command_scm_resp *resp,
+			   size_t resp_size)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_APP_MGR,
+		.arginfo = QCOM_SCM_ARGS(3, QCOM_SCM_VAL, QCOM_SCM_VAL,
+					    QCOM_SCM_VAL),
+		.args[0] = req->load_lib_req.mdt_len,
+		.args[1] = req->load_lib_req.img_len,
+		.args[2] = req->load_lib_req.phy_addr,
+		.owner = QTI_OWNER_QSEE_OS,
+	};
+
+
+	if (cmd_id == QSEOS_APP_START_COMMAND) {
+		desc.cmd = QTI_CMD_LOAD_APP_ID;
+		ret = qcom_scm_call(__scm->dev, &desc, &res);
+	}
+	else {
+		desc.cmd = QTI_CMD_LOAD_LIB;
+		ret = qcom_scm_call(__scm->dev, &desc, &res);
+	}
+
+	resp->result = res.result[0];
+	resp->resp_type = res.result[1];
+	resp->data = res.result[2];
+
+	return ret;
+}
+
+int __qti_scm_qseecom_send_data(struct device *dev,
+				union qseecom_client_send_data_ireq *req,
+				size_t req_size,
+				struct qseecom_command_scm_resp *resp,
+				size_t resp_size)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_APP_ID_PLACEHOLDER,
+		.cmd = QTI_CMD_SEND_DATA_ID,
+		.arginfo = QCOM_SCM_ARGS(5, QCOM_SCM_VAL, QCOM_SCM_RW, QCOM_SCM_VAL,
+					QCOM_SCM_RW, QCOM_SCM_VAL),
+		.args[0] = req->v1.app_id,
+		.args[1] = req->v1.req_ptr,
+		.args[2] = req->v1.req_len,
+		.args[3] = req->v1.rsp_ptr,
+		.args[4] = req->v1.rsp_len,
+		.owner = QTI_OWNER_TZ_APPS,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	resp->result = res.result[0];
+	resp->resp_type = res.result[1];
+	resp->data = res.result[2];
+
+	return ret;
+}
+
+int __qti_scm_qseecom_unload(struct device *dev, uint32_t smc_id,
+			     uint32_t cmd_id, struct qseecom_unload_ireq *req,
+			     size_t req_size,
+			     struct qseecom_command_scm_resp *resp,
+			     size_t resp_size)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_APP_MGR,
+		.owner = QTI_OWNER_QSEE_OS,
+	};
+
+	switch (cmd_id) {
+	case QSEOS_APP_SHUTDOWN_COMMAND:
+		desc.cmd = QTI_CMD_UNLOAD_APP_ID;
+		desc.arginfo = QCOM_SCM_ARGS(1);
+		desc.args[0] = req->app_id;
+		ret = qcom_scm_call(__scm->dev, &desc, &res);
+		break;
+
+	case QSEE_UNLOAD_SERV_IMAGE_COMMAND:
+		desc.cmd = QTI_CMD_UNLOAD_LIB;
+		ret = qcom_scm_call(__scm->dev, &desc, &res);
+		break;
+
+	default:
+		pr_info("\nIncorrect command id has been passed");
+		return -EINVAL;
+	}
+
+	resp->result = res.result[0];
+	resp->resp_type = res.result[1];
+	resp->data = res.result[2];
+
+	return ret;
+}
+
+int __qti_scm_register_log_buf(struct device *dev,
+				  struct qsee_reg_log_buf_req *request,
+				  size_t req_size,
+				  struct qseecom_command_scm_resp *response,
+				  size_t resp_size)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_APP_MGR,
+		.cmd = QTI_CMD_REGISTER_LOG_BUF,
+		.arginfo = QCOM_SCM_ARGS(2, QCOM_SCM_RW, QCOM_SCM_VAL),
+		.args[0] = request->phy_addr,
+		.args[1] = request->len,
+		.owner = QTI_OWNER_QSEE_OS,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	response->result = res.result[0];
+	response->resp_type = res.result[1];
+	response->data = res.result[2];
+
+	return ret;
+}
+
+int __qti_scm_tls_hardening(struct device *dev, uint32_t req_addr,
+			    uint32_t req_size, uint32_t resp_addr,
+			    uint32_t resp_size, u32 cmd_id)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_CRYPTO,
+		.cmd = cmd_id,
+		.arginfo = QCOM_SCM_ARGS(4, QCOM_SCM_RW, QCOM_SCM_VAL,
+					QCOM_SCM_RW, QCOM_SCM_VAL),
+		.args[0] = req_addr,
+		.args[1] = req_size,
+		.args[2] = resp_addr,
+		.args[3] = resp_size,
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	if (res.result[0] == QCOM_SCM_EINVAL_SIZE) {
+		pr_err("%s: TZ does not support data larger than 2K bytes: -%llu\n",
+					__func__, res.result[0]);
+	}
+	return ret ? : res.result[0];
+}
+
+int __qti_scm_aes(struct device *dev, uint32_t req_addr,
+		  uint32_t req_size, u32 cmd_id)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_CRYPTO,
+		.cmd = cmd_id,
+		.arginfo = QCOM_SCM_ARGS(2, QCOM_SCM_RW, QCOM_SCM_VAL),
+		.args[0] = req_addr,
+		.args[1] = req_size,
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	return res.result[0];
+}
+
+int __qti_scm_aes_clear_key_handle(struct device *dev, uint32_t key_handle, u32 cmd_id)
+{
+	int ret = 0;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SVC_CRYPTO,
+		.cmd = cmd_id,
+		.arginfo = QCOM_SCM_ARGS(1),
+		.args[0] = key_handle,
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	return ret ? : res.result[0];
+}
+
 static int qcom_scm_probe(struct platform_device *pdev)
 {
 	struct qcom_scm *scm;
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index c173e34955c4..cc775401a7b7 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -39,6 +39,8 @@ enum qcom_scm_arg_types {
 
 #define QCOM_SCM_ARGS(...) QCOM_SCM_ARGS_IMPL(__VA_ARGS__, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
 
+#define SCM_QSEEOS_FNID(s, c) (((((s) & 0xFF) << 8) | ((c) & 0xFF)) | \
+				0x32000000)
 
 /**
  * struct qcom_scm_desc
@@ -123,6 +125,7 @@ extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 #define QTI_SCM_TZ_DIAG_CMD		0x2
 #define QTI_SCM_HVC_DIAG_CMD		0x7
 #define QTI_SCM_SMMUSTATE_CMD		0x19
+#define QCOM_IS_CALL_AVAIL_CMD		0x1
 
 #define QCOM_SCM_SVC_MP				0x0c
 #define QCOM_SCM_MP_RESTORE_SEC_CFG		0x02
@@ -173,6 +176,42 @@ extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 extern int __qti_sec_crypt(struct device *dev, void *confBuf, int size);
 extern int __qti_seccrypt_clearkey(struct device *dev);
 extern int __qti_set_qcekey_sec(struct device *dev, void *confBuf, int size);
+extern int __qti_scm_qseecom_remove_xpu(struct device *);
+extern int __qti_scm_qseecom_notify(struct device *dev,
+				    struct qsee_notify_app *req,
+				    size_t req_size,
+				    struct qseecom_command_scm_resp *resp,
+				    size_t resp_size);
+extern int __qti_scm_qseecom_load(struct device *dev,
+				  uint32_t smc_id, uint32_t cmd_id,
+				  union qseecom_load_ireq *req,
+				  size_t req_size,
+				  struct qseecom_command_scm_resp *resp,
+				  size_t resp_size);
+extern int __qti_scm_qseecom_send_data(struct device *dev,
+				       union qseecom_client_send_data_ireq *req,
+				       size_t req_size,
+				       struct qseecom_command_scm_resp *resp,
+				       size_t resp_size);
+extern int __qti_scm_qseecom_unload(struct device *dev,
+				    uint32_t smc_id, uint32_t cmd_id,
+				    struct qseecom_unload_ireq *req,
+				    size_t req_size,
+				    struct qseecom_command_scm_resp *resp,
+				    size_t resp_size);
+extern int __qti_scm_register_log_buf(struct device *dev,
+					 struct qsee_reg_log_buf_req *request,
+					 size_t req_size,
+					 struct qseecom_command_scm_resp
+					 *response, size_t resp_size);
+extern int __qti_scm_tls_hardening(struct device *dev, uint32_t req_addr,
+				   uint32_t req_size, uint32_t resp_addr,
+				   uint32_t resp_size, u32 cmd_id);
+extern int __qti_scm_aes(struct device *dev, uint32_t req_addr,
+			 uint32_t req_size, u32 cmd_id);
+extern int __qti_scm_aes_clear_key_handle(struct device *dev, uint32_t key_handle, u32 cmd_id);
+extern int __qcom_remove_xpu_scm_call_available(struct device *dev, u32 svc_id,
+						u32 cmd_id);
 
 /* common error codes */
 #define QCOM_SCM_V2_EBUSY	-12
@@ -183,6 +222,7 @@ extern int __qti_set_qcekey_sec(struct device *dev, void *confBuf, int size);
 #define QCOM_SCM_ERROR		-1
 #define QCOM_SCM_INTERRUPTED	1
 #define QCOM_SCM_WAITQ_SLEEP	2
+#define QCOM_SCM_EINVAL_SIZE	18
 
 static inline int qcom_scm_remap_error(int err)
 {
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index f3b2da894815..d57c216a0dea 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -22,6 +22,100 @@
 #define QTI_TZ_LOG_NO_UPDATE		-6
 #define QTI_SCM_SVC_FUSE		0x8
 
+enum qseecom_qceos_cmd_id {
+	QSEOS_APP_START_COMMAND = 0x01,
+	QSEOS_APP_SHUTDOWN_COMMAND,
+	QSEOS_APP_LOOKUP_COMMAND,
+	QSEOS_REGISTER_LISTENER,
+	QSEOS_DEREGISTER_LISTENER,
+	QSEOS_CLIENT_SEND_DATA_COMMAND,
+	QSEOS_LISTENER_DATA_RSP_COMMAND,
+	QSEOS_LOAD_EXTERNAL_ELF_COMMAND,
+	QSEOS_UNLOAD_EXTERNAL_ELF_COMMAND,
+	QSEOS_CMD_MAX           = 0xEFFFFFFF,
+	QSEE_LOAD_SERV_IMAGE_COMMAND = 0xB,
+	QSEE_UNLOAD_SERV_IMAGE_COMMAND = 12,
+	QSEE_APP_NOTIFY_COMMAND = 13,
+	QSEE_REGISTER_LOG_BUF_COMMAND = 14
+};
+
+__packed struct qseecom_load_lib_ireq {
+	uint32_t qsee_cmd_id;
+	uint32_t mdt_len;		/* Length of the mdt file */
+	uint32_t img_len;		/* Length of .bxx and .mdt files */
+	phys_addr_t phy_addr;		/* phy addr of the start of image */
+};
+
+#define MAX_APP_NAME_SIZE		32
+__packed struct qseecom_load_app_ireq {
+	struct qseecom_load_lib_ireq load_ireq;
+	char app_name[MAX_APP_NAME_SIZE];	/* application name*/
+};
+
+union qseecom_load_ireq {
+	struct qseecom_load_lib_ireq load_lib_req;
+	struct qseecom_load_app_ireq load_app_req;
+};
+
+struct qsee_notify_app {
+	uint32_t cmd_id;
+	phys_addr_t applications_region_addr;
+	size_t applications_region_size;
+};
+
+__packed struct qseecom_client_send_data_v1_ireq {
+	uint32_t qsee_cmd_id;
+	uint32_t app_id;
+	dma_addr_t req_ptr;
+	uint32_t req_len;
+	/** First 4 bytes should always be the return status */
+	dma_addr_t rsp_ptr;
+	uint32_t rsp_len;
+};
+
+__packed struct qseecom_client_send_data_v2_ireq {
+	struct qseecom_client_send_data_v1_ireq send_data_ireq;
+	uint64_t sglistinfo_ptr;
+	uint32_t sglistinfo_len;
+};
+
+union qseecom_client_send_data_ireq {
+	struct qseecom_client_send_data_v1_ireq v1;
+	struct qseecom_client_send_data_v2_ireq v2;
+};
+
+__packed struct qseecom_unload_ireq {
+	uint32_t qsee_cmd_id;
+	uint32_t app_id;
+};
+
+enum qseecom_command_scm_resp_type {
+	QSEOS_APP_ID = 0xEE01,
+	QSEOS_LISTENER_ID
+};
+
+__packed struct qseecom_command_scm_resp {
+	unsigned long result;
+	enum qseecom_command_scm_resp_type resp_type;
+	unsigned long data;
+};
+
+struct qsee_reg_log_buf_req {
+	uint32_t qsee_cmd_id;
+	phys_addr_t phy_addr;
+	uint64_t len;
+};
+
+struct tzdbg_log_pos_t {
+	uint16_t wrap;
+	uint16_t offset;
+};
+
+struct qtidbg_log_t {
+	struct tzdbg_log_pos_t log_pos;
+	uint8_t log_buf[];
+};
+
 struct qcom_scm_hdcp_req {
 	u32 addr;
 	u32 val;
@@ -79,6 +173,24 @@ enum qcom_scm_ice_cipher {
 #define TZ_BLOW_FUSE_SECDAT        0x20
 #define QCOM_KERNEL_META_AUTH_CMD  0x23
 
+#define QTI_OWNER_QSEE_OS		50
+#define QTI_OWNER_TZ_APPS		48
+#define QTI_SVC_CRYPTO			10
+#define QTI_SVC_APP_MGR			1 /* Application Management */
+#define QTI_SVC_APP_ID_PLACEHOLDER	0 /* SVC bits will contain App ID */
+
+#define QTI_CMD_NOTIFY_REGION_ID	0x05
+#define QTI_CMD_REGISTER_LOG_BUF	0x06
+#define QTI_CMD_LOAD_LIB		0x07
+#define QTI_CMD_UNLOAD_LIB		0x08
+#define QTI_CMD_LOAD_APP_ID		0x01
+#define QTI_CMD_SEND_DATA_ID		0x01
+#define QTI_CMD_UNLOAD_APP_ID		0x02
+#define QTI_ARMv8_CMD_REMOVE_XPU	0x09
+
+#define QTI_SYSCALL_CREATE_SMC_ID(o, s, f) \
+	((uint32_t)((((o & 0x3f) << 24) | (s & 0xff) << 8) | (f & 0xff)))
+
 extern int qcom_fuseipq_scm_call(u32 svc_id, u32 cmd_id,
 				 void *cmd_buf, size_t size);
 extern int qcom_qfprom_write_version(uint32_t sw_type,
@@ -174,4 +286,32 @@ extern int qcom_sec_upgrade_auth(unsigned int scm_cmd_id,
 extern int qcom_sec_upgrade_auth_meta_data(unsigned int scm_cmd_id,unsigned int sw_type,
 					   unsigned int img_size,unsigned int load_addr,
 					   void* hash_addr,unsigned int hash_size);
+extern int qti_scm_qseecom_remove_xpu(void);
+extern int qti_scm_qseecom_notify(struct qsee_notify_app *req,
+				  size_t req_size,
+				  struct qseecom_command_scm_resp *resp,
+				  size_t resp_size);
+extern int qti_scm_qseecom_load(uint32_t smc_id, uint32_t cmd_id,
+				union qseecom_load_ireq *req, size_t req_size,
+				struct qseecom_command_scm_resp *resp,
+				size_t resp_size);
+extern int qti_scm_qseecom_send_data(union qseecom_client_send_data_ireq *req,
+				     size_t req_size,
+				     struct qseecom_command_scm_resp *resp,
+				     size_t resp_size);
+extern int qti_scm_qseecom_unload(uint32_t smc_id, uint32_t cmd_id,
+				  struct qseecom_unload_ireq *req,
+				  size_t req_size,
+				  struct qseecom_command_scm_resp *resp,
+				  size_t resp_size);
+extern int qti_scm_register_log_buf(struct device *dev,
+				       struct qsee_reg_log_buf_req *request,
+				       size_t req_size,
+				       struct qseecom_command_scm_resp
+				       *response, size_t resp_size);
+extern int qti_scm_tls_hardening(uint32_t req_addr, uint32_t req_size,
+				 uint32_t resp_addr, uint32_t resp_size,
+				 u32 cmd_id);
+extern int qti_scm_aes(uint32_t req_addr, uint32_t req_size, u32 cmd_id);
+extern int qti_scm_aes_clear_key_handle(uint32_t key_handle, u32 cmd_id);
 #endif
-- 
2.34.1

