From fed6bac72414dc2f5c63bbbf50c2827f62c8e549 Mon Sep 17 00:00:00 2001
From: Manikanta Mylavarapu <quic_mmanikan@quicinc.com>
Date: Mon, 20 Nov 2023 17:34:26 +0530
Subject: [PATCH 333/500] firmware: scm: add support for q6 break at start

For debugging purpose, we may need to break q6
at start. This patch adds support to break q6.

Change-Id: Ib7aac07a308dede1d767c777d57aca05f4dacc48
Signed-off-by: Manikanta Mylavarapu <quic_mmanikan@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 20 ++++++++++++++++++++
 include/linux/firmware/qcom/qcom_scm.h |  3 +++
 2 files changed, 23 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index dcaf54563901..492a8367ae7d 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -711,6 +711,26 @@ int qcom_scm_pas_mem_setup(u32 peripheral, phys_addr_t addr, phys_addr_t size)
 }
 EXPORT_SYMBOL_GPL(qcom_scm_pas_mem_setup);
 
+int qcom_scm_break_q6_start(u32 reset_cmd_id)
+{
+	int ret;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_PIL,
+		.cmd = reset_cmd_id,
+		.arginfo = QCOM_SCM_ARGS(1),
+		.args[0] = QCOM_BREAK_Q6,
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+	struct qcom_scm_res res;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	if (ret || res.result[0])
+		return ret ? : res.result[0];
+
+	return 0;
+}
+EXPORT_SYMBOL(qcom_scm_break_q6_start);
+
 /**
  * qcom_scm_pas_auth_and_reset() - Authenticate the given peripheral firmware
  *				   and reset the remote processor
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index dc9024d06f9f..32fc50ee6a30 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -22,6 +22,8 @@
 #define QTI_TZ_LOG_NO_UPDATE		-6
 #define QTI_SCM_SVC_FUSE		0x8
 
+#define QCOM_BREAK_Q6			0x1
+
 #define MAX_FUSE_ADDR_SIZE		0x8
 struct fuse_payload {
 	uint32_t fuse_addr;
@@ -228,6 +230,7 @@ extern void qcom_scm_pas_metadata_release(struct qcom_scm_pas_metadata *ctx);
 extern int qcom_scm_pas_mem_setup(u32 peripheral, phys_addr_t addr,
 				  phys_addr_t size);
 extern long qcom_scm_is_feature_available(u32 feature_id);
+extern int qcom_scm_break_q6_start(u32 reset_cmd_id);
 extern int qcom_scm_pas_auth_and_reset(u32 peripheral);
 extern int qcom_scm_pas_shutdown(u32 peripheral);
 extern bool qcom_scm_pas_supported(u32 peripheral);
-- 
2.34.1

