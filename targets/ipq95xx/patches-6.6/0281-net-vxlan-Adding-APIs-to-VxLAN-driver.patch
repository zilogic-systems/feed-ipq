From 02d4a6aaa370c93878fc21ad812f219529759c3d Mon Sep 17 00:00:00 2001
From: Sachin Kohli <quic_sachkohl@quicinc.com>
Date: Tue, 19 Dec 2023 10:15:33 +0530
Subject: [PATCH 206/500] net: vxlan: Adding APIs to VxLAN driver.

Adding new APIs to verify VxLAN netdevice and
update mac entries in VxLAN's fdb.
Change-Id: I22962d4845cba3a258c095f6424557a29d3b354b
Signed-off-by: Apoorv Gupta <apoogupt@codeaurora.org>

net: vxlan: Added vxlan fdb notify chain

Registered modules are notified based on following events:
1. RTM_GETNEIGH
2. RTM_NEWNEIGH
3. RTM_DELNEIGH

Change-Id: I0802b305a829800cafbabd4728c3c47ff3679938
Signed-off-by: Cemil Coskun <ccoskun@codeaurora.org>
Signed-off-by: Apoorv Gupta <apoogupt@codeaurora.org>
Signed-off-by: Vishnu Vardhan Bantanahal <quic_vishvard@quicinc.com>
---
 drivers/net/vxlan/vxlan_core.c | 31 +++++++++++++++++++++++++++++++
 include/net/vxlan.h            | 29 +++++++++++++++++++++++++++++
 2 files changed, 60 insertions(+)

diff --git a/drivers/net/vxlan/vxlan_core.c b/drivers/net/vxlan/vxlan_core.c
index 5b5597073b00..4b371f250402 100644
--- a/drivers/net/vxlan/vxlan_core.c
+++ b/drivers/net/vxlan/vxlan_core.c
@@ -65,6 +65,20 @@ static void vxlan_vs_del_dev(struct vxlan_dev *vxlan);
 /* salt for hash table */
 static u32 vxlan_salt __read_mostly;
 
+ATOMIC_NOTIFIER_HEAD(vxlan_fdb_notifier_list);
+
+void vxlan_fdb_register_notify(struct notifier_block *nb)
+{
+	atomic_notifier_chain_register(&vxlan_fdb_notifier_list, nb);
+}
+EXPORT_SYMBOL(vxlan_fdb_register_notify);
+
+void vxlan_fdb_unregister_notify(struct notifier_block *nb)
+{
+	atomic_notifier_chain_unregister(&vxlan_fdb_notifier_list, nb);
+}
+EXPORT_SYMBOL(vxlan_fdb_unregister_notify);
+
 static inline bool vxlan_collect_metadata(struct vxlan_sock *vs)
 {
 	return vs->flags & VXLAN_F_COLLECT_METADATA ||
@@ -260,6 +274,7 @@ static void __vxlan_fdb_notify(struct vxlan_dev *vxlan, struct vxlan_fdb *fdb,
 {
 	struct net *net = dev_net(vxlan->dev);
 	struct sk_buff *skb;
+	struct vxlan_fdb_event vfe;
 	int err = -ENOBUFS;
 
 	skb = nlmsg_new(vxlan_nlmsg_size(), GFP_ATOMIC);
@@ -275,6 +290,10 @@ static void __vxlan_fdb_notify(struct vxlan_dev *vxlan, struct vxlan_fdb *fdb,
 	}
 
 	rtnl_notify(skb, net, 0, RTNLGRP_NEIGH, NULL, GFP_ATOMIC);
+	vfe.dev = vxlan->dev;
+	vfe.rdst = rd;
+	ether_addr_copy(vfe.eth_addr, fdb->eth_addr);
+	atomic_notifier_call_chain(&vxlan_fdb_notifier_list, type, (void *)&vfe);
 	return;
 errout:
 	if (err < 0)
@@ -441,6 +460,18 @@ static struct vxlan_fdb *vxlan_find_mac(struct vxlan_dev *vxlan,
 	return f;
 }
 
+/* Find and update age of fdb entry corresponding to MAC. */
+void vxlan_fdb_update_mac(struct vxlan_dev *vxlan, const u8 *mac, uint32_t vni)
+{
+	u32 hash_index;
+
+	hash_index = fdb_head_index(vxlan, mac, vni);
+	spin_lock_bh(&vxlan->hash_lock[hash_index]);
+	vxlan_find_mac(vxlan, mac, vni);
+	spin_unlock_bh(&vxlan->hash_lock[hash_index]);
+}
+EXPORT_SYMBOL(vxlan_fdb_update_mac);
+
 /* caller should hold vxlan->hash_lock */
 static struct vxlan_rdst *vxlan_fdb_find_rdst(struct vxlan_fdb *f,
 					      union vxlan_addr *ip, __be16 port,
diff --git a/include/net/vxlan.h b/include/net/vxlan.h
index 6a9f8a5f387c..1573d8eeb5c9 100644
--- a/include/net/vxlan.h
+++ b/include/net/vxlan.h
@@ -352,6 +352,19 @@ struct vxlan_dev {
 					 VXLAN_F_VNIFILTER         |    \
 					 VXLAN_F_LOCALBYPASS)
 
+/*
+ * Application data for fdb notifier event
+ */
+struct vxlan_fdb_event {
+	struct net_device *dev;
+	struct vxlan_rdst *rdst;
+	u8 eth_addr[ETH_ALEN];
+};
+
+extern void vxlan_fdb_register_notify(struct notifier_block *nb);
+extern void vxlan_fdb_unregister_notify(struct notifier_block *nb);
+extern void vxlan_fdb_update_mac(struct vxlan_dev *vxlan, const u8 *mac, uint32_t vni);
+
 struct net_device *vxlan_dev_create(struct net *net, const char *name,
 				    u8 name_assign_type, struct vxlan_config *conf);
 
@@ -440,6 +453,22 @@ static inline __be32 vxlan_compute_rco(unsigned int start, unsigned int offset)
 	return vni_field;
 }
 
+/*
+ * is_vxlan_dev()
+ *       Check if it is a VxLAN netdevice.
+ */
+static inline bool is_vxlan_dev(const struct net_device *dev)
+{
+	if (!dev)
+		return false;
+
+	if ((dev->dev.type) &&
+		!strncmp(dev->dev.type->name, "vxlan", sizeof("vxlan"))) {
+			return true;
+	}
+	return false;
+}
+
 static inline unsigned short vxlan_get_sk_family(struct vxlan_sock *vs)
 {
 	return vs->sock->sk->sk_family;
-- 
2.34.1

