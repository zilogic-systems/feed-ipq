From bd7f46b6e8b0ef8a0e74277b9528e27a39af4ea2 Mon Sep 17 00:00:00 2001
From: Sachin Kohli <quic_sachkohl@quicinc.com>
Date: Tue, 19 Dec 2023 10:17:14 +0530
Subject: [PATCH 207/500] ip_tunnel_core: NULL pointer check before
 netif_is_vxlan

We need to check if in_dev is NULL before calling netif_is_vxlan
Change-Id: Ia1d38441bf37af691d2afab7f5545a721192e83e
Signed-off-by: Tian Yang <quic_tiany@quicinc.com>
Signed-off-by: Vishnu Vardhan Bantanahal <quic_vishvard@quicinc.com>

net: Setting skb input interface to vxlan during encapsulation.

Setting skb_iif to vxlan when encapsulating with IP/IPv6 header.
Also removed the is_vxlan_dev() API support, as it can be replaced
by in-built API netif_is_vxlan().

Change-Id: I480d15b2ef2e91038676c620a98217e35e29b002
Signed-off-by: Apoorv Gupta <apoogupt@codeaurora.org>
Signed-off-by: Vishnu Vardhan Bantanahal <quic_vishvard@quicinc.com>
---
 drivers/net/vxlan/vxlan_core.c |  6 ++++++
 include/net/vxlan.h            | 15 ++++-----------
 net/ipv4/ip_tunnel_core.c      | 15 +++++++++++++++
 3 files changed, 25 insertions(+), 11 deletions(-)

diff --git a/drivers/net/vxlan/vxlan_core.c b/drivers/net/vxlan/vxlan_core.c
index 4b371f250402..41612a21dbb1 100644
--- a/drivers/net/vxlan/vxlan_core.c
+++ b/drivers/net/vxlan/vxlan_core.c
@@ -2608,6 +2608,9 @@ void vxlan_xmit_one(struct sk_buff *skb, struct net_device *dev,
 			goto out_unlock;
 		}
 
+                /* Reset the skb_iif to Tunnels interface index */
+		skb->skb_iif = dev->ifindex;
+
 		tos = ip_tunnel_ecn_encap(tos, old_iph, skb);
 		ttl = ttl ? : ip4_dst_hoplimit(&rt->dst);
 		err = vxlan_build_skb(skb, ndst, sizeof(struct iphdr),
@@ -2679,6 +2682,9 @@ void vxlan_xmit_one(struct sk_buff *skb, struct net_device *dev,
 		if (err < 0)
 			goto tx_error;
 
+                /* Reset the skb_iif to Tunnels interface index */
+		skb->skb_iif = dev->ifindex;
+
 		udp_tunnel6_xmit_skb(ndst, sock6->sock->sk, skb, dev,
 				     &local_ip.sin6.sin6_addr,
 				     &dst->sin6.sin6_addr, tos, ttl,
diff --git a/include/net/vxlan.h b/include/net/vxlan.h
index 1573d8eeb5c9..52016af803c8 100644
--- a/include/net/vxlan.h
+++ b/include/net/vxlan.h
@@ -454,19 +454,12 @@ static inline __be32 vxlan_compute_rco(unsigned int start, unsigned int offset)
 }
 
 /*
- * is_vxlan_dev()
- *       Check if it is a VxLAN netdevice.
+ * vxlan_get_vni()
+ * Returns the vni corresponding to tunnel
  */
-static inline bool is_vxlan_dev(const struct net_device *dev)
+static inline u32 vxlan_get_vni(struct vxlan_dev *vxlan_tun)
 {
-	if (!dev)
-		return false;
-
-	if ((dev->dev.type) &&
-		!strncmp(dev->dev.type->name, "vxlan", sizeof("vxlan"))) {
-			return true;
-	}
-	return false;
+	return be32_to_cpu(vxlan_tun->cfg.vni);
 }
 
 static inline unsigned short vxlan_get_sk_family(struct vxlan_sock *vs)
diff --git a/net/ipv4/ip_tunnel_core.c b/net/ipv4/ip_tunnel_core.c
index 586b1b3e35b8..5837fd94b7ac 100644
--- a/net/ipv4/ip_tunnel_core.c
+++ b/net/ipv4/ip_tunnel_core.c
@@ -38,6 +38,7 @@
 #include <net/geneve.h>
 #include <net/vxlan.h>
 #include <net/erspan.h>
+#include <net/vxlan.h>
 
 const struct ip_tunnel_encap_ops __rcu *
 		iptun_encaps[MAX_IPTUN_ENCAP_OPS] __read_mostly;
@@ -55,7 +56,12 @@ void iptunnel_xmit(struct sock *sk, struct rtable *rt, struct sk_buff *skb,
 	struct net *net = dev_net(rt->dst.dev);
 	struct net_device *dev = skb->dev;
 	struct iphdr *iph;
+	struct net_device *in_dev = NULL;
 	int err;
+	int skb_iif;
+
+	/* Save input interface index */
+        skb_iif = skb->skb_iif;
 
 	skb_scrub_packet(skb, xnet);
 
@@ -79,6 +85,15 @@ void iptunnel_xmit(struct sock *sk, struct rtable *rt, struct sk_buff *skb,
 	iph->ttl	=	ttl;
 	__ip_select_ident(net, iph, skb_shinfo(skb)->gso_segs ?: 1);
 
+        /* Get input interface */
+	if (skb_iif) {
+		in_dev = __dev_get_by_index(&init_net, skb_iif);
+	}
+
+	if (proto == IPPROTO_IPV6 || proto == IPPROTO_GRE || (in_dev && netif_is_vxlan(in_dev))) {
+		skb->skb_iif = skb_iif;
+	}
+
 	err = ip_local_out(net, sk, skb);
 
 	if (dev) {
-- 
2.34.1

