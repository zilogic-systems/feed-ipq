From dea2feef1ed1865bc7b5152284f99b8675d33504 Mon Sep 17 00:00:00 2001
From: Saahil Tomar <quic_saahtoma@quicinc.com>
Date: Fri, 2 Jun 2023 13:12:42 +0530
Subject: [PATCH 344/500] interconnect: qcom: bcm-voter: Fix KASAN
 Use-After-Free

With unload of dispcc driver, disp_bcm_voter is getting unloaded.
But the interconnect driver keeps committing the votes on both
apps and disp bcm voters causing UAF.
Added remove function to capture the unloaded bcm voter details
and updated the bcm voters list by removing the unloaded bcm voter
from the list.

Added checks under add, commit and clear functions to check if the
voter exists in the bcm voters list. If requested bcm voter is not
present under voter list then returning ENODEV

Change-Id: I13b9639bc18a5dbb2220cd436fab0bbbc1f59770
Signed-off-by: Raviteja Laggyshetty <quic_rlaggysh@quicinc.com>
Signed-off-by: Vivek Aknurwar <quic_viveka@quicinc.com>
Signed-off-by: Saahil Tomar <quic_saahtoma@quicinc.com>
---
 drivers/interconnect/qcom/bcm-voter.c | 56 ++++++++++++++++++++++++++-
 1 file changed, 55 insertions(+), 1 deletion(-)

diff --git a/drivers/interconnect/qcom/bcm-voter.c b/drivers/interconnect/qcom/bcm-voter.c
index a2d437a05a11..433b48b05dcf 100644
--- a/drivers/interconnect/qcom/bcm-voter.c
+++ b/drivers/interconnect/qcom/bcm-voter.c
@@ -240,6 +240,31 @@ struct bcm_voter *of_bcm_voter_get(struct device *dev, const char *name)
 }
 EXPORT_SYMBOL_GPL(of_bcm_voter_get);
 
+/**
+ * qcom_icc_bcm_voter_exist - checks if the bcm voter exists
+ * @voter: voter that needs to checked against available bcm voters
+ *
+ * Returns true incase bcm_voter exists else false
+ */
+static bool qcom_icc_bcm_voter_exist(struct bcm_voter *voter)
+{
+	bool exists = false;
+	struct bcm_voter *temp;
+
+	if (voter) {
+		mutex_lock(&bcm_voter_lock);
+		list_for_each_entry(temp, &bcm_voters, voter_node) {
+			if (temp == voter) {
+				exists = true;
+				break;
+			}
+		}
+		mutex_unlock(&bcm_voter_lock);
+	}
+
+	return exists;
+}
+
 /**
  * qcom_icc_bcm_voter_add - queues up the bcm nodes that require updates
  * @voter: voter that the bcms are being added to
@@ -250,6 +275,9 @@ void qcom_icc_bcm_voter_add(struct bcm_voter *voter, struct qcom_icc_bcm *bcm)
 	if (!voter)
 		return;
 
+	if (!qcom_icc_bcm_voter_exist(voter))
+		return;
+
 	mutex_lock(&voter->lock);
 	if (list_empty(&bcm->list))
 		list_add_tail(&bcm->list, &voter->commit_list);
@@ -284,6 +312,9 @@ int qcom_icc_bcm_voter_commit(struct bcm_voter *voter)
 	if (!voter)
 		return 0;
 
+	if (!qcom_icc_bcm_voter_exist(voter))
+		return -ENODEV;
+
 	mutex_lock(&voter->lock);
 	list_for_each_entry(bcm, &voter->commit_list, list) {
 		if (bcm->enable_mask)
@@ -393,6 +424,23 @@ static int qcom_icc_bcm_voter_probe(struct platform_device *pdev)
 	return 0;
 }
 
+static int qcom_icc_bcm_voter_remove(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct bcm_voter *voter, *temp;
+
+	mutex_lock(&bcm_voter_lock);
+	list_for_each_entry_safe(voter, temp, &bcm_voters, voter_node) {
+		if (voter->np == np) {
+			list_del(&voter->voter_node);
+			break;
+		}
+	}
+	mutex_unlock(&bcm_voter_lock);
+
+	return 0;
+}
+
 static const struct of_device_id bcm_voter_of_match[] = {
 	{ .compatible = "qcom,bcm-voter" },
 	{ }
@@ -401,12 +449,18 @@ MODULE_DEVICE_TABLE(of, bcm_voter_of_match);
 
 static struct platform_driver qcom_icc_bcm_voter_driver = {
 	.probe = qcom_icc_bcm_voter_probe,
+	.remove = qcom_icc_bcm_voter_remove,
 	.driver = {
 		.name		= "bcm_voter",
 		.of_match_table = bcm_voter_of_match,
 	},
 };
-module_platform_driver(qcom_icc_bcm_voter_driver);
+
+static int __init qcom_icc_bcm_voter_driver_init(void)
+{
+	return platform_driver_register(&qcom_icc_bcm_voter_driver);
+}
+module_init(qcom_icc_bcm_voter_driver_init);
 
 MODULE_AUTHOR("David Dai <daidavid1@codeaurora.org>");
 MODULE_DESCRIPTION("Qualcomm BCM Voter interconnect driver");
-- 
2.34.1

