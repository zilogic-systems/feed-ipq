From 8c42ad24a4efaa2df444625fb1d6fc5dea5459b5 Mon Sep 17 00:00:00 2001
From: Tian Yang <tiany@codeaurora.org>
Date: Mon, 21 Sep 2015 18:50:13 -0500
Subject: [PATCH 297/500] net: skbuff: use debug objects to track skb
 allocations

* tracks skb allocations and frees and warns / errors if
  re-use occurs
* init/destroy for slab allocations
* activate/deactivate for in use

Change-Id: Ia2dd0c7549d765a282295daf27bee6f99e5c7a43
Signed-off-by: Matthew McClintock <mmcclint@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
Signed-off-by: Tian Yang <tiany@codeaurora.org>
---
 MAINTAINERS       | 1 +
 lib/Kconfig.debug | 6 ++++++
 net/core/Makefile | 2 +-
 net/core/dev.c    | 1 +
 net/core/skbuff.c | 9 ++++++++-
 5 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/MAINTAINERS b/MAINTAINERS
index 9a6ff7611087..9d93d84494d7 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -72,6 +72,7 @@ M:	Casey Chen <kexinc@codeaurora.org>
 S:	Maintained
 F:	net/core/skbuff_recycle.*
 F:	net/core/skbuff_notifier.*
+F:	net/core/skbuff_debug.*
 
 3C59X NETWORK DRIVER
 M:	Steffen Klassert <klassert@kernel.org>
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index fa307f93fa2e..aa353a204224 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -741,6 +741,12 @@ config DEBUG_OBJECTS_PERCPU_COUNTER
 	  percpu counter routines to track the life time of percpu counter
 	  objects and validate the percpu counter operations.
 
+config DEBUG_OBJECTS_SKBUFF
+	bool "Debug sk_buff allocations"
+	depends on DEBUG_OBJECTS
+	help
+	  Enable this to turn on debugging of sk_buff's (incl. recycler)
+
 config DEBUG_OBJECTS_ENABLE_DEFAULT
 	int "debug_objects bootup default value (0-1)"
 	range 0 1
diff --git a/net/core/Makefile b/net/core/Makefile
index 2cf3d81a3968..164e93ac65f5 100644
--- a/net/core/Makefile
+++ b/net/core/Makefile
@@ -41,4 +41,4 @@ obj-$(CONFIG_BPF_SYSCALL) += sock_map.o
 obj-$(CONFIG_BPF_SYSCALL) += bpf_sk_storage.o
 obj-$(CONFIG_OF)	+= of_net.o
 obj-$(CONFIG_SKB_RECYCLER) += skbuff_recycle.o
-obj-$(CONFIG_DEBUG_OBJECTS_SKBUFF) += skbuff_notifier.o
+obj-$(CONFIG_DEBUG_OBJECTS_SKBUFF) += skbuff_debug.o skbuff_notifier.o
diff --git a/net/core/dev.c b/net/core/dev.c
index 34172a12d57e..edfa0d6a8dd8 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -156,6 +156,7 @@
 
 #include "dev.h"
 #include "net-sysfs.h"
+#include "skbuff_debug.h"
 
 static DEFINE_SPINLOCK(ptype_lock);
 struct list_head ptype_base[PTYPE_HASH_SIZE] __read_mostly;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 07d08e0fdf09..bc947c53e122 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -116,6 +116,7 @@ struct kmem_cache *skb_data_cache;
 #endif
 
 #include "skbuff_recycle.h"
+#include "skbuff_debug.h"
 
 static struct kmem_cache *skbuff_fclone_cache __ro_after_init;
 #ifdef CONFIG_SKB_EXTENSIONS
@@ -391,8 +392,8 @@ static inline void __finalize_skb_around(struct sk_buff *skb, void *data,
 	shinfo = skb_shinfo(skb);
 	memset(shinfo, 0, offsetof(struct skb_shared_info, dataref));
 	atomic_set(&shinfo->dataref, 1);
-
 	skb_set_kcov_handle(skb, kcov_common_handle());
+	skbuff_debugobj_init_and_activate(skb);
 }
 
 static inline void *__slab_build_skb(struct sk_buff *skb, void *data,
@@ -707,6 +708,7 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 		refcount_set(&fclones->fclone_ref, 1);
 	}
 
+	skbuff_debugobj_init_and_activate(skb);
 	return skb;
 
 nodata:
@@ -1132,6 +1134,7 @@ void kfree_skbmem(struct sk_buff *skb)
 
 	switch (skb->fclone) {
 	case SKB_FCLONE_UNAVAILABLE:
+		skbuff_debugobj_deactivate(skb);
 		kmem_cache_free(skbuff_cache, skb);
 		return;
 
@@ -1152,7 +1155,9 @@ void kfree_skbmem(struct sk_buff *skb)
 	}
 	if (!refcount_dec_and_test(&fclones->fclone_ref))
 		return;
+
 fastpath:
+	skbuff_debugobj_deactivate(&fclones->skb1);
 	kmem_cache_free(skbuff_fclone_cache, fclones);
 }
 
@@ -2110,6 +2115,7 @@ struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t gfp_mask)
 			return NULL;
 
 		n->fclone = SKB_FCLONE_UNAVAILABLE;
+		skbuff_debugobj_init_and_activate(n);
 	}
 
 	return __skb_clone(n, skb);
@@ -5926,6 +5932,7 @@ void kfree_skb_partial(struct sk_buff *skb, bool head_stolen)
 	if (head_stolen) {
 		skb_release_head_state(skb);
 		kmem_cache_free(skbuff_cache, skb);
+		skbuff_debugobj_deactivate(skb);
 	} else {
 		__kfree_skb(skb);
 	}
-- 
2.34.1

