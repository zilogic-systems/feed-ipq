From 0c80d81d01b776aaae80dde888f58f2ff0f9f763 Mon Sep 17 00:00:00 2001
From: Hariharan K <quic_harihk@quicinc.com>
Date: Sat, 8 Jul 2023 15:30:24 +0530
Subject: [PATCH 382/500] drivers: thermal: qcom: thermald sysfs notify

Add a work in the workqueue to notify thermald when
the configurable high and configurable low trip points
are reached. The work will be scheduled when an
interrupt is received.

Change-Id: I79f1a55f52800aadc083420c0c49ce4ef8f6312e
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
---
 drivers/thermal/qcom/tsens.c | 22 ++++++++++++++++++++++
 drivers/thermal/qcom/tsens.h |  1 +
 2 files changed, 23 insertions(+)

diff --git a/drivers/thermal/qcom/tsens.c b/drivers/thermal/qcom/tsens.c
index 51768627375c..c4013fa918f1 100644
--- a/drivers/thermal/qcom/tsens.c
+++ b/drivers/thermal/qcom/tsens.c
@@ -660,7 +660,13 @@ static irqreturn_t tsens_irq_thread(int irq, void *data)
 		if (!tsens_threshold_violated(priv, hw_id, &d))
 			continue;
 
+#ifdef CONFIG_CPU_THERMAL
+		/* If CPUFreq cooling is enabled, then notify Thermal framework */
 		thermal_zone_device_update(s->tzd, THERMAL_EVENT_UNSPECIFIED);
+#else
+		/* Notify user space */
+		schedule_work(&priv->sensor[i].notify_work);
+#endif
 
 		if (tsens_version(priv) < VER_0_1) {
 			/* Constraint: There is only 1 interrupt control register for all
@@ -696,6 +702,17 @@ static irqreturn_t tsens_combined_irq_thread(int irq, void *data)
 	return tsens_irq_thread(irq, data);
 }
 
+static void notify_uspace_tsens_fn(struct work_struct *work)
+{
+	struct tsens_sensor *s = container_of(work, struct tsens_sensor, notify_work);
+
+	if (!s || !s->tzd)
+		/* Do nothing. TSENS driver has not been registered yet */
+		return;
+
+	sysfs_notify(&s->tzd->device.kobj, NULL, "type");
+}
+
 static int __maybe_unused tsens_set_trip_activate(void *data, int trip,
 					enum thermal_trip_activation_mode mode)
 {
@@ -1101,6 +1118,11 @@ int __init init_common(struct tsens_priv *priv)
 		goto err_put_device;
 	}
 
+	for(i = 0; i < priv->num_sensors; i++) {
+		priv->sensor[i].status = priv->fields[LAST_TEMP_0 + i].reg;
+		INIT_WORK(&priv->sensor[i].notify_work, notify_uspace_tsens_fn);
+	}
+
 	priv->rf[INT_EN] = devm_regmap_field_alloc(dev, priv->tm_map,
 						   priv->fields[INT_EN]);
 	if (IS_ERR(priv->rf[INT_EN])) {
diff --git a/drivers/thermal/qcom/tsens.h b/drivers/thermal/qcom/tsens.h
index b2e8f0f2b466..e56b457de62b 100644
--- a/drivers/thermal/qcom/tsens.h
+++ b/drivers/thermal/qcom/tsens.h
@@ -56,6 +56,7 @@ enum tsens_irq_type {
 struct tsens_sensor {
 	struct tsens_priv		*priv;
 	struct thermal_zone_device	*tzd;
+	struct work_struct		notify_work;
 	int				offset;
 	unsigned int			hw_id;
 	int				slope;
-- 
2.34.1

