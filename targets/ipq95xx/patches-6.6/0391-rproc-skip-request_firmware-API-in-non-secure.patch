From 1ad452ea21267afce48be954c4cb28b28e4ccc78 Mon Sep 17 00:00:00 2001
From: Manikanta Mylavarapu <quic_mmanikan@quicinc.com>
Date: Thu, 7 Sep 2023 12:11:30 +0530
Subject: [PATCH 400/500] rproc: skip request_firmware API in non-secure

In case of non-secure PIL, mpd remoteproc
driver takes care of both backdoor and PIL
loading. So skip request_firmware in non
secure q6 bring up.

Change-Id: I95efcd8c6d9da5e4ec5ea2a6a8bb2f13df39d238
Signed-off-by: Manikanta Mylavarapu <quic_mmanikan@quicinc.com>
---
 drivers/remoteproc/remoteproc_core.c | 48 ++++++++++++++++++----------
 1 file changed, 32 insertions(+), 16 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 8cc7b8853774..9214b6d429cc 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -1387,14 +1387,18 @@ static int __rproc_attach(struct rproc *rproc)
 static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 {
 	struct device *dev = &rproc->dev;
+	#ifndef CONFIG_QCOM_NON_SECURE_PIL
 	const char *name = rproc->firmware;
+	#endif
 	int ret;
 
 	ret = rproc_fw_sanity_check(rproc, fw);
 	if (ret)
 		return ret;
 
-	dev_info(dev, "Booting fw image %s, size %zd\n", name, fw->size);
+	#ifndef CONFIG_QCOM_NON_SECURE_PIL
+		dev_info(dev, "Booting fw image %s, size %zd\n", name, fw->size);
+	#endif
 
 	/*
 	 * if enabling an IOMMU isn't relevant for this rproc, this is
@@ -1413,7 +1417,9 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 		goto disable_iommu;
 	}
 
-	rproc->bootaddr = rproc_get_boot_addr(rproc, fw);
+	#ifndef CONFIG_QCOM_NON_SECURE_PIL
+		rproc->bootaddr = rproc_get_boot_addr(rproc, fw);
+	#endif
 
 	/* Load resource table, core dump segment list etc from the firmware */
 	ret = rproc_parse_fw(rproc, fw);
@@ -1803,7 +1809,9 @@ static int rproc_attach_recovery(struct rproc *rproc)
 static int rproc_boot_recovery(struct rproc *rproc)
 {
 	const struct firmware *firmware_p;
+	#ifndef CONFIG_QCOM_NON_SECURE_PIL
 	struct device *dev = &rproc->dev;
+	#endif
 	int ret;
 
 	ret = rproc_stop(rproc, true);
@@ -1813,18 +1821,21 @@ static int rproc_boot_recovery(struct rproc *rproc)
 	/* generate coredump */
 	rproc->ops->coredump(rproc);
 
-	/* load firmware */
-	ret = request_firmware(&firmware_p, rproc->firmware, dev);
-	if (ret < 0) {
-		dev_err(dev, "request_firmware failed: %d\n", ret);
-		return ret;
-	}
+	#ifndef	CONFIG_QCOM_NON_SECURE_PIL
+		/* load firmware */
+		ret = request_firmware(&firmware_p, rproc->firmware, dev);
+		if (ret < 0) {
+			dev_err(dev, "request_firmware failed: %d\n", ret);
+			return ret;
+		}
+	#endif
 
 	/* boot the remote processor up again */
 	ret = rproc_start(rproc, firmware_p);
 
+	#ifndef	CONFIG_QCOM_NON_SECURE_PIL
 	release_firmware(firmware_p);
-
+	#endif
 	return ret;
 }
 
@@ -1955,19 +1966,24 @@ int rproc_boot(struct rproc *rproc)
 	} else {
 		dev_info(dev, "powering up %s\n", rproc->name);
 
-		/* load firmware */
-		ret = request_firmware(&firmware_p, rproc->firmware, dev);
-		if (ret < 0) {
-			dev_err(dev, "request_firmware failed: %d\n", ret);
-			goto downref_rproc;
-		}
+		#ifndef CONFIG_QCOM_NON_SECURE_PIL
+			/* load firmware */
+			ret = request_firmware(&firmware_p, rproc->firmware, dev);
+			if (ret < 0) {
+				dev_err(dev, "request_firmware failed: %d\n", ret);
+				goto downref_rproc;
+			}
+		#endif
 
 		ret = rproc_fw_boot(rproc, firmware_p);
-
+		#ifndef CONFIG_QCOM_NON_SECURE_PIL
 		release_firmware(firmware_p);
+		#endif
 	}
 
+#ifndef CONFIG_QCOM_NON_SECURE_PIL
 downref_rproc:
+#endif
 	if (ret)
 		atomic_dec(&rproc->power);
 unlock_mutex:
-- 
2.34.1

