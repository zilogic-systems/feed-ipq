From 447bffa23da94ae49652a18bd71243fb4db6aeed Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Wed, 6 Dec 2023 16:24:57 +0530
Subject: [PATCH 413/500] ipq: mem: Track memory usage selectively

Track memory usage selectively for networking stack and wifi / eth
device drivers.

Change-Id: Ia0b675764b1e3a9eb8bab294996f087edc56a822
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 include/linux/debugobjects.h | 15 +++++++++++++++
 include/linux/dmapool.h      | 15 +++++++++++++++
 include/linux/mm.h           |  4 ++++
 lib/Kconfig.debug            |  4 ++++
 lib/Makefile                 |  1 +
 mm/Makefile                  |  1 +
 mm/dmapool.c                 | 15 ---------------
 mm/mm_init.c                 |  1 +
 scripts/Makefile.build       | 33 +++++++++++++++++++++++++++++++++
 9 files changed, 74 insertions(+), 15 deletions(-)

diff --git a/include/linux/debugobjects.h b/include/linux/debugobjects.h
index 738f366dffeb..fb9abddbdb7e 100644
--- a/include/linux/debugobjects.h
+++ b/include/linux/debugobjects.h
@@ -106,6 +106,21 @@ static inline void debug_objects_early_init(void) { }
 static inline void debug_objects_mem_init(void) { }
 #endif
 
+#ifdef CONFIG_DEBUG_MEM_USAGE
+struct debug_obj_trace {
+	struct hlist_node node;
+	void *addr;
+	void *stack[9];
+	int size;
+};
+
+extern void debug_object_trace_init(void *addr, void **stack, size_t size);
+extern void debug_object_trace_free(void *addr);
+extern void debug_mem_usage_init(void);
+#else
+static inline void debug_mem_usage_init(void) { }
+#endif
+
 #ifdef CONFIG_DEBUG_OBJECTS_FREE
 extern void debug_check_no_obj_freed(const void *address, unsigned long size);
 #else
diff --git a/include/linux/dmapool.h b/include/linux/dmapool.h
index f632ecfb4238..369add6f4b56 100644
--- a/include/linux/dmapool.h
+++ b/include/linux/dmapool.h
@@ -16,6 +16,21 @@
 
 struct device;
 
+struct dma_pool {		/* the pool */
+	struct list_head page_list;
+	spinlock_t lock;
+	struct dma_block *next_block;
+	size_t nr_blocks;
+	size_t nr_active;
+	size_t nr_pages;
+	struct device *dev;
+	unsigned int size;
+	unsigned int allocation;
+	unsigned int boundary;
+	char name[32];
+	struct list_head pools;
+};
+
 #ifdef CONFIG_HAS_DMA
 
 struct dma_pool *dma_pool_create(const char *name, struct device *dev, 
diff --git a/include/linux/mm.h b/include/linux/mm.h
index bf5d0b1b16f4..0b986dd637f8 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -4062,4 +4062,8 @@ static inline void accept_memory(phys_addr_t start, phys_addr_t end)
 
 #endif
 
+#ifdef CONFIG_DEBUG_MEM_USAGE
+extern int debug_mem_usage_enabled;
+#endif
+
 #endif /* _LINUX_MM_H */
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index aa353a204224..5809d3e75c62 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -968,6 +968,10 @@ config DEBUG_STACKOVERFLOW
 
 	  If in doubt, say "N".
 
+config DEBUG_MEM_USAGE
+	default n
+	bool "Track memory usage selectively"
+
 source "lib/Kconfig.kasan"
 source "lib/Kconfig.kfence"
 source "lib/Kconfig.kmsan"
diff --git a/lib/Makefile b/lib/Makefile
index b8057fce3043..04698f9deb21 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -180,6 +180,7 @@ obj-$(CONFIG_ASSOCIATIVE_ARRAY) += assoc_array.o
 obj-$(CONFIG_DEBUG_PREEMPT) += smp_processor_id.o
 obj-$(CONFIG_LIST_HARDENED) += list_debug.o
 obj-$(CONFIG_DEBUG_OBJECTS) += debugobjects.o
+obj-$(CONFIG_DEBUG_MEM_USAGE) += debug_mem_usage.o
 
 obj-$(CONFIG_BITREVERSE) += bitrev.o
 obj-$(CONFIG_LINEAR_RANGES) += linear_ranges.o
diff --git a/mm/Makefile b/mm/Makefile
index ec65984e2ade..d81fa6f6318e 100644
--- a/mm/Makefile
+++ b/mm/Makefile
@@ -123,6 +123,7 @@ obj-$(CONFIG_SECRETMEM) += secretmem.o
 obj-$(CONFIG_CMA_SYSFS) += cma_sysfs.o
 obj-$(CONFIG_USERFAULTFD) += userfaultfd.o
 obj-$(CONFIG_IDLE_PAGE_TRACKING) += page_idle.o
+obj-$(CONFIG_DEBUG_MEM_USAGE) += wrap_mem_api.o
 obj-$(CONFIG_DEBUG_PAGEALLOC) += debug_page_alloc.o
 obj-$(CONFIG_DEBUG_PAGE_REF) += debug_page_ref.o
 obj-$(CONFIG_DAMON) += damon/
diff --git a/mm/dmapool.c b/mm/dmapool.c
index a151a21e571b..6f69460ef168 100644
--- a/mm/dmapool.c
+++ b/mm/dmapool.c
@@ -45,21 +45,6 @@ struct dma_block {
 	dma_addr_t dma;
 };
 
-struct dma_pool {		/* the pool */
-	struct list_head page_list;
-	spinlock_t lock;
-	struct dma_block *next_block;
-	size_t nr_blocks;
-	size_t nr_active;
-	size_t nr_pages;
-	struct device *dev;
-	unsigned int size;
-	unsigned int allocation;
-	unsigned int boundary;
-	char name[32];
-	struct list_head pools;
-};
-
 struct dma_page {		/* cacheable header for 'allocation' bytes */
 	struct list_head page_list;
 	void *vaddr;
diff --git a/mm/mm_init.c b/mm/mm_init.c
index 50f2f34745af..b755ccccdd67 100644
--- a/mm/mm_init.c
+++ b/mm/mm_init.c
@@ -2787,6 +2787,7 @@ void __init mm_core_init(void)
 	ptlock_cache_init();
 	pgtable_cache_init();
 	debug_objects_mem_init();
+	debug_mem_usage_init();
 	vmalloc_init();
 	/* If no deferred init page_ext now, as vmap is fully initialized */
 	if (!deferred_struct_pages)
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index d39c6f372802..1a8beb815597 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -155,10 +155,43 @@ ifdef CONFIG_LTO_CLANG
 cmd_ld_single_m = $(if $(is-single-obj-m), ; $(LD) $(ld_flags) -r -o $(tmp-target) $@; mv $(tmp-target) $@)
 endif
 
+ifdef CONFIG_DEBUG_MEM_USAGE
+CFLAGS_WRAP := -include include/linux/debug_mem_usage.h
+NEW_CFLAGS_WRAP := $(CFLAGS_WRAP)
+
+cmd_export_new_cflags = \
+	$(if $(findstring kernel/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring arch/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring init/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring mm/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring block/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring kernel/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring block/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring usr/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring security/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring sound/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring crypto/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring firmware/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring samples/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring tools/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring lib/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring fs/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring ipc/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring drivers/, $@), $(filter-out $(NEW_CFLAGS_WRAP), $(CFLAGS_WRAP))) \
+	$(if $(findstring drivers/net/, $@), $(CFLAGS_WRAP)) \
+	$(if $(findstring net/, $@), $(CFLAGS_WRAP)) \
+	$(if $(findstring /linux-ipq, $@), $(CFLAGS_WRAP))
+
+quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
+      cmd_cc_o_c = $(CC) $(c_flags) $(cmd_export_new_cflags) -c -o $@ $< \
+		$(cmd_ld_single_m) \
+		$(cmd_objtool)
+else
 quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
       cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $< \
 		$(cmd_ld_single_m) \
 		$(cmd_objtool)
+endif
 
 ifdef CONFIG_MODVERSIONS
 # When module versioning is enabled the following steps are executed:
-- 
2.34.1

