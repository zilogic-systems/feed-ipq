From 1992dd54922505a971af97009124428e45b6c3e4 Mon Sep 17 00:00:00 2001
From: Hariharan K <quic_harihk@quicinc.com>
Date: Fri, 20 Oct 2023 01:20:25 +0530
Subject: [PATCH 423/500] regulator: qcom: smd: Add support to define the
 bootup voltage

Kernel does not know the initial voltage set by the bootloaders.
During regulator registration, the voltage variable is just decleared
and it is zero. Based on it, regulator framework considers current
voltage as zero and trying to bringing up each regulator to minimum
supported voltage.

This introduces a dip in voltage during kernel boot and getting
stabilized once the voltage scaling comes in to picture.

To avoid the voltage dip, this patch adds support to define the
bootup voltage set by the boodloaders and based on it, regulator
framework understands that proper voltage is already set.

Referred from change - Ica9dbd8ff400f1fd83b9b29b829d77fbf34b7fe7

Change-Id: Ic757d21626bc48ebdc72ab70fa160f423ed0d47a
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
---
 drivers/regulator/qcom_smd-regulator.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/drivers/regulator/qcom_smd-regulator.c b/drivers/regulator/qcom_smd-regulator.c
index f53ada076252..0c2ffd6130c3 100644
--- a/drivers/regulator/qcom_smd-regulator.c
+++ b/drivers/regulator/qcom_smd-regulator.c
@@ -790,12 +790,13 @@ struct rpm_regulator_data {
 	u32 id;
 	const struct regulator_desc *desc;
 	const char *supply;
+	int boot_uV; //To store the bootup voltage set by bootloaders
 };
 
 static const struct rpm_regulator_data rpm_mp5496_regulators[] = {
-	{ "s1", QCOM_SMD_RPM_SMPA, 1, &mp5496_smps, "s1" },
-	{ "s2", QCOM_SMD_RPM_SMPA, 2, &mp5496_smps, "s2" },
-	{ "l2", QCOM_SMD_RPM_LDOA, 2, &mp5496_ldoa2, "l2" },
+	{ "s1", QCOM_SMD_RPM_SMPA, 1, &mp5496_smps, "s1", 875000 },
+	{ "s2", QCOM_SMD_RPM_SMPA, 2, &mp5496_smps, "s2", 875000 },
+	{ "l2", QCOM_SMD_RPM_LDOA, 2, &mp5496_ldoa2, "l2", 2950000 },
 	{}
 };
 
@@ -1377,6 +1378,8 @@ static int rpm_regulator_init_vreg(struct qcom_rpm_reg *vreg, struct device *dev
 	vreg->rpm	= rpm;
 	vreg->type	= rpm_data->type;
 	vreg->id	= rpm_data->id;
+	if (rpm_data->boot_uV)
+		vreg->uV = rpm_data->boot_uV;
 
 	memcpy(&vreg->desc, rpm_data->desc, sizeof(vreg->desc));
 	vreg->desc.name = rpm_data->name;
-- 
2.34.1

