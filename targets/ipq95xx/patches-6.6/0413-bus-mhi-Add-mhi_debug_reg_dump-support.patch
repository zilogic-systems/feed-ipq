From 339594ebb5c842ad1e31b1b8e99c58bb498f49b4 Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Thu, 30 Nov 2023 15:56:02 +0530
Subject: [PATCH 407/500] bus: mhi: Add mhi_debug_reg_dump support

This function is used to dump mhi debug registers in
RDDM path and it can be really useful in helping to
identify the cause of issues quickly.

Change-Id: I1a4b50458361bc0152792d51be50a0db4f24a0db
Signed-off-by: Selvam Sathappan Periakaruppan <speriaka@codeaurora.org>
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 drivers/bus/mhi/host/main.c | 65 +++++++++++++++++++++++++++++++++++++
 include/linux/mhi.h         |  6 ++++
 2 files changed, 71 insertions(+)

diff --git a/drivers/bus/mhi/host/main.c b/drivers/bus/mhi/host/main.c
index a2956177e844..b936f3487142 100644
--- a/drivers/bus/mhi/host/main.c
+++ b/drivers/bus/mhi/host/main.c
@@ -1707,3 +1707,68 @@ void mhi_dump_errdbg_reg(struct mhi_controller *mhi_cntrl)
 	}
 }
 EXPORT_SYMBOL_GPL(mhi_dump_errdbg_reg);
+
+void mhi_debug_reg_dump(struct mhi_controller *mhi_cntrl)
+{
+	enum mhi_state state;
+	enum mhi_ee_type ee;
+	int i, ret;
+	u32 val;
+	void __iomem *mhi_base = mhi_cntrl->regs;
+	void __iomem *bhi_base = mhi_cntrl->bhi;
+	void __iomem *bhie_base = mhi_cntrl->bhie;
+	void __iomem *wake_db = mhi_cntrl->wake_db;
+	struct {
+		const char *name;
+		int offset;
+		void *base;
+	} debug_reg[] = {
+		{ "MHI_CNTRL", MHICTRL, mhi_base},
+		{ "MHI_STATUS", MHISTATUS, mhi_base},
+		{ "MHI_WAKE_DB", 0, wake_db},
+		{ "BHI_EXECENV", BHI_EXECENV, bhi_base},
+		{ "BHI_STATUS", BHI_STATUS, bhi_base},
+		{ "BHI_ERRCODE", BHI_ERRCODE, bhi_base},
+		{ "BHI_ERRDBG1", BHI_ERRDBG1, bhi_base},
+		{ "BHI_ERRDBG2", BHI_ERRDBG2, bhi_base},
+		{ "BHI_ERRDBG3", BHI_ERRDBG3, bhi_base},
+		{ "BHIE_TXVEC_DB", BHIE_TXVECDB_OFFS, bhie_base},
+		{ "BHIE_TXVEC_STATUS", BHIE_TXVECSTATUS_OFFS, bhie_base},
+		{ "BHIE_RXVEC_DB", BHIE_RXVECDB_OFFS, bhie_base},
+		{ "BHIE_RXVEC_STATUS", BHIE_RXVECSTATUS_OFFS, bhie_base},
+		{ "BHIE_IMGTXDB", BHI_IMGTXDB, bhie_base},
+		{ NULL },
+	};
+
+	dev_info(&mhi_cntrl->mhi_dev->dev,
+		 "host pm_state:%s dev_state:%s ee:%s\n",
+		 to_mhi_pm_state_str(mhi_cntrl->pm_state),
+		 mhi_state_str(mhi_cntrl->dev_state),
+		 TO_MHI_EXEC_STR(mhi_cntrl->ee));
+
+	state = mhi_get_mhi_state(mhi_cntrl);
+
+	if (!mhi_cntrl->bhi) {
+		dev_err(&mhi_cntrl->mhi_dev->dev,
+			"BHI not initialized, failed to dump debug registers\n");
+		return;
+	}
+
+	ee = mhi_get_exec_env(mhi_cntrl);
+
+	dev_info(&mhi_cntrl->mhi_dev->dev,
+		 "device ee:%s dev_state:%s\n", TO_MHI_EXEC_STR(ee),
+		 mhi_state_str(state));
+
+	for (i = 0; debug_reg[i].name; i++) {
+		if (!debug_reg[i].base)
+			continue;
+
+		ret = mhi_read_reg(mhi_cntrl, debug_reg[i].base,
+				   debug_reg[i].offset, &val);
+		dev_info(&mhi_cntrl->mhi_dev->dev,
+			 "reg:%s val:0x%x, ret:%d\n", debug_reg[i].name, val,
+			 ret);
+	}
+}
+EXPORT_SYMBOL_GPL(mhi_debug_reg_dump);
diff --git a/include/linux/mhi.h b/include/linux/mhi.h
index aea6378f4438..4614b72fbfe3 100644
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -827,4 +827,10 @@ bool mhi_queue_is_full(struct mhi_device *mhi_dev, enum dma_data_direction dir);
  * @mhi_cntrl: MHI controller
  */
 void mhi_dump_errdbg_reg(struct mhi_controller *mhi_cntrl);
+
+/**
+ * mhi_debug_reg_dump - dump MHI registers for debug purpose
+ * @mhi_cntrl: MHI controller
+ */
+void mhi_debug_reg_dump(struct mhi_controller *mhi_cntrl);
 #endif /* _MHI_H_ */
-- 
2.34.1

