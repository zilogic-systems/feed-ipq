From 888856fff954f6127f694dac7974ad7f6d1279fb Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Tue, 5 Dec 2023 14:02:27 +0530
Subject: [PATCH 432/500] pcie: qcom: ipq5332: Add support to update system_noc
 rate adapter

Using "system_noc" in pcie memory reg, we can update the
system_noc rate adapter register configuration.
The rate adapter register is configured with a calculated value which can
prevent wait cycles when connecting a low-bandwidth relatively narrow
channel to a high-bandwidth relatively wide channel.

The rate adapter value is calculated as below:
/* RATEADAPT_VAL = 256 / ((NOC frequency / PCIe AXI frequency) - 1) */

For 1Lane PCIe,
RATEADAPT_VAL = 256 / ((266M / 240M) - 1) = 2363 > Max Value 1023
Hence, configure the ratio of Rate Adapter to max value by setting
system_noc_Dtp_Link_req_xm_pcie_g3x1_<n>_I_rateadapt_Rate_Low to 0x3FF.

For 2Lane PCIe,
Bypass Rate Adapter by setting the below register to 0x1 as the
NOC frequency and the PCIe AXI frequency are the same.
system_noc_Dtp_Link_req_xm_pcie_g3x2_I_rateadapt_Bypass_Low

Change-Id: I0785429a57443e499668264aaee9d9dd6029e027
Signed-off-by: Devi Priya <quic_devipriy@quicinc.com>
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/pci/controller/dwc/pcie-qcom.c | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/drivers/pci/controller/dwc/pcie-qcom.c b/drivers/pci/controller/dwc/pcie-qcom.c
index bfd11557c52c..dd5934630904 100644
--- a/drivers/pci/controller/dwc/pcie-qcom.c
+++ b/drivers/pci/controller/dwc/pcie-qcom.c
@@ -122,6 +122,8 @@
 /* RATEADAPT_VAL = 256 / ((342M / 240M) - 1) */
 #define AGGR_NOC_PCIE_1LANE_RATEADAPT_VAL	0x200
 
+#define SYSTEM_NOC_PCIE_RATEADAPT_BYPASS	0x1
+
 /* PARF_MHI_CLOCK_RESET_CTRL register fields */
 #define AHB_CLK_EN				BIT(0)
 #define MSTR_AXI_CLK_EN				BIT(1)
@@ -261,6 +263,7 @@ struct qcom_pcie {
 	void __iomem *mhi;
 	resource_size_t parf_size;
 	void __iomem *aggr_noc;
+	void __iomem *system_noc;
 	union qcom_pcie_resources res;
 	struct phy *phy;
 	struct gpio_desc *reset;
@@ -270,6 +273,7 @@ struct qcom_pcie {
 	bool suspended;
 	uint32_t axi_wr_addr_halt;
 	uint32_t domain;
+	uint32_t num_lanes;
 };
 
 #define to_qcom_pcie(x)		dev_get_drvdata((x)->dev)
@@ -1167,6 +1171,11 @@ static int qcom_pcie_post_init(struct qcom_pcie *pcie)
 	if (pcie->aggr_noc != NULL && !IS_ERR(pcie->aggr_noc))
 		writel(AGGR_NOC_PCIE_1LANE_RATEADAPT_VAL, pcie->aggr_noc);
 
+	if (pcie->system_noc != NULL && !IS_ERR(pcie->system_noc)) {
+		if (pcie->num_lanes == 2)
+			writel(SYSTEM_NOC_PCIE_RATEADAPT_BYPASS, pcie->system_noc);
+	}
+
 	dw_pcie_dbi_ro_wr_en(pci);
 
 	writel(PCIE_CAP_SLOT_VAL, pci->dbi_base + offset + PCI_EXP_SLTCAP);
@@ -1628,6 +1637,7 @@ static int qcom_pcie_probe(struct platform_device *pdev)
 	struct resource *res;
 	struct dw_pcie *pci;
 	int ret;
+	uint32_t num_lanes = 0;
 
 	pcie_cfg = of_device_get_match_data(dev);
 	if (!pcie_cfg || !pcie_cfg->ops) {
@@ -1687,11 +1697,24 @@ static int qcom_pcie_probe(struct platform_device *pdev)
 		}
 	}
 
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "system_noc");
+	if (res != NULL) {
+		pcie->system_noc = devm_ioremap_resource(dev, res);
+		if (IS_ERR(pcie->system_noc)) {
+			ret = PTR_ERR(pcie->system_noc);
+			goto err_pm_runtime_put;
+		}
+	}
+
 	of_property_read_u32(pdev->dev.of_node, "axi-halt-val",
 				&pcie->axi_wr_addr_halt);
 
 	of_property_read_u32(pdev->dev.of_node, "linux,pci-domain",&pcie->domain);
 
+	of_property_read_u32(pdev->dev.of_node, "num-lanes",
+				&num_lanes);
+	pcie->num_lanes = num_lanes;
+
 	/* MHI region is optional */
 	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "mhi");
 	if (res) {
-- 
2.34.1

