From d07039264a75c131e627d5f2f13cf286efb63e42 Mon Sep 17 00:00:00 2001
From: Suman Ghosh <sumaghos@codeaurora.org>
Date: Thu, 10 Dec 2020 00:11:41 +0530
Subject: [PATCH 412/500] net: macvlan: Add statistics update function for
 macvlan net device.

Signed-off-by: Suman Ghosh <sumaghos@codeaurora.org>
Change-Id: I9cd995f9d1c0f85c61781a8af845b4dbb86bebd0

net: macvlan: Avoid updating error and drop counters for offloaded statistics.

Signed-off-by: Suman Ghosh <sumaghos@codeaurora.org>
Change-Id: Ibb7f3f5a0e73cda140adee2c1640af03c698f6e6
---
 drivers/net/macvlan.c      | 27 +++++++++++++++++++++++++++
 include/linux/if_macvlan.h | 24 ++++++++++++++++++++++++
 2 files changed, 51 insertions(+)

diff --git a/drivers/net/macvlan.c b/drivers/net/macvlan.c
index c8da94af4161..7aa3d83b6d54 100644
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@ -960,6 +960,32 @@ static void macvlan_uninit(struct net_device *dev)
 		macvlan_port_destroy(port->dev);
 }
 
+/* Update macvlan statistics processed by offload engines */
+static void macvlan_dev_update_stats(struct net_device *dev,
+				     struct rtnl_link_stats64 *offl_stats,
+				     bool update_mcast_rx_stats)
+{
+	struct vlan_pcpu_stats *stats;
+	struct macvlan_dev *macvlan;
+
+	/* Is this a macvlan? */
+	if (!netif_is_macvlan(dev))
+		return;
+
+	macvlan = netdev_priv(dev);
+	stats = this_cpu_ptr(macvlan->pcpu_stats);
+	u64_stats_update_begin(&stats->syncp);
+	u64_stats_add(&stats->rx_packets, offl_stats->rx_packets);
+	u64_stats_add(&stats->rx_bytes, offl_stats->rx_bytes);
+	u64_stats_add(&stats->tx_packets, offl_stats->tx_packets);
+	u64_stats_add(&stats->tx_bytes, offl_stats->tx_bytes);
+	/* Update multicast statistics */
+	if (unlikely(update_mcast_rx_stats)) {
+		u64_stats_add(&stats->rx_multicast, offl_stats->rx_packets);
+	}
+	u64_stats_update_end(&stats->syncp);
+}
+
 static void macvlan_dev_get_stats64(struct net_device *dev,
 				    struct rtnl_link_stats64 *stats)
 {
@@ -1506,6 +1532,7 @@ int macvlan_common_newlink(struct net *src_net, struct net_device *dev,
 	vlan->dev      = dev;
 	vlan->port     = port;
 	vlan->set_features = MACVLAN_FEATURES;
+	vlan->offload_stats_update = macvlan_dev_update_stats;
 
 	vlan->mode     = MACVLAN_MODE_VEPA;
 	if (data && data[IFLA_MACVLAN_MODE])
diff --git a/include/linux/if_macvlan.h b/include/linux/if_macvlan.h
index 523025106a64..b079070c6d3d 100644
--- a/include/linux/if_macvlan.h
+++ b/include/linux/if_macvlan.h
@@ -15,6 +15,11 @@ struct macvlan_port;
 #define MACVLAN_MC_FILTER_BITS	8
 #define MACVLAN_MC_FILTER_SZ	(1 << MACVLAN_MC_FILTER_BITS)
 
+/*
+ * Callback for updating interface statistics for macvlan flows offloaded from host CPU.
+ */
+typedef void (*macvlan_offload_stats_update_cb_t)(struct net_device *dev, struct rtnl_link_stats64 *stats, bool update_mcast_rx_stats);
+
 struct macvlan_dev {
 	struct net_device	*dev;
 	struct list_head	list;
@@ -35,6 +40,7 @@ struct macvlan_dev {
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	struct netpoll		*netpoll;
 #endif
+	macvlan_offload_stats_update_cb_t	offload_stats_update;
 };
 
 static inline void macvlan_count_rx(const struct macvlan_dev *vlan,
@@ -68,6 +74,24 @@ extern void macvlan_dellink(struct net_device *dev, struct list_head *head);
 extern int macvlan_link_register(struct rtnl_link_ops *ops);
 
 #if IS_ENABLED(CONFIG_MACVLAN)
+static inline void
+macvlan_offload_stats_update(struct net_device *dev,
+			     struct rtnl_link_stats64 *stats,
+			     bool update_mcast_rx_stats)
+{
+	struct macvlan_dev *macvlan = netdev_priv(dev);
+
+	macvlan->offload_stats_update(dev, stats, update_mcast_rx_stats);
+}
+
+static inline enum
+macvlan_mode macvlan_get_mode(struct net_device *dev)
+{
+	struct macvlan_dev *macvlan = netdev_priv(dev);
+
+	return macvlan->mode;
+}
+
 static inline struct net_device *
 macvlan_dev_real_dev(const struct net_device *dev)
 {
-- 
2.34.1

