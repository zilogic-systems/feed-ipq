From 7aee7b5498c5c5e4a1e034dc15d876ea7a774ff7 Mon Sep 17 00:00:00 2001
From: Saahil Tomar <quic_saahtoma@quicinc.com>
Date: Wed, 1 Nov 2023 11:26:40 +0530
Subject: [PATCH 455/500] soc: qcom: socinfo: Integrate oem id and prod id

This patch integrates oem id and prod id fields
in soc device and this field gets updated from
SMEM which is populated by bootloader.

This change also exposes sysfs interface to
enable reading the same from user space.

Change-Id: I629fb53229e4358740673a11def2429ca9c9f5d6
Signed-off-by: Saahil Tomar <quic_saahtoma@quicinc.com>
---
 drivers/base/soc.c         | 12 ++++++++++++
 drivers/soc/qcom/socinfo.c | 32 ++++++++++++++++++++++++++++++++
 include/linux/sys_soc.h    |  2 ++
 3 files changed, 46 insertions(+)

diff --git a/drivers/base/soc.c b/drivers/base/soc.c
index 8dec5228fde3..5df499d8dca6 100644
--- a/drivers/base/soc.c
+++ b/drivers/base/soc.c
@@ -36,6 +36,8 @@ static bool soc_bus_registered;
 static DEVICE_ATTR(machine,		0444, soc_info_show,  NULL);
 static DEVICE_ATTR(family,		0444, soc_info_show,  NULL);
 static DEVICE_ATTR(serial_number,	0444, soc_info_show,  NULL);
+static DEVICE_ATTR(oem_id,		0444, soc_info_show,  NULL);
+static DEVICE_ATTR(prod_id,		0444, soc_info_show,  NULL);
 static DEVICE_ATTR(soc_id,		0444, soc_info_show,  NULL);
 static DEVICE_ATTR(revision,		0444, soc_info_show,  NULL);
 
@@ -59,6 +61,10 @@ static umode_t soc_attribute_mode(struct kobject *kobj,
 		return attr->mode;
 	if ((attr == &dev_attr_serial_number.attr) && soc_dev->attr->serial_number)
 		return attr->mode;
+	if ((attr == &dev_attr_oem_id.attr) && (soc_dev->attr->oem_id))
+		return attr->mode;
+	if ((attr == &dev_attr_prod_id.attr) && (soc_dev->attr->prod_id))
+		return attr->mode;
 	if ((attr == &dev_attr_soc_id.attr) && soc_dev->attr->soc_id)
 		return attr->mode;
 
@@ -80,6 +86,10 @@ static ssize_t soc_info_show(struct device *dev, struct device_attribute *attr,
 		output = soc_dev->attr->revision;
 	else if (attr == &dev_attr_serial_number)
 		output = soc_dev->attr->serial_number;
+	else if (attr == &dev_attr_oem_id)
+		output = soc_dev->attr->oem_id;
+	else if (attr == &dev_attr_prod_id)
+		output = soc_dev->attr->prod_id;
 	else if (attr == &dev_attr_soc_id)
 		output = soc_dev->attr->soc_id;
 	else
@@ -92,6 +102,8 @@ static struct attribute *soc_attr[] = {
 	&dev_attr_machine.attr,
 	&dev_attr_family.attr,
 	&dev_attr_serial_number.attr,
+	&dev_attr_oem_id.attr,
+	&dev_attr_prod_id.attr,
 	&dev_attr_soc_id.attr,
 	&dev_attr_revision.attr,
 	NULL,
diff --git a/drivers/soc/qcom/socinfo.c b/drivers/soc/qcom/socinfo.c
index 497cfb720fcb..a2ac499a9896 100644
--- a/drivers/soc/qcom/socinfo.c
+++ b/drivers/soc/qcom/socinfo.c
@@ -16,6 +16,7 @@
 #include <linux/stringify.h>
 #include <linux/sys_soc.h>
 #include <linux/types.h>
+#include <linux/io.h>
 
 #include <asm/unaligned.h>
 
@@ -29,6 +30,8 @@
 #define SOCINFO_MINOR(ver) ((ver) & 0xffff)
 #define SOCINFO_VERSION(maj, min)  ((((maj) & 0xffff) << 16)|((min) & 0xffff))
 
+#define OEMID_REG 0xA6080
+
 /* Helper macros to create soc_id table */
 #define qcom_board_id(id) QCOM_ID_ ## id, __stringify(id)
 #define qcom_board_id_named(id, name) QCOM_ID_ ## id, (name)
@@ -513,6 +516,20 @@ static int qcom_show_pmic_die_revision(struct seq_file *seq, void *p)
 	return 0;
 }
 
+static void qcom_get_oemid(__le32 *oemid, __le32 *prodid)
+{
+	void __iomem *oem_id_reg;
+	u32 value;
+
+	oem_id_reg = ioremap(OEMID_REG, 4);
+	value = readl(oem_id_reg);
+	/* The upper 16 bits hold the OEM ID and lower 16 bits hold the OEM PRODUCT ID */
+	*oemid = (__le32)(value >> 16);
+	*prodid = (__le32)(value & 0xffff);
+
+	iounmap(oem_id_reg);
+}
+
 static int qcom_show_chip_id(struct seq_file *seq, void *p)
 {
 	struct socinfo *socinfo = seq->private;
@@ -737,9 +754,13 @@ static int qcom_socinfo_probe(struct platform_device *pdev)
 	struct qcom_socinfo *qs;
 	struct socinfo *info;
 	size_t item_size;
+	__le32 oem_id, prod_id;
 
 	info = qcom_smem_get(QCOM_SMEM_HOST_ANY, SMEM_HW_SW_BUILD_ID,
 			      &item_size);
+
+	qcom_get_oemid(&oem_id, &prod_id);
+
 	if (IS_ERR(info)) {
 		dev_err(&pdev->dev, "Couldn't find socinfo\n");
 		return PTR_ERR(info);
@@ -762,10 +783,21 @@ static int qcom_socinfo_probe(struct platform_device *pdev)
 							"%u",
 							le32_to_cpu(info->serial_num));
 
+	qs->attr.oem_id = devm_kasprintf(&pdev->dev, GFP_KERNEL,
+						 "%u",
+						 le32_to_cpu(oem_id));
+
+	qs->attr.prod_id = devm_kasprintf(&pdev->dev, GFP_KERNEL,
+						 "%u",
+						 le32_to_cpu(prod_id));
+
 	qs->soc_dev = soc_device_register(&qs->attr);
 	if (IS_ERR(qs->soc_dev))
 		return PTR_ERR(qs->soc_dev);
 
+	pr_info("OEM_ID: %s, PROD_ID: %s\n", qs->attr.oem_id,
+						qs->attr.prod_id);
+
 	socinfo_debugfs_init(qs, info, item_size);
 
 	/* Feed the soc specific unique data into entropy pool */
diff --git a/include/linux/sys_soc.h b/include/linux/sys_soc.h
index d9b3cf0f410c..06180eaa6f56 100644
--- a/include/linux/sys_soc.h
+++ b/include/linux/sys_soc.h
@@ -13,6 +13,8 @@ struct soc_device_attribute {
 	const char *family;
 	const char *revision;
 	const char *serial_number;
+	const char *oem_id;
+	const char *prod_id;
 	const char *soc_id;
 	const void *data;
 	const struct attribute_group *custom_attr_group;
-- 
2.34.1

