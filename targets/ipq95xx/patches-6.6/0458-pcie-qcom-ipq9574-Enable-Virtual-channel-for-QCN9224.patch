From 7b1d540876dabecb28e671a0edc3645806114f0c Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Thu, 4 Jan 2024 22:07:02 +0530
Subject: [PATCH 464/500] pcie: qcom: ipq9574: Enable Virtual channel for
 QCN9224

This patch enables the VC1 if the end point is QCN9224.
Fucntion added in the PCI_FINAL_FIXUP and feature can be
enabled from the DTS node using "enable_virtual_channel"
flag. This will enable the VC1 on both IPQ9574 and QCN9224.

This is a snapshot of the commit
3777826ba4d3fbc0294eb8028f0e7bd7853cafe6
from win.linuxopenwrt.2.1 branch and
oss/kernel/linux-ipq-5.4 project.

Change-Id: Ie0cbc64697bc1d00e0ecc4a9e4caeba1953c0888
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/pci/controller/dwc/pcie-qcom.c | 104 +++++++++++++++++++++++++
 1 file changed, 104 insertions(+)

diff --git a/drivers/pci/controller/dwc/pcie-qcom.c b/drivers/pci/controller/dwc/pcie-qcom.c
index 1a8dd027a090..d284a685f874 100644
--- a/drivers/pci/controller/dwc/pcie-qcom.c
+++ b/drivers/pci/controller/dwc/pcie-qcom.c
@@ -138,6 +138,27 @@
 #define PARF_INT_ALL_LINK_DOWN                  BIT(1)
 #define PARF_INT_ALL_LINK_UP                    BIT(13)
 
+/* Virtual Channel registers and fields */
+#define PCIE_TYPE0_VC_CAPABILITIES_REG_1 	0x14c
+#define PCIE_TYPE0_RESOURCE_CON_REG_VC0 	0x15c
+#define PCIE_TYPE0_RESOURCE_CON_REG_VC1 	0x168
+#define PCIE_TYPE0_RESOURCE_STATUS_REG_VC1 	0x16c
+
+#define EP_REG_BASE 				0x1E1DFFF
+#define WINDOW_RANGE_MASK 			0x7FFFE
+
+#define VC_EXT_VC_CNT_MASK 			GENMASK(2, 0)
+#define VC_TC_MAP_VC_BIT1_MASK 			GENMASK(7, 1)
+#define VC_ID_VC1_MASK 				GENMASK(26, 24)
+#define VC_ENABLE_VC1_MASK 			BIT(31)
+#define VC_NEGO_PENDING_VC1_MASK 		BIT(17)
+
+#define VC_EXT_VC_CNT_OFFSET(x) 		((x) << 0)
+#define VC_TC_MAP_VC_BIT1_OFFSET(x) 		((x) << 1)
+#define VC_ID_VC1_OFFSET(x) 			((x) << 24)
+#define VC_ENABLE_VC1_OFFSET(x) 		((x) << 31)
+#define VC_NEGO_PENDING_VC1_OFFSET(x) 		((x) << 17)
+
 /* PARF_AXI_MSTR_WR_ADDR_HALT register fields */
 #define EN					BIT(31)
 
@@ -284,6 +305,7 @@ struct qcom_pcie {
 	uint32_t domain;
 	uint32_t num_lanes;
 	int global_irq;
+	bool enable_vc;
 };
 
 #define to_qcom_pcie(x)		dev_get_drvdata((x)->dev)
@@ -1761,6 +1783,9 @@ static int qcom_pcie_probe(struct platform_device *pdev)
 
 	of_property_read_u32(pdev->dev.of_node, "linux,pci-domain",&pcie->domain);
 
+	pcie->enable_vc = of_property_read_bool(pdev->dev.of_node,
+					"enable-virtual-channel");
+
 	of_property_read_u32(pdev->dev.of_node, "num-lanes",
 				&num_lanes);
 	pcie->num_lanes = num_lanes;
@@ -1924,6 +1949,84 @@ static void qcom_fixup_class(struct pci_dev *dev)
 	dev->class = PCI_CLASS_BRIDGE_PCI_NORMAL;
 }
 
+static void qcom_ipq_tc_vc_mapping(struct pci_dev *dev)
+{
+	struct dw_pcie_rp *pp;
+	struct dw_pcie *pci;
+	struct qcom_pcie *pcie;
+	int timeout = 50;
+	u32 val;
+
+	pp = dev->bus->sysdata;
+	pci = to_dw_pcie_from_pp(pp);
+	pcie = to_qcom_pcie(pci);
+
+	if (!pcie->enable_vc)
+		return;
+
+	dev_dbg(&dev->dev, "Enabling Virtual channel for 0x%x:0x%x\n",dev->vendor, dev->device);
+
+	/* Read device VC capabilities */
+	pci_read_config_dword(dev, PCIE_TYPE0_VC_CAPABILITIES_REG_1, &val);
+	if((val & VC_EXT_VC_CNT_MASK) != 0x1) {
+		dev_err(&dev->dev,"device 0x%x does not support Virtual Channel\n", dev->device);
+		return;
+	}
+
+	/* Program Q6 VC */
+	pci_read_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC0, &val);
+	val &= ~VC_TC_MAP_VC_BIT1_MASK;
+	val |= VC_TC_MAP_VC_BIT1_OFFSET(0x0);
+	pci_write_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC0, val);
+
+	pci_read_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC1, &val);
+	val &= ~VC_TC_MAP_VC_BIT1_MASK;
+	val |= VC_TC_MAP_VC_BIT1_OFFSET(0x7F);
+	pci_write_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC1, val);
+
+	pci_read_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC1, &val);
+	val &= ~VC_ID_VC1_MASK;
+	val |= VC_ID_VC1_OFFSET(0x1);
+	pci_write_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC1, val);
+
+	pci_read_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC1, &val);
+	val &= ~VC_ENABLE_VC1_MASK;
+	val |= VC_ENABLE_VC1_OFFSET(0x1);
+	pci_write_config_dword(dev, PCIE_TYPE0_RESOURCE_CON_REG_VC1, val);
+
+	/* Program Host VC */
+	val = readl(pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC0);
+	val &= ~VC_TC_MAP_VC_BIT1_MASK;
+	val |= VC_TC_MAP_VC_BIT1_OFFSET(0x0);
+	writel(val, pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC0);
+
+	val = readl(pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC1);
+	val &= ~VC_TC_MAP_VC_BIT1_MASK;
+	val |= VC_TC_MAP_VC_BIT1_OFFSET(0x7F);
+	writel(val, pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC1);
+
+	val = readl(pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC1);
+	val &= ~VC_ID_VC1_MASK;
+	val |= VC_ID_VC1_OFFSET(0x1);
+	writel(val, pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC1);
+
+	val = readl(pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC1);
+	val &= ~VC_ENABLE_VC1_MASK;
+	val |= VC_ENABLE_VC1_OFFSET(0x1);
+	writel(val, pci->dbi_base + PCIE_TYPE0_RESOURCE_CON_REG_VC1);
+
+	do {
+		/* Poll for negotiation */
+		val = readl(pci->dbi_base + PCIE_TYPE0_RESOURCE_STATUS_REG_VC1);
+		if(!(val & VC_NEGO_PENDING_VC1_MASK)) {
+			dev_info(&dev->dev,"Virtual channel is enabled for 0x%x:0x%x\n",
+					dev->vendor, dev->device);
+			break;
+		}
+		timeout--;
+	}while(timeout);
+}
+
 static void qcom_ipq_switch_lane(struct pci_dev *dev)
 {
 	struct dw_pcie_rp *pp;
@@ -1990,6 +2093,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x0107, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x0302, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x1000, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x1001, qcom_fixup_class);
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_QCOM, 0x1109, qcom_ipq_tc_vc_mapping);
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_QCOM, 0x1108, qcom_ipq_switch_lane);
 
 static const struct dev_pm_ops qcom_pcie_pm_ops = {
-- 
2.34.1

