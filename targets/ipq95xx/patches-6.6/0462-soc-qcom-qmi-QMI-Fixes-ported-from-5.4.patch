From a34b27da197d8ec04d11d3e65d04dcd3c57e943f Mon Sep 17 00:00:00 2001
From: Saahil Tomar <quic_saahtoma@quicinc.com>
Date: Fri, 24 Nov 2023 11:42:46 +0530
Subject: [PATCH 456/500] soc: qcom: qmi: QMI Fixes ported from 5.4

This Patch includes the following ports from 5.4
1) soc : qcom : Fix string len issue for Big Endian
(cherry picked from commit I1d9021364bb5018eabdedb81af706b96e5848a60)

2) soc: qmi: Signal the txn completion after releasing the mutex
(cherry picked from commit I26d663e77a42d0a69cae86a3a99702caf264d65f)

3) soc: qcom: qmi: Avoid using txn instance after idr remove
(cherry picked from commit Ic78339beca800a8cbea17868277a7aef5fb6b1e3)

4) qmi: Endianess fix for qmi and qrtr
(cherry picked from commit I8095c40c7b0d96faefecce151a66baa104653c94)

Change-Id: I9627d94029fc3523f132278de27f34ae570ed6fc
Signed-off-by: Saahil Tomar <quic_saahtoma@quicinc.com>
---
 drivers/soc/qcom/qmi_encdec.c    | 68 +++++++++++++++++++++++++++++---
 drivers/soc/qcom/qmi_interface.c | 15 +++++--
 2 files changed, 73 insertions(+), 10 deletions(-)

diff --git a/drivers/soc/qcom/qmi_encdec.c b/drivers/soc/qcom/qmi_encdec.c
index 5c7161b18b72..bddda6415bc4 100644
--- a/drivers/soc/qcom/qmi_encdec.c
+++ b/drivers/soc/qcom/qmi_encdec.c
@@ -25,14 +25,38 @@
 
 #define QMI_ENCDEC_ENCODE_N_BYTES(p_dst, p_src, size) \
 do { \
+	u16 *var16; \
+	u32 *var32; \
+	u64 *var64; \
+	var16 = (u16 *) p_dst; \
+	var32 = (u32 *) p_dst; \
+	var64 = (u64 *) p_dst; \
 	memcpy(p_dst, p_src, size); \
+	if (size == 2)	\
+		*var16 = cpu_to_le16(*var16); \
+	if (size == 4)	\
+		*var32 = cpu_to_le32(*var32); \
+	if (size == 8)	 \
+		*var64 = cpu_to_le64(*var64); \
 	p_dst = (u8 *)p_dst + size; \
 	p_src = (u8 *)p_src + size; \
 } while (0)
 
 #define QMI_ENCDEC_DECODE_N_BYTES(p_dst, p_src, size) \
 do { \
+	u16 *var16; \
+	u32 *var32; \
+	u64 *var64; \
+	var16 = (u16 *) p_dst; \
+	var32 = (u32 *) p_dst; \
+	var64 = (u64 *) p_dst; \
 	memcpy(p_dst, p_src, size); \
+	if (size == 2)	\
+		*var16 = le16_to_cpu(*var16); \
+	if (size == 4)	\
+		*var32 = le32_to_cpu(*var32); \
+	if (size == 8)	 \
+		*var64 = le64_to_cpu(*var64); \
 	p_dst = (u8 *)p_dst + size; \
 	p_src = (u8 *)p_src + size; \
 } while (0)
@@ -304,6 +328,7 @@ static int qmi_encode(const struct qmi_elem_info *ei_array, void *out_buf,
 	const void *buf_src;
 	int encode_tlv = 0;
 	int rc;
+	char *d;
 
 	if (!ei_array)
 		return 0;
@@ -338,7 +363,19 @@ static int qmi_encode(const struct qmi_elem_info *ei_array, void *out_buf,
 			break;
 
 		case QMI_DATA_LEN:
-			memcpy(&data_len_value, buf_src, temp_ei->elem_size);
+			memcpy(&data_len_value, buf_src, sizeof(u32));
+			if (IS_ENABLED(CONFIG_CPU_BIG_ENDIAN)) {
+				d = (char *)&data_len_value;
+				if (temp_ei->elem_size == 1) {
+					d[0] = d[3];
+					d[1] = d[2] = d[3] = 0;
+				}
+				if (temp_ei->elem_size == 2) {
+					d[0] = d[2];
+					d[1] = d[3];
+					d[2] = d[3] = 0;
+				}
+			}
 			data_len_sz = temp_ei->elem_size == sizeof(u8) ?
 					sizeof(u8) : sizeof(u16);
 			/* Check to avoid out of range buffer access */
@@ -357,6 +394,10 @@ static int qmi_encode(const struct qmi_elem_info *ei_array, void *out_buf,
 				temp_ei = skip_to_next_elem(temp_ei, enc_level);
 			else
 				encode_tlv = 0;
+
+			if (IS_ENABLED(CONFIG_CPU_BIG_ENDIAN))
+				data_len_value = (u32)*(u32 *)(buf_src);
+
 			break;
 
 		case QMI_UNSIGNED_1_BYTE:
@@ -520,8 +561,8 @@ static int qmi_decode_string_elem(const struct qmi_elem_info *ei_array,
 {
 	int rc;
 	int decoded_bytes = 0;
-	u32 string_len = 0;
-	u32 string_len_sz = 0;
+	u16 string_len = 0;
+	u16 string_len_sz = 0;
 	const struct qmi_elem_info *temp_ei = ei_array;
 
 	if (dec_level == 1) {
@@ -531,6 +572,7 @@ static int qmi_decode_string_elem(const struct qmi_elem_info *ei_array,
 				sizeof(u8) : sizeof(u16);
 		rc = qmi_decode_basic_elem(&string_len, buf_src,
 					   1, string_len_sz);
+		string_len = le16_to_cpu(string_len);
 		decoded_bytes += rc;
 	}
 
@@ -604,6 +646,7 @@ static int qmi_decode(const struct qmi_elem_info *ei_array, void *out_c_struct,
 	u32 decoded_bytes = 0;
 	const void *buf_src = in_buf;
 	int rc;
+	char *d;
 
 	while (decoded_bytes < in_buf_len) {
 		if (dec_level >= 2 && temp_ei->data_type == QMI_EOTI)
@@ -640,10 +683,23 @@ static int qmi_decode(const struct qmi_elem_info *ei_array, void *out_c_struct,
 		}
 
 		if (temp_ei->data_type == QMI_DATA_LEN) {
+			data_len_value = 0;
 			data_len_sz = temp_ei->elem_size == sizeof(u8) ?
 					sizeof(u8) : sizeof(u16);
 			rc = qmi_decode_basic_elem(&data_len_value, buf_src,
 						   1, data_len_sz);
+			if (IS_ENABLED(CONFIG_CPU_BIG_ENDIAN)) {
+				d = (char *)&data_len_value;
+				if (temp_ei->elem_size == 1) {
+					d[3] = d[0];
+					d[0] = d[1] = d[2] = 0;
+				}
+				if (temp_ei->elem_size == 2) {
+					d[2] = d[0];
+					d[3] = d[1];
+					d[0] = d[1] = 0;
+				}
+			}
 			memcpy(buf_dst, &data_len_value, sizeof(u32));
 			temp_ei = temp_ei + 1;
 			buf_dst = out_c_struct + temp_ei->offset;
@@ -746,9 +802,9 @@ void *qmi_encode_message(int type, unsigned int msg_id, size_t *len,
 
 	hdr = msg;
 	hdr->type = type;
-	hdr->txn_id = txn_id;
-	hdr->msg_id = msg_id;
-	hdr->msg_len = msglen;
+	hdr->txn_id = cpu_to_le16(txn_id);
+	hdr->msg_id = cpu_to_le16(msg_id);
+	hdr->msg_len = cpu_to_le16(msglen);
 
 	*len = sizeof(*hdr) + msglen;
 
diff --git a/drivers/soc/qcom/qmi_interface.c b/drivers/soc/qcom/qmi_interface.c
index 78d7361fdcf2..e08a3f07d3ef 100644
--- a/drivers/soc/qcom/qmi_interface.c
+++ b/drivers/soc/qcom/qmi_interface.c
@@ -473,17 +473,21 @@ static void qmi_handle_message(struct qmi_handle *qmi,
 			       struct sockaddr_qrtr *sq,
 			       const void *buf, size_t len)
 {
-	const struct qmi_header *hdr;
+	struct qmi_header *hdr;
 	struct qmi_txn tmp_txn;
 	struct qmi_txn *txn = NULL;
 	int ret;
+	bool complete_req = false;
 
 	if (len < sizeof(*hdr)) {
 		pr_err("ignoring short QMI packet\n");
 		return;
 	}
 
-	hdr = buf;
+	hdr = (struct qmi_header *)buf;
+	hdr->txn_id = le16_to_cpu(hdr->txn_id);
+	hdr->msg_id = le16_to_cpu(hdr->msg_id);
+	hdr->msg_len = le16_to_cpu(hdr->msg_len);
 
 	/* If this is a response, find the matching transaction handle */
 	if (hdr->type == QMI_RESPONSE) {
@@ -499,18 +503,21 @@ static void qmi_handle_message(struct qmi_handle *qmi,
 		mutex_lock(&txn->lock);
 		mutex_unlock(&qmi->txn_lock);
 
-		if (txn->dest && txn->ei) {
+		complete_req  = txn->dest && txn->ei;
+
+		if (complete_req) {
 			ret = qmi_decode_message(buf, len, txn->ei, txn->dest);
 			if (ret < 0)
 				pr_err("failed to decode incoming message\n");
 
 			txn->result = ret;
-			complete(&txn->completion);
 		} else  {
 			qmi_invoke_handler(qmi, sq, txn, buf, len);
 		}
 
 		mutex_unlock(&txn->lock);
+		if (complete_req)
+			complete(&txn->completion);
 	} else {
 		/* Create a txn based on the txn_id of the incoming message */
 		memset(&tmp_txn, 0, sizeof(tmp_txn));
-- 
2.34.1

