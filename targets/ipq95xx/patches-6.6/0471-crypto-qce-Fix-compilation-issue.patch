From 5ba7098a6240204c46972a4f50e43866db20f6f5 Mon Sep 17 00:00:00 2001
From: Md Sadre Alam <quic_mdalam@quicinc.com>
Date: Fri, 3 Nov 2023 12:04:57 +0530
Subject: [PATCH 476/500] crypto: qce - Fix compilation issue

Fix compilation for porting crypto changes from 5.4

Change-Id: I471ec88806750923533aa5c38250f75dcbfe4c56
Signed-off-by: Md Sadre Alam <quic_mdalam@quicinc.com>
---
 drivers/crypto/qce/common.c |  7 ++++---
 drivers/crypto/qce/core.c   |  9 ++++++---
 drivers/crypto/qce/dma.c    | 10 ++++++++--
 3 files changed, 18 insertions(+), 8 deletions(-)

diff --git a/drivers/crypto/qce/common.c b/drivers/crypto/qce/common.c
index b860aa3c25cf..043930f3804f 100644
--- a/drivers/crypto/qce/common.c
+++ b/drivers/crypto/qce/common.c
@@ -363,7 +363,6 @@ static int qce_setup_regs_skcipher_dma(struct crypto_async_request *async_req)
 	unsigned int ivsize = rctx->ivsize;
 	unsigned long flags = rctx->flags;
 	int ret;
-
 	qce_clear_bam_transaction(qce);
 	qce_setup_config_dma(qce);
 
@@ -375,7 +374,7 @@ static int qce_setup_regs_skcipher_dma(struct crypto_async_request *async_req)
 	qce_cpu_to_be32p_array(enckey, ctx->enc_key, keylen);
 	enckey_words = keylen / sizeof(u32);
 
-	qce_write_reg_dma(qce, REG_AUTH_SEG_CFG, 0, 1);
+	qce_write_reg_dma(qce, REG_AUTH_SEG_CFG, auth_cfg, 1);
 
 	encr_cfg = qce_encr_cfg(flags, keylen);
 
@@ -453,7 +452,6 @@ static int qce_setup_regs_skcipher(struct crypto_async_request *async_req)
 	u32 encr_cfg = 0, auth_cfg = 0, config;
 	unsigned int ivsize = rctx->ivsize;
 	unsigned long flags = rctx->flags;
-
 	qce_setup_config(qce);
 
 	if (IS_XTS(flags))
@@ -707,6 +705,9 @@ static int qce_setup_regs_aead(struct crypto_async_request *async_req)
 
 int qce_start(struct crypto_async_request *async_req, u32 type)
 {
+	struct skcipher_request *req = skcipher_request_cast(async_req);
+	struct qce_alg_template *tmpl = to_cipher_tmpl(crypto_skcipher_reqtfm(req));
+	struct qce_device *qce = tmpl->qce;
 	switch (type) {
 #ifdef CONFIG_CRYPTO_DEV_QCE_SKCIPHER
 	case CRYPTO_ALG_TYPE_SKCIPHER:
diff --git a/drivers/crypto/qce/core.c b/drivers/crypto/qce/core.c
index 584c0939d0dd..58757ff97452 100644
--- a/drivers/crypto/qce/core.c
+++ b/drivers/crypto/qce/core.c
@@ -530,9 +530,12 @@ static int qce_crypto_probe(struct platform_device *pdev)
 
 	if (device_property_read_bool(dev, "qce,cmd_desc_support")) {
 		qce->qce_cmd_desc_enable = true;
-		qce->base_dma = devm_platform_get_and_ioremap_resource(pdev,
-				0, &res);
-		if (dma_mapping_error(dev, nandc->base_dma))
+		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+		if (!res)
+			return -ENOMEM;
+		qce->base_dma = dma_map_resource(dev, res->start, resource_size(res),
+				DMA_BIDIRECTIONAL, 0);
+		if (dma_mapping_error(dev, qce->base_dma))
 			return -ENXIO;
 	}
 
diff --git a/drivers/crypto/qce/dma.c b/drivers/crypto/qce/dma.c
index c8ebae9e52e9..33d9e0eed9f4 100644
--- a/drivers/crypto/qce/dma.c
+++ b/drivers/crypto/qce/dma.c
@@ -5,6 +5,7 @@
 
 #include <linux/dmaengine.h>
 #include <crypto/scatterwalk.h>
+#include <linux/dma-mapping.h>
 
 #include "dma.h"
 #include "core.h"
@@ -258,17 +259,22 @@ int qce_dma_request(struct device *dev, struct qce_dma_data *dma)
 
 void qce_dma_release(struct qce_dma_data *dma)
 {
+	struct qce_device *qce = container_of(dma,
+			struct qce_device, dma);
+
 	dma_release_channel(dma->txchan);
 	dma_release_channel(dma->rxchan);
 	kfree(dma->result_buf);
+
 	if (qce->qce_cmd_desc_enable) {
 		if (qce->reg_read_buf)
 			dmam_free_coherent(qce->dev, QCE_MAX_REG_READ *
 				sizeof(*qce->reg_read_buf),
 				qce->reg_read_buf,
 				qce->reg_read_buf_phys);
-			kfree(dma->qce_bam_txn->qce_desc);
-			kfree(dma->qce_bam_txn);
+
+		kfree(dma->qce_bam_txn->qce_desc);
+		kfree(dma->qce_bam_txn);
 	}
 }
 
-- 
2.34.1

