From 19775c26acae5e543f2eda422f472c5bdedcd556 Mon Sep 17 00:00:00 2001
From: Kathiravan Thirumoorthy <quic_kathirav@quicinc.com>
Date: Tue, 9 Jan 2024 15:21:12 +0530
Subject: [PATCH 485/500] watchdog: qcom: add support to trigger the NS WDT
 bite on kernel panic

Set the priority of the WDT restart handler to 255, so that it takes
precedence over other handlers. With this approach, all the system
reset will be done via watchdog. To make sure, WDT bite is triggered
only on panic, register a panic notifier and update that system is in
panic path. Based on that condition, in qcom_wdt_restart trigger the
watchdog bite.

Gaurd these changes under separate Kconfig so that it can be enabled
only for the required targets.

Change-Id: If5ea7208bc075694201e135c90af592aac1a2d48
Signed-off-by: Kathiravan Thirumoorthy <quic_kathirav@quicinc.com>
---
 drivers/watchdog/Kconfig    |  7 +++++++
 drivers/watchdog/qcom-wdt.c | 34 ++++++++++++++++++++++++++++++++++
 2 files changed, 41 insertions(+)

diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index 751458959411..82cda52c3035 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -817,6 +817,13 @@ config QCOM_WDT
 	  To compile this driver as a module, choose M here: the
 	  module will be called qcom_wdt.
 
+config QCOM_FORCE_WDOG_BITE_ON_PANIC
+       bool "QCOM force watchdog bite on panic"
+       depends on QCOM_WDT
+       help
+         This forces a watchdog bite when the device restarts due to a kernel
+         panic.
+
 config MESON_GXBB_WATCHDOG
 	tristate "Amlogic Meson GXBB SoCs watchdog support"
 	depends on ARCH_MESON || COMPILE_TEST
diff --git a/drivers/watchdog/qcom-wdt.c b/drivers/watchdog/qcom-wdt.c
index 258021d877f6..f92974c86451 100644
--- a/drivers/watchdog/qcom-wdt.c
+++ b/drivers/watchdog/qcom-wdt.c
@@ -8,7 +8,9 @@
 #include <linux/io.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/notifier.h>
 #include <linux/of.h>
+#include <linux/panic_notifier.h>
 #include <linux/platform_device.h>
 #include <linux/sched/clock.h>
 #include <linux/watchdog.h>
@@ -50,6 +52,8 @@ struct qcom_wdt {
 	unsigned long		rate;
 	void __iomem		*base;
 	const u32		*layout;
+	bool			in_panic;
+	struct notifier_block	panic_blk;
 };
 
 static void __iomem *wdt_addr(struct qcom_wdt *wdt, enum wdt_reg reg)
@@ -128,6 +132,12 @@ static int qcom_wdt_restart(struct watchdog_device *wdd, unsigned long action,
 	struct qcom_wdt *wdt = to_qcom_wdt(wdd);
 	u32 timeout;
 
+#ifdef CONFIG_QCOM_FORCE_WDOG_BITE_ON_PANIC
+	if (!wdt->in_panic)
+		return 0;
+
+	dev_info(wdd->parent, "Triggering watchdog bite ...\n");
+
 	/*
 	 * Trigger watchdog bite:
 	 *    Setup BITE_TIME to be 128ms, and enable WDT.
@@ -146,6 +156,7 @@ static int qcom_wdt_restart(struct watchdog_device *wdd, unsigned long action,
 	wmb();
 
 	mdelay(150);
+#endif
 	return 0;
 }
 
@@ -195,6 +206,18 @@ static const struct qcom_wdt_match_data match_data_kpss = {
 	.max_tick_count = 0xFFFFFU,
 };
 
+#ifdef CONFIG_QCOM_FORCE_WDOG_BITE_ON_PANIC
+static int qcom_wdt_panic_handler(struct notifier_block *nb,
+				  unsigned long action, void *data)
+{
+	struct qcom_wdt *wdt = container_of(nb, struct qcom_wdt, panic_blk);
+
+	wdt->in_panic = true;
+
+	return NOTIFY_DONE;
+}
+#endif
+
 static int qcom_wdt_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -297,6 +320,17 @@ static int qcom_wdt_probe(struct platform_device *pdev)
 		set_bit(WDOG_HW_RUNNING, &wdt->wdd.status);
 	}
 
+#ifdef CONFIG_QCOM_FORCE_WDOG_BITE_ON_PANIC
+	wdt->panic_blk.notifier_call = qcom_wdt_panic_handler;
+	ret = atomic_notifier_chain_register(&panic_notifier_list, &wdt->panic_blk);
+	if (ret) {
+		dev_err(dev, "failed to register the panic notifier, ret is %d\n", ret);
+		return ret;
+	}
+
+	watchdog_set_restart_priority(&wdt->wdd, 255);
+#endif
+
 	ret = devm_watchdog_register_device(dev, &wdt->wdd);
 	if (ret)
 		return ret;
-- 
2.34.1

