From 4996b376e428668ca35b561a74d8ece68b590199 Mon Sep 17 00:00:00 2001
From: Subhranil Choudhury <subhrani@codeaurora.org>
Date: Sat, 15 Aug 2020 03:50:58 +0530
Subject: [PATCH 492/500] linux: Bridge fdb add or refresh

Create a new function to add bridge fdb entry or refresh
an already existing entry.

Change-Id: Id0c57936bb9cb6e97ba1f15603cd85d50ec56105
Signed-off-by: Subhranil Choudhury <subhrani@codeaurora.org>
Signed-off-by: Pavithra R <pavir@codeaurora.org>
Signed-off-by: Pavithra R <quic_pavir@quicinc.com>
---
 include/linux/if_bridge.h |  2 ++
 net/bridge/br_fdb.c       | 46 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 48 insertions(+)

diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index 29b503bbb889..dc8ea2bb9ca9 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -282,6 +282,8 @@ extern void br_fdb_unregister_notify(struct notifier_block *nb);
 extern struct net_device *br_fdb_bridge_dev_get_and_hold(struct net_bridge *br);
 extern int br_fdb_delete_by_netdev(struct net_device *dev,
 			const unsigned char *addr, u16 vid);
+extern int br_fdb_add_or_refresh_by_netdev(struct net_device *dev,
+			    const unsigned char *addr, u16 vid, u16 state);
 
 typedef struct net_bridge_port *br_get_dst_hook_t(
 		const struct net_bridge_port *src,
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index aa5ae9025e38..6727a6c58265 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -1402,6 +1402,52 @@ static int __br_fdb_delete(struct net_bridge *br,
 	return err;
 }
 
+/* This function creates a new FDB entry.
+ * The caller can specify the FDB entry type like static,
+ * local or external entry.
+ * This has to be called only for bridge-port netdevs.
+ */
+int br_fdb_add_or_refresh_by_netdev(struct net_device *dev,
+				    const unsigned char *addr, u16 vid,
+				    u16 state)
+{
+	struct net_bridge_fdb_entry *fdb = NULL;
+	struct net_bridge *br = NULL;
+	int err = 0;
+	u16 nlh_flags = NLM_F_CREATE;
+	struct net_bridge_port *p = NULL;
+
+	if (!dev) {
+		pr_info("bridge: netdevice is NULL\n");
+		return -EINVAL;
+	}
+
+	rcu_read_lock();
+	p = br_port_get_check_rcu(dev);
+	if (!p) {
+		rcu_read_unlock();
+		pr_info("bridge: %s not a bridge port\n",
+			dev->name);
+		return -EINVAL;
+	}
+
+	br = p->br;
+
+	spin_lock_bh(&br->hash_lock);
+	fdb = br_fdb_find(br, addr, vid);
+	if (!fdb) {
+		err = fdb_add_entry(br, p, addr, state,
+				    nlh_flags, vid, 0);
+	} else {
+		fdb->updated = jiffies;
+	}
+	spin_unlock_bh(&br->hash_lock);
+	rcu_read_unlock();
+
+	return err;
+}
+EXPORT_SYMBOL_GPL(br_fdb_add_or_refresh_by_netdev);
+
 /* This function has to be called only for bridge-port netdevs.*/
 /* For bridge netdev br_fdb_delete has to be called.*/
 int br_fdb_delete_by_netdev(struct net_device *dev,
-- 
2.34.1

