From 6aa357f62b3d7a21d34bffe77581768f5e54cab0 Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Wed, 27 Dec 2023 16:41:59 +0530
Subject: [PATCH 495/500] crypto: qce - Fix selftest issue when cmd descriptor
 enabled

Fix self test  for all the crypto algorithm
when cmd descriptor support enabled.

error:

00:01:01.225 root@OpenWrt:/# opkg install /tmp/q5kOa.ipk
00:01:01.740 Installing kmod-crypto-qce (6.1.31+1-1) to root...
00:01:01.740 Configuring kmod-crypto-qce.
00:01:01.740 [ 1356.700441] kmodloader: loading kernel modules from /etc/modules.d/*
00:01:02.225 [ 1357.237452] alg: aead: ccm-aes-qce decryption unexpectedly succeeded on test vector 14; expected_error=-EBADMSG, cfg="in-place (one sglist)"
00:01:02.354 [ 1357.237493] alg: self-tests for ccm(aes) using ccm-aes-qce failed (rc=-22)
00:01:02.354 [ 1357.237497] ------------[ cut here ]------------
00:01:02.354 [ 1357.255794] alg: self-tests for ccm(aes) using ccm-aes-qce failed (rc=-22)
00:01:02.354 [ 1357.255911] WARNING: CPU: 3 PID: 5377 at crypto/testmgr.c:5929 alg_test+0x360/0x3bc
00:01:02.576 [ 1357.551276] CPU: 3 PID: 5377 Comm: cryptomgr_test Not tainted 6.1.31 #0
00:01:02.576 [ 1357.573504] Hardware name: Qualcomm Technologies, Inc. IPQ9574/RDP433/AP-AL02-C4 (DT)
00:01:02.681 [ 1357.580104] pstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
00:01:02.681 [ 1357.588088] pc : alg_test+0x360/0x3bc
00:01:02.681 [ 1357.594855] lr : alg_test+0x360/0x3bc
00:01:02.681 [ 1357.598675] sp : ffffff800f4bbd60
00:01:02.681 [ 1357.602320] x29: ffffff800f4bbd60 x28: 0000000000000000 x27: 0000000000000000
00:01:02.681 [ 1357.605623] x26: 0000000000000000 x25: ffffffc008cf1448 x24: 0000000000000400
00:01:02.681 [ 1357.612741] x23: 0000000000011183 x22: ffffff801dfa0280 x21: 00000000ffffffff
00:01:02.681 [ 1357.619859] x20: ffffff801dfa0200 x19: 00000000ffffffea x18: 0000000000000000
00:01:02.681 [ 1357.626977] x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000000000
00:01:02.681 [ 1357.634095] x14: 0000000000000001 x13: 0000000000000001 x12: 0000000000000000
00:01:02.681 [ 1357.641213] x11: 0000000000000004 x10: 0000000000000960 x9 : ffffff800f4bbc00
00:01:02.681 [ 1357.648331] x8 : ffffff800214a4c0 x7 : 00000000000000ca x6 : ffffff8002149c80
00:01:02.681 [ 1357.655449] x5 : 0000000000000004 x4 : 0000000000000003 x3 : 0000000000000000
00:01:02.681 [ 1357.662568] x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffffff8002149b00
00:01:02.681 [ 1357.669686] Call trace:
00:01:02.681 [ 1357.676799]  alg_test+0x360/0x3bc
00:01:02.681 [ 1357.679057]  cryptomgr_test+0x24/0x4c
00:01:02.681 [ 1357.682530]  kthread+0x104/0x114
00:01:02.681 [ 1357.686175]  ret_from_fork+0x10/0x20
00:01:02.681 [ 1357.689474] ---[ end trace 0000000000000000 ]---
00:01:02.909 [ 1357.772554] kmodloader: done loading kernel modules from /etc/modules.d/*

Current scenario only supports command descriptor in Skciper.
It works in following steps:
1. Skciper will get a lock to use DMA
2. It will process with encryption/decryption
3. Unlock DMA for other processes

Since command descriptor is not enable in AEAD and SHA, it creates
a conflict with locking mechanism causing a crash as self test for
AEAD is failing further making crypto bad.

To overcome above issue add command descriptor support for AEAD
and update locking mechanism in AEAD and SHA to handle DMA.
This is to avoid crash due to timing issues in crypto.

Change-Id: I5b9f5e52e2d6235052ceb598ed600693956123b0
Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
---
 drivers/crypto/qce/aead.c     | 20 +++++++++-----------
 drivers/crypto/qce/common.c   |  8 ++++++--
 drivers/crypto/qce/sha.c      | 19 ++++++++-----------
 drivers/crypto/qce/skcipher.c | 22 ++++++++++------------
 4 files changed, 33 insertions(+), 36 deletions(-)

diff --git a/drivers/crypto/qce/aead.c b/drivers/crypto/qce/aead.c
index 3fd6856a828e..e420e1fed338 100644
--- a/drivers/crypto/qce/aead.c
+++ b/drivers/crypto/qce/aead.c
@@ -42,17 +42,6 @@ static void qce_aead_done(void *data)
 	dir_src = diff_dst ? DMA_TO_DEVICE : DMA_BIDIRECTIONAL;
 	dir_dst = diff_dst ? DMA_FROM_DEVICE : DMA_BIDIRECTIONAL;
 
-	error = qce_check_status(qce, &status);
-	if (error < 0 && (error != -EBADMSG))
-		dev_err(qce->dev, "aead operation error (%x)\n", status);
-
-	if (qce->qce_cmd_desc_enable)
-		qce_unlock_reg_dma(qce);
-
-	error = qce_dma_terminate_all(&qce->dma);
-	if (error)
-		dev_dbg(qce->dev, "aead dma termination error (%d)\n",
-			error);
 	if (diff_dst)
 		dma_unmap_sg(qce->dev, rctx->src_sg, rctx->src_nents, dir_src);
 
@@ -103,6 +92,15 @@ static void qce_aead_done(void *data)
 		}
 	}
 
+	error = qce_dma_terminate_all(&qce->dma);
+	if (error)
+		dev_dbg(qce->dev, "aead dma termination error (%d)\n",
+			error);
+
+	error = qce_check_status(qce, &status);
+	if (error < 0 && (error != -EBADMSG))
+		dev_err(qce->dev, "aead operation error (%x)\n", status);
+
 	qce->async_req_done(qce, error);
 }
 
diff --git a/drivers/crypto/qce/common.c b/drivers/crypto/qce/common.c
index c0c4c6776e9e..e2d17e64838d 100644
--- a/drivers/crypto/qce/common.c
+++ b/drivers/crypto/qce/common.c
@@ -636,7 +636,7 @@ int qce_read_dma_get_lock(struct qce_device *qce)
 	u32 val = 0;
 
 	qce_clear_bam_transaction(qce);
-	qce_read_reg_dma(qce, REG_STATUS2, &val, 1);
+	qce_read_reg_dma(qce, REG_STATUS, &val, 1);
 
 	ret = qce_submit_cmd_desc(qce, QCE_DMA_DESC_FLAG_LOCK);
 	if (ret) {
@@ -653,7 +653,7 @@ int qce_unlock_reg_dma(struct qce_device *qce)
 	u32 val = 0;
 
 	qce_clear_bam_transaction(qce);
-	qce_read_reg_dma(qce, REG_STATUS2, &val, 1);
+	qce_read_reg_dma(qce, REG_STATUS, &val, 1);
 
 	ret = qce_submit_cmd_desc(qce, QCE_DMA_DESC_FLAG_UNLOCK);
 	if (ret) {
@@ -983,6 +983,10 @@ int qce_check_status(struct qce_device *qce, u32 *status)
 
 	*status = qce_read(qce, REG_STATUS);
 
+	/* Unlock the crypto pipe here */
+	if (qce->qce_cmd_desc_enable)
+		qce_unlock_reg_dma(qce);
+
 	/*
 	 * Don't use result dump status. The operation may not be complete.
 	 * Instead, use the status we just read from device. In case, we need to
diff --git a/drivers/crypto/qce/sha.c b/drivers/crypto/qce/sha.c
index 55c4ca1f7858..7febcacaad85 100644
--- a/drivers/crypto/qce/sha.c
+++ b/drivers/crypto/qce/sha.c
@@ -47,17 +47,6 @@ static void qce_ahash_done(void *data)
 	int error;
 	u32 status;
 
-	error = qce_check_status(qce, &status);
-	if (error < 0)
-		dev_dbg(qce->dev, "ahash operation error (%x)\n", status);
-
-	if (qce->qce_cmd_desc_enable)
-		qce_unlock_reg_dma(qce);
-
-	error = qce_dma_terminate_all(&qce->dma);
-	if (error)
-		dev_dbg(qce->dev, "ahash dma termination error (%d)\n", error);
-
 	dma_unmap_sg(qce->dev, req->src, rctx->src_nents, DMA_TO_DEVICE);
 	dma_unmap_sg(qce->dev, &rctx->result_sg, 1, DMA_FROM_DEVICE);
 
@@ -86,6 +75,14 @@ static void qce_ahash_done(void *data)
 	rctx->last_blk = false;
 	rctx->first_blk = false;
 
+	error = qce_dma_terminate_all(&qce->dma);
+	if (error)
+		dev_dbg(qce->dev, "ahash dma termination error (%d)\n", error);
+
+	error = qce_check_status(qce, &status);
+	if (error < 0)
+		dev_dbg(qce->dev, "ahash operation error (%x)\n", status);
+
 	qce->async_req_done(tmpl->qce, error);
 }
 
diff --git a/drivers/crypto/qce/skcipher.c b/drivers/crypto/qce/skcipher.c
index 0fa64f63c165..ef2f86393bf9 100644
--- a/drivers/crypto/qce/skcipher.c
+++ b/drivers/crypto/qce/skcipher.c
@@ -51,18 +51,6 @@ static void qce_skcipher_done(void *data)
 	dir_src = diff_dst ? DMA_TO_DEVICE : DMA_BIDIRECTIONAL;
 	dir_dst = diff_dst ? DMA_FROM_DEVICE : DMA_BIDIRECTIONAL;
 
-	error = qce_check_status(qce, &status);
-	if (error < 0)
-		dev_dbg(qce->dev, "skcipher operation error (%x)\n", status);
-
-	if (qce->qce_cmd_desc_enable)
-		qce_unlock_reg_dma(qce);
-
-	error = qce_dma_terminate_all(&qce->dma);
-	if (error)
-		dev_dbg(qce->dev, "skcipher dma termination error (%d)\n",
-			error);
-
 	if (diff_dst)
 		dma_unmap_sg(qce->dev, rctx->src_sg, rctx->src_nents, dir_src);
 	dma_unmap_sg(qce->dev, rctx->dst_sg, rctx->dst_nents, dir_dst);
@@ -83,6 +71,16 @@ static void qce_skcipher_done(void *data)
 	}
 
 	memcpy(rctx->iv, result_buf->encr_cntr_iv, rctx->ivsize);
+
+	error = qce_dma_terminate_all(&qce->dma);
+	if (error)
+		dev_dbg(qce->dev, "skcipher dma termination error (%d)\n",
+			error);
+
+	error = qce_check_status(qce, &status);
+	if (error < 0)
+		dev_dbg(qce->dev, "skcipher operation error (%x)\n", status);
+
 	qce->async_req_done(tmpl->qce, error);
 }
 
-- 
2.34.1

