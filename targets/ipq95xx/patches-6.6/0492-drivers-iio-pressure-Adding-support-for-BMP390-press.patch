From 83568f421284a3b22ba861baa1c1ce1bd67895c0 Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Mon, 8 Jan 2024 18:21:00 +0530
Subject: [PATCH 498/500] drivers: iio: pressure: Adding support for BMP390
 pressure sensor

Updating BMP280 kernel drivers to support BMP390, the next generation
sensor  with better precision compared to the BMP2xx series.

This is a snapshot of the commit
6d9b654a3b9711b32cc5d3f25570893f8236bd79
from win.linuxopenwrt.2.1 branch and
oss/kernel/linux-ipq-5.4 project.

Change-Id: I619eff8545263c71b457cfa30197313cab32cd44
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/iio/pressure/bmp280-core.c   | 358 ++++++++++++++++++++++++++-
 drivers/iio/pressure/bmp280-i2c.c    |   4 +-
 drivers/iio/pressure/bmp280-regmap.c |  42 ++++
 drivers/iio/pressure/bmp280.h        |  83 ++++++-
 4 files changed, 480 insertions(+), 7 deletions(-)

diff --git a/drivers/iio/pressure/bmp280-core.c b/drivers/iio/pressure/bmp280-core.c
index a2ef1373a274..27bf191b5e4a 100644
--- a/drivers/iio/pressure/bmp280-core.c
+++ b/drivers/iio/pressure/bmp280-core.c
@@ -6,7 +6,7 @@
  * Copyright (c) 2014 Intel Corporation
  * Copyright (c) 2016 Linus Walleij <linus.walleij@linaro.org>
  *
- * Driver for Bosch Sensortec BMP180 and BMP280 digital pressure sensor.
+ * Driver for Bosch Sensortec BMP180, BMP280 and BMP390 digital pressure sensor.
  *
  * Datasheet:
  * https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf
@@ -14,6 +14,7 @@
  * https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bme280-ds002.pdf
  * https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp388-ds001.pdf
  * https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp581-ds004.pdf
+ * https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp390-ds002.pdf
  *
  * Notice:
  * The link to the bmp180 datasheet points to an outdated version missing these changes:
@@ -794,6 +795,7 @@ static int bmp280_chip_config(struct bmp280_data *data)
 }
 
 static const int bmp280_oversampling_avail[] = { 1, 2, 4, 8, 16 };
+static const int bmp390_oversampling_avail[] = { 1, 2, 4, 8, 16, 32};
 
 const struct bmp280_chip_info bmp280_chip_info = {
 	.id_reg = BMP280_REG_ID,
@@ -2051,6 +2053,334 @@ static int bmp085_fetch_eoc_irq(struct device *dev,
 	return 0;
 }
 
+/*
+ *  This API is used to parse the calibration data, compensate
+ *  it and store it in device structure
+ */
+static int bmp390_read_calib(struct bmp280_data *data)
+{
+	int ret;
+	u8 t_buf[BMP390_TEMP_CALIB_DATA_LEN];
+	u8 p_buf[BMP390_PRESS_CALIB_DATA_LEN];
+	struct bmp390_calib *calib = &data->calib.bmp390;
+
+	/* Read temperature calibration values. */
+	ret = regmap_bulk_read(data->regmap, BMP390_REG_COMP_TEMP_START,
+				t_buf, BMP390_TEMP_CALIB_DATA_LEN);
+	if (ret < 0) {
+		dev_err(data->dev,
+				"failed to read temperature calibration parameters\n");
+		return ret;
+	}
+
+	/* Toss the temperature calibration data into the entropy pool */
+	add_device_randomness(t_buf, sizeof(t_buf));
+
+	calib->T1 = BMP390_CONCAT_BYTES(t_buf[1], t_buf[0]);
+	calib->T2 = BMP390_CONCAT_BYTES(t_buf[3], t_buf[2]);
+	calib->T3 = t_buf[4];
+
+	/* Read pressure calibration values. */
+	ret = regmap_bulk_read(data->regmap, BMP390_REG_COMP_PRESS_START,
+				p_buf, BMP390_PRESS_CALIB_DATA_LEN);
+	if (ret < 0) {
+		dev_err(data->dev,
+				"failed to read pressure calibration parameters\n");
+		return ret;
+	}
+
+	/* Toss the pressure calibration data into the entropy pool */
+	add_device_randomness(p_buf, sizeof(p_buf));
+
+	calib->P1 = BMP390_CONCAT_BYTES(p_buf[1], p_buf[0]);
+	calib->P2 = BMP390_CONCAT_BYTES(p_buf[3], p_buf[2]);
+	calib->P3 = p_buf[4];
+	calib->P4 = p_buf[5];
+	calib->P5 = BMP390_CONCAT_BYTES(p_buf[7], p_buf[6]);
+	calib->P6 = BMP390_CONCAT_BYTES(p_buf[9], p_buf[8]);
+	calib->P7 = p_buf[10];
+	calib->P8 = p_buf[11];
+	calib->P9 = BMP390_CONCAT_BYTES(p_buf[13], p_buf[12]);
+	calib->P10 = p_buf[14];
+	calib->P11 = p_buf[15];
+
+	return 0;
+}
+
+/* This API is used to compensate the raw temperature data and
+ * return the compensated data in integer data type.
+ * The Actual temperature is obtained by dividing the value by 100.
+ * For eg : If returned temperature is 2426 then it is 2426/100 = 24 deg Celsius
+ */
+static s64 bmp390_compensate_temp(struct bmp280_data *data,
+                                  u32 uncomp_temp)
+{
+	u64 partial_data1, partial_data2, partial_data3;
+	s64 partial_data4, partial_data5, partial_data6;
+	s64 comp_temp;
+	struct bmp390_calib *calib = &data->calib.bmp390;
+
+	partial_data1 = (u64)(uncomp_temp - (256 * (u64)(calib->T1)));
+	partial_data2 = (u64)(calib->T2 * partial_data1);
+	partial_data3 = (u64)(partial_data1 * partial_data1);
+	partial_data4 = (s64)(((s64)partial_data3) * ((s64)calib->T3));
+	partial_data5 = ((s64)(((s64)partial_data2) * 262144) + (s64)partial_data4);
+	partial_data6 = (s64)(((s64)partial_data5) / 4294967296U);
+
+	/*Update the compensated temperature in calib structure since this is needed
+	 * for pressure calculation */
+	data->t_fine = partial_data6;
+	comp_temp = (s64)((partial_data6 * 25) / 16384);
+
+	/*Return compensated temperature */
+	return comp_temp;
+}
+
+/* This API is used to compensate the raw pressure data and
+ * return the compensated pressure data in integer data type.
+ * for eg if the returned pressure value is 9528709 which is 9528709/100 = 95287.09 Pascal or 952.87hPa
+ */
+static u64 bmp390_compensate_press(struct bmp280_data *data,
+                                   u32 uncomp_press)
+{
+	/* Variable to hold the compensated pressure */
+        u64 comp_press;
+	/* Temporary variables used for compensation */
+	s64 partial_data1, partial_data2, partial_data3, partial_data4, partial_data5, partial_data6, offset, sensitivity;
+	struct bmp390_calib *calib = &data->calib.bmp390;
+
+	partial_data1 = data->t_fine * data->t_fine;
+	partial_data2 = partial_data1 / 64;
+	partial_data3 = (partial_data2 * data->t_fine) / 256;
+	partial_data4 = (calib->P8 * partial_data3) / 32;
+	partial_data5 = (calib->P7 * partial_data1) * 16;
+	partial_data6 = (calib->P6 * data->t_fine) * 4194304;
+	offset = (s64)((s64)(calib->P5) * (s64)140737488355328U) + partial_data4 + partial_data5 + partial_data6;
+	partial_data2 = (((s64)calib->P4) * partial_data3) / 32;
+	partial_data4 = (calib->P3 * partial_data1) * 4;
+	partial_data5 = ((s64)(calib->P2) - 16384) * ((s64)data->t_fine) * 2097152;
+	sensitivity = (((s64)(calib->P1) - 16384) * (s64)70368744177664U) + partial_data2 + partial_data4 + partial_data5;
+	partial_data1 = (sensitivity / 16777216) * uncomp_press;
+	partial_data2 = (s64)(calib->P10) * (s64)data->t_fine;
+	partial_data3 = partial_data2 + (65536 * (s64)(calib->P9));
+	partial_data4 = (partial_data3 * uncomp_press) / 8192;
+	partial_data5 = (uncomp_press * partial_data4) / 512;
+	partial_data6 = (s64)((u64)uncomp_press * (u64)uncomp_press);
+	partial_data2 = ((s64)(calib->P11) * (s64)(partial_data6)) / 65536;
+	partial_data3 = (partial_data2 * uncomp_press) / 128;
+	partial_data4 = (offset / 4) + partial_data1 + partial_data5 + partial_data3;
+	comp_press = (((u64)partial_data4 * 25) / (u64)1099511627776U);
+
+	return comp_press;
+}
+
+/* This API checks for the temperature data ready status, reads the raw temperature, compensates it
+ * and updates the *val argument
+ */
+static int bmp390_read_temp(struct bmp280_data *data,
+                            int *val, int *val2)
+{
+	int ret;
+	u8 tmp[3];
+	u32 adc_temp;
+	u64 comp_temp;
+	unsigned int cmd_rdy_status;
+
+	ret = regmap_read(data->regmap, BMP390_REG_STATUS, &cmd_rdy_status);
+	if (ret < 0) {
+		dev_err(data->dev, "Failed to read status register\n");
+		return ret;
+	}
+	/* Check if the temperature data is ready before reading the temperature */
+	if((cmd_rdy_status & BMP390_TEMP_DRDY) != 0) {
+		ret = regmap_bulk_read(data->regmap, BMP390_REG_TEMP_XLSB,
+					tmp, 3);
+	        if (ret < 0) {
+			dev_err(data->dev, "failed to read temperature\n");
+			return ret;
+		}
+		adc_temp = (u32)tmp[2] << 16 | (u32)tmp[1] << 8 | tmp[0];
+
+		comp_temp = bmp390_compensate_temp(data, adc_temp);
+
+		/*
+		 * val might be NULL if we're called by the read_press routine,
+		 * who only cares about the carry over t_fine value.
+		 * */
+		if (val) {
+			*val = comp_temp;
+			*val2 = 100;
+			return IIO_VAL_FRACTIONAL;
+		}
+	}
+	else {
+		dev_err(data->dev, "Temperature data not ready \n");
+	}
+
+	return 0;
+}
+
+/* This API checks for the temperature/pressure data ready status and reads
+ * the raw data, compensates and updates the compensated pressure in the *val argument
+ */
+static int bmp390_read_press(struct bmp280_data *data,
+                             int *val, int *val2)
+{
+	int ret;
+	u8 tmp[3];
+	u32 adc_press;
+	u64 comp_press;
+	unsigned int cmd_rdy_status;
+
+	ret = regmap_read(data->regmap, BMP390_REG_STATUS, &cmd_rdy_status);
+	if (ret < 0) {
+		dev_err(data->dev, "Failed to read status register\n");
+		return ret;
+	}
+	/* Check if the temperature and pressure data are ready before it is being read */
+	if (((cmd_rdy_status & BMP390_TEMP_DRDY) != 0) && ((cmd_rdy_status & BMP390_PRESS_DRDY) != 0)) {
+
+		/* Read and compensate temperature so we get a reading of t_fine used in pressure compensation. */
+		ret = bmp390_read_temp(data, NULL, NULL);
+		if (ret < 0)
+			return ret;
+		ret = regmap_bulk_read(data->regmap, BMP390_REG_PRESS_XLSB,
+					tmp, 3);
+		if (ret < 0) {
+			dev_err(data->dev, "failed to read pressure\n");
+			return ret;
+		}
+
+		adc_press = (u32)tmp[2] << 16 | (u32)tmp[1] << 8 | tmp[0];
+
+		comp_press = bmp390_compensate_press(data, adc_press);
+		*val = comp_press;
+		*val2 = 10000;
+
+		return IIO_VAL_FRACTIONAL;
+	}
+	else {
+		dev_err(data->dev, "Pressure data not ready..\n");
+	}
+
+	return 0;
+}
+/* This API is used to configure the power control(pressure enable,
+ * temperature enable, power mode), over sampling, ODR and filter
+ * settings in the sensor.
+ */
+static int bmp390_chip_config(struct bmp280_data *data)
+{
+	int ret;
+	u8 osrs = BMP390_OSR_TEMP_X(data->oversampling_temp) |
+			BMP390_OSR_PRESS_X(data->oversampling_press);
+
+	/* Updating the pressure and temperature oversampling values */
+	ret = regmap_write_bits(data->regmap, BMP390_REG_OSR,
+                                 BMP390_OSR_TEMP_MASK |
+                                 BMP390_OSR_PRESS_MASK,
+                                 osrs);
+	if (ret < 0) {
+		dev_err(data->dev,
+			"failed to write OSR register\n");
+		return ret;
+	}
+	/* Updating the IIR filter coefficient */
+	ret = regmap_update_bits(data->regmap, BMP390_REG_CONFIG,
+					BMP390_FILTER_MASK,
+					BMP390_FILTER_COEFF_3);
+	if (ret < 0) {
+		dev_err(data->dev,
+			"failed to write config register\n");
+		return ret;
+	}
+	/* Configuring the Output Data rate */
+	ret = regmap_write(data->regmap, BMP390_REG_ODR, BMP390_ODR_25Hz);
+	if (ret < 0) {
+		dev_err(data->dev,
+			"failed to write ODR register\n");
+		return ret;
+	}
+
+	/* Enabling pressure and temperature measurement, setting mode to normal */
+	ret = regmap_write_bits(data->regmap, BMP390_REG_PWR_CTRL,
+				BMP390_PRESS_EN_MASK |
+				BMP390_TEMP_EN_MASK |
+				BMP390_MODE_MASK,
+				BMP390_PRESS_EN | BMP390_TEMP_EN | BMP390_MODE_NORMAL);
+
+	if (ret < 0) {
+		dev_err(data->dev,
+			"failed to write pwr ctrl register\n");
+		return ret;
+	}
+
+        return 0;
+}
+/* This API is used to perform soft reset of the sensor to reset all the user configuration
+ * settings to default
+ */
+static int bmp390_soft_reset(struct bmp280_data *data)
+{
+	int ret;
+	unsigned int cmd_rdy_status, cmd_err_status;
+
+	/* Checking for command ready status */
+	ret = regmap_read(data->regmap, BMP390_REG_STATUS, &cmd_rdy_status);
+	if (ret < 0) {
+		dev_err(data->dev, "Failed to read status register\n");
+		return ret;
+	}
+	/* Device is ready to accept a new command */
+	if (cmd_rdy_status & BMP390_CMD_READY) {
+
+		/* Trigger a soft reset to reset all user configuration settings to default */
+		ret = regmap_write(data->regmap, BMP390_REG_CMD, BMP390_SOFT_RESET_VAL);
+		if (ret < 0) {
+			dev_err(data->dev, "Soft reset failed!\n");
+			return ret;
+		}
+		/* Wait for 2ms */
+		usleep_range(data->start_up_time, data->start_up_time + 100);
+
+		/* Read for Command error status */
+		ret = regmap_read(data->regmap, BMP390_REG_ERR, &cmd_err_status);
+		if (ret < 0) {
+			dev_err(data->dev, "Failed to read Error status\n");
+			return ret;
+		}
+
+		if (cmd_err_status & BMP390_CMD_ERR) {
+		       dev_err(data->dev, "Sensor error reported: %d\n", cmd_err_status);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+const struct bmp280_chip_info bmp390_chip_info = {
+	.channels = bmp280_channels,
+	.num_channels = 2,
+	.id_reg = BMP390_REG_ID,
+	.chip_id = BMP390_CHIP_ID,
+	.regmap_config = &bmp390_regmap_config,
+	.start_up_time = 2000,
+	.oversampling_temp_avail = bmp390_oversampling_avail,
+	.oversampling_temp_default = ilog2(2),
+	.num_oversampling_temp_avail = ARRAY_SIZE(bmp390_oversampling_avail),
+
+	.oversampling_press_avail = bmp390_oversampling_avail,
+	.num_oversampling_press_avail = ARRAY_SIZE(bmp390_oversampling_avail),
+	.oversampling_press_default = ilog2(16),
+
+	.chip_config = bmp390_chip_config,
+	.read_temp = bmp390_read_temp,
+	.read_press = bmp390_read_press,
+	.read_calib = bmp390_read_calib,
+};
+EXPORT_SYMBOL_NS(bmp390_chip_info, IIO_BMP280);
+
 static void bmp280_pm_disable(void *data)
 {
 	struct device *dev = data;
@@ -2076,7 +2406,7 @@ int bmp280_common_probe(struct device *dev,
 	struct iio_dev *indio_dev;
 	struct bmp280_data *data;
 	struct gpio_desc *gpiod;
-	unsigned int chip_id;
+	unsigned int chip_id, rev_id;
 	int ret;
 
 	indio_dev = devm_iio_device_alloc(dev, sizeof(*data));
@@ -2139,9 +2469,27 @@ int bmp280_common_probe(struct device *dev,
 
 	data->regmap = regmap;
 
-	ret = regmap_read(regmap, data->chip_info->id_reg, &chip_id);
-	if (ret < 0)
-		return ret;
+	/* BMP3xx requires soft-reset as part of initialization */
+	if (data->chip_info->chip_id == BMP380_CHIP_ID) {
+		ret = bmp380_cmd(data, BMP380_CMD_SOFT_RESET);
+		if (ret < 0)
+			return ret;
+	}
+	else if (data->chip_info->chip_id == BMP390_CHIP_ID) {
+		ret = regmap_read(regmap, BMP390_REG_ID, &chip_id);
+		if (ret < 0)
+			return ret;
+		ret = regmap_read(regmap, BMP390_REG_REV, &rev_id);
+		if (ret < 0)
+			return ret;
+		pr_info("CHIP_ID: %x, REV_ID: %x\n", chip_id, rev_id);
+		/* Concatenating the chip identification code and mask revision of the ASIC
+		 * as BME280 and BMP390 share the same chip id (0x60)*/
+		chip_id = ((chip_id << 8) | rev_id);
+		/* Trigger soft reset */
+		ret = bmp390_soft_reset(data);
+	}
+
 	if (chip_id != data->chip_info->chip_id) {
 		dev_err(dev, "bad chip id: expected %x got %x\n",
 			data->chip_info->chip_id, chip_id);
diff --git a/drivers/iio/pressure/bmp280-i2c.c b/drivers/iio/pressure/bmp280-i2c.c
index dbe630ad05b5..d843a067ac58 100644
--- a/drivers/iio/pressure/bmp280-i2c.c
+++ b/drivers/iio/pressure/bmp280-i2c.c
@@ -34,6 +34,7 @@ static const struct of_device_id bmp280_of_i2c_match[] = {
 	{ .compatible = "bosch,bmp280", .data = &bmp280_chip_info },
 	{ .compatible = "bosch,bme280", .data = &bme280_chip_info },
 	{ .compatible = "bosch,bmp380", .data = &bmp380_chip_info },
+	{ .compatible = "bosch,bmp390", .data = &bmp390_chip_info },
 	{ .compatible = "bosch,bmp580", .data = &bmp580_chip_info },
 	{ },
 };
@@ -45,6 +46,7 @@ static const struct i2c_device_id bmp280_i2c_id[] = {
 	{"bmp280", (kernel_ulong_t)&bmp280_chip_info },
 	{"bme280", (kernel_ulong_t)&bme280_chip_info },
 	{"bmp380", (kernel_ulong_t)&bmp380_chip_info },
+	{"bmp390", (kernel_ulong_t)&bmp390_chip_info },
 	{"bmp580", (kernel_ulong_t)&bmp580_chip_info },
 	{ },
 };
@@ -52,7 +54,7 @@ MODULE_DEVICE_TABLE(i2c, bmp280_i2c_id);
 
 static struct i2c_driver bmp280_i2c_driver = {
 	.driver = {
-		.name	= "bmp280",
+		.name	= "bmp390",
 		.of_match_table = bmp280_of_i2c_match,
 		.pm = pm_ptr(&bmp280_dev_pm_ops),
 	},
diff --git a/drivers/iio/pressure/bmp280-regmap.c b/drivers/iio/pressure/bmp280-regmap.c
index 3ee56720428c..383a3048b51d 100644
--- a/drivers/iio/pressure/bmp280-regmap.c
+++ b/drivers/iio/pressure/bmp280-regmap.c
@@ -198,3 +198,45 @@ const struct regmap_config bmp580_regmap_config = {
 	.volatile_reg = bmp580_is_volatile_reg,
 };
 EXPORT_SYMBOL_NS(bmp580_regmap_config, IIO_BMP280);
+
+static bool bmp390_is_writeable_reg(struct device *dev, unsigned int reg)
+{
+	switch (reg) {
+	case BMP390_REG_CONFIG:
+	case BMP390_REG_OSR:
+	case BMP390_REG_PWR_CTRL:
+	case BMP390_REG_CMD:
+	case BMP390_REG_ODR:
+		return true;
+	default:
+		return false;
+	};
+}
+
+static bool bmp390_is_volatile_reg(struct device *dev, unsigned int reg)
+{
+	switch (reg) {
+	case BMP390_REG_TEMP_XLSB:
+	case BMP390_REG_TEMP_LSB:
+	case BMP390_REG_TEMP_MSB:
+	case BMP390_REG_PRESS_XLSB:
+	case BMP390_REG_PRESS_LSB:
+	case BMP390_REG_PRESS_MSB:
+	case BMP390_REG_STATUS:
+		return true;
+	default:
+		return false;
+	}
+}
+const struct regmap_config bmp390_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+
+	.max_register = BMP390_REG_CMD,
+	.cache_type = REGCACHE_RBTREE,
+
+	.writeable_reg = bmp390_is_writeable_reg,
+	.volatile_reg = bmp390_is_volatile_reg,
+};
+
+EXPORT_SYMBOL(bmp390_regmap_config);
diff --git a/drivers/iio/pressure/bmp280.h b/drivers/iio/pressure/bmp280.h
index 5c0563ce7572..e2a031eb5fc4 100644
--- a/drivers/iio/pressure/bmp280.h
+++ b/drivers/iio/pressure/bmp280.h
@@ -282,6 +282,59 @@
 #define BMP180_MEAS_PRESS_4X		2
 #define BMP180_MEAS_PRESS_8X		3
 
+/* BMP390 specific registers */
+#define BMP390_REG_TEMP_XLSB		0x07
+#define BMP390_REG_TEMP_LSB		0x08
+#define BMP390_REG_TEMP_MSB		0x09
+#define BMP390_REG_PRESS_XLSB		0x04
+#define BMP390_REG_PRESS_LSB		0x05
+#define BMP390_REG_PRESS_MSB		0x06
+#define BMP390_REG_OSR			0x1C
+#define BMP390_REG_ODR			0x1D
+#define BMP390_REG_PWR_CTRL		0x1B
+#define BMP390_REG_CONFIG		0x1F
+#define BMP390_REG_COMP_TEMP_START	0x31
+#define BMP390_TEMP_CALIB_DATA_LEN	5
+#define BMP390_REG_COMP_PRESS_START	0x36
+#define BMP390_PRESS_CALIB_DATA_LEN	16
+#define BMP390_REG_STATUS		0x03
+#define BMP390_REG_CMD			0x7E
+#define BMP390_REG_ERR			0x02
+#define BMP390_REG_ID			0x00
+#define BMP390_REG_REV			0x01
+
+/* Oversampling macros */
+#define BMP390_OSR_TEMP_X(osr_t)	((osr_t) << 3)
+#define BMP390_OSR_TEMP_MASK		(BIT(5) | BIT(4) | BIT(3))
+#define BMP390_OSR_PRESS_X(osr_p)	((osr_p) << 0)
+#define BMP390_OSR_PRESS_MASK		(BIT(2) | BIT(1) | BIT(0))
+#define BMP390_PRESS_EN_MASK		BIT(0)
+#define BMP390_TEMP_EN_MASK		BIT(1)
+#define BMP390_PRESS_EN			BIT(0)
+#define BMP390_TEMP_EN			BIT(1)
+/* Power mode macros */
+#define BMP390_MODE_MASK                (BIT(5) | BIT(4))
+#define BMP390_MODE_NORMAL		(BIT(5) | BIT(4))
+#define BMP390_MODE_SLEEP		0
+#define BMP390_MODE_FORCED		BIT(5)
+/* IIR Filter macros */
+#define BMP390_FILTER_MASK		(BIT(3) | BIT(2) | BIT(1))
+#define BMP390_FILTER_COEFF_1		BIT(1)
+#define BMP390_FILTER_COEFF_3		BIT(2)
+#define BMP390_FILTER_COEFF_7		(BIT(2) | BIT(1))
+#define BMP390_FILTER_COEFF_15		BIT(3)
+#define BMP390_FILTER_COEFF_31		(BIT(3) | BIT(1))
+#define BMP390_FILTER_COEFF_63		(BIT(3) | BIT(2))
+#define BMP390_FILTER_COEFF_127		(BIT(3) | BIT(2) | BIT(1))
+/* Status macros */
+#define BMP390_CMD_READY		BIT(4)
+#define BMP390_CMD_ERR			(BIT(2) | BIT(1) | BIT(0))
+#define BMP390_TEMP_DRDY		BIT(6)
+#define BMP390_PRESS_DRDY		BIT(5)
+#define BMP390_ODR_25Hz			0x03
+/* Macro to combine two 8 bit data to form a 16 bit data */
+#define BMP390_CONCAT_BYTES(msb,lsb)	(((uint16_t)msb << 8 ) | (uint16_t)lsb)
+
 /* BMP180 and BMP280 common registers */
 #define BMP280_REG_CTRL_MEAS		0xF4
 #define BMP280_REG_RESET		0xE0
@@ -293,7 +346,14 @@
 #define BMP180_CHIP_ID			0x55
 #define BMP280_CHIP_ID			0x58
 #define BME280_CHIP_ID			0x60
+/* CHIP_ID being the same for BME280 and BMP390, considering the revision id along with the chip_id for BMP390
+ * CHIP_ID: 0x6001
+ */
+#define BMP390_CHIP_ID_VALUE		0x60
+#define BMP390_REV_ID			0x01
+#define BMP390_CHIP_ID			((BMP390_CHIP_ID_VALUE << 8) | (BMP390_REV_ID))
 #define BMP280_SOFT_RESET_VAL		0xB6
+#define BMP390_SOFT_RESET_VAL		0xB6
 
 /* BMP280 register skipped special values */
 #define BMP280_TEMP_SKIPPED		0x80000
@@ -362,6 +422,24 @@ struct bmp380_calib {
 	s8  P11;
 };
 
+/* See datasheet Section 3.11.1 */
+struct bmp390_calib {
+	u16 T1;
+	u16 T2;
+	s8  T3;
+	s16 P1;
+	s16 P2;
+	s8  P3;
+	s8  P4;
+	u16 P5;
+	u16 P6;
+	s8  P7;
+	s8  P8;
+	s16 P9;
+	s8  P10;
+	s8  P11;
+};
+
 struct bmp280_data {
 	struct device *dev;
 	struct mutex lock;
@@ -373,6 +451,7 @@ struct bmp280_data {
 		struct bmp180_calib bmp180;
 		struct bmp280_calib bmp280;
 		struct bmp380_calib bmp380;
+		struct bmp390_calib bmp390;
 	} calib;
 	struct regulator_bulk_data supplies[BMP280_NUM_SUPPLIES];
 	unsigned int start_up_time; /* in microseconds */
@@ -397,7 +476,7 @@ struct bmp280_data {
 	 * Carryover value from temperature conversion, used in pressure
 	 * calculation.
 	 */
-	s32 t_fine;
+	s64 t_fine;
 
 	/*
 	 * DMA (thus cache coherency maintenance) may require the
@@ -459,12 +538,14 @@ extern const struct bmp280_chip_info bmp180_chip_info;
 extern const struct bmp280_chip_info bmp280_chip_info;
 extern const struct bmp280_chip_info bme280_chip_info;
 extern const struct bmp280_chip_info bmp380_chip_info;
+extern const struct bmp280_chip_info bmp390_chip_info;
 extern const struct bmp280_chip_info bmp580_chip_info;
 
 /* Regmap configurations */
 extern const struct regmap_config bmp180_regmap_config;
 extern const struct regmap_config bmp280_regmap_config;
 extern const struct regmap_config bmp380_regmap_config;
+extern const struct regmap_config bmp390_regmap_config;
 extern const struct regmap_config bmp580_regmap_config;
 
 /* Probe called from different transports */
-- 
2.34.1

