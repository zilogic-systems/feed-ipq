From ca0edc819cd336f4630cab909d11bc7f1ea8f28f Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Mon, 22 Jan 2024 13:14:33 +0530
Subject: [PATCH 499/500] drivers: mmc: sdhci: Add HW Key slot support for ice

Change-Id: Idbd1db4a7b195ab01eff923f5b4abb9aeadd77c3
Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 35 +++++++++++++++++
 drivers/firmware/qcom_scm.h            |  3 ++
 drivers/md/dm-crypt.c                  |  8 +++-
 drivers/mmc/host/cqhci-crypto.c        |  1 +
 drivers/mmc/host/cqhci.h               |  1 +
 drivers/mmc/host/sdhci-msm.c           |  3 +-
 drivers/soc/qcom/ice.c                 | 53 +++++++++++++++++++++++++-
 include/linux/blk-crypto.h             |  1 +
 include/linux/firmware/qcom/qcom_scm.h |  4 ++
 include/soc/qcom/ice.h                 | 26 ++++++++++++-
 10 files changed, 131 insertions(+), 4 deletions(-)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 5e9241e10bad..118e17fa4637 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -309,6 +309,28 @@ static bool __qcom_scm_is_call_available(struct device *dev, u32 svc_id,
 	return ret ? false : !!res.result[0];
 }
 
+int qcom_config_sec_ice(void *buf, int size)
+{
+	int ret;
+	dma_addr_t conf_phys;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SVC_ICE,
+		.cmd = QCOM_SCM_ICE_CMD,
+		.arginfo = QCOM_SCM_ARGS(2),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	conf_phys = dma_map_single(__scm->dev, buf, size, DMA_TO_DEVICE);
+
+	desc.args[0] = (u64)conf_phys;
+	desc.args[1] = size;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	return ret ? false : !!res.result[0];
+}
+EXPORT_SYMBOL(qcom_config_sec_ice);
+
 static int qcom_scm_set_boot_addr(void *entry, const u8 *cpu_bits)
 {
 	int cpu;
@@ -1327,6 +1349,19 @@ bool qcom_scm_ice_available(void)
 }
 EXPORT_SYMBOL_GPL(qcom_scm_ice_available);
 
+/**
+ * qcom_scm_ice_hwkey_available() - Is the ICE HW key programming
+ *                                  interface available?
+ *
+ * Return: true if the SCM calls wrapped by qcom_config_sec_ice() are available.
+ */
+bool qcom_scm_ice_hwkey_available(void)
+{
+	return __qcom_scm_is_call_available(__scm->dev, QCOM_SVC_ICE,
+					    QCOM_SCM_ICE_CMD);
+}
+EXPORT_SYMBOL(qcom_scm_ice_hwkey_available);
+
 /**
  * qcom_scm_ice_invalidate_key() - Invalidate an inline encryption key
  * @index: the keyslot to invalidate
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index 065cb7de1883..2c18cd0c5fbc 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -145,6 +145,9 @@ extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 #define QCOM_SCM_ES_INVALIDATE_ICE_KEY	0x03
 #define QCOM_SCM_ES_CONFIG_SET_ICE_KEY	0x04
 
+#define QCOM_SVC_ICE		23
+#define QCOM_SCM_ICE_CMD	0x1
+
 #define QCOM_SCM_SVC_HDCP		0x11
 #define QCOM_SCM_HDCP_INVOKE		0x01
 
diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index ec332dd44912..773501761513 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -138,7 +138,8 @@ struct iv_elephant_private {
 enum flags { DM_CRYPT_SUSPENDED, DM_CRYPT_KEY_VALID,
 	     DM_CRYPT_SAME_CPU, DM_CRYPT_NO_OFFLOAD,
 	     DM_CRYPT_NO_READ_WORKQUEUE, DM_CRYPT_NO_WRITE_WORKQUEUE,
-	     DM_CRYPT_WRITE_INLINE, DM_CRYPT_INLINE_ENCRYPTION };
+	     DM_CRYPT_WRITE_INLINE, DM_CRYPT_INLINE_ENCRYPTION,
+	     DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY };
 
 enum cipher_flags {
 	CRYPT_MODE_INTEGRITY_AEAD,	/* Use authenticated mode for cipher */
@@ -2462,6 +2463,9 @@ static int crypt_prepare_inline_crypt_key(struct crypt_config *cc)
 		goto bad_key;
 	}
 
+	if (test_bit(DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY, &cc->flags))
+		cc->blk_key->use_hwkey = true;
+
 	ret = blk_crypto_start_using_key(cc->dev->bdev, cc->blk_key);
 	if (ret) {
 		DMERR("Failed to use inline encryption key");
@@ -3277,6 +3281,8 @@ static int crypt_ctr_optional(struct dm_target *ti, unsigned int argc, char **ar
 #ifdef CONFIG_BLK_INLINE_ENCRYPTION
 		else if (!strcasecmp(opt_string, "inline_crypt"))
 			set_bit(DM_CRYPT_INLINE_ENCRYPTION, &cc->flags);
+		else if (!strcasecmp(opt_string, "hwkey"))
+			set_bit(DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY, &cc->flags);
 #endif
 		else if (sscanf(opt_string, "integrity:%u:", &val) == 1) {
 			if (val == 0 || val > MAX_TAG_SIZE) {
diff --git a/drivers/mmc/host/cqhci-crypto.c b/drivers/mmc/host/cqhci-crypto.c
index 85ab7bb87886..ca7295284496 100644
--- a/drivers/mmc/host/cqhci-crypto.c
+++ b/drivers/mmc/host/cqhci-crypto.c
@@ -86,6 +86,7 @@ static int cqhci_crypto_keyslot_program(struct blk_crypto_profile *profile,
 	union cqhci_crypto_cfg_entry cfg = {};
 	int err;
 
+	cq_host->use_hwkey = key->use_hwkey;
 	BUILD_BUG_ON(CQHCI_CRYPTO_KEY_SIZE_INVALID != 0);
 	for (i = 0; i < cq_host->crypto_capabilities.num_crypto_cap; i++) {
 		if (ccap_array[i].algorithm_id == alg->alg &&
diff --git a/drivers/mmc/host/cqhci.h b/drivers/mmc/host/cqhci.h
index 1a12e40a02e6..02cd10acf5c7 100644
--- a/drivers/mmc/host/cqhci.h
+++ b/drivers/mmc/host/cqhci.h
@@ -276,6 +276,7 @@ struct cqhci_host {
 	union cqhci_crypto_capabilities crypto_capabilities;
 	union cqhci_crypto_cap_entry *crypto_cap_array;
 	u32 crypto_cfg_register;
+	bool use_hwkey;
 #endif
 };
 
diff --git a/drivers/mmc/host/sdhci-msm.c b/drivers/mmc/host/sdhci-msm.c
index f6899ad6a031..50ab9382ff55 100644
--- a/drivers/mmc/host/sdhci-msm.c
+++ b/drivers/mmc/host/sdhci-msm.c
@@ -1882,7 +1882,8 @@ static int sdhci_msm_program_key(struct cqhci_host *cq_host,
 					    cap.algorithm_id,
 					    cap.key_size,
 					    cfg->crypto_key,
-					    cfg->data_unit_size, slot);
+					    cfg->data_unit_size, slot,
+					    cq_host->use_hwkey);
 	else
 		return qcom_ice_evict_key(msm_host->ice, slot);
 }
diff --git a/drivers/soc/qcom/ice.c b/drivers/soc/qcom/ice.c
index 986d987eba34..389f5ebc3b9e 100644
--- a/drivers/soc/qcom/ice.c
+++ b/drivers/soc/qcom/ice.c
@@ -164,6 +164,49 @@ int qcom_ice_suspend(struct qcom_ice *ice)
 }
 EXPORT_SYMBOL_GPL(qcom_ice_suspend);
 
+static int sdhci_msm_ice_set_hwkey_config(struct qcom_ice *ice,
+				          enum qcom_scm_ice_cipher cipher)
+{
+	struct device *dev = ice->dev;
+	struct ice_config_sec *ice_settings = NULL;
+	int ret;
+
+	ice_settings = kmalloc(sizeof(struct ice_config_sec), GFP_KERNEL);
+	if (!ice)
+		return -ENOMEM;
+
+	switch (cipher) {
+	case QCOM_SCM_ICE_CIPHER_AES_128_XTS:
+		ice_settings->algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_XTS;
+		ice_settings->key_size = ICE_CRYPTO_KEY_SIZE_HW_128;
+		ice_settings->key_mode = ICE_CRYPTO_USE_KEY0_HW_KEY;
+		break;
+	case QCOM_SCM_ICE_CIPHER_AES_256_XTS:
+		ice_settings->algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_XTS;
+		ice_settings->key_size = ICE_CRYPTO_KEY_SIZE_HW_256;
+		ice_settings->key_mode = ICE_CRYPTO_USE_KEY0_HW_KEY;
+		break;
+	case QCOM_SCM_ICE_CIPHER_AES_128_ECB:
+		ice_settings->algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
+		ice_settings->key_size = ICE_CRYPTO_KEY_SIZE_HW_128;
+		ice_settings->key_mode = ICE_CRYPTO_USE_KEY0_HW_KEY;
+		break;
+	case QCOM_SCM_ICE_CIPHER_AES_256_ECB:
+		ice_settings->algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
+		ice_settings->key_size = ICE_CRYPTO_KEY_SIZE_HW_256;
+		ice_settings->key_mode = ICE_CRYPTO_USE_KEY0_HW_KEY;
+		break;
+	default:
+		dev_err_ratelimited(dev, "Unhandled cipher for HW Key support;"
+					"cipher_id=%d\n", cipher);
+		kfree(ice);
+		return -EINVAL;
+	}
+	ret = qcom_config_sec_ice(ice_settings, sizeof(struct ice_config_sec));
+	kfree(ice_settings);
+	return ret;
+}
+
 static int qcom_ice_get_algo_mode(struct qcom_ice *ice, u8 algorithm_id,
 				  u8 key_size, enum qcom_scm_ice_cipher *cipher,
 				  u32 *key_len)
@@ -212,7 +255,7 @@ static int qcom_ice_get_algo_mode(struct qcom_ice *ice, u8 algorithm_id,
 int qcom_ice_program_key(struct qcom_ice *ice,
 			 u8 algorithm_id, u8 key_size,
 			 const u8 crypto_key[], u8 data_unit_size,
-			 int slot)
+			 int slot, bool use_hwkey)
 {
 	struct device *dev = ice->dev;
 	enum qcom_scm_ice_cipher cipher;
@@ -230,6 +273,9 @@ int qcom_ice_program_key(struct qcom_ice *ice,
 		return -EINVAL;
 	}
 
+	if (use_hwkey)
+		return sdhci_msm_ice_set_hwkey_config(ice, cipher);
+
 	memcpy(key.bytes, crypto_key, key_len);
 
 	/* The SCM call requires that the key words are encoded in big endian */
@@ -264,6 +310,11 @@ static struct qcom_ice *qcom_ice_create(struct device *dev,
 		return NULL;
 	}
 
+	if (!qcom_scm_ice_hwkey_available()) {
+		dev_warn(dev, "ICE HW Key SCM interface not found\n");
+		return NULL;
+	}
+
 	engine = devm_kzalloc(dev, sizeof(*engine), GFP_KERNEL);
 	if (!engine)
 		return ERR_PTR(-ENOMEM);
diff --git a/include/linux/blk-crypto.h b/include/linux/blk-crypto.h
index da503a05c5f6..9a1800393adf 100644
--- a/include/linux/blk-crypto.h
+++ b/include/linux/blk-crypto.h
@@ -52,6 +52,7 @@ struct blk_crypto_key {
 	struct blk_crypto_config crypto_cfg;
 	unsigned int data_unit_size_bits;
 	unsigned int size;
+	bool use_hwkey;
 	u8 raw[BLK_CRYPTO_MAX_KEY_SIZE];
 };
 
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index c70f3d993b18..8ccf921b9121 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -165,8 +165,10 @@ enum qcom_scm_sec_dev_id {
 enum qcom_scm_ice_cipher {
 	QCOM_SCM_ICE_CIPHER_AES_128_XTS = 0,
 	QCOM_SCM_ICE_CIPHER_AES_128_CBC = 1,
+	QCOM_SCM_ICE_CIPHER_AES_128_ECB = 2,
 	QCOM_SCM_ICE_CIPHER_AES_256_XTS = 3,
 	QCOM_SCM_ICE_CIPHER_AES_256_CBC = 4,
+	QCOM_SCM_ICE_CIPHER_AES_256_ECB = 5,
 };
 
 #define QCOM_SCM_PERM_READ       0x4
@@ -263,7 +265,9 @@ extern int qcom_scm_ocmem_unlock(enum qcom_scm_ocmem_client id, u32 offset,
 				 u32 size);
 
 extern bool qcom_scm_ice_available(void);
+extern bool qcom_scm_ice_hwkey_available(void);
 extern int qcom_scm_ice_invalidate_key(u32 index);
+extern int qcom_config_sec_ice(void *buf, int size);
 extern int qcom_scm_ice_set_key(u32 index, const u8 *key, u32 key_size,
 				enum qcom_scm_ice_cipher cipher,
 				u32 data_unit_size);
diff --git a/include/soc/qcom/ice.h b/include/soc/qcom/ice.h
index 5870a94599a2..ff2e020c14a0 100644
--- a/include/soc/qcom/ice.h
+++ b/include/soc/qcom/ice.h
@@ -25,13 +25,37 @@ enum qcom_ice_crypto_alg {
 	QCOM_ICE_CRYPTO_ALG_ESSIV_AES_CBC	= 0x3,
 };
 
+enum ice_cryto_algo_mode {
+	ICE_CRYPTO_ALGO_MODE_HW_AES_ECB = 0x0,
+	ICE_CRYPTO_ALGO_MODE_HW_AES_XTS = 0x3,
+};
+
+enum ice_crpto_key_size {
+	ICE_CRYPTO_KEY_SIZE_HW_128 = 0x0,
+	ICE_CRYPTO_KEY_SIZE_HW_256 = 0x2,
+};
+
+enum ice_crpto_key_mode {
+	ICE_CRYPTO_USE_KEY0_HW_KEY = 0x0,
+	ICE_CRYPTO_USE_KEY1_HW_KEY = 0x1,
+	ICE_CRYPTO_USE_LUT_SW_KEY0 = 0x2,
+	ICE_CRYPTO_USE_LUT_SW_KEY  = 0x3
+};
+
+struct ice_config_sec {
+	uint32_t index;
+	uint8_t key_size;
+	uint8_t algo_mode;
+	uint8_t key_mode;
+} __packed;
+
 int qcom_ice_enable(struct qcom_ice *ice);
 int qcom_ice_resume(struct qcom_ice *ice);
 int qcom_ice_suspend(struct qcom_ice *ice);
 int qcom_ice_program_key(struct qcom_ice *ice,
 			 u8 algorithm_id, u8 key_size,
 			 const u8 crypto_key[], u8 data_unit_size,
-			 int slot);
+			 int slot, bool use_hwkey);
 int qcom_ice_evict_key(struct qcom_ice *ice, int slot);
 struct qcom_ice *of_qcom_ice_get(struct device *dev);
 #endif /* __QCOM_ICE_H__ */
-- 
2.34.1

