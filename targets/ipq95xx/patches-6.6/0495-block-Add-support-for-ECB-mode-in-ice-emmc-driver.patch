From ce75ced4755e388ea55d07dfa56be9a9ac8f465a Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Mon, 22 Jan 2024 15:15:06 +0530
Subject: [PATCH] block : Add support for ECB mode in ice emmc driver

Change-Id: I365087126f71681a03938f00c74154385a203d4b
Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
(cherry picked from commit dd65ea3c3292bce75c6f52bb18147f2ac57dec48)
---
 block/blk-crypto.c              | 12 ++++++++++++
 drivers/md/dm-crypt.c           |  4 ++++
 drivers/mmc/host/cqhci-crypto.c |  8 ++++++++
 drivers/soc/qcom/ice.c          | 21 +++++++++++++++++++--
 include/linux/blk-crypto.h      |  2 ++
 5 files changed, 45 insertions(+), 2 deletions(-)

diff --git a/block/blk-crypto.c b/block/blk-crypto.c
index 43dc34e17d6a..162048073545 100644
--- a/block/blk-crypto.c
+++ b/block/blk-crypto.c
@@ -61,6 +61,18 @@ const struct blk_crypto_mode blk_crypto_modes[] = {
 		.keysize = 32,
 		.ivsize = 16,
 	},
+	[BLK_ENCRYPTION_MODE_AES_128_ECB] = {
+		.name = "AES-128-ECB",
+		.cipher_str = "ecb(aes)",
+		.keysize = 16,
+		.ivsize = 16,
+	},
+	[BLK_ENCRYPTION_MODE_AES_256_ECB] = {
+		.name = "AES-256-ECB",
+		.cipher_str = "ecb(aes)",
+		.keysize = 32,
+		.ivsize = 16,
+	},
 };
 
 /*
diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index 773501761513..4db78dc38640 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -2433,6 +2433,10 @@ static int crypt_select_inline_crypt_mode(struct dm_target *ti, char *cipher,
 		cc->crypto_mode = BLK_ENCRYPTION_MODE_AES_128_CBC;
 	} else if (strcmp(cipher, "cbc(aes256)") == 0) {
 		cc->crypto_mode = BLK_ENCRYPTION_MODE_AES_256_CBC;
+	} else if (strcmp(cipher, "ecb(aes256)") == 0) {
+		cc->crypto_mode = BLK_ENCRYPTION_MODE_AES_256_ECB;
+	} else if (strcmp(cipher, "ecb(aes128)") == 0) {
+		cc->crypto_mode = BLK_ENCRYPTION_MODE_AES_128_ECB;
 	} else {
 		ti->error = "Invalid cipher for inline_crypt";
 		return -EINVAL;
diff --git a/drivers/mmc/host/cqhci-crypto.c b/drivers/mmc/host/cqhci-crypto.c
index ca7295284496..b166ac20c3be 100644
--- a/drivers/mmc/host/cqhci-crypto.c
+++ b/drivers/mmc/host/cqhci-crypto.c
@@ -32,6 +32,14 @@ static const struct cqhci_crypto_alg_entry {
 		.alg = CQHCI_CRYPTO_ALG_BITLOCKER_AES_CBC,
 		.key_size = CQHCI_CRYPTO_KEY_SIZE_256,
 	},
+	[BLK_ENCRYPTION_MODE_AES_128_ECB] = {
+		.alg = CQHCI_CRYPTO_ALG_AES_ECB,
+		.key_size = CQHCI_CRYPTO_KEY_SIZE_128,
+	},
+	[BLK_ENCRYPTION_MODE_AES_256_ECB] = {
+		.alg = CQHCI_CRYPTO_ALG_AES_ECB,
+		.key_size = CQHCI_CRYPTO_KEY_SIZE_256,
+	},
 };
 
 static inline struct cqhci_host *
diff --git a/drivers/soc/qcom/ice.c b/drivers/soc/qcom/ice.c
index de038e49d074..e61dd57ada53 100644
--- a/drivers/soc/qcom/ice.c
+++ b/drivers/soc/qcom/ice.c
@@ -210,7 +210,7 @@ static int sdhci_msm_ice_set_hwkey_config(struct qcom_ice *ice,
 
 static int qcom_ice_get_algo_mode(struct qcom_ice *ice, u8 algorithm_id,
 				  u8 key_size, enum qcom_scm_ice_cipher *cipher,
-				  u32 *key_len)
+				  u32 *key_len, bool use_hwkey)
 {
 	struct device *dev = ice->dev;
 
@@ -243,6 +243,22 @@ static int qcom_ice_get_algo_mode(struct qcom_ice *ice, u8 algorithm_id,
 			*key_len = AES_128_CBC_KEY_SIZE;
 		}
 		break;
+	case QCOM_ICE_CRYPTO_ALG_AES_ECB:
+		/* ECB mode only supports for HW key slot */
+		if (!use_hwkey) {
+			dev_err_ratelimited(dev, "Unhandled crypto capability; "
+					"algorithm_id=%d, key_size=%d\n",
+					algorithm_id, key_size);
+			return -EINVAL;
+		}
+		if (key_size == QCOM_ICE_CRYPTO_KEY_SIZE_256) {
+			*cipher = QCOM_SCM_ICE_CIPHER_AES_128_ECB;
+			*key_len = AES_256_CBC_KEY_SIZE;
+		} else {
+			*cipher = QCOM_SCM_ICE_CIPHER_AES_256_ECB;
+			*key_len = AES_128_CBC_KEY_SIZE;
+		}
+		break;
 	default:
 		dev_err_ratelimited(dev, "Unhandled crypto capability; algorithm_id=%d, key_size=%d\n",
 				    algorithm_id, key_size);
@@ -268,7 +284,8 @@ int qcom_ice_program_key(struct qcom_ice *ice,
 	int err;
 	u32 key_len;
 
-	if (qcom_ice_get_algo_mode(ice, algorithm_id, key_size, &cipher, &key_len)) {
+	if (qcom_ice_get_algo_mode(ice, algorithm_id, key_size, &cipher,
+				   &key_len, use_hwkey)) {
 		dev_err(dev, "Unhandled crypto capability; algorithm_id=%d, key_size=%d\n",
 			algorithm_id, key_size);
 		return -EINVAL;
diff --git a/include/linux/blk-crypto.h b/include/linux/blk-crypto.h
index 9a1800393adf..9ebeced66e84 100644
--- a/include/linux/blk-crypto.h
+++ b/include/linux/blk-crypto.h
@@ -17,6 +17,8 @@ enum blk_crypto_mode_num {
 	BLK_ENCRYPTION_MODE_SM4_XTS,
 	BLK_ENCRYPTION_MODE_AES_128_CBC,
 	BLK_ENCRYPTION_MODE_AES_256_CBC,
+	BLK_ENCRYPTION_MODE_AES_128_ECB,
+	BLK_ENCRYPTION_MODE_AES_256_ECB,
 	BLK_ENCRYPTION_MODE_MAX,
 };
 
-- 
2.34.1

