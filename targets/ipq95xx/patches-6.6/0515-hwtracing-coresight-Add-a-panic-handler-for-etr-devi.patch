From cce39c75f167f3eb8553066450c0c64c1614c638 Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Thu, 18 Jan 2024 23:40:29 +0530
Subject: [PATCH] hwtracing: coresight: Add a panic handler for etr device

Flush and stop the Trace collection on panic

Change-Id: Ia30884d92735593efba9b542dc76b28be3f08a00
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 .../hwtracing/coresight/coresight-tmc-core.c  |  7 ++++
 .../hwtracing/coresight/coresight-tmc-etr.c   | 40 +++++++++++++++++++
 drivers/hwtracing/coresight/coresight-tmc.h   |  3 ++
 3 files changed, 50 insertions(+)

diff --git a/drivers/hwtracing/coresight/coresight-tmc-core.c b/drivers/hwtracing/coresight/coresight-tmc-core.c
index a9cafeb4891e..b4db7d5f8219 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-core.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-core.c
@@ -24,6 +24,7 @@
 #include <linux/coresight.h>
 #include <linux/amba/bus.h>
 #include <linux/of_reserved_mem.h>
+#include <linux/panic_notifier.h>
 
 #include "coresight-priv.h"
 #include "coresight-tmc.h"
@@ -522,6 +523,12 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 		idr_init(&drvdata->idr);
 		mutex_init(&drvdata->idr_mutex);
 		dev_list = &etr_devs;
+		drvdata->panic_blk.notifier_call = tmc_etr_panic_handler;
+		ret = atomic_notifier_chain_register(&panic_notifier_list, &drvdata->panic_blk);
+		if (ret) {
+			dev_err(dev, "failed to register the panic notifier, ret is %d\n", ret);
+			goto out;
+		}
 		break;
 	case TMC_CONFIG_TYPE_ETF:
 		desc.type = CORESIGHT_DEV_TYPE_LINKSINK;
diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index 771ccb11f2d0..736c4fb15f28 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -1878,3 +1878,43 @@ int tmc_read_unprepare_etr(struct tmc_drvdata *drvdata)
 
 	return 0;
 }
+
+int tmc_etr_panic_handler(struct notifier_block *nb,
+				  unsigned long action, void *data)
+{
+	struct tmc_drvdata *drvdata = container_of(nb, struct tmc_drvdata, panic_blk);
+	unsigned long flags;
+	uint32_t val[4];
+	uint32_t phy_offset;
+	void __iomem *etr_rsvd_waddr;
+
+	if (drvdata->mode == CS_MODE_DISABLED)
+		return NOTIFY_DONE;
+
+	spin_lock_irqsave(&drvdata->spinlock, flags);
+	if (drvdata->reading)
+		goto out0;
+
+	tmc_etr_disable_hw(drvdata);
+
+	val[0] = 0xdeadbeef;
+	val[1] = readl_relaxed(drvdata->base + TMC_STS);
+	val[2] = readl_relaxed(drvdata->base + TMC_RRP);
+	val[3] = readl_relaxed(drvdata->base + TMC_RWP);
+
+	phy_offset = ((dma_addr_t)val[2] - drvdata->etr_rsvd_paddr) & 0xffffffff;
+	etr_rsvd_waddr = drvdata->etr_rsvd_vaddr + phy_offset;
+
+	memcpy_toio(etr_rsvd_waddr, &val[0], sizeof(val));
+
+	dev_info(&drvdata->csdev->dev, "RRP: 0x%x RWP: 0x%x STS: 0x%x\n",
+					val[2], val[3], val[1]);
+
+	dev_info(&drvdata->csdev->dev, "TMC aborted\n");
+out0:
+	spin_unlock_irqrestore(&drvdata->spinlock, flags);
+
+	drvdata->csdev->enable = false;
+
+	return NOTIFY_DONE;
+}
diff --git a/drivers/hwtracing/coresight/coresight-tmc.h b/drivers/hwtracing/coresight/coresight-tmc.h
index 24563673e367..6bba322c469c 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.h
+++ b/drivers/hwtracing/coresight/coresight-tmc.h
@@ -215,6 +215,7 @@ struct tmc_drvdata {
 	void __iomem		*etr_rsvd_vaddr;
 	dma_addr_t		etr_rsvd_paddr;
 	u32			rsvd_size;
+	struct notifier_block	panic_blk;
 };
 
 struct etr_buf_operations {
@@ -276,6 +277,8 @@ ssize_t tmc_etb_get_sysfs_trace(struct tmc_drvdata *drvdata,
 /* ETR functions */
 int tmc_read_prepare_etr(struct tmc_drvdata *drvdata);
 int tmc_read_unprepare_etr(struct tmc_drvdata *drvdata);
+int tmc_etr_panic_handler(struct notifier_block *nb,
+			  unsigned long action, void *data);
 void tmc_etr_disable_hw(struct tmc_drvdata *drvdata);
 extern const struct coresight_ops tmc_etr_cs_ops;
 ssize_t tmc_etr_get_sysfs_trace(struct tmc_drvdata *drvdata,
-- 
2.34.1

