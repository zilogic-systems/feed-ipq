From 2ecb0f9e3d292f1a46178ccef1056fbf36d41f4f Mon Sep 17 00:00:00 2001
From: Shwetha G K <quic_kshwetha@quicinc.com>
Date: Fri, 19 Jan 2024 16:41:05 +0530
Subject: [PATCH] cfg80211: Changes for WDS MLD

Add link id attributes for NL80211_CMD_UNEXPECTED_4ADDR_FRAME.
Based on the station's link, add links to the vlan interface

Change-Id: Iea54bb2a1ebddc3666b4cd97221b6e0da972ef98
Signed-off-by: Shwetha G K <quic_kshwetha@quicinc.com>
(cherry picked from commit 7b38a23663f86e1399d6a73af02450c269e96328)
---
 include/net/cfg80211.h |  6 +++++-
 net/mac80211/cfg.c     | 39 +++++++++++++++++++++++++++++++++++++++
 net/mac80211/rx.c      |  5 +++--
 net/wireless/nl80211.c | 13 +++++++++----
 4 files changed, 56 insertions(+), 7 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index f008298332a6..813f787c0400 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -8511,11 +8511,14 @@ void cfg80211_pmksa_candidate_notify(struct net_device *dev, int index,
 bool cfg80211_rx_spurious_frame(struct net_device *dev,
 				const u8 *addr, gfp_t gfp);
 
+#define CFG80211_UNEXP_4ADDR_MLO
+
 /**
  * cfg80211_rx_unexpected_4addr_frame - inform about unexpected WDS frame
  * @dev: The device the frame matched to
  * @addr: the transmitter address
  * @gfp: context flags
+ * @link_id: link id
  *
  * This function is used in AP mode (only!) to inform userspace that
  * an associated station sent a 4addr frame but that wasn't expected.
@@ -8525,7 +8528,8 @@ bool cfg80211_rx_spurious_frame(struct net_device *dev,
  * for a reason other than not having a subscription.)
  */
 bool cfg80211_rx_unexpected_4addr_frame(struct net_device *dev,
-					const u8 *addr, gfp_t gfp);
+					const u8 *addr, gfp_t gfp,
+					const int link_id);
 
 /**
  * cfg80211_probe_status - notify userspace about probe status
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 715da615f035..6830208876c7 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -2174,14 +2174,53 @@ static int ieee80211_change_station(struct wiphy *wiphy,
 		vlansdata = IEEE80211_DEV_TO_SUB_IF(params->vlan);
 
 		if (params->vlan->ieee80211_ptr->use_4addr) {
+			struct ieee80211_sub_if_data *master;
+			struct wireless_dev *wdev;
+
 			if (vlansdata->u.vlan.sta) {
 				err = -EBUSY;
 				goto out_err;
 			}
 
+			wdev = &vlansdata->wdev;
+			master = container_of(vlansdata->bss,
+					      struct ieee80211_sub_if_data, u.ap);
+
 			rcu_assign_pointer(vlansdata->u.vlan.sta, sta);
 			__ieee80211_check_fast_rx_iface(vlansdata);
 			drv_sta_set_4addr(local, sta->sdata, &sta->sta, true);
+			if (sta->sta.valid_links) {
+				int link_id;
+
+				for_each_set_bit(link_id,
+						 &master->vif.valid_links,
+						 IEEE80211_MLD_MAX_NUM_LINKS) {
+					if (!(sta->sta.valid_links & BIT(link_id))) {
+						rcu_assign_pointer(
+								vlansdata->vif.link_conf[link_id],
+								NULL);
+						rcu_assign_pointer(
+								vlansdata->link[link_id],
+								NULL);
+						memset(wdev->links[link_id].addr,
+								0, ETH_ALEN);
+						vlansdata->vif.valid_links &=
+							~BIT(link_id);
+						wdev->valid_links &= ~BIT(link_id);
+					} else {
+						rcu_assign_pointer(
+								vlansdata->vif.link_conf[link_id],
+								master->vif.link_conf[link_id]);
+						rcu_assign_pointer(vlansdata->link[link_id],
+								master->link[link_id]);
+						memcpy(wdev->links[link_id].addr,
+								vlansdata->vif.link_conf[link_id]->bssid,
+								ETH_ALEN);
+						vlansdata->vif.valid_links |= BIT(link_id);
+						wdev->valid_links |= BIT(link_id);
+					}
+				}
+			}
 		}
 
 		if (sta->sdata->vif.type == NL80211_IFTYPE_AP_VLAN &&
diff --git a/net/mac80211/rx.c b/net/mac80211/rx.c
index 26ca2f5dc52b..ada7a15d93b4 100644
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -1827,7 +1827,8 @@ ieee80211_rx_h_sta_process(struct ieee80211_rx_data *rx)
 			if (!test_and_set_sta_flag(sta, WLAN_STA_4ADDR_EVENT))
 				cfg80211_rx_unexpected_4addr_frame(
 					rx->sdata->dev, sta->sta.addr,
-					GFP_ATOMIC);
+					GFP_ATOMIC,
+					rx->link_id);
 			return RX_DROP_M_UNEXPECTED_4ADDR_FRAME;
 		}
 		/*
@@ -3140,7 +3141,7 @@ ieee80211_rx_h_data(struct ieee80211_rx_data *rx)
 		if (rx->sta &&
 		    !test_and_set_sta_flag(rx->sta, WLAN_STA_4ADDR_EVENT))
 			cfg80211_rx_unexpected_4addr_frame(
-				rx->sdata->dev, rx->sta->sta.addr, GFP_ATOMIC);
+				rx->sdata->dev, rx->sta->sta.addr, GFP_ATOMIC, rx->link_id);
 		return RX_DROP_MONITOR;
 	}
 
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index cefad1b9cdfc..d7a02481f2f8 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -18915,7 +18915,8 @@ void cfg80211_conn_failed(struct net_device *dev, const u8 *mac_addr,
 EXPORT_SYMBOL(cfg80211_conn_failed);
 
 static bool __nl80211_unexpected_frame(struct net_device *dev, u8 cmd,
-				       const u8 *addr, gfp_t gfp)
+				       const u8 *addr, gfp_t gfp,
+				       const int link_id)
 {
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wdev->wiphy);
@@ -18941,6 +18942,9 @@ static bool __nl80211_unexpected_frame(struct net_device *dev, u8 cmd,
 	    nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, addr))
 		goto nla_put_failure;
 
+	if (link_id != -1)
+		nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id);
+
 	genlmsg_end(msg, hdr);
 	genlmsg_unicast(wiphy_net(&rdev->wiphy), msg, nlportid);
 	return true;
@@ -18964,14 +18968,15 @@ bool cfg80211_rx_spurious_frame(struct net_device *dev,
 		return false;
 	}
 	ret = __nl80211_unexpected_frame(dev, NL80211_CMD_UNEXPECTED_FRAME,
-					 addr, gfp);
+					 addr, gfp, -1);
 	trace_cfg80211_return_bool(ret);
 	return ret;
 }
 EXPORT_SYMBOL(cfg80211_rx_spurious_frame);
 
 bool cfg80211_rx_unexpected_4addr_frame(struct net_device *dev,
-					const u8 *addr, gfp_t gfp)
+					const u8 *addr, gfp_t gfp,
+					const int link_id)
 {
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	bool ret;
@@ -18986,7 +18991,7 @@ bool cfg80211_rx_unexpected_4addr_frame(struct net_device *dev,
 	}
 	ret = __nl80211_unexpected_frame(dev,
 					 NL80211_CMD_UNEXPECTED_4ADDR_FRAME,
-					 addr, gfp);
+					 addr, gfp, link_id);
 	trace_cfg80211_return_bool(ret);
 	return ret;
 }
-- 
2.34.1

