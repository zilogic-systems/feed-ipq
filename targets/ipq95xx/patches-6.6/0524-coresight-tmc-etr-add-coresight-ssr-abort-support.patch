From 2cba54300cd7a8bd6afc0c72a17e026497d4206f Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Mon, 19 Feb 2024 14:12:12 +0530
Subject: [PATCH] coresight: tmc-etr: add coresight ssr abort support

Register rproc ssr atomic notifier when rproc node
is enabled. And abort the coresight trace and manually
flush the trace data into the sink when the rproc crashes.

Change-Id: Ia61b684c8043953dfa52f1658d9193db91225ba2
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 .../hwtracing/coresight/coresight-tmc-core.c  | 31 +++++++++++++++++++
 .../hwtracing/coresight/coresight-tmc-etr.c   | 21 ++++++++++---
 drivers/hwtracing/coresight/coresight-tmc.h   |  3 ++
 3 files changed, 51 insertions(+), 4 deletions(-)

diff --git a/drivers/hwtracing/coresight/coresight-tmc-core.c b/drivers/hwtracing/coresight/coresight-tmc-core.c
index b4db7d5f8219..c4eea17bc5c5 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-core.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-core.c
@@ -25,6 +25,8 @@
 #include <linux/amba/bus.h>
 #include <linux/of_reserved_mem.h>
 #include <linux/panic_notifier.h>
+#include <linux/remoteproc/qcom_rproc.h>
+#include <linux/remoteproc.h>
 
 #include "coresight-priv.h"
 #include "coresight-tmc.h"
@@ -457,6 +459,18 @@ static void tmc_get_reserved_region(struct device *dev)
 	}
 }
 
+static bool is_rproc_device_available(void)
+{
+	struct device_node *node;
+
+	node = of_find_node_by_name(NULL, "remoteproc");
+	if (!of_device_is_available(node))
+		return false;
+
+	of_node_put(node);
+	return true;
+}
+
 static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 {
 	int ret = 0;
@@ -468,6 +482,9 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 	struct resource *res = &adev->res;
 	struct coresight_desc desc = { 0 };
 	struct coresight_dev_list *dev_list = NULL;
+	struct rproc *rproc;
+	u32 rproc_node;
+	void *notifier;
 
 	ret = -ENOMEM;
 	drvdata = devm_kzalloc(dev, sizeof(*drvdata), GFP_KERNEL);
@@ -529,6 +546,20 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 			dev_err(dev, "failed to register the panic notifier, ret is %d\n", ret);
 			goto out;
 		}
+
+		if (!is_rproc_device_available())
+			goto skip_ssr;
+
+		if (of_property_read_u32(dev->of_node, "qcom,rproc",
+					 &rproc_node))
+			return -ENODEV;
+		rproc = rproc_get_by_phandle(rproc_node);
+		if (!rproc)
+			return -EPROBE_DEFER;
+
+		drvdata->ssr_blk.notifier_call = tmc_etr_ssr_handler;
+		notifier = qcom_register_ssr_atomic_notifier(rproc->name, &drvdata->ssr_blk);
+skip_ssr:
 		break;
 	case TMC_CONFIG_TYPE_ETF:
 		desc.type = CORESIGHT_DEV_TYPE_LINKSINK;
diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index 1229727c2b2c..eb388b0db3e7 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -14,6 +14,7 @@
 #include <linux/slab.h>
 #include <linux/types.h>
 #include <linux/vmalloc.h>
+#include <linux/remoteproc/qcom_rproc.h>
 #include "coresight-catu.h"
 #include "coresight-etm-perf.h"
 #include "coresight-priv.h"
@@ -1881,10 +1882,7 @@ int tmc_read_unprepare_etr(struct tmc_drvdata *drvdata)
 	return 0;
 }
 
-int tmc_etr_panic_handler(struct notifier_block *nb,
-				  unsigned long action, void *data)
-{
-	struct tmc_drvdata *drvdata = container_of(nb, struct tmc_drvdata, panic_blk);
+static int tmc_etr_abort(struct tmc_drvdata *drvdata) {
 	unsigned long flags;
 	uint32_t val[4];
 	uint32_t phy_offset;
@@ -1898,6 +1896,7 @@ int tmc_etr_panic_handler(struct notifier_block *nb,
 		goto out0;
 
 	tmc_etr_disable_hw(drvdata);
+	drvdata->mode = CS_MODE_DISABLED;
 
 	val[0] = 0xdeadbeef;
 	val[1] = readl_relaxed(drvdata->base + TMC_STS);
@@ -1920,3 +1919,17 @@ int tmc_etr_panic_handler(struct notifier_block *nb,
 
 	return NOTIFY_DONE;
 }
+
+int tmc_etr_ssr_handler(struct notifier_block *nb,
+				  unsigned long action, void *data)
+{
+	struct tmc_drvdata *drvdata = container_of(nb, struct tmc_drvdata, ssr_blk);
+	return tmc_etr_abort(drvdata);
+}
+
+int tmc_etr_panic_handler(struct notifier_block *nb,
+				  unsigned long action, void *data)
+{
+	struct tmc_drvdata *drvdata = container_of(nb, struct tmc_drvdata, panic_blk);
+	return tmc_etr_abort(drvdata);
+}
diff --git a/drivers/hwtracing/coresight/coresight-tmc.h b/drivers/hwtracing/coresight/coresight-tmc.h
index 6bba322c469c..15728e9a1f67 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.h
+++ b/drivers/hwtracing/coresight/coresight-tmc.h
@@ -216,6 +216,7 @@ struct tmc_drvdata {
 	dma_addr_t		etr_rsvd_paddr;
 	u32			rsvd_size;
 	struct notifier_block	panic_blk;
+	struct notifier_block	ssr_blk;
 };
 
 struct etr_buf_operations {
@@ -279,6 +280,8 @@ int tmc_read_prepare_etr(struct tmc_drvdata *drvdata);
 int tmc_read_unprepare_etr(struct tmc_drvdata *drvdata);
 int tmc_etr_panic_handler(struct notifier_block *nb,
 			  unsigned long action, void *data);
+int tmc_etr_ssr_handler(struct notifier_block *nb,
+			  unsigned long action, void *data);
 void tmc_etr_disable_hw(struct tmc_drvdata *drvdata);
 extern const struct coresight_ops tmc_etr_cs_ops;
 ssize_t tmc_etr_get_sysfs_trace(struct tmc_drvdata *drvdata,
-- 
2.34.1

