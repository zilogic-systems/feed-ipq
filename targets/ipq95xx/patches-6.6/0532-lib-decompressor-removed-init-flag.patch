From 20ed5c3520da8421b23c6b3ed74e88a08e601f72 Mon Sep 17 00:00:00 2001
From: Gurumoorthy Santhakumar <quic_gsanthak@quicinc.com>
Date: Thu, 4 Jan 2024 18:20:49 +0530
Subject: [PATCH] lib: decompressor: removed init flag.

unlzma function is used in secure sysupgrade to
decompress uboot image.

Change-Id: I32b976a9f685ca60af3416e4bba582e2038d80e8
Signed-off-by: Gurumoorthy Santhakumar <quic_gsanthak@quicinc.com>
---
 lib/Kconfig             |  1 +
 lib/decompress.c        |  4 ++--
 lib/decompress_unlzma.c | 48 ++++++++++++++++++++---------------------
 3 files changed, 26 insertions(+), 27 deletions(-)

diff --git a/lib/Kconfig b/lib/Kconfig
index 91df6df1f40b..8c7561ac95dc 100644
--- a/lib/Kconfig
+++ b/lib/Kconfig
@@ -375,6 +375,7 @@ config DECOMPRESS_BZIP2
 
 config DECOMPRESS_LZMA
 	tristate
+	default y
 
 config DECOMPRESS_XZ
 	select XZ_DEC
diff --git a/lib/decompress.c b/lib/decompress.c
index b9c1e51e4ebb..a0cead0c2b96 100644
--- a/lib/decompress.c
+++ b/lib/decompress.c
@@ -48,7 +48,7 @@ struct compress_format {
 	decompress_fn decompressor;
 };
 
-static const struct compress_format compressed_formats[] __initconst = {
+static const struct compress_format compressed_formats[] = {
 	{ {0x1f, 0x8b}, "gzip", gunzip },
 	{ {0x1f, 0x9e}, "gzip", gunzip },
 	{ {0x42, 0x5a}, "bzip2", bunzip2 },
@@ -61,7 +61,7 @@ static const struct compress_format compressed_formats[] __initconst = {
 	{ {0, 0}, NULL, NULL }
 };
 
-decompress_fn __init decompress_method(const unsigned char *inbuf, long len,
+decompress_fn decompress_method(const unsigned char *inbuf, long len,
 				const char **name)
 {
 	const struct compress_format *cf;
diff --git a/lib/decompress_unlzma.c b/lib/decompress_unlzma.c
index 20a858031f12..f7e5afc35ea2 100644
--- a/lib/decompress_unlzma.c
+++ b/lib/decompress_unlzma.c
@@ -39,7 +39,7 @@
 
 #define	MIN(a, b) (((a) < (b)) ? (a) : (b))
 
-static long long INIT read_int(unsigned char *ptr, int size)
+static long long  read_int(unsigned char *ptr, int size)
 {
 	int i;
 	long long ret = 0;
@@ -82,13 +82,13 @@ struct rc {
 #define RC_MODEL_TOTAL_BITS 11
 
 
-static long INIT nofill(void *buffer, unsigned long len)
+static long  nofill(void *buffer, unsigned long len)
 {
 	return -1;
 }
 
 /* Called twice: once at startup and once in rc_normalize() */
-static void INIT rc_read(struct rc *rc)
+static void  rc_read(struct rc *rc)
 {
 	rc->buffer_size = rc->fill((char *)rc->buffer, LZMA_IOBUF_SIZE);
 	if (rc->buffer_size <= 0)
@@ -98,7 +98,7 @@ static void INIT rc_read(struct rc *rc)
 }
 
 /* Called once */
-static inline void INIT rc_init(struct rc *rc,
+static inline void  rc_init(struct rc *rc,
 				       long (*fill)(void*, unsigned long),
 				       char *buffer, long buffer_size)
 {
@@ -115,7 +115,7 @@ static inline void INIT rc_init(struct rc *rc,
 	rc->range = 0xFFFFFFFF;
 }
 
-static inline void INIT rc_init_code(struct rc *rc)
+static inline void  rc_init_code(struct rc *rc)
 {
 	int i;
 
@@ -128,14 +128,14 @@ static inline void INIT rc_init_code(struct rc *rc)
 
 
 /* Called twice, but one callsite is in inline'd rc_is_bit_0_helper() */
-static void INIT rc_do_normalize(struct rc *rc)
+static void  rc_do_normalize(struct rc *rc)
 {
 	if (rc->ptr >= rc->buffer_end)
 		rc_read(rc);
 	rc->range <<= 8;
 	rc->code = (rc->code << 8) | *rc->ptr++;
 }
-static inline void INIT rc_normalize(struct rc *rc)
+static inline void  rc_normalize(struct rc *rc)
 {
 	if (rc->range < (1 << RC_TOP_BITS))
 		rc_do_normalize(rc);
@@ -145,25 +145,25 @@ static inline void INIT rc_normalize(struct rc *rc)
 /* Why rc_is_bit_0_helper exists?
  *Because we want to always expose (rc->code < rc->bound) to optimizer
  */
-static inline uint32_t INIT rc_is_bit_0_helper(struct rc *rc, uint16_t *p)
+static inline uint32_t  rc_is_bit_0_helper(struct rc *rc, uint16_t *p)
 {
 	rc_normalize(rc);
 	rc->bound = *p * (rc->range >> RC_MODEL_TOTAL_BITS);
 	return rc->bound;
 }
-static inline int INIT rc_is_bit_0(struct rc *rc, uint16_t *p)
+static inline int  rc_is_bit_0(struct rc *rc, uint16_t *p)
 {
 	uint32_t t = rc_is_bit_0_helper(rc, p);
 	return rc->code < t;
 }
 
 /* Called ~10 times, but very small, thus inlined */
-static inline void INIT rc_update_bit_0(struct rc *rc, uint16_t *p)
+static inline void  rc_update_bit_0(struct rc *rc, uint16_t *p)
 {
 	rc->range = rc->bound;
 	*p += ((1 << RC_MODEL_TOTAL_BITS) - *p) >> RC_MOVE_BITS;
 }
-static inline void INIT rc_update_bit_1(struct rc *rc, uint16_t *p)
+static inline void  rc_update_bit_1(struct rc *rc, uint16_t *p)
 {
 	rc->range -= rc->bound;
 	rc->code -= rc->bound;
@@ -171,7 +171,7 @@ static inline void INIT rc_update_bit_1(struct rc *rc, uint16_t *p)
 }
 
 /* Called 4 times in unlzma loop */
-static int INIT rc_get_bit(struct rc *rc, uint16_t *p, int *symbol)
+static int  rc_get_bit(struct rc *rc, uint16_t *p, int *symbol)
 {
 	if (rc_is_bit_0(rc, p)) {
 		rc_update_bit_0(rc, p);
@@ -185,7 +185,7 @@ static int INIT rc_get_bit(struct rc *rc, uint16_t *p, int *symbol)
 }
 
 /* Called once */
-static inline int INIT rc_direct_bit(struct rc *rc)
+static inline int  rc_direct_bit(struct rc *rc)
 {
 	rc_normalize(rc);
 	rc->range >>= 1;
@@ -197,7 +197,7 @@ static inline int INIT rc_direct_bit(struct rc *rc)
 }
 
 /* Called twice */
-static inline void INIT
+static inline void
 rc_bit_tree_decode(struct rc *rc, uint16_t *p, int num_levels, int *symbol)
 {
 	int i = num_levels;
@@ -289,13 +289,13 @@ struct cstate {
 	uint32_t rep0, rep1, rep2, rep3;
 };
 
-static inline size_t INIT get_pos(struct writer *wr)
+static inline size_t  get_pos(struct writer *wr)
 {
 	return
 		wr->global_pos + wr->buffer_pos;
 }
 
-static inline uint8_t INIT peek_old_byte(struct writer *wr,
+static inline uint8_t  peek_old_byte(struct writer *wr,
 						uint32_t offs)
 {
 	if (!wr->flush) {
@@ -313,7 +313,7 @@ static inline uint8_t INIT peek_old_byte(struct writer *wr,
 
 }
 
-static inline int INIT write_byte(struct writer *wr, uint8_t byte)
+static inline int  write_byte(struct writer *wr, uint8_t byte)
 {
 	wr->buffer[wr->buffer_pos++] = wr->previous_byte = byte;
 	if (wr->flush && wr->buffer_pos == wr->header->dict_size) {
@@ -327,12 +327,12 @@ static inline int INIT write_byte(struct writer *wr, uint8_t byte)
 }
 
 
-static inline int INIT copy_byte(struct writer *wr, uint32_t offs)
+static inline int  copy_byte(struct writer *wr, uint32_t offs)
 {
 	return write_byte(wr, peek_old_byte(wr, offs));
 }
 
-static inline int INIT copy_bytes(struct writer *wr,
+static inline int  copy_bytes(struct writer *wr,
 					 uint32_t rep0, int len)
 {
 	do {
@@ -344,7 +344,7 @@ static inline int INIT copy_bytes(struct writer *wr,
 	return len;
 }
 
-static inline int INIT process_bit0(struct writer *wr, struct rc *rc,
+static inline int  process_bit0(struct writer *wr, struct rc *rc,
 				     struct cstate *cst, uint16_t *p,
 				     int pos_state, uint16_t *prob,
 				     int lc, uint32_t literal_pos_mask) {
@@ -388,7 +388,7 @@ static inline int INIT process_bit0(struct writer *wr, struct rc *rc,
 	return write_byte(wr, mi);
 }
 
-static inline int INIT process_bit1(struct writer *wr, struct rc *rc,
+static inline int  process_bit1(struct writer *wr, struct rc *rc,
 					    struct cstate *cst, uint16_t *p,
 					    int pos_state, uint16_t *prob) {
 	int offset;
@@ -532,9 +532,7 @@ static inline int INIT process_bit1(struct writer *wr, struct rc *rc,
 	return copy_bytes(wr, cst->rep0, len);
 }
 
-
-
-STATIC inline int INIT unlzma(unsigned char *buf, long in_len,
+inline int  unlzma(unsigned char *buf, long in_len,
 			      long (*fill)(void*, unsigned long),
 			      long (*flush)(void*, unsigned long),
 			      unsigned char *output,
@@ -667,7 +665,7 @@ STATIC inline int INIT unlzma(unsigned char *buf, long in_len,
 }
 
 #ifdef PREBOOT
-STATIC int INIT __decompress(unsigned char *buf, long in_len,
+STATIC int  __decompress(unsigned char *buf, long in_len,
 			      long (*fill)(void*, unsigned long),
 			      long (*flush)(void*, unsigned long),
 			      unsigned char *output, long out_len,
-- 
2.34.1

