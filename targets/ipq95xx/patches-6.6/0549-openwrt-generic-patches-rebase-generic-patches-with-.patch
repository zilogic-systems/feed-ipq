From 666166f461a039ad5f0abc6ca466e7b034ac54b3 Mon Sep 17 00:00:00 2001
From: Ermine Jose <quic_erminejo@quicinc.com>
Date: Mon, 22 Apr 2024 18:31:02 +0530
Subject: [PATCH] openwrt-generic-patches: rebase generic patches with upstream

gpio: fix all WERROR warnings 800-GPIO-add-named-gpio-exports.patch
module: fix linker symbol warning 221-module_exports.patch
bootup: fix symbols when compressed: 203-kallsyms_uncompressed.patch

This change helps fix the warnings that came from the gpio drivers
and linker export symbols of vmlinux.

 passing argument 2 of 'of_get_named_gpio' makes pointer
from integer without a cast [-Werror=int-conversion]
1147 |  gpio = of_get_named_gpio(cnp, i, &of_flags);

 passing argument 2 of 'of_get_named_gpio' makes pointer
from integer without a cast [-Werror=int-conversion]
1147 | gpio = of_get_named_gpio(cnp, i, &of_flags);

2)	WARNING: modpost: vmlinux: section mismatch in reference:
 squashfs_get_tree+0xe4 (section: .text) -> init_unlink (section: .init.text)
WARNING: modpost: vmlinux: section mismatch in reference:
squashfs_get_tree+0x10c (section: .text) -> init_mknod (section: .init.text)
  LD      .tmp_vmlinux.kallsyms1
aarch64-openwrt-linux-musl-ld: error: unplaced orphan section
 `__ksymtab_strings __EXPORT_SUFFIX(name)' from `.vmlinux.export.o'
scripts/Makefile.vmlinux:37: recipe for target 'vmlinux' failed

Signed-off-by: Ermine Jose <quic_erminejo@quicinc.com>
Change-Id: I9184cf08b6602d73add8c12fc64d1b568b933430
---
 drivers/gpio/gpiolib-of.c       | 14 +++++-----
 drivers/gpio/gpiolib-sysfs.c    |  7 +++++
 include/linux/export-internal.h |  6 ++---
 include/linux/gpio/consumer.h   | 23 +++++++++++------
 scripts/kallsyms.c              | 46 +++++++++++++++++----------------
 scripts/link-vmlinux.sh         |  2 +-
 6 files changed, 58 insertions(+), 40 deletions(-)

diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index de0b1963f279..858625a680a8 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -1138,17 +1138,19 @@ static int of_gpio_export_probe(struct platform_device *pdev)
 		of_property_read_string(cnp, "gpio-export,name", &name);
 
 		if (!name)
-			// max_gpio = of_gpio_count(cnp);
+			max_gpio = of_gpio_named_count(cnp, "gpios");
 
 		for (i = 0; i < max_gpio; i++) {
+			struct gpio_desc *desc;
 			unsigned flags = 0;
 			enum of_gpio_flags of_flags;
 
-			gpio = of_get_named_gpio(cnp, i, &of_flags);
-			if (!gpio_is_valid(gpio))
-				return gpio;
+			desc = of_get_named_gpiod_flags(cnp, "gpios", i, &of_flags);
+			if (IS_ERR(desc))
+				return PTR_ERR(desc);
+			gpio = desc_to_gpio(desc);
 
-			if (of_flags == OF_GPIO_ACTIVE_LOW)
+			if (of_flags & OF_GPIO_ACTIVE_LOW)
 				flags |= GPIOF_ACTIVE_LOW;
 
 			if (!of_property_read_u32(cnp, "gpio-export,output", &val))
@@ -1160,7 +1162,7 @@ static int of_gpio_export_probe(struct platform_device *pdev)
 				continue;
 
 			dmc = of_property_read_bool(cnp, "gpio-export,direction_may_change");
-			gpio_export_with_name(gpio, dmc, name);
+			gpio_export_with_name(gpio_to_desc(gpio), dmc, name);
 			nb++;
 		}
 	}
diff --git a/drivers/gpio/gpiolib-sysfs.c b/drivers/gpio/gpiolib-sysfs.c
index 10ceba2a62f6..eb5a574f4320 100644
--- a/drivers/gpio/gpiolib-sysfs.c
+++ b/drivers/gpio/gpiolib-sysfs.c
@@ -647,6 +647,13 @@ int gpiod_export(struct gpio_desc *desc, bool direction_may_change)
 }
 EXPORT_SYMBOL_GPL(gpiod_export);
 
+int gpio_export_with_name(struct gpio_desc *desc, bool direction_may_change,
+			  const char *name)
+{
+	return __gpiod_export(desc, direction_may_change, name);
+}
+EXPORT_SYMBOL_GPL(gpio_export_with_name);
+
 static int match_export(struct device *dev, const void *desc)
 {
 	struct gpiod_data *data = dev_get_drvdata(dev);
diff --git a/include/linux/export-internal.h b/include/linux/export-internal.h
index 9564de8db676..00cdc58978d0 100644
--- a/include/linux/export-internal.h
+++ b/include/linux/export-internal.h
@@ -24,9 +24,9 @@
 #endif
 
 #ifdef MODULE
-#define __EXPORT_SUFFIX(name)
+#define __EXPORT_SUFFIX(sym)
 #else
-#define __EXPORT_SUFFIX(name) + #name
+#define __EXPORT_SUFFIX(sym) "+" #sym
 #endif
 
 /*
@@ -41,7 +41,7 @@
  * former apparently works on all arches according to the binutils source.
  */
 #define __KSYMTAB(name, sym, sec, ns)						\
-	asm("	.section \"__ksymtab_strings __EXPORT_SUFFIX(name)\",\"aMS\",%progbits,1"	"\n"	\
+	asm("	.section \"__ksymtab_strings" __EXPORT_SUFFIX(sym) "\",\"aMS\",%progbits,1"	"\n"	\
 	    "__kstrtab_" #name ":"					"\n"	\
 	    "	.asciz \"" #name "\""					"\n"	\
 	    "__kstrtabns_" #name ":"					"\n"	\
diff --git a/include/linux/gpio/consumer.h b/include/linux/gpio/consumer.h
index 8fdee7ab716f..4f338ac5edad 100644
--- a/include/linux/gpio/consumer.h
+++ b/include/linux/gpio/consumer.h
@@ -644,31 +644,38 @@ static inline struct gpio_desc *acpi_get_and_request_gpiod(char *path, unsigned
 
 #if IS_ENABLED(CONFIG_GPIOLIB) && IS_ENABLED(CONFIG_GPIO_SYSFS)
 
+int __gpiod_export(struct gpio_desc *desc, bool direction_may_change, const char *name);
 int gpiod_export(struct gpio_desc *desc, bool direction_may_change);
+int gpio_export_with_name(struct gpio_desc *desc, bool direction_may_change,
+			  const char *name);
 int gpiod_export_link(struct device *dev, const char *name,
 		      struct gpio_desc *desc);
 void gpiod_unexport(struct gpio_desc *desc);
-int __gpiod_export(struct gpio_desc *desc, bool direction_may_change, const char *name);
-static inline int gpio_export_with_name(unsigned gpio, bool direction_may_change, const char *name)
-{
-	return __gpiod_export(gpio_to_desc(gpio), direction_may_change, name);
-}
+
 #else  /* CONFIG_GPIOLIB && CONFIG_GPIO_SYSFS */
 
 #include <asm/errno.h>
 
-static inline int _gpiod_export(struct gpio_desc *desc,
-		bool direction_may_change,
-		const char *name)
+static inline int __gpiod_export(struct gpio_desc *desc,
+			       bool direction_may_change,
+			       const char *name)
 {
 	return -ENOSYS;
 }
+
 static inline int gpiod_export(struct gpio_desc *desc,
 			       bool direction_may_change)
 {
 	return -ENOSYS;
 }
 
+static inline int gpio_export_with_name(struct gpio_desc *desc,
+					bool direction_may_change,
+					const char *name)
+{
+	return -ENOSYS;
+}
+
 static inline int gpiod_export_link(struct device *dev, const char *name,
 				    struct gpio_desc *desc)
 {
diff --git a/scripts/kallsyms.c b/scripts/kallsyms.c
index 2d9d8df676ae..aed49b547b9c 100644
--- a/scripts/kallsyms.c
+++ b/scripts/kallsyms.c
@@ -454,13 +454,15 @@ static void write_src(void)
 	}
 	printf("\n");
 
-	/*
-	 * Now that we wrote out the compressed symbol names, restore the
-	 * original names, which are needed in some of the later steps.
-	 */
-	for (i = 0; i < table_cnt; i++) {
-		expand_symbol(table[i]->sym, table[i]->len, buf);
-		strcpy((char *)table[i]->sym, buf);
+	if (!uncompressed) {
+		/*
+		 * Now that we wrote out the compressed symbol names, restore the
+		 * original names, which are needed in some of the later steps.
+		 */
+		for (i = 0; i < table_cnt; i++) {
+			expand_symbol(table[i]->sym, table[i]->len, buf);
+			strcpy((char *)table[i]->sym, buf);
+		}
 	}
 
 	output_label("kallsyms_markers");
@@ -470,23 +472,22 @@ static void write_src(void)
 
 	free(markers);
 
-	if (uncompressed)
-		return;
+	if (!uncompressed) {
+		output_label("kallsyms_token_table");
+		off = 0;
+		for (i = 0; i < 256; i++) {
+			best_idx[i] = off;
+			expand_symbol(best_table[i], best_table_len[i], buf);
+			printf("\t.asciz\t\"%s\"\n", buf);
+			off += strlen(buf) + 1;
+		}
+		printf("\n");
 
-	output_label("kallsyms_token_table");
-	off = 0;
-	for (i = 0; i < 256; i++) {
-		best_idx[i] = off;
-		expand_symbol(best_table[i], best_table_len[i], buf);
-		printf("\t.asciz\t\"%s\"\n", buf);
-		off += strlen(buf) + 1;
+		output_label("kallsyms_token_index");
+		for (i = 0; i < 256; i++)
+			printf("\t.short\t%d\n", best_idx[i]);
+		printf("\n");
 	}
-	printf("\n");
-
-	output_label("kallsyms_token_index");
-	for (i = 0; i < 256; i++)
-		printf("\t.short\t%d\n", best_idx[i]);
-	printf("\n");
 
 	if (!base_relative)
 		output_label("kallsyms_addresses");
@@ -825,6 +826,7 @@ int main(int argc, char **argv)
 			{"absolute-percpu", no_argument, &absolute_percpu, 1},
 			{"base-relative",   no_argument, &base_relative,   1},
 			{"lto-clang",       no_argument, &lto_clang,       1},
+			{"uncompressed",   no_argument, &uncompressed,   1},
 			{},
 		};
 
diff --git a/scripts/link-vmlinux.sh b/scripts/link-vmlinux.sh
index 3978ad41040e..f90d0bcba730 100755
--- a/scripts/link-vmlinux.sh
+++ b/scripts/link-vmlinux.sh
@@ -160,7 +160,7 @@ kallsyms()
 		kallsymopt="${kallsymopt} --lto-clang"
 	fi
 
-	if [ -n "${CONFIG_KALLSYMS_UNCOMPRESSED}" ]; then
+	if is_enabled CONFIG_KALLSYMS_UNCOMPRESSED; then
 		kallsymopt="${kallsymopt} --uncompressed"
 	fi
 
-- 
2.34.1

