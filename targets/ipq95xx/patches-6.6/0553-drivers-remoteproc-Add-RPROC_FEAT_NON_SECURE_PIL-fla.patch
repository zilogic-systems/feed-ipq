From 648706b79abd8f637a21c00146879cffd08077ce Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Tue, 16 Apr 2024 16:37:03 +0530
Subject: [PATCH] drivers: remoteproc: Add RPROC_FEAT_NON_SECURE_PIL flag

RPROC_FEAT_NON_SECURE_PIL is set from q6v5_mpd driver based on
qcom,nosecure DT flag for IPQ54xx. However, IPQ54xx will also support
secure PIL loading using q6v5_wcss_sec driver.

Change all compile time checks based on CONFIG_QCOM_NON_SECURE_PIL
to RPROC_FEAT_NON_SECURE_PIL feature flag check in remoteproc core so
that both secure PIL and non-secure PIL works without a Kconfig change.

This is a temporary fix and will be reverted once secure PIL is enabled
as default mode for IPQ54xx.

Change-Id: I2962b58fed79a3e7131cf81b9df6d4db6560587d
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 drivers/remoteproc/remoteproc_core.c | 31 ++++++++++------------------
 include/linux/remoteproc.h           |  4 ++++
 2 files changed, 15 insertions(+), 20 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 9214b6d429cc..97a624ea5da2 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -1387,18 +1387,15 @@ static int __rproc_attach(struct rproc *rproc)
 static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 {
 	struct device *dev = &rproc->dev;
-	#ifndef CONFIG_QCOM_NON_SECURE_PIL
 	const char *name = rproc->firmware;
-	#endif
 	int ret;
 
 	ret = rproc_fw_sanity_check(rproc, fw);
 	if (ret)
 		return ret;
 
-	#ifndef CONFIG_QCOM_NON_SECURE_PIL
+	if (!rproc_has_feature(rproc, RPROC_FEAT_NON_SECURE_PIL))
 		dev_info(dev, "Booting fw image %s, size %zd\n", name, fw->size);
-	#endif
 
 	/*
 	 * if enabling an IOMMU isn't relevant for this rproc, this is
@@ -1417,9 +1414,8 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 		goto disable_iommu;
 	}
 
-	#ifndef CONFIG_QCOM_NON_SECURE_PIL
+	if (!rproc_has_feature(rproc, RPROC_FEAT_NON_SECURE_PIL))
 		rproc->bootaddr = rproc_get_boot_addr(rproc, fw);
-	#endif
 
 	/* Load resource table, core dump segment list etc from the firmware */
 	ret = rproc_parse_fw(rproc, fw);
@@ -1809,9 +1805,7 @@ static int rproc_attach_recovery(struct rproc *rproc)
 static int rproc_boot_recovery(struct rproc *rproc)
 {
 	const struct firmware *firmware_p;
-	#ifndef CONFIG_QCOM_NON_SECURE_PIL
 	struct device *dev = &rproc->dev;
-	#endif
 	int ret;
 
 	ret = rproc_stop(rproc, true);
@@ -1821,21 +1815,21 @@ static int rproc_boot_recovery(struct rproc *rproc)
 	/* generate coredump */
 	rproc->ops->coredump(rproc);
 
-	#ifndef	CONFIG_QCOM_NON_SECURE_PIL
+	if (!rproc_has_feature(rproc, RPROC_FEAT_NON_SECURE_PIL)) {
 		/* load firmware */
 		ret = request_firmware(&firmware_p, rproc->firmware, dev);
 		if (ret < 0) {
 			dev_err(dev, "request_firmware failed: %d\n", ret);
 			return ret;
 		}
-	#endif
+	}
 
 	/* boot the remote processor up again */
 	ret = rproc_start(rproc, firmware_p);
 
-	#ifndef	CONFIG_QCOM_NON_SECURE_PIL
-	release_firmware(firmware_p);
-	#endif
+	if (!rproc_has_feature(rproc, RPROC_FEAT_NON_SECURE_PIL))
+		release_firmware(firmware_p);
+
 	return ret;
 }
 
@@ -1966,24 +1960,21 @@ int rproc_boot(struct rproc *rproc)
 	} else {
 		dev_info(dev, "powering up %s\n", rproc->name);
 
-		#ifndef CONFIG_QCOM_NON_SECURE_PIL
+		if (!rproc_has_feature(rproc, RPROC_FEAT_NON_SECURE_PIL)) {
 			/* load firmware */
 			ret = request_firmware(&firmware_p, rproc->firmware, dev);
 			if (ret < 0) {
 				dev_err(dev, "request_firmware failed: %d\n", ret);
 				goto downref_rproc;
 			}
-		#endif
+		}
 
 		ret = rproc_fw_boot(rproc, firmware_p);
-		#ifndef CONFIG_QCOM_NON_SECURE_PIL
-		release_firmware(firmware_p);
-		#endif
+		if (!rproc_has_feature(rproc, RPROC_FEAT_NON_SECURE_PIL))
+			release_firmware(firmware_p);
 	}
 
-#ifndef CONFIG_QCOM_NON_SECURE_PIL
 downref_rproc:
-#endif
 	if (ret)
 		atomic_dec(&rproc->power);
 unlock_mutex:
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index a1cb0ab477eb..dc77129e39b9 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -496,10 +496,14 @@ struct rproc_dump_segment {
  *				   from Linux to recover, such as firmware
  *				   loading. Linux just needs to attach after
  *				   recovery.
+ * @RPROC_FEAT_NON_SECURE_PIL	 : The remote processor uses non-secure PIL
+ *				   image loading to load the FW image and
+ *				   bring the remote processor out of reset.
  */
 
 enum rproc_features {
 	RPROC_FEAT_ATTACH_ON_RECOVERY,
+	RPROC_FEAT_NON_SECURE_PIL,
 	RPROC_MAX_FEATURES,
 };
 
-- 
2.34.1

