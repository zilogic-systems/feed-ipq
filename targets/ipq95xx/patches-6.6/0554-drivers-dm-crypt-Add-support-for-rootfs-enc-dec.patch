From 42b8fe7ccff68d35e4592426e8ef22916a02bc5d Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Tue, 6 Feb 2024 17:12:37 +0530
Subject: [PATCH] drivers: dm-crypt: Add support for rootfs enc/dec

Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Change-Id: I415741bc51c9c07dc29ff3a0cee1d2da04ae7062
---
 drivers/firmware/qcom_scm.c            |  65 +++++++++++-
 drivers/firmware/qcom_scm.h            |   5 +-
 drivers/md/dm-crypt.c                  | 136 +++++++++++++++++++++----
 drivers/mmc/host/cqhci-core.c          |   7 +-
 drivers/mmc/host/cqhci-crypto.h        |  21 ++++
 drivers/mmc/host/cqhci.h               |   2 +-
 drivers/mmc/host/sdhci-msm.c           |   4 +-
 include/linux/firmware/qcom/qcom_scm.h |  12 +++
 include/soc/qcom/ice.h                 |   2 +-
 9 files changed, 230 insertions(+), 24 deletions(-)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 26cd25f10e33..972cade1be95 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -313,6 +313,69 @@ static bool __qcom_scm_is_call_available(struct device *dev, u32 svc_id,
 	return ret ? false : !!res.result[0];
 }
 
+int qcom_context_ice_sec(u32 type, u8 key_size,
+			 u8 algo_mode, u8 *data_ctxt, u32 data_ctxt_len,
+			 u8 *salt_ctxt, u32 salt_ctxt_len)
+{
+	int ret;
+	struct qcom_scm_res res;
+	void *data_ctxbuf = NULL, *salt_ctxbuf = NULL;
+	dma_addr_t data_context_phy, salt_context_phy = 0;
+
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SVC_ICE,
+		.cmd = QCOM_SCM_ICE_CONTEXT_CMD,
+		.arginfo = QCOM_SCM_ARGS(7, QCOM_SCM_VAL, QCOM_SCM_VAL,
+				QCOM_SCM_VAL, QCOM_SCM_RO, QCOM_SCM_VAL,
+				QCOM_SCM_RO, QCOM_SCM_VAL),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	if (!data_ctxt)
+		return -EINVAL;
+
+	data_ctxbuf = dma_alloc_coherent(__scm->dev, data_ctxt_len,
+			&data_context_phy, GFP_KERNEL);
+	if (!data_ctxbuf)
+		return -ENOMEM;
+
+	memcpy(data_ctxbuf, data_ctxt, data_ctxt_len);
+
+	if (algo_mode == 0x3 && salt_ctxt) {
+		salt_ctxbuf = dma_alloc_coherent(__scm->dev, salt_ctxt_len,
+				&salt_context_phy, GFP_KERNEL);
+		if (!salt_ctxbuf) {
+			ret = -ENOMEM;
+			goto dma_unmap_data_ctxbuf;
+		}
+
+		memcpy(salt_ctxbuf, salt_ctxt, salt_ctxt_len);
+	}
+
+	desc.args[0] = type;
+	desc.args[1] = key_size;
+	desc.args[2] = algo_mode;
+	desc.args[3] = data_context_phy;
+	desc.args[4] = data_ctxt_len;
+	desc.args[5] = salt_context_phy;
+	desc.args[6] = salt_ctxt_len;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	if (algo_mode == 0x3 && salt_ctxt) {
+		memzero_explicit(salt_ctxt, salt_ctxt_len);
+		dma_free_coherent(__scm->dev, salt_ctxt_len,
+				salt_ctxbuf, salt_context_phy);
+	}
+
+dma_unmap_data_ctxbuf:
+	memzero_explicit(data_ctxbuf, data_ctxt_len);
+	dma_free_coherent(__scm->dev, data_ctxt_len, data_ctxbuf, data_context_phy);
+	return ret ?  : res.result[0];
+
+}
+EXPORT_SYMBOL_GPL(qcom_context_ice_sec);
+
 int qcom_config_sec_ice(void *buf, int size)
 {
 	int ret;
@@ -333,7 +396,7 @@ int qcom_config_sec_ice(void *buf, int size)
 	ret = qcom_scm_call(__scm->dev, &desc, &res);
 	return ret ? false : !!res.result[0];
 }
-EXPORT_SYMBOL(qcom_config_sec_ice);
+EXPORT_SYMBOL_GPL(qcom_config_sec_ice);
 
 static int qcom_scm_set_boot_addr(void *entry, const u8 *cpu_bits)
 {
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index 2c18cd0c5fbc..4e55d955cdac 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -145,8 +145,9 @@ extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 #define QCOM_SCM_ES_INVALIDATE_ICE_KEY	0x03
 #define QCOM_SCM_ES_CONFIG_SET_ICE_KEY	0x04
 
-#define QCOM_SVC_ICE		23
-#define QCOM_SCM_ICE_CMD	0x1
+#define QCOM_SVC_ICE			23
+#define QCOM_SCM_ICE_CMD		0x1
+#define QCOM_SCM_ICE_CONTEXT_CMD	0x3
 
 #define QCOM_SCM_SVC_HDCP		0x11
 #define QCOM_SCM_HDCP_INVOKE		0x01
diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index 4db78dc38640..2f1947e5e7da 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -41,6 +41,8 @@
 #include <keys/encrypted-type.h>
 #include <keys/trusted-type.h>
 #include <linux/blk-crypto.h>
+#include <linux/firmware/qcom/qcom_scm.h>
+#include <soc/qcom/ice.h>
 
 #include <linux/device-mapper.h>
 
@@ -139,7 +141,8 @@ enum flags { DM_CRYPT_SUSPENDED, DM_CRYPT_KEY_VALID,
 	     DM_CRYPT_SAME_CPU, DM_CRYPT_NO_OFFLOAD,
 	     DM_CRYPT_NO_READ_WORKQUEUE, DM_CRYPT_NO_WRITE_WORKQUEUE,
 	     DM_CRYPT_WRITE_INLINE, DM_CRYPT_INLINE_ENCRYPTION,
-	     DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY };
+	     DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY,
+	     DM_CRYPT_INLINE_OEMSEED_CRBK };
 
 enum cipher_flags {
 	CRYPT_MODE_INTEGRITY_AEAD,	/* Use authenticated mode for cipher */
@@ -2735,25 +2738,26 @@ static int crypt_set_key(struct crypt_config *cc, char *key)
 	int key_string_len = strlen(key);
 
 	/* Hyphen (which gives a key_size of zero) means there is no key. */
-	if (!cc->key_size && strcmp(key, "-"))
-		goto out;
-
-	/* ':' means the key is in kernel keyring, short-circuit normal key processing */
-	if (key[0] == ':') {
-		r = crypt_set_keyring_key(cc, key + 1);
-		goto out;
-	}
+	if (!test_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags)) {
+		if (!cc->key_size && strcmp(key, "-"))
+			goto out;
+		/* ':' means the key is in kernel keyring, short-circuit normal key processing */
+		if (key[0] == ':') {
+			r = crypt_set_keyring_key(cc, key + 1);
+			goto out;
+		}
 
-	/* clear the flag since following operations may invalidate previously valid key */
-	clear_bit(DM_CRYPT_KEY_VALID, &cc->flags);
+		/* clear the flag since following operations may invalidate previously valid key */
+		clear_bit(DM_CRYPT_KEY_VALID, &cc->flags);
 
-	/* wipe references to any kernel keyring key */
-	kfree_sensitive(cc->key_string);
-	cc->key_string = NULL;
+		/* wipe references to any kernel keyring key */
+		kfree_sensitive(cc->key_string);
+		cc->key_string = NULL;
 
-	/* Decode key from its hex representation. */
-	if (cc->key_size && hex2bin(cc->key, key, cc->key_size) < 0)
-		goto out;
+		/* Decode key from its hex representation. */
+		if (cc->key_size && hex2bin(cc->key, key, cc->key_size) < 0)
+			goto out;
+	}
 
 	r = crypt_setkey(cc);
 	if (!r)
@@ -3243,6 +3247,94 @@ static int crypt_ctr_cipher(struct dm_target *ti, char *cipher_in, char *key)
 	return ret;
 }
 
+#ifdef CONFIG_BLK_INLINE_ENCRYPTION
+static int qcom_set_ice_context(struct dm_target *ti, char **argv)
+{
+	struct crypt_config *cc = ti->private;
+	uint8_t *hex_data_context = NULL, *hex_salt_context = NULL;
+	uint32_t hex_salt_len = 0, hex_data_len = 0;
+	char *buf = NULL;
+	uint32_t seedtype = 0;
+	unsigned short algo_mode, key_size;
+	int i, ret = -1;
+
+	switch (cc->crypto_mode) {
+	case BLK_ENCRYPTION_MODE_AES_128_XTS:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_XTS;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_128;
+		break;
+	case BLK_ENCRYPTION_MODE_AES_256_XTS:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_XTS;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_256;
+		break;
+	case BLK_ENCRYPTION_MODE_AES_128_ECB:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_128;
+		break;
+	case BLK_ENCRYPTION_MODE_AES_256_ECB:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_256;
+		break;
+	default:
+		ti->error = "Unhandled crypto mode";
+		return -EINVAL;
+	}
+
+	if (!strcmp(argv[8], "oemseed"))
+		seedtype = 1;
+
+	hex_data_context  = kzalloc(DATA_COTEXT_LEN, GFP_KERNEL);
+	if (!hex_data_context) {
+		DMERR("%s: no memory allocated\n", __func__);
+		return -ENOMEM;
+	}
+
+	buf = argv[9];
+	hex_data_len = strlen(argv[9]) / 2;
+	if (hex_data_len != DATA_COTEXT_LEN || strlen(argv[9]) % 2 != 0) {
+		DMERR("%s: Invalid data context length. Context length \
+				must be %d\n", __func__, DATA_COTEXT_LEN * 2);
+		goto out;
+	}
+	for (i = 0; i < hex_data_len; i++) {
+		sscanf(buf, "%2hhx", &hex_data_context[i]);
+		buf += 2;
+	}
+
+
+	if (algo_mode == ICE_CRYPTO_ALGO_MODE_HW_AES_XTS) {
+		hex_salt_context = kzalloc(SALT_COTEXT_LEN, GFP_KERNEL);
+		if (!hex_salt_context) {
+			DMERR("%s: no memory allocated\n", __func__);
+			goto out;
+		}
+
+		buf = argv[10];
+		hex_salt_len = strlen(argv[10]) / 2;
+		if (hex_salt_len != SALT_COTEXT_LEN || strlen(argv[10]) % 2 != 0) {
+			DMERR("%s: Invalid salt context length. Context length \
+				must be %d\n", __func__, SALT_COTEXT_LEN * 2);
+			goto out;
+		}
+		for (i = 0; i < hex_salt_len; i++) {
+			sscanf(buf, "%2hhx", &hex_salt_context[i]);
+			buf += 2;
+		}
+		buf = NULL;
+	}
+
+	ret = qcom_context_ice_sec(seedtype, key_size, algo_mode, hex_data_context,
+				hex_data_len, hex_salt_context, hex_salt_len);
+	if (ret)
+		DMERR("%s: ice context configuration fail\n", __func__);
+
+out:
+	kfree(hex_data_context);
+	kfree(hex_salt_context);
+	return ret;
+}
+#endif
+
 static int crypt_ctr_optional(struct dm_target *ti, unsigned int argc, char **argv)
 {
 	struct crypt_config *cc = ti->private;
@@ -3287,6 +3379,9 @@ static int crypt_ctr_optional(struct dm_target *ti, unsigned int argc, char **ar
 			set_bit(DM_CRYPT_INLINE_ENCRYPTION, &cc->flags);
 		else if (!strcasecmp(opt_string, "hwkey"))
 			set_bit(DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY, &cc->flags);
+		else if (!strcasecmp(opt_string, "oemseed") ||
+				!strcasecmp(opt_string, "CRBK"))
+			set_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags);
 #endif
 		else if (sscanf(opt_string, "integrity:%u:", &val) == 1) {
 			if (val == 0 || val > MAX_TAG_SIZE) {
@@ -3422,6 +3517,13 @@ static int crypt_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 	if (ret < 0)
 		goto bad;
 
+#ifdef CONFIG_BLK_INLINE_ENCRYPTION
+	if (test_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags)) {
+		ret = qcom_set_ice_context(ti, argv);
+		if (ret < 0)
+			goto bad;
+	}
+#endif
 	if (test_bit(DM_CRYPT_INLINE_ENCRYPTION, &cc->flags))
 		return 0;
 
diff --git a/drivers/mmc/host/cqhci-core.c b/drivers/mmc/host/cqhci-core.c
index b3d7d6d8d654..b574eadb4b31 100644
--- a/drivers/mmc/host/cqhci-core.c
+++ b/drivers/mmc/host/cqhci-core.c
@@ -442,7 +442,12 @@ static void cqhci_prep_task_desc(struct mmc_request *mrq,
 	task_desc[0] = cpu_to_le64(desc0);
 
 	if (cq_host->caps & CQHCI_TASK_DESC_SZ_128) {
-		u64 desc1 = cqhci_crypto_prep_task_desc(mrq);
+		u64 desc1;
+
+		if (cq_host->use_hwkey)
+			desc1 = cqhci_crypto_prep_hwkey_task_desc(mrq);
+		else
+			desc1 = cqhci_crypto_prep_task_desc(mrq);
 
 		task_desc[1] = cpu_to_le64(desc1);
 
diff --git a/drivers/mmc/host/cqhci-crypto.h b/drivers/mmc/host/cqhci-crypto.h
index d7fb084f563b..ace078db4265 100644
--- a/drivers/mmc/host/cqhci-crypto.h
+++ b/drivers/mmc/host/cqhci-crypto.h
@@ -16,6 +16,22 @@
 
 int cqhci_crypto_init(struct cqhci_host *host);
 
+/*
+ * Returns the crypto bits that should be set in bits 64-127 of the
+ * task descriptor for hwkey.
+ */
+static inline u64 cqhci_crypto_prep_hwkey_task_desc(struct mmc_request *mrq)
+{
+	if (!mrq->crypto_ctx)
+		return 0;
+
+	/* We set max_dun_bytes_supported=4, so all DUNs should be 32-bit. */
+	WARN_ON_ONCE(mrq->crypto_ctx->bc_dun[0] > U32_MAX);
+
+	return CQHCI_CRYPTO_ENABLE_BIT |
+	       mrq->crypto_ctx->bc_dun[0];
+}
+
 /*
  * Returns the crypto bits that should be set in bits 64-127 of the
  * task descriptor.
@@ -40,6 +56,11 @@ static inline int cqhci_crypto_init(struct cqhci_host *host)
 	return 0;
 }
 
+static inline u64 cqhci_crypto_prep_hwkey_task_desc(struct mmc_request *mrq)
+{
+	return 0;
+}
+
 static inline u64 cqhci_crypto_prep_task_desc(struct mmc_request *mrq)
 {
 	return 0;
diff --git a/drivers/mmc/host/cqhci.h b/drivers/mmc/host/cqhci.h
index 02cd10acf5c7..41496771fa8d 100644
--- a/drivers/mmc/host/cqhci.h
+++ b/drivers/mmc/host/cqhci.h
@@ -276,8 +276,8 @@ struct cqhci_host {
 	union cqhci_crypto_capabilities crypto_capabilities;
 	union cqhci_crypto_cap_entry *crypto_cap_array;
 	u32 crypto_cfg_register;
-	bool use_hwkey;
 #endif
+	bool use_hwkey;
 };
 
 struct cqhci_host_ops {
diff --git a/drivers/mmc/host/sdhci-msm.c b/drivers/mmc/host/sdhci-msm.c
index 50ab9382ff55..10367ca35ccf 100644
--- a/drivers/mmc/host/sdhci-msm.c
+++ b/drivers/mmc/host/sdhci-msm.c
@@ -1884,8 +1884,10 @@ static int sdhci_msm_program_key(struct cqhci_host *cq_host,
 					    cfg->crypto_key,
 					    cfg->data_unit_size, slot,
 					    cq_host->use_hwkey);
-	else
+	else if (!cq_host->use_hwkey)
 		return qcom_ice_evict_key(msm_host->ice, slot);
+	else
+		return 0;
 }
 
 #else /* CONFIG_MMC_CRYPTO */
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index 8ccf921b9121..75d763c161cf 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -17,12 +17,19 @@
 #define QCOM_SCM_CPU_PWR_DOWN_L2_OFF	0x1
 #define QCOM_SCM_HDCP_MAX_REQ_CNT	5
 
+#define QTI_SCM_DERIVE_KEY		0xA
+#define QTI_SCM_DERIVE_KEY_PARAM_ID	0xD
+
 #define QTI_TZ_DIAG_LOG_ENCR_ID		0x0
 #define QTI_TZ_QSEE_LOG_ENCR_ID		0x1
 #define QTI_TZ_LOG_NO_UPDATE		-6
 #define QTI_SCM_SVC_FUSE		0x8
 #define QTI_TRYBIT			BIT(12)
 
+#define MAX_MSM_ICE_KEY_LUT_SIZE	32
+#define DATA_COTEXT_LEN			128
+#define SALT_COTEXT_LEN			12
+
 #define QCOM_BREAK_Q6			0x1
 
 #define MAX_FUSE_ADDR_SIZE		0x8
@@ -219,6 +226,9 @@ extern int qcom_scm_set_cold_boot_addr(void *entry);
 extern int qcom_scm_set_warm_boot_addr(void *entry);
 extern void qcom_scm_cpu_power_down(u32 flags);
 extern int qcom_scm_set_remote_state(u32 state, u32 id);
+extern int qcom_scm_derive_and_share_key(uint32_t key_len, uint8_t *sw_context,
+				u32 sw_context_len, uint8_t *derived_key,
+				u32 derived_key_len);
 
 struct qcom_scm_pas_metadata {
 	void *ptr;
@@ -271,6 +281,8 @@ extern int qcom_config_sec_ice(void *buf, int size);
 extern int qcom_scm_ice_set_key(u32 index, const u8 *key, u32 key_size,
 				enum qcom_scm_ice_cipher cipher,
 				u32 data_unit_size);
+extern int qcom_context_ice_sec(u32 type, u8 key_size, u8 algo_mode,
+				u8 *data_ctxt, u32 data_ctxt_len, u8 *salt_ctxt, u32 salt_ctxt_len);
 
 extern bool qcom_scm_hdcp_available(void);
 extern int qcom_scm_hdcp_req(struct qcom_scm_hdcp_req *req, u32 req_cnt,
diff --git a/include/soc/qcom/ice.h b/include/soc/qcom/ice.h
index ff2e020c14a0..cd43dc0e69f8 100644
--- a/include/soc/qcom/ice.h
+++ b/include/soc/qcom/ice.h
@@ -43,7 +43,7 @@ enum ice_crpto_key_mode {
 };
 
 struct ice_config_sec {
-	uint32_t index;
+	uint16_t index;
 	uint8_t key_size;
 	uint8_t algo_mode;
 	uint8_t key_mode;
-- 
2.34.1

