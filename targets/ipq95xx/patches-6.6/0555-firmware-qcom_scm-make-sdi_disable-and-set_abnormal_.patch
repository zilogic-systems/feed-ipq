From 106bfc58a4ed6571f394cb3e79729bb7c08dc4d1 Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Tue, 7 May 2024 18:11:14 +0530
Subject: [PATCH] firmware: qcom_scm: make sdi_disable and set_abnormal_magic
 as optional

Not for all targets need to disable SDI and set the bitmask for abnormal
reset. So, introduce the device data and based on that, perform the
SDI disable and set the bitmask for abnormal reset.

Change-Id: I15bbc2ef273443418c79a29fcb9591865ce017ba
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/firmware/qcom_scm.c | 19 ++++++++++++++++---
 1 file changed, 16 insertions(+), 3 deletions(-)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 450c4d332f1a..1491fe5f2cc3 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -27,6 +27,9 @@
 
 #include "qcom_scm.h"
 
+#define SDI_DISABLE		BIT(0)
+#define ABNORMAL_MAGIC		BIT(1)
+
 static bool download_mode = IS_ENABLED(CONFIG_QCOM_SCM_DOWNLOAD_MODE_DEFAULT);
 module_param(download_mode, bool, 0);
 
@@ -2913,6 +2916,7 @@ static int qcom_scm_probe(struct platform_device *pdev)
 {
 	struct qcom_scm *scm;
 	int irq, ret;
+	unsigned long data;
 
 	scm = devm_kzalloc(&pdev->dev, sizeof(*scm), GFP_KERNEL);
 	if (!scm)
@@ -2922,6 +2926,9 @@ static int qcom_scm_probe(struct platform_device *pdev)
 	if (ret < 0)
 		return ret;
 
+	data = (unsigned long)of_device_get_match_data(&pdev->dev);
+	dev_set_drvdata(&pdev->dev, (unsigned long *)data);
+
 	ret = of_property_read_u32(pdev->dev.of_node, "hvc-log-cmd-id", &scm->hvc_log_cmd_id);
 	if (ret)
 		scm->hvc_log_cmd_id = QTI_SCM_HVC_DIAG_CMD;
@@ -2990,8 +2997,10 @@ static int qcom_scm_probe(struct platform_device *pdev)
 		qcom_scm_set_download_mode(true);
 	}
 	else {
-		qcom_scm_sdi_disable(__scm->dev);
-		qcom_scm_set_abnormal_magic(true);
+		if (data & SDI_DISABLE)
+			qcom_scm_sdi_disable(__scm->dev);
+		if (data & ABNORMAL_MAGIC)
+			qcom_scm_set_abnormal_magic(true);
 	}
 
 	return 0;
@@ -2999,9 +3008,12 @@ static int qcom_scm_probe(struct platform_device *pdev)
 
 static void qcom_scm_shutdown(struct platform_device *pdev)
 {
+	unsigned long data = (unsigned long)dev_get_drvdata(&pdev->dev);
+
 	/* Clean shutdown, disable download mode to allow normal restart */
 	qcom_scm_set_download_mode(false);
-	qcom_scm_set_abnormal_magic(false);
+	if (data & ABNORMAL_MAGIC)
+		qcom_scm_set_abnormal_magic(false);
 }
 
 static const struct of_device_id qcom_scm_dt_match[] = {
@@ -3011,6 +3023,7 @@ static const struct of_device_id qcom_scm_dt_match[] = {
 	{ .compatible = "qcom,scm-apq8064" },
 	{ .compatible = "qcom,scm-apq8084" },
 	{ .compatible = "qcom,scm-ipq4019" },
+	{ .compatible = "qcom,scm-ipq9574", .data = (void *)(SDI_DISABLE | ABNORMAL_MAGIC)},
 	{ .compatible = "qcom,scm-msm8953" },
 	{ .compatible = "qcom,scm-msm8974" },
 	{ .compatible = "qcom,scm-msm8996" },
-- 
2.34.1

