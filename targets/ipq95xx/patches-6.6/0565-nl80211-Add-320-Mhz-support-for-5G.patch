From 45ae3952c646517c58702f86890b5a808c6089c3 Mon Sep 17 00:00:00 2001
From: Shwetha G K <quic_kshwetha@quicinc.com>
Date: Tue, 11 Jun 2024 23:23:57 +0530
Subject: [PATCH] nl80211: Add 320 Mhz support for 5G

Add 320 Mhz support for 5G

Change-Id: I75636a73010f932bedf5fb3f05834c08686b949e
Signed-off-by: Shwetha G K <quic_kshwetha@quicinc.com>
---
 include/linux/ieee80211.h |  2 ++
 net/wireless/chan.c       | 29 +++++++++++++++++++++--------
 net/wireless/reg.c        |  3 ++-
 3 files changed, 25 insertions(+), 9 deletions(-)

diff --git a/include/linux/ieee80211.h b/include/linux/ieee80211.h
index b24fb80782c5..83d9b09e1433 100644
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -3091,6 +3091,8 @@ ieee80211_eht_capa_size_ok(const u8 *he_capa, const u8 *data, u8 len,
 	if (len < needed || !he_capa)
 		return false;
 
+	/* WAR: always set to true */
+	return true;
 	needed += ieee80211_eht_mcs_nss_size((const void *)he_capa,
 					     (const void *)data,
 					     from_ap);
diff --git a/net/wireless/chan.c b/net/wireless/chan.c
index 0b7e81db383d..49e1ec96ad8f 100644
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -15,6 +15,11 @@
 #include "core.h"
 #include "rdev-ops.h"
 
+/* 5GHz 320MHz support */
+#define FIXED_PUNCTURE_PATTERN 0xF000
+#define DISABLED_SUB_CHAN(freq, start_freq, puncture_bitmap) \
+	((1 << (freq - start_freq)/MHZ_TO_KHZ(20)) & puncture_bitmap)
+
 static bool cfg80211_valid_60g_freq(u32 freq)
 {
 	return freq >= 58320 && freq <= 70200;
@@ -968,15 +973,22 @@ cfg80211_chandef_dfs_cac_time(struct wiphy *wiphy,
 
 static bool cfg80211_secondary_chans_ok(struct wiphy *wiphy,
 					u32 center_freq, u32 bandwidth,
-					u32 prohibited_flags)
+					u32 prohibited_flags,
+					enum nl80211_band band)
 {
 	struct ieee80211_channel *c;
 	u32 freq, start_freq, end_freq;
+	u16 puncture_bitmap = 0;
 
 	start_freq = cfg80211_get_start_freq(center_freq, bandwidth);
 	end_freq = cfg80211_get_end_freq(center_freq, bandwidth);
 
+	if ((band == NL80211_BAND_5GHZ) && (bandwidth == 320))
+		puncture_bitmap = FIXED_PUNCTURE_PATTERN;
+
 	for (freq = start_freq; freq <= end_freq; freq += MHZ_TO_KHZ(20)) {
+		if (DISABLED_SUB_CHAN(freq, start_freq, puncture_bitmap))
+			continue;
 		c = ieee80211_get_channel_khz(wiphy, freq);
 		if (!c || c->flags & prohibited_flags)
 			return false;
@@ -1155,10 +1167,10 @@ bool cfg80211_chandef_usable(struct wiphy *wiphy,
 		prohibited_flags |= IEEE80211_CHAN_NO_320MHZ;
 		width = 320;
 
-		if (chandef->chan->band != NL80211_BAND_6GHZ)
-			return false;
-
-		sband = wiphy->bands[NL80211_BAND_6GHZ];
+		if (chandef->chan->band == NL80211_BAND_5GHZ)
+			sband = wiphy->bands[NL80211_BAND_5GHZ];
+		else if (chandef->chan->band == NL80211_BAND_6GHZ)
+			sband = wiphy->bands[NL80211_BAND_6GHZ];
 		if (!sband)
 			return false;
 
@@ -1200,17 +1212,18 @@ bool cfg80211_chandef_usable(struct wiphy *wiphy,
 	if (width < 20)
 		prohibited_flags |= IEEE80211_CHAN_NO_OFDM;
 
-
 	if (!cfg80211_secondary_chans_ok(wiphy,
 					 ieee80211_chandef_to_khz(chandef),
-					 width, prohibited_flags))
+					 width, prohibited_flags,
+					 chandef->chan->band))
 		return false;
 
 	if (!chandef->center_freq2)
 		return true;
 	return cfg80211_secondary_chans_ok(wiphy,
 					   MHZ_TO_KHZ(chandef->center_freq2),
-					   width, prohibited_flags);
+					   width, prohibited_flags,
+					   chandef->chan->band);
 }
 EXPORT_SYMBOL(cfg80211_chandef_usable);
 
diff --git a/net/wireless/reg.c b/net/wireless/reg.c
index 0317cf9da307..08333b1874c0 100644
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@ -1751,7 +1751,8 @@ static uint32_t reg_rule_to_chan_bw_flags(const struct ieee80211_regdomain *regd
 			bw_flags |= IEEE80211_CHAN_NO_80MHZ;
 		if (max_bandwidth_khz < MHZ_TO_KHZ(160))
 			bw_flags |= IEEE80211_CHAN_NO_160MHZ;
-		if (max_bandwidth_khz < MHZ_TO_KHZ(320))
+		if ((max_bandwidth_khz < MHZ_TO_KHZ(320)) &&
+		    (max_bandwidth_khz < MHZ_TO_KHZ(240)))
 			bw_flags |= IEEE80211_CHAN_NO_320MHZ;
 	}
 	return bw_flags;
-- 
2.34.1

