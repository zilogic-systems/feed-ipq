From 8a582b282433e4a6b632fe2b0655bb6fc121cd3b Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Tue, 14 May 2024 19:31:42 +0530
Subject: [PATCH] drivers: dm-crypt: Generate HW Key for CRBK Mode

Update code for generate HW key in CRBK mode using existing scm call with
context's as null.

Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Change-Id: I1b166640521800fec14803ab63e6d0433138d122
---
 drivers/firmware/qcom_scm.c            | 37 +++++++++++++++-----------
 drivers/md/dm-crypt.c                  | 17 ++++++++----
 include/linux/firmware/qcom/qcom_scm.h |  3 ++-
 include/soc/qcom/ice.h                 |  2 +-
 4 files changed, 37 insertions(+), 22 deletions(-)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index c06199a342e8..e4def6e7684e 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -27,6 +27,8 @@
 
 #include "qcom_scm.h"
 
+#define ICE_CRYPTO_AES_XTS_MODE	0x3
+
 #define SDI_DISABLE		BIT(0)
 #define ABNORMAL_MAGIC		BIT(1)
 
@@ -334,27 +336,27 @@ int qcom_context_ice_sec(u32 type, u8 key_size,
 		.owner = ARM_SMCCC_OWNER_SIP,
 	};
 
-	if (!data_ctxt)
-		return -EINVAL;
+	if (type == OEM_SEED_TYPE) {
+		if (!data_ctxt)
+			return -EINVAL;
 
-	data_ctxbuf = dma_alloc_coherent(__scm->dev, data_ctxt_len,
-			&data_context_phy, GFP_KERNEL);
-	if (!data_ctxbuf)
-		return -ENOMEM;
+		data_ctxbuf = dma_alloc_coherent(__scm->dev, data_ctxt_len,
+				&data_context_phy, GFP_KERNEL);
+		if (!data_ctxbuf)
+			return -ENOMEM;
 
-	memcpy(data_ctxbuf, data_ctxt, data_ctxt_len);
+		memcpy(data_ctxbuf, data_ctxt, data_ctxt_len);
 
-	if (algo_mode == 0x3 && salt_ctxt) {
-		salt_ctxbuf = dma_alloc_coherent(__scm->dev, salt_ctxt_len,
+		if (algo_mode == ICE_CRYPTO_AES_XTS_MODE && salt_ctxt) {
+			salt_ctxbuf = dma_alloc_coherent(__scm->dev, salt_ctxt_len,
 				&salt_context_phy, GFP_KERNEL);
 		if (!salt_ctxbuf) {
 			ret = -ENOMEM;
 			goto dma_unmap_data_ctxbuf;
 		}
-
 		memcpy(salt_ctxbuf, salt_ctxt, salt_ctxt_len);
+		}
 	}
-
 	desc.args[0] = type;
 	desc.args[1] = key_size;
 	desc.args[2] = algo_mode;
@@ -365,15 +367,20 @@ int qcom_context_ice_sec(u32 type, u8 key_size,
 
 	ret = qcom_scm_call(__scm->dev, &desc, &res);
 
-	if (algo_mode == 0x3 && salt_ctxt) {
+	if (type == OEM_SEED_TYPE &&
+	    algo_mode == ICE_CRYPTO_AES_XTS_MODE && salt_ctxt) {
 		memzero_explicit(salt_ctxt, salt_ctxt_len);
 		dma_free_coherent(__scm->dev, salt_ctxt_len,
-				salt_ctxbuf, salt_context_phy);
+			salt_ctxbuf, salt_context_phy);
 	}
 
 dma_unmap_data_ctxbuf:
-	memzero_explicit(data_ctxbuf, data_ctxt_len);
-	dma_free_coherent(__scm->dev, data_ctxt_len, data_ctxbuf, data_context_phy);
+	if (type == OEM_SEED_TYPE) {
+		memzero_explicit(data_ctxbuf, data_ctxt_len);
+		dma_free_coherent(__scm->dev, data_ctxt_len,
+					data_ctxbuf, data_context_phy);
+	}
+
 	return ret ?  : res.result[0];
 
 }
diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index 2f1947e5e7da..0c3ceb6149ed 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -2738,7 +2738,7 @@ static int crypt_set_key(struct crypt_config *cc, char *key)
 	int key_string_len = strlen(key);
 
 	/* Hyphen (which gives a key_size of zero) means there is no key. */
-	if (!test_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags)) {
+	if (!test_bit(DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY, &cc->flags)) {
 		if (!cc->key_size && strcmp(key, "-"))
 			goto out;
 		/* ':' means the key is in kernel keyring, short-circuit normal key processing */
@@ -3280,9 +3280,16 @@ static int qcom_set_ice_context(struct dm_target *ti, char **argv)
 		return -EINVAL;
 	}
 
-	if (!strcmp(argv[8], "oemseed"))
-		seedtype = 1;
-
+	if (argv[8] != NULL && !strcmp(argv[8], "oemseed")) {
+		seedtype = OEM_SEED_TYPE;
+	} else {
+		ret = qcom_context_ice_sec(seedtype, key_size, algo_mode,
+				hex_data_context, hex_data_len,
+				hex_salt_context, hex_salt_len);
+		if (ret)
+			DMERR("%s: ice context configuration fail\n", __func__);
+		goto out;
+	}
 	hex_data_context  = kzalloc(DATA_COTEXT_LEN, GFP_KERNEL);
 	if (!hex_data_context) {
 		DMERR("%s: no memory allocated\n", __func__);
@@ -3518,7 +3525,7 @@ static int crypt_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 		goto bad;
 
 #ifdef CONFIG_BLK_INLINE_ENCRYPTION
-	if (test_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags)) {
+	if (test_bit(DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY, &cc->flags)) {
 		ret = qcom_set_ice_context(ti, argv);
 		if (ret < 0)
 			goto bad;
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index 75d763c161cf..41f1309d5329 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -28,7 +28,8 @@
 
 #define MAX_MSM_ICE_KEY_LUT_SIZE	32
 #define DATA_COTEXT_LEN			128
-#define SALT_COTEXT_LEN			12
+#define SALT_COTEXT_LEN			128
+#define OEM_SEED_TYPE			0x1
 
 #define QCOM_BREAK_Q6			0x1
 
diff --git a/include/soc/qcom/ice.h b/include/soc/qcom/ice.h
index cd43dc0e69f8..ff2e020c14a0 100644
--- a/include/soc/qcom/ice.h
+++ b/include/soc/qcom/ice.h
@@ -43,7 +43,7 @@ enum ice_crpto_key_mode {
 };
 
 struct ice_config_sec {
-	uint16_t index;
+	uint32_t index;
 	uint8_t key_size;
 	uint8_t algo_mode;
 	uint8_t key_mode;
-- 
2.34.1

