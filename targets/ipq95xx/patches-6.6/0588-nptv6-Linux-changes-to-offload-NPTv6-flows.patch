From b775bef7724e43fd28b22bccace71f00e2b91257 Mon Sep 17 00:00:00 2001
From: Suhas N Bhargav <quic_sbhargav@quicinc.com>
Date: Wed, 3 Apr 2024 14:07:17 +0530
Subject: [PATCH] nptv6: Linux changes to offload NPTv6 flows

Change-Id: Ic4c274569ad3ea49eaa7af414ea8a2ba62838d7c
Signed-off-by: Suhas N Bhargav <quic_sbhargav@quicinc.com>
---
 include/net/netfilter/nf_conntrack_extend.h |  3 +++
 include/uapi/linux/netfilter/nf_nat.h       |  9 +++++++
 include/uapi/linux/netfilter/nf_tables.h    | 26 +++++++++++++++++++++
 net/netfilter/Kconfig                       | 17 ++++++++++++++
 net/netfilter/Makefile                      |  2 ++
 net/netfilter/nf_conntrack_core.c           |  6 +++++
 net/netfilter/nf_conntrack_extend.c         |  8 ++++++-
 7 files changed, 70 insertions(+), 1 deletion(-)

diff --git a/include/net/netfilter/nf_conntrack_extend.h b/include/net/netfilter/nf_conntrack_extend.h
index d5e65f3bc308..276213506dfe 100644
--- a/include/net/netfilter/nf_conntrack_extend.h
+++ b/include/net/netfilter/nf_conntrack_extend.h
@@ -33,6 +33,9 @@ enum nf_ct_ext_id {
 #endif
 #ifdef CONFIG_NF_CONNTRACK_DSCPREMARK_EXT
 	NF_CT_EXT_DSCPREMARK,
+#endif
+#ifdef CONFIG_NF_CONNTRACK_NPTV6_EXT
+	NF_CT_EXT_NPTV6,
 #endif
 	NF_CT_EXT_NUM,
 };
diff --git a/include/uapi/linux/netfilter/nf_nat.h b/include/uapi/linux/netfilter/nf_nat.h
index a64586e77b24..503e47235078 100644
--- a/include/uapi/linux/netfilter/nf_nat.h
+++ b/include/uapi/linux/netfilter/nf_nat.h
@@ -52,4 +52,13 @@ struct nf_nat_range2 {
 	union nf_conntrack_man_proto	base_proto;
 };
 
+struct nf_npt_info {
+	union nf_inet_addr	src_pfx;
+	union nf_inet_addr	dst_pfx;
+	__u8			src_pfx_len;
+	__u8			dst_pfx_len;
+	/* Used internally by the kernel */
+	__sum16			adjustment;
+};
+
 #endif /* _NETFILTER_NF_NAT_H */
diff --git a/include/uapi/linux/netfilter/nf_tables.h b/include/uapi/linux/netfilter/nf_tables.h
index ca30232b7bc8..f782dd5bdebc 100644
--- a/include/uapi/linux/netfilter/nf_tables.h
+++ b/include/uapi/linux/netfilter/nf_tables.h
@@ -1423,10 +1423,14 @@ enum nft_reject_attributes {
  *
  * @NFT_NAT_SNAT: source NAT
  * @NFT_NAT_DNAT: destination NAT
+ * @NFT_NAT_SNPT: source NPT
+ * @NFT_NAT_DNPT: destination NPT
  */
 enum nft_nat_types {
 	NFT_NAT_SNAT,
 	NFT_NAT_DNAT,
+	NFT_NAT_SNPT,
+	NFT_NAT_DNPT
 };
 
 /**
@@ -1485,6 +1489,28 @@ enum nft_masq_attributes {
 };
 #define NFTA_MASQ_MAX		(__NFTA_MASQ_MAX - 1)
 
+/**
+ * enum nft_npt_attributes - nf_tables NPT expression attributes
+ *
+ * @NFTA_NPT_TYPE: NPT type (NLA_U32: nft_nat_types)
+ * @NFTA_NPT_FAMILY: NPT family (NLA_U32)
+ * @NFTA_NPT_REG_SRC_PFX: register of Source Prefix (NLA_U32: nft_registers)
+ * @NFTA_NPT_REG_DST_PFX: register of Destination Prefix (NLA_U32: nft_registers)
+ * @NFTA_NPT_REG_SRC_PFX_LEN: Source prefix length value (NLA_U8)
+ * @NFTA_NPT_REG_DST_PFX_LEN: Destination prefix length value (NLA_U8)
+ */
+enum nft_npt_attributes {
+	NFTA_NPT_UNSPEC,
+	NFTA_NPT_TYPE,
+	NFTA_NPT_FAMILY,
+	NFTA_NPT_REG_SRC_PFX,
+	NFTA_NPT_REG_DST_PFX,
+	NFTA_NPT_REG_SRC_PFX_LEN,
+	NFTA_NPT_REG_DST_PFX_LEN,
+	__NFTA_NPT_MAX
+};
+#define NFTA_NPT_MAX           (__NFTA_NPT_MAX - 1)
+
 /**
  * enum nft_redir_attributes - nf_tables redirect expression netlink attributes
  *
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index f306a833a86a..b513842fc831 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -181,6 +181,13 @@ config NF_CONNTRACK_DSCPREMARK_EXT
 	  This option enables support for connection tracking extension
 	  for dscp remark.
 
+config NF_CONNTRACK_NPTV6_EXT
+	bool  'Connection tracking extension for nptv6 target'
+	depends on NETFILTER_ADVANCED
+	help
+	  This option enables support for connection tracking extension
+	  for nptv6 to carry NPTv6 info within the conntrack.
+
 config NF_CONNTRACK_CHAIN_EVENTS
 	bool "Register multiple callbacks to ct events"
 	depends on NF_CONNTRACK_EVENTS
@@ -594,6 +601,16 @@ config NFT_NAT
 	  This option adds the "nat" expression that you can use to perform
 	  typical Network Address Translation (NAT) packet transformations.
 
+config NFT_NPT
+	depends on NF_CONNTRACK
+	depends on NF_NAT
+	depends on NF_TABLES_IPV6
+	tristate "Netfilter nf_tables NPT support"
+	help
+	  This option adds the "NPT" expression that you can use to perform
+	  Network Prefix Translation (NPT) packet transformations that is
+	  RFC 6296 compliant.
+
 config NFT_TUNNEL
 	tristate "Netfilter nf_tables tunnel module"
 	help
diff --git a/net/netfilter/Makefile b/net/netfilter/Makefile
index 95451ab869a6..4219064244cc 100644
--- a/net/netfilter/Makefile
+++ b/net/netfilter/Makefile
@@ -21,6 +21,7 @@ else ifeq ($(CONFIG_NF_CONNTRACK),y)
 nf_conntrack-$(CONFIG_DEBUG_INFO_BTF) += nf_conntrack_bpf.o
 endif
 nf_conntrack-$(CONFIG_NF_CONNTRACK_DSCPREMARK_EXT) += nf_conntrack_dscpremark_ext.o
+nf_conntrack-$(CONFIG_NF_CONNTRACK_NPTV6_EXT) += nf_conntrack_nptv6_ext.o
 
 obj-$(CONFIG_NETFILTER) = netfilter.o
 obj-$(CONFIG_NETFILTER_BPF_LINK) += nf_bpf_link.o
@@ -115,6 +116,7 @@ obj-$(CONFIG_NFT_CT)		+= nft_ct.o
 obj-$(CONFIG_NFT_FLOW_OFFLOAD)	+= nft_flow_offload.o
 obj-$(CONFIG_NFT_LIMIT)		+= nft_limit.o
 obj-$(CONFIG_NFT_NAT)		+= nft_nat.o
+obj-$(CONFIG_NFT_NPT)		+= nft_npt.o
 obj-$(CONFIG_NFT_QUEUE)		+= nft_queue.o
 obj-$(CONFIG_NFT_QUOTA)		+= nft_quota.o
 obj-$(CONFIG_NFT_REJECT) 	+= nft_reject.o
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index ab275eb65b52..3ae8961c14cf 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -48,6 +48,9 @@
 #ifdef CONFIG_NF_CONNTRACK_DSCPREMARK_EXT
 #include <net/netfilter/nf_conntrack_dscpremark_ext.h>
 #endif
+#ifdef CONFIG_NF_CONNTRACK_NPTV6_EXT
+#include <net/netfilter/nf_conntrack_nptv6_ext.h>
+#endif
 #include <net/netfilter/nf_conntrack_labels.h>
 #include <net/netfilter/nf_conntrack_synproxy.h>
 #include <net/netfilter/nf_nat.h>
@@ -1746,6 +1749,9 @@ init_conntrack(struct net *net, struct nf_conn *tmpl,
 #ifdef CONFIG_NF_CONNTRACK_DSCPREMARK_EXT
 	nf_ct_dscpremark_ext_add(ct, GFP_ATOMIC);
 #endif
+#ifdef CONFIG_NF_CONNTRACK_NPTV6_EXT
+	nf_ct_nptv6_ext_add(ct, GFP_ATOMIC);
+#endif
 
 #ifdef CONFIG_NF_CONNTRACK_EVENTS
 	ecache = tmpl ? nf_ct_ecache_find(tmpl) : NULL;
diff --git a/net/netfilter/nf_conntrack_extend.c b/net/netfilter/nf_conntrack_extend.c
index 0dd71db08cb3..2580d82547a7 100644
--- a/net/netfilter/nf_conntrack_extend.c
+++ b/net/netfilter/nf_conntrack_extend.c
@@ -25,6 +25,7 @@
 #include <net/netfilter/nf_conntrack_act_ct.h>
 #include <net/netfilter/nf_nat.h>
 #include <net/netfilter/nf_conntrack_dscpremark_ext.h>
+#include <net/netfilter/nf_conntrack_nptv6_ext.h>
 
 #define NF_CT_EXT_PREALLOC	128u /* conntrack events are on by default */
 
@@ -58,7 +59,9 @@ static const u8 nf_ct_ext_type_len[NF_CT_EXT_NUM] = {
 #ifdef CONFIG_NF_CONNTRACK_DSCPREMARK_EXT
 	[NF_CT_EXT_DSCPREMARK] = sizeof(struct nf_ct_dscpremark_ext),
 #endif
-
+#ifdef CONFIG_NF_CONNTRACK_NPTV6_EXT
+        [NF_CT_EXT_NPTV6] = sizeof(struct nf_ct_nptv6_ext),
+#endif
 };
 
 static __always_inline unsigned int total_extension_size(void)
@@ -93,6 +96,9 @@ static __always_inline unsigned int total_extension_size(void)
 #endif
 #ifdef CONFIG_NF_CONNTRACK_DSCPREMARK_EXT
 		+ sizeof(struct nf_ct_dscpremark_ext)
+#endif
+#ifdef CONFIG_NF_CONNTRACK_NPTV6_EXT
+		+ sizeof(struct nf_ct_nptv6_ext)
 #endif
 	;
 }
-- 
2.34.1

