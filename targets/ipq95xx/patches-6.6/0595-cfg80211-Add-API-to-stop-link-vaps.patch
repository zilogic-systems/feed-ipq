From 8e6dc1878dc76bf2b9ff747833ae796b8f1f9e77 Mon Sep 17 00:00:00 2001
From: Shwetha G K <quic_kshwetha@quicinc.com>
Date: Mon, 24 Jun 2024 16:42:56 +0530
Subject: [PATCH] cfg80211: Add API to stop link vaps

Add changes to support the target recovery on single
wiphy model. In single wiphy, link vaps do not have
separate netdev.
Since there is no link netdev, deletion of link vap
during recovery in driver, does not notify kernel about the
link being deleted, which results in vdev not being set in
DOWN state during recovery. To handle this intoduced new
cfg80211 API - cfg80211_stop_interface_recovery.
Driver to invoke this API on need basis, so that kernel
issues stop_ap/diconnect to driver and kernel would also be
aware of the link being stopped.

API - cfg80211_stop_interface_recovery, issues disconnect
on STA vap, and stop_ap on AP vap on demand from driver &
its purpose is for target recovery only.

Change-Id: I2385aeeba11187cd5ee2b7825cc6bbee5a7b3332
---
 include/net/cfg80211.h | 10 ++++++++++
 net/wireless/core.c    | 36 ++++++++++++++++++++++++++++++++++++
 2 files changed, 46 insertions(+)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index c1e21dc3dcb0..dbc5c568705d 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -9271,4 +9271,14 @@ bool cfg80211_valid_disable_subchannel_bitmap(u16 *bitmap,
  */
 void cfg80211_links_removed(struct net_device *dev, u16 link_mask);
 
+#define CFG80211_STOP_INTF_DURING_RECOVERY 1
+
+/**
+ * cfg80211_stop_interface_recovery - issue stop interface of the specified link
+ * @dev: MLO network device.
+ * @link_id: link id of the interface to be stopped
+ *
+ * Stop the AP interface/disconnect the STA interface
+ */
+void cfg80211_stop_interface_recovery(struct net_device *dev, int link_id);
 #endif /* __NET_CFG80211_H */
diff --git a/net/wireless/core.c b/net/wireless/core.c
index c30714f5e7e1..ab863111a3dd 100644
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -1604,6 +1604,42 @@ static struct notifier_block cfg80211_netdev_notifier = {
 	.notifier_call = cfg80211_netdev_notifier_call,
 };
 
+void cfg80211_stop_interface_recovery(struct net_device *dev, int link_id)
+{
+	struct wireless_dev *wdev = dev->ieee80211_ptr;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wdev->wiphy);
+
+	wiphy_lock(&rdev->wiphy);
+	wdev_lock(wdev);
+
+	lockdep_assert_held(&rdev->wiphy.mtx);
+	ASSERT_WDEV_LOCK(wdev);
+	switch (wdev->iftype) {
+		case NL80211_IFTYPE_P2P_CLIENT:
+		case NL80211_IFTYPE_STATION:
+			cfg80211_disconnect(rdev, dev, WLAN_REASON_DEAUTH_LEAVING, true);
+			break;
+		case NL80211_IFTYPE_AP:
+		case NL80211_IFTYPE_P2P_GO:
+			__cfg80211_stop_ap(rdev, dev, link_id, true);
+			break;
+		case NL80211_IFTYPE_ADHOC:
+		case NL80211_IFTYPE_AP_VLAN:
+		case NL80211_IFTYPE_WDS:
+		case NL80211_IFTYPE_MONITOR:
+		case NL80211_IFTYPE_MESH_POINT:
+		case NL80211_IFTYPE_P2P_DEVICE:
+		case NL80211_IFTYPE_OCB:
+		case NL80211_IFTYPE_NAN:
+		case NL80211_IFTYPE_UNSPECIFIED:
+		case NUM_NL80211_IFTYPES:
+			break;
+	}
+	wdev_unlock(wdev);
+	wiphy_unlock(&rdev->wiphy);
+}
+EXPORT_SYMBOL(cfg80211_stop_interface_recovery);
+
 static void __net_exit cfg80211_pernet_exit(struct net *net)
 {
 	struct cfg80211_registered_device *rdev;
-- 
2.34.1

