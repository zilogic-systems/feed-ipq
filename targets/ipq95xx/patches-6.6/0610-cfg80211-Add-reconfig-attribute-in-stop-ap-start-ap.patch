From 85e59a5b15e150ffe7c5dfa2f60066e189c49f47 Mon Sep 17 00:00:00 2001
From: Subrat Mishra <quic_subratm@quicinc.com>
Date: Fri, 26 Jul 2024 12:04:31 +0530
Subject: [PATCH] cfg80211: Add reconfig attribute in stop-ap & start-ap

Add reconfig attribute in stop_ap to indicate to driver whether the
stop_ap is part of a dynamic MLO link removal or a regular VAP stop.

Add reconfig attribute in start_ap to indicate to driver whether the
start_ap is part of a dynamic MLO link addition or a regular VAP start.

Change-Id: I66c0cf1464e5df027b31c29ce30c88d59ba3a868
Signed-off-by: Subrat Mishra <quic_subratm@quicinc.com>
---
 include/net/cfg80211.h       |  8 ++++++++
 include/uapi/linux/nl80211.h |  3 +++
 net/wireless/ap.c            | 19 ++++++++++++-------
 net/wireless/core.c          |  4 ++--
 net/wireless/core.h          |  4 ++--
 net/wireless/nl80211.c       |  6 +++++-
 net/wireless/rdev-ops.h      | 16 +++++++++++++++-
 net/wireless/sme.c           |  2 +-
 net/wireless/util.c          |  4 ++--
 9 files changed, 50 insertions(+), 16 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index aefa294f069b..5697851fb0c0 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1366,6 +1366,7 @@ struct cfg80211_unsol_bcast_probe_resp {
  * @punct_bitmap: Preamble puncturing bitmap. Each bit represents
  *	a 20 MHz channel, lowest bit corresponding to the lowest channel.
  *	Bit set to 1 indicates that the channel is punctured.
+ * @reconfig: whether reconfiguration or not
  */
 struct cfg80211_ap_settings {
 	struct cfg80211_chan_def chandef;
@@ -1401,6 +1402,7 @@ struct cfg80211_ap_settings {
 	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
 	struct cfg80211_mbssid_config mbssid_config;
 	u16 punct_bitmap;
+	bool reconfig;
 };
 
 /**
@@ -4491,8 +4493,14 @@ struct cfg80211_ops {
 			    struct cfg80211_ap_settings *settings);
 	int	(*change_beacon)(struct wiphy *wiphy, struct net_device *dev,
 				 struct cfg80211_beacon_data *info);
+#ifdef CONFIG_ML_RECONFIG_SINGLE_WIPHY
+	int	(*stop_ap)(struct wiphy *wiphy, struct net_device *dev,
+			   unsigned int link_id,
+			   struct cfg80211_ap_settings *settings);
+#else
 	int	(*stop_ap)(struct wiphy *wiphy, struct net_device *dev,
 			   unsigned int link_id);
+#endif /* CONFIG_ML_RECONFIG_SINGLE_WIPHY */
 
 
 	int	(*add_station)(struct wiphy *wiphy, struct net_device *dev,
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index 270737c6d315..911409b047a6 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2842,6 +2842,8 @@ enum nl80211_commands {
  * @NL80211_ATTR_TSF: (u64) TSF value when the first beacon with reconfiguration
  *	MLE is sent.
  *
+ * @NL80211_ATTR_MLO_AP_RECONFIG: whether the operation is MLO reconfiguration or not
+ *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -3384,6 +3386,7 @@ enum nl80211_attrs {
 	NL80211_ATTR_TSF,
 
 	NL80211_ATTR_RADIO_IFACE = 350,
+	NL80211_ATTR_MLO_AP_RECONFIG,
 
 	/* add attributes here, update the policy in nl80211.c */
 
diff --git a/net/wireless/ap.c b/net/wireless/ap.c
index 0962770303b2..3bb56c9106c9 100644
--- a/net/wireless/ap.c
+++ b/net/wireless/ap.c
@@ -13,10 +13,11 @@
 
 static int ___cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 			       struct net_device *dev, unsigned int link_id,
-			       bool notify)
+			       bool notify, struct genl_info *info)
 {
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	int err;
+	struct cfg80211_ap_settings params = {0};
 
 	ASSERT_WDEV_LOCK(wdev);
 
@@ -30,7 +31,11 @@ static int ___cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 	if (!wdev->links[link_id].ap.beacon_interval)
 		return -ENOENT;
 
-	err = rdev_stop_ap(rdev, dev, link_id);
+	if (info && info->attrs[NL80211_ATTR_MLO_AP_RECONFIG])
+		params.reconfig =
+			nla_get_flag(info->attrs[NL80211_ATTR_MLO_AP_RECONFIG]);
+
+	err = rdev_stop_ap(rdev, dev, link_id, &params);
 	if (!err) {
 		wdev->conn_owner_nlportid = 0;
 		wdev->links[link_id].ap.beacon_interval = 0;
@@ -54,16 +59,16 @@ static int ___cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 
 int __cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 		       struct net_device *dev, int link_id,
-		       bool notify)
+		       bool notify, struct genl_info *info)
 {
 	unsigned int link;
 	int ret = 0;
 
 	if (link_id >= 0)
-		return ___cfg80211_stop_ap(rdev, dev, link_id, notify);
+		return ___cfg80211_stop_ap(rdev, dev, link_id, notify, info);
 
 	for_each_valid_link(dev->ieee80211_ptr, link) {
-		int ret1 = ___cfg80211_stop_ap(rdev, dev, link, notify);
+		int ret1 = ___cfg80211_stop_ap(rdev, dev, link, notify, info);
 
 		if (ret1)
 			ret = ret1;
@@ -75,13 +80,13 @@ int __cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 
 int cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 		     struct net_device *dev, int link_id,
-		     bool notify)
+		     bool notify, struct genl_info *info)
 {
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	int err;
 
 	wdev_lock(wdev);
-	err = __cfg80211_stop_ap(rdev, dev, link_id, notify);
+	err = __cfg80211_stop_ap(rdev, dev, link_id, notify, info);
 	wdev_unlock(wdev);
 
 	return err;
diff --git a/net/wireless/core.c b/net/wireless/core.c
index ab863111a3dd..e3e33aa4981d 100644
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -1316,7 +1316,7 @@ void __cfg80211_leave(struct cfg80211_registered_device *rdev,
 		break;
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_P2P_GO:
-		__cfg80211_stop_ap(rdev, dev, -1, true);
+		__cfg80211_stop_ap(rdev, dev, -1, true, NULL);
 		break;
 	case NL80211_IFTYPE_OCB:
 		__cfg80211_leave_ocb(rdev, dev);
@@ -1621,7 +1621,7 @@ void cfg80211_stop_interface_recovery(struct net_device *dev, int link_id)
 			break;
 		case NL80211_IFTYPE_AP:
 		case NL80211_IFTYPE_P2P_GO:
-			__cfg80211_stop_ap(rdev, dev, link_id, true);
+			__cfg80211_stop_ap(rdev, dev, link_id, true, NULL);
 			break;
 		case NL80211_IFTYPE_ADHOC:
 		case NL80211_IFTYPE_AP_VLAN:
diff --git a/net/wireless/core.h b/net/wireless/core.h
index 2c255f0842f8..ac95ef2bf354 100644
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -368,10 +368,10 @@ int cfg80211_leave_ocb(struct cfg80211_registered_device *rdev,
 /* AP */
 int __cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 		       struct net_device *dev, int link,
-		       bool notify);
+		       bool notify, struct genl_info *info);
 int cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 		     struct net_device *dev, int link,
-		     bool notify);
+		     bool notify, struct genl_info *info);
 
 /* MLME */
 int cfg80211_mlme_auth(struct cfg80211_registered_device *rdev,
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index af053de20de8..0ec6aff960a2 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -821,6 +821,7 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 	[NL80211_ATTR_RADIO_IFACE] = { .type = NLA_BINARY, .len = IFNAMSIZ-1 },
 	[NL80211_ATTR_AP_REMOVAL_COUNT] = { .type = NLA_U16 },
 	[NL80211_ATTR_TSF] = { .type = NLA_U64 },
+	[NL80211_ATTR_MLO_AP_RECONFIG] = { .type = NLA_FLAG },
 };
 
 /* policy for the key attributes */
@@ -5989,6 +5990,9 @@ static int nl80211_start_ap(struct sk_buff *skb, struct genl_info *info)
 		nla_get_u32(info->attrs[NL80211_ATTR_BEACON_INTERVAL]);
 	params->dtim_period =
 		nla_get_u32(info->attrs[NL80211_ATTR_DTIM_PERIOD]);
+	if (info->attrs[NL80211_ATTR_MLO_AP_RECONFIG])
+		params->reconfig =
+			nla_get_flag(info->attrs[NL80211_ATTR_MLO_AP_RECONFIG]);
 
 	err = cfg80211_validate_beacon_int(rdev, dev->ieee80211_ptr->iftype,
 					   params->beacon_interval);
@@ -6306,7 +6310,7 @@ static int nl80211_stop_ap(struct sk_buff *skb, struct genl_info *info)
 	unsigned int link_id = nl80211_link_id(info->attrs);
 	struct net_device *dev = info->user_ptr[1];
 
-	return cfg80211_stop_ap(rdev, dev, link_id, false);
+	return cfg80211_stop_ap(rdev, dev, link_id, false, info);
 }
 
 static const struct nla_policy sta_flags_policy[NL80211_STA_FLAG_MAX + 1] = {
diff --git a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
index 78a4322f94b8..5b4cab4aade9 100644
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -182,8 +182,21 @@ static inline int rdev_change_beacon(struct cfg80211_registered_device *rdev,
 	return ret;
 }
 
+#ifdef CONFIG_ML_RECONFIG_SINGLE_WIPHY
 static inline int rdev_stop_ap(struct cfg80211_registered_device *rdev,
-			       struct net_device *dev, unsigned int link_id)
+			       struct net_device *dev, unsigned int link_id,
+			       struct cfg80211_ap_settings *settings)
+{
+	int ret;
+	trace_rdev_stop_ap(&rdev->wiphy, dev, link_id);
+	ret = rdev->ops->stop_ap(&rdev->wiphy, dev, link_id, settings);
+	trace_rdev_return_int(&rdev->wiphy, ret);
+	return ret;
+}
+#else
+static inline int rdev_stop_ap(struct cfg80211_registered_device *rdev,
+			       struct net_device *dev, unsigned int link_id,
+			       struct cfg80211_ap_settings *settings)
 {
 	int ret;
 	trace_rdev_stop_ap(&rdev->wiphy, dev, link_id);
@@ -191,6 +204,7 @@ static inline int rdev_stop_ap(struct cfg80211_registered_device *rdev,
 	trace_rdev_return_int(&rdev->wiphy, ret);
 	return ret;
 }
+#endif /* CONFIG_ML_RECONFIG_SINGLE_WIPHY */
 
 static inline int rdev_add_station(struct cfg80211_registered_device *rdev,
 				   struct net_device *dev, u8 *mac,
diff --git a/net/wireless/sme.c b/net/wireless/sme.c
index 9bba233b5a6e..879a7d768516 100644
--- a/net/wireless/sme.c
+++ b/net/wireless/sme.c
@@ -1594,7 +1594,7 @@ void cfg80211_autodisconnect_wk(struct work_struct *work)
 			break;
 		case NL80211_IFTYPE_AP:
 		case NL80211_IFTYPE_P2P_GO:
-			__cfg80211_stop_ap(rdev, wdev->netdev, -1, false);
+			__cfg80211_stop_ap(rdev, wdev->netdev, -1, false, NULL);
 			break;
 		case NL80211_IFTYPE_MESH_POINT:
 			__cfg80211_leave_mesh(rdev, wdev->netdev);
diff --git a/net/wireless/util.c b/net/wireless/util.c
index 51222f674a6b..ecb42589a400 100644
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -1131,7 +1131,7 @@ int cfg80211_change_iface(struct cfg80211_registered_device *rdev,
 		switch (otype) {
 		case NL80211_IFTYPE_AP:
 		case NL80211_IFTYPE_P2P_GO:
-			cfg80211_stop_ap(rdev, dev, -1, true);
+			cfg80211_stop_ap(rdev, dev, -1, true, NULL);
 			break;
 		case NL80211_IFTYPE_ADHOC:
 			cfg80211_leave_ibss(rdev, dev, false);
@@ -2670,7 +2670,7 @@ void cfg80211_remove_link(struct wireless_dev *wdev, unsigned int link_id)
 	switch (wdev->iftype) {
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_P2P_GO:
-		__cfg80211_stop_ap(rdev, wdev->netdev, link_id, true);
+		__cfg80211_stop_ap(rdev, wdev->netdev, link_id, true, NULL);
 		break;
 	default:
 		/* per-link not relevant */
-- 
2.34.1

