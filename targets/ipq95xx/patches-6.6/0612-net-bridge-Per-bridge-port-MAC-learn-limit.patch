From cc3c2cae819effe25d290d9306da41618368d304 Mon Sep 17 00:00:00 2001
From: Amitesh Anand <quic_amitesh@quicinc.com>
Date: Fri, 23 Feb 2024 17:14:01 +0530
Subject: [PATCH] [net] [bridge] Per bridge port MAC learn limit

Introduce a per bridge port MAC learn limit and
count.

Change-Id: I0e51239b36da384064640b3b72442da28232370a
Signed-off-by: Amit Gupta <quic_amitgupt@quicinc.com>
Signed-off-by: Amitesh Anand <quic_amitesh@quicinc.com>
---
 net/bridge/br_fdb.c      | 25 +++++++++++++++++++++++++
 net/bridge/br_if.c       | 17 +++++++++++++++++
 net/bridge/br_private.h  |  3 +++
 net/bridge/br_sysfs_if.c | 17 +++++++++++++++++
 4 files changed, 62 insertions(+)

diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index aa5ae9025e38..e7602fdf8246 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -357,6 +357,10 @@ static void fdb_delete(struct net_bridge *br, struct net_bridge_fdb_entry *f,
 {
 	trace_fdb_delete(br, f);
 
+	if (f->dst && f->dst->mac_lrn_limit) {
+		f->dst->mac_lrn_cnt--;
+	}
+
 	if (test_bit(BR_FDB_STATIC, &f->flags))
 		fdb_del_hw_addr(br, f->key.addr.addr);
 
@@ -425,6 +429,12 @@ static struct net_bridge_fdb_entry *fdb_create(struct net_bridge *br,
 	struct net_bridge_fdb_entry *fdb;
 	int err;
 
+	/* Do not learn if MAC learn limit is reached for the given source */
+	if (source && source->mac_lrn_limit
+		&& (source->mac_lrn_cnt >= source->mac_lrn_limit)) {
+		return NULL;
+	}
+
 	fdb = kmem_cache_alloc(br_fdb_cache, GFP_ATOMIC);
 	if (!fdb)
 		return NULL;
@@ -443,6 +453,10 @@ static struct net_bridge_fdb_entry *fdb_create(struct net_bridge *br,
 
 	hlist_add_head_rcu(&fdb->fdb_node, &br->fdb_list);
 
+	if (source && fdb && source->mac_lrn_limit) {
+		source->mac_lrn_cnt++;
+	}
+
 	return fdb;
 }
 
@@ -916,6 +930,7 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 		   const unsigned char *addr, u16 vid, unsigned long flags)
 {
 	struct net_bridge_fdb_entry *fdb;
+	struct net_bridge_port *dst_orig;
 	struct br_fdb_event fdb_event;
 
 	/* some users want to always flood. */
@@ -946,9 +961,19 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 				fdb_event.br = br;
 				fdb_event.orig_dev = fdb->dst->dev;
 				fdb_event.dev = source->dev;
+				dst_orig = fdb->dst;
 				WRITE_ONCE(fdb->dst, source);
 				fdb_modified = true;
 
+				/* Updated the number of learned entries for both new and old source */
+				if (dst_orig && dst_orig->mac_lrn_limit) {
+					dst_orig->mac_lrn_cnt--;
+				}
+
+				if (source && source->mac_lrn_limit) {
+					source->mac_lrn_cnt++;
+				}
+
 				/* Take over HW learned entry */
 				if (unlikely(test_bit(BR_FDB_ADDED_BY_EXT_LEARN,
 						      &fdb->flags)))
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index 96a51ab857ad..ead844cb3ad0 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -895,3 +895,20 @@ int br_port_set_sub_br_id(struct net_bridge_port *p, unsigned long new_sub_br_id
 	p->sub_br_id = new_sub_br_id;
 	return 0;
 }
+
+/*
+ * Set per bridge port MAC learn limit
+ */
+int br_port_set_mac_lrn_limit(struct net_bridge_port *p, unsigned long new_mac_lrn_limit)
+{
+	pr_info("Set mac learn limit old: %d, new: %d\n", p->mac_lrn_limit, new_mac_lrn_limit);
+
+	p->mac_lrn_limit = new_mac_lrn_limit;
+
+	/* Reset current mac learn cnt when mac learn limit is disabled */
+	if(!p->mac_lrn_limit) {
+		p->mac_lrn_cnt = 0;
+	}
+
+	return 0;
+}
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 6132dfaf0a27..a32da578e0b8 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -395,6 +395,8 @@ struct net_bridge_port {
 	u8				sub_br_id;
 	u8				priority;
 	u8				state;
+	u16				mac_lrn_cnt;
+	u16				mac_lrn_limit;
 	u16				port_no;
 	unsigned char			topology_change_ack;
 	unsigned char			config_pending;
@@ -908,6 +910,7 @@ void br_port_flags_change(struct net_bridge_port *port, unsigned long mask);
 void br_manage_promisc(struct net_bridge *br);
 int nbp_backup_change(struct net_bridge_port *p, struct net_device *backup_dev);
 int br_port_set_sub_br_id(struct net_bridge_port *p, unsigned long new_sub_br_id);
+int br_port_set_mac_lrn_limit(struct net_bridge_port *p, unsigned long new_mac_lrn_limit);
 
 /* br_input.c */
 int br_pass_frame_up(struct sk_buff *skb);
diff --git a/net/bridge/br_sysfs_if.c b/net/bridge/br_sysfs_if.c
index 22e7d5fd20f4..19bf5a240bcd 100644
--- a/net/bridge/br_sysfs_if.c
+++ b/net/bridge/br_sysfs_if.c
@@ -237,6 +237,21 @@ static ssize_t show_sub_br_id(struct net_bridge_port *p, char *buf)
 static BRPORT_ATTR(sub_br_id, 0644,
 		show_sub_br_id, br_port_set_sub_br_id);
 
+static ssize_t show_mac_lrn_limit(struct net_bridge_port *p, char *buf)
+{
+	return snprintf(buf, sizeof(u16), "%d\n", p->mac_lrn_limit);
+}
+
+static BRPORT_ATTR(mac_lrn_limit, 0644,
+			 show_mac_lrn_limit, br_port_set_mac_lrn_limit);
+
+static ssize_t show_mac_lrn_cnt(struct net_bridge_port *p, char *buf)
+{
+	return snprintf(buf, sizeof(u16), "%d\n", p->mac_lrn_cnt);
+}
+
+static BRPORT_ATTR(mac_lrn_cnt, 0444, show_mac_lrn_cnt, NULL);
+
 BRPORT_ATTR_FLAG(upstream_port, BR_UPSTREAM_PORT);
 BRPORT_ATTR_FLAG(hairpin_mode, BR_HAIRPIN_MODE);
 BRPORT_ATTR_FLAG(bpdu_guard, BR_BPDU_GUARD);
@@ -306,6 +321,8 @@ static const struct brport_attribute *brport_attrs[] = {
 	&brport_attr_backup_port,
 	&brport_attr_sub_br_id,
 	&brport_attr_upstream_port,
+	&brport_attr_mac_lrn_limit,
+	&brport_attr_mac_lrn_cnt,
 	NULL
 };
 
-- 
2.34.1

