From 58f8f8ca551b02ae5be67b6261427db4476aad06 Mon Sep 17 00:00:00 2001
From: Ken Zhu <quic_guigenz@quicinc.com>
Date: Mon, 4 Dec 2023 11:15:26 -0800
Subject: [PATCH] skb-recycler: update the kmemleak status in recycler

free the kmemleak object of skb and its head when
it is consumed by recycler.

create the kmemleak object of skb and its head when
it is allocated from recycler.

Change-Id: Ibbf6a301202a04944b5e01a7dc9be5739b7c1e3b
Signed-off-by: Ken Zhu <quic_guigenz@quicinc.com>
---
 include/linux/kmemleak.h |  4 ++++
 mm/kmemleak.c            | 26 ++++++++++++++++++++++++++
 net/core/skbuff.c        | 13 +++++++++++++
 3 files changed, 43 insertions(+)

diff --git a/include/linux/kmemleak.h b/include/linux/kmemleak.h
index 6a3cd1bf4680..46ad8b95e14f 100644
--- a/include/linux/kmemleak.h
+++ b/include/linux/kmemleak.h
@@ -26,6 +26,7 @@ extern void kmemleak_free_part(const void *ptr, size_t size) __ref;
 extern void kmemleak_free_percpu(const void __percpu *ptr) __ref;
 extern void kmemleak_update_trace(const void *ptr) __ref;
 extern void kmemleak_not_leak(const void *ptr) __ref;
+extern void kmemleak_restore(const void *ptr, int min_count) __ref;
 extern void kmemleak_ignore(const void *ptr) __ref;
 extern void kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp) __ref;
 extern void kmemleak_no_scan(const void *ptr) __ref;
@@ -93,6 +94,9 @@ static inline void kmemleak_update_trace(const void *ptr)
 static inline void kmemleak_not_leak(const void *ptr)
 {
 }
+static inline void kmemleak_restore(const void *ptr, int min_count)
+{
+}
 static inline void kmemleak_ignore(const void *ptr)
 {
 }
diff --git a/mm/kmemleak.c b/mm/kmemleak.c
index 54c2c90d3abc..84decb8559c3 100644
--- a/mm/kmemleak.c
+++ b/mm/kmemleak.c
@@ -1138,6 +1138,32 @@ void __ref kmemleak_not_leak(const void *ptr)
 }
 EXPORT_SYMBOL(kmemleak_not_leak);
 
+/**
+ * kmemleak_restore - restore an allocated object ignored
+ * @ptr:	pointer to beginning of the object
+ * @min_count:	minimum number of references to this object.
+ *
+ * Calling this function on an object will cause the ignored memory block to be
+ * scanned and reported as a leak again.
+ */
+void __ref kmemleak_restore(const void *ptr, int min_count)
+{
+	pr_debug("%s(0x%p)\n", __func__, ptr);
+	if (kmemleak_enabled && ptr && !IS_ERR(ptr)) {
+		struct kmemleak_object *object;
+		object = find_and_get_object((unsigned long)ptr, 0);
+		if (!object) {
+			kmemleak_warn("Trying to restore unknown object at 0x%p\n",
+					ptr);
+			return;
+		}
+		paint_it(object, min_count);
+		object->flags &= ~OBJECT_NO_SCAN;
+		put_object(object);
+	}
+}
+EXPORT_SYMBOL(kmemleak_restore);
+
 /**
  * kmemleak_ignore - ignore an allocated object
  * @ptr:	pointer to beginning of the object
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index ff0df949eaba..2e569e62eda5 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -84,6 +84,7 @@
 #include <linux/user_namespace.h>
 #include <linux/indirect_call_wrapper.h>
 #include <linux/textsearch.h>
+#include <linux/kmemleak.h>
 
 #include "dev.h"
 #include "sock_destructor.h"
@@ -745,6 +746,12 @@ struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
 	skb = skb_recycler_alloc(dev, length, reset_skb);
 	if (likely(skb)) {
 		skb_recycler_clear_flags(skb);
+#ifdef CONFIG_DEBUG_KMEMLEAK
+		kmemleak_update_trace(skb);
+		kmemleak_restore(skb, 1);
+		kmemleak_update_trace(skb->head);
+		kmemleak_restore(skb->head, 1);
+#endif
 		return skb;
 	}
 
@@ -953,6 +960,12 @@ struct sk_buff *__netdev_alloc_skb_no_skb_reset(struct net_device *dev,
 
 	skb = skb_recycler_alloc(dev, length, reset_skb);
 	if (likely(skb)) {
+#ifdef CONFIG_DEBUG_KMEMLEAK
+		kmemleak_update_trace(skb);
+		kmemleak_restore(skb, 1);
+		kmemleak_update_trace(skb->head);
+		kmemleak_restore(skb->head, 1);
+#endif
 		skb->fast_recycled = 0;
 		skb->fast_qdisc = 0;
 		return skb;
-- 
2.34.1

