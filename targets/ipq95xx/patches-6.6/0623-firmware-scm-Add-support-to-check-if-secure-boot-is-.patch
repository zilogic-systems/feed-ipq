From a2d78a2d2eb633b19b397f73c940c7a7be9fb361 Mon Sep 17 00:00:00 2001
From: Devi Priya <quic_devipriy@quicinc.com>
Date: Fri, 16 Aug 2024 12:21:37 +0530
Subject: [PATCH] firmware: scm: Add support to check if secure boot is enabled

Add an interface to check if secure boot is enabled in IPQ54xx.

Change-Id: Ifcb114765d228a68a5b6daef9170711700203861
Signed-off-by: Devi Priya <quic_devipriy@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 39 ++++++++++++++++++++++++++
 include/linux/firmware/qcom/qcom_scm.h |  4 +++
 2 files changed, 43 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index ecbbfcdb99b3..a72f05fa6cb9 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -1439,6 +1439,19 @@ bool qcom_scm_ice_hwkey_available(void)
 }
 EXPORT_SYMBOL(qcom_scm_ice_hwkey_available);
 
+/**
+ * qcom_qfprom_show_auth_available() - Check if the SCM call to verify
+ *					   secure boot fuse enablement is supported?
+ *
+ * Return: true if the SCM call is supported
+ */
+bool qcom_qfprom_show_auth_available(void)
+{
+	return __qcom_scm_is_call_available(__scm->dev, QCOM_SCM_SVC_FUSE,
+							QCOM_QFPROM_IS_AUTHENTICATE_CMD);
+}
+EXPORT_SYMBOL_GPL(qcom_qfprom_show_auth_available);
+
 /**
  * qcom_scm_ice_invalidate_key() - Invalidate an inline encryption key
  * @index: the keyslot to invalidate
@@ -2249,6 +2262,32 @@ int qcom_qfprom_show_authenticate(void)
 }
 EXPORT_SYMBOL_GPL(qcom_qfprom_show_authenticate);
 
+int ipq54xx_qcom_qfprom_show_authenticate(void)
+{
+	int ret;
+	struct fuse_payload *fuse = NULL;
+
+	fuse = kzalloc(sizeof(*fuse), GFP_KERNEL);
+	if (!fuse)
+		return -ENOMEM;
+
+	fuse[0].fuse_addr = SECURE_BOOT_FUSE_ADDR;
+
+	ret = qcom_scm_get_ipq_fuse_list(fuse, sizeof(struct fuse_payload));
+	if (ret) {
+		pr_err("SCM call for reading ipq54xx fuse failed with error:%d\n", ret);
+		ret = -1;
+		goto fuse_alloc_err;
+	}
+
+	if (fuse[0].lsb_val & OEM_SEC_BOOT_ENABLE)
+		ret = 1;
+fuse_alloc_err:
+	kfree(fuse);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(ipq54xx_qcom_qfprom_show_authenticate);
+
 int qcom_sec_upgrade_auth(unsigned int scm_cmd_id, unsigned int sw_type,
 				unsigned int img_size, unsigned int load_addr)
 {
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index 8de60d798cee..69b37478172b 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -35,6 +35,8 @@
 
 #define MAX_FUSE_ADDR_SIZE		0x8
 #define IPQ9574_MAX_FUSE_ADDR_SIZE	22
+#define SECURE_BOOT_FUSE_ADDR		0xA40E0
+#define OEM_SEC_BOOT_ENABLE		BIT(7)
 
 struct fuse_payload {
 	uint32_t fuse_addr;
@@ -228,6 +230,7 @@ extern int qcom_qfprom_read_version(uint32_t sw_type,
 				    uint32_t value,
 				    uint32_t qfprom_ret_ptr);
 extern int qcom_qfprom_show_authenticate(void);
+extern int ipq54xx_qcom_qfprom_show_authenticate(void);
 extern bool qcom_scm_is_available(void);
 
 extern int qcom_scm_set_cold_boot_addr(void *entry);
@@ -284,6 +287,7 @@ extern int qcom_scm_ocmem_unlock(enum qcom_scm_ocmem_client id, u32 offset,
 
 extern bool qcom_scm_ice_available(void);
 extern bool qcom_scm_ice_hwkey_available(void);
+extern bool qcom_qfprom_show_auth_available(void);
 extern int qcom_scm_ice_invalidate_key(u32 index);
 extern int qcom_config_sec_ice(void *buf, int size);
 extern int qcom_scm_ice_set_key(u32 index, const u8 *key, u32 key_size,
-- 
2.34.1

