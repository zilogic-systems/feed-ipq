From e3479be2b9aecdb2b413505d00b5747dfe616b3d Mon Sep 17 00:00:00 2001
From: Devi Priya <quic_devipriy@quicinc.com>
Date: Tue, 2 Jul 2024 22:47:31 +0530
Subject: [PATCH] firmware: qcom_scm: Add SCM call support for authentication
 of loadable segments

Add an interface to pass the loadable segment info of the elf to TZ
for image authentication.

Change-Id: I9d019ca861eabea65317e9b2073205dfb6b4dd30
Signed-off-by: Devi Priya <quic_devipriy@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 64 ++++++++++++++++++++++++++
 include/linux/firmware/qcom/qcom_scm.h |  9 ++++
 2 files changed, 73 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index a72f05fa6cb9..2ae036c9c041 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -2619,6 +2619,70 @@ int qcom_sec_upgrade_auth_meta_data(unsigned int scm_cmd_id,unsigned int sw_type
 }
 EXPORT_SYMBOL_GPL(qcom_sec_upgrade_auth_meta_data);
 
+/**
+ * qcom_sec_upgrade_auth_ld_segments() - Pass the structure pointer containing
+ * the start and end addr of the elf loadable segments and the elf address to
+ * TZ for authentication. TZ invokes IPC to TME for the image authentication.
+ *
+ * scm_cmd_id: SCM CMD ID
+ * sw_type: SW type of the image to be authenticated
+ * elf_addr: Physical address where the elf is loaded
+ * meta_data_size: offset + size of the last NULL segment in ELF
+ * ld_seg_info: Structure pointer containing the start and end addr of the
+ *		elf loadable segments
+ * ld_seg_count: count of the lodable segments
+ */
+int qcom_sec_upgrade_auth_ld_segments(unsigned int scm_cmd_id, unsigned int sw_type,
+				      u32 elf_addr, u32 meta_data_size,
+				      struct load_segs_info *ld_seg_info,
+				      u32 ld_seg_count, u64 *status)
+{
+	int ret;
+	struct qcom_scm_res res;
+	u32 ld_seg_buff_size;
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_BOOT,
+		.cmd = scm_cmd_id,
+		.arginfo = QCOM_SCM_ARGS(5, QCOM_SCM_VAL, QCOM_SCM_VAL, QCOM_SCM_VAL,
+				QCOM_SCM_RO, QCOM_SCM_VAL),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+	dma_addr_t ld_seg_addr;
+
+	desc.args[0] = elf_addr;
+	desc.args[1] = meta_data_size;
+	desc.args[2] = sw_type;
+
+	if (ld_seg_info) {
+		ld_seg_buff_size = ld_seg_count * sizeof(struct load_segs_info);
+		ld_seg_addr = dma_map_single(__scm->dev, ld_seg_info,
+					     ld_seg_buff_size, DMA_TO_DEVICE);
+
+		ret = dma_mapping_error(__scm->dev, ld_seg_addr);
+		if (ret != 0) {
+			pr_err("%s: DMA Mapping Error: %d\n", __func__, ret);
+			return ret;
+		}
+		desc.args[3] = ld_seg_addr;
+		desc.args[4] = ld_seg_buff_size;
+	} else {
+		/* Passing NULL and zero for ld_seg_addr and ld_seg_buff_size for
+		 * rootfs image auth as it does not contain loadable segments
+		 */
+		desc.args[3] = (u64)NULL;
+		desc.args[4] = 0;
+	}
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	*status = res.result[0];
+
+	if (ld_seg_info)
+		dma_unmap_single(__scm->dev, ld_seg_addr, ld_seg_buff_size, DMA_TO_DEVICE);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(qcom_sec_upgrade_auth_ld_segments);
+
 int qcom_qfprom_write_version(uint32_t sw_type, uint32_t value, uint32_t qfprom_ret_ptr)
 {
 	int ret;
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index 69b37478172b..03dca08142a5 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -49,6 +49,11 @@ struct fuse_payload_ipq9574 {
 	uint32_t val;
 };
 
+struct load_segs_info {
+	u32 start_addr;
+	u32 end_addr;
+};
+
 enum qseecom_qceos_cmd_id {
 	QSEOS_APP_START_COMMAND = 0x01,
 	QSEOS_APP_SHUTDOWN_COMMAND,
@@ -341,6 +346,10 @@ extern int qcom_sec_upgrade_auth(unsigned int scm_cmd_id,
 extern int qcom_sec_upgrade_auth_meta_data(unsigned int scm_cmd_id,unsigned int sw_type,
 					   unsigned int img_size,unsigned int load_addr,
 					   void* hash_addr,unsigned int hash_size);
+extern int qcom_sec_upgrade_auth_ld_segments(unsigned int scm_cmd_id, unsigned int sw_type,
+					     u32 elf_addr, u32 meta_data_size,
+					     struct load_segs_info *ld_seg_info,
+					     u32 ld_seg_buff_size, u64 *status);
 extern int qcom_scm_enable_try_mode(void);
 extern int qcom_read_dload_reg(void);
 extern int qti_scm_qseecom_remove_xpu(void);
-- 
2.34.1

