From 45d22093bbf349a9237a112a4c0ebacb8b729d4a Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Tue, 3 Sep 2024 15:56:39 +0530
Subject: [PATCH] driver: remoteproc: Add support for userpd FW info in
 coredump

Add support in rproc_coredump add segment function to pass specific VA
to be populated in the ELF header of the coredump.

Also, export mdt_phdr_valid API in mdt_loader as this will be used by
qcom_q6v5_mpd.c for userpd dump collection.

Change-Id: I922cde22d514329cf24cc1aae7e9730c89026e25
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/remoteproc/remoteproc_coredump.c | 46 +++++++++++++++++++++++-
 drivers/soc/qcom/mdt_loader.c            |  3 +-
 include/linux/remoteproc.h               |  8 +++++
 include/linux/soc/qcom/mdt_loader.h      |  6 +++-
 4 files changed, 60 insertions(+), 3 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_coredump.c b/drivers/remoteproc/remoteproc_coredump.c
index 6ede8c0c93ad..65586dd2d77c 100644
--- a/drivers/remoteproc/remoteproc_coredump.c
+++ b/drivers/remoteproc/remoteproc_coredump.c
@@ -101,6 +101,47 @@ int rproc_coredump_add_custom_segment(struct rproc *rproc,
 }
 EXPORT_SYMBOL(rproc_coredump_add_custom_segment);
 
+/**
+ * rproc_coredump_add_custom_segment_with_va() - add custom coredump segment
+ * @rproc:	handle of a remote processor
+ * @da:		device address
+ * @va:		device virtual address
+ * @size:	size of segment
+ * @dumpfn:	custom dump function called for each segment during coredump
+ * @priv:	private data
+ *
+ * Add device memory to the list of segments to be included in the coredump
+ * and associate the segment with the given custom dump function and private
+ * data.
+ *
+ * Return: 0 on success, negative errno on error.
+ */
+int rproc_coredump_add_custom_segment_with_va(struct rproc *rproc,
+				      dma_addr_t da, dma_addr_t va, size_t size,
+				      void (*dumpfn)(struct rproc *rproc,
+						     struct rproc_dump_segment *segment,
+						     void *dest, size_t offset,
+						     size_t size),
+				      void *priv)
+{
+	struct rproc_dump_segment *segment;
+
+	segment = kzalloc(sizeof(*segment), GFP_KERNEL);
+	if (!segment)
+		return -ENOMEM;
+
+	segment->da = da;
+	segment->va = va;
+	segment->size = size;
+	segment->priv = priv;
+	segment->dump = dumpfn;
+
+	list_add_tail(&segment->node, &rproc->dump_segments);
+
+	return 0;
+}
+EXPORT_SYMBOL(rproc_coredump_add_custom_segment_with_va);
+
 /**
  * rproc_coredump_set_elf_info() - set coredump elf information
  * @rproc:	handle of a remote processor
@@ -295,7 +336,10 @@ void rproc_coredump(struct rproc *rproc)
 		memset(phdr, 0, elf_size_of_phdr(class));
 		elf_phdr_set_p_type(class, phdr, PT_LOAD);
 		elf_phdr_set_p_offset(class, phdr, offset);
-		elf_phdr_set_p_vaddr(class, phdr, segment->da);
+		if (segment->va)
+			elf_phdr_set_p_vaddr(class, phdr, segment->va);
+		else
+			elf_phdr_set_p_vaddr(class, phdr, segment->da);
 		elf_phdr_set_p_paddr(class, phdr, segment->da);
 		elf_phdr_set_p_filesz(class, phdr, segment->size);
 		elf_phdr_set_p_memsz(class, phdr, segment->size);
diff --git a/drivers/soc/qcom/mdt_loader.c b/drivers/soc/qcom/mdt_loader.c
index 7afbd616030c..f7b0a2153f45 100644
--- a/drivers/soc/qcom/mdt_loader.c
+++ b/drivers/soc/qcom/mdt_loader.c
@@ -51,7 +51,7 @@ struct pdseg_dma_mem_info {
 	void **pt;
 };
 
-static bool mdt_phdr_valid(const struct elf32_phdr *phdr)
+bool mdt_phdr_valid(const struct elf32_phdr *phdr)
 {
 	if (phdr->p_type != PT_LOAD)
 		return false;
@@ -64,6 +64,7 @@ static bool mdt_phdr_valid(const struct elf32_phdr *phdr)
 
 	return true;
 }
+EXPORT_SYMBOL_GPL(mdt_phdr_valid);
 
 static ssize_t mdt_load_split_segment(void *ptr, const struct elf32_phdr *phdrs,
 				      unsigned int segment, const char *fw_name,
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index dc77129e39b9..6dc8fc58faff 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -481,6 +481,7 @@ struct rproc_dump_segment {
 	struct list_head node;
 
 	dma_addr_t da;
+	dma_addr_t va;
 	size_t size;
 
 	void *priv;
@@ -710,6 +711,13 @@ int rproc_coredump_add_custom_segment(struct rproc *rproc,
 						     void *dest, size_t offset,
 						     size_t size),
 				      void *priv);
+int rproc_coredump_add_custom_segment_with_va(struct rproc *rproc,
+				      dma_addr_t da, dma_addr_t va, size_t size,
+				      void (*dumpfn)(struct rproc *rproc,
+						     struct rproc_dump_segment *segment,
+						     void *dest, size_t offset,
+						     size_t size),
+				      void *priv);
 int rproc_coredump_set_elf_info(struct rproc *rproc, u8 class, u16 machine);
 
 void rproc_add_subdev(struct rproc *rproc, struct rproc_subdev *subdev);
diff --git a/include/linux/soc/qcom/mdt_loader.h b/include/linux/soc/qcom/mdt_loader.h
index f27b075d62c3..2f8cc754f6fb 100644
--- a/include/linux/soc/qcom/mdt_loader.h
+++ b/include/linux/soc/qcom/mdt_loader.h
@@ -39,7 +39,7 @@ int qcom_mdt_load_pd_seg(struct device *dev, const struct firmware *fw,
 			 phys_addr_t *reloc_base);
 void *qcom_mdt_read_metadata(const struct firmware *fw, size_t *data_len,
 			     const char *fw_name, struct device *dev);
-
+bool mdt_phdr_valid(const struct elf32_phdr *phdr);
 #else /* !IS_ENABLED(CONFIG_QCOM_MDT_LOADER) */
 
 static inline ssize_t qcom_mdt_get_size(const struct firmware *fw)
@@ -89,6 +89,10 @@ static inline void *qcom_mdt_read_metadata(const struct firmware *fw,
 	return ERR_PTR(-ENODEV);
 }
 
+static inline bool mdt_phdr_valid(const struct elf32_phdr *phdr)
+{
+	return false;
+}
 #endif /* !IS_ENABLED(CONFIG_QCOM_MDT_LOADER) */
 
 #endif
-- 
2.34.1

