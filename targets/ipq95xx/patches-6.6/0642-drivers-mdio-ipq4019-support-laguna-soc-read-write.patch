From e9d56e54096645981d056edcd6a771c8205c62d5 Mon Sep 17 00:00:00 2001
From: zhongjia <quic_zhongjia@quicinc.com>
Date: Sun, 23 Jun 2024 02:04:16 +0800
Subject: [PATCH] drivers: mdio-ipq4019: support laguna soc read/write

Change-Id: I93654082ea1244593d1d7fde26444f6fa57f7559
Signed-off-by: zhongjia <quic_zhongjia@quicinc.com>
---
 drivers/net/mdio/mdio-ipq4019.c | 88 +++++++++++++++++++++++++++------
 1 file changed, 73 insertions(+), 15 deletions(-)

diff --git a/drivers/net/mdio/mdio-ipq4019.c b/drivers/net/mdio/mdio-ipq4019.c
index b77d8ab2fa77..4325536d3307 100644
--- a/drivers/net/mdio/mdio-ipq4019.c
+++ b/drivers/net/mdio/mdio-ipq4019.c
@@ -89,9 +89,10 @@
 #define CMN_PLL_CMN_PLL_CLK50M_62P5M_EN1	BIT(10)
 #define CMN_PLL_CMN_PLL_CLK50M_62P5M_EN2	BIT(14)
 
-#define SWITCH_REG_TYPE_MASK			GENMASK(31, 28)
+#define SWITCH_REG_TYPE_MASK			GENMASK(31, 29)
 #define SWITCH_REG_TYPE_QCA8386			0
 #define SWITCH_REG_TYPE_QCA8337			1
+#define SWITCH_REG_TYPE_QCA81XX			2
 #define SWITCH_HIGH_ADDR_DFLT			0x200
 
 enum mdio_clk_id {
@@ -115,6 +116,7 @@ struct ipq4019_mdio_data {
 	u32 (*sw_read)(struct mii_bus *bus, u32 reg);
 	void (*sw_write)(struct mii_bus *bus, u32 reg, u32 val);
 	struct clk *clk[MDIO_CLK_CNT];
+	void *i2c;
 };
 
 const char * const ppe_clk_name[] = {
@@ -416,17 +418,70 @@ int qca8386_write(struct mii_bus *bus, unsigned int reg, unsigned int val)
 	return 0;
 };
 
+static inline void qca81xx_split_addr(u32 regaddr, u16 *reg_low, u16 *reg_mid,
+					u16 *reg_high)
+{
+	*reg_low = (regaddr & 0xc) << 1;
+
+	*reg_mid = regaddr >> 4 & 0xffff;
+
+	*reg_high = ((regaddr >> 20 & 0xf) << 1) | BIT(0);
+}
+
+static u32 qca81xx_read(struct mii_bus *bus, u32 reg)
+{
+	u16 reg_low, reg_mid, reg_high;
+	u16 lo, hi;
+	u32 addr;
+
+	addr = FIELD_GET(GENMASK(28, 24), reg);
+	qca81xx_split_addr(reg, &reg_low, &reg_mid, &reg_high);
+	/*write ahb address bit4~bit23*/
+	__mdiobus_write(bus, addr, reg_high & 0x1f, reg_mid);
+	udelay(100);
+	/*write ahb address bit0~bit3 and read low 16bit data*/
+	lo = __mdiobus_read(bus, addr, reg_low);
+	/*write ahb address bit0~bit3 and read high 16 bit data*/
+	hi = __mdiobus_read(bus, addr, (reg_low + 4));
+
+	return (hi << 16) | lo;
+}
+
+static void qca81xx_write(struct mii_bus *bus, u32 reg, u32 val)
+{
+	u16 reg_low, reg_mid, reg_high;
+	u16 lo, hi;
+	u32 addr;
+
+	addr = FIELD_GET(GENMASK(28, 24), reg);
+
+	qca81xx_split_addr(reg, &reg_low, &reg_mid, &reg_high);
+	lo = val & 0xffff;
+	hi = (u16)(val >> 16);
+
+	/*write ahb address bit4~bit23*/
+	__mdiobus_write(bus, addr, reg_high & 0x1f, reg_mid);
+	udelay(100);
+	/*write ahb address bit0~bit3 and write low 16 bit data*/
+	__mdiobus_write(bus, addr, reg_low, lo);
+	/*write ahb address bit0~bit3 and write high 16 bit data*/
+	__mdiobus_write(bus, addr, (reg_low + 4), hi);
+}
+
 u32 ipq_mii_read(struct mii_bus *mii_bus, u32 reg)
 {
 	u32 val = 0xffffffff;
 	switch (FIELD_GET(SWITCH_REG_TYPE_MASK, reg)) {
-		case SWITCH_REG_TYPE_QCA8337:
-			val = qca8337_read(mii_bus, reg);
-			break;
-		case SWITCH_REG_TYPE_QCA8386:
-		default:
-			val = qca8386_read(mii_bus, reg);
-			break;
+	case SWITCH_REG_TYPE_QCA81XX:
+		val = qca81xx_read(mii_bus, reg);
+		break;
+	case SWITCH_REG_TYPE_QCA8337:
+		val = qca8337_read(mii_bus, reg);
+		break;
+	case SWITCH_REG_TYPE_QCA8386:
+	default:
+		val = qca8386_read(mii_bus, reg);
+		break;
 	}
 
 	return val;
@@ -435,13 +490,16 @@ u32 ipq_mii_read(struct mii_bus *mii_bus, u32 reg)
 void ipq_mii_write(struct mii_bus *mii_bus, u32 reg, u32 val)
 {
 	switch (FIELD_GET(SWITCH_REG_TYPE_MASK, reg)) {
-		case SWITCH_REG_TYPE_QCA8337:
-			qca8337_write(mii_bus, reg, val);
-			break;
-		case SWITCH_REG_TYPE_QCA8386:
-		default:
-			qca8386_write(mii_bus, reg, val);
-			break;
+	case SWITCH_REG_TYPE_QCA81XX:
+		qca81xx_write(mii_bus, reg, val);
+		break;
+	case SWITCH_REG_TYPE_QCA8337:
+		qca8337_write(mii_bus, reg, val);
+		break;
+	case SWITCH_REG_TYPE_QCA8386:
+	default:
+		qca8386_write(mii_bus, reg, val);
+		break;
 	}
 }
 
-- 
2.34.1

