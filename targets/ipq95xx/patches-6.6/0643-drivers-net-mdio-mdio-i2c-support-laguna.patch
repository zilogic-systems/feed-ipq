From 52dd5c4f07ae333fd354d0b97f769e0afe962d47 Mon Sep 17 00:00:00 2001
From: zhongjia <quic_zhongjia@quicinc.com>
Date: Wed, 8 May 2024 01:22:06 +0800
Subject: [PATCH] drivers: net: mdio: mdio-i2c support laguna

Change-Id: I176be15061440d2558e9722fc4c7fb4a6a118d30
Signed-off-by: zhongjia <quic_zhongjia@quicinc.com>
---
 drivers/net/mdio/mdio-i2c.c   | 197 ++++++++++++++++++++++++++++++++++
 include/linux/mdio/mdio-i2c.h |  14 +++
 2 files changed, 211 insertions(+)

diff --git a/drivers/net/mdio/mdio-i2c.c b/drivers/net/mdio/mdio-i2c.c
index 87393ab8eb8e..ce2e14dc3466 100644
--- a/drivers/net/mdio/mdio-i2c.c
+++ b/drivers/net/mdio/mdio-i2c.c
@@ -14,6 +14,7 @@
 #include <linux/mdio/mdio-i2c.h>
 #include <linux/phy.h>
 #include <linux/sfp.h>
+#include <linux/bitfield.h>
 
 /*
  * I2C bus addresses 0x50 and 0x51 are normally an EEPROM, which is
@@ -381,6 +382,199 @@ static int i2c_mii_init_rollball(struct i2c_adapter *i2c)
 		return 0;
 }
 
+/*qcom SFP PHY device addr is 0x1d and PHY addr is 0x4c*/
+#define TO_QCOM_SFP_PHY_ADDR(phy_id)		(phy_id + 0x2f)
+
+static int qcom_i2c_mii_read_c22(struct mii_bus *bus, int phy_id, int reg)
+{
+	struct i2c_msg msgs[2];
+	u8 data[2], addr;
+	int bus_addr, ret;
+	struct qcom_mdio_i2c_data *priv = bus->priv;
+
+	if (phy_id == 0x10 || phy_id == 0x11)
+		bus_addr = i2c_mii_phy_addr(phy_id);
+	else
+		bus_addr = TO_QCOM_SFP_PHY_ADDR(phy_id);
+	addr = reg;
+	msgs[0].addr = bus_addr;
+	msgs[0].flags = 0;
+	msgs[0].len = 1;
+	msgs[0].buf = &addr;
+	msgs[1].addr = bus_addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = sizeof(data);
+	msgs[1].buf = data;
+
+	ret = i2c_transfer(priv->i2c, msgs, ARRAY_SIZE(msgs));
+	if (ret != ARRAY_SIZE(msgs))
+		return 0xffff;
+
+	return data[0] << 8 | data[1];
+}
+
+static int qcom_i2c_mii_write_c22(struct mii_bus *bus, int phy_id, int reg,
+				u16 val)
+{
+	struct i2c_msg msg;
+	int ret;
+	u8 data[3], *p;
+	struct qcom_mdio_i2c_data *priv = bus->priv;
+
+	p = data;
+	*p++ = reg;
+	*p++ = val >> 8;
+	*p++ = val;
+
+	if (phy_id == 0x10 || phy_id == 0x11)
+		msg.addr = i2c_mii_phy_addr(phy_id);
+	else
+		msg.addr = TO_QCOM_SFP_PHY_ADDR(phy_id);
+	msg.flags = 0;
+	msg.len = p - data;
+	msg.buf = data;
+
+	ret = i2c_transfer(priv->i2c, &msg, 1);
+
+	return ret < 0 ? ret : 0;
+}
+
+static int qcom_i2c_mmd_read_c45(struct mii_bus *bus, int phy_id, int devad,
+				int reg)
+{
+	struct i2c_msg msgs[2];
+	u8 tx[4], data[2], *p;
+	int bus_addr, ret;
+	struct qcom_mdio_i2c_data *priv = bus->priv;
+
+	p = tx;
+	*p++ = 0x60 | devad;
+	*p++ = reg >> 8;
+	*p++ = reg;
+
+	bus_addr = TO_QCOM_SFP_PHY_ADDR(phy_id);
+	msgs[0].addr = bus_addr;
+	msgs[0].flags = 0;
+	msgs[0].len = sizeof(tx);
+	msgs[0].buf = tx;
+	msgs[1].addr = bus_addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = sizeof(data);
+	msgs[1].buf = data;
+
+	ret = i2c_transfer(priv->i2c, msgs, ARRAY_SIZE(msgs));
+	if (ret != ARRAY_SIZE(msgs))
+		return 0xffff;
+
+	return data[0] << 8 | data[1];
+}
+
+static int qcom_i2c_mmd_write_c45(struct mii_bus *bus, int phy_id,
+	int devad, int reg, u16 val)
+{
+	u8 tx[4], tx1[3], *p;
+	struct i2c_msg msgs[2];
+	int bus_addr, ret;
+	struct qcom_mdio_i2c_data *priv = bus->priv;
+
+	p = tx;
+	*p++ = 0x60 | devad;
+	*p++ = reg >> 8;
+	*p++ = reg;
+
+	p = tx1;
+	*p++ = 0x40 | devad;
+	*p++ = val >> 8;
+	*p++ = val;
+
+	bus_addr = TO_QCOM_SFP_PHY_ADDR(phy_id);
+	msgs[0].addr = bus_addr;
+	msgs[0].flags = 0;
+	msgs[0].len = sizeof(tx);
+	msgs[0].buf = tx;
+	msgs[1].addr = bus_addr;
+	msgs[1].flags = 0;
+	msgs[1].len = sizeof(tx1);
+	msgs[1].buf = tx1;
+
+	ret = i2c_transfer(priv->i2c, msgs, ARRAY_SIZE(msgs));
+
+	return ret < 0 ? ret : 0;
+}
+
+u32 qcom_i2c_mii_read_soc(struct mii_bus *bus, u32 reg)
+{
+	struct i2c_msg msgs[2];
+	int bus_addr, ret, addr;
+	u8 data[4] = { 0 };
+	u8 tx[5] = {0xa0, (reg >> 24) & 0xff, (reg >> 16) & 0xff, (reg >> 8) & 0xff, reg & 0xff};
+	struct qcom_mdio_i2c_data *priv = bus->priv;
+
+	addr = FIELD_GET(GENMASK(28, 24), reg);
+	bus_addr = TO_QCOM_SFP_PHY_ADDR(addr);
+	msgs[0].addr = bus_addr;
+	msgs[0].flags = 0;
+	msgs[0].len = sizeof(tx);
+	msgs[0].buf = tx;
+	msgs[1].addr = bus_addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = sizeof(data);
+	msgs[1].buf = data;
+
+	ret = i2c_transfer(priv->i2c, msgs, ARRAY_SIZE(msgs));
+	if (ret != ARRAY_SIZE(msgs))
+		return 0xffffffff;
+
+	return ((data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3]);
+}
+
+void qcom_i2c_mii_write_soc(struct mii_bus *bus, u32 reg, u32 val)
+{
+	struct i2c_msg msgs[2];
+	int bus_addr, addr;
+	u8 tx[5] = {0x20, (reg >> 24) & 0xff, (reg >> 16) & 0xff, (reg >> 8) & 0xff, reg & 0xff};
+	u8 tx1[5] = {0, (val >> 24) & 0xff, (val >> 16) & 0xff, (val >> 8) & 0xff, val & 0xff};
+	struct qcom_mdio_i2c_data *priv = bus->priv;
+
+	addr = FIELD_GET(GENMASK(28, 24), reg);
+	bus_addr = TO_QCOM_SFP_PHY_ADDR(addr);
+	msgs[0].addr = bus_addr;
+	msgs[0].flags = 0;
+	msgs[0].len = sizeof(tx);
+	msgs[0].buf = tx;
+	msgs[1].addr = bus_addr;
+	msgs[1].flags = 0;
+	msgs[1].len = sizeof(tx1);
+	msgs[1].buf = tx1;
+
+	i2c_transfer(priv->i2c, msgs, ARRAY_SIZE(msgs));
+}
+
+static struct mii_bus *qcom_mdio_i2c_alloc(struct device *dev,
+	struct i2c_adapter *i2c)
+{
+	struct qcom_mdio_i2c_data *priv;
+	struct mii_bus *mii;
+
+	mii = devm_mdiobus_alloc_size(dev, sizeof(*priv));
+	if (!mii)
+		return ERR_PTR(-ENOMEM);
+
+	snprintf(mii->id, MII_BUS_ID_SIZE, "i2c:%s", dev_name(dev));
+	mii->parent = dev;
+	priv = mii->priv;
+
+	mii->read = qcom_i2c_mii_read_c22;
+	mii->write = qcom_i2c_mii_write_c22;
+	mii->read_c45 = qcom_i2c_mmd_read_c45;
+	mii->write_c45 = qcom_i2c_mmd_write_c45;
+	priv->i2c = i2c;
+	priv->sw_read = qcom_i2c_mii_read_soc;
+	priv->sw_write = qcom_i2c_mii_write_soc;
+
+	return mii;
+}
+
 struct mii_bus *mdio_i2c_alloc(struct device *parent, struct i2c_adapter *i2c,
 			       enum mdio_i2c_proto protocol)
 {
@@ -390,6 +584,9 @@ struct mii_bus *mdio_i2c_alloc(struct device *parent, struct i2c_adapter *i2c,
 	if (!i2c_check_functionality(i2c, I2C_FUNC_I2C))
 		return ERR_PTR(-EINVAL);
 
+	if (protocol == MIDO_I2C_QCOM)
+		return qcom_mdio_i2c_alloc(parent, i2c);
+
 	mii = mdiobus_alloc();
 	if (!mii)
 		return ERR_PTR(-ENOMEM);
diff --git a/include/linux/mdio/mdio-i2c.h b/include/linux/mdio/mdio-i2c.h
index 65b550a6fc32..9e45290d3531 100644
--- a/include/linux/mdio/mdio-i2c.h
+++ b/include/linux/mdio/mdio-i2c.h
@@ -16,6 +16,20 @@ enum mdio_i2c_proto {
 	MDIO_I2C_MARVELL_C22,
 	MDIO_I2C_C45,
 	MDIO_I2C_ROLLBALL,
+	MIDO_I2C_QCOM,
+};
+
+struct qcom_mdio_i2c_data {
+	void __iomem	*membase[2];
+	void __iomem *eth_ldo_rdy[3];
+	int clk_div;
+	bool force_c22;
+	struct gpio_descs *reset_gpios;
+	void (*preinit)(struct mii_bus *bus);
+	u32 (*sw_read)(struct mii_bus *bus, u32 reg);
+	void (*sw_write)(struct mii_bus *bus, u32 reg, u32 val);
+	void *clk[5];
+	struct i2c_adapter *i2c;
 };
 
 struct mii_bus *mdio_i2c_alloc(struct device *parent, struct i2c_adapter *i2c,
-- 
2.34.1

