From 563dd0cfa6863ced30fc3bad0a09e51720aef69e Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Fri, 13 Sep 2024 14:54:36 +0530
Subject: [PATCH] module: arm: Allocate core sections from vmalloc region

Due to the commit https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ac3b43283923440900b4f36ca5f9f0b1ca43b70e
modules are split into types and each type is allocated memory.
In some cases, some core sections will get allocated to VMALLOC region
and remaining sections get allocated to MODULE region.

This will cause relocation failure if some relocatable section needs to
relocate between MODULE region and VMALLOC region in systems with more
than 2GB VMALLOC space as relocation expects the offets to lie within
+/- 1GB range.

To avoid this, allocate all core sections from VMALLOC region only for
ARM. Init sections will use the existing allocation method.

Change-Id: I6f008563b290efabf688b38735c974d7527001f1
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 arch/arm/kernel/module.c |  7 +++++++
 kernel/module/main.c     | 15 ++++++++++++++-
 2 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/arch/arm/kernel/module.c b/arch/arm/kernel/module.c
index e8050d236f2a..dc772171d0c2 100644
--- a/arch/arm/kernel/module.c
+++ b/arch/arm/kernel/module.c
@@ -52,6 +52,13 @@ void *module_alloc(unsigned long size)
 				GFP_KERNEL, PAGE_KERNEL_EXEC, 0, NUMA_NO_NODE,
 				__builtin_return_address(0));
 }
+
+void *module_alloc_core(unsigned long size)
+{
+	return __vmalloc_node_range(size, 1,  VMALLOC_START, VMALLOC_END,
+				GFP_KERNEL, PAGE_KERNEL_EXEC, 0, NUMA_NO_NODE,
+				__builtin_return_address(0));
+}
 #endif
 
 bool module_init_section(const char *name)
diff --git a/kernel/module/main.c b/kernel/module/main.c
index 3f331efad896..e6fe63a42a85 100644
--- a/kernel/module/main.c
+++ b/kernel/module/main.c
@@ -1210,11 +1210,24 @@ static bool mod_mem_use_vmalloc(enum mod_mem_type type)
 		mod_mem_type_is_core_data(type);
 }
 
+void *__weak module_alloc_core(unsigned int size)
+{
+	return module_alloc(size);
+}
+
+static void *module_alloc_by_type(unsigned int size, enum mod_mem_type type)
+{
+	if (mod_mem_type_is_init(type))
+		return module_alloc(size);
+	else
+		return module_alloc_core(size);
+}
+
 static void *module_memory_alloc(unsigned int size, enum mod_mem_type type)
 {
 	if (mod_mem_use_vmalloc(type))
 		return vzalloc(size);
-	return module_alloc(size);
+	return module_alloc_by_type(size, type);
 }
 
 static void module_memory_free(void *ptr, enum mod_mem_type type)
-- 
2.34.1

