From 92ecde12ad8d518399a741fcd7becfad4783abc5 Mon Sep 17 00:00:00 2001
From: Hariharan K <quic_harihk@quicinc.com>
Date: Fri, 20 Sep 2024 15:34:45 +0530
Subject: [PATCH] firmware: scm: Support for reading and clearing HLOS
 MILESTONE bit

The BIT 12 of the TCSR_BOOT_MISC_DETECT register is used as HLOS
milestone bit for IPQ54xx platform sysupgrade feature. Adding
support to read and clear this bit via sysfs.

Change-Id: I58632017465f6e805bba4edfd615a423446b124d
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
---
 drivers/firmware/qcom_scm.c            | 60 ++++++++++++++++++++++++++
 include/linux/firmware/qcom/qcom_scm.h |  1 +
 2 files changed, 61 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index bebe332b50e5..65a1a914eb24 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -3124,6 +3124,65 @@ int qcom_scm_sdi_disable(struct device *dev)
 }
 EXPORT_SYMBOL_GPL(qcom_scm_sdi_disable);
 
+static ssize_t hlos_done_show(struct device *device,
+			      struct device_attribute *attr,
+			      char *buf)
+{
+	u32 val;
+	int ret;
+
+	ret = qcom_scm_io_readl(__scm->dload_mode_addr, &val);
+	if (ret) {
+		dev_err(__scm->dev,
+			"dload secure read failed with err: %d\n", ret);
+		return -EINVAL;
+	}
+
+	return sysfs_emit(buf, "%d\n", (val & HLOS_MILESTONE_BIT) ? 1 : 0);
+}
+
+static ssize_t hlos_done_store(struct device *device,
+			       struct device_attribute *attr,
+			       const char *buf, size_t count)
+{
+	unsigned long input;
+	u32 val;
+	int ret;
+
+	if (kstrtoul(buf, 0, &input))
+		return -EINVAL;
+
+	if (input != 0)
+		return -EINVAL;
+
+	ret = qcom_scm_io_readl(__scm->dload_mode_addr, &val);
+	if (ret) {
+		dev_err(__scm->dev,
+			"dload secure read failed with err: %d\n", ret);
+		return -EINVAL;
+	}
+
+	val &= (~HLOS_MILESTONE_BIT);
+
+	ret = qcom_scm_io_writel(__scm->dload_mode_addr, val);
+	if (ret) {
+		dev_err(__scm->dev,
+			"Clearing HLOS milestone bit failed with err: %d\n", ret);
+		return -EINVAL;
+	}
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(hlos_done);
+
+static struct attribute *qcom_firmware_attrs[] = {
+	&dev_attr_hlos_done.attr,
+	NULL,
+};
+
+ATTRIBUTE_GROUPS(qcom_firmware);
+
 static int qcom_scm_probe(struct platform_device *pdev)
 {
 	struct qcom_scm *scm;
@@ -3247,6 +3306,7 @@ static struct platform_driver qcom_scm_driver = {
 	.driver = {
 		.name	= "qcom_scm",
 		.of_match_table = qcom_scm_dt_match,
+		.dev_groups = qcom_firmware_groups,
 		.suppress_bind_attrs = true,
 	},
 	.probe = qcom_scm_probe,
diff --git a/include/linux/firmware/qcom/qcom_scm.h b/include/linux/firmware/qcom/qcom_scm.h
index 6e422f331386..86fc5a4eec12 100644
--- a/include/linux/firmware/qcom/qcom_scm.h
+++ b/include/linux/firmware/qcom/qcom_scm.h
@@ -25,6 +25,7 @@
 #define QTI_TZ_LOG_NO_UPDATE		-6
 #define QTI_SCM_SVC_FUSE		0x8
 #define QTI_TRYBIT			BIT(12)
+#define HLOS_MILESTONE_BIT		BIT(12)
 
 #define MAX_MSM_ICE_KEY_LUT_SIZE	32
 #define DATA_COTEXT_LEN			128
-- 
2.34.1

