From 7d9c477e08ece79aedc3e82842d4d61cc08046fe Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Fri, 27 Sep 2024 20:47:42 +0530
Subject: [PATCH] firmware: qcom_scm: Add support to clear milestone bit

Add support to clear milestone bit for ipq54xx platform.

Change-Id: Ib010a465dd8eec327de74697447c2f22117bcb1a
Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
---
 drivers/firmware/qcom_scm.c | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index bebe332b50e5..b49d3bb8262c 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -80,6 +80,7 @@ static const u8 qcom_scm_cpu_warm_bits[QCOM_SCM_BOOT_MAX_CPUS] = {
 #define QCOM_SMC_WAITQ_FLAG_WAKE_ALL	BIT(1)
 
 #define QCOM_DLOAD_MASK		GENMASK(5, 4)
+#define QCOM_MILESTONE_MASK	BIT(12)
 enum qcom_dload_mode {
 	QCOM_DLOAD_NODUMP	= 0,
 	QCOM_DLOAD_FULLDUMP	= 1,
@@ -656,6 +657,26 @@ static void qcom_scm_set_abnormal_magic(bool enable)
 			val & ~(QCOM_SCM_ABNORMAL_MAGIC));
 }
 
+static void qcom_scm_clr_milestone_bit(void)
+{
+	bool avail;
+	int ret = 0;
+
+	if (!of_device_is_compatible(__scm->dev->of_node, "qcom,scm-ipq5424"))
+		return;
+
+	if (__scm->dload_mode_addr)
+		ret = qcom_scm_io_rmw(__scm->dload_mode_addr,
+				      QCOM_MILESTONE_MASK,
+				      FIELD_PREP(QCOM_MILESTONE_MASK, 0));
+	else
+		dev_err(__scm->dev,
+			"No available mechanism for clearing milestone bit\n");
+
+	if (ret)
+		dev_err(__scm->dev, "failed to clear milestone bit: %d\n", ret);
+}
+
 static void qcom_scm_set_download_mode(bool enable)
 {
 	u32 val = enable ? QCOM_DLOAD_FULLDUMP : QCOM_DLOAD_NODUMP;
@@ -3200,6 +3221,8 @@ static int qcom_scm_probe(struct platform_device *pdev)
 
 	__get_convention();
 
+	qcom_scm_clr_milestone_bit();
+
 	/*
 	 * If requested enable "download mode", from this point on warmboot
 	 * will cause the boot stages to enter download mode, unless
-- 
2.34.1

