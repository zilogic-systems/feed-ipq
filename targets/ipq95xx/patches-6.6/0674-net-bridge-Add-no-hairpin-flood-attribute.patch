From 2c8b541fe19d51a4b08766ef545da4057e6a4333 Mon Sep 17 00:00:00 2001
From: Ken Zhu <quic_guigenz@quicinc.com>
Date: Mon, 6 May 2024 19:21:26 -0700
Subject: [PATCH] [net][bridge] Add no hairpin flood attribute

Add no hairpin flood attribute to the bridge port,
when it is true, don't flood mcast/bcast to the
originated port even hairpin is enabled.

Change-Id: I6a6ad4aa487d9ab01a61749481fc361179431d72
Signed-off-by: Ken Zhu <quic_guigenz@quicinc.com>
---
 include/linux/if_bridge.h |  1 +
 net/bridge/br_forward.c   | 33 +++++++++++----------------------
 net/bridge/br_sysfs_if.c  |  2 ++
 3 files changed, 14 insertions(+), 22 deletions(-)

diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index 4798e10f0d5c..80d567a425f6 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -63,6 +63,7 @@ struct br_ip_list {
 #define BR_NEIGH_VLAN_SUPPRESS	BIT(23)
 #define BR_BPDU_FILTER		BIT(24)
 #define BR_UPSTREAM_PORT	BIT(25)
+#define BR_NO_HAIRPIN_FLOOD	BIT(26)
 
 #define BR_DEFAULT_AGEING_TIME	(300 * HZ)
 
diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
index f5277442afaa..ce97282d1d54 100644
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -25,28 +25,17 @@ static inline int should_deliver(const struct net_bridge_port *p,
 
 	vg = nbp_vlan_group_rcu(p);
 
-	if ((skb->dev != p->dev) &&
-	    br_allowed_egress(vg, skb) && p->state == BR_STATE_FORWARDING &&
-	    nbp_switchdev_allowed_egress(p, skb) &&
-	    !br_skb_isolated(p, skb)) {
-		return true;
-	}
-
-	if ((skb->dev == p->dev) &&
-	    (p->flags & BR_HAIRPIN_MODE) &&
-	    br_allowed_egress(vg, skb) && p->state == BR_STATE_FORWARDING) {
-
-		/* Allow hairpin only on WLAN netdevices.
-		 * For ethernet interfaces, hairpin not allowed
-		 * due to issue with switchdevs. */
-		if ( skb->dev->ieee80211_ptr == NULL) {
-			return false;
-		}
-
-		return true;
-	}
-
-	return false;
+	/*
+	 * When hairpin enabled, don't allow multicast go back
+	 * to the original device that disabled hairpin flood.
+	 */
+	return (((p->flags & BR_HAIRPIN_MODE)
+		&& (!(p->flags & BR_NO_HAIRPIN_FLOOD)
+			|| !is_multicast_ether_addr(eth_hdr(skb)->h_dest)))
+		|| (skb->dev != p->dev)) &&
+		br_allowed_egress(vg, skb) && (p->state == BR_STATE_FORWARDING) &&
+		nbp_switchdev_allowed_egress(p, skb) &&
+		!br_skb_isolated(p, skb);
 }
 
 int br_dev_queue_push_xmit(struct net *net, struct sock *sk, struct sk_buff *skb)
diff --git a/net/bridge/br_sysfs_if.c b/net/bridge/br_sysfs_if.c
index 19bf5a240bcd..446b4b98f6bb 100644
--- a/net/bridge/br_sysfs_if.c
+++ b/net/bridge/br_sysfs_if.c
@@ -265,6 +265,7 @@ BRPORT_ATTR_FLAG(broadcast_flood, BR_BCAST_FLOOD);
 BRPORT_ATTR_FLAG(neigh_suppress, BR_NEIGH_SUPPRESS);
 BRPORT_ATTR_FLAG(isolated, BR_ISOLATED);
 BRPORT_ATTR_FLAG(bpdu_filter, BR_BPDU_FILTER);
+BRPORT_ATTR_FLAG(no_hairpin_flood, BR_NO_HAIRPIN_FLOOD);
 
 #ifdef CONFIG_BRIDGE_IGMP_SNOOPING
 static ssize_t show_multicast_router(struct net_bridge_port *p, char *buf)
@@ -323,6 +324,7 @@ static const struct brport_attribute *brport_attrs[] = {
 	&brport_attr_upstream_port,
 	&brport_attr_mac_lrn_limit,
 	&brport_attr_mac_lrn_cnt,
+	&brport_attr_no_hairpin_flood,
 	NULL
 };
 
-- 
2.34.1

