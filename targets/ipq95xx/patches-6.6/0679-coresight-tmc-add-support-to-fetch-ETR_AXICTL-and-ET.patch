From 33e9ad4a8eceb14348d57129bb12ac084f738774 Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Mon, 14 Oct 2024 11:04:51 +0530
Subject: [PATCH] coresight: tmc: add support to fetch ETR_AXICTL and ETR_FFCR
 from DT

Update the registers ETR_AXICTL and ETR_FFCR if it is
provided in DT.

Change-Id: Ie58cea39ff2ee35e5eb736c3f632477d20fc350a
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 .../hwtracing/coresight/coresight-tmc-core.c  |  2 +
 .../hwtracing/coresight/coresight-tmc-etr.c   | 44 ++++++++++++-------
 drivers/hwtracing/coresight/coresight-tmc.h   |  2 +
 3 files changed, 31 insertions(+), 17 deletions(-)

diff --git a/drivers/hwtracing/coresight/coresight-tmc-core.c b/drivers/hwtracing/coresight/coresight-tmc-core.c
index 141e842e3c62..69b599633822 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-core.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-core.c
@@ -541,6 +541,8 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 		idr_init(&drvdata->idr);
 		mutex_init(&drvdata->idr_mutex);
 		dev_list = &etr_devs;
+		of_property_read_u32(dev->of_node, "etr-axictl", &drvdata->etr_axictl);
+		of_property_read_u32(dev->of_node, "etr-ffcr", &drvdata->etr_ffcr);
 		drvdata->panic_blk.notifier_call = tmc_etr_panic_handler;
 		ret = atomic_notifier_chain_register(&panic_notifier_list, &drvdata->panic_blk);
 		if (ret) {
diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index 2c3fabb559be..422e9e314768 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -1045,21 +1045,26 @@ static int __tmc_etr_enable_hw(struct tmc_drvdata *drvdata)
 	writel_relaxed(etr_buf->size / 4, drvdata->base + TMC_RSZ);
 	writel_relaxed(TMC_MODE_CIRCULAR_BUFFER, drvdata->base + TMC_MODE);
 
-	axictl = readl_relaxed(drvdata->base + TMC_AXICTL);
-	axictl &= ~TMC_AXICTL_CLEAR_MASK;
-	axictl |= TMC_AXICTL_PROT_CTL_B1;
-	axictl |= TMC_AXICTL_WR_BURST(drvdata->max_burst_size);
-	axictl |= TMC_AXICTL_AXCACHE_OS;
-
-	if (tmc_etr_has_cap(drvdata, TMC_ETR_AXI_ARCACHE)) {
-		axictl &= ~TMC_AXICTL_ARCACHE_MASK;
-		axictl |= TMC_AXICTL_ARCACHE_OS;
-	}
+	if (drvdata->etr_axictl) {
+		writel_relaxed(drvdata->etr_axictl, drvdata->base + TMC_AXICTL);
+	} else {
+		axictl = readl_relaxed(drvdata->base + TMC_AXICTL);
+		axictl &= ~TMC_AXICTL_CLEAR_MASK;
+		axictl |= TMC_AXICTL_PROT_CTL_B1;
+		axictl |= TMC_AXICTL_WR_BURST(drvdata->max_burst_size);
+		axictl |= TMC_AXICTL_AXCACHE_OS;
+
+		if (tmc_etr_has_cap(drvdata, TMC_ETR_AXI_ARCACHE)) {
+			axictl &= ~TMC_AXICTL_ARCACHE_MASK;
+			axictl |= TMC_AXICTL_ARCACHE_OS;
+		}
+
+		if (etr_buf->mode == ETR_MODE_ETR_SG)
+			axictl |= TMC_AXICTL_SCT_GAT_MODE;
 
-	if (etr_buf->mode == ETR_MODE_ETR_SG)
-		axictl |= TMC_AXICTL_SCT_GAT_MODE;
+		writel_relaxed(axictl, drvdata->base + TMC_AXICTL);
+	}
 
-	writel_relaxed(axictl, drvdata->base + TMC_AXICTL);
 	tmc_write_dba(drvdata, etr_buf->hwaddr);
 	/*
 	 * If the TMC pointers must be programmed before the session,
@@ -1073,10 +1078,15 @@ static int __tmc_etr_enable_hw(struct tmc_drvdata *drvdata)
 		writel_relaxed(sts, drvdata->base + TMC_STS);
 	}
 
-	writel_relaxed(TMC_FFCR_EN_FMT | TMC_FFCR_EN_TI |
-		       TMC_FFCR_FON_FLIN | TMC_FFCR_FON_TRIG_EVT |
-		       TMC_FFCR_TRIGON_TRIGIN,
-		       drvdata->base + TMC_FFCR);
+	if (drvdata->etr_ffcr) {
+		writel_relaxed(drvdata->etr_ffcr, drvdata->base + TMC_FFCR);
+	} else {
+		writel_relaxed(TMC_FFCR_EN_FMT | TMC_FFCR_EN_TI |
+			       TMC_FFCR_FON_FLIN | TMC_FFCR_FON_TRIG_EVT |
+			       TMC_FFCR_TRIGON_TRIGIN,
+			       drvdata->base + TMC_FFCR);
+	}
+
 	writel_relaxed(drvdata->trigger_cntr, drvdata->base + TMC_TRG);
 	tmc_enable_hw(drvdata);
 
diff --git a/drivers/hwtracing/coresight/coresight-tmc.h b/drivers/hwtracing/coresight/coresight-tmc.h
index 15728e9a1f67..36f4d17d2251 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.h
+++ b/drivers/hwtracing/coresight/coresight-tmc.h
@@ -217,6 +217,8 @@ struct tmc_drvdata {
 	u32			rsvd_size;
 	struct notifier_block	panic_blk;
 	struct notifier_block	ssr_blk;
+	u32			etr_axictl;
+	u32			etr_ffcr;
 };
 
 struct etr_buf_operations {
-- 
2.34.1

