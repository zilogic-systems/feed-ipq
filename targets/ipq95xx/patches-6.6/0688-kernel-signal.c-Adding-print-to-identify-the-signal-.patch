From e1bcd1498c4dcb667ade548956c0f3350ae71575 Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Thu, 24 Oct 2024 12:39:43 +0530
Subject: [PATCH] kernel/signal.c: Adding print to identify the signal sender

To identify which process has triggered a SIGINT or
SIGTERM or SIGKILL, a print has been added and a
separate bootarg 'sig_debug' is introduced to enable it.

Change-Id: I582906978dd63e790259f41025994c2ec54a806c
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 kernel/signal.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/kernel/signal.c b/kernel/signal.c
index 09019017d669..228765c6b573 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -1301,6 +1301,14 @@ static int __init setup_print_fatal_signals(char *str)
 
 __setup("print-fatal-signals=", setup_print_fatal_signals);
 
+static bool sig_debug;
+static int __init sig_debug_setup(char *__unused)
+{
+	sig_debug = true;
+	return 1;
+}
+__setup("sig_debug", sig_debug_setup);
+
 int do_send_sig_info(int sig, struct kernel_siginfo *info, struct task_struct *p,
 			enum pid_type type)
 {
@@ -1308,6 +1316,11 @@ int do_send_sig_info(int sig, struct kernel_siginfo *info, struct task_struct *p
 	int ret = -ESRCH;
 
 	if (lock_task_sighand(p, &flags)) {
+		if ((sig_debug && (sig == SIGKILL || sig == SIGTERM ||
+				   sig == SIGINT)))
+			pr_info("The process %d: %s sending signal %d to the process %d: %s\n",
+				task_pid_nr(current), current->comm, sig,
+				p->pid, p->comm);
 		ret = send_signal_locked(sig, info, p, type);
 		unlock_task_sighand(p, &flags);
 	}
-- 
2.34.1

