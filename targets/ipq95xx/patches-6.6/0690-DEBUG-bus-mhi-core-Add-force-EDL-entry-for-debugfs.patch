From 82052823af8b84ab13ecad4703386318ff4cbc89 Mon Sep 17 00:00:00 2001
From: Gokul Sriram Palanisamy <quic_gokulsri@quicinc.com>
Date: Thu, 24 Oct 2024 05:11:56 +0530
Subject: [PATCH] DEBUG: bus: mhi: core: Add force EDL entry for debugfs

Forcing the device to enter Emergency Download Mode involves
writing the 0xEDEDEDED cookie to the channel 91 doorbell register
and forcing an SOC reset afterwards. Allow users of the MHI bus
to exercise the same using a debugfs entry.

Change-Id: Ia53334a7b3e984c3d4367c4445c1c03c8ec04cc4
Signed-off-by: Gokul Sriram Palanisamy <quic_gokulsri@quicinc.com>
---
 drivers/bus/mhi/host/debugfs.c  | 40 +++++++++++++++++++++++++++++++++
 drivers/bus/mhi/host/init.c     |  3 +++
 drivers/bus/mhi/host/internal.h |  1 +
 include/linux/mhi.h             |  2 ++
 4 files changed, 46 insertions(+)

diff --git a/drivers/bus/mhi/host/debugfs.c b/drivers/bus/mhi/host/debugfs.c
index cfec7811dfbb..ac4bee3a5220 100644
--- a/drivers/bus/mhi/host/debugfs.c
+++ b/drivers/bus/mhi/host/debugfs.c
@@ -293,6 +293,32 @@ static ssize_t mhi_debugfs_timeout_ms_write(struct file *file,
 	return count;
 }
 
+static int mhi_debugfs_force_edl_show(struct seq_file *m, void *d)
+{
+	return 0;
+}
+
+static ssize_t mhi_debugfs_force_edl_write(struct file *file,
+					   const char __user *ubuf,
+					   size_t count, loff_t *ppos)
+{
+	struct seq_file	*m = file->private_data;
+	struct mhi_controller *mhi_cntrl = m->private;
+	u32 force_edl;
+
+	if (kstrtou32_from_user(ubuf, count, 0, &force_edl))
+		return -EINVAL;
+
+	if (force_edl == 1) {
+		mhi_write_db(mhi_cntrl, mhi_cntrl->edl_db, 0xEDEDEDED);
+		mhi_write_reg(mhi_cntrl, mhi_cntrl->regs,
+			      MHI_SOC_RESET_REQ_OFFSET,
+			      MHI_SOC_RESET_REQ);
+	}
+
+	return count;
+}
+
 static int mhi_debugfs_states_open(struct inode *inode, struct file *fp)
 {
 	return single_open(fp, mhi_debugfs_states_show, inode->i_private);
@@ -328,6 +354,11 @@ static int mhi_debugfs_timeout_ms_open(struct inode *inode, struct file *fp)
 	return single_open(fp, mhi_debugfs_timeout_ms_show, inode->i_private);
 }
 
+static int mhi_debugfs_force_edl_open(struct inode *inode, struct file *fp)
+{
+	return single_open(fp, mhi_debugfs_force_edl_show, inode->i_private);
+}
+
 static const struct file_operations debugfs_states_fops = {
 	.open = mhi_debugfs_states_open,
 	.release = single_release,
@@ -372,6 +403,13 @@ static const struct file_operations debugfs_timeout_ms_fops = {
 	.read = seq_read,
 };
 
+static const struct file_operations debugfs_force_edl_fops = {
+	.open = mhi_debugfs_force_edl_open,
+	.write = mhi_debugfs_force_edl_write,
+	.release = single_release,
+	.read = seq_read,
+};
+
 static struct dentry *mhi_debugfs_root;
 
 void mhi_create_debugfs(struct mhi_controller *mhi_cntrl)
@@ -394,6 +432,8 @@ void mhi_create_debugfs(struct mhi_controller *mhi_cntrl)
 			    mhi_cntrl, &debugfs_device_wake_fops);
 	debugfs_create_file("timeout_ms", 0644, mhi_cntrl->debugfs_dentry,
 			    mhi_cntrl, &debugfs_timeout_ms_fops);
+	debugfs_create_file("force_edl", 0644, mhi_cntrl->debugfs_dentry,
+			    mhi_cntrl, &debugfs_force_edl_fops);
 }
 
 void mhi_destroy_debugfs(struct mhi_controller *mhi_cntrl)
diff --git a/drivers/bus/mhi/host/init.c b/drivers/bus/mhi/host/init.c
index fbfcd3f72edc..d81ea7dd6859 100644
--- a/drivers/bus/mhi/host/init.c
+++ b/drivers/bus/mhi/host/init.c
@@ -529,6 +529,9 @@ int mhi_init_mmio(struct mhi_controller *mhi_cntrl)
 	mhi_cntrl->wake_db = base + val + (8 * MHI_DEV_WAKE_DB);
 	mhi_cntrl->wake_set = false;
 
+	/* Setup edl db */
+	mhi_cntrl->edl_db = base + val + (8 * MHI_EDL_DB);
+
 	/* Setup channel db address for each channel in tre_ring */
 	mhi_chan = mhi_cntrl->mhi_chan;
 	for (i = 0; i < mhi_cntrl->max_chan; i++, val += 8, mhi_chan++)
diff --git a/drivers/bus/mhi/host/internal.h b/drivers/bus/mhi/host/internal.h
index 721a39207c70..1895937b74b0 100644
--- a/drivers/bus/mhi/host/internal.h
+++ b/drivers/bus/mhi/host/internal.h
@@ -136,6 +136,7 @@ enum mhi_pm_state {
 #define CMD_EL_PER_RING					128
 #define PRIMARY_CMD_RING				0
 #define MHI_DEV_WAKE_DB					127
+#define MHI_EDL_DB					91
 #define MHI_MAX_MTU					0xffff
 #define MHI_RANDOM_U32_NONZERO(bmsk)			(get_random_u32_inclusive(1, bmsk))
 
diff --git a/include/linux/mhi.h b/include/linux/mhi.h
index 831d21fd2ded..a0d18308fdbf 100644
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -296,6 +296,7 @@ struct mhi_controller_config {
  * @bhi: Points to base of MHI BHI register space
  * @bhie: Points to base of MHI BHIe register space
  * @wake_db: MHI WAKE doorbell register address
+ * @edl_db: MHI EDL channel 91 doorbell register address
  * @iova_start: IOMMU starting address for data (required)
  * @iova_stop: IOMMU stop address for data (required)
  * @fw_image: Firmware image name for normal booting (optional)
@@ -386,6 +387,7 @@ struct mhi_controller {
 	void __iomem *bhi;
 	void __iomem *bhie;
 	void __iomem *wake_db;
+	void __iomem *edl_db;
 
 	dma_addr_t iova_start;
 	dma_addr_t iova_stop;
-- 
2.34.1

