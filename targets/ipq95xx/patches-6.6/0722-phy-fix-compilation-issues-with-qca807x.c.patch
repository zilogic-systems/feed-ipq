From cebd1eecc8c4d740932d2c5851923fb12de7d68e Mon Sep 17 00:00:00 2001
From: Deepak Kumar <quic_deepaku@quicinc.com>
Date: Tue, 22 Oct 2024 12:17:40 +0530
Subject: [PATCH] phy: fix compilation issues with qca807x.c

Change-Id: Ie50d4b1fc1dc5d381435894e1df4ec20253f3d2c
Signed-off-by: Deepak Kumar <quic_deepaku@quicinc.com>
---
 drivers/net/phy/phy-core.c   |  91 ++++++++++++++++++++++++++++++
 drivers/net/phy/phy_device.c | 106 +++++++++++++++++++++++++++++++++--
 include/linux/phy.h          |  68 ++++++++++++++++------
 3 files changed, 242 insertions(+), 23 deletions(-)

diff --git a/drivers/net/phy/phy-core.c b/drivers/net/phy/phy-core.c
index 966c93cbe616..a7f3206b450f 100644
--- a/drivers/net/phy/phy-core.c
+++ b/drivers/net/phy/phy-core.c
@@ -6,6 +6,9 @@
 #include <linux/phy.h>
 #include <linux/of.h>
 
+static int mmd_phy_write(struct mii_bus *bus, int phy_addr, bool is_c45,
+                         int devad, u32 regnum, u16 val);
+
 /**
  * phy_speed_to_str - Return a string representing the PHY link speed
  *
@@ -540,6 +543,18 @@ static void mmd_phy_indirect(struct mii_bus *bus, int phy_addr, int devad,
 			devad | MII_MMD_CTRL_NOINCR);
 }
 
+static int mmd_phy_read(struct mii_bus *bus, int phy_addr, bool is_c45,
+                        int devad, u32 regnum)
+{
+        if (is_c45)
+                return __mdiobus_c45_read(bus, phy_addr, devad, regnum);
+
+        mmd_phy_indirect(bus, phy_addr, devad, regnum);
+        /* Read the content of the MMD's selected register */
+        return __mdiobus_read(bus, phy_addr, MII_MMD_DATA);
+}
+
+
 /**
  * __phy_read_mmd - Convenience function for reading a register
  * from an MMD on a given PHY.
@@ -595,6 +610,50 @@ int phy_read_mmd(struct phy_device *phydev, int devad, u32 regnum)
 }
 EXPORT_SYMBOL(phy_read_mmd);
 
+/**
+ * __phy_package_write_mmd - write MMD reg relative to PHY package base addr
+ * @phydev: The phy_device struct
+ * @addr_offset: The offset to be added to PHY package base_addr
+ * @devad: The MMD to write to
+ * @regnum: The register on the MMD to write
+ * @val: value to write to @regnum
+ *
+ * Convenience helper for writing a register of an MMD on a given PHY
+ * using the PHY package base address. The base address is added to
+ * the addr_offset value.
+ *
+ * Same calling rules as for __phy_write();
+ *
+ * NOTE: It's assumed that the entire PHY package is either C22 or C45.
+ */
+int __phy_package_write_mmd(struct phy_device *phydev,
+                            unsigned int addr_offset, int devad,
+                            u32 regnum, u16 val)
+{
+        int addr = phy_package_address(phydev, addr_offset);
+
+        if (addr < 0)
+                return addr;
+
+        if (regnum > (u16)~0 || devad > 32)
+                return -EINVAL;
+
+        return mmd_phy_write(phydev->mdio.bus, addr, phydev->is_c45, devad,
+                             regnum, val);
+}
+EXPORT_SYMBOL(__phy_package_write_mmd);
+
+static int mmd_phy_write(struct mii_bus *bus, int phy_addr, bool is_c45,
+                         int devad, u32 regnum, u16 val)
+{
+        if (is_c45)
+                return __mdiobus_c45_write(bus, phy_addr, devad, regnum, val);
+
+        mmd_phy_indirect(bus, phy_addr, devad, regnum);
+        /* Write the data into MMD's selected register */
+        return __mdiobus_write(bus, phy_addr, MII_MMD_DATA, val);
+}
+
 /**
  * __phy_write_mmd - Convenience function for writing a register
  * on an MMD on a given PHY.
@@ -654,6 +713,38 @@ int phy_write_mmd(struct phy_device *phydev, int devad, u32 regnum, u16 val)
 }
 EXPORT_SYMBOL(phy_write_mmd);
 
+/**
+ * __phy_package_read_mmd - read MMD reg relative to PHY package base addr
+ * @phydev: The phy_device struct
+ * @addr_offset: The offset to be added to PHY package base_addr
+ * @devad: The MMD to read from
+ * @regnum: The register on the MMD to read
+ *
+ * Convenience helper for reading a register of an MMD on a given PHY
+ * using the PHY package base address. The base address is added to
+ * the addr_offset value.
+ *
+ * Same calling rules as for __phy_read();
+ *
+ * NOTE: It's assumed that the entire PHY package is either C22 or C45.
+ */
+int __phy_package_read_mmd(struct phy_device *phydev,
+                           unsigned int addr_offset, int devad,
+                           u32 regnum)
+{
+        int addr = phy_package_address(phydev, addr_offset);
+
+        if (addr < 0)
+                return addr;
+
+        if (regnum > (u16)~0 || devad > 32)
+                return -EINVAL;
+
+        return mmd_phy_read(phydev->mdio.bus, addr, phydev->is_c45, devad,
+                            regnum);
+}
+EXPORT_SYMBOL(__phy_package_read_mmd);
+
 /**
  * phy_modify_changed - Function for modifying a PHY register
  * @phydev: the phy_device struct
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 8232b51a0a2d..64b8b13f53a3 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -1655,6 +1655,65 @@ bool phy_driver_is_genphy_10g(struct phy_device *phydev)
 }
 EXPORT_SYMBOL_GPL(phy_driver_is_genphy_10g);
 
+/**
+ * of_phy_package_join - join a common PHY group in PHY package
+ * @phydev: target phy_device struct
+ * @priv_size: if non-zero allocate this amount of bytes for private data
+ *
+ * This is a variant of phy_package_join for PHY package defined in DT.
+ *
+ * The parent node of the @phydev is checked as a valid PHY package node
+ * structure (by matching the node name "ethernet-phy-package") and the
+ * base_addr for the PHY package is passed to phy_package_join.
+ *
+ * With this configuration the shared struct will also have the np value
+ * filled to use additional DT defined properties in PHY specific
+ * probe_once and config_init_once PHY package OPs.
+ *
+ * Returns < 0 on error, 0 on success. Esp. calling phy_package_join()
+ * with the same cookie but a different priv_size is an error. Or a parent
+ * node is not detected or is not valid or doesn't match the expected node
+ * name for PHY package.
+ */
+int of_phy_package_join(struct phy_device *phydev, size_t priv_size)
+{
+        struct device_node *node = phydev->mdio.dev.of_node;
+        struct device_node *package_node;
+        u32 base_addr;
+        int ret;
+
+        if (!node)
+                return -EINVAL;
+
+        package_node = of_get_parent(node);
+        if (!package_node)
+                return -EINVAL;
+
+        if (!of_node_name_eq(package_node, "ethernet-phy-package")) {
+                ret = -EINVAL;
+                goto exit;
+        }
+
+        if (of_property_read_u32(package_node, "reg", &base_addr)) {
+                ret = -EINVAL;
+                goto exit;
+        }
+
+        ret = phy_package_join(phydev, base_addr, priv_size);
+        if (ret)
+                goto exit;
+
+        phydev->shared->np = package_node;
+
+        return 0;
+exit:
+        of_node_put(package_node);
+        return ret;
+}
+EXPORT_SYMBOL_GPL(of_phy_package_join);
+
+
+
 /**
  * phy_package_join - join a common PHY group
  * @phydev: target phy_device struct
@@ -1759,7 +1818,7 @@ static void devm_phy_package_leave(struct device *dev, void *res)
 }
 
 /**
- * devm_phy_package_join - resource managed phy_package_join()
+ * devm_of_phy_package_join - resource managed phy_package_join()
  * @dev: device that is registering this PHY package
  * @phydev: target phy_device struct
  * @addr: cookie and PHY address for global register access
@@ -1767,10 +1826,10 @@ static void devm_phy_package_leave(struct device *dev, void *res)
  *
  * Managed phy_package_join(). Shared storage fetched by this function,
  * phy_package_leave() is automatically called on driver detach. See
- * phy_package_join() for more information.
+ * of_phy_package_join() for more information.
  */
-int devm_phy_package_join(struct device *dev, struct phy_device *phydev,
-			  int addr, size_t priv_size)
+int devm_of_phy_package_join(struct device *dev, struct phy_device *phydev,
+			     size_t priv_size)
 {
 	struct phy_device **ptr;
 	int ret;
@@ -1780,7 +1839,7 @@ int devm_phy_package_join(struct device *dev, struct phy_device *phydev,
 	if (!ptr)
 		return -ENOMEM;
 
-	ret = phy_package_join(phydev, addr, priv_size);
+	ret = of_phy_package_join(phydev, priv_size);
 
 	if (!ret) {
 		*ptr = phydev;
@@ -1791,8 +1850,45 @@ int devm_phy_package_join(struct device *dev, struct phy_device *phydev,
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(devm_of_phy_package_join);
+
+/**
+ * devm_phy_package_join - resource managed phy_package_join()
+ * @dev: device that is registering this PHY package
+ * @phydev: target phy_device struct
+ * @base_addr: cookie and base PHY address of PHY package for offset
+ *   calculation of global register access
+ * @priv_size: if non-zero allocate this amount of bytes for private data
+ *
+ * Managed phy_package_join(). Shared storage fetched by this function,
+ * phy_package_leave() is automatically called on driver detach. See
+ * phy_package_join() for more information.
+ */
+int devm_phy_package_join(struct device *dev, struct phy_device *phydev,
+                          int base_addr, size_t priv_size)
+{
+        struct phy_device **ptr;
+        int ret;
+
+        ptr = devres_alloc(devm_phy_package_leave, sizeof(*ptr),
+                           GFP_KERNEL);
+        if (!ptr)
+                return -ENOMEM;
+
+        ret = phy_package_join(phydev, base_addr, priv_size);
+
+        if (!ret) {
+                *ptr = phydev;
+                devres_add(dev, ptr);
+        } else {
+                devres_free(ptr);
+        }
+
+        return ret;
+}
 EXPORT_SYMBOL_GPL(devm_phy_package_join);
 
+
 /**
  * phy_detach - detach a PHY device from its network device
  * @phydev: target phy_device struct
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 823103b282fb..f1f0e2ea98f6 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -339,6 +339,7 @@ struct mdio_bus_stats {
  */
 struct phy_package_shared {
 	int addr;
+	struct device_node *np;
 	refcount_t refcnt;
 	unsigned long flags;
 	size_t priv_size;
@@ -1360,6 +1361,14 @@ int phy_read_mmd(struct phy_device *phydev, int devad, u32 regnum);
 	__ret; \
 })
 
+int __phy_package_read_mmd(struct phy_device *phydev,
+                           unsigned int addr_offset, int devad,
+                           u32 regnum);
+int __phy_package_write_mmd(struct phy_device *phydev,
+                            unsigned int addr_offset, int devad,
+                            u32 regnum, u16 val);
+int devm_of_phy_package_join(struct device *dev, struct phy_device *phydev,
+                             size_t priv_size);
 /*
  * __phy_read_mmd - Convenience function for reading a register
  * from an MMD on a given PHY.
@@ -2001,46 +2010,69 @@ int __phy_hwtstamp_set(struct phy_device *phydev,
 		       struct kernel_hwtstamp_config *config,
 		       struct netlink_ext_ack *extack);
 
-static inline int phy_package_read(struct phy_device *phydev, u32 regnum)
+static inline int phy_package_address(struct phy_device *phydev,
+                                      unsigned int addr_offset)
 {
-	struct phy_package_shared *shared = phydev->shared;
+        struct phy_package_shared *shared = phydev->shared;
+        u8 base_addr = shared->addr;
 
-	if (!shared)
-		return -EIO;
+        if (addr_offset >= PHY_MAX_ADDR - base_addr)
+                return -EIO;
 
-	return mdiobus_read(phydev->mdio.bus, shared->addr, regnum);
+        /* we know that addr will be in the range 0..31 and thus the
+         * implicit cast to a signed int is not a problem.
+         */
+        return base_addr + addr_offset;
 }
 
-static inline int __phy_package_read(struct phy_device *phydev, u32 regnum)
+static inline int phy_package_read(struct phy_device *phydev,
+				unsigned int addr_offset, u32 regnum)
 {
-	struct phy_package_shared *shared = phydev->shared;
+	int addr = phy_package_address(phydev, addr_offset);
 
-	if (!shared)
-		return -EIO;
+        if (addr < 0)
+                return addr;
 
-	return __mdiobus_read(phydev->mdio.bus, shared->addr, regnum);
+
+        return __mdiobus_read(phydev->mdio.bus, addr, regnum);
+}
+
+static inline int __phy_package_read(struct phy_device *phydev,
+                                     unsigned int addr_offset, u32 regnum)
+{
+	int addr = phy_package_address(phydev, addr_offset);
+
+        if (addr < 0)
+                return addr;
+
+
+	return __mdiobus_read(phydev->mdio.bus, addr, regnum);
 }
 
 static inline int phy_package_write(struct phy_device *phydev,
+				    unsigned int addr_offset, 
 				    u32 regnum, u16 val)
 {
-	struct phy_package_shared *shared = phydev->shared;
+	int addr = phy_package_address(phydev, addr_offset);
 
-	if (!shared)
-		return -EIO;
+        if (addr < 0)
+                return addr;
+
+
+        return __mdiobus_read(phydev->mdio.bus, addr, regnum);
 
-	return mdiobus_write(phydev->mdio.bus, shared->addr, regnum, val);
 }
 
 static inline int __phy_package_write(struct phy_device *phydev,
+				      unsigned int addr_offset, 
 				      u32 regnum, u16 val)
 {
-	struct phy_package_shared *shared = phydev->shared;
+	int addr = phy_package_address(phydev, addr_offset);
 
-	if (!shared)
-		return -EIO;
+        if (addr < 0)
+                return addr;
 
-	return __mdiobus_write(phydev->mdio.bus, shared->addr, regnum, val);
+	return __mdiobus_write(phydev->mdio.bus, addr, regnum, val);
 }
 
 static inline bool __phy_package_set_once(struct phy_device *phydev,
-- 
2.34.1

