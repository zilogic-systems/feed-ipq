From c4bdd039177a9e680219b7f447ff4098b92bf08b Mon Sep 17 00:00:00 2001
From: Nidhi Jain <quic_nidhjain@quicinc.com>
Date: Tue, 12 Nov 2024 14:26:31 +0530
Subject: [PATCH] cfg80211: Send link id in channel_switch ops

Currently, during channel switch, no link id information is passed down.
In order to support channel switch during Multi Link Operation, it is
required to pass link id as well.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 4ace04c0bdbde3b028ec0a5a3be2471cdb1efb67)
Link: https://msgid.link/20240130140918.1172387-2-quic_adisi@quicinc.com
Change-Id: I72040a3a45e7c8530a47bde0cf9e2f1f1e7b2f84
Signed-off-by: Nidhi Jain <quic_nidhjain@quicinc.com>
---
 include/net/cfg80211.h | 3 +++
 net/wireless/nl80211.c | 2 ++
 net/wireless/trace.h   | 7 +++++--
 3 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 569066b06102..7d6423d0f889 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1427,6 +1427,8 @@ struct cfg80211_ap_settings {
  * @punct_bitmap: Preamble puncturing bitmap. Each bit represents
  *	a 20 MHz channel, lowest bit corresponding to the lowest channel.
  *	Bit set to 1 indicates that the channel is punctured.
+ * @link_id: defines the link on which channel switch is expected during
+ *	MLO. 0 in case of non-MLO.
  */
 struct cfg80211_csa_settings {
 	struct cfg80211_chan_def chandef;
@@ -1440,6 +1442,7 @@ struct cfg80211_csa_settings {
 	bool block_tx;
 	u8 count;
 	u16 punct_bitmap;
+	u8 link_id;
 };
 
 /**
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index f6700be7b8a5..3a3c2c241f89 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -10380,6 +10380,8 @@ static int nl80211_channel_switch(struct sk_buff *skb, struct genl_info *info)
 	}
 
 	wdev_lock(wdev);
+
+	params.link_id = link_id;
 	err = rdev_channel_switch(rdev, dev, &params);
 	wdev_unlock(wdev);
 
diff --git a/net/wireless/trace.h b/net/wireless/trace.h
index b899287f5337..195f09327848 100644
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -2327,6 +2327,7 @@ TRACE_EVENT(rdev_channel_switch,
 		__field(u8, count)
 		__dynamic_array(u16, bcn_ofs, params->n_counter_offsets_beacon)
 		__dynamic_array(u16, pres_ofs, params->n_counter_offsets_presp)
+		__field(u8, link_id)
 	),
 	TP_fast_assign(
 		WIPHY_ASSIGN;
@@ -2344,11 +2345,13 @@ TRACE_EVENT(rdev_channel_switch,
 			memcpy(__get_dynamic_array(pres_ofs),
 			       params->counter_offsets_presp,
 			       params->n_counter_offsets_presp * sizeof(u16));
+		__entry->link_id = params->link_id;
 	),
 	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", " CHAN_DEF_PR_FMT
-		  ", block_tx: %d, count: %u, radar_required: %d",
+		  ", block_tx: %d, count: %u, radar_required: %d, link_id: %d",
 		  WIPHY_PR_ARG, NETDEV_PR_ARG, CHAN_DEF_PR_ARG,
-		  __entry->block_tx, __entry->count, __entry->radar_required)
+		  __entry->block_tx, __entry->count, __entry->radar_required,
+		  __entry->link_id)
 );
 
 TRACE_EVENT(rdev_set_qos_map,
-- 
2.34.1

