From f7eb676d875a04b74f879d531e064a00cb182426 Mon Sep 17 00:00:00 2001
From: Gurumoorthy Santhakumar <quic_gsanthak@quicinc.com>
Date: Wed, 13 Nov 2024 13:14:08 +0530
Subject: [PATCH] driver: firmware: scm: add arch specific milestone bit

Add support for architecture-specific milestone bits in the
firmware driver. BIT(8) is used as the milestone marker for
IPQ9574 and IPQ5332, while BIT(12) is used for IPQ5424.
These milestone bits are cleared on successful boot.

Change-Id: I6dceac7add22d33b801bea5d1821468abd5f7dd0
Signed-off-by: Gurumoorthy Santhakumar <quic_gsanthak@quicinc.com>
---
 drivers/firmware/qcom_scm.c | 34 +++++++++++++++++++++++-----------
 drivers/firmware/qcom_scm.h |  4 ++++
 2 files changed, 27 insertions(+), 11 deletions(-)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 51fd2b7dca4b..9272109ba279 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -3262,6 +3262,7 @@ static ssize_t hlos_done_show(struct device *device,
 {
 	u32 val;
 	int ret;
+	struct scm_priv_data *data = dev_get_drvdata(device);
 
 	ret = qcom_scm_io_readl(__scm->dload_mode_addr, &val);
 	if (ret) {
@@ -3270,7 +3271,7 @@ static ssize_t hlos_done_show(struct device *device,
 		return -EINVAL;
 	}
 
-	return sysfs_emit(buf, "%d\n", (val & HLOS_MILESTONE_BIT) ? 1 : 0);
+	return sysfs_emit(buf, "%d\n", (val & data->milestone_mask) ? 1 : 0);
 }
 
 static ssize_t hlos_done_store(struct device *device,
@@ -3280,6 +3281,7 @@ static ssize_t hlos_done_store(struct device *device,
 	unsigned long input;
 	u32 val;
 	int ret;
+	struct scm_priv_data *data = dev_get_drvdata(device);
 
 	if (kstrtoul(buf, 0, &input))
 		return -EINVAL;
@@ -3294,7 +3296,7 @@ static ssize_t hlos_done_store(struct device *device,
 		return -EINVAL;
 	}
 
-	val &= (~HLOS_MILESTONE_BIT);
+	val &= ~(data->milestone_mask);
 
 	ret = qcom_scm_io_writel(__scm->dload_mode_addr, val);
 	if (ret) {
@@ -3426,7 +3428,7 @@ static int qcom_scm_probe(struct platform_device *pdev)
 {
 	struct qcom_scm *scm;
 	int irq, ret;
-	unsigned long data;
+	const struct scm_priv_data *data;
 
 	scm = devm_kzalloc(&pdev->dev, sizeof(*scm), GFP_KERNEL);
 	if (!scm)
@@ -3442,8 +3444,8 @@ static int qcom_scm_probe(struct platform_device *pdev)
 	if (ret < 0)
 		return ret;
 
-	data = (unsigned long)of_device_get_match_data(&pdev->dev);
-	dev_set_drvdata(&pdev->dev, (unsigned long *)data);
+	data = of_device_get_match_data(&pdev->dev);
+	dev_set_drvdata(&pdev->dev, (void *)data);
 
 	ret = of_property_read_u32(pdev->dev.of_node, "hvc-log-cmd-id", &scm->hvc_log_cmd_id);
 	if (ret)
@@ -3514,9 +3516,9 @@ static int qcom_scm_probe(struct platform_device *pdev)
 		qcom_scm_set_download_mode(true);
 	}
 	else {
-		if (data & SDI_DISABLE)
+		if (data->flag & SDI_DISABLE)
 			qcom_scm_sdi_disable(__scm->dev);
-		if (data & ABNORMAL_MAGIC)
+		if (data->flag & ABNORMAL_MAGIC)
 			qcom_scm_set_abnormal_magic(true);
 	}
 
@@ -3525,14 +3527,24 @@ static int qcom_scm_probe(struct platform_device *pdev)
 
 static void qcom_scm_shutdown(struct platform_device *pdev)
 {
-	unsigned long data = (unsigned long)dev_get_drvdata(&pdev->dev);
+	struct scm_priv_data *data = dev_get_drvdata(&pdev->dev);
 
 	/* Clean shutdown, disable download mode to allow normal restart */
 	qcom_scm_set_download_mode(false);
-	if (data & ABNORMAL_MAGIC)
+	if (data->flag & ABNORMAL_MAGIC)
 		qcom_scm_set_abnormal_magic(false);
 }
 
+struct scm_priv_data ipq9574_data = {
+	.flag = (SDI_DISABLE | ABNORMAL_MAGIC),
+	.milestone_mask = BIT(8)
+};
+
+struct scm_priv_data ipq5424_data = {
+	.flag = (SDI_DISABLE | ABNORMAL_MAGIC),
+	.milestone_mask = BIT(12)
+};
+
 static const struct of_device_id qcom_scm_dt_match[] = {
 	{ .compatible = "qcom,scm" },
 
@@ -3540,8 +3552,8 @@ static const struct of_device_id qcom_scm_dt_match[] = {
 	{ .compatible = "qcom,scm-apq8064" },
 	{ .compatible = "qcom,scm-apq8084" },
 	{ .compatible = "qcom,scm-ipq4019" },
-	{ .compatible = "qcom,scm-ipq9574", .data = (void *)(SDI_DISABLE | ABNORMAL_MAGIC)},
-	{ .compatible = "qcom,scm-ipq5424",},
+	{ .compatible = "qcom,scm-ipq9574", .data = &ipq9574_data},
+	{ .compatible = "qcom,scm-ipq5424", .data = &ipq5424_data},
 	{ .compatible = "qcom,scm-msm8953" },
 	{ .compatible = "qcom,scm-msm8974" },
 	{ .compatible = "qcom,scm-msm8996" },
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index 4e55d955cdac..6d28485edb02 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -266,4 +266,8 @@ static inline int qcom_scm_remap_error(int err)
 	return -EINVAL;
 }
 
+struct scm_priv_data {
+	u32 flag;
+	u32 milestone_mask;
+};
 #endif
-- 
2.34.1

