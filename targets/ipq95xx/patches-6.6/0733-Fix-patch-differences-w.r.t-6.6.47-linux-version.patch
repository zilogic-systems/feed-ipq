From 96cf6de694a997eefc19276ff72dd54e39f5a81e Mon Sep 17 00:00:00 2001
From: Aravind Mosam <amosam@qti.qualcomm.com>
Date: Wed, 20 Nov 2024 00:52:42 +0530
Subject: [PATCH] Fix patch differences w.r.t 6.6.47 linux version

Change-Id: I6418d22dfe763351c8a9b000509e716482b66dd6
Signed-off-by: Aravind Mosam <amosam@qti.qualcomm.com>
---
 net/bridge/br_input.c |  9 +++------
 net/ethernet/eth.c    | 20 +++++++++++++++-----
 2 files changed, 18 insertions(+), 11 deletions(-)

diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 9a4225ca7cb5..3ad65c2a2947 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -73,8 +73,6 @@ int br_pass_frame_up(struct sk_buff *skb)
 	br_multicast_count(br, NULL, skb, br_multicast_igmp_type(skb),
 			   BR_MCAST_DIR_TX);
 
-	BR_INPUT_SKB_CB(skb)->promisc = promisc;
-
 	return BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN,
 		       dev_net(indev), NULL, skb, indev, NULL,
 		       br_netif_receive_skb);
@@ -151,8 +149,7 @@ int br_handle_frame_finish(struct net *net, struct sock *sk, struct sk_buff *skb
 	if (p->flags & BR_LEARNING)
 		br_fdb_update(br, p, eth_hdr(skb)->h_source, vid, 0);
 
-	promisc = !!(br->dev->flags & IFF_PROMISC);
-	local_rcv = promisc;
+	local_rcv = !!(br->dev->flags & IFF_PROMISC);
 
 	if (is_multicast_ether_addr(eth_hdr(skb)->h_dest)) {
 		/* by definition the broadcast is also a multicast address */
@@ -234,7 +231,7 @@ int br_handle_frame_finish(struct net *net, struct sock *sk, struct sk_buff *skb
 		unsigned long now = jiffies;
 
 		if (test_bit(BR_FDB_LOCAL, &dst->flags))
-			return br_pass_frame_up(skb, false);
+			return br_pass_frame_up(skb);
 
 		if (now != dst->used)
 			dst->used = now;
@@ -253,7 +250,7 @@ int br_handle_frame_finish(struct net *net, struct sock *sk, struct sk_buff *skb
 
 out1:
 	if (local_rcv)
-		return br_pass_frame_up(skb, promisc);
+		return br_pass_frame_up(skb);
 
 out:
 	return 0;
diff --git a/net/ethernet/eth.c b/net/ethernet/eth.c
index 3a1c3bd31701..70558d830f77 100644
--- a/net/ethernet/eth.c
+++ b/net/ethernet/eth.c
@@ -182,7 +182,21 @@ __be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev)
 	eth = (struct ethhdr *)skb->data;
 	skb_pull_inline(skb, ETH_HLEN);
 
-	eth_skb_pkt_type(skb, dev);
+	if (unlikely(!ether_addr_equal_64bits(eth->h_dest,
+					      dev->dev_addr))) {
+		if (unlikely(is_multicast_ether_addr_64bits(eth->h_dest))) {
+			if (ether_addr_equal_64bits(eth->h_dest, dev->broadcast))
+				skb->pkt_type = PACKET_BROADCAST;
+			else
+				skb->pkt_type = PACKET_MULTICAST;
+		} else {
+			skb->pkt_type = PACKET_OTHERHOST;
+		}
+
+		if (eth_check_local_mask(eth->h_dest, dev->dev_addr,
+					 dev->local_addr_mask))
+			skb->gro_skip = 1;
+	}
 
 	/*
 	 * Some variants of DSA tagging don't have an ethertype field
@@ -437,10 +451,6 @@ struct sk_buff *eth_gro_receive(struct list_head *head, struct sk_buff *skb)
 			NAPI_GRO_CB(p)->same_flow = 0;
 			continue;
 		}
-
-		if (eth_check_local_mask(eth->h_dest, dev->dev_addr,
-					 dev->local_addr_mask))
-			skb->gro_skip = 1;
 	}
 
 	type = eh->h_proto;
-- 
2.34.1

