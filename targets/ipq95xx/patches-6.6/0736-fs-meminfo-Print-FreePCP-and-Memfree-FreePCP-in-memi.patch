From 0d1716c0e9ab5e8a343df5f031ba2b6147de4b58 Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Thu, 21 Nov 2024 17:56:28 +0530
Subject: [PATCH] fs: meminfo: Print FreePCP and Memfree+FreePCP in meminfo

MemFree in meminfo does not account for Free Per-CPU-Pageset(PCP)
and this leads to MemFree showing different numbers on every boot.

Add FreePCP and MemFree+FreePCP values to meminfo output to
account for FreePCP memory also.

Change-Id: Ibe10ba365e4566f4e5887697d699c262793ba062
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 fs/proc/meminfo.c | 38 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/fs/proc/meminfo.c b/fs/proc/meminfo.c
index 45af9a989d40..4249e874ef51 100644
--- a/fs/proc/meminfo.c
+++ b/fs/proc/meminfo.c
@@ -13,6 +13,7 @@
 #include <linux/swap.h>
 #include <linux/vmstat.h>
 #include <linux/atomic.h>
+#include <linux/cpuset.h>
 #include <linux/vmalloc.h>
 #ifdef CONFIG_CMA
 #include <linux/cma.h>
@@ -21,6 +22,8 @@
 #include <asm/page.h>
 #include "internal.h"
 
+#define MEM_INFO_FILTER_NODES (0x0001u)
+
 void __attribute__((weak)) arch_report_meminfo(struct seq_file *m)
 {
 }
@@ -31,6 +34,26 @@ static void show_val_kb(struct seq_file *m, const char *s, unsigned long num)
 	seq_write(m, " kB\n", 4);
 }
 
+/*
+ * Determine whether the node should be displayed or not, depending on whether
+ * SHOW_MEM_FILTER_NODES was passed to show_free_areas().
+ */
+static bool show_mem_node_skip(unsigned int flags, int nid, nodemask_t *nodemask)
+{
+	if (!(flags & MEM_INFO_FILTER_NODES))
+		return false;
+
+	/*
+	 * no node mask - aka implicit memory numa policy. Do not bother with
+	 * the synchronization - read_mems_allowed_begin - because we do not
+	 * have to be precise here.
+	 */
+	if (!nodemask)
+		nodemask = &cpuset_current_mems_allowed;
+
+	return !node_isset(nid, *nodemask);
+}
+
 static int meminfo_proc_show(struct seq_file *m, void *v)
 {
 	struct sysinfo i;
@@ -40,6 +63,9 @@ static int meminfo_proc_show(struct seq_file *m, void *v)
 	unsigned long pages[NR_LRU_LISTS];
 	unsigned long sreclaimable, sunreclaim;
 	int lru;
+	unsigned long free_pcp = 0;
+	struct zone *zone;
+	int cpu;
 
 	si_meminfo(&i);
 	si_swapinfo(&i);
@@ -57,6 +83,16 @@ static int meminfo_proc_show(struct seq_file *m, void *v)
 	sreclaimable = global_node_page_state_pages(NR_SLAB_RECLAIMABLE_B);
 	sunreclaim = global_node_page_state_pages(NR_SLAB_UNRECLAIMABLE_B);
 
+	for_each_populated_zone(zone) {
+		if (zone_idx(zone) > MAX_NR_ZONES - 1)
+			continue;
+		if (show_mem_node_skip(0, zone_to_nid(zone), NULL))
+			continue;
+
+		for_each_online_cpu(cpu)
+			free_pcp += per_cpu_ptr(zone->per_cpu_pageset, cpu)->count;
+	}
+
 	show_val_kb(m, "MemTotal:       ", i.totalram);
 	show_val_kb(m, "MemFree:        ", i.freeram);
 	show_val_kb(m, "MemAvailable:   ", available);
@@ -132,6 +168,8 @@ static int meminfo_proc_show(struct seq_file *m, void *v)
 	show_val_kb(m, "VmallocUsed:    ", vmalloc_nr_pages());
 	show_val_kb(m, "VmallocChunk:   ", 0ul);
 	show_val_kb(m, "Percpu:         ", pcpu_nr_pages());
+	show_val_kb(m, "FreePCP:        ", free_pcp);
+	show_val_kb(m, "MemFree+FreePCP ", i.freeram + free_pcp);
 
 	memtest_report_meminfo(m);
 
-- 
2.34.1

