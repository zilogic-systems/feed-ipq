From 338e57d39b11327c780c0709d7bad2d7f6d728ab Mon Sep 17 00:00:00 2001
From: Shwetha G K <quic_kshwetha@quicinc.com>
Date: Wed, 20 Nov 2024 21:28:00 +0530
Subject: [PATCH] cfg80211: Fix the scan resource busy issue

When mldX / athX is dev_close from netifd, notifier call
does the abort of pending scan_req if any. After aborting,
though there is no requirement of sending scan_msg to
application, cfg is preparing the scan msg and keeping it
in kernel forever as driver can not send the scan_done
since netdev is in down state. This causes the further
scan requests from application to fail with Resource busy
(-16/-EBUSY) error, after the netdev is brought UP back.

To fix this scenario, abort the scan on sta interface as
part of cfg80211_remove_links. This informs driver that
the interface going down, and no need to continue scan
further. Upon this,

1. If driver sends ack to abort scan & if its completed
first before NETDEV_DOWN, work queue itself sends scan
abort status message to application.
2. If driver could not cancel the scan immediately & could
not ack back to cfg, NETDEV_DOWN completes & cfg itself
aborts scan & consume the same as the netdev is already in
down state and work queue will not be scheduled for this
scan request further
3. If driver itself aborts the scan & initiates dev_close
of the interface, work_queue is scheduled first, and if
NETDEV_DOWN completed immediately, the API waits for the
work queue to post the rdev->scan_msg to application

Change-Id: Ic2124590d79dcca48b3251b9ed9f8d026133bd0f
Signed-off-by: Shwetha G K <quic_kshwetha@quicinc.com>
---
 net/wireless/scan.c | 19 ++++++++++++++-----
 net/wireless/util.c | 12 ++++++++++++
 2 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/net/wireless/scan.c b/net/wireless/scan.c
index 74db51348a7f..0a608c4fad9b 100644
--- a/net/wireless/scan.c
+++ b/net/wireless/scan.c
@@ -1082,16 +1082,25 @@ void ___cfg80211_scan_done(struct cfg80211_registered_device *rdev,
 
 	dev_put(wdev->netdev);
 
+	/* If scan aborted due to netdev down completed after scan_done
+	 * work queue scheduled, hold the scan_msg.
+	 * If scan_done work queue not scheduled but netdev_down completed
+	 * consume skb as this is expected scenario due to rdev_abort_scan
+	 * in cfg80211_remove_links.
+	 * If send_message is set, send the scan msg over nl
+	 */
+	if (!send_message && rdev->scan_req->notified)
+		rdev->scan_msg = msg;
+	else if (!send_message)
+		consume_skb(msg);
+	else
+		nl80211_send_scan_msg(rdev, msg);
+
 	kfree(rdev->int_scan_req);
 	rdev->int_scan_req = NULL;
 
 	kfree(rdev->scan_req);
 	rdev->scan_req = NULL;
-
-	if (!send_message)
-		rdev->scan_msg = msg;
-	else
-		nl80211_send_scan_msg(rdev, msg);
 }
 
 void __cfg80211_scan_done(struct wiphy *wiphy, struct wiphy_work *wk)
diff --git a/net/wireless/util.c b/net/wireless/util.c
index f1c54a3ccd4f..7afa3a3b6f92 100644
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -2711,6 +2711,18 @@ void cfg80211_remove_link(struct wireless_dev *wdev, unsigned int link_id)
 void cfg80211_remove_links(struct wireless_dev *wdev)
 {
 	unsigned int link_id;
+	struct cfg80211_registered_device *rdev;
+
+	rdev = wiphy_to_rdev(wdev->wiphy);
+
+	/* if sta, abort any on going scan, so that, driver cancels it
+	 * as the scan results are no longer needed.
+	 */
+	if (wdev->iftype == NL80211_IFTYPE_STATION &&
+	    rdev->scan_req &&
+	    !rdev->scan_req->notified &&
+	    rdev->scan_req->wdev == wdev)
+		rdev_abort_scan(rdev, wdev);
 
 	/*
 	 * links are controlled by upper layers (userspace/cfg)
-- 
2.34.1

